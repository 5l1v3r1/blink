!function(e){var t={};function r(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(o,i,function(t){return e[t]}.bind(null,i));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=14)}([function(e,t,r){"use strict";e.exports=r(7)},function(e,t,r){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=r(6)},function(e,t,r){"use strict";var o=function(e){};e.exports=function(e,t,r,i,n,s,a,l){if(o(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[r,i,n,s,a,l],h=0;(c=new Error(t.replace(/%s/g,(function(){return u[h++]})))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,r){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function s(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach((function(e){o[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,a,l=s(e),c=1;c<arguments.length;c++){for(var u in r=Object(arguments[c]))i.call(r,u)&&(l[u]=r[u]);if(o){a=o(r);for(var h=0;h<a.length;h++)n.call(r,a[h])&&(l[a[h]]=r[a[h]])}}return l}},function(e,t,r){"use strict";e.exports={}},function(e,t,r){"use strict";function o(e){return function(){return e}}var i=function(){};i.thatReturns=o,i.thatReturnsFalse=o(!1),i.thatReturnsTrue=o(!0),i.thatReturnsNull=o(null),i.thatReturnsThis=function(){return this},i.thatReturnsArgument=function(e){return e},e.exports=i},function(e,t,r){"use strict";
/** @license React v16.4.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var o=r(2),i=r(0),n=r(8),s=r(3),a=r(5),l=r(9),c=r(10),u=r(11),h=r(4);function d(e){for(var t=arguments.length-1,r="https://reactjs.org/docs/error-decoder.html?invariant="+e,i=0;i<t;i++)r+="&args[]="+encodeURIComponent(arguments[i+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",r)}function p(e,t,r,o,i,n,s,a,l){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(r,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}i||d("227");var f={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,r,o,i,n,s,a,l){p.apply(f,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,r,o,i,n,s,a,l){if(f.invokeGuardedCallback.apply(this,arguments),f.hasCaughtError()){var c=f.clearCaughtError();f._hasRethrowError||(f._hasRethrowError=!0,f._rethrowError=c)}},rethrowCaughtError:function(){return g.apply(f,arguments)},hasCaughtError:function(){return f._hasCaughtError},clearCaughtError:function(){if(f._hasCaughtError){var e=f._caughtError;return f._caughtError=null,f._hasCaughtError=!1,e}d("198")}};function g(){if(f._hasRethrowError){var e=f._rethrowError;throw f._rethrowError=null,f._hasRethrowError=!1,e}}var m=null,y={};function b(){if(m)for(var e in y){var t=y[e],r=m.indexOf(e);if(-1<r||d("96",e),!w[r])for(var o in t.extractEvents||d("97",e),w[r]=t,r=t.eventTypes){var i=void 0,n=r[o],s=t,a=o;C.hasOwnProperty(a)&&d("99",a),C[a]=n;var l=n.phasedRegistrationNames;if(l){for(i in l)l.hasOwnProperty(i)&&_(l[i],s,a);i=!0}else n.registrationName?(_(n.registrationName,s,a),i=!0):i=!1;i||d("98",o,e)}}}function _(e,t,r){A[e]&&d("100",e),A[e]=t,v[e]=t.eventTypes[r].dependencies}var w=[],C={},A={},v={};function S(e){m&&d("101"),m=Array.prototype.slice.call(e),b()}function k(e){var t,r=!1;for(t in e)if(e.hasOwnProperty(t)){var o=e[t];y.hasOwnProperty(t)&&y[t]===o||(y[t]&&d("102",t),y[t]=o,r=!0)}r&&b()}var T={plugins:w,eventNameDispatchConfigs:C,registrationNameModules:A,registrationNameDependencies:v,possibleRegistrationNames:null,injectEventPluginOrder:S,injectEventPluginsByName:k},x=null,P=null,E=null;function R(e,t,r,o){t=e.type||"unknown-event",e.currentTarget=E(o),f.invokeGuardedCallbackAndCatchFirstError(t,r,void 0,e),e.currentTarget=null}function M(e,t){return null==t&&d("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function N(e,t,r){Array.isArray(e)?e.forEach(t,r):e&&t.call(r,e)}var F=null;function I(e,t){if(e){var r=e._dispatchListeners,o=e._dispatchInstances;if(Array.isArray(r))for(var i=0;i<r.length&&!e.isPropagationStopped();i++)R(e,t,r[i],o[i]);else r&&R(e,t,r,o);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function D(e){return I(e,!0)}function V(e){return I(e,!1)}var O={injectEventPluginOrder:S,injectEventPluginsByName:k};function B(e,t){var r=e.stateNode;if(!r)return null;var o=x(r);if(!o)return null;r=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}return e?null:(r&&"function"!=typeof r&&d("231",t,typeof r),r)}function K(e,t){null!==e&&(F=M(F,e)),e=F,F=null,e&&(N(e,t?D:V),F&&d("95"),f.rethrowCaughtError())}function U(e,t,r,o){for(var i=null,n=0;n<w.length;n++){var s=w[n];s&&(s=s.extractEvents(e,t,r,o))&&(i=M(i,s))}K(i,!1)}var L={injection:O,getListener:B,runEventsInBatch:K,runExtractedEventsInBatch:U},z=Math.random().toString(36).slice(2),W="__reactInternalInstance$"+z,Q="__reactEventHandlers$"+z;function G(e){if(e[W])return e[W];for(;!e[W];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[W]).tag||6===e.tag?e:null}function H(e){if(5===e.tag||6===e.tag)return e.stateNode;d("33")}function j(e){return e[Q]||null}var Z={precacheFiberNode:function(e,t){t[W]=e},getClosestInstanceFromNode:G,getInstanceFromNode:function(e){return!(e=e[W])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:H,getFiberCurrentPropsFromNode:j,updateFiberProps:function(e,t){e[Q]=t}};function q(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function J(e,t,r){for(var o=[];e;)o.push(e),e=q(e);for(e=o.length;0<e--;)t(o[e],"captured",r);for(e=0;e<o.length;e++)t(o[e],"bubbled",r)}function Y(e,t,r){(t=B(e,r.dispatchConfig.phasedRegistrationNames[t]))&&(r._dispatchListeners=M(r._dispatchListeners,t),r._dispatchInstances=M(r._dispatchInstances,e))}function X(e){e&&e.dispatchConfig.phasedRegistrationNames&&J(e._targetInst,Y,e)}function $(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;J(t=t?q(t):null,Y,e)}}function ee(e,t,r){e&&r&&r.dispatchConfig.registrationName&&(t=B(e,r.dispatchConfig.registrationName))&&(r._dispatchListeners=M(r._dispatchListeners,t),r._dispatchInstances=M(r._dispatchInstances,e))}function te(e){e&&e.dispatchConfig.registrationName&&ee(e._targetInst,null,e)}function re(e){N(e,X)}function oe(e,t,r,o){if(r&&o)e:{for(var i=r,n=o,s=0,a=i;a;a=q(a))s++;a=0;for(var l=n;l;l=q(l))a++;for(;0<s-a;)i=q(i),s--;for(;0<a-s;)n=q(n),a--;for(;s--;){if(i===n||i===n.alternate)break e;i=q(i),n=q(n)}i=null}else i=null;for(n=i,i=[];r&&r!==n&&(null===(s=r.alternate)||s!==n);)i.push(r),r=q(r);for(r=[];o&&o!==n&&(null===(s=o.alternate)||s!==n);)r.push(o),o=q(o);for(o=0;o<i.length;o++)ee(i[o],"bubbled",e);for(e=r.length;0<e--;)ee(r[e],"captured",t)}var ie={accumulateTwoPhaseDispatches:re,accumulateTwoPhaseDispatchesSkipTarget:function(e){N(e,$)},accumulateEnterLeaveDispatches:oe,accumulateDirectDispatches:function(e){N(e,te)}};function ne(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r["ms"+e]="MS"+t,r["O"+e]="o"+t.toLowerCase(),r}var se={animationend:ne("Animation","AnimationEnd"),animationiteration:ne("Animation","AnimationIteration"),animationstart:ne("Animation","AnimationStart"),transitionend:ne("Transition","TransitionEnd")},ae={},le={};function ce(e){if(ae[e])return ae[e];if(!se[e])return e;var t,r=se[e];for(t in r)if(r.hasOwnProperty(t)&&t in le)return ae[e]=r[t];return e}n.canUseDOM&&(le=document.createElement("div").style,"AnimationEvent"in window||(delete se.animationend.animation,delete se.animationiteration.animation,delete se.animationstart.animation),"TransitionEvent"in window||delete se.transitionend.transition);var ue=ce("animationend"),he=ce("animationiteration"),de=ce("animationstart"),pe=ce("transitionend"),fe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ge=null;function me(){return!ge&&n.canUseDOM&&(ge="textContent"in document.documentElement?"textContent":"innerText"),ge}var ye={_root:null,_startText:null,_fallbackText:null};function be(){if(ye._fallbackText)return ye._fallbackText;var e,t,r=ye._startText,o=r.length,i=_e(),n=i.length;for(e=0;e<o&&r[e]===i[e];e++);var s=o-e;for(t=1;t<=s&&r[o-t]===i[n-t];t++);return ye._fallbackText=i.slice(e,1<t?1-t:void 0),ye._fallbackText}function _e(){return"value"in ye._root?ye._root.value:ye._root[me()]}var we="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),Ce={type:null,target:null,currentTarget:a.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function Ae(e,t,r,o){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=r,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(r):"target"===i?this.target=o:this[i]=r[i]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?a.thatReturnsTrue:a.thatReturnsFalse,this.isPropagationStopped=a.thatReturnsFalse,this}function ve(e,t,r,o){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,r,o),i}return new this(e,t,r,o)}function Se(e){e instanceof this||d("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function ke(e){e.eventPool=[],e.getPooled=ve,e.release=Se}s(Ae.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=a.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=a.thatReturnsTrue)},persist:function(){this.isPersistent=a.thatReturnsTrue},isPersistent:a.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<we.length;t++)this[we[t]]=null}}),Ae.Interface=Ce,Ae.extend=function(e){function t(){}function r(){return o.apply(this,arguments)}var o=this;t.prototype=o.prototype;var i=new t;return s(i,r.prototype),r.prototype=i,r.prototype.constructor=r,r.Interface=s({},o.Interface,e),r.extend=o.extend,ke(r),r},ke(Ae);var Te=Ae.extend({data:null}),xe=Ae.extend({data:null}),Pe=[9,13,27,32],Ee=n.canUseDOM&&"CompositionEvent"in window,Re=null;n.canUseDOM&&"documentMode"in document&&(Re=document.documentMode);var Me=n.canUseDOM&&"TextEvent"in window&&!Re,Ne=n.canUseDOM&&(!Ee||Re&&8<Re&&11>=Re),Fe=String.fromCharCode(32),Ie={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},De=!1;function Ve(e,t){switch(e){case"keyup":return-1!==Pe.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Oe(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Be=!1;var Ke={eventTypes:Ie,extractEvents:function(e,t,r,o){var i=void 0,n=void 0;if(Ee)e:{switch(e){case"compositionstart":i=Ie.compositionStart;break e;case"compositionend":i=Ie.compositionEnd;break e;case"compositionupdate":i=Ie.compositionUpdate;break e}i=void 0}else Be?Ve(e,r)&&(i=Ie.compositionEnd):"keydown"===e&&229===r.keyCode&&(i=Ie.compositionStart);return i?(Ne&&(Be||i!==Ie.compositionStart?i===Ie.compositionEnd&&Be&&(n=be()):(ye._root=o,ye._startText=_e(),Be=!0)),i=Te.getPooled(i,t,r,o),n?i.data=n:null!==(n=Oe(r))&&(i.data=n),re(i),n=i):n=null,(e=Me?function(e,t){switch(e){case"compositionend":return Oe(t);case"keypress":return 32!==t.which?null:(De=!0,Fe);case"textInput":return(e=t.data)===Fe&&De?null:e;default:return null}}(e,r):function(e,t){if(Be)return"compositionend"===e||!Ee&&Ve(e,t)?(e=be(),ye._root=null,ye._startText=null,ye._fallbackText=null,Be=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ne?null:t.data;default:return null}}(e,r))?((t=xe.getPooled(Ie.beforeInput,t,r,o)).data=e,re(t)):t=null,null===n?t:null===t?n:[n,t]}},Ue=null,Le={injectFiberControlledHostComponent:function(e){Ue=e}},ze=null,We=null;function Qe(e){if(e=P(e)){Ue&&"function"==typeof Ue.restoreControlledState||d("194");var t=x(e.stateNode);Ue.restoreControlledState(e.stateNode,e.type,t)}}function Ge(e){ze?We?We.push(e):We=[e]:ze=e}function He(){return null!==ze||null!==We}function je(){if(ze){var e=ze,t=We;if(We=ze=null,Qe(e),t)for(e=0;e<t.length;e++)Qe(t[e])}}var Ze={injection:Le,enqueueStateRestore:Ge,needsStateRestore:He,restoreStateIfNeeded:je};function qe(e,t){return e(t)}function Je(e,t,r){return e(t,r)}function Ye(){}var Xe=!1;function $e(e,t){if(Xe)return e(t);Xe=!0;try{return qe(e,t)}finally{Xe=!1,He()&&(Ye(),je())}}var et={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function tt(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!et[e.type]:"textarea"===t}function rt(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ot(e,t){return!(!n.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function it(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function nt(e){e._valueTracker||(e._valueTracker=function(e){var t=it(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),o=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var i=r.get,n=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){o=""+e,n.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return o},setValue:function(e){o=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function st(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),o="";return e&&(o=it(e)?e.checked?"true":"false":e.value),(e=o)!==r&&(t.setValue(e),!0)}var at=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,lt="function"==typeof Symbol&&Symbol.for,ct=lt?Symbol.for("react.element"):60103,ut=lt?Symbol.for("react.portal"):60106,ht=lt?Symbol.for("react.fragment"):60107,dt=lt?Symbol.for("react.strict_mode"):60108,pt=lt?Symbol.for("react.profiler"):60114,ft=lt?Symbol.for("react.provider"):60109,gt=lt?Symbol.for("react.context"):60110,mt=lt?Symbol.for("react.async_mode"):60111,yt=lt?Symbol.for("react.forward_ref"):60112,bt=lt?Symbol.for("react.timeout"):60113,_t="function"==typeof Symbol&&Symbol.iterator;function wt(e){return null==e?null:"function"==typeof(e=_t&&e[_t]||e["@@iterator"])?e:null}function Ct(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case mt:return"AsyncMode";case gt:return"Context.Consumer";case ht:return"ReactFragment";case ut:return"ReactPortal";case pt:return"Profiler("+e.pendingProps.id+")";case ft:return"Context.Provider";case dt:return"StrictMode";case bt:return"Timeout"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case yt:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function At(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var r=e._debugOwner,o=e._debugSource,i=Ct(e),n=null;r&&(n=Ct(r)),i="\n    in "+(i||"Unknown")+((r=o)?" (at "+r.fileName.replace(/^.*[\\\/]/,"")+":"+r.lineNumber+")":n?" (created by "+n+")":"");break e;default:i=""}t+=i,e=e.return}while(e);return t}var vt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,St={},kt={};function Tt(e,t,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=o,this.attributeNamespace=i,this.mustUseProperty=r,this.propertyName=e,this.type=t}var xt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){xt[e]=new Tt(e,0,!1,e,null)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];xt[t]=new Tt(t,1,!1,e[1],null)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){xt[e]=new Tt(e,2,!1,e.toLowerCase(),null)})),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach((function(e){xt[e]=new Tt(e,2,!1,e,null)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){xt[e]=new Tt(e,3,!1,e.toLowerCase(),null)})),["checked","multiple","muted","selected"].forEach((function(e){xt[e]=new Tt(e,3,!0,e.toLowerCase(),null)})),["capture","download"].forEach((function(e){xt[e]=new Tt(e,4,!1,e.toLowerCase(),null)})),["cols","rows","size","span"].forEach((function(e){xt[e]=new Tt(e,6,!1,e.toLowerCase(),null)})),["rowSpan","start"].forEach((function(e){xt[e]=new Tt(e,5,!1,e.toLowerCase(),null)}));var Pt=/[\-:]([a-z])/g;function Et(e){return e[1].toUpperCase()}function Rt(e,t,r,o){var i=xt.hasOwnProperty(t)?xt[t]:null;(null!==i?0===i.type:!o&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,r,o){if(null==t||function(e,t,r,o){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,o))return!0;if(o)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,i,o)&&(r=null),o||null===i?function(e){return!!kt.hasOwnProperty(e)||!St.hasOwnProperty(e)&&(vt.test(e)?kt[e]=!0:(St[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):i.mustUseProperty?e[i.propertyName]=null===r?3!==i.type&&"":r:(t=i.attributeName,o=i.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(i=i.type)||4===i&&!0===r?"":""+r,o?e.setAttributeNS(o,t,r):e.setAttribute(t,r))))}function Mt(e,t){var r=t.checked;return s({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function Nt(e,t){var r=null==t.defaultValue?"":t.defaultValue,o=null!=t.checked?t.checked:t.defaultChecked;r=Ot(null!=t.value?t.value:r),e._wrapperState={initialChecked:o,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ft(e,t){null!=(t=t.checked)&&Rt(e,"checked",t,!1)}function It(e,t){Ft(e,t);var r=Ot(t.value);null!=r&&("number"===t.type?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r)),t.hasOwnProperty("value")?Vt(e,t.type,r):t.hasOwnProperty("defaultValue")&&Vt(e,t.type,Ot(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Dt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function Vt(e,t,r){"number"===t&&e.ownerDocument.activeElement===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function Ot(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Pt,Et);xt[t]=new Tt(t,1,!1,e,null)})),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Pt,Et);xt[t]=new Tt(t,1,!1,e,"http://www.w3.org/1999/xlink")})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Pt,Et);xt[t]=new Tt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")})),xt.tabIndex=new Tt("tabIndex",1,!1,"tabindex",null);var Bt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Kt(e,t,r){return(e=Ae.getPooled(Bt.change,e,t,r)).type="change",Ge(r),re(e),e}var Ut=null,Lt=null;function zt(e){K(e,!1)}function Wt(e){if(st(H(e)))return e}function Qt(e,t){if("change"===e)return t}var Gt=!1;function Ht(){Ut&&(Ut.detachEvent("onpropertychange",jt),Lt=Ut=null)}function jt(e){"value"===e.propertyName&&Wt(Lt)&&$e(zt,e=Kt(Lt,e,rt(e)))}function Zt(e,t,r){"focus"===e?(Ht(),Lt=r,(Ut=t).attachEvent("onpropertychange",jt)):"blur"===e&&Ht()}function qt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Wt(Lt)}function Jt(e,t){if("click"===e)return Wt(t)}function Yt(e,t){if("input"===e||"change"===e)return Wt(t)}n.canUseDOM&&(Gt=ot("input")&&(!document.documentMode||9<document.documentMode));var Xt={eventTypes:Bt,_isInputEventSupported:Gt,extractEvents:function(e,t,r,o){var i=t?H(t):window,n=void 0,s=void 0,a=i.nodeName&&i.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===i.type?n=Qt:tt(i)?Gt?n=Yt:(n=qt,s=Zt):(a=i.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(n=Jt),n&&(n=n(e,t)))return Kt(n,r,o);s&&s(e,i,t),"blur"===e&&null!=t&&(e=t._wrapperState||i._wrapperState)&&e.controlled&&"number"===i.type&&Vt(i,"number",i.value)}},$t=Ae.extend({view:null,detail:null}),er={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function tr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=er[e])&&!!t[e]}function rr(){return tr}var or=$t.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:rr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),ir=or.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),nr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},sr={eventTypes:nr,extractEvents:function(e,t,r,o){var i="mouseover"===e||"pointerover"===e,n="mouseout"===e||"pointerout"===e;if(i&&(r.relatedTarget||r.fromElement)||!n&&!i)return null;if(i=o.window===o?o:(i=o.ownerDocument)?i.defaultView||i.parentWindow:window,n?(n=t,t=(t=r.relatedTarget||r.toElement)?G(t):null):n=null,n===t)return null;var s=void 0,a=void 0,l=void 0,c=void 0;return"mouseout"===e||"mouseover"===e?(s=or,a=nr.mouseLeave,l=nr.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(s=ir,a=nr.pointerLeave,l=nr.pointerEnter,c="pointer"),e=null==n?i:H(n),i=null==t?i:H(t),(a=s.getPooled(a,n,r,o)).type=c+"leave",a.target=e,a.relatedTarget=i,(r=s.getPooled(l,t,r,o)).type=c+"enter",r.target=i,r.relatedTarget=e,oe(a,r,n,t),[a,r]}};function ar(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function lr(e){2!==ar(e)&&d("188")}function cr(e){var t=e.alternate;if(!t)return 3===(t=ar(e))&&d("188"),1===t?null:e;for(var r=e,o=t;;){var i=r.return,n=i?i.alternate:null;if(!i||!n)break;if(i.child===n.child){for(var s=i.child;s;){if(s===r)return lr(i),e;if(s===o)return lr(i),t;s=s.sibling}d("188")}if(r.return!==o.return)r=i,o=n;else{s=!1;for(var a=i.child;a;){if(a===r){s=!0,r=i,o=n;break}if(a===o){s=!0,o=i,r=n;break}a=a.sibling}if(!s){for(a=n.child;a;){if(a===r){s=!0,r=n,o=i;break}if(a===o){s=!0,o=n,r=i;break}a=a.sibling}s||d("189")}}r.alternate!==o&&d("190")}return 3!==r.tag&&d("188"),r.stateNode.current===r?e:t}function ur(e){if(!(e=cr(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var hr=Ae.extend({animationName:null,elapsedTime:null,pseudoElement:null}),dr=Ae.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),pr=$t.extend({relatedTarget:null});function fr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var gr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},mr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},yr=$t.extend({key:function(e){if(e.key){var t=gr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=fr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?mr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:rr,charCode:function(e){return"keypress"===e.type?fr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?fr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),br=or.extend({dataTransfer:null}),_r=$t.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:rr}),wr=Ae.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),Cr=or.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),Ar=[["abort","abort"],[ue,"animationEnd"],[he,"animationIteration"],[de,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[pe,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],vr={},Sr={};function kr(e,t){var r=e[0],o="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],isInteractive:t},vr[e]=t,Sr[r]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach((function(e){kr(e,!0)})),Ar.forEach((function(e){kr(e,!1)}));var Tr={eventTypes:vr,isInteractiveTopLevelEventType:function(e){return void 0!==(e=Sr[e])&&!0===e.isInteractive},extractEvents:function(e,t,r,o){var i=Sr[e];if(!i)return null;switch(e){case"keypress":if(0===fr(r))return null;case"keydown":case"keyup":e=yr;break;case"blur":case"focus":e=pr;break;case"click":if(2===r.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=or;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=br;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=_r;break;case ue:case he:case de:e=hr;break;case pe:e=wr;break;case"scroll":e=$t;break;case"wheel":e=Cr;break;case"copy":case"cut":case"paste":e=dr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=ir;break;default:e=Ae}return re(t=e.getPooled(i,t,r,o)),t}},xr=Tr.isInteractiveTopLevelEventType,Pr=[];function Er(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var r;for(r=t;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(t),t=G(r)}while(t);for(r=0;r<e.ancestors.length;r++)t=e.ancestors[r],U(e.topLevelType,t,e.nativeEvent,rt(e.nativeEvent))}var Rr=!0;function Mr(e){Rr=!!e}function Nr(e,t){if(!t)return null;var r=(xr(e)?Ir:Dr).bind(null,e);t.addEventListener(e,r,!1)}function Fr(e,t){if(!t)return null;var r=(xr(e)?Ir:Dr).bind(null,e);t.addEventListener(e,r,!0)}function Ir(e,t){Je(Dr,e,t)}function Dr(e,t){if(Rr){var r=rt(t);if(null===(r=G(r))||"number"!=typeof r.tag||2===ar(r)||(r=null),Pr.length){var o=Pr.pop();o.topLevelType=e,o.nativeEvent=t,o.targetInst=r,e=o}else e={topLevelType:e,nativeEvent:t,targetInst:r,ancestors:[]};try{$e(Er,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Pr.length&&Pr.push(e)}}}var Vr={get _enabled(){return Rr},setEnabled:Mr,isEnabled:function(){return Rr},trapBubbledEvent:Nr,trapCapturedEvent:Fr,dispatchEvent:Dr},Or={},Br=0,Kr="_reactListenersID"+(""+Math.random()).slice(2);function Ur(e){return Object.prototype.hasOwnProperty.call(e,Kr)||(e[Kr]=Br++,Or[e[Kr]]={}),Or[e[Kr]]}function Lr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function zr(e,t){var r,o=Lr(e);for(e=0;o;){if(3===o.nodeType){if(r=e+o.textContent.length,e<=t&&r>=t)return{node:o,offset:t-e};e=r}e:{for(;o;){if(o.nextSibling){o=o.nextSibling;break e}o=o.parentNode}o=void 0}o=Lr(o)}}function Wr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Qr=n.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Gr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Hr=null,jr=null,Zr=null,qr=!1;function Jr(e,t){if(qr||null==Hr||Hr!==l())return null;var r=Hr;return"selectionStart"in r&&Wr(r)?r={start:r.selectionStart,end:r.selectionEnd}:window.getSelection?r={anchorNode:(r=window.getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}:r=void 0,Zr&&c(Zr,r)?null:(Zr=r,(e=Ae.getPooled(Gr.select,jr,e,t)).type="select",e.target=Hr,re(e),e)}var Yr={eventTypes:Gr,extractEvents:function(e,t,r,o){var i,n=o.window===o?o.document:9===o.nodeType?o:o.ownerDocument;if(!(i=!n)){e:{n=Ur(n),i=v.onSelect;for(var s=0;s<i.length;s++){var a=i[s];if(!n.hasOwnProperty(a)||!n[a]){n=!1;break e}}n=!0}i=!n}if(i)return null;switch(n=t?H(t):window,e){case"focus":(tt(n)||"true"===n.contentEditable)&&(Hr=n,jr=t,Zr=null);break;case"blur":Zr=jr=Hr=null;break;case"mousedown":qr=!0;break;case"contextmenu":case"mouseup":return qr=!1,Jr(r,o);case"selectionchange":if(Qr)break;case"keydown":case"keyup":return Jr(r,o)}return null}};O.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=Z.getFiberCurrentPropsFromNode,P=Z.getInstanceFromNode,E=Z.getNodeFromInstance,O.injectEventPluginsByName({SimpleEventPlugin:Tr,EnterLeaveEventPlugin:sr,ChangeEventPlugin:Xt,SelectEventPlugin:Yr,BeforeInputEventPlugin:Ke});var Xr=void 0;Xr="object"==typeof performance&&"function"==typeof performance.now?function(){return performance.now()}:function(){return Date.now()};var $r=void 0,eo=void 0;if(n.canUseDOM){var to=[],ro=0,oo={},io=-1,no=!1,so=!1,ao=0,lo=33,co=33,uo={didTimeout:!1,timeRemaining:function(){var e=ao-Xr();return 0<e?e:0}},ho=function(e,t){if(oo[t])try{e(uo)}finally{delete oo[t]}},po="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",(function(e){if(e.source===window&&e.data===po&&(no=!1,0!==to.length)){if(0!==to.length&&(e=Xr(),!(-1===io||io>e))){io=-1,uo.didTimeout=!0;for(var t=0,r=to.length;t<r;t++){var o=to[t],i=o.timeoutTime;-1!==i&&i<=e?ho(o.scheduledCallback,o.callbackId):-1!==i&&(-1===io||i<io)&&(io=i)}}for(e=Xr();0<ao-e&&0<to.length;)e=to.shift(),uo.didTimeout=!1,ho(e.scheduledCallback,e.callbackId),e=Xr();0<to.length&&!so&&(so=!0,requestAnimationFrame(fo))}}),!1);var fo=function(e){so=!1;var t=e-ao+co;t<co&&lo<co?(8>t&&(t=8),co=t<lo?lo:t):lo=t,ao=e+co,no||(no=!0,window.postMessage(po,"*"))};$r=function(e,t){var r=-1;return null!=t&&"number"==typeof t.timeout&&(r=Xr()+t.timeout),(-1===io||-1!==r&&r<io)&&(io=r),t=++ro,to.push({scheduledCallback:e,callbackId:t,timeoutTime:r}),oo[t]=!0,so||(so=!0,requestAnimationFrame(fo)),t},eo=function(e){delete oo[e]}}else{var go=0,mo={};$r=function(e){var t=go++,r=setTimeout((function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})}));return mo[t]=r,t},eo=function(e){var t=mo[e];delete mo[e],clearTimeout(t)}}function yo(e,t){return e=s({children:void 0},t),(t=function(e){var t="";return i.Children.forEach(e,(function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)})),t}(t.children))&&(e.children=t),e}function bo(e,t,r,o){if(e=e.options,t){t={};for(var i=0;i<r.length;i++)t["$"+r[i]]=!0;for(r=0;r<e.length;r++)i=t.hasOwnProperty("$"+e[r].value),e[r].selected!==i&&(e[r].selected=i),i&&o&&(e[r].defaultSelected=!0)}else{for(r=""+r,t=null,i=0;i<e.length;i++){if(e[i].value===r)return e[i].selected=!0,void(o&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function _o(e,t){var r=t.value;e._wrapperState={initialValue:null!=r?r:t.defaultValue,wasMultiple:!!t.multiple}}function wo(e,t){return null!=t.dangerouslySetInnerHTML&&d("91"),s({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Co(e,t){var r=t.value;null==r&&(r=t.defaultValue,null!=(t=t.children)&&(null!=r&&d("92"),Array.isArray(t)&&(1>=t.length||d("93"),t=t[0]),r=""+t),null==r&&(r="")),e._wrapperState={initialValue:""+r}}function Ao(e,t){var r=t.value;null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&(e.defaultValue=r)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function vo(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var So={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function ko(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function To(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ko(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var xo=void 0,Po=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,r,o,i){MSApp.execUnsafeLocalFunction((function(){return e(t,r)}))}:e}((function(e,t){if(e.namespaceURI!==So.svg||"innerHTML"in e)e.innerHTML=t;else{for((xo=xo||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=xo.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Eo(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var Ro={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Mo=["Webkit","ms","Moz","O"];function No(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var o=0===r.indexOf("--"),i=r,n=t[r];i=null==n||"boolean"==typeof n||""===n?"":o||"number"!=typeof n||0===n||Ro.hasOwnProperty(i)&&Ro[i]?(""+n).trim():n+"px","float"===r&&(r="cssFloat"),o?e.setProperty(r,i):e[r]=i}}Object.keys(Ro).forEach((function(e){Mo.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Ro[t]=Ro[e]}))}));var Fo=s({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Io(e,t,r){t&&(Fo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&d("137",e,r()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&d("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||d("61")),null!=t.style&&"object"!=typeof t.style&&d("62",r()))}function Do(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Vo=a.thatReturns("");function Oo(e,t){var r=Ur(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=v[t];for(var o=0;o<t.length;o++){var i=t[o];if(!r.hasOwnProperty(i)||!r[i]){switch(i){case"scroll":Fr("scroll",e);break;case"focus":case"blur":Fr("focus",e),Fr("blur",e),r.blur=!0,r.focus=!0;break;case"cancel":case"close":ot(i,!0)&&Fr(i,e);break;case"invalid":case"submit":case"reset":break;default:-1===fe.indexOf(i)&&Nr(i,e)}r[i]=!0}}}function Bo(e,t,r,o){return r=9===r.nodeType?r:r.ownerDocument,o===So.html&&(o=ko(e)),o===So.html?"script"===e?((e=r.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?r.createElement(e,{is:t.is}):r.createElement(e):e=r.createElementNS(o,e),e}function Ko(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Uo(e,t,r,o){var i=Do(t,r);switch(t){case"iframe":case"object":Nr("load",e);var n=r;break;case"video":case"audio":for(n=0;n<fe.length;n++)Nr(fe[n],e);n=r;break;case"source":Nr("error",e),n=r;break;case"img":case"image":case"link":Nr("error",e),Nr("load",e),n=r;break;case"form":Nr("reset",e),Nr("submit",e),n=r;break;case"details":Nr("toggle",e),n=r;break;case"input":Nt(e,r),n=Mt(e,r),Nr("invalid",e),Oo(o,"onChange");break;case"option":n=yo(e,r);break;case"select":_o(e,r),n=s({},r,{value:void 0}),Nr("invalid",e),Oo(o,"onChange");break;case"textarea":Co(e,r),n=wo(e,r),Nr("invalid",e),Oo(o,"onChange");break;default:n=r}Io(t,n,Vo);var l,c=n;for(l in c)if(c.hasOwnProperty(l)){var u=c[l];"style"===l?No(e,u):"dangerouslySetInnerHTML"===l?null!=(u=u?u.__html:void 0)&&Po(e,u):"children"===l?"string"==typeof u?("textarea"!==t||""!==u)&&Eo(e,u):"number"==typeof u&&Eo(e,""+u):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(A.hasOwnProperty(l)?null!=u&&Oo(o,l):null!=u&&Rt(e,l,u,i))}switch(t){case"input":nt(e),Dt(e,r);break;case"textarea":nt(e),vo(e);break;case"option":null!=r.value&&e.setAttribute("value",r.value);break;case"select":e.multiple=!!r.multiple,null!=(t=r.value)?bo(e,!!r.multiple,t,!1):null!=r.defaultValue&&bo(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof n.onClick&&(e.onclick=a)}}function Lo(e,t,r,o,i){var n=null;switch(t){case"input":r=Mt(e,r),o=Mt(e,o),n=[];break;case"option":r=yo(e,r),o=yo(e,o),n=[];break;case"select":r=s({},r,{value:void 0}),o=s({},o,{value:void 0}),n=[];break;case"textarea":r=wo(e,r),o=wo(e,o),n=[];break;default:"function"!=typeof r.onClick&&"function"==typeof o.onClick&&(e.onclick=a)}Io(t,o,Vo),t=e=void 0;var l=null;for(e in r)if(!o.hasOwnProperty(e)&&r.hasOwnProperty(e)&&null!=r[e])if("style"===e){var c=r[e];for(t in c)c.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(A.hasOwnProperty(e)?n||(n=[]):(n=n||[]).push(e,null));for(e in o){var u=o[e];if(c=null!=r?r[e]:void 0,o.hasOwnProperty(e)&&u!==c&&(null!=u||null!=c))if("style"===e)if(c){for(t in c)!c.hasOwnProperty(t)||u&&u.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in u)u.hasOwnProperty(t)&&c[t]!==u[t]&&(l||(l={}),l[t]=u[t])}else l||(n||(n=[]),n.push(e,l)),l=u;else"dangerouslySetInnerHTML"===e?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(n=n||[]).push(e,""+u)):"children"===e?c===u||"string"!=typeof u&&"number"!=typeof u||(n=n||[]).push(e,""+u):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(A.hasOwnProperty(e)?(null!=u&&Oo(i,e),n||c===u||(n=[])):(n=n||[]).push(e,u))}return l&&(n=n||[]).push("style",l),n}function zo(e,t,r,o,i){"input"===r&&"radio"===i.type&&null!=i.name&&Ft(e,i),Do(r,o),o=Do(r,i);for(var n=0;n<t.length;n+=2){var s=t[n],a=t[n+1];"style"===s?No(e,a):"dangerouslySetInnerHTML"===s?Po(e,a):"children"===s?Eo(e,a):Rt(e,s,a,o)}switch(r){case"input":It(e,i);break;case"textarea":Ao(e,i);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!i.multiple,null!=(r=i.value)?bo(e,!!i.multiple,r,!1):t!==!!i.multiple&&(null!=i.defaultValue?bo(e,!!i.multiple,i.defaultValue,!0):bo(e,!!i.multiple,i.multiple?[]:"",!1))}}function Wo(e,t,r,o,i){switch(t){case"iframe":case"object":Nr("load",e);break;case"video":case"audio":for(o=0;o<fe.length;o++)Nr(fe[o],e);break;case"source":Nr("error",e);break;case"img":case"image":case"link":Nr("error",e),Nr("load",e);break;case"form":Nr("reset",e),Nr("submit",e);break;case"details":Nr("toggle",e);break;case"input":Nt(e,r),Nr("invalid",e),Oo(i,"onChange");break;case"select":_o(e,r),Nr("invalid",e),Oo(i,"onChange");break;case"textarea":Co(e,r),Nr("invalid",e),Oo(i,"onChange")}for(var n in Io(t,r,Vo),o=null,r)if(r.hasOwnProperty(n)){var s=r[n];"children"===n?"string"==typeof s?e.textContent!==s&&(o=["children",s]):"number"==typeof s&&e.textContent!==""+s&&(o=["children",""+s]):A.hasOwnProperty(n)&&null!=s&&Oo(i,n)}switch(t){case"input":nt(e),Dt(e,r);break;case"textarea":nt(e),vo(e);break;case"select":case"option":break;default:"function"==typeof r.onClick&&(e.onclick=a)}return o}function Qo(e,t){return e.nodeValue!==t}var Go={createElement:Bo,createTextNode:Ko,setInitialProperties:Uo,diffProperties:Lo,updateProperties:zo,diffHydratedProperties:Wo,diffHydratedText:Qo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,r){switch(t){case"input":if(It(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var o=r[t];if(o!==e&&o.form===e.form){var i=j(o);i||d("90"),st(o),It(o,i)}}}break;case"textarea":Ao(e,r);break;case"select":null!=(t=r.value)&&bo(e,!!r.multiple,t,!1)}}},Ho=null,jo=null;function Zo(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function qo(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var Jo=Xr,Yo=$r,Xo=eo;function $o(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function ei(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var ti=[],ri=-1;function oi(e){return{current:e}}function ii(e){0>ri||(e.current=ti[ri],ti[ri]=null,ri--)}function ni(e,t){ri++,ti[ri]=e.current,e.current=t}var si=oi(h),ai=oi(!1),li=h;function ci(e){return hi(e)?li:si.current}function ui(e,t){var r=e.type.contextTypes;if(!r)return h;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===t)return o.__reactInternalMemoizedMaskedChildContext;var i,n={};for(i in r)n[i]=t[i];return o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n),n}function hi(e){return 2===e.tag&&null!=e.type.childContextTypes}function di(e){hi(e)&&(ii(ai),ii(si))}function pi(e){ii(ai),ii(si)}function fi(e,t,r){si.current!==h&&d("168"),ni(si,t),ni(ai,r)}function gi(e,t){var r=e.stateNode,o=e.type.childContextTypes;if("function"!=typeof r.getChildContext)return t;for(var i in r=r.getChildContext())i in o||d("108",Ct(e)||"Unknown",i);return s({},t,r)}function mi(e){if(!hi(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||h,li=si.current,ni(si,t),ni(ai,ai.current),!0}function yi(e,t){var r=e.stateNode;if(r||d("169"),t){var o=gi(e,li);r.__reactInternalMemoizedMergedChildContext=o,ii(ai),ii(si),ni(si,o)}else ii(ai);ni(ai,t)}function bi(e,t,r,o){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=o,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function _i(e,t,r){var o=e.alternate;return null===o?((o=new bi(e.tag,t,e.key,e.mode)).type=e.type,o.stateNode=e.stateNode,o.alternate=e,e.alternate=o):(o.pendingProps=t,o.effectTag=0,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null),o.expirationTime=r,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,o.sibling=e.sibling,o.index=e.index,o.ref=e.ref,o}function wi(e,t,r){var o=e.type,i=e.key;if(e=e.props,"function"==typeof o)var n=o.prototype&&o.prototype.isReactComponent?2:0;else if("string"==typeof o)n=5;else switch(o){case ht:return Ci(e.children,t,r,i);case mt:n=11,t|=3;break;case dt:n=11,t|=2;break;case pt:return(o=new bi(15,e,i,4|t)).type=pt,o.expirationTime=r,o;case bt:n=16,t|=2;break;default:e:{switch("object"==typeof o&&null!==o?o.$$typeof:null){case ft:n=13;break e;case gt:n=12;break e;case yt:n=14;break e;default:d("130",null==o?o:typeof o,"")}n=void 0}}return(t=new bi(n,e,i,t)).type=o,t.expirationTime=r,t}function Ci(e,t,r,o){return(e=new bi(10,e,o,t)).expirationTime=r,e}function Ai(e,t,r){return(e=new bi(6,e,null,t)).expirationTime=r,e}function vi(e,t,r){return(t=new bi(4,null!==e.children?e.children:[],e.key,t)).expirationTime=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Si(e,t,r){return e={current:t=new bi(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:r,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var ki=null,Ti=null;function xi(e){return function(t){try{return e(t)}catch(e){}}}function Pi(e){"function"==typeof ki&&ki(e)}function Ei(e){"function"==typeof Ti&&Ti(e)}var Ri=!1;function Mi(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ni(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Fi(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Ii(e,t,r){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>r)&&(e.expirationTime=r)}function Di(e,t,r){var o=e.alternate;if(null===o){var i=e.updateQueue,n=null;null===i&&(i=e.updateQueue=Mi(e.memoizedState))}else i=e.updateQueue,n=o.updateQueue,null===i?null===n?(i=e.updateQueue=Mi(e.memoizedState),n=o.updateQueue=Mi(o.memoizedState)):i=e.updateQueue=Ni(n):null===n&&(n=o.updateQueue=Ni(i));null===n||i===n?Ii(i,t,r):null===i.lastUpdate||null===n.lastUpdate?(Ii(i,t,r),Ii(n,t,r)):(Ii(i,t,r),n.lastUpdate=t)}function Vi(e,t,r){var o=e.updateQueue;null===(o=null===o?e.updateQueue=Mi(e.memoizedState):Oi(e,o)).lastCapturedUpdate?o.firstCapturedUpdate=o.lastCapturedUpdate=t:(o.lastCapturedUpdate.next=t,o.lastCapturedUpdate=t),(0===o.expirationTime||o.expirationTime>r)&&(o.expirationTime=r)}function Oi(e,t){var r=e.alternate;return null!==r&&t===r.updateQueue&&(t=e.updateQueue=Ni(t)),t}function Bi(e,t,r,o,i,n){switch(r.tag){case 1:return"function"==typeof(e=r.payload)?e.call(n,o,i):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=r.payload)?e.call(n,o,i):e))break;return s({},o,i);case 2:Ri=!0}return o}function Ki(e,t,r,o,i){if(Ri=!1,!(0===t.expirationTime||t.expirationTime>i)){for(var n=(t=Oi(e,t)).baseState,s=null,a=0,l=t.firstUpdate,c=n;null!==l;){var u=l.expirationTime;u>i?(null===s&&(s=l,n=c),(0===a||a>u)&&(a=u)):(c=Bi(e,0,l,c,r,o),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(u=null,l=t.firstCapturedUpdate;null!==l;){var h=l.expirationTime;h>i?(null===u&&(u=l,null===s&&(n=c)),(0===a||a>h)&&(a=h)):(c=Bi(e,0,l,c,r,o),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===s&&(t.lastUpdate=null),null===u?t.lastCapturedUpdate=null:e.effectTag|=32,null===s&&null===u&&(n=c),t.baseState=n,t.firstUpdate=s,t.firstCapturedUpdate=u,t.expirationTime=a,e.memoizedState=c}}function Ui(e,t){"function"!=typeof e&&d("191",e),e.call(t)}function Li(e,t,r){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var o=e.callback;null!==o&&(e.callback=null,Ui(o,r)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,Ui(t,r)),e=e.nextEffect}function zi(e,t){return{value:e,source:t,stack:At(t)}}var Wi=oi(null),Qi=oi(null),Gi=oi(0);function Hi(e){var t=e.type._context;ni(Gi,t._changedBits),ni(Qi,t._currentValue),ni(Wi,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function ji(e){var t=Gi.current,r=Qi.current;ii(Wi),ii(Qi),ii(Gi),(e=e.type._context)._currentValue=r,e._changedBits=t}var Zi={},qi=oi(Zi),Ji=oi(Zi),Yi=oi(Zi);function Xi(e){return e===Zi&&d("174"),e}function $i(e,t){ni(Yi,t),ni(Ji,e),ni(qi,Zi);var r=t.nodeType;switch(r){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:To(null,"");break;default:t=To(t=(r=8===r?t.parentNode:t).namespaceURI||null,r=r.tagName)}ii(qi),ni(qi,t)}function en(e){ii(qi),ii(Ji),ii(Yi)}function tn(e){Ji.current===e&&(ii(qi),ii(Ji))}function rn(e,t,r){var o=e.memoizedState;o=null==(t=t(r,o))?o:s({},o,t),e.memoizedState=o,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=o)}var on={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===ar(e)},enqueueSetState:function(e,t,r){e=e._reactInternalFiber;var o=ms(),i=Fi(o=fs(o,e));i.payload=t,null!=r&&(i.callback=r),Di(e,i,o),gs(e,o)},enqueueReplaceState:function(e,t,r){e=e._reactInternalFiber;var o=ms(),i=Fi(o=fs(o,e));i.tag=1,i.payload=t,null!=r&&(i.callback=r),Di(e,i,o),gs(e,o)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var r=ms(),o=Fi(r=fs(r,e));o.tag=2,null!=t&&(o.callback=t),Di(e,o,r),gs(e,r)}};function nn(e,t,r,o,i,n){var s=e.stateNode;return e=e.type,"function"==typeof s.shouldComponentUpdate?s.shouldComponentUpdate(r,i,n):!e.prototype||!e.prototype.isPureReactComponent||(!c(t,r)||!c(o,i))}function sn(e,t,r,o){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,o),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,o),t.state!==e&&on.enqueueReplaceState(t,t.state,null)}function an(e,t){var r=e.type,o=e.stateNode,i=e.pendingProps,n=ci(e);o.props=i,o.state=e.memoizedState,o.refs=h,o.context=ui(e,n),null!==(n=e.updateQueue)&&(Ki(e,n,i,o,t),o.state=e.memoizedState),"function"==typeof(n=e.type.getDerivedStateFromProps)&&(rn(e,n,i),o.state=e.memoizedState),"function"==typeof r.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(r=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),r!==o.state&&on.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(Ki(e,n,i,o,t),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var ln=Array.isArray;function cn(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!=typeof e){if(r._owner){r=r._owner;var o=void 0;r&&(2!==r.tag&&d("110"),o=r.stateNode),o||d("147",e);var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=o.refs===h?o.refs={}:o.refs;null===e?delete t[i]:t[i]=e})._stringRef=i,t)}"string"!=typeof e&&d("148"),r._owner||d("254",e)}return e}function un(e,t){"textarea"!==e.type&&d("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function hn(e){function t(t,r){if(e){var o=t.lastEffect;null!==o?(o.nextEffect=r,t.lastEffect=r):t.firstEffect=t.lastEffect=r,r.nextEffect=null,r.effectTag=8}}function r(r,o){if(!e)return null;for(;null!==o;)t(r,o),o=o.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,r){return(e=_i(e,t,r)).index=0,e.sibling=null,e}function n(t,r,o){return t.index=o,e?null!==(o=t.alternate)?(o=o.index)<r?(t.effectTag=2,r):o:(t.effectTag=2,r):r}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function a(e,t,r,o){return null===t||6!==t.tag?((t=Ai(r,e.mode,o)).return=e,t):((t=i(t,r,o)).return=e,t)}function l(e,t,r,o){return null!==t&&t.type===r.type?((o=i(t,r.props,o)).ref=cn(e,t,r),o.return=e,o):((o=wi(r,e.mode,o)).ref=cn(e,t,r),o.return=e,o)}function c(e,t,r,o){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=vi(r,e.mode,o)).return=e,t):((t=i(t,r.children||[],o)).return=e,t)}function u(e,t,r,o,n){return null===t||10!==t.tag?((t=Ci(r,e.mode,o,n)).return=e,t):((t=i(t,r,o)).return=e,t)}function h(e,t,r){if("string"==typeof t||"number"==typeof t)return(t=Ai(""+t,e.mode,r)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ct:return(r=wi(t,e.mode,r)).ref=cn(e,null,t),r.return=e,r;case ut:return(t=vi(t,e.mode,r)).return=e,t}if(ln(t)||wt(t))return(t=Ci(t,e.mode,r,null)).return=e,t;un(e,t)}return null}function p(e,t,r,o){var i=null!==t?t.key:null;if("string"==typeof r||"number"==typeof r)return null!==i?null:a(e,t,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ct:return r.key===i?r.type===ht?u(e,t,r.props.children,o,i):l(e,t,r,o):null;case ut:return r.key===i?c(e,t,r,o):null}if(ln(r)||wt(r))return null!==i?null:u(e,t,r,o,null);un(e,r)}return null}function f(e,t,r,o,i){if("string"==typeof o||"number"==typeof o)return a(t,e=e.get(r)||null,""+o,i);if("object"==typeof o&&null!==o){switch(o.$$typeof){case ct:return e=e.get(null===o.key?r:o.key)||null,o.type===ht?u(t,e,o.props.children,i,o.key):l(t,e,o,i);case ut:return c(t,e=e.get(null===o.key?r:o.key)||null,o,i)}if(ln(o)||wt(o))return u(t,e=e.get(r)||null,o,i,null);un(t,o)}return null}function g(i,s,a,l){for(var c=null,u=null,d=s,g=s=0,m=null;null!==d&&g<a.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var y=p(i,d,a[g],l);if(null===y){null===d&&(d=m);break}e&&d&&null===y.alternate&&t(i,d),s=n(y,s,g),null===u?c=y:u.sibling=y,u=y,d=m}if(g===a.length)return r(i,d),c;if(null===d){for(;g<a.length;g++)(d=h(i,a[g],l))&&(s=n(d,s,g),null===u?c=d:u.sibling=d,u=d);return c}for(d=o(i,d);g<a.length;g++)(m=f(d,i,g,a[g],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),s=n(m,s,g),null===u?c=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return t(i,e)})),c}function m(i,s,a,l){var c=wt(a);"function"!=typeof c&&d("150"),null==(a=c.call(a))&&d("151");for(var u=c=null,g=s,m=s=0,y=null,b=a.next();null!==g&&!b.done;m++,b=a.next()){g.index>m?(y=g,g=null):y=g.sibling;var _=p(i,g,b.value,l);if(null===_){g||(g=y);break}e&&g&&null===_.alternate&&t(i,g),s=n(_,s,m),null===u?c=_:u.sibling=_,u=_,g=y}if(b.done)return r(i,g),c;if(null===g){for(;!b.done;m++,b=a.next())null!==(b=h(i,b.value,l))&&(s=n(b,s,m),null===u?c=b:u.sibling=b,u=b);return c}for(g=o(i,g);!b.done;m++,b=a.next())null!==(b=f(g,i,m,b.value,l))&&(e&&null!==b.alternate&&g.delete(null===b.key?m:b.key),s=n(b,s,m),null===u?c=b:u.sibling=b,u=b);return e&&g.forEach((function(e){return t(i,e)})),c}return function(e,o,n,a){"object"==typeof n&&null!==n&&n.type===ht&&null===n.key&&(n=n.props.children);var l="object"==typeof n&&null!==n;if(l)switch(n.$$typeof){case ct:e:{var c=n.key;for(l=o;null!==l;){if(l.key===c){if(10===l.tag?n.type===ht:l.type===n.type){r(e,l.sibling),(o=i(l,n.type===ht?n.props.children:n.props,a)).ref=cn(e,l,n),o.return=e,e=o;break e}r(e,l);break}t(e,l),l=l.sibling}n.type===ht?((o=Ci(n.props.children,e.mode,a,n.key)).return=e,e=o):((a=wi(n,e.mode,a)).ref=cn(e,o,n),a.return=e,e=a)}return s(e);case ut:e:{for(l=n.key;null!==o;){if(o.key===l){if(4===o.tag&&o.stateNode.containerInfo===n.containerInfo&&o.stateNode.implementation===n.implementation){r(e,o.sibling),(o=i(o,n.children||[],a)).return=e,e=o;break e}r(e,o);break}t(e,o),o=o.sibling}(o=vi(n,e.mode,a)).return=e,e=o}return s(e)}if("string"==typeof n||"number"==typeof n)return n=""+n,null!==o&&6===o.tag?(r(e,o.sibling),(o=i(o,n,a)).return=e,e=o):(r(e,o),(o=Ai(n,e.mode,a)).return=e,e=o),s(e);if(ln(n))return g(e,o,n,a);if(wt(n))return m(e,o,n,a);if(l&&un(e,n),void 0===n)switch(e.tag){case 2:case 1:d("152",(a=e.type).displayName||a.name||"Component")}return r(e,o)}}var dn=hn(!0),pn=hn(!1),fn=null,gn=null,mn=!1;function yn(e,t){var r=new bi(5,null,null,0);r.type="DELETED",r.stateNode=t,r.return=e,r.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function bn(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function _n(e){if(mn){var t=gn;if(t){var r=t;if(!bn(e,t)){if(!(t=$o(r))||!bn(e,t))return e.effectTag|=2,mn=!1,void(fn=e);yn(fn,r)}fn=e,gn=ei(t)}else e.effectTag|=2,mn=!1,fn=e}}function wn(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;fn=e}function Cn(e){if(e!==fn)return!1;if(!mn)return wn(e),mn=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!qo(t,e.memoizedProps))for(t=gn;t;)yn(e,t),t=$o(t);return wn(e),gn=fn?$o(e.stateNode):null,!0}function An(){gn=fn=null,mn=!1}function vn(e,t,r){Sn(e,t,r,t.expirationTime)}function Sn(e,t,r,o){t.child=null===e?pn(t,null,r,o):dn(t,e.child,r,o)}function kn(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.effectTag|=128)}function Tn(e,t,r,o,i){kn(e,t);var n=0!=(64&t.effectTag);if(!r&&!n)return o&&yi(t,!1),En(e,t);r=t.stateNode,at.current=t;var s=n?null:r.render();return t.effectTag|=1,n&&(Sn(e,t,null,i),t.child=null),Sn(e,t,s,i),t.memoizedState=r.state,t.memoizedProps=r.props,o&&yi(t,!0),t.child}function xn(e){var t=e.stateNode;t.pendingContext?fi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&fi(0,t.context,!1),$i(e,t.containerInfo)}function Pn(e,t,r,o){var i=e.child;for(null!==i&&(i.return=e);null!==i;){switch(i.tag){case 12:var n=0|i.stateNode;if(i.type===t&&0!=(n&r)){for(n=i;null!==n;){var s=n.alternate;if(0===n.expirationTime||n.expirationTime>o)n.expirationTime=o,null!==s&&(0===s.expirationTime||s.expirationTime>o)&&(s.expirationTime=o);else{if(null===s||!(0===s.expirationTime||s.expirationTime>o))break;s.expirationTime=o}n=n.return}n=null}else n=i.child;break;case 13:n=i.type===e.type?null:i.child;break;default:n=i.child}if(null!==n)n.return=i;else for(n=i;null!==n;){if(n===e){n=null;break}if(null!==(i=n.sibling)){i.return=n.return,n=i;break}n=n.return}i=n}}function En(e,t){if(null!==e&&t.child!==e.child&&d("153"),null!==t.child){var r=_i(e=t.child,e.pendingProps,e.expirationTime);for(t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=_i(e,e.pendingProps,e.expirationTime)).return=t;r.sibling=null}return t.child}function Rn(e,t,r){if(0===t.expirationTime||t.expirationTime>r){switch(t.tag){case 3:xn(t);break;case 2:mi(t);break;case 4:$i(t,t.stateNode.containerInfo);break;case 13:Hi(t)}return null}switch(t.tag){case 0:null!==e&&d("155");var o=t.type,i=t.pendingProps,n=ci(t);return o=o(i,n=ui(t,n)),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(n=t.type,t.tag=2,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,"function"==typeof(n=n.getDerivedStateFromProps)&&rn(t,n,i),i=mi(t),o.updater=on,t.stateNode=o,o._reactInternalFiber=t,an(t,r),e=Tn(e,t,!0,i,r)):(t.tag=1,vn(e,t,o),t.memoizedProps=i,e=t.child),e;case 1:return i=t.type,r=t.pendingProps,ai.current||t.memoizedProps!==r?(i=i(r,o=ui(t,o=ci(t))),t.effectTag|=1,vn(e,t,i),t.memoizedProps=r,e=t.child):e=En(e,t),e;case 2:if(i=mi(t),null===e)if(null===t.stateNode){var s=t.pendingProps,a=t.type;o=ci(t);var l=2===t.tag&&null!=t.type.contextTypes;s=new a(s,n=l?ui(t,o):h),t.memoizedState=null!==s.state&&void 0!==s.state?s.state:null,s.updater=on,t.stateNode=s,s._reactInternalFiber=t,l&&((l=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,l.__reactInternalMemoizedMaskedChildContext=n),an(t,r),o=!0}else{a=t.type,o=t.stateNode,l=t.memoizedProps,n=t.pendingProps,o.props=l;var c=o.context;s=ui(t,s=ci(t));var u=a.getDerivedStateFromProps;(a="function"==typeof u||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==n||c!==s)&&sn(t,o,n,s),Ri=!1;var p=t.memoizedState;c=o.state=p;var f=t.updateQueue;null!==f&&(Ki(t,f,n,o,r),c=t.memoizedState),l!==n||p!==c||ai.current||Ri?("function"==typeof u&&(rn(t,u,n),c=t.memoizedState),(l=Ri||nn(t,l,n,p,c,s))?(a||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.effectTag|=4)):("function"==typeof o.componentDidMount&&(t.effectTag|=4),t.memoizedProps=n,t.memoizedState=c),o.props=n,o.state=c,o.context=s,o=l):("function"==typeof o.componentDidMount&&(t.effectTag|=4),o=!1)}else a=t.type,o=t.stateNode,n=t.memoizedProps,l=t.pendingProps,o.props=n,c=o.context,s=ui(t,s=ci(t)),(a="function"==typeof(u=a.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(n!==l||c!==s)&&sn(t,o,l,s),Ri=!1,c=t.memoizedState,p=o.state=c,null!==(f=t.updateQueue)&&(Ki(t,f,l,o,r),p=t.memoizedState),n!==l||c!==p||ai.current||Ri?("function"==typeof u&&(rn(t,u,l),p=t.memoizedState),(u=Ri||nn(t,n,l,c,p,s))?(a||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(l,p,s),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(l,p,s)),"function"==typeof o.componentDidUpdate&&(t.effectTag|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof o.componentDidUpdate||n===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||n===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=l,t.memoizedState=p),o.props=l,o.state=p,o.context=s,o=u):("function"!=typeof o.componentDidUpdate||n===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||n===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),o=!1);return Tn(e,t,o,i,r);case 3:return xn(t),null!==(i=t.updateQueue)?(o=null!==(o=t.memoizedState)?o.element:null,Ki(t,i,t.pendingProps,null,r),(i=t.memoizedState.element)===o?(An(),e=En(e,t)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(gn=ei(t.stateNode.containerInfo),fn=t,o=mn=!0),o?(t.effectTag|=2,t.child=pn(t,null,i,r)):(An(),vn(e,t,i)),e=t.child)):(An(),e=En(e,t)),e;case 5:return Xi(Yi.current),(i=Xi(qi.current))!==(o=To(i,t.type))&&(ni(Ji,t),ni(qi,o)),null===e&&_n(t),i=t.type,l=t.memoizedProps,o=t.pendingProps,n=null!==e?e.memoizedProps:null,ai.current||l!==o||((l=1&t.mode&&!!o.hidden)&&(t.expirationTime=1073741823),l&&1073741823===r)?(l=o.children,qo(i,o)?l=null:n&&qo(i,n)&&(t.effectTag|=16),kn(e,t),1073741823!==r&&1&t.mode&&o.hidden?(t.expirationTime=1073741823,t.memoizedProps=o,e=null):(vn(e,t,l),t.memoizedProps=o,e=t.child)):e=En(e,t),e;case 6:return null===e&&_n(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return $i(t,t.stateNode.containerInfo),i=t.pendingProps,ai.current||t.memoizedProps!==i?(null===e?t.child=dn(t,null,i,r):vn(e,t,i),t.memoizedProps=i,e=t.child):e=En(e,t),e;case 14:return i=t.type.render,r=t.pendingProps,o=t.ref,ai.current||t.memoizedProps!==r||o!==(null!==e?e.ref:null)?(vn(e,t,i=i(r,o)),t.memoizedProps=r,e=t.child):e=En(e,t),e;case 10:return r=t.pendingProps,ai.current||t.memoizedProps!==r?(vn(e,t,r),t.memoizedProps=r,e=t.child):e=En(e,t),e;case 11:return r=t.pendingProps.children,ai.current||null!==r&&t.memoizedProps!==r?(vn(e,t,r),t.memoizedProps=r,e=t.child):e=En(e,t),e;case 15:return r=t.pendingProps,t.memoizedProps===r?e=En(e,t):(vn(e,t,r.children),t.memoizedProps=r,e=t.child),e;case 13:return function(e,t,r){var o=t.type._context,i=t.pendingProps,n=t.memoizedProps,s=!0;if(ai.current)s=!1;else if(n===i)return t.stateNode=0,Hi(t),En(e,t);var a=i.value;if(t.memoizedProps=i,null===n)a=1073741823;else if(n.value===i.value){if(n.children===i.children&&s)return t.stateNode=0,Hi(t),En(e,t);a=0}else{var l=n.value;if(l===a&&(0!==l||1/l==1/a)||l!=l&&a!=a){if(n.children===i.children&&s)return t.stateNode=0,Hi(t),En(e,t);a=0}else if(a="function"==typeof o._calculateChangedBits?o._calculateChangedBits(l,a):1073741823,0===(a|=0)){if(n.children===i.children&&s)return t.stateNode=0,Hi(t),En(e,t)}else Pn(t,o,a,r)}return t.stateNode=a,Hi(t),vn(e,t,i.children),t.child}(e,t,r);case 12:e:if(o=t.type,n=t.pendingProps,l=t.memoizedProps,i=o._currentValue,s=o._changedBits,ai.current||0!==s||l!==n){if(t.memoizedProps=n,null==(a=n.unstable_observedBits)&&(a=1073741823),t.stateNode=a,0!=(s&a))Pn(t,o,s,r);else if(l===n){e=En(e,t);break e}r=(r=n.children)(i),t.effectTag|=1,vn(e,t,r),e=t.child}else e=En(e,t);return e;default:d("156")}}function Mn(e){e.effectTag|=4}var Nn=void 0,Fn=void 0,In=void 0;function Dn(e,t){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return di(t),null;case 3:en(),pi();var o=t.stateNode;return o.pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),null!==e&&null!==e.child||(Cn(t),t.effectTag&=-3),Nn(t),null;case 5:tn(t),o=Xi(Yi.current);var i=t.type;if(null!==e&&null!=t.stateNode){var n=e.memoizedProps,s=t.stateNode,a=Xi(qi.current);s=Lo(s,i,n,r,o),Fn(e,t,s,i,n,r,o,a),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&d("166"),null;if(e=Xi(qi.current),Cn(t))r=t.stateNode,i=t.type,n=t.memoizedProps,r[W]=t,r[Q]=n,o=Wo(r,i,n,e,o),t.updateQueue=o,null!==o&&Mn(t);else{(e=Bo(i,r,o,e))[W]=t,e[Q]=r;e:for(n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)break e;n=n.return}n.sibling.return=n.return,n=n.sibling}Uo(e,i,r,o),Zo(i,r)&&Mn(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)In(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&d("166"),null;o=Xi(Yi.current),Xi(qi.current),Cn(t)?(o=t.stateNode,r=t.memoizedProps,o[W]=t,Qo(o,r)&&Mn(t)):((o=Ko(r,o))[W]=t,t.stateNode=o)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return en(),Nn(t),null;case 13:return ji(t),null;case 12:return null;case 0:d("167");default:d("156")}}function Vn(e,t){var r=t.source;null===t.stack&&null!==r&&At(r),null!==r&&Ct(r),t=t.value,null!==e&&2===e.tag&&Ct(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function On(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ds(e,t)}else t.current=null}function Bn(e){switch(Ei(e),e.tag){case 2:On(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){ds(e,t)}break;case 5:On(e);break;case 4:Ln(e)}}function Kn(e){return 5===e.tag||3===e.tag||4===e.tag}function Un(e){e:{for(var t=e.return;null!==t;){if(Kn(t)){var r=t;break e}t=t.return}d("160"),r=void 0}var o=t=void 0;switch(r.tag){case 5:t=r.stateNode,o=!1;break;case 3:case 4:t=r.stateNode.containerInfo,o=!0;break;default:d("161")}16&r.effectTag&&(Eo(t,""),r.effectTag&=-17);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||Kn(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;5!==r.tag&&6!==r.tag;){if(2&r.effectTag)continue t;if(null===r.child||4===r.tag)continue t;r.child.return=r,r=r.child}if(!(2&r.effectTag)){r=r.stateNode;break e}}for(var i=e;;){if(5===i.tag||6===i.tag)if(r)if(o){var n=t,s=i.stateNode,a=r;8===n.nodeType?n.parentNode.insertBefore(s,a):n.insertBefore(s,a)}else t.insertBefore(i.stateNode,r);else o?(n=t,s=i.stateNode,8===n.nodeType?n.parentNode.insertBefore(s,n):n.appendChild(s)):t.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function Ln(e){for(var t=e,r=!1,o=void 0,i=void 0;;){if(!r){r=t.return;e:for(;;){switch(null===r&&d("160"),r.tag){case 5:o=r.stateNode,i=!1;break e;case 3:case 4:o=r.stateNode.containerInfo,i=!0;break e}r=r.return}r=!0}if(5===t.tag||6===t.tag){e:for(var n=t,s=n;;)if(Bn(s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===n)break;for(;null===s.sibling;){if(null===s.return||s.return===n)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}i?(n=o,s=t.stateNode,8===n.nodeType?n.parentNode.removeChild(s):n.removeChild(s)):o.removeChild(t.stateNode)}else if(4===t.tag?o=t.stateNode.containerInfo:Bn(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(r=!1)}t.sibling.return=t.return,t=t.sibling}}function zn(e,t){switch(t.tag){case 2:break;case 5:var r=t.stateNode;if(null!=r){var o=t.memoizedProps;e=null!==e?e.memoizedProps:o;var i=t.type,n=t.updateQueue;t.updateQueue=null,null!==n&&(r[Q]=o,zo(r,n,i,e,o))}break;case 6:null===t.stateNode&&d("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:d("163")}}function Wn(e,t,r){(r=Fi(r)).tag=3,r.payload={element:null};var o=t.value;return r.callback=function(){qs(o),Vn(e,t)},r}function Qn(e,t,r){(r=Fi(r)).tag=3;var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(r.callback=function(){null===as?as=new Set([this]):as.add(this);var r=t.value,o=t.stack;Vn(e,t),this.componentDidCatch(r,{componentStack:null!==o?o:""})}),r}function Gn(e,t,r,o,i,n){r.effectTag|=512,r.firstEffect=r.lastEffect=null,o=zi(o,r),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void Vi(e,o=Wn(e,o,n),n);case 2:if(t=o,r=e.stateNode,0==(64&e.effectTag)&&null!==r&&"function"==typeof r.componentDidCatch&&(null===as||!as.has(r)))return e.effectTag|=1024,void Vi(e,o=Qn(e,t,n),n)}e=e.return}while(null!==e)}function Hn(e){switch(e.tag){case 2:di(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return en(),pi(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return tn(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return en(),null;case 13:return ji(e),null;default:return null}}Nn=function(){},Fn=function(e,t,r){(t.updateQueue=r)&&Mn(t)},In=function(e,t,r,o){r!==o&&Mn(t)};var jn=Jo(),Zn=2,qn=jn,Jn=0,Yn=0,Xn=!1,$n=null,es=null,ts=0,rs=-1,os=!1,is=null,ns=!1,ss=!1,as=null;function ls(){if(null!==$n)for(var e=$n.return;null!==e;){var t=e;switch(t.tag){case 2:di(t);break;case 3:en(),pi();break;case 5:tn(t);break;case 4:en();break;case 13:ji(t)}e=e.return}es=null,ts=0,rs=-1,os=!1,$n=null,ss=!1}function cs(e){for(;;){var t=e.alternate,r=e.return,o=e.sibling;if(0==(512&e.effectTag)){t=Dn(t,e);var i=e;if(1073741823===ts||1073741823!==i.expirationTime){var n=0;switch(i.tag){case 3:case 2:var s=i.updateQueue;null!==s&&(n=s.expirationTime)}for(s=i.child;null!==s;)0!==s.expirationTime&&(0===n||n>s.expirationTime)&&(n=s.expirationTime),s=s.sibling;i.expirationTime=n}if(null!==t)return t;if(null!==r&&0==(512&r.effectTag)&&(null===r.firstEffect&&(r.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==r.lastEffect&&(r.lastEffect.nextEffect=e.firstEffect),r.lastEffect=e.lastEffect),1<e.effectTag&&(null!==r.lastEffect?r.lastEffect.nextEffect=e:r.firstEffect=e,r.lastEffect=e)),null!==o)return o;if(null===r){ss=!0;break}e=r}else{if(null!==(e=Hn(e)))return e.effectTag&=511,e;if(null!==r&&(r.firstEffect=r.lastEffect=null,r.effectTag|=512),null!==o)return o;if(null===r)break;e=r}}return null}function us(e){var t=Rn(e.alternate,e,ts);return null===t&&(t=cs(e)),at.current=null,t}function hs(e,t,r){Xn&&d("243"),Xn=!0,t===ts&&e===es&&null!==$n||(ls(),ts=t,rs=-1,$n=_i((es=e).current,null,ts),e.pendingCommitExpirationTime=0);var o=!1;for(os=!r||ts<=Zn;;){try{if(r)for(;null!==$n&&!Zs();)$n=us($n);else for(;null!==$n;)$n=us($n)}catch(t){if(null===$n)o=!0,qs(t);else{null===$n&&d("271");var i=(r=$n).return;if(null===i){o=!0,qs(t);break}Gn(e,i,r,t,0,ts),$n=cs(r)}}break}if(Xn=!1,o)return null;if(null===$n){if(ss)return e.pendingCommitExpirationTime=t,e.current.alternate;os&&d("262"),0<=rs&&setTimeout((function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&Ks(e,t)}),rs),function(e){null===Ss&&d("246"),Ss.remainingExpirationTime=e}(e.current.expirationTime)}return null}function ds(e,t){var r;e:{for(Xn&&!ns&&d("263"),r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&(null===as||!as.has(o))){Di(r,e=Qn(r,e=zi(t,e),1),1),gs(r,1),r=void 0;break e}break;case 3:Di(r,e=Wn(r,e=zi(t,e),1),1),gs(r,1),r=void 0;break e}r=r.return}3===e.tag&&(Di(e,r=Wn(e,r=zi(t,e),1),1),gs(e,1)),r=void 0}return r}function ps(){var e=2+25*(1+((ms()-2+500)/25|0));return e<=Jn&&(e=Jn+1),Jn=e}function fs(e,t){return e=0!==Yn?Yn:Xn?ns?1:ts:1&t.mode?Fs?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Fs&&(0===Ts||e>Ts)&&(Ts=e),e}function gs(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var r=e.stateNode;!Xn&&0!==ts&&t<ts&&ls();var o=r.current.expirationTime;Xn&&!ns&&es===r||Ks(r,o),Vs>Ds&&d("185")}e=e.return}}function ms(){return qn=Jo()-jn,Zn=2+(qn/10|0)}function ys(e){var t=Yn;Yn=2+25*(1+((ms()-2+500)/25|0));try{return e()}finally{Yn=t}}function bs(e,t,r,o,i){var n=Yn;Yn=1;try{return e(t,r,o,i)}finally{Yn=n}}var _s=null,ws=null,Cs=0,As=-1,vs=!1,Ss=null,ks=0,Ts=0,xs=!1,Ps=!1,Es=null,Rs=null,Ms=!1,Ns=!1,Fs=!1,Is=null,Ds=1e3,Vs=0,Os=1;function Bs(e){if(0!==Cs){if(e>Cs)return;Xo(As)}var t=Jo()-jn;Cs=e,As=Yo(Ls,{timeout:10*(e-2)-t})}function Ks(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ws?(_s=ws=e,e.nextScheduledRoot=e):(ws=ws.nextScheduledRoot=e).nextScheduledRoot=_s;else{var r=e.remainingExpirationTime;(0===r||t<r)&&(e.remainingExpirationTime=t)}vs||(Ms?Ns&&(Ss=e,ks=1,Hs(e,1,!1)):1===t?zs():Bs(t))}function Us(){var e=0,t=null;if(null!==ws)for(var r=ws,o=_s;null!==o;){var i=o.remainingExpirationTime;if(0===i){if((null===r||null===ws)&&d("244"),o===o.nextScheduledRoot){_s=ws=o.nextScheduledRoot=null;break}if(o===_s)_s=i=o.nextScheduledRoot,ws.nextScheduledRoot=i,o.nextScheduledRoot=null;else{if(o===ws){(ws=r).nextScheduledRoot=_s,o.nextScheduledRoot=null;break}r.nextScheduledRoot=o.nextScheduledRoot,o.nextScheduledRoot=null}o=r.nextScheduledRoot}else{if((0===e||i<e)&&(e=i,t=o),o===ws)break;r=o,o=o.nextScheduledRoot}}null!==(r=Ss)&&r===t&&1===e?Vs++:Vs=0,Ss=t,ks=e}function Ls(e){Ws(0,!0,e)}function zs(){Ws(1,!1,null)}function Ws(e,t,r){if(Rs=r,Us(),t)for(;null!==Ss&&0!==ks&&(0===e||e>=ks)&&(!xs||ms()>=ks);)ms(),Hs(Ss,ks,!xs),Us();else for(;null!==Ss&&0!==ks&&(0===e||e>=ks);)Hs(Ss,ks,!1),Us();null!==Rs&&(Cs=0,As=-1),0!==ks&&Bs(ks),Rs=null,xs=!1,Gs()}function Qs(e,t){vs&&d("253"),Ss=e,ks=t,Hs(e,t,!1),zs(),Gs()}function Gs(){if(Vs=0,null!==Is){var e=Is;Is=null;for(var t=0;t<e.length;t++){var r=e[t];try{r._onComplete()}catch(e){Ps||(Ps=!0,Es=e)}}}if(Ps)throw e=Es,Es=null,Ps=!1,e}function Hs(e,t,r){vs&&d("245"),vs=!0,r?null!==(r=e.finishedWork)?js(e,r,t):(e.finishedWork=null,null!==(r=hs(e,t,!0))&&(Zs()?e.finishedWork=r:js(e,r,t))):null!==(r=e.finishedWork)?js(e,r,t):(e.finishedWork=null,null!==(r=hs(e,t,!1))&&js(e,r,t)),vs=!1}function js(e,t,r){var o=e.firstBatch;if(null!==o&&o._expirationTime<=r&&(null===Is?Is=[o]:Is.push(o),o._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,ns=Xn=!0,(r=t.stateNode).current===t&&d("177"),0===(o=r.pendingCommitExpirationTime)&&d("261"),r.pendingCommitExpirationTime=0,ms(),at.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;Ho=Rr;var n=l();if(Wr(n)){if("selectionStart"in n)var s={start:n.selectionStart,end:n.selectionEnd};else e:{var a=window.getSelection&&window.getSelection();if(a&&0!==a.rangeCount){s=a.anchorNode;var c=a.anchorOffset,h=a.focusNode;a=a.focusOffset;try{s.nodeType,h.nodeType}catch(e){s=null;break e}var p=0,f=-1,g=-1,m=0,y=0,b=n,_=null;t:for(;;){for(var w;b!==s||0!==c&&3!==b.nodeType||(f=p+c),b!==h||0!==a&&3!==b.nodeType||(g=p+a),3===b.nodeType&&(p+=b.nodeValue.length),null!==(w=b.firstChild);)_=b,b=w;for(;;){if(b===n)break t;if(_===s&&++m===c&&(f=p),_===h&&++y===a&&(g=p),null!==(w=b.nextSibling))break;_=(b=_).parentNode}b=w}s=-1===f||-1===g?null:{start:f,end:g}}else s=null}s=s||{start:0,end:0}}else s=null;for(jo={focusedElem:n,selectionRange:s},Mr(!1),is=i;null!==is;){n=!1,s=void 0;try{for(;null!==is;){if(256&is.effectTag){var C=is.alternate;switch((c=is).tag){case 2:if(256&c.effectTag&&null!==C){var A=C.memoizedProps,v=C.memoizedState,S=c.stateNode;S.props=c.memoizedProps,S.state=c.memoizedState;var k=S.getSnapshotBeforeUpdate(A,v);S.__reactInternalSnapshotBeforeUpdate=k}break;case 3:case 5:case 6:case 4:break;default:d("163")}}is=is.nextEffect}}catch(e){n=!0,s=e}n&&(null===is&&d("178"),ds(is,s),null!==is&&(is=is.nextEffect))}for(is=i;null!==is;){C=!1,A=void 0;try{for(;null!==is;){var T=is.effectTag;if(16&T&&Eo(is.stateNode,""),128&T){var x=is.alternate;if(null!==x){var P=x.ref;null!==P&&("function"==typeof P?P(null):P.current=null)}}switch(14&T){case 2:Un(is),is.effectTag&=-3;break;case 6:Un(is),is.effectTag&=-3,zn(is.alternate,is);break;case 4:zn(is.alternate,is);break;case 8:Ln(v=is),v.return=null,v.child=null,v.alternate&&(v.alternate.child=null,v.alternate.return=null)}is=is.nextEffect}}catch(e){C=!0,A=e}C&&(null===is&&d("178"),ds(is,A),null!==is&&(is=is.nextEffect))}if(P=jo,x=l(),T=P.focusedElem,C=P.selectionRange,x!==T&&u(document.documentElement,T)){Wr(T)&&(x=C.start,void 0===(P=C.end)&&(P=x),"selectionStart"in T?(T.selectionStart=x,T.selectionEnd=Math.min(P,T.value.length)):window.getSelection&&(x=window.getSelection(),A=T[me()].length,P=Math.min(C.start,A),C=void 0===C.end?P:Math.min(C.end,A),!x.extend&&P>C&&(A=C,C=P,P=A),A=zr(T,P),v=zr(T,C),A&&v&&(1!==x.rangeCount||x.anchorNode!==A.node||x.anchorOffset!==A.offset||x.focusNode!==v.node||x.focusOffset!==v.offset)&&((S=document.createRange()).setStart(A.node,A.offset),x.removeAllRanges(),P>C?(x.addRange(S),x.extend(v.node,v.offset)):(S.setEnd(v.node,v.offset),x.addRange(S))))),x=[];for(P=T;P=P.parentNode;)1===P.nodeType&&x.push({element:P,left:P.scrollLeft,top:P.scrollTop});for(T.focus(),T=0;T<x.length;T++)(P=x[T]).element.scrollLeft=P.left,P.element.scrollTop=P.top}for(jo=null,Mr(Ho),Ho=null,r.current=t,is=i;null!==is;){i=!1,T=void 0;try{for(x=o;null!==is;){var E=is.effectTag;if(36&E){var R=is.alternate;switch(C=x,(P=is).tag){case 2:var M=P.stateNode;if(4&P.effectTag)if(null===R)M.props=P.memoizedProps,M.state=P.memoizedState,M.componentDidMount();else{var N=R.memoizedProps,F=R.memoizedState;M.props=P.memoizedProps,M.state=P.memoizedState,M.componentDidUpdate(N,F,M.__reactInternalSnapshotBeforeUpdate)}var I=P.updateQueue;null!==I&&(M.props=P.memoizedProps,M.state=P.memoizedState,Li(P,I,M));break;case 3:var D=P.updateQueue;if(null!==D){if(A=null,null!==P.child)switch(P.child.tag){case 5:A=P.child.stateNode;break;case 2:A=P.child.stateNode}Li(P,D,A)}break;case 5:var V=P.stateNode;null===R&&4&P.effectTag&&Zo(P.type,P.memoizedProps)&&V.focus();break;case 6:case 4:case 15:case 16:break;default:d("163")}}if(128&E){P=void 0;var O=is.ref;if(null!==O){var B=is.stateNode;switch(is.tag){case 5:P=B;break;default:P=B}"function"==typeof O?O(P):O.current=P}}var K=is.nextEffect;is.nextEffect=null,is=K}}catch(e){i=!0,T=e}i&&(null===is&&d("178"),ds(is,T),null!==is&&(is=is.nextEffect))}Xn=ns=!1,Pi(t.stateNode),0===(t=r.current.expirationTime)&&(as=null),e.remainingExpirationTime=t}function Zs(){return!(null===Rs||Rs.timeRemaining()>Os)&&(xs=!0)}function qs(e){null===Ss&&d("246"),Ss.remainingExpirationTime=0,Ps||(Ps=!0,Es=e)}function Js(e,t){var r=Ms;Ms=!0;try{return e(t)}finally{(Ms=r)||vs||zs()}}function Ys(e,t){if(Ms&&!Ns){Ns=!0;try{return e(t)}finally{Ns=!1}}return e(t)}function Xs(e,t){vs&&d("187");var r=Ms;Ms=!0;try{return bs(e,t)}finally{Ms=r,zs()}}function $s(e){var t=Ms;Ms=!0;try{bs(e)}finally{(Ms=t)||vs||Ws(1,!1,null)}}function ea(e,t,r,o,i){var n=t.current;if(r){var s;e:{for(2===ar(r=r._reactInternalFiber)&&2===r.tag||d("170"),s=r;3!==s.tag;){if(hi(s)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break e}(s=s.return)||d("171")}s=s.stateNode.context}r=hi(r)?gi(r,s):s}else r=h;return null===t.context?t.context=r:t.pendingContext=r,t=i,(i=Fi(o)).payload={element:e},null!==(t=void 0===t?null:t)&&(i.callback=t),Di(n,i,o),gs(n,o),o}function ta(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?d("188"):d("268",Object.keys(e))),null===(e=ur(t))?null:e.stateNode}function ra(e,t,r,o){var i=t.current;return ea(e,t,r,i=fs(ms(),i),o)}function oa(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ia(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var r=t.inject(e);ki=xi((function(e){return t.onCommitFiberRoot(r,e)})),Ti=xi((function(e){return t.onCommitFiberUnmount(r,e)}))}catch(e){}return!0}(s({},e,{findHostInstanceByFiber:function(e){return null===(e=ur(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var na=Js,sa=function(e,t,r){if(Fs)return e(t,r);Ms||vs||0===Ts||(Ws(Ts,!1,null),Ts=0);var o=Fs,i=Ms;Ms=Fs=!0;try{return e(t,r)}finally{Fs=o,(Ms=i)||vs||zs()}},aa=function(){vs||0===Ts||(Ws(Ts,!1,null),Ts=0)};function la(e){this._expirationTime=ps(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function ca(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function ua(e,t,r){this._internalRoot=Si(e,t,r)}function ha(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function da(e,t,r,o,i){ha(r)||d("200");var n=r._reactRootContainer;if(n){if("function"==typeof i){var s=i;i=function(){var e=oa(n._internalRoot);s.call(e)}}null!=e?n.legacy_renderSubtreeIntoContainer(e,t,i):n.render(t,i)}else{if(n=r._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new ua(e,!1,t)}(r,o),"function"==typeof i){var a=i;i=function(){var e=oa(n._internalRoot);a.call(e)}}Ys((function(){null!=e?n.legacy_renderSubtreeIntoContainer(e,t,i):n.render(t,i)}))}return oa(n._internalRoot)}function pa(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return ha(t)||d("200"),function(e,t,r){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ut,key:null==o?null:""+o,children:e,containerInfo:t,implementation:r}}(e,t,null,r)}Le.injectFiberControlledHostComponent(Go),la.prototype.render=function(e){this._defer||d("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,r=this._expirationTime,o=new ca;return ea(e,t,null,r,o._onCommit),o},la.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},la.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||d("251"),this._hasChildren){var r=this._expirationTime;if(t!==this){this._hasChildren&&(r=this._expirationTime=t._expirationTime,this.render(this._children));for(var o=null,i=t;i!==this;)o=i,i=i._next;null===o&&d("251"),o._next=i._next,this._next=t,e.firstBatch=this}this._defer=!1,Qs(e,r),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},la.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},ca.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ca.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var r=e[t];"function"!=typeof r&&d("191",r),r()}}},ua.prototype.render=function(e,t){var r=this._internalRoot,o=new ca;return null!==(t=void 0===t?null:t)&&o.then(t),ra(e,r,null,o._onCommit),o},ua.prototype.unmount=function(e){var t=this._internalRoot,r=new ca;return null!==(e=void 0===e?null:e)&&r.then(e),ra(null,t,null,r._onCommit),r},ua.prototype.legacy_renderSubtreeIntoContainer=function(e,t,r){var o=this._internalRoot,i=new ca;return null!==(r=void 0===r?null:r)&&i.then(r),ra(t,o,e,i._onCommit),i},ua.prototype.createBatch=function(){var e=new la(this),t=e._expirationTime,r=this._internalRoot,o=r.firstBatch;if(null===o)r.firstBatch=e,e._next=null;else{for(r=null;null!==o&&o._expirationTime<=t;)r=o,o=o._next;e._next=o,null!==r&&(r._next=e)}return e},qe=na,Je=sa,Ye=aa;var fa={createPortal:pa,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:ta(e)},hydrate:function(e,t,r){return da(null,e,t,!0,r)},render:function(e,t,r){return da(null,e,t,!1,r)},unstable_renderSubtreeIntoContainer:function(e,t,r,o){return(null==e||void 0===e._reactInternalFiber)&&d("38"),da(e,t,r,!1,o)},unmountComponentAtNode:function(e){return ha(e)||d("40"),!!e._reactRootContainer&&(Ys((function(){da(null,null,e,!1,(function(){e._reactRootContainer=null}))})),!0)},unstable_createPortal:function(){return pa.apply(void 0,arguments)},unstable_batchedUpdates:Js,unstable_deferredUpdates:ys,flushSync:Xs,unstable_flushControlled:$s,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:L,EventPluginRegistry:T,EventPropagators:ie,ReactControlledComponent:Ze,ReactDOMComponentTree:Z,ReactDOMEventListener:Vr},unstable_createRoot:function(e,t){return new ua(e,!0,null!=t&&!0===t.hydrate)}};ia({findFiberByHostInstance:G,bundleType:0,version:"16.4.0",rendererPackageName:"react-dom"});var ga={default:fa},ma=ga&&fa||ga;e.exports=ma.default?ma.default:ma},function(e,t,r){"use strict";
/** @license React v16.4.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var o=r(3),i=r(2),n=r(4),s=r(5),a="function"==typeof Symbol&&Symbol.for,l=a?Symbol.for("react.element"):60103,c=a?Symbol.for("react.portal"):60106,u=a?Symbol.for("react.fragment"):60107,h=a?Symbol.for("react.strict_mode"):60108,d=a?Symbol.for("react.profiler"):60114,p=a?Symbol.for("react.provider"):60109,f=a?Symbol.for("react.context"):60110,g=a?Symbol.for("react.async_mode"):60111,m=a?Symbol.for("react.forward_ref"):60112;a&&Symbol.for("react.timeout");var y="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,r="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)r+="&args[]="+encodeURIComponent(arguments[o+1]);i(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",r)}var _={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function w(e,t,r){this.props=e,this.context=t,this.refs=n,this.updater=r||_}function C(){}function A(e,t,r){this.props=e,this.context=t,this.refs=n,this.updater=r||_}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},C.prototype=w.prototype;var v=A.prototype=new C;v.constructor=A,o(v,w.prototype),v.isPureReactComponent=!0;var S={current:null},k=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,r){var o=void 0,i={},n=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(n=""+t.key),t)k.call(t,o)&&!T.hasOwnProperty(o)&&(i[o]=t[o]);var a=arguments.length-2;if(1===a)i.children=r;else if(1<a){for(var c=Array(a),u=0;u<a;u++)c[u]=arguments[u+2];i.children=c}if(e&&e.defaultProps)for(o in a=e.defaultProps)void 0===i[o]&&(i[o]=a[o]);return{$$typeof:l,type:e,key:n,ref:s,props:i,_owner:S.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var E=/\/+/g,R=[];function M(e,t,r,o){if(R.length){var i=R.pop();return i.result=e,i.keyPrefix=t,i.func=r,i.context=o,i.count=0,i}return{result:e,keyPrefix:t,func:r,context:o,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function F(e,t,r,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var n=!1;if(null===e)n=!0;else switch(i){case"string":case"number":n=!0;break;case"object":switch(e.$$typeof){case l:case c:n=!0}}if(n)return r(o,e,""===t?"."+I(e,0):t),1;if(n=0,t=""===t?".":t+":",Array.isArray(e))for(var s=0;s<e.length;s++){var a=t+I(i=e[s],s);n+=F(i,a,r,o)}else if(null==e?a=null:a="function"==typeof(a=y&&e[y]||e["@@iterator"])?a:null,"function"==typeof a)for(e=a.call(e),s=0;!(i=e.next()).done;)n+=F(i=i.value,a=t+I(i,s++),r,o);else"object"===i&&b("31","[object Object]"===(r=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":r,"");return n}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function V(e,t,r){var o=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?O(e,o,r,s.thatReturnsArgument):null!=e&&(P(e)&&(t=i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(E,"$&/")+"/")+r,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),o.push(e))}function O(e,t,r,o,i){var n="";null!=r&&(n=(""+r).replace(E,"$&/")+"/"),t=M(t,n,o,i),null==e||F(e,"",V,t),N(t)}var B={Children:{map:function(e,t,r){if(null==e)return e;var o=[];return O(e,o,null,t,r),o},forEach:function(e,t,r){if(null==e)return e;t=M(null,null,t,r),null==e||F(e,"",D,t),N(t)},count:function(e){return null==e?0:F(e,"",s.thatReturnsNull,null)},toArray:function(e){var t=[];return O(e,t,null,s.thatReturnsArgument),t},only:function(e){return P(e)||b("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:A,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:m,render:e}},Fragment:u,StrictMode:h,unstable_AsyncMode:g,unstable_Profiler:d,createElement:x,cloneElement:function(e,t,r){null==e&&b("267",e);var i=void 0,n=o({},e.props),s=e.key,a=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(a=t.ref,c=S.current),void 0!==t.key&&(s=""+t.key);var u=void 0;for(i in e.type&&e.type.defaultProps&&(u=e.type.defaultProps),t)k.call(t,i)&&!T.hasOwnProperty(i)&&(n[i]=void 0===t[i]&&void 0!==u?u[i]:t[i])}if(1===(i=arguments.length-2))n.children=r;else if(1<i){u=Array(i);for(var h=0;h<i;h++)u[h]=arguments[h+2];n.children=u}return{$$typeof:l,type:e.type,key:s,ref:a,props:n,_owner:c}},createFactory:function(e){var t=x.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.4.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:S,assign:o}},K={default:B},U=K&&B||K;e.exports=U.default?U.default:U},function(e,t,r){"use strict";var o=!("undefined"==typeof window||!window.document||!window.document.createElement),i={canUseDOM:o,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:o&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:o&&!!window.screen,isInWorker:!o};e.exports=i},function(e,t,r){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,r){"use strict";var o=Object.prototype.hasOwnProperty;function i(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(i(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(var s=0;s<r.length;s++)if(!o.call(t,r[s])||!i(e[r[s]],t[r[s]]))return!1;return!0}},function(e,t,r){"use strict";var o=r(12);e.exports=function e(t,r){return!(!t||!r)&&(t===r||!o(t)&&(o(r)?e(t,r.parentNode):"contains"in t?t.contains(r):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(r))))}},function(e,t,r){"use strict";var o=r(13);e.exports=function(e){return o(e)&&3==e.nodeType}},function(e,t,r){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,r,o){"use strict";o.r(r);const i=Symbol("CANCEL"),n=Symbol("DEFAULT"),s=Symbol("PASS"),a=Symbol("STRIP"),l={CANCEL:i,DEFAULT:n,PASS:s,STRIP:a};function c(e,t){let r=Object.assign(Object.assign({},t),{op:e});window.webkit.messageHandlers._kb.postMessage(r)}const u="O",h="",d="[",p="",f=e=>String.fromCharCode(e.charCodeAt(0)-64),g={keyCode:0,keyCap:"[Unidentified]",normal:s,ctrl:s,alt:s,meta:s};class m{constructor(e){this._defs={},this._reverseDefs={},this._onCtrlNum=(e,t)=>{switch(t.keyCap.substr(0,1)){case"1":return"1";case"2":return f("@");case"3":return f("[");case"4":return f("\\");case"5":return f("]");case"6":return f("^");case"7":return f("_");case"8":return p;case"9":return"9";default:return s}},this._onAltNum=(e,t)=>n,this._onSel=(e,t)=>{let{ArrowDown:r,ArrowLeft:o,ArrowRight:n,ArrowUp:s,Escape:a,h:l,j:u,k:h,l:d,o:p,b:f,f:g,n:m,p:y,w:b,x:_,y:w}=this._reverseDefs;const C=e=>c("selection",e),A={command:"copy"};if(t===o||t===l){C({dir:"left",gran:e.shift?"word":"character"})}else if(t===n||t===d){C({dir:"right",gran:e.shift?"word":"character"})}else t===s||t===h?C({dir:"left",gran:"line"}):t===r||t===u?C({dir:"right",gran:"line"}):t===p||t===_?C({command:"change"}):t===m&&e.ctrl?C({dir:"right",gran:"line"}):t===y?e.ctrl?C({dir:"left",gran:"line"}):e.shift||e.alt||e.meta||C({command:"paste"}):t===f?e.ctrl?C({dir:"left",gran:"character"}):(e.alt,C({dir:"left",gran:"word"})):t===b?e.alt?C(A):C({dir:"right",gran:"word"}):t===g?e.ctrl?C({dir:"right",gran:"character"}):e.alt&&C({dir:"right",gran:"word"}):t===w?C(A):t===a&&C({command:"cancel"});return i},this._keyboard=e,this.reset()}getKeyDef(e){var t=this._defs[e];return t||(console.warn(`No definition for (keyCode ${e})`),t=g,this.addKeyDef(e,t),t)}addKeyDef(e,t){if(e in this._defs&&console.warn("Dup keyCode: ",e),this._defs[e]=t,/^\[\w+\]$/.test(t.keyCap)){let e=t.keyCap.replace(/\W/g,"");this._reverseDefs[e]=t}else{var r=t.keyCap[0];this._reverseDefs[r]=t,/0-9/.test(r)?this._reverseDefs["Digit"+r]=t:/[a-z]/.test(r)&&(this._reverseDefs["Key"+r.toUpperCase()]=t)}}reset(){this._defs={};const e=(e,t,r)=>"function"==typeof e?e.call(this,t,r):e,t=(t,r)=>(o,i)=>{let n=o.shift||o.ctrl||o.alt||o.meta?r:t;return e(n,o,i)},r=(t,r)=>(o,i)=>{let n=o.shift?r:t;return o.shift=!1,e(n,o,i)},o=(e,t)=>e,i=(t,r)=>(o,i)=>{let n=o.alt?t:r;return e(n,o,i)},l=(t,r)=>(o,i)=>{let n=o.shift||o.ctrl||o.alt||o.meta?t:r;return e(n,o,i)},c=t=>(r,o)=>{let i=this._keyboard.hasSelection?this._onSel:t;return e(i,r,o)},m=e=>this.addKeyDef(e.keyCode,e);m(g),m({keyCode:27,keyCap:"[Escape]",normal:c(h),ctrl:n,alt:n,meta:n}),m({keyCode:112,keyCap:"[F1]",normal:t(u+"P",d+"P"),ctrl:n,alt:d+"23~",meta:n}),m({keyCode:113,keyCap:"[F2]",normal:t(u+"Q",d+"Q"),ctrl:n,alt:d+"24~",meta:n}),m({keyCode:114,keyCap:"[F3]",normal:t(u+"R",d+"R"),ctrl:n,alt:d+"25~",meta:n}),m({keyCode:115,keyCap:"[F4]",normal:t(u+"S",d+"S"),ctrl:n,alt:d+"26~",meta:n}),m({keyCode:116,keyCap:"[F5]",normal:d+"15~",ctrl:n,alt:d+"28~",meta:n}),m({keyCode:117,keyCap:"[F6]",normal:d+"17~",ctrl:n,alt:d+"29~",meta:n}),m({keyCode:118,keyCap:"[F7]",normal:d+"18~",ctrl:n,alt:d+"31~",meta:n}),m({keyCode:119,keyCap:"[F8]",normal:d+"19~",ctrl:n,alt:d+"32~",meta:n}),m({keyCode:120,keyCap:"[F9]",normal:d+"20~",ctrl:n,alt:d+"33~",meta:n}),m({keyCode:121,keyCap:"[F10]",normal:d+"21~",ctrl:n,alt:d+"34~",meta:n}),m({keyCode:122,keyCap:"[F11]",normal:d+"23~",ctrl:n,alt:d+"42~",meta:n}),m({keyCode:123,keyCap:"[F12]",normal:d+"24~",ctrl:n,alt:d+"43~",meta:n});const y=this._onCtrlNum,b=this._onAltNum;m({keyCode:192,keyCap:"`~",normal:n,ctrl:r(f("@"),f("^")),alt:n,meta:n}),m({keyCode:49,keyCap:"1!",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:50,keyCap:"2@",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:51,keyCap:"3#",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:52,keyCap:"4$",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:53,keyCap:"5%",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:54,keyCap:"6^",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:55,keyCap:"7&",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:56,keyCap:"8*",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:57,keyCap:"9(",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:48,keyCap:"0)",normal:n,ctrl:n,alt:b,meta:n}),m({keyCode:189,keyCap:"-_",normal:n,ctrl:f("_"),alt:n,meta:n}),m({keyCode:187,keyCap:"=+",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:8,keyCap:"[Backspace]",normal:o(p),ctrl:o("\b"),alt:n,meta:n}),m({keyCode:9,keyCap:"[Tab]",normal:r("\t",d+"Z"),ctrl:a,alt:a,meta:n}),m({keyCode:81,keyCap:"qQ",normal:n,ctrl:f("Q"),alt:n,meta:n}),m({keyCode:87,keyCap:"wW",normal:c(n),ctrl:f("W"),alt:c(n),meta:n}),m({keyCode:69,keyCap:"eE",normal:n,ctrl:f("E"),alt:n,meta:n}),m({keyCode:82,keyCap:"rR",normal:n,ctrl:f("R"),alt:n,meta:n}),m({keyCode:84,keyCap:"tT",normal:n,ctrl:f("T"),alt:n,meta:n}),m({keyCode:89,keyCap:"yY",normal:c(n),ctrl:f("Y"),alt:n,meta:n}),m({keyCode:85,keyCap:"uU",normal:n,ctrl:f("U"),alt:n,meta:n}),m({keyCode:73,keyCap:"iI",normal:n,ctrl:f("I"),alt:n,meta:n}),m({keyCode:79,keyCap:"oO",normal:c(n),ctrl:f("O"),alt:n,meta:n}),m({keyCode:80,keyCap:"pP",normal:c(n),ctrl:c(f("P")),alt:n,meta:n}),m({keyCode:219,keyCap:"[{",normal:n,ctrl:f("["),alt:n,meta:n}),m({keyCode:221,keyCap:"]}",normal:n,ctrl:f("]"),alt:n,meta:n}),m({keyCode:220,keyCap:"\\|",normal:n,ctrl:f("\\"),alt:n,meta:n}),m({keyCode:20,keyCap:"[CapsLock]",normal:s,ctrl:s,alt:s,meta:n}),m({keyCode:65,keyCap:"aA",normal:n,ctrl:f("A"),alt:n,meta:n}),m({keyCode:83,keyCap:"sS",normal:n,ctrl:f("S"),alt:n,meta:n}),m({keyCode:68,keyCap:"dD",normal:n,ctrl:f("D"),alt:n,meta:n}),m({keyCode:70,keyCap:"fF",normal:n,ctrl:c(f("F")),alt:c(n),meta:n}),m({keyCode:71,keyCap:"gG",normal:n,ctrl:f("G"),alt:n,meta:n}),m({keyCode:72,keyCap:"hH",normal:c(n),ctrl:f("H"),alt:n,meta:n}),m({keyCode:74,keyCap:"jJ",normal:c(n),ctrl:f("J"),alt:n,meta:n}),m({keyCode:75,keyCap:"kK",normal:c(n),ctrl:f("K"),alt:n,meta:n}),m({keyCode:76,keyCap:"lL",normal:c(n),ctrl:f("L"),alt:n,meta:n}),m({keyCode:186,keyCap:";:",normal:n,ctrl:a,alt:n,meta:n}),m({keyCode:222,keyCap:"'\"",normal:n,ctrl:a,alt:n,meta:n}),m({keyCode:13,keyCap:"[Enter]",normal:"\r",ctrl:n,alt:n,meta:n}),m({keyCode:16,keyCap:"[Shift]",normal:s,ctrl:s,alt:s,meta:n}),m({keyCode:90,keyCap:"zZ",normal:n,ctrl:f("Z"),alt:n,meta:n}),m({keyCode:88,keyCap:"xX",normal:c(n),ctrl:c(f("X")),alt:n,meta:n}),m({keyCode:67,keyCap:"cC",normal:n,ctrl:f("C"),alt:n,meta:n}),m({keyCode:86,keyCap:"vV",normal:n,ctrl:f("V"),alt:n,meta:n}),m({keyCode:66,keyCap:"bB",normal:c(n),ctrl:c(f("B")),alt:c(n),meta:n}),m({keyCode:78,keyCap:"nN",normal:n,ctrl:c(f("N")),alt:n,meta:n}),m({keyCode:77,keyCap:"mM",normal:n,ctrl:f("M"),alt:n,meta:n}),m({keyCode:188,keyCap:",<",normal:n,ctrl:i(a,s),alt:n,meta:n}),m({keyCode:190,keyCap:".>",normal:n,ctrl:i(a,s),alt:n,meta:n}),m({keyCode:191,keyCap:"/?",normal:n,ctrl:r(f("_"),f("?")),alt:n,meta:n}),m({keyCode:17,keyCap:"[Control]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:18,keyCap:"[Alt]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:91,keyCap:"[Meta]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:32,keyCap:" ",normal:n,ctrl:f("@"),alt:n,meta:n}),m({keyCode:93,keyCap:"[Meta]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:42,keyCap:"[PRTSCR]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:145,keyCap:"[SCRLK]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:19,keyCap:"[BREAK]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:45,keyCap:"[Insert]",normal:d+"2~",ctrl:n,alt:n,meta:n}),m({keyCode:36,keyCap:"[Home]",normal:h+"OH",ctrl:n,alt:n,meta:n}),m({keyCode:33,keyCap:"[PageUp]",normal:d+"5~",ctrl:n,alt:n,meta:n}),m({keyCode:46,keyCap:"[DEL]",normal:d+"3~",ctrl:n,alt:n,meta:n}),m({keyCode:35,keyCap:"[End]",normal:h+"OF",ctrl:n,alt:n,meta:n}),m({keyCode:34,keyCap:"[PageDown]",normal:d+"6~",ctrl:n,alt:n,meta:n}),m({keyCode:38,keyCap:"[ArrowUp]",normal:c(l(d+"A",u+"A")),ctrl:n,alt:n,meta:n}),m({keyCode:40,keyCap:"[ArrowDown]",normal:c(l(d+"B",u+"B")),ctrl:n,alt:n,meta:n}),m({keyCode:39,keyCap:"[ArrowRight]",normal:c(l(d+"C",u+"C")),ctrl:n,alt:n,meta:n}),m({keyCode:37,keyCap:"[ArrowLeft]",normal:c(l(d+"D",u+"D")),ctrl:n,alt:n,meta:n}),m({keyCode:144,keyCap:"[NumLock]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:12,keyCap:"[Clear]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:96,keyCap:"[Numpad0]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:97,keyCap:"[Numpad1]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:98,keyCap:"[Numpad2]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:99,keyCap:"[Numpad3]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:100,keyCap:"[Numpad4]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:101,keyCap:"[Numpad5]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:102,keyCap:"[Numpad6]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:103,keyCap:"[Numpad7]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:104,keyCap:"[Numpad8]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:105,keyCap:"[Numpad9]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:107,keyCap:"[NumpadAdd]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:109,keyCap:"[NumpadSubtract]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:106,keyCap:"[NumpadMultiply]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:111,keyCap:"[NumpadDivide]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:110,keyCap:"[NumpadDicimal]",normal:n,ctrl:n,alt:n,meta:n}),this._reverseDefs.Backqoute=this._defs[192],this._reverseDefs.BracketLeft=this._defs[229],this._reverseDefs.BracketRight=this._defs[221],this._reverseDefs.Slash=this._defs[191],this._reverseDefs.Space=this._defs[32]}keyCode(e){let t=this._reverseDefs[e];return t?t.keyCode:0}key(e){let t=this._defs[e];if(!t)return"";let r=t.keyCap;return/^\[\w+\]$/.test(r)?r.substr(1,r.length-2):r.substr(0,1)}}const y=65536,b=1<<17,_=1<<18,w=1<<19,C=1<<20;function A(e){return{shift:(e&b)==b,alt:(e&w)==w,ctrl:(e&_)==_,meta:(e&C)==C}}class v{constructor(){this._map={},this.expandFn=e=>{if(0===e.keys.length)return;let t=[{keyCode:121,key:"F10",code:"F10",id:"121:0"},{keyCode:112,key:"F1",code:"F1",id:"112:0"},{keyCode:113,key:"F2",code:"F2",id:"113:0"},{keyCode:114,key:"F3",code:"F3",id:"114:0"},{keyCode:115,key:"F4",code:"F4",id:"115:0"},{keyCode:116,key:"F5",code:"F5",id:"116:0"},{keyCode:117,key:"F6",code:"F6",id:"117:0"},{keyCode:118,key:"F7",code:"F7",id:"118:0"},{keyCode:119,key:"F8",code:"F8",id:"119:0"},{keyCode:120,key:"F9",code:"F9",id:"120:0"}],r=e.keys.slice();for(var o=0;o<10;o++){let i=o+48+":0",n=t[o];e.keys=r.slice(),e.keys.push(i),e.action={type:"press",key:n,mods:0},this.expandBinding(e)}},this.expandCursor=e=>{if(0==e.keys.length)return;let t=[{keyCode:36,key:"HOME",code:"HOME",id:"36:0"},{keyCode:33,key:"PGUP",code:"PGUP",id:"33:0"},{keyCode:35,key:"END",code:"END",id:"35:0"},{keyCode:34,key:"PGDOWN",code:"PGDOWN",id:"34:0"}],r=["37:0","38:0","39:0","40:0"],o=e.keys.slice();for(var i=0;i<r.length;i++){let n=r[i],s=t[i];e.keys=o.slice(),e.keys.push(n),e.action={type:"press",key:s,mods:0},this.expandBinding(e)}},this.expandBinding=e=>{var t=e.keys.map(e=>e.split("-")[0]);if(0==t.length)return;var r=[t.sort()],o=0;var i=[{idLeft:"16:1",idRight:"16:2",loc:e.shiftLoc},{idLeft:"17:1",idRight:"17:2",loc:e.controlLoc},{idLeft:"18:1",idRight:"18:2",loc:e.optionLoc},{idLeft:"91:1",idRight:"93:0",loc:e.commandLoc}];for(let e of i)for(o=r.length-1;o>=0;o--){var n=r[o];let t=n.indexOf(e.idLeft);if(t<0&&(t=n.indexOf(e.idRight)),t<0)continue;if(1==e.loc){n[t]=e.idLeft;continue}if(2==e.loc){n[t]=e.idRight;continue}n[t]=e.idLeft;let i=n.slice();i[t]=e.idRight,r.push(i)}for(let t of r){let r=t.sort().join(":");this._map[r]=e.action}}}reset(){this._map={}}match(e){let t=e.sort().join(":");return this._map[t]}}const S=l.CANCEL,k=l.DEFAULT,T=l.PASS,x=l.STRIP;function P(e){let t="",r=e.length;for(let o=0;o<r;o+=2)t+=String.fromCharCode(parseInt(e.substr(o,2),16));return t}function E(e){return"escape"!==e?null:{keyCode:27,code:"[Escape]",key:"[Escape]"}}const R=new Set(["20:0","16:1","16:2","17:1","17:2","18:1","18:2","91:1","91:2","93:0"]),M="16:1",N="17:1",F="18:1",I="91:1",D="20:0";function V(e){let t=229===e.keyCode?0:e.keyCode,r=e.location;return t?`${t}:${r}`:`${t}:${r}:${(e.key||"").toLowerCase()}`}function O(e){e&&(e.preventDefault(),e.stopPropagation())}class B{constructor(e,r){this._keyMap=new m(this),this._bindings=new v,this._lang="en",this._langWithDeletes=!1,this._isHKB=!1,this.hasSelection=!1,this._lastKeyDownEvent=null,this._capsLockRemapped=!1,this._shiftRemapped=!1,this._removeAccents=!1,this._metaSendsEscape=!0,this._altSendsWhat="escape",this._ignoreAccents={AltLeft:!0,AltRight:!0},this._modsMap={ShiftLeft:"Shift",ShiftRight:"Shift",AltLeft:"Escape",AltRight:"Escape",MetaLeft:"Meta",MetaRight:"Meta",ControlLeft:"Control",ControlRight:"Control",CapsLock:""},this._downMap={},this._upMap={},this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},this._up=new Set,this._down=new Set,this.caret=document.createElement("div"),this._updateUIKitModsIfNeeded=e=>{let t=e.code;if(this._capsLockRemapped){let r;c("mods",{mods:r="keyup"==e.type&&"CapsLock"==t?0:function(e,t=!0){let r=0;return e.shiftKey&&(r|=b),e.ctrlKey&&(r|=_),e.altKey&&(r|=w),e.metaKey&&(r|=C),t&&(r|=y),r}(e)})}"AltLeft"!=t&&"AltRight"!=t||this._ignoreAccents[t]&&("keydown"==e.type?c("guard-ime-on",{}):c("guard-ime-off",{}),O(e))},this._downKeysIds=()=>{let e=Array.from(this._down);return this._mods.Meta.has("tb-meta")&&-1==e.indexOf(I)&&e.push(I),this._mods.Control.has("tb-ctrl")&&-1==e.indexOf(N)&&e.push(N),this._mods.Alt.has("tb-alt")&&-1==e.indexOf(F)&&e.push(F),this._mods.Shift.has("tb-shift")&&-1==e.indexOf(M)&&e.push(M),e},this._onKeyDown=e=>{if(e.isComposing)return void(this._lastKeyDownEvent=null);let t=e;if(229===e.keyCode){if(!this._lastKeyDownEvent)return;t=this._lastKeyDownEvent}else this._lastKeyDownEvent=e;let r=V(t);this._down.add(r);let o=this._bindings.match(this._downKeysIds());if(R.has(r)||this._down.delete(r),o)return this._execBinding(o,e),void O(e);let i=this._downMap[r],n=this._mod(this._modsMap[t.code]),s=!1;i&&(n&&(s=!this._mods[n].has(r)),s||(this._handleKeyDownKey(i,e),s=!0)),n&&this._mods[n].add(r),this._upMap[r]&&this._up.add(r),this._updateUIKitModsIfNeeded(t),s||this._handleKeyDown(t.keyCode,e)},this._onBeforeInput=e=>{"dictation"!==this._lang?("insertText"===e.inputType&&(this._output(e.data),this._langWithDeletes&&e.data),"deleteContentBackward"===e.inputType&&this._output(p),O(e)):c("voice",{data:e.data||""})},this._onInput=e=>O(e),this._onKeyUp=e=>{this._lastKeyDownEvent=null;let t=V(e);this._down.delete(t);let r=this._mod(this._modsMap[e.code]);r&&this._mods[r].delete(t),this._updateUIKitModsIfNeeded(e);let o=this._upMap[t];o&&this._up.has(t)&&this._handleKeyDownKey(o,null),O(e)},this._handleKeyDown=(e,t)=>{let r={keyCode:e,key:"",code:"Unidentified"};t&&(r.code=t.code,r.key=t.key),this._handleKeyDownKey(r,t)},this._handleKeyDownKey=(e,t)=>{let r=this._keyMap,o=this._mods.Alt.size>0,i=this._mods.Control.size>0,n=this._mods.Meta.size>0,s=this._mods.Shift.size>0,a=e.code,l=e.key,c=function(e,t,r,o){if(!o)return e;if(o.ctrlKey){let r=o.key.toLowerCase(),i=o.keyCode;if(8===i&&"h"===r||9===i&&"i"===r||13===i&&"c"===r||13===i&&"m"===r||27===i&&"["===r)return e.keyCode=t.keyCode(r)||e.keyCode,e;let n=o.code;if(8===i&&"KeyH"===n||9===i&&"KeyI"===n||13===i&&"KeyC"===n||13===i&&"KeyM"===n||27===i&&"BracketLeft"===n)return e.keyCode=t.keyCode(n)||e.keyCode,e}if(!r){let t=o.key.toLowerCase();return(/^[~!@#$%^&*()_+{}|:"<>?]$/.test(t)||/^\w$/.test(t)&&t!==o.key)&&(e.shift=!0),e}return e}({key:l,code:a,keyCode:e.keyCode,alt:o,ctrl:i,meta:n,shift:s},this._keyMap,this._isHKB,t),u=r.getKeyDef(c.keyCode);var p=null;function f(e){p=e;var t=u[e];return"function"==typeof t&&(t=t.call(r,c,u)),t===k&&"normal"!==e&&(t=f("normal")),t}let g;if(g=f(i?"ctrl":o?"alt":n?"meta":"normal"),!this._langWithDeletes||"[Backspace]"!==u.keyCap){if(!this.hasSelection&&(g===T||g===k&&!(i||o||n))){if(g===T&&!e.src)return;if(/^\[\w+\]$/.test(u.keyCap)){if(!e.src)return void(this._removeAccents=!1)}else if(this._langWithDeletes)return;if(!this._isHKB)return this._output(l),void O(t);let r=this._removeAccents?function(e){let t=e.normalize("NFD").replace(/[\u0300-\u036f]/g,""),r=t.replace(/^[\u02c6\u00a8\u00b4\u02dc\u0060]/,"");return r&&(t=r),t}(l):l;return this._removeAccents=!1,this._capsLockRemapped||this._shiftRemapped?this._output(s?r.toUpperCase():r.toLowerCase()):this._output(r),void O(t)}if(this._removeAccents=!1,g===x&&(o=i=!1,"function"==typeof(g=u.normal)&&(g=g.call(r,c,u)),g===k&&2===u.keyCap.length&&(g=u.keyCap.substr(s?1:0,1))),O(t),g!==S&&!this.hasSelection)if(g===k||"string"==typeof g){if("ctrl"===p?i=!1:"alt"===p?o=!1:"meta"===p&&(n=!1),s=c.shift,(o||i||s||n)&&"string"==typeof g&&g.substr(0,2)===d){let e=1;s&&(e+=1),o&&(e+=2),i&&(e+=4),n&&(e+=8);let t=";"+e;g=3==g.length?d+"1"+t+g.substr(2,1):g.substr(0,g.length-1)+t+g.substr(g.length-1)}else{if(g===k&&(g=u.keyCap.substr(s?1:0,1),i)){let e=u.keyCap.substr(0,1).charCodeAt(0);e>=64&&e<=95&&(g=String.fromCharCode(e-64))}let e=g.toString();if(o&&"8-bit"==this._altSendsWhat&&1==e.length){let t=e.charCodeAt(0)+128;g=String.fromCharCode(t)}(o&&"escape"==this._altSendsWhat||n&&this._metaSendsEscape)&&(g=h+e)}"string"==typeof g?this._output(g):console.warn("action is not a string",g)}else console.log("Invalid action: "+JSON.stringify(g))}},this._onIME=e=>{let r=e.type,o=e.data||"";c("ime",{type:r,data:o});var i=this._t.scrollPort_;let n=this.caret;n.style.backgroundColor=lib.colors.setAlpha(t.getCursorColor(),1),n.style.color=i.getBackgroundColor();const s=this._t.screenSize.width,a=this._t.screenSize.height,l=this._t.screen_.cursorPosition.column,u=this._t.screen_.cursorPosition.row;var h=lib.wc.strWidth(o);n.style.bottom="auto",n.style.top="auto",h>=s?(n.style.left="0px",n.style.right="0px",n.style.top=u<.8*a?`calc(var(--hterm-charsize-height) * ${u+1})`:`calc(var(--hterm-charsize-height) * ${u-Math.floor(h/(s+1))-1})`):l+h<=s?(n.style.left=`calc(var(--hterm-charsize-width) * ${l})`,n.style.top=`calc(var(--hterm-charsize-height) * ${u})`,n.style.right="auto"):0==u?(n.style.top=`calc(var(--hterm-charsize-height) * ${u+1})`,n.style.left="auto",n.style.right="0px"):(n.style.top=`calc(var(--hterm-charsize-height) * ${u-1}`,n.style.left="auto",n.style.right="0px"),"compositionend"==r&&this._output(o)},this._output=e=>{this._up.clear(),this.caret.innerHTML="&#8288;",e&&c("out",{data:e})},this._stateReset=e=>{this._down.clear(),this._up.clear(),this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},this.caret.innerHTML="&#8288;",this.hasSelection=e},this._configKey=e=>{let t=e.code,r=E(e.down);r&&(this._downMap[t.id]=r);let o=this._mod(e.mod);o&&(this._modsMap[t.code]=e.mod);let i=E(e.up);i&&(this._upMap[t.id]=i),"AltRight"!==t.code&&"AltLeft"!==t.code||(this._ignoreAccents[t.code]=e.ignoreAccents&&(!!o||!!i||!!r))},this._config=e=>{this._reset(),this._bindings.reset(),this._configKey(e.capsLock),this._configKey(e.command.left),this._configKey(e.command.right),this._configKey(e.control.left),this._configKey(e.control.right),this._configKey(e.option.left),this._configKey(e.option.right),this._configKey(e.shift.left),this._configKey(e.shift.right),this._bindings.expandFn(e.fn),this._bindings.expandCursor(e.cursor);for(let t of e.shortcuts){let e={keys:this._keysFromShortcut(t.input,t.modifiers),action:t.action,shiftLoc:0,controlLoc:0,optionLoc:0,commandLoc:0};this._bindings.expandBinding(e)}this._updateRemappingFlags()},this._onToolbarMods=e=>{let t=A(e);t.alt?this._mods.Alt.add("tb-alt"):this._mods.Alt.delete("tb-alt"),t.ctrl?this._mods.Control.add("tb-ctrl"):this._mods.Control.delete("tb-ctrl"),t.shift?this._mods.Shift.add("tb-shift"):this._mods.Shift.delete("tb-shift"),t.meta?this._mods.Meta.add("tb-meta"):this._mods.Meta.delete("tb-meta")},this._execPress=(e,t,r)=>{let o=e.split(/:/g),i=this._mods;this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set};let n=parseInt(o[0],10),s=A(n);s.shift&&this._mods.Shift.add("tb-shift"),s.ctrl&&this._mods.Control.add("tb-ctrl"),s.alt&&this._mods.Alt.add("tb-alt"),s.meta&&this._mods.Meta.add("tb-meta");let a=parseInt(o[1],10),l=""==o[3]?":":o[3]||this._keyMap.key(a)||"",c={keyCode:a,key:l,code:"",src:"toolbar"};if(!r&&n>0){let e=c.keyCode+":"+o[2]+(0==a?":"+l:"");this._down.add(e);let t=this._bindings.match(this._downKeysIds());if(this._down.delete(e),t)return this._execBinding(t,null),void(this._mods=i)}this._handleKeyDownKey(c,t),this._mods=i,this._removeAccents=!0},this.onKB=(e,t)=>{switch(e){case"mods-down":this._handleCapsLockDown(!0);break;case"mods-up":this._handleCapsLockDown(!1);break;case"guard-up":this._handleGuard(!0,t);break;case"guard-down":this._handleGuard(!1,t);break;case"selection":this.hasSelection=t;break;case"lang":this._handleLang(t);break;case"toolbar-mods":this._onToolbarMods(t);break;case"toolbar-press":this._execPress(t,null,!1);break;case"press":this._execPress(t,null,!0);break;case"state-reset":this._stateReset(t);break;case"focus":this.focus(t);break;case"hex":this._output(P(t)),this._removeAccents=!0;break;case"config":this._config(t)}},this._t=e,this.element=r||document.createElement("div");let o=this.element;this.caret.innerHTML="&#8288;";var i=document.getElementById("hterm:row-nodes");null==i||i.append(this.caret),this.caret.style.position="absolute",this.caret.style.zIndex="1000",o.setAttribute("autocomplete","off"),o.setAttribute("spellcheck","false"),o.setAttribute("autocorrect","off"),o.setAttribute("autocapitalize","none"),o.setAttribute("autofocus","true"),o.setAttribute("contenteditable","plaintext-only"),o.addEventListener("keydown",this._onKeyDown),o.addEventListener("keyup",this._onKeyUp),window.addEventListener("keydown",this._onKeyDown),window.addEventListener("keyup",this._onKeyUp),o.addEventListener("compositionstart",this._onIME),o.addEventListener("compositionupdate",this._onIME),o.addEventListener("compositionend",this._onIME),o.addEventListener("beforeinput",this._onBeforeInput),o.addEventListener("input",this._onInput),this._updateRemappingFlags()}_updateRemappingFlags(){this._capsLockRemapped=null!=this._modsMap.CapsLock||null!=this._downMap[D]||null!=this._upMap[D],this._shiftRemapped=null!=this._modsMap.ShiftLeft&&"Shift"!==this._modsMap.ShiftLeft||null!=this._modsMap.ShiftRight&&"Shift"!==this._modsMap.ShiftRight}_mod(e){switch(e){case"Escape":return this._altSendsWhat="escape","Alt";case"8-bit":return this._altSendsWhat="8-bit","Alt";case"Shift":return"Shift";case"Control":return"Control";case"Meta":return this._metaSendsEscape=!1,"Meta";case"Meta-Escape":return this._metaSendsEscape=!0,"Meta";default:return null}}focus(e){var t;e?(this.element.focus(),null===(t=window.getSelection())||void 0===t||t.collapse(this.caret)):this.element.blur()}_handleCapsLockDown(e){let t=this._modsMap.CapsLock;if(e){this._down.add(D);let e=this._downMap[D];return!e||t&&this._mods[t].has(D)||this._handleKeyDownKey(e,null),t&&this._mods[t].add(D),void(this._upMap[D]&&this._up.add(D))}this._down.delete(D),t&&this._mods[t].delete(D);let r=this._upMap[D];r&&this._up.has(D)&&this._handleKeyDownKey(r,null)}_handleLang(e){let t=e.split(":");this._lang=t[0],this._isHKB="hw"===t[1],this._langWithDeletes="ko-KR"===this._lang,this._stateReset(this.hasSelection),"dictation"!==this._lang&&c("voice",{data:""})}_handleGuard(e,t){let r=this._keyMap.keyCode(t),o=`${r}:0`;if(e)return this._down.delete(o),void(this._removeAccents=!0);this._down.add(o),this._handleKeyDown(r,null)}_reset(){this.hasSelection=!1,this._removeAccents=!1,this._modsMap={},this._downMap={},this._upMap={},this._up.clear(),this._down.clear(),this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},this._ignoreAccents={AltLeft:!0,AltRight:!0}}_keysFromShortcut(e,t){var r=[];let o=A(t);o.shift&&r.push(M),o.alt&&r.push(F),o.ctrl&&r.push(N),o.meta&&r.push(I);let i=this._keyMap.keyCode(e);return i?r.push(i+":0"):r.push("0:0-"+e),r}_execBinding(e,t){switch(e.type){case"command":c("command",{command:e.value});break;case"press":this._execPress(`${e.mods}:${e.key.id}`,t,!0);break;case"hex":this._output(P(e.value)),this._removeAccents=!0}}}if(void 0!==K)throw new Error('Global "lib" object already exists.');var K={runtimeDependencies_:{},initCallbacks_:[],rtdep:function(e){var t;try{throw new Error}catch(e){var r=e.stack.split("\n");t=r.length>=3?r[2].replace(/^\s*at\s+/,""):r[1].replace(/^\s*global code@/,"")}for(var o=0;o<arguments.length;o++){var i=arguments[o];if(i instanceof Array)K.rtdep.apply(K,i);else{var n=this.runtimeDependencies_[i];n||(n=this.runtimeDependencies_[i]=[]),n.push(t)}}},ensureRuntimeDependencies_:function(){var e=!0;for(var t in K.runtimeDependencies_)for(var r=K.runtimeDependencies_[t],o=t.split("."),i=window,n=0;n<o.length;n++){if(!(o[n]in i)){console.warn('Missing "'+t+'" is needed by',r),e=!1;break}i=i[o[n]]}if(!e)throw new Error("Failed runtime dependency check")},registerInit:function(e,t){return K.initCallbacks_.push([e,t]),t},init:function(e,t){var r=K.initCallbacks_,o=function(){if(r.length){var i=r.shift();t&&t("init: "+i[0]),i[1](K.f.alarm(o))}else e()};if("function"!=typeof e)throw new Error("Missing or invalid argument: onInit");K.ensureRuntimeDependencies_(),setTimeout(o,0)}};if(String.prototype.padStart||(String.prototype.padStart=function(e,t){return(e-=this.length)<=0?String(this):(void 0===t&&(t=" "),e>t.length&&(t=t.repeat(e/t.length+1)),t.slice(0,e)+String(this))}),String.prototype.padEnd||(String.prototype.padEnd=function(e,t){return(e-=this.length)<=0?String(this):(void 0===t&&(t=" "),e>t.length&&(t=t.repeat(e/t.length+1)),String(this)+t.slice(0,e))}),!Object.values||!Object.entries){const e=Function.bind.call(Function.call,Array.prototype.reduce),t=Function.bind.call(Function.call,Object.prototype.propertyIsEnumerable),r=Function.bind.call(Function.call,Array.prototype.concat);Object.values||(Object.values=function(o){return e(Reflect.ownKeys(o),(e,i)=>r(e,"string"==typeof i&&t(o,i)?[o[i]]:[]),[])}),Object.entries||(Object.entries=function(o){return e(Reflect.ownKeys(o),(e,i)=>r(e,"string"==typeof i&&t(o,i)?[[i,o[i]]]:[]),[])})}if("function"!=typeof Promise.prototype.finally){const e=function(e,t){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("Assertion failed: Type(O) is not Object");const r=e.constructor;if(void 0===r)return t;if(!r||"object"!=typeof r&&"function"!=typeof r)throw new TypeError("O.constructor is not an Object");const o="function"==typeof Symbol&&"symbol"==typeof Symbol.species?r[Symbol.species]:void 0;if(null==o)return t;if("function"==typeof o&&o.prototype)return o;throw new TypeError("no constructor found")},t={finally(t){const r=this;if("object"!=typeof r||null===r)throw new TypeError('"this" value is not an Object');const o=e(r,Promise);return"function"!=typeof t?Promise.prototype.then.call(r,t,t):Promise.prototype.then.call(r,e=>new o(e=>e(t())).then(()=>e),e=>new o(e=>e(t())).then(()=>{throw e}))}};Object.defineProperty(Promise.prototype,"finally",{configurable:!0,writable:!0,value:t.finally})}K.array={},K.array.arrayBigEndianToUint32=function(e){return(e[0]<<24|e[1]<<16|e[2]<<8|e[3]<<0)>>>0},K.array.uint32ToArrayBigEndian=function(e){return[e>>>24&255,e>>>16&255,e>>>8&255,e>>>0&255]},K.array.concatTyped=function(...e){let t=0;for(const r of e)t+=r.length;const r=new e[0].constructor(t);let o=0;for(const t of e)r.set(t,o),o+=t.length;return r},K.array.compare=function(e,t){if(null===e||null===t)return null===e&&null===t;if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0},K.colors={},K.colors.re_={hex16:/#([a-f0-9])([a-f0-9])([a-f0-9])/i,hex24:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/i,rgb:new RegExp("^/s*rgb/s*/(/s*(/d{1,3})/s*,/s*(/d{1,3})/s*,/s*(/d{1,3})/s*/)/s*$".replace(/\//g,"\\"),"i"),rgba:new RegExp("^/s*rgba/s*/(/s*(/d{1,3})/s*,/s*(/d{1,3})/s*,/s*(/d{1,3})/s*(?:,/s*(/d+(?:/./d+)?)/s*)/)/s*$".replace(/\//g,"\\"),"i"),rgbx:new RegExp("^/s*rgba?/s*/(/s*(/d{1,3})/s*,/s*(/d{1,3})/s*,/s*(/d{1,3})/s*(?:,/s*(/d+(?:/./d+)?)/s*)?/)/s*$".replace(/\//g,"\\"),"i"),x11rgb:/^\s*rgb:([a-f0-9]{1,4})\/([a-f0-9]{1,4})\/([a-f0-9]{1,4})\s*$/i,name:/[a-z][a-z0-9\s]+/},K.colors.rgbToX11=function(e){function t(e){return e=(257*Math.min(e,255)).toString(16),K.f.zpad(e,4)}var r=e.match(K.colors.re_.rgbx);return r?"rgb:"+t(r[1])+"/"+t(r[2])+"/"+t(r[3]):null},K.colors.x11HexToCSS=function(e){if(!e.startsWith("#"))return null;if(e=e.substr(1),-1==[3,6,9,12].indexOf(e.length))return null;if(e.match(/[^a-f0-9]/i))return null;var t=e.length/3,r=e.substr(0,t),o=e.substr(t,t),i=e.substr(t+t,t);return K.colors.arrayToRGBA([r,o,i].map((function(e){return e=parseInt(e,16),2==t?e:1==t?e<<4:e>>4*(t-2)})))},K.colors.x11ToCSS=function(e){var t=e.match(K.colors.re_.x11rgb);return t?(t.splice(0,1),K.colors.arrayToRGBA(t.map((function(e){return 1==e.length?parseInt(e+e,16):2==e.length?parseInt(e,16):(3==e.length&&(e+=e.substr(2)),Math.round(parseInt(e,16)/257))})))):e.startsWith("#")?K.colors.x11HexToCSS(e):K.colors.nameToRGB(e)},K.colors.hexToRGB=function(e){var t=K.colors.re_.hex16,r=K.colors.re_.hex24;function o(e){4==e.length&&(e=e.replace(t,(function(e,t,r,o){return"#"+t+t+r+r+o+o})));var o=e.match(r);return o?"rgb("+parseInt(o[1],16)+", "+parseInt(o[2],16)+", "+parseInt(o[3],16)+")":null}if(e instanceof Array)for(var i=0;i<e.length;i++)e[i]=o(e[i]);else e=o(e);return e},K.colors.rgbToHex=function(e){function t(e){var t=K.colors.crackRGB(e);return t?"#"+K.f.zpad((parseInt(t[0])<<16|parseInt(t[1])<<8|parseInt(t[2])<<0).toString(16),6):null}if(e instanceof Array)for(var r=0;r<e.length;r++)e[r]=t(e[r]);else e=t(e);return e},K.colors.normalizeCSS=function(e){return e.startsWith("#")?K.colors.hexToRGB(e):K.colors.re_.rgbx.test(e)?e:K.colors.nameToRGB(e)},K.colors.arrayToRGBA=function(e){var t=e.length>3?e[3]:1;return"rgba("+e[0]+", "+e[1]+", "+e[2]+", "+t+")"},K.colors.setAlpha=function(e,t){var r=K.colors.crackRGB(e);return r[3]=t,K.colors.arrayToRGBA(r)},K.colors.mix=function(e,t,r){for(var o=K.colors.crackRGB(e),i=K.colors.crackRGB(t),n=0;n<4;++n){var s=i[n]-o[n];o[n]=Math.round(parseInt(o[n])+s*r)}return K.colors.arrayToRGBA(o)},K.colors.crackRGB=function(e){var t;if(e.startsWith("rgba")){if(t=e.match(K.colors.re_.rgba))return t.shift(),t}else if(t=e.match(K.colors.re_.rgb))return t.shift(),t.push("1"),t;return console.error("Couldn't crack: "+e),null},K.colors.nameToRGB=function(e){return e in K.colors.colorNames?K.colors.colorNames[e]:(e=e.toLowerCase())in K.colors.colorNames?K.colors.colorNames[e]:(e=e.replace(/\s+/g,""))in K.colors.colorNames?K.colors.colorNames[e]:null},K.colors.stockColorPalette=K.colors.hexToRGB(["#000000","#CC0000","#4E9A06","#C4A000","#3465A4","#75507B","#06989A","#D3D7CF","#555753","#EF2929","#00BA13","#FCE94F","#729FCF","#F200CB","#00B5BD","#EEEEEC","#000000","#00005F","#000087","#0000AF","#0000D7","#0000FF","#005F00","#005F5F","#005F87","#005FAF","#005FD7","#005FFF","#008700","#00875F","#008787","#0087AF","#0087D7","#0087FF","#00AF00","#00AF5F","#00AF87","#00AFAF","#00AFD7","#00AFFF","#00D700","#00D75F","#00D787","#00D7AF","#00D7D7","#00D7FF","#00FF00","#00FF5F","#00FF87","#00FFAF","#00FFD7","#00FFFF","#5F0000","#5F005F","#5F0087","#5F00AF","#5F00D7","#5F00FF","#5F5F00","#5F5F5F","#5F5F87","#5F5FAF","#5F5FD7","#5F5FFF","#5F8700","#5F875F","#5F8787","#5F87AF","#5F87D7","#5F87FF","#5FAF00","#5FAF5F","#5FAF87","#5FAFAF","#5FAFD7","#5FAFFF","#5FD700","#5FD75F","#5FD787","#5FD7AF","#5FD7D7","#5FD7FF","#5FFF00","#5FFF5F","#5FFF87","#5FFFAF","#5FFFD7","#5FFFFF","#870000","#87005F","#870087","#8700AF","#8700D7","#8700FF","#875F00","#875F5F","#875F87","#875FAF","#875FD7","#875FFF","#878700","#87875F","#878787","#8787AF","#8787D7","#8787FF","#87AF00","#87AF5F","#87AF87","#87AFAF","#87AFD7","#87AFFF","#87D700","#87D75F","#87D787","#87D7AF","#87D7D7","#87D7FF","#87FF00","#87FF5F","#87FF87","#87FFAF","#87FFD7","#87FFFF","#AF0000","#AF005F","#AF0087","#AF00AF","#AF00D7","#AF00FF","#AF5F00","#AF5F5F","#AF5F87","#AF5FAF","#AF5FD7","#AF5FFF","#AF8700","#AF875F","#AF8787","#AF87AF","#AF87D7","#AF87FF","#AFAF00","#AFAF5F","#AFAF87","#AFAFAF","#AFAFD7","#AFAFFF","#AFD700","#AFD75F","#AFD787","#AFD7AF","#AFD7D7","#AFD7FF","#AFFF00","#AFFF5F","#AFFF87","#AFFFAF","#AFFFD7","#AFFFFF","#D70000","#D7005F","#D70087","#D700AF","#D700D7","#D700FF","#D75F00","#D75F5F","#D75F87","#D75FAF","#D75FD7","#D75FFF","#D78700","#D7875F","#D78787","#D787AF","#D787D7","#D787FF","#D7AF00","#D7AF5F","#D7AF87","#D7AFAF","#D7AFD7","#D7AFFF","#D7D700","#D7D75F","#D7D787","#D7D7AF","#D7D7D7","#D7D7FF","#D7FF00","#D7FF5F","#D7FF87","#D7FFAF","#D7FFD7","#D7FFFF","#FF0000","#FF005F","#FF0087","#FF00AF","#FF00D7","#FF00FF","#FF5F00","#FF5F5F","#FF5F87","#FF5FAF","#FF5FD7","#FF5FFF","#FF8700","#FF875F","#FF8787","#FF87AF","#FF87D7","#FF87FF","#FFAF00","#FFAF5F","#FFAF87","#FFAFAF","#FFAFD7","#FFAFFF","#FFD700","#FFD75F","#FFD787","#FFD7AF","#FFD7D7","#FFD7FF","#FFFF00","#FFFF5F","#FFFF87","#FFFFAF","#FFFFD7","#FFFFFF","#080808","#121212","#1C1C1C","#262626","#303030","#3A3A3A","#444444","#4E4E4E","#585858","#626262","#6C6C6C","#767676","#808080","#8A8A8A","#949494","#9E9E9E","#A8A8A8","#B2B2B2","#BCBCBC","#C6C6C6","#D0D0D0","#DADADA","#E4E4E4","#EEEEEE"]),K.colors.colorPalette=K.colors.stockColorPalette,K.colors.colorNames={aliceblue:"rgb(240, 248, 255)",antiquewhite:"rgb(250, 235, 215)",antiquewhite1:"rgb(255, 239, 219)",antiquewhite2:"rgb(238, 223, 204)",antiquewhite3:"rgb(205, 192, 176)",antiquewhite4:"rgb(139, 131, 120)",aquamarine:"rgb(127, 255, 212)",aquamarine1:"rgb(127, 255, 212)",aquamarine2:"rgb(118, 238, 198)",aquamarine3:"rgb(102, 205, 170)",aquamarine4:"rgb(69, 139, 116)",azure:"rgb(240, 255, 255)",azure1:"rgb(240, 255, 255)",azure2:"rgb(224, 238, 238)",azure3:"rgb(193, 205, 205)",azure4:"rgb(131, 139, 139)",beige:"rgb(245, 245, 220)",bisque:"rgb(255, 228, 196)",bisque1:"rgb(255, 228, 196)",bisque2:"rgb(238, 213, 183)",bisque3:"rgb(205, 183, 158)",bisque4:"rgb(139, 125, 107)",black:"rgb(0, 0, 0)",blanchedalmond:"rgb(255, 235, 205)",blue:"rgb(0, 0, 255)",blue1:"rgb(0, 0, 255)",blue2:"rgb(0, 0, 238)",blue3:"rgb(0, 0, 205)",blue4:"rgb(0, 0, 139)",blueviolet:"rgb(138, 43, 226)",brown:"rgb(165, 42, 42)",brown1:"rgb(255, 64, 64)",brown2:"rgb(238, 59, 59)",brown3:"rgb(205, 51, 51)",brown4:"rgb(139, 35, 35)",burlywood:"rgb(222, 184, 135)",burlywood1:"rgb(255, 211, 155)",burlywood2:"rgb(238, 197, 145)",burlywood3:"rgb(205, 170, 125)",burlywood4:"rgb(139, 115, 85)",cadetblue:"rgb(95, 158, 160)",cadetblue1:"rgb(152, 245, 255)",cadetblue2:"rgb(142, 229, 238)",cadetblue3:"rgb(122, 197, 205)",cadetblue4:"rgb(83, 134, 139)",chartreuse:"rgb(127, 255, 0)",chartreuse1:"rgb(127, 255, 0)",chartreuse2:"rgb(118, 238, 0)",chartreuse3:"rgb(102, 205, 0)",chartreuse4:"rgb(69, 139, 0)",chocolate:"rgb(210, 105, 30)",chocolate1:"rgb(255, 127, 36)",chocolate2:"rgb(238, 118, 33)",chocolate3:"rgb(205, 102, 29)",chocolate4:"rgb(139, 69, 19)",coral:"rgb(255, 127, 80)",coral1:"rgb(255, 114, 86)",coral2:"rgb(238, 106, 80)",coral3:"rgb(205, 91, 69)",coral4:"rgb(139, 62, 47)",cornflowerblue:"rgb(100, 149, 237)",cornsilk:"rgb(255, 248, 220)",cornsilk1:"rgb(255, 248, 220)",cornsilk2:"rgb(238, 232, 205)",cornsilk3:"rgb(205, 200, 177)",cornsilk4:"rgb(139, 136, 120)",cyan:"rgb(0, 255, 255)",cyan1:"rgb(0, 255, 255)",cyan2:"rgb(0, 238, 238)",cyan3:"rgb(0, 205, 205)",cyan4:"rgb(0, 139, 139)",darkblue:"rgb(0, 0, 139)",darkcyan:"rgb(0, 139, 139)",darkgoldenrod:"rgb(184, 134, 11)",darkgoldenrod1:"rgb(255, 185, 15)",darkgoldenrod2:"rgb(238, 173, 14)",darkgoldenrod3:"rgb(205, 149, 12)",darkgoldenrod4:"rgb(139, 101, 8)",darkgray:"rgb(169, 169, 169)",darkgreen:"rgb(0, 100, 0)",darkgrey:"rgb(169, 169, 169)",darkkhaki:"rgb(189, 183, 107)",darkmagenta:"rgb(139, 0, 139)",darkolivegreen:"rgb(85, 107, 47)",darkolivegreen1:"rgb(202, 255, 112)",darkolivegreen2:"rgb(188, 238, 104)",darkolivegreen3:"rgb(162, 205, 90)",darkolivegreen4:"rgb(110, 139, 61)",darkorange:"rgb(255, 140, 0)",darkorange1:"rgb(255, 127, 0)",darkorange2:"rgb(238, 118, 0)",darkorange3:"rgb(205, 102, 0)",darkorange4:"rgb(139, 69, 0)",darkorchid:"rgb(153, 50, 204)",darkorchid1:"rgb(191, 62, 255)",darkorchid2:"rgb(178, 58, 238)",darkorchid3:"rgb(154, 50, 205)",darkorchid4:"rgb(104, 34, 139)",darkred:"rgb(139, 0, 0)",darksalmon:"rgb(233, 150, 122)",darkseagreen:"rgb(143, 188, 143)",darkseagreen1:"rgb(193, 255, 193)",darkseagreen2:"rgb(180, 238, 180)",darkseagreen3:"rgb(155, 205, 155)",darkseagreen4:"rgb(105, 139, 105)",darkslateblue:"rgb(72, 61, 139)",darkslategray:"rgb(47, 79, 79)",darkslategray1:"rgb(151, 255, 255)",darkslategray2:"rgb(141, 238, 238)",darkslategray3:"rgb(121, 205, 205)",darkslategray4:"rgb(82, 139, 139)",darkslategrey:"rgb(47, 79, 79)",darkturquoise:"rgb(0, 206, 209)",darkviolet:"rgb(148, 0, 211)",debianred:"rgb(215, 7, 81)",deeppink:"rgb(255, 20, 147)",deeppink1:"rgb(255, 20, 147)",deeppink2:"rgb(238, 18, 137)",deeppink3:"rgb(205, 16, 118)",deeppink4:"rgb(139, 10, 80)",deepskyblue:"rgb(0, 191, 255)",deepskyblue1:"rgb(0, 191, 255)",deepskyblue2:"rgb(0, 178, 238)",deepskyblue3:"rgb(0, 154, 205)",deepskyblue4:"rgb(0, 104, 139)",dimgray:"rgb(105, 105, 105)",dimgrey:"rgb(105, 105, 105)",dodgerblue:"rgb(30, 144, 255)",dodgerblue1:"rgb(30, 144, 255)",dodgerblue2:"rgb(28, 134, 238)",dodgerblue3:"rgb(24, 116, 205)",dodgerblue4:"rgb(16, 78, 139)",firebrick:"rgb(178, 34, 34)",firebrick1:"rgb(255, 48, 48)",firebrick2:"rgb(238, 44, 44)",firebrick3:"rgb(205, 38, 38)",firebrick4:"rgb(139, 26, 26)",floralwhite:"rgb(255, 250, 240)",forestgreen:"rgb(34, 139, 34)",gainsboro:"rgb(220, 220, 220)",ghostwhite:"rgb(248, 248, 255)",gold:"rgb(255, 215, 0)",gold1:"rgb(255, 215, 0)",gold2:"rgb(238, 201, 0)",gold3:"rgb(205, 173, 0)",gold4:"rgb(139, 117, 0)",goldenrod:"rgb(218, 165, 32)",goldenrod1:"rgb(255, 193, 37)",goldenrod2:"rgb(238, 180, 34)",goldenrod3:"rgb(205, 155, 29)",goldenrod4:"rgb(139, 105, 20)",gray:"rgb(190, 190, 190)",gray0:"rgb(0, 0, 0)",gray1:"rgb(3, 3, 3)",gray10:"rgb(26, 26, 26)",gray100:"rgb(255, 255, 255)",gray11:"rgb(28, 28, 28)",gray12:"rgb(31, 31, 31)",gray13:"rgb(33, 33, 33)",gray14:"rgb(36, 36, 36)",gray15:"rgb(38, 38, 38)",gray16:"rgb(41, 41, 41)",gray17:"rgb(43, 43, 43)",gray18:"rgb(46, 46, 46)",gray19:"rgb(48, 48, 48)",gray2:"rgb(5, 5, 5)",gray20:"rgb(51, 51, 51)",gray21:"rgb(54, 54, 54)",gray22:"rgb(56, 56, 56)",gray23:"rgb(59, 59, 59)",gray24:"rgb(61, 61, 61)",gray25:"rgb(64, 64, 64)",gray26:"rgb(66, 66, 66)",gray27:"rgb(69, 69, 69)",gray28:"rgb(71, 71, 71)",gray29:"rgb(74, 74, 74)",gray3:"rgb(8, 8, 8)",gray30:"rgb(77, 77, 77)",gray31:"rgb(79, 79, 79)",gray32:"rgb(82, 82, 82)",gray33:"rgb(84, 84, 84)",gray34:"rgb(87, 87, 87)",gray35:"rgb(89, 89, 89)",gray36:"rgb(92, 92, 92)",gray37:"rgb(94, 94, 94)",gray38:"rgb(97, 97, 97)",gray39:"rgb(99, 99, 99)",gray4:"rgb(10, 10, 10)",gray40:"rgb(102, 102, 102)",gray41:"rgb(105, 105, 105)",gray42:"rgb(107, 107, 107)",gray43:"rgb(110, 110, 110)",gray44:"rgb(112, 112, 112)",gray45:"rgb(115, 115, 115)",gray46:"rgb(117, 117, 117)",gray47:"rgb(120, 120, 120)",gray48:"rgb(122, 122, 122)",gray49:"rgb(125, 125, 125)",gray5:"rgb(13, 13, 13)",gray50:"rgb(127, 127, 127)",gray51:"rgb(130, 130, 130)",gray52:"rgb(133, 133, 133)",gray53:"rgb(135, 135, 135)",gray54:"rgb(138, 138, 138)",gray55:"rgb(140, 140, 140)",gray56:"rgb(143, 143, 143)",gray57:"rgb(145, 145, 145)",gray58:"rgb(148, 148, 148)",gray59:"rgb(150, 150, 150)",gray6:"rgb(15, 15, 15)",gray60:"rgb(153, 153, 153)",gray61:"rgb(156, 156, 156)",gray62:"rgb(158, 158, 158)",gray63:"rgb(161, 161, 161)",gray64:"rgb(163, 163, 163)",gray65:"rgb(166, 166, 166)",gray66:"rgb(168, 168, 168)",gray67:"rgb(171, 171, 171)",gray68:"rgb(173, 173, 173)",gray69:"rgb(176, 176, 176)",gray7:"rgb(18, 18, 18)",gray70:"rgb(179, 179, 179)",gray71:"rgb(181, 181, 181)",gray72:"rgb(184, 184, 184)",gray73:"rgb(186, 186, 186)",gray74:"rgb(189, 189, 189)",gray75:"rgb(191, 191, 191)",gray76:"rgb(194, 194, 194)",gray77:"rgb(196, 196, 196)",gray78:"rgb(199, 199, 199)",gray79:"rgb(201, 201, 201)",gray8:"rgb(20, 20, 20)",gray80:"rgb(204, 204, 204)",gray81:"rgb(207, 207, 207)",gray82:"rgb(209, 209, 209)",gray83:"rgb(212, 212, 212)",gray84:"rgb(214, 214, 214)",gray85:"rgb(217, 217, 217)",gray86:"rgb(219, 219, 219)",gray87:"rgb(222, 222, 222)",gray88:"rgb(224, 224, 224)",gray89:"rgb(227, 227, 227)",gray9:"rgb(23, 23, 23)",gray90:"rgb(229, 229, 229)",gray91:"rgb(232, 232, 232)",gray92:"rgb(235, 235, 235)",gray93:"rgb(237, 237, 237)",gray94:"rgb(240, 240, 240)",gray95:"rgb(242, 242, 242)",gray96:"rgb(245, 245, 245)",gray97:"rgb(247, 247, 247)",gray98:"rgb(250, 250, 250)",gray99:"rgb(252, 252, 252)",green:"rgb(0, 255, 0)",green1:"rgb(0, 255, 0)",green2:"rgb(0, 238, 0)",green3:"rgb(0, 205, 0)",green4:"rgb(0, 139, 0)",greenyellow:"rgb(173, 255, 47)",grey:"rgb(190, 190, 190)",grey0:"rgb(0, 0, 0)",grey1:"rgb(3, 3, 3)",grey10:"rgb(26, 26, 26)",grey100:"rgb(255, 255, 255)",grey11:"rgb(28, 28, 28)",grey12:"rgb(31, 31, 31)",grey13:"rgb(33, 33, 33)",grey14:"rgb(36, 36, 36)",grey15:"rgb(38, 38, 38)",grey16:"rgb(41, 41, 41)",grey17:"rgb(43, 43, 43)",grey18:"rgb(46, 46, 46)",grey19:"rgb(48, 48, 48)",grey2:"rgb(5, 5, 5)",grey20:"rgb(51, 51, 51)",grey21:"rgb(54, 54, 54)",grey22:"rgb(56, 56, 56)",grey23:"rgb(59, 59, 59)",grey24:"rgb(61, 61, 61)",grey25:"rgb(64, 64, 64)",grey26:"rgb(66, 66, 66)",grey27:"rgb(69, 69, 69)",grey28:"rgb(71, 71, 71)",grey29:"rgb(74, 74, 74)",grey3:"rgb(8, 8, 8)",grey30:"rgb(77, 77, 77)",grey31:"rgb(79, 79, 79)",grey32:"rgb(82, 82, 82)",grey33:"rgb(84, 84, 84)",grey34:"rgb(87, 87, 87)",grey35:"rgb(89, 89, 89)",grey36:"rgb(92, 92, 92)",grey37:"rgb(94, 94, 94)",grey38:"rgb(97, 97, 97)",grey39:"rgb(99, 99, 99)",grey4:"rgb(10, 10, 10)",grey40:"rgb(102, 102, 102)",grey41:"rgb(105, 105, 105)",grey42:"rgb(107, 107, 107)",grey43:"rgb(110, 110, 110)",grey44:"rgb(112, 112, 112)",grey45:"rgb(115, 115, 115)",grey46:"rgb(117, 117, 117)",grey47:"rgb(120, 120, 120)",grey48:"rgb(122, 122, 122)",grey49:"rgb(125, 125, 125)",grey5:"rgb(13, 13, 13)",grey50:"rgb(127, 127, 127)",grey51:"rgb(130, 130, 130)",grey52:"rgb(133, 133, 133)",grey53:"rgb(135, 135, 135)",grey54:"rgb(138, 138, 138)",grey55:"rgb(140, 140, 140)",grey56:"rgb(143, 143, 143)",grey57:"rgb(145, 145, 145)",grey58:"rgb(148, 148, 148)",grey59:"rgb(150, 150, 150)",grey6:"rgb(15, 15, 15)",grey60:"rgb(153, 153, 153)",grey61:"rgb(156, 156, 156)",grey62:"rgb(158, 158, 158)",grey63:"rgb(161, 161, 161)",grey64:"rgb(163, 163, 163)",grey65:"rgb(166, 166, 166)",grey66:"rgb(168, 168, 168)",grey67:"rgb(171, 171, 171)",grey68:"rgb(173, 173, 173)",grey69:"rgb(176, 176, 176)",grey7:"rgb(18, 18, 18)",grey70:"rgb(179, 179, 179)",grey71:"rgb(181, 181, 181)",grey72:"rgb(184, 184, 184)",grey73:"rgb(186, 186, 186)",grey74:"rgb(189, 189, 189)",grey75:"rgb(191, 191, 191)",grey76:"rgb(194, 194, 194)",grey77:"rgb(196, 196, 196)",grey78:"rgb(199, 199, 199)",grey79:"rgb(201, 201, 201)",grey8:"rgb(20, 20, 20)",grey80:"rgb(204, 204, 204)",grey81:"rgb(207, 207, 207)",grey82:"rgb(209, 209, 209)",grey83:"rgb(212, 212, 212)",grey84:"rgb(214, 214, 214)",grey85:"rgb(217, 217, 217)",grey86:"rgb(219, 219, 219)",grey87:"rgb(222, 222, 222)",grey88:"rgb(224, 224, 224)",grey89:"rgb(227, 227, 227)",grey9:"rgb(23, 23, 23)",grey90:"rgb(229, 229, 229)",grey91:"rgb(232, 232, 232)",grey92:"rgb(235, 235, 235)",grey93:"rgb(237, 237, 237)",grey94:"rgb(240, 240, 240)",grey95:"rgb(242, 242, 242)",grey96:"rgb(245, 245, 245)",grey97:"rgb(247, 247, 247)",grey98:"rgb(250, 250, 250)",grey99:"rgb(252, 252, 252)",honeydew:"rgb(240, 255, 240)",honeydew1:"rgb(240, 255, 240)",honeydew2:"rgb(224, 238, 224)",honeydew3:"rgb(193, 205, 193)",honeydew4:"rgb(131, 139, 131)",hotpink:"rgb(255, 105, 180)",hotpink1:"rgb(255, 110, 180)",hotpink2:"rgb(238, 106, 167)",hotpink3:"rgb(205, 96, 144)",hotpink4:"rgb(139, 58, 98)",indianred:"rgb(205, 92, 92)",indianred1:"rgb(255, 106, 106)",indianred2:"rgb(238, 99, 99)",indianred3:"rgb(205, 85, 85)",indianred4:"rgb(139, 58, 58)",ivory:"rgb(255, 255, 240)",ivory1:"rgb(255, 255, 240)",ivory2:"rgb(238, 238, 224)",ivory3:"rgb(205, 205, 193)",ivory4:"rgb(139, 139, 131)",khaki:"rgb(240, 230, 140)",khaki1:"rgb(255, 246, 143)",khaki2:"rgb(238, 230, 133)",khaki3:"rgb(205, 198, 115)",khaki4:"rgb(139, 134, 78)",lavender:"rgb(230, 230, 250)",lavenderblush:"rgb(255, 240, 245)",lavenderblush1:"rgb(255, 240, 245)",lavenderblush2:"rgb(238, 224, 229)",lavenderblush3:"rgb(205, 193, 197)",lavenderblush4:"rgb(139, 131, 134)",lawngreen:"rgb(124, 252, 0)",lemonchiffon:"rgb(255, 250, 205)",lemonchiffon1:"rgb(255, 250, 205)",lemonchiffon2:"rgb(238, 233, 191)",lemonchiffon3:"rgb(205, 201, 165)",lemonchiffon4:"rgb(139, 137, 112)",lightblue:"rgb(173, 216, 230)",lightblue1:"rgb(191, 239, 255)",lightblue2:"rgb(178, 223, 238)",lightblue3:"rgb(154, 192, 205)",lightblue4:"rgb(104, 131, 139)",lightcoral:"rgb(240, 128, 128)",lightcyan:"rgb(224, 255, 255)",lightcyan1:"rgb(224, 255, 255)",lightcyan2:"rgb(209, 238, 238)",lightcyan3:"rgb(180, 205, 205)",lightcyan4:"rgb(122, 139, 139)",lightgoldenrod:"rgb(238, 221, 130)",lightgoldenrod1:"rgb(255, 236, 139)",lightgoldenrod2:"rgb(238, 220, 130)",lightgoldenrod3:"rgb(205, 190, 112)",lightgoldenrod4:"rgb(139, 129, 76)",lightgoldenrodyellow:"rgb(250, 250, 210)",lightgray:"rgb(211, 211, 211)",lightgreen:"rgb(144, 238, 144)",lightgrey:"rgb(211, 211, 211)",lightpink:"rgb(255, 182, 193)",lightpink1:"rgb(255, 174, 185)",lightpink2:"rgb(238, 162, 173)",lightpink3:"rgb(205, 140, 149)",lightpink4:"rgb(139, 95, 101)",lightsalmon:"rgb(255, 160, 122)",lightsalmon1:"rgb(255, 160, 122)",lightsalmon2:"rgb(238, 149, 114)",lightsalmon3:"rgb(205, 129, 98)",lightsalmon4:"rgb(139, 87, 66)",lightseagreen:"rgb(32, 178, 170)",lightskyblue:"rgb(135, 206, 250)",lightskyblue1:"rgb(176, 226, 255)",lightskyblue2:"rgb(164, 211, 238)",lightskyblue3:"rgb(141, 182, 205)",lightskyblue4:"rgb(96, 123, 139)",lightslateblue:"rgb(132, 112, 255)",lightslategray:"rgb(119, 136, 153)",lightslategrey:"rgb(119, 136, 153)",lightsteelblue:"rgb(176, 196, 222)",lightsteelblue1:"rgb(202, 225, 255)",lightsteelblue2:"rgb(188, 210, 238)",lightsteelblue3:"rgb(162, 181, 205)",lightsteelblue4:"rgb(110, 123, 139)",lightyellow:"rgb(255, 255, 224)",lightyellow1:"rgb(255, 255, 224)",lightyellow2:"rgb(238, 238, 209)",lightyellow3:"rgb(205, 205, 180)",lightyellow4:"rgb(139, 139, 122)",limegreen:"rgb(50, 205, 50)",linen:"rgb(250, 240, 230)",magenta:"rgb(255, 0, 255)",magenta1:"rgb(255, 0, 255)",magenta2:"rgb(238, 0, 238)",magenta3:"rgb(205, 0, 205)",magenta4:"rgb(139, 0, 139)",maroon:"rgb(176, 48, 96)",maroon1:"rgb(255, 52, 179)",maroon2:"rgb(238, 48, 167)",maroon3:"rgb(205, 41, 144)",maroon4:"rgb(139, 28, 98)",mediumaquamarine:"rgb(102, 205, 170)",mediumblue:"rgb(0, 0, 205)",mediumorchid:"rgb(186, 85, 211)",mediumorchid1:"rgb(224, 102, 255)",mediumorchid2:"rgb(209, 95, 238)",mediumorchid3:"rgb(180, 82, 205)",mediumorchid4:"rgb(122, 55, 139)",mediumpurple:"rgb(147, 112, 219)",mediumpurple1:"rgb(171, 130, 255)",mediumpurple2:"rgb(159, 121, 238)",mediumpurple3:"rgb(137, 104, 205)",mediumpurple4:"rgb(93, 71, 139)",mediumseagreen:"rgb(60, 179, 113)",mediumslateblue:"rgb(123, 104, 238)",mediumspringgreen:"rgb(0, 250, 154)",mediumturquoise:"rgb(72, 209, 204)",mediumvioletred:"rgb(199, 21, 133)",midnightblue:"rgb(25, 25, 112)",mintcream:"rgb(245, 255, 250)",mistyrose:"rgb(255, 228, 225)",mistyrose1:"rgb(255, 228, 225)",mistyrose2:"rgb(238, 213, 210)",mistyrose3:"rgb(205, 183, 181)",mistyrose4:"rgb(139, 125, 123)",moccasin:"rgb(255, 228, 181)",navajowhite:"rgb(255, 222, 173)",navajowhite1:"rgb(255, 222, 173)",navajowhite2:"rgb(238, 207, 161)",navajowhite3:"rgb(205, 179, 139)",navajowhite4:"rgb(139, 121, 94)",navy:"rgb(0, 0, 128)",navyblue:"rgb(0, 0, 128)",oldlace:"rgb(253, 245, 230)",olivedrab:"rgb(107, 142, 35)",olivedrab1:"rgb(192, 255, 62)",olivedrab2:"rgb(179, 238, 58)",olivedrab3:"rgb(154, 205, 50)",olivedrab4:"rgb(105, 139, 34)",orange:"rgb(255, 165, 0)",orange1:"rgb(255, 165, 0)",orange2:"rgb(238, 154, 0)",orange3:"rgb(205, 133, 0)",orange4:"rgb(139, 90, 0)",orangered:"rgb(255, 69, 0)",orangered1:"rgb(255, 69, 0)",orangered2:"rgb(238, 64, 0)",orangered3:"rgb(205, 55, 0)",orangered4:"rgb(139, 37, 0)",orchid:"rgb(218, 112, 214)",orchid1:"rgb(255, 131, 250)",orchid2:"rgb(238, 122, 233)",orchid3:"rgb(205, 105, 201)",orchid4:"rgb(139, 71, 137)",palegoldenrod:"rgb(238, 232, 170)",palegreen:"rgb(152, 251, 152)",palegreen1:"rgb(154, 255, 154)",palegreen2:"rgb(144, 238, 144)",palegreen3:"rgb(124, 205, 124)",palegreen4:"rgb(84, 139, 84)",paleturquoise:"rgb(175, 238, 238)",paleturquoise1:"rgb(187, 255, 255)",paleturquoise2:"rgb(174, 238, 238)",paleturquoise3:"rgb(150, 205, 205)",paleturquoise4:"rgb(102, 139, 139)",palevioletred:"rgb(219, 112, 147)",palevioletred1:"rgb(255, 130, 171)",palevioletred2:"rgb(238, 121, 159)",palevioletred3:"rgb(205, 104, 137)",palevioletred4:"rgb(139, 71, 93)",papayawhip:"rgb(255, 239, 213)",peachpuff:"rgb(255, 218, 185)",peachpuff1:"rgb(255, 218, 185)",peachpuff2:"rgb(238, 203, 173)",peachpuff3:"rgb(205, 175, 149)",peachpuff4:"rgb(139, 119, 101)",peru:"rgb(205, 133, 63)",pink:"rgb(255, 192, 203)",pink1:"rgb(255, 181, 197)",pink2:"rgb(238, 169, 184)",pink3:"rgb(205, 145, 158)",pink4:"rgb(139, 99, 108)",plum:"rgb(221, 160, 221)",plum1:"rgb(255, 187, 255)",plum2:"rgb(238, 174, 238)",plum3:"rgb(205, 150, 205)",plum4:"rgb(139, 102, 139)",powderblue:"rgb(176, 224, 230)",purple:"rgb(160, 32, 240)",purple1:"rgb(155, 48, 255)",purple2:"rgb(145, 44, 238)",purple3:"rgb(125, 38, 205)",purple4:"rgb(85, 26, 139)",red:"rgb(255, 0, 0)",red1:"rgb(255, 0, 0)",red2:"rgb(238, 0, 0)",red3:"rgb(205, 0, 0)",red4:"rgb(139, 0, 0)",rosybrown:"rgb(188, 143, 143)",rosybrown1:"rgb(255, 193, 193)",rosybrown2:"rgb(238, 180, 180)",rosybrown3:"rgb(205, 155, 155)",rosybrown4:"rgb(139, 105, 105)",royalblue:"rgb(65, 105, 225)",royalblue1:"rgb(72, 118, 255)",royalblue2:"rgb(67, 110, 238)",royalblue3:"rgb(58, 95, 205)",royalblue4:"rgb(39, 64, 139)",saddlebrown:"rgb(139, 69, 19)",salmon:"rgb(250, 128, 114)",salmon1:"rgb(255, 140, 105)",salmon2:"rgb(238, 130, 98)",salmon3:"rgb(205, 112, 84)",salmon4:"rgb(139, 76, 57)",sandybrown:"rgb(244, 164, 96)",seagreen:"rgb(46, 139, 87)",seagreen1:"rgb(84, 255, 159)",seagreen2:"rgb(78, 238, 148)",seagreen3:"rgb(67, 205, 128)",seagreen4:"rgb(46, 139, 87)",seashell:"rgb(255, 245, 238)",seashell1:"rgb(255, 245, 238)",seashell2:"rgb(238, 229, 222)",seashell3:"rgb(205, 197, 191)",seashell4:"rgb(139, 134, 130)",sienna:"rgb(160, 82, 45)",sienna1:"rgb(255, 130, 71)",sienna2:"rgb(238, 121, 66)",sienna3:"rgb(205, 104, 57)",sienna4:"rgb(139, 71, 38)",skyblue:"rgb(135, 206, 235)",skyblue1:"rgb(135, 206, 255)",skyblue2:"rgb(126, 192, 238)",skyblue3:"rgb(108, 166, 205)",skyblue4:"rgb(74, 112, 139)",slateblue:"rgb(106, 90, 205)",slateblue1:"rgb(131, 111, 255)",slateblue2:"rgb(122, 103, 238)",slateblue3:"rgb(105, 89, 205)",slateblue4:"rgb(71, 60, 139)",slategray:"rgb(112, 128, 144)",slategray1:"rgb(198, 226, 255)",slategray2:"rgb(185, 211, 238)",slategray3:"rgb(159, 182, 205)",slategray4:"rgb(108, 123, 139)",slategrey:"rgb(112, 128, 144)",snow:"rgb(255, 250, 250)",snow1:"rgb(255, 250, 250)",snow2:"rgb(238, 233, 233)",snow3:"rgb(205, 201, 201)",snow4:"rgb(139, 137, 137)",springgreen:"rgb(0, 255, 127)",springgreen1:"rgb(0, 255, 127)",springgreen2:"rgb(0, 238, 118)",springgreen3:"rgb(0, 205, 102)",springgreen4:"rgb(0, 139, 69)",steelblue:"rgb(70, 130, 180)",steelblue1:"rgb(99, 184, 255)",steelblue2:"rgb(92, 172, 238)",steelblue3:"rgb(79, 148, 205)",steelblue4:"rgb(54, 100, 139)",tan:"rgb(210, 180, 140)",tan1:"rgb(255, 165, 79)",tan2:"rgb(238, 154, 73)",tan3:"rgb(205, 133, 63)",tan4:"rgb(139, 90, 43)",thistle:"rgb(216, 191, 216)",thistle1:"rgb(255, 225, 255)",thistle2:"rgb(238, 210, 238)",thistle3:"rgb(205, 181, 205)",thistle4:"rgb(139, 123, 139)",tomato:"rgb(255, 99, 71)",tomato1:"rgb(255, 99, 71)",tomato2:"rgb(238, 92, 66)",tomato3:"rgb(205, 79, 57)",tomato4:"rgb(139, 54, 38)",turquoise:"rgb(64, 224, 208)",turquoise1:"rgb(0, 245, 255)",turquoise2:"rgb(0, 229, 238)",turquoise3:"rgb(0, 197, 205)",turquoise4:"rgb(0, 134, 139)",violet:"rgb(238, 130, 238)",violetred:"rgb(208, 32, 144)",violetred1:"rgb(255, 62, 150)",violetred2:"rgb(238, 58, 140)",violetred3:"rgb(205, 50, 120)",violetred4:"rgb(139, 34, 82)",wheat:"rgb(245, 222, 179)",wheat1:"rgb(255, 231, 186)",wheat2:"rgb(238, 216, 174)",wheat3:"rgb(205, 186, 150)",wheat4:"rgb(139, 126, 102)",white:"rgb(255, 255, 255)",whitesmoke:"rgb(245, 245, 245)",yellow:"rgb(255, 255, 0)",yellow1:"rgb(255, 255, 0)",yellow2:"rgb(238, 238, 0)",yellow3:"rgb(205, 205, 0)",yellow4:"rgb(139, 139, 0)",yellowgreen:"rgb(154, 205, 50)"},K.f={},K.f.createEnum=function(e){return new String(e)},K.f.replaceVars=function(e,t){return e.replace(/%([a-z]*)\(([^\)]+)\)/gi,(function(e,r,o){if(void 0===t[o])throw"Unknown variable: "+o;var i=t[o];if(r in K.f.replaceVars.functions)i=K.f.replaceVars.functions[r](i);else if(r)throw"Unknown escape function: "+r;return i}))},K.f.replaceVars.functions={encodeURI:encodeURI,encodeURIComponent:encodeURIComponent,escapeHTML:function(e){var t={"<":"&lt;",">":"&gt;","&":"&amp;",'"':"&quot;","'":"&#39;"};return e.replace(/[<>&\"\']/g,e=>t[e])}},K.f.parseQuery=function(e){e.startsWith("?")&&(e=e.substr(1));for(var t={},r=e.split("&"),o=0;o<r.length;o++){var i=r[o].split("=");let e=decodeURIComponent(i[0]),n=decodeURIComponent(i[1]);e.endsWith("[]")?(t[e=e.slice(0,-2)]instanceof Array||(t[e]=[]),t[e].push(n)):t[e]=n}return t},K.f.getURL=function(e){return K.f.getURL.chromeSupported()?chrome.runtime.getURL(e):e},K.f.getURL.chromeSupported=function(){return window.chrome&&chrome.runtime&&chrome.runtime.getURL},K.f.clamp=function(e,t,r){return e<t?t:e>r?r:e},K.f.zpad=function(e,t){return String(e).padStart(t,"0")},K.f.getWhitespace=function(e){if(e<=0)return"";var t=this.getWhitespace;for(t.whitespace||(t.whitespace="          ");e>t.whitespace.length;)t.whitespace+=t.whitespace;return t.whitespace.substr(0,e)},K.f.alarm=function(e,t){var r,o,i=t||5e3,n=K.f.getStack(1);return r=setTimeout((function(){var t="string"==typeof e?t:e.name;t=t?": "+t:"",console.warn("lib.f.alarm: timeout expired: "+i/1e3+"s"+t),console.log(n),r=null}),i),o=function(e){return function(){return r&&(clearTimeout(r),r=null),e.apply(null,arguments)}},"string"==typeof e?o:o(e)},K.f.getStack=function(e=0,t){const r=(new Error).stack.split("\n");e+=2;const o=r.length-e;t=void 0===t?o:K.f.clamp(t,0,o);const i=new Array;for(let o=e;o<t+e;++o)i.push(r[o].replace(/^\s*at\s+/,""));return i},K.f.smartFloorDivide=function(e,t){var r=e/t,o=Math.ceil(r);return o-r<1e-4?o:Math.floor(r)},K.f.randomInt=function(e,t){return Math.floor(Math.random()*(t-e+1))+e},K.f.getOs=function(){if(window.browser&&browser.runtime&&browser.runtime.getPlatformInfo)return browser.runtime.getPlatformInfo().then(e=>e.os);if(window.chrome&&chrome.runtime&&chrome.runtime.getPlatformInfo)return new Promise((e,t)=>chrome.runtime.getPlatformInfo(t=>e(t.os)));if(window.navigator&&navigator.userAgent){const e=navigator.userAgent;if(e.includes("Mac OS X"))return Promise.resolve("mac");if(e.includes("CrOS"))return Promise.resolve("cros");if(e.includes("Linux"))return Promise.resolve("linux");if(e.includes("Android"))return Promise.resolve("android");if(e.includes("Windows"))return Promise.resolve("windows")}return Promise.reject(null)},K.f.getChromeMilestone=function(){if(window.navigator&&navigator.userAgent){const e=navigator.userAgent.match(/\sChrome\/(\d+)/);if(e)return parseInt(e[1])}return NaN},K.f.lastError=function(e=null){let t;return window.browser&&browser.runtime?t=browser.runtime.lastError:window.chrome&&chrome.runtime&&(t=chrome.runtime.lastError),t&&t.message?t.message:e},K.i18n={},K.i18n.browser_=window.browser&&browser.i18n?browser.i18n:window.chrome&&chrome.i18n?chrome.i18n:null,K.i18n.getAcceptLanguages=function(e){K.i18n.browser_?K.i18n.browser_.getAcceptLanguages(e):setTimeout((function(){e([navigator.language.replace(/-/g,"_")])}),0)},K.i18n.getMessage=function(e,t=[],r=""){if(K.i18n.browser_){const r=K.i18n.browser_.getMessage(e,t);if(r)return r}return K.i18n.replaceReferences(r,t)},K.i18n.replaceReferences=function(e,t=[]){return null===t&&(t=[]),t instanceof Array||(t=[t]),e.replace(/\$(\d+)/g,(e,r)=>r<=t.length?t[r-1]:"")},K.MessageManager=function(e){this.languages_=e.map(e=>e.replace(/-/g,"_")),-1==this.languages_.indexOf("en")&&this.languages_.unshift("en"),this.messages={}},K.MessageManager.prototype.addMessages=function(e){for(var t in e){var r=e[t];r.placeholders?this.messages[t]=r.message.replace(/\$([a-z][^\s\$]+)\$/gi,(function(r,o){return e[t].placeholders[o.toLowerCase()].content})):this.messages[t]=r.message}},K.MessageManager.prototype.findAndLoadMessages=function(e,t){var r=this.languages_.concat(),o=[],i=[];function n(e){e?o=r.shift():i=r.shift(),r.length?s():t(o,i)}var s=function(){this.loadMessages(this.replaceReferences(e,r),n.bind(this,!0),n.bind(this,!1))}.bind(this);s()},K.MessageManager.prototype.loadMessages=function(e,t,r){var o=new XMLHttpRequest;o.onload=()=>{this.addMessages(JSON.parse(o.responseText)),t()},r&&(o.onerror=()=>r(o)),o.open("GET",e),o.send()},K.MessageManager.prototype.replaceReferences=K.i18n.replaceReferences,K.MessageManager.prototype.get=function(e,t,r){let o=K.i18n.getMessage(e,t);return o||((o=this.messages[e])||(console.warn("Unknown message: "+e),o=void 0===r?e:r,this.messages[e]=o),this.replaceReferences(o,t))},K.MessageManager.prototype.processI18nAttributes=function(e){for(var t=e.querySelectorAll("[i18n]"),r=0;r<t.length;r++)this.processI18nAttribute(t[r])},K.MessageManager.prototype.processI18nAttribute=function(e){const t=e=>e.replace(/-/g,"_").toUpperCase();var r=e.getAttribute("i18n");if(r){try{r=JSON.parse(r)}catch(t){throw console.error("Can't parse "+e.tagName+"#"+e.id+": "+r),t}for(var o in r){var i=o,n=r[o];n.startsWith("=")&&(o=n.substr(1),n=r[o]),n.startsWith("$")&&(n=t(e.getAttribute(n.substr(1))+"_"+o));var s=this.get(n);"_"==i?e.textContent=s:e.setAttribute(i,s)}}},K.PreferenceManager=function(e,t){this.storage=e,this.storageObserver_=this.onStorageChange_.bind(this),this.isActive_=!1,this.activate(),this.trace=!1;var r=t||"/";r.endsWith("/")||(r+="/"),this.prefix=r,this.isImportingJson_=!1,this.prefRecords_={},this.globalObservers_=[],this.childFactories_={},this.childLists_={}},K.PreferenceManager.prototype.DEFAULT_VALUE=K.f.createEnum("DEFAULT"),K.PreferenceManager.Record=function(e,t){this.name=e,this.defaultValue=t,this.currentValue=this.DEFAULT_VALUE,this.observers=[]},K.PreferenceManager.Record.prototype.DEFAULT_VALUE=K.PreferenceManager.prototype.DEFAULT_VALUE,K.PreferenceManager.Record.prototype.addObserver=function(e){this.observers.push(e)},K.PreferenceManager.Record.prototype.removeObserver=function(e){var t=this.observers.indexOf(e);t>=0&&this.observers.splice(t,1)},K.PreferenceManager.Record.prototype.get=function(){return this.currentValue===this.DEFAULT_VALUE?/^(string|number)$/.test(typeof this.defaultValue)?this.defaultValue:"object"==typeof this.defaultValue?JSON.parse(JSON.stringify(this.defaultValue)):this.defaultValue:this.currentValue},K.PreferenceManager.prototype.deactivate=function(){if(!this.isActive_)throw new Error("Not activated");this.isActive_=!1,this.storage.removeObserver(this.storageObserver_)},K.PreferenceManager.prototype.activate=function(){if(this.isActive_)throw new Error("Already activated");this.isActive_=!0,this.storage.addObserver(this.storageObserver_)},K.PreferenceManager.prototype.readStorage=function(e){var t=0;function r(){0==--t&&e&&e()}var o=Object.keys(this.prefRecords_).map(e=>this.prefix+e);this.trace&&console.log("Preferences read: "+this.prefix),this.storage.getItems(o,function(o){var i=this.prefix.length;for(var n in o){var s=o[n],a=n.substr(i),l=a in this.childLists_&&JSON.stringify(s)!=JSON.stringify(this.prefRecords_[a].currentValue);this.prefRecords_[a].currentValue=s,l&&(t++,this.syncChildList(a,r))}0==t&&e&&setTimeout(e)}.bind(this))},K.PreferenceManager.prototype.definePreference=function(e,t,r){var o=this.prefRecords_[e];o?this.changeDefault(e,t):o=this.prefRecords_[e]=new K.PreferenceManager.Record(e,t),r&&o.addObserver(r)},K.PreferenceManager.prototype.definePreferences=function(e){for(var t=0;t<e.length;t++)this.definePreference(e[t][0],e[t][1],e[t][2])},K.PreferenceManager.prototype.defineChildren=function(e,t){this.definePreference(e,[],this.onChildListChange_.bind(this,e)),this.childFactories_[e]=t,this.childLists_[e]={}},K.PreferenceManager.prototype.addObservers=function(e,t){if(e&&"function"!=typeof e)throw new Error("Invalid param: globals");if(e&&this.globalObservers_.push(e),t)for(var r in t){if(!(r in this.prefRecords_))throw new Error("Unknown preference: "+r);this.prefRecords_[r].addObserver(t[r])}},K.PreferenceManager.prototype.notifyAll=function(){for(var e in this.prefRecords_)this.notifyChange_(e)},K.PreferenceManager.prototype.notifyChange_=function(e){var t=this.prefRecords_[e];if(!t)throw new Error("Unknown preference: "+e);for(var r=t.get(),o=0;o<this.globalObservers_.length;o++)this.globalObservers_[o](e,r);for(o=0;o<t.observers.length;o++)t.observers[o](r,e,this)},K.PreferenceManager.prototype.createChild=function(e,t,r){var o,i=this.get(e);if(r){if(o=r,-1!=i.indexOf(o))throw new Error("Duplicate child: "+e+": "+o)}else for(;!o||-1!=i.indexOf(o);)o=K.f.randomInt(1,65535).toString(16),o=K.f.zpad(o,4),t&&(o=t+":"+o);var n=this.childFactories_[e](this,o);return n.trace=this.trace,n.resetAll(),this.childLists_[e][o]=n,i.push(o),this.set(e,i,void 0,!this.isImportingJson_),n},K.PreferenceManager.prototype.removeChild=function(e,t){this.getChild(e,t).resetAll();var r=this.get(e),o=r.indexOf(t);-1!=o&&(r.splice(o,1),this.set(e,r,void 0,!this.isImportingJson_)),delete this.childLists_[e][t]},K.PreferenceManager.prototype.getChild=function(e,t,r){if(!(e in this.childLists_))throw new Error("Unknown child list: "+e);var o=this.childLists_[e];if(!(t in o)){if(void 0===r)throw new Error('Unknown "'+e+'" child: '+t);return r}return o[t]},K.PreferenceManager.diffChildLists=function(e,t){for(var r={added:{},removed:{},common:{}},o=0;o<e.length;o++)-1!=t.indexOf(e[o])?r.common[e[o]]=!0:r.added[e[o]]=!0;for(o=0;o<t.length;o++)t[o]in r.added||t[o]in r.common||(r.removed[t[o]]=!0);return r},K.PreferenceManager.prototype.syncChildList=function(e,t){var r=0;function o(){0==--r&&t&&t()}for(var i=this.get(e),n=Object.keys(this.childLists_[e]),s=(K.PreferenceManager.diffChildLists(i,n),0);s<i.length;s++){var a=i[s],l=n.indexOf(a);if(l>=0&&n.splice(l,1),!this.childLists_[e][a]){var c=this.childFactories_[e](this,a);if(!c){console.warn("Unable to restore child: "+e+": "+a);continue}c.trace=this.trace,this.childLists_[e][a]=c,r++,c.readStorage(o)}}for(s=0;s<n.length;s++)delete this.childLists_[e][n[s]];!r&&t&&setTimeout(t)},K.PreferenceManager.prototype.reset=function(e){var t=this.prefRecords_[e];if(!t)throw new Error("Unknown preference: "+e);this.storage.removeItem(this.prefix+e),t.currentValue!==this.DEFAULT_VALUE&&(t.currentValue=this.DEFAULT_VALUE,this.notifyChange_(e))},K.PreferenceManager.prototype.resetAll=function(){var e=[];for(var t in this.childLists_){var r=this.childLists_[t];for(var o in r)r[o].resetAll()}for(var i in this.prefRecords_)this.prefRecords_[i].currentValue!==this.DEFAULT_VALUE&&(this.prefRecords_[i].currentValue=this.DEFAULT_VALUE,e.push(i));var n=Object.keys(this.prefRecords_).map(function(e){return this.prefix+e}.bind(this));this.storage.removeItems(n),e.forEach(this.notifyChange_.bind(this))},K.PreferenceManager.prototype.diff=function(e,t){return typeof e!=typeof t||!/^(undefined|boolean|number|string)$/.test(typeof e)||e!==t},K.PreferenceManager.prototype.changeDefault=function(e,t){var r=this.prefRecords_[e];if(!r)throw new Error("Unknown preference: "+e);this.diff(r.defaultValue,t)&&(r.currentValue===this.DEFAULT_VALUE?(r.defaultValue=t,this.notifyChange_(e)):r.defaultValue=t)},K.PreferenceManager.prototype.changeDefaults=function(e){for(var t in e)this.changeDefault(t,e[t])},K.PreferenceManager.prototype.set=function(e,t,r,o=!0){var i=this.prefRecords_[e];if(!i)throw new Error("Unknown preference: "+e);var n=i.get();this.diff(n,t)&&(this.diff(i.defaultValue,t)?(i.currentValue=t,o&&this.storage.setItem(this.prefix+e,t,r)):(i.currentValue=this.DEFAULT_VALUE,o&&this.storage.removeItem(this.prefix+e,r)),setTimeout(this.notifyChange_.bind(this,e),0))},K.PreferenceManager.prototype.get=function(e){var t=this.prefRecords_[e];if(!t)throw new Error("Unknown preference: "+e);return t.get()},K.PreferenceManager.prototype.exportAsJson=function(){var e={};for(var t in this.prefRecords_)if(t in this.childLists_){e[t]=[];for(var r=this.get(t),o=0;o<r.length;o++){var i=r[o];e[t].push({id:i,json:this.getChild(t,i).exportAsJson()})}}else{var n=this.prefRecords_[t];n.currentValue!=this.DEFAULT_VALUE&&(e[t]=n.currentValue)}return e},K.PreferenceManager.prototype.importFromJson=function(e,t){this.isImportingJson_=!0;let r=0;const o=()=>{if(--r<1){t&&t();for(let t in e)t in this.childLists_&&this.set(t,this.get(t));this.isImportingJson_=!1}};for(var i in e)if(i in this.childLists_)for(var n=e[i],s=0;s<n.length;s++){var a=n[s].id,l=this.childLists_[i][a];l||(l=this.createChild(i,null,a)),l.importFromJson(n[s].json,o),r++}else this.set(i,e[i]);0==r&&t&&t()},K.PreferenceManager.prototype.onChildListChange_=function(e){this.syncChildList(e)},K.PreferenceManager.prototype.onStorageChange_=function(e){for(var t in e)if(!this.prefix||0==t.lastIndexOf(this.prefix,0)){var r=t.substr(this.prefix.length);if(r in this.prefRecords_){var o=this.prefRecords_[r],i=e[t].newValue,n=o.currentValue;n===o.DEFAULT_VALUE&&(n=void 0),this.diff(n,i)&&(o.currentValue=null==i?o.DEFAULT_VALUE:i,this.notifyChange_(r))}}},K.resource={resources_:{}},K.resource.add=function(e,t,r){K.resource.resources_[e]={type:t,name:e,data:r}},K.resource.get=function(e,t){if(!(e in K.resource.resources_)){if(void 0===t)throw"Unknown resource: "+e;return t}return K.resource.resources_[e]},K.resource.getData=function(e,t){if(!(e in K.resource.resources_)){if(void 0===t)throw"Unknown resource: "+e;return t}return K.resource.resources_[e].data},K.resource.getDataUrl=function(e,t){var r=K.resource.get(e,t);return"data:"+r.type+","+r.data},K.Storage=new Object,K.Storage.Chrome=function(e){this.storage_=e,this.observers_=[],chrome.storage.onChanged.addListener(this.onChanged_.bind(this))},K.Storage.Chrome.prototype.onChanged_=function(e,t){if(chrome.storage[t]==this.storage_)for(var r=0;r<this.observers_.length;r++)this.observers_[r](e)},K.Storage.Chrome.prototype.addObserver=function(e){this.observers_.push(e)},K.Storage.Chrome.prototype.removeObserver=function(e){var t=this.observers_.indexOf(e);-1!=t&&this.observers_.splice(t,1)},K.Storage.Chrome.prototype.clear=function(e){this.storage_.clear(),e&&setTimeout(e,0)},K.Storage.Chrome.prototype.getItem=function(e,t){this.storage_.get(e,t)},K.Storage.Chrome.prototype.getItems=function(e,t){this.storage_.get(e,t)},K.Storage.Chrome.prototype.setItem=function(e,t,r){const o=()=>{const i=K.f.lastError();if(i){if(i.indexOf("MAX_WRITE_OPERATIONS"))return console.warn(`Will retry save of ${e} after exceeding quota: ${i}`),void setTimeout(()=>this.setItem(e,t,o),1e3);console.error(`Unknown runtime error: ${i}`)}r&&r()};var i={};i[e]=t,this.storage_.set(i,o)},K.Storage.Chrome.prototype.setItems=function(e,t){this.storage_.set(e,t)},K.Storage.Chrome.prototype.removeItem=function(e,t){this.storage_.remove(e,t)},K.Storage.Chrome.prototype.removeItems=function(e,t){this.storage_.remove(e,t)},K.Storage.Local=function(){this.observers_=[],this.storage_=window.localStorage,window.addEventListener("storage",this.onStorage_.bind(this))},K.Storage.Local.prototype.onStorage_=function(e){if(e.storageArea==this.storage_){var t=e.oldValue?JSON.parse(e.oldValue):e.oldValue,r=e.newValue?JSON.parse(e.newValue):e.newValue,o={};o[e.key]={oldValue:t,newValue:r};for(var i=0;i<this.observers_.length;i++)this.observers_[i](o)}},K.Storage.Local.prototype.addObserver=function(e){this.observers_.push(e)},K.Storage.Local.prototype.removeObserver=function(e){var t=this.observers_.indexOf(e);-1!=t&&this.observers_.splice(t,1)},K.Storage.Local.prototype.clear=function(e){this.storage_.clear(),e&&setTimeout(e,0)},K.Storage.Local.prototype.getItem=function(e,t){var r=this.storage_.getItem(e);if("string"==typeof r)try{r=JSON.parse(r)}catch(e){}setTimeout(t.bind(null,r),0)},K.Storage.Local.prototype.getItems=function(e,t){for(var r={},o=e.length-1;o>=0;o--){var i=e[o],n=this.storage_.getItem(i);if("string"==typeof n)try{r[i]=JSON.parse(n)}catch(e){r[i]=n}else e.splice(o,1)}setTimeout(t.bind(null,r),0)},K.Storage.Local.prototype.setItem=function(e,t,r){this.storage_.setItem(e,JSON.stringify(t)),r&&setTimeout(r,0)},K.Storage.Local.prototype.setItems=function(e,t){for(var r in e)this.storage_.setItem(r,JSON.stringify(e[r]));t&&setTimeout(t,0)},K.Storage.Local.prototype.removeItem=function(e,t){this.storage_.removeItem(e),t&&setTimeout(t,0)},K.Storage.Local.prototype.removeItems=function(e,t){for(var r=0;r<e.length;r++)this.storage_.removeItem(e[r]);t&&setTimeout(t,0)},K.Storage.Memory=function(){this.observers_=[],this.storage_={}},K.Storage.Memory.prototype.addObserver=function(e){this.observers_.push(e)},K.Storage.Memory.prototype.removeObserver=function(e){var t=this.observers_.indexOf(e);-1!=t&&this.observers_.splice(t,1)},K.Storage.Memory.prototype.clear=function(e){var t={};for(var r in this.storage_)t[r]={oldValue:this.storage_[r],newValue:void 0};this.storage_={},setTimeout(function(){for(var e=0;e<this.observers_.length;e++)this.observers_[e](t)}.bind(this),0),e&&setTimeout(e,0)},K.Storage.Memory.prototype.getItem=function(e,t){var r=this.storage_[e];if("string"==typeof r)try{r=JSON.parse(r)}catch(e){}setTimeout(t.bind(null,r),0)},K.Storage.Memory.prototype.getItems=function(e,t){for(var r={},o=e.length-1;o>=0;o--){var i=e[o],n=this.storage_[i];if("string"==typeof n)try{r[i]=JSON.parse(n)}catch(e){r[i]=n}else e.splice(o,1)}setTimeout(t.bind(null,r),0)},K.Storage.Memory.prototype.setItem=function(e,t,r){var o=this.storage_[e];this.storage_[e]=JSON.stringify(t);var i={};i[e]={oldValue:o,newValue:t},setTimeout(function(){for(var e=0;e<this.observers_.length;e++)this.observers_[e](i)}.bind(this),0),r&&setTimeout(r,0)},K.Storage.Memory.prototype.setItems=function(e,t){var r={};for(var o in e)r[o]={oldValue:this.storage_[o],newValue:e[o]},this.storage_[o]=JSON.stringify(e[o]);setTimeout(function(){for(var e=0;e<this.observers_.length;e++)this.observers_[e](r)}.bind(this)),t&&setTimeout(t,0)},K.Storage.Memory.prototype.removeItem=function(e,t){delete this.storage_[e],t&&setTimeout(t,0)},K.Storage.Memory.prototype.removeItems=function(e,t){for(var r=0;r<e.length;r++)delete this.storage_[e[r]];t&&setTimeout(t,0)},K.TestManager=function(e){this.log=e||new K.TestManager.Log},K.TestManager.prototype.createTestRun=function(e){return new K.TestManager.TestRun(this,e)},K.TestManager.prototype.onTestRunComplete=function(e){},K.TestManager.prototype.testPreamble=function(e,t){},K.TestManager.prototype.testPostamble=function(e,t){},K.TestManager.Log=function(e=console){this.save=!1,this.data="",this.prefix_="",this.prefixStack_=0,this.console_=e,["log","debug","info","warn","error"].forEach(e=>{let t="";switch(e){case"debug":case"warn":case"error":t=e.toUpperCase()+": "}const r=this.console_[e];this[e]=this.console_[e]=(...e)=>{this.save&&(this.data+=this.prefix_+t+e.join(" ")+"\n"),r.apply(this.console_,e)}}),["group","groupCollapsed"].forEach(e=>{const t=this.console_[e];this[e]=this.console_[e]=(e="")=>{t(e),this.save&&(this.data+=this.prefix_+e+"\n"),this.prefix_="  ".repeat(++this.prefixStack_)}});const t=this.console_.groupEnd;this.groupEnd=this.console_.groupEnd=()=>{t(),this.prefixStack_&&(this.prefix_="  ".repeat(--this.prefixStack_))}},K.TestManager.Suite=function(e){function t(t,r){this.testManager_=t,this.suiteName=e,this.setup(r)}return t.suiteName=e,t.addTest=K.TestManager.Suite.addTest,t.disableTest=K.TestManager.Suite.disableTest,t.getTest=K.TestManager.Suite.getTest,t.getTestList=K.TestManager.Suite.getTestList,t.testList_=[],t.testMap_={},t.prototype=Object.create(K.TestManager.Suite.prototype),t.constructor=K.TestManager.Suite,K.TestManager.Suite.subclasses.push(t),t},K.TestManager.Suite.subclasses=[],K.TestManager.Suite.addTest=function(e,t){if(e in this.testMap_)throw"Duplicate test name: "+e;var r=new K.TestManager.Test(this,e,t);this.testMap_[e]=r,this.testList_.push(r)},K.TestManager.Suite.disableTest=function(e,t){if(e in this.testMap_)throw"Duplicate test name: "+e;var r=new K.TestManager.Test(this,e,t);console.log("Disabled test: "+r.fullName)},K.TestManager.Suite.getTest=function(e){return this.testMap_[e]},K.TestManager.Suite.getTestList=function(){return this.testList_},K.TestManager.Suite.prototype.setDefaults=function(e,t){for(var r in t)this[r]=r in e?e[r]:t[r]},K.TestManager.Suite.prototype.setup=function(e){},K.TestManager.Suite.prototype.preamble=function(e,t){},K.TestManager.Suite.prototype.postamble=function(e,t){},K.TestManager.Test=function(e,t,r){this.suiteClass=e,this.testName=t,this.fullName=e.suiteName+"["+t+"]",this.testFunction_=r},K.TestManager.Test.prototype.run=function(e){try{this.testFunction_.apply(e.suite,[e,e.testRun.cx])}catch(t){if(t instanceof K.TestManager.Result.TestComplete)return;e.println("Test raised an exception: "+t),t.stack&&(t.stack instanceof Array?e.println(t.stack.join("\n")):e.println(t.stack)),e.completeTest_(e.FAILED,!1)}},K.TestManager.TestRun=function(e,t){this.testManager=e,this.log=e.log,this.cx=t||{},this.failures=[],this.passes=[],this.startDate=null,this.duration=null,this.currentResult=null,this.maxFailures=0,this.panic=!1,this.testQueue_=[]},K.TestManager.TestRun.prototype.ALL_TESTS=K.f.createEnum("<all-tests>"),K.TestManager.TestRun.prototype.selectTest=function(e){this.testQueue_.push(e)},K.TestManager.TestRun.prototype.selectSuite=function(e,t){for(var r=t||this.ALL_TESTS,o=0,i=e.getTestList(),n=0;n<i.length;n++){var s=i[n];if(r!==this.ALL_TESTS)if(r instanceof RegExp){if(!r.test(s.testName))continue}else if(s.testName!=r)continue;this.selectTest(s),o++}return o},K.TestManager.TestRun.prototype.selectPattern=function(e){for(var t=0,r=0;r<K.TestManager.Suite.subclasses.length;r++)t+=this.selectSuite(K.TestManager.Suite.subclasses[r],e);return t||this.log.warn("No tests matched selection criteria: "+e),t},K.TestManager.TestRun.prototype.onUncaughtException_=function(e,t,r){if(0==e.indexOf("Uncaught lib.TestManager.Result.TestComplete")||-1!=e.indexOf("status: passed"))return!0;if(this.currentResult&&e!="Uncaught "+this.currentResult.expectedErrorMessage_){var o="during";return this.currentResult.status!=this.currentResult.PENDING&&(o="after"),this.log.error("Uncaught exception "+o+" test case: "+this.currentResult.test.fullName),this.log.error(e+", "+t+":"+r),this.currentResult.completeTest_(this.currentResult.FAILED,!1),!1}},K.TestManager.TestRun.prototype.onTestRunComplete_=function(e){e?(this.duration=new Date-this.startDate,this.log.groupEnd(),this.log.info(this.passes.length+" passed, "+this.failures.length+" failed, "+this.msToSeconds_(this.duration)),this.summarize(),window.onerror=null,this.testManager.onTestRunComplete(this)):setTimeout(this.onTestRunComplete_.bind(this),0,!0)},K.TestManager.TestRun.prototype.onResultComplete=function(e){try{this.testManager.testPostamble(e,this.cx),e.suite.postamble(e,this.ctx)}catch(e){this.log.error("Unexpected exception in postamble: "+(e.stack?e.stack:e)),this.panic=!0}if(e.status!=e.PASSED?this.log.error(e.status):e.duration>500&&this.log.warn("Slow test took "+this.msToSeconds_(e.duration)),this.log.groupEnd(),e.status==e.FAILED)this.failures.push(e),this.currentSuite=null;else{if(e.status!=e.PASSED)return this.log.error("Unknown result status: "+e.test.fullName+": "+e.status),void(this.panic=!0);this.passes.push(e)}this.runNextTest_()},K.TestManager.TestRun.prototype.onResultReComplete=function(e,t){this.log.error("Late complete for test: "+e.test.fullName+": "+t);var r=this.passes.indexOf(e);r>=0&&(this.passes.splice(r,1),this.failures.push(e))},K.TestManager.TestRun.prototype.runNextTest_=function(){if(!this.panic&&this.testQueue_.length){if(this.maxFailures&&this.failures.length>=this.maxFailures)return this.log.error("Maximum failure count reached, aborting test run."),void this.onTestRunComplete_();var e=this.testQueue_[0],t=this.currentResult?this.currentResult.suite:null;try{t&&t instanceof e.suiteClass||(t&&this.log.groupEnd(),this.log.group(e.suiteClass.suiteName),t=new e.suiteClass(this.testManager,this.cx))}catch(e){return this.log.error("Exception during setup: "+(e.stack?e.stack:e)),this.panic=!0,void this.onTestRunComplete_()}try{this.log.group(e.testName),this.currentResult=new K.TestManager.Result(this,t,e),this.testManager.testPreamble(this.currentResult,this.cx),t.preamble(this.currentResult,this.cx),this.testQueue_.shift()}catch(e){return this.log.error("Unexpected exception during test preamble: "+(e.stack?e.stack:e)),this.log.groupEnd(),this.panic=!0,void this.onTestRunComplete_()}try{this.currentResult.run()}catch(e){this.log.error("Unexpected exception during test run: "+(e.stack?e.stack:e)),this.panic=!0}}else this.onTestRunComplete_()},K.TestManager.TestRun.prototype.run=function(){this.log.info("Running "+this.testQueue_.length+" test(s)"),window.onerror=this.onUncaughtException_.bind(this),this.startDate=new Date,this.runNextTest_()},K.TestManager.TestRun.prototype.msToSeconds_=function(e){return(e/1e3).toFixed(2)+"s"},K.TestManager.TestRun.prototype.summarize=function(){if(this.failures.length)for(var e=0;e<this.failures.length;e++)this.log.error("FAILED: "+this.failures[e].test.fullName);this.testQueue_.length&&this.log.warn("Test run incomplete: "+this.testQueue_.length+" test(s) were not run.")},K.TestManager.Result=function(e,t,r){this.testRun=e,this.suite=t,this.test=r,this.startDate=null,this.duration=null,this.status=this.PENDING,this.expectedErrorMessage_=null},K.TestManager.Result.prototype.PENDING="pending",K.TestManager.Result.prototype.FAILED="FAILED",K.TestManager.Result.prototype.PASSED="passed",K.TestManager.Result.TestComplete=function(e){this.result=e},K.TestManager.Result.TestComplete.prototype.toString=function(){return"lib.TestManager.Result.TestComplete: "+this.result.test.fullName+", status: "+this.result.status},K.TestManager.Result.prototype.run=function(){this.startDate=new Date,this.test.run(this),this.status!=this.PENDING||this.timeout_||(this.println("Test did not return a value and did not request more time."),this.completeTest_(this.FAILED,!1))},K.TestManager.Result.prototype.expectErrorMessage=function(e){this.expectedErrorMessage_=e},K.TestManager.Result.prototype.onTimeout_=function(){this.timeout_=null,this.status==this.PENDING&&(this.println("Test timed out."),this.completeTest_(this.FAILED,!1))},K.TestManager.Result.prototype.requestTime=function(e){this.timeout_&&clearTimeout(this.timeout_),this.timeout_=setTimeout(this.onTimeout_.bind(this),e)},K.TestManager.Result.prototype.completeTest_=function(e,t){if(this.status==this.PENDING?(this.duration=new Date-this.startDate,this.status=e,this.testRun.onResultComplete(this)):this.testRun.onResultReComplete(this,e),arguments.length<2||t)throw new K.TestManager.Result.TestComplete(this)},K.TestManager.Result.prototype.assertEQ=function(e,t,r){function o(e){if("number"==typeof e)return e;var t=String(e).split("\n").map(e=>JSON.stringify(e));return t.length>1?"\n"+t.join("\n"):t.join("\n")}if(e!==t&&!(t instanceof Array&&K.array.compare(e,t))){var i=r?"["+r+"]":"";this.fail("assertEQ"+i+": "+this.getCallerLocation_(1)+": "+o(e)+" !== "+o(t))}},K.TestManager.Result.prototype.assert=function(e,t){if(!0!==e){var r=t?"["+t+"]":"";this.fail("assert"+r+": "+this.getCallerLocation_(1)+": "+String(e))}},K.TestManager.Result.prototype.getCallerLocation_=function(e){try{throw new Error}catch(r){var t=r.stack.split("\n")[e+2].match(/([^/]+:\d+):\d+\)?$/);return t?t[1]:"???"}},K.TestManager.Result.prototype.println=function(e){this.testRun.log.info(e)},K.TestManager.Result.prototype.fail=function(e){arguments.length&&this.println(e),this.completeTest_(this.FAILED,!0)},K.TestManager.Result.prototype.pass=function(){this.completeTest_(this.PASSED,!0)},K.UTF8Decoder=function(){this.bytesLeft=0,this.codePoint=0,this.lowerBound=0},K.UTF8Decoder.prototype.decode=function(e){for(var t="",r=0;r<e.length;r++){var o=e.charCodeAt(r);if(0==this.bytesLeft)o<=127?t+=e.charAt(r):192<=o&&o<=223?(this.codePoint=o-192,this.bytesLeft=1,this.lowerBound=128):224<=o&&o<=239?(this.codePoint=o-224,this.bytesLeft=2,this.lowerBound=2048):240<=o&&o<=247?(this.codePoint=o-240,this.bytesLeft=3,this.lowerBound=65536):248<=o&&o<=251?(this.codePoint=o-248,this.bytesLeft=4,this.lowerBound=2097152):252<=o&&o<=253?(this.codePoint=o-252,this.bytesLeft=5,this.lowerBound=67108864):t+="�";else if(128<=o&&o<=191){if(this.bytesLeft--,this.codePoint=(this.codePoint<<6)+(o-128),0==this.bytesLeft){var i=this.codePoint;i<this.lowerBound||55296<=i&&i<=57343||i>1114111?t+="�":i<65536?t+=String.fromCharCode(i):(i-=65536,t+=String.fromCharCode(55296+(i>>>10&1023),56320+(1023&i)))}}else t+="�",this.bytesLeft=0,r--}return t},K.decodeUTF8=function(e){return(new K.UTF8Decoder).decode(e)},K.encodeUTF8=function(e){for(var t="",r=0;r<e.length;r++){var o,i=e.charCodeAt(r);if(56320<=i&&i<=57343)i=65533;else if(55296<=i&&i<=56319)if(r+1<e.length){var n=e.charCodeAt(r+1);56320<=n&&n<=57343?(i=65536+((1023&i)<<10)+(1023&n),r++):i=65533}else i=65533;if(i<=127)t+=e.charAt(r);else for(i<=2047?(t+=String.fromCharCode(192|i>>>6),o=1):i<=65535?(t+=String.fromCharCode(224|i>>>12),o=2):(t+=String.fromCharCode(240|i>>>18),o=3);o>0;)o--,t+=String.fromCharCode(128|i>>>6*o&63)}return t},K.wc={},K.wc.nulWidth=0,K.wc.controlWidth=0,K.wc.regardCjkAmbiguous=!1,K.wc.cjkAmbiguousWidth=2,K.wc.combining=[[173,173],[768,879],[1155,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1552,1562],[1564,1564],[1611,1631],[1648,1648],[1750,1756],[1759,1764],[1767,1768],[1770,1773],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2045,2045],[2070,2073],[2075,2083],[2085,2087],[2089,2093],[2137,2139],[2259,2273],[2275,2306],[2362,2362],[2364,2364],[2369,2376],[2381,2381],[2385,2391],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2558,2558],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2641,2641],[2672,2673],[2677,2677],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2810,2815],[2817,2817],[2876,2876],[2879,2879],[2881,2884],[2893,2893],[2902,2902],[2914,2915],[2946,2946],[3008,3008],[3021,3021],[3072,3072],[3076,3076],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3170,3171],[3201,3201],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3328,3329],[3387,3388],[3393,3396],[3405,3405],[3426,3427],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3981,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4151],[4153,4154],[4157,4158],[4184,4185],[4190,4192],[4209,4212],[4226,4226],[4229,4230],[4237,4237],[4253,4253],[4448,4607],[4957,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6158],[6277,6278],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6683,6683],[6742,6742],[6744,6750],[6752,6752],[6754,6754],[6757,6764],[6771,6780],[6783,6783],[6832,6846],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7040,7041],[7074,7077],[7080,7081],[7083,7085],[7142,7142],[7144,7145],[7149,7149],[7151,7153],[7212,7219],[7222,7223],[7376,7378],[7380,7392],[7394,7400],[7405,7405],[7412,7412],[7416,7417],[7616,7673],[7675,7679],[8203,8207],[8234,8238],[8288,8292],[8294,8303],[8400,8432],[11503,11505],[11647,11647],[11744,11775],[12330,12333],[12441,12442],[42607,42610],[42612,42621],[42654,42655],[42736,42737],[43010,43010],[43014,43014],[43019,43019],[43045,43046],[43204,43205],[43232,43249],[43263,43263],[43302,43309],[43335,43345],[43392,43394],[43443,43443],[43446,43449],[43452,43452],[43493,43493],[43561,43566],[43569,43570],[43573,43574],[43587,43587],[43596,43596],[43644,43644],[43696,43696],[43698,43700],[43703,43704],[43710,43711],[43713,43713],[43756,43757],[43766,43766],[44005,44005],[44008,44008],[44013,44013],[64286,64286],[65024,65039],[65056,65071],[65279,65279],[65529,65531],[66045,66045],[66272,66272],[66422,66426],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[68325,68326],[68900,68903],[69446,69456],[69633,69633],[69688,69702],[69759,69761],[69811,69814],[69817,69818],[69888,69890],[69927,69931],[69933,69940],[70003,70003],[70016,70017],[70070,70078],[70089,70092],[70191,70193],[70196,70196],[70198,70199],[70206,70206],[70367,70367],[70371,70378],[70400,70401],[70459,70460],[70464,70464],[70502,70508],[70512,70516],[70712,70719],[70722,70724],[70726,70726],[70750,70750],[70835,70840],[70842,70842],[70847,70848],[70850,70851],[71090,71093],[71100,71101],[71103,71104],[71132,71133],[71219,71226],[71229,71229],[71231,71232],[71339,71339],[71341,71341],[71344,71349],[71351,71351],[71453,71455],[71458,71461],[71463,71467],[71727,71735],[71737,71738],[72193,72202],[72243,72248],[72251,72254],[72263,72263],[72273,72278],[72281,72283],[72330,72342],[72344,72345],[72752,72758],[72760,72765],[72767,72767],[72850,72871],[72874,72880],[72882,72883],[72885,72886],[73009,73014],[73018,73018],[73020,73021],[73023,73029],[73031,73031],[73104,73105],[73109,73109],[73111,73111],[73459,73460],[92912,92916],[92976,92982],[94095,94098],[113821,113822],[113824,113827],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[121344,121398],[121403,121452],[121461,121461],[121476,121476],[121499,121503],[121505,121519],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[125136,125142],[125252,125258],[917505,917505],[917536,917631],[917760,917999]],K.wc.ambiguous=[[161,161],[164,164],[167,168],[170,170],[173,174],[176,180],[182,186],[188,191],[198,198],[208,208],[215,216],[222,225],[230,230],[232,234],[236,237],[240,240],[242,243],[247,250],[252,252],[254,254],[257,257],[273,273],[275,275],[283,283],[294,295],[299,299],[305,307],[312,312],[319,322],[324,324],[328,331],[333,333],[338,339],[358,359],[363,363],[462,462],[464,464],[466,466],[468,468],[470,470],[472,472],[474,474],[476,476],[593,593],[609,609],[708,708],[711,711],[713,715],[717,717],[720,720],[728,731],[733,733],[735,735],[768,879],[913,929],[931,937],[945,961],[963,969],[1025,1025],[1040,1103],[1105,1105],[4352,4447],[8208,8208],[8211,8214],[8216,8217],[8220,8221],[8224,8226],[8228,8231],[8240,8240],[8242,8243],[8245,8245],[8251,8251],[8254,8254],[8308,8308],[8319,8319],[8321,8324],[8364,8364],[8451,8451],[8453,8453],[8457,8457],[8467,8467],[8470,8470],[8481,8482],[8486,8486],[8491,8491],[8531,8532],[8539,8542],[8544,8555],[8560,8569],[8585,8585],[8592,8601],[8632,8633],[8658,8658],[8660,8660],[8679,8679],[8704,8704],[8706,8707],[8711,8712],[8715,8715],[8719,8719],[8721,8721],[8725,8725],[8730,8730],[8733,8736],[8739,8739],[8741,8741],[8743,8748],[8750,8750],[8756,8759],[8764,8765],[8776,8776],[8780,8780],[8786,8786],[8800,8801],[8804,8807],[8810,8811],[8814,8815],[8834,8835],[8838,8839],[8853,8853],[8857,8857],[8869,8869],[8895,8895],[8978,8978],[8986,8987],[9001,9002],[9193,9196],[9200,9200],[9203,9203],[9312,9449],[9451,9547],[9552,9587],[9600,9615],[9618,9621],[9632,9633],[9635,9641],[9650,9651],[9654,9655],[9660,9661],[9664,9665],[9670,9672],[9675,9675],[9678,9681],[9698,9701],[9711,9711],[9725,9726],[9733,9734],[9737,9737],[9742,9743],[9748,9749],[9756,9756],[9758,9758],[9792,9792],[9794,9794],[9800,9811],[9824,9825],[9827,9829],[9831,9834],[9836,9837],[9839,9839],[9855,9855],[9875,9875],[9886,9887],[9889,9889],[9898,9899],[9917,9919],[9924,9953],[9955,9955],[9960,9983],[9989,9989],[9994,9995],[10024,10024],[10045,10045],[10060,10060],[10062,10062],[10067,10069],[10071,10071],[10102,10111],[10133,10135],[10160,10160],[10175,10175],[11035,11036],[11088,11088],[11093,11097],[11904,12255],[12272,12350],[12352,19903],[19968,42191],[43360,43391],[44032,55203],[57344,64255],[65024,65049],[65072,65135],[65281,65376],[65504,65510],[65533,65533],[94176,94177],[94208,101119],[110592,110895],[110960,111359],[126980,126980],[127183,127183],[127232,127242],[127248,127277],[127280,127337],[127344,127404],[127488,127490],[127504,127547],[127552,127560],[127568,127569],[127584,127589],[127744,127776],[127789,127797],[127799,127868],[127870,127891],[127904,127946],[127951,127955],[127968,127984],[127988,127988],[127992,128062],[128064,128064],[128066,128252],[128255,128317],[128331,128334],[128336,128359],[128378,128378],[128405,128406],[128420,128420],[128507,128591],[128640,128709],[128716,128716],[128720,128722],[128747,128748],[128756,128761],[129296,129342],[129344,129392],[129395,129398],[129402,129402],[129404,129442],[129456,129465],[129472,129474],[129488,129535],[131072,196605],[196608,262141],[917760,917999],[983040,1048573],[1048576,1114109]],K.wc.unambiguous=[[4352,4447],[8986,8987],[9001,9002],[9193,9196],[9200,9200],[9203,9203],[9725,9726],[9748,9749],[9800,9811],[9855,9855],[9875,9875],[9889,9889],[9898,9899],[9917,9918],[9924,9925],[9934,9934],[9940,9940],[9962,9962],[9970,9971],[9973,9973],[9978,9978],[9981,9981],[9989,9989],[9994,9995],[10024,10024],[10060,10060],[10062,10062],[10067,10069],[10071,10071],[10133,10135],[10160,10160],[10175,10175],[11035,11036],[11088,11088],[11093,11093],[11904,12255],[12272,12350],[12352,12871],[12880,19903],[19968,42191],[43360,43391],[44032,55203],[63744,64255],[65040,65049],[65072,65135],[65281,65376],[65504,65510],[94176,94177],[94208,101119],[110592,110895],[110960,111359],[126980,126980],[127183,127183],[127374,127374],[127377,127386],[127488,127490],[127504,127547],[127552,127560],[127568,127569],[127584,127589],[127744,127776],[127789,127797],[127799,127868],[127870,127891],[127904,127946],[127951,127955],[127968,127984],[127988,127988],[127992,128062],[128064,128064],[128066,128252],[128255,128317],[128331,128334],[128336,128359],[128378,128378],[128405,128406],[128420,128420],[128507,128591],[128640,128709],[128716,128716],[128720,128722],[128747,128748],[128756,128761],[129296,129342],[129344,129392],[129395,129398],[129402,129402],[129404,129442],[129456,129465],[129472,129474],[129488,129535],[131072,196605],[196608,262141]],K.wc.binaryTableSearch_=function(e,t){var r,o=0,i=t.length-1;if(e<t[o][0]||e>t[i][1])return!1;for(;i>=o;)if(e>t[r=Math.floor((o+i)/2)][1])o=r+1;else{if(!(e<t[r][0]))return!0;i=r-1}return!1},K.wc.isSpace=function(e){return K.wc.binaryTableSearch_(e,K.wc.combining)},K.wc.isCjkAmbiguous=function(e){return K.wc.binaryTableSearch_(e,K.wc.ambiguous)},K.wc.charWidth=function(e){return K.wc.regardCjkAmbiguous?K.wc.charWidthRegardAmbiguous(e):K.wc.charWidthDisregardAmbiguous(e)},K.wc.charWidthDisregardAmbiguous=function(e){return e<127?e>=32?1:0==e?K.wc.nulWidth:K.wc.controlWidth:e<160?K.wc.controlWidth:K.wc.isSpace(e)?0:K.wc.binaryTableSearch_(e,K.wc.unambiguous)?2:1},K.wc.charWidthRegardAmbiguous=function(e){return K.wc.isCjkAmbiguous(e)?K.wc.cjkAmbiguousWidth:K.wc.charWidthDisregardAmbiguous(e)},K.wc.strWidth=function(e){for(var t,r=0,o=0;o<e.length;){var i=e.codePointAt(o);if((t=K.wc.charWidth(i))<0)return-1;r+=t,o+=i<=65535?1:2}return r},K.wc.substr=function(e,t,r){var o,i,n=0;if(t)for(i=0;n<e.length;){const r=e.codePointAt(n);if((i+=K.wc.charWidth(r))>t)break;n+=r<=65535?1:2}if(null!=r){for(o=n,i=0;o<e.length;){const t=e.codePointAt(o);if((i+=K.wc.charWidth(t))>r)break;o+=t<=65535?1:2}return e.substring(n,o)}return e.substr(n)},K.wc.substring=function(e,t,r){return K.wc.substr(e,t,r-t)},K.resource.add("libdot/changelog/version","text/plain","2018-10-24"),K.resource.add("libdot/changelog/date","text/plain","1.24"),K.resource.add("hterm/audio/bell","audio/ogg;base64","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"),K.resource.add("hterm/images/icon-96","image/png;base64","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"),K.resource.add("hterm/concat/date","text/plain","Mon, 26 Nov 2018 08:50:09 +0000"),K.resource.add("hterm/changelog/version","text/plain","2018-10-24"),K.resource.add("hterm/changelog/date","text/plain","1.82"),K.resource.add("hterm/git/HEAD","text/plain","03ee0980444a38a97ef947b2272e44fdb3bdf5f5"),K.rtdep("lib.Storage");var U={windowType:null,os:null,zoomWarningMessage:"ZOOM != 100%",notifyCopyMessage:"✂",desktopNotificationTitle:"♪ %(title) ♪",testDeps:["hterm.AccessibilityReader.Tests","hterm.ScrollPort.Tests","hterm.Screen.Tests","hterm.Terminal.Tests","hterm.VT.Tests","hterm.VT.CannedTests"]};K.registerInit("hterm",(function(e){function t(t){U.os=t,e()}function r(){K.i18n.getAcceptLanguages(e=>{U.messageManager||(U.messageManager=new K.MessageManager(e)),K.f.getOs().then(t).catch(t)})}function o(e){U.windowType=e.type,r()}U.defaultStorage||(window.chrome&&chrome.storage&&chrome.storage.sync?U.defaultStorage=new K.Storage.Chrome(chrome.storage.sync):U.defaultStorage=new K.Storage.Local);var i=!1;if(window.chrome&&chrome.runtime&&chrome.runtime.getManifest){var n=chrome.runtime.getManifest();i=n.app&&n.app.background}i?setTimeout(o.bind(null,{type:"popup"}),0):window.chrome&&chrome.tabs?chrome.tabs.getCurrent((function(e){e&&window.chrome?chrome.windows.get(e.windowId,null,o):(U.windowType="normal",r())})):setTimeout(o.bind(null,{type:"normal"}),0)})),U.getClientSize=function(e){return e.getBoundingClientRect()},U.getClientWidth=function(e){return e.getBoundingClientRect().width},U.getClientHeight=function(e){return e.getBoundingClientRect().height},U.copySelectionToClipboard=function(e){try{e.execCommand("copy")}catch(e){}},U.pasteFromClipboard=function(e){try{return e.execCommand("paste")}catch(e){return!1}},U.msg=function(e,t=[],r){return U.messageManager.get("HTERM_"+e,t,r)},U.notify=function(e){var t=(e,t)=>void 0!==e?e:t;null==e&&(e={});var r={body:e.body,icon:t(e.icon,K.resource.getDataUrl("hterm/images/icon-96"))},o=t(e.title,window.document.title);o||(o="hterm"),o=K.f.replaceVars(U.desktopNotificationTitle,{title:o});var i=new Notification(o,r);return i.onclick=function(){window.focus(),this.close()},i},U.openUrl=function(e){if(window.chrome&&chrome.browser&&chrome.browser.openTab)chrome.browser.openTab({url:e});else{window.open(e,"_blank").focus()}},U.Size=function(e,t){this.width=e,this.height=t},U.Size.prototype.resize=function(e,t){this.width=e,this.height=t},U.Size.prototype.clone=function(){return new U.Size(this.width,this.height)},U.Size.prototype.setTo=function(e){this.width=e.width,this.height=e.height},U.Size.prototype.equals=function(e){return this.width==e.width&&this.height==e.height},U.Size.prototype.toString=function(){return"[hterm.Size: "+this.width+", "+this.height+"]"},U.RowCol=function(e,t,r){this.row=e,this.column=t,this.overflow=!!r},U.RowCol.prototype.move=function(e,t,r){this.row=e,this.column=t,this.overflow=!!r},U.RowCol.prototype.clone=function(){return new U.RowCol(this.row,this.column,this.overflow)},U.RowCol.prototype.setTo=function(e){this.row=e.row,this.column=e.column,this.overflow=e.overflow},U.RowCol.prototype.equals=function(e){return this.row==e.row&&this.column==e.column&&this.overflow==e.overflow},U.RowCol.prototype.toString=function(){return"[hterm.RowCol: "+this.row+", "+this.column+", "+this.overflow+"]"},U.AccessibilityReader=function(e){this.document_=e.ownerDocument;const t=this.document_.createElement("div");t.id="hterm:accessibility-live-region",t.style.cssText="position: absolute;\n                              width: 0; height: 0;\n                              overflow: hidden;\n                              left: 0; top: 0;",e.appendChild(t),this.accessibilityEnabled=!1,this.liveElement_=this.document_.createElement("p"),this.liveElement_.setAttribute("aria-live","polite"),this.liveElement_.setAttribute("aria-label",""),t.appendChild(this.liveElement_),this.assertiveLiveElement_=this.document_.createElement("p"),this.assertiveLiveElement_.setAttribute("aria-live","assertive"),this.assertiveLiveElement_.setAttribute("aria-label",""),t.appendChild(this.assertiveLiveElement_),this.queue_=[],this.nextReadTimer_=null,this.cursorIsChanging_=!1,this.cursorChangeQueue_=[],this.lastCursorRowString_=null,this.lastCursorRow_=null,this.lastCursorColumn_=null,this.hasUserGesture=!1},U.AccessibilityReader.DELAY=50,U.AccessibilityReader.prototype.setAccessibilityEnabled=function(e){e||this.clear(),this.accessibilityEnabled=e},U.AccessibilityReader.prototype.decorate=function(e){["keydown","keypress","keyup","textInput"].forEach(t=>{e.addEventListener(t,()=>{this.hasUserGesture=!0})})},U.AccessibilityReader.prototype.beforeCursorChange=function(e,t,r){this.accessibilityEnabled&&this.hasUserGesture&&!this.cursorIsChanging_&&(this.cursorIsChanging_=!0,this.lastCursorRowString_=e,this.lastCursorRow_=t,this.lastCursorColumn_=r)},U.AccessibilityReader.prototype.afterCursorChange=function(e,t,r){if(this.cursorIsChanging_){if(this.cursorIsChanging_=!1,!this.announceAction_(e,t,r))for(let e=0;e<this.cursorChangeQueue_.length;++e)this.announce(this.cursorChangeQueue_[e]);this.cursorChangeQueue_=[],this.lastCursorRowString_=null,this.lastCursorRow_=null,this.lastCursorColumn_=null,this.hasUserGesture=!1}},U.AccessibilityReader.prototype.announce=function(e){if(this.accessibilityEnabled)if(this.cursorIsChanging_)this.cursorChangeQueue_.push(e);else if("\n"==e&&this.queue_.length>0)this.queue_.push("");else{if(0==this.queue_.length)this.queue_.push(e);else{let t="";0!=this.queue_[this.queue_.length-1].length&&(t=" "),this.queue_[this.queue_.length-1]+=t+e}if(!this.nextReadTimer_){if(1!=this.queue_.length)throw new Error("Expected only one item in queue_ or nextReadTimer_ to be running.");this.nextReadTimer_=setTimeout(this.addToLiveRegion_.bind(this),U.AccessibilityReader.DELAY)}}},U.AccessibilityReader.prototype.assertiveAnnounce=function(e){this.hasUserGesture&&" "==e&&(e=U.msg("SPACE_CHARACTER",[],"Space")),(e=e.trim())==this.assertiveLiveElement_.getAttribute("aria-label")&&(e="\n"+e),this.clear(),this.assertiveLiveElement_.setAttribute("aria-label",e)},U.AccessibilityReader.prototype.newLine=function(){this.announce("\n")},U.AccessibilityReader.prototype.clear=function(){this.liveElement_.setAttribute("aria-label",""),this.assertiveLiveElement_.setAttribute("aria-label",""),clearTimeout(this.nextReadTimer_),this.nextReadTimer_=null,this.queue_=[],this.cursorIsChanging_=!1,this.cursorChangeQueue_=[],this.lastCursorRowString_=null,this.lastCursorRow_=null,this.lastCursorColumn_=null,this.hasUserGesture=!1},U.AccessibilityReader.prototype.announceAction_=function(e,t,r){if(this.lastCursorRow_!=t)return!1;if(this.lastCursorRowString_==e){if(this.lastCursorColumn_!=r&&""==this.cursorChangeQueue_.join("").trim()){const e=Math.min(this.lastCursorColumn_,r),t=Math.abs(r-this.lastCursorColumn_);return this.assertiveAnnounce(K.wc.substr(this.lastCursorRowString_,e,t)),!0}return!1}if(this.lastCursorRowString_!=e){if(this.lastCursorColumn_+1==r&&" "==K.wc.substr(e,r-1,1)&&this.cursorChangeQueue_.length>0&&" "==this.cursorChangeQueue_[0])return this.assertiveAnnounce(" "),!0;const t=r;if(K.wc.strWidth(e)<=K.wc.strWidth(this.lastCursorRowString_)&&K.wc.substr(this.lastCursorRowString_,0,t)==K.wc.substr(e,0,t)){let r=K.wc.strWidth(e);for(;r>0&&(r!=t&&" "==K.wc.substr(e,r-1,1));--r);const o=K.wc.strWidth(this.lastCursorRowString_)-r,i=r-t;if(K.wc.substr(this.lastCursorRowString_,t+o,i)==K.wc.substr(e,t,i)){const e=K.wc.substr(this.lastCursorRowString_,t,o);if(""!=e)return this.assertiveAnnounce(e),!0}}return!1}return!1},U.AccessibilityReader.prototype.addToLiveRegion_=function(){this.nextReadTimer_=null;let e=this.queue_.join("\n").trim();e==this.liveElement_.getAttribute("aria-label")&&(e="\n"+e),this.liveElement_.setAttribute("aria-label",e),this.queue_=[]},U.ContextMenu=function(){this.document_=null,this.element_=null,this.menu_=[]},U.ContextMenu.SEPARATOR={},U.ContextMenu.prototype.setDocument=function(e){this.element_&&(this.element_.remove(),this.element_=null),this.document_=e,this.regenerate_(),this.document_.body.appendChild(this.element_)},U.ContextMenu.prototype.regenerate_=function(){for(this.element_?this.hide():(this.element_=this.document_.createElement("menu"),this.element_.id="hterm:context-menu",this.element_.style.cssText="\n        display: none;\n        border: solid 1px;\n        position: absolute;\n    ");this.element_.firstChild;)this.element_.removeChild(this.element_.firstChild);this.menu_.forEach(([e,t])=>{const r=this.document_.createElement("menuitem");e===U.ContextMenu.SEPARATOR?(r.innerHTML="<hr>",r.className="separator"):(r.innerText=e,r.addEventListener("mousedown",(function(e){e.preventDefault(),t(e)}))),this.element_.appendChild(r)})},U.ContextMenu.prototype.setItems=function(e){this.menu_=e,this.regenerate_()},U.ContextMenu.prototype.show=function(e,t){if(0==this.menu_.length)return;t&&(this.element_.style.backgroundColor=t.getBackgroundColor(),this.element_.style.color=t.getForegroundColor(),this.element_.style.fontSize=t.getFontSize(),this.element_.style.fontFamily=t.getFontFamily()),this.element_.style.top=`${e.clientY}px`,this.element_.style.left=`${e.clientX}px`;const r=U.getClientSize(this.document_.body);this.element_.style.display="block";const o=U.getClientSize(this.element_),i=Math.max(0,r.height-o.height),n=Math.max(0,r.width-o.width);i<e.clientY&&(this.element_.style.top=`${i}px`),n<e.clientX&&(this.element_.style.left=`${n}px`)},U.ContextMenu.prototype.hide=function(){this.element_&&(this.element_.style.display="none")},K.rtdep("lib.f"),U.Frame=function(e,t,r){this.terminal_=e,this.div_=e.div_,this.url=t,this.options=r||{},this.iframe_=null,this.container_=null,this.messageChannel_=null},U.Frame.prototype.onMessage_=function(e){switch(e.data.name){case"ipc-init-ok":return void this.sendTerminalInfo_();case"terminal-info-ok":return this.container_.style.display="flex",this.postMessage("visible"),this.messageChannel_.port1.onmessage=this.onMessage.bind(this),void this.onLoad();default:return void console.log("Unknown message from frame:",e.data)}},U.Frame.prototype.onMessage=function(){},U.Frame.prototype.onLoad_=function(){this.messageChannel_=new MessageChannel,this.messageChannel_.port1.onmessage=this.onMessage_.bind(this),this.messageChannel_.port1.start(),this.iframe_.contentWindow.postMessage({name:"ipc-init",argv:[{messagePort:this.messageChannel_.port2}]},this.url,[this.messageChannel_.port2])},U.Frame.prototype.onLoad=function(){},U.Frame.prototype.sendTerminalInfo_=function(){K.i18n.getAcceptLanguages(function(e){this.postMessage("terminal-info",[{acceptLanguages:e,foregroundColor:this.terminal_.getForegroundColor(),backgroundColor:this.terminal_.getBackgroundColor(),cursorColor:this.terminal_.getCursorColor(),fontSize:this.terminal_.getFontSize(),fontFamily:this.terminal_.getFontFamily(),baseURL:K.f.getURL("/")}])}.bind(this))},U.Frame.prototype.onCloseClicked_=function(){this.close()},U.Frame.prototype.close=function(){this.container_&&this.container_.parentNode&&(this.container_.parentNode.removeChild(this.container_),this.onClose())},U.Frame.prototype.onClose=function(){},U.Frame.prototype.postMessage=function(e,t){if(!this.messageChannel_)throw new Error("Message channel is not set up.");this.messageChannel_.port1.postMessage({name:e,argv:t})},U.Frame.prototype.show=function(){var e=this;function t(t,r){return t in e.options?e.options[t]:r}e=this;if(this.container_&&this.container_.parentNode)console.error("Frame already visible");else{var r=U.getClientSize(this.div_),o=t("width",640),i=t("height",480),n=(r.width,r.height,this.terminal_.document_),s=this.container_=n.createElement("div");s.style.cssText="position: absolute;display: none;flex-direction: column;top: 10%;left: 4%;width: 90%;height: 80%;min-height: 20%;max-height: 80%;box-shadow: 0 0 2px "+this.terminal_.getForegroundColor()+";border: 2px "+this.terminal_.getForegroundColor()+" solid;";var a=this.iframe_=n.createElement("iframe");a.onload=this.onLoad_.bind(this),a.style.cssText="display: flex;flex: 1;width: 100%",a.setAttribute("src",this.url),a.setAttribute("seamless",!0),s.appendChild(a),this.div_.appendChild(s)}},K.rtdep("hterm.Keyboard.KeyMap"),U.Keyboard=function(e){this.terminal=e,this.keyboardElement_=null,this.handlers_=[["focusout",this.onFocusOut_.bind(this)],["keydown",this.onKeyDown_.bind(this)],["keypress",this.onKeyPress_.bind(this)],["keyup",this.onKeyUp_.bind(this)],["textInput",this.onTextInput_.bind(this)]],this.keyMap=new U.Keyboard.KeyMap(this),this.bindings=new U.Keyboard.Bindings(this),this.altGrMode="none",this.shiftInsertPaste=!0,this.homeKeysScroll=!1,this.pageKeysScroll=!1,this.ctrlPlusMinusZeroZoom=!0,this.ctrlCCopy=!1,this.ctrlVPaste=!1,this.applicationKeypad=!1,this.applicationCursor=!1,this.backspaceSendsBackspace=!1,this.characterEncoding="utf-8",this.metaSendsEscape=!0,this.passMetaV=!0,this.altSendsWhat="escape",this.altIsMeta=!1,this.altBackspaceIsMetaBackspace=!1,this.altKeyPressed=0,this.mediaKeysAreFKeys=!1,this.previousAltSendsWhat_=null},U.Keyboard.KeyActions={CANCEL:K.f.createEnum("CANCEL"),DEFAULT:K.f.createEnum("DEFAULT"),PASS:K.f.createEnum("PASS"),STRIP:K.f.createEnum("STRIP")},U.Keyboard.prototype.encode=function(e){return"utf-8"==this.characterEncoding?this.terminal.vt.encodeUTF8(e):e},U.Keyboard.prototype.installKeyboard=function(e){if(e!=this.keyboardElement_){e&&this.keyboardElement_&&this.installKeyboard(null);for(var t=0;t<this.handlers_.length;t++){var r=this.handlers_[t];e?e.addEventListener(r[0],r[1]):this.keyboardElement_.removeEventListener(r[0],r[1])}this.keyboardElement_=e}},U.Keyboard.prototype.uninstallKeyboard=function(){this.installKeyboard(null)},U.Keyboard.prototype.onTextInput_=function(e){e.data&&this.terminal.onVTKeystroke(e.data)},U.Keyboard.prototype.onKeyPress_=function(e){if((!e.ctrlKey&&!e.metaKey||99!=e.keyCode&&118!=e.keyCode)&&9!=e.keyCode){if(e.altKey&&"browser-key"==this.altSendsWhat&&0==e.charCode){var t=String.fromCharCode(e.keyCode);e.shiftKey||(t=t.toLowerCase()),t.charCodeAt(0)+128}else e.charCode>=32&&(t=e.charCode);t&&this.terminal.onVTKeystroke(String.fromCharCode(t)),e.preventDefault(),e.stopPropagation()}},U.Keyboard.prototype.preventChromeAppNonCtrlShiftDefault_=function(e){window.chrome&&window.chrome.app&&window.chrome.app.window&&(e.ctrlKey&&e.shiftKey||e.preventDefault())},U.Keyboard.prototype.onFocusOut_=function(e){this.altKeyPressed=0},U.Keyboard.prototype.onKeyUp_=function(e){18==e.keyCode&&(this.altKeyPressed=this.altKeyPressed&~(1<<e.location-1)),27==e.keyCode&&this.preventChromeAppNonCtrlShiftDefault_(e)},U.Keyboard.prototype.onKeyDown_=function(e){18==e.keyCode&&(this.altKeyPressed=this.altKeyPressed|1<<e.location-1),27==e.keyCode&&this.preventChromeAppNonCtrlShiftDefault_(e);var t=this.keyMap.keyDefs[e.keyCode];t||(console.warn(`No definition for key ${e.key} (keyCode ${e.keyCode})`),t=this.keyMap.keyDefs[0],this.keyMap.addKeyDef(e.keyCode,t));var r=null,o=this;function i(n){r=n;var s=t[n];return"function"==typeof s&&(s=s.apply(o.keyMap,[e,t])),s===a&&"normal"!=n&&(s=i("normal")),s}var n,s=U.Keyboard.KeyActions.CANCEL,a=U.Keyboard.KeyActions.DEFAULT,l=U.Keyboard.KeyActions.PASS,c=U.Keyboard.KeyActions.STRIP,u=e.ctrlKey,h=!this.altIsMeta&&e.altKey,d=this.altIsMeta&&e.altKey||e.metaKey,p=!/^\[\w+\]$/.test(t.keyCap);switch(this.altGrMode){case"ctrl-alt":p&&u&&h&&(u=!1,h=!1);break;case"right-alt":p&&2&this.terminal.keyboard.altKeyPressed&&(u=!1,h=!1);break;case"left-alt":p&&1&this.terminal.keyboard.altKeyPressed&&(u=!1,h=!1)}n=i(u?"control":h?"alt":d?"meta":"normal");var f=!e.maskShiftKey&&e.shiftKey,g={keyCode:e.keyCode,shift:e.shiftKey,ctrl:u,alt:h,meta:d},m=this.bindings.getBinding(g);if(m&&(f=u=h=d=!1,r="normal","function"==typeof(n=m.action)&&(n=n.call(this,this.terminal,g))),h&&"browser-key"==this.altSendsWhat&&n==a&&(n=l),n!==l&&(n!==a||u||h||d)&&(n===c&&(h=u=!1,"function"==typeof(n=t.normal)&&(n=n.apply(this.keyMap,[e,t])),n==a&&2==t.keyCap.length&&(n=t.keyCap.substr(f?1:0,1))),e.preventDefault(),e.stopPropagation(),n!==s))if(n===a||"string"==typeof n){if("control"==r?u=!1:"alt"==r?h=!1:"meta"==r&&(d=!1),"["==n.substr(0,2)&&(h||u||f||d)){let e=1;f&&(e+=1),h&&(e+=2),u&&(e+=4),d&&(e+=8);let t=";"+e;n=3==n.length?"[1"+t+n.substr(2,1):n.substr(0,n.length-1)+t+n.substr(n.length-1)}else{if(n===a)if(n=t.keyCap.substr(f?1:0,1),u)(y=t.keyCap.substr(0,1).charCodeAt(0))>=64&&y<=95&&(n=String.fromCharCode(y-64));if(h&&"8-bit"==this.altSendsWhat&&1==n.length){var y=n.charCodeAt(0)+128;n=String.fromCharCode(y)}(h&&"escape"==this.altSendsWhat||d&&this.metaSendsEscape)&&(n=""+n)}this.terminal.onVTKeystroke(n)}else console.warn("Invalid action: "+JSON.stringify(n))},U.Keyboard.Bindings=function(){this.bindings_={}},U.Keyboard.Bindings.prototype.clear=function(){this.bindings_={}},U.Keyboard.Bindings.prototype.addBinding_=function(e,t){var r=null,o=this.bindings_[e.keyCode];if(o)for(var i=0;i<o.length;i++)if(o[i].keyPattern.matchKeyPattern(e)){r=o[i];break}r?r.action=t:(r={keyPattern:e,action:t},o?(this.bindings_[e.keyCode].push(r),o.sort((function(e,t){return U.Keyboard.KeyPattern.sortCompare(e.keyPattern,t.keyPattern)}))):this.bindings_[e.keyCode]=[r])},U.Keyboard.Bindings.prototype.addBinding=function(e,t){if("string"==typeof e){var r,o=new U.Parser;o.reset(e);try{r=o.parseKeySequence()}catch(e){return void console.error(e)}if(o.isComplete()){if("string"==typeof t){o.reset(t);try{t=o.parseKeyAction()}catch(e){return void console.error(e)}}o.isComplete()?this.addBinding_(new U.Keyboard.KeyPattern(r),t):console.error(o.error("Expected end of sequence: "+r))}else console.error(o.error("Expected end of sequence: "+r))}else this.addBinding_(e,t)},U.Keyboard.Bindings.prototype.addBindings=function(e){for(var t in e)this.addBinding(t,e[t])},U.Keyboard.Bindings.prototype.getBinding=function(e){var t=this.bindings_[e.keyCode];if(!t)return null;for(var r=0;r<t.length;r++){var o=t[r];if(o.keyPattern.matchKeyDown(e))return o}return null},K.rtdep("hterm.Keyboard.KeyActions"),U.Keyboard.KeyMap=function(e){this.keyboard=e,this.keyDefs={},this.reset()},U.Keyboard.KeyMap.prototype.addKeyDef=function(e,t){e in this.keyDefs&&console.warn("Duplicate keyCode: "+e),this.keyDefs[e]=t},U.Keyboard.KeyMap.prototype.addKeyDefs=function(e){for(var t=0;t<arguments.length;t++)this.addKeyDef(arguments[t][0],{keyCap:arguments[t][1],normal:arguments[t][2],control:arguments[t][3],alt:arguments[t][4],meta:arguments[t][5]})},U.Keyboard.KeyMap.prototype.reset=function(){this.keyDefs={};var e=this;function t(t,r,o){return"function"==typeof t?t.apply(e,[r,o]):t}function r(r,o){return function(i,n){return t(i.shiftKey||i.ctrlKey||i.altKey||i.metaKey||!e.keyboard.applicationCursor?r:o,i,n)}}function o(r,o){return function(i,n){return t(e.keyboard.backspaceSendsBackspace?o:r,i,n)}}function i(e,r){return function(o,i){var n=o.shiftKey?r:e;return o.maskShiftKey=!0,t(n,o,i)}}function n(e,r){return function(o,i){return t(o.altKey?r:e,o,i)}}function s(e,r){return function(o,i){return t(o.shiftKey||o.ctrlKey||o.altKey||o.metaKey?r:e,o,i)}}function a(e){return String.fromCharCode(e.charCodeAt(0)-64)}function l(e){return function(t,r){return this[e](t,r)}}function c(r){return function(o,i){return e.keyboard.mediaKeysAreFKeys?t(r,o,i):166==o.keyCode||167==o.keyCode||168==o.keyCode?U.Keyboard.KeyActions.CANCEL:U.Keyboard.KeyActions.PASS}}if(window.navigator&&navigator.userAgent)if(navigator.userAgent.includes("Firefox")){var u=59,h=61,d=173;this.addKeyDefs([171,"+*",f,l("onPlusMinusZero_"),f,l("onPlusMinusZero_")])}else u=186,h=187,d=189;var p=U.Keyboard.KeyActions.CANCEL,f=U.Keyboard.KeyActions.DEFAULT,g=U.Keyboard.KeyActions.PASS,m=U.Keyboard.KeyActions.STRIP;this.addKeyDefs([0,"[UNKNOWN]",g,g,g,g],[27,"[ESC]","",f,f,f],[112,"[F1]",s("OP","[P"),f,"[23~",f],[113,"[F2]",s("OQ","[Q"),f,"[24~",f],[114,"[F3]",s("OR","[R"),f,"[25~",f],[115,"[F4]",s("OS","[S"),f,"[26~",f],[116,"[F5]","[15~",f,"[28~",f],[117,"[F6]","[17~",f,"[29~",f],[118,"[F7]","[18~",f,"[31~",f],[119,"[F8]","[19~",f,"[32~",f],[120,"[F9]","[20~",f,"[33~",f],[121,"[F10]","[21~",f,"[34~",f],[122,"[F11]",l("onF11_"),f,"[42~",f],[123,"[F12]","[24~",f,"[43~",f],[192,"`~",f,i(a("@"),a("^")),f,g],[49,"1!",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[50,"2@",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[51,"3#",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[52,"4$",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[53,"5%",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[54,"6^",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[55,"7&",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[56,"8*",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[57,"9(",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[48,"0)",f,l("onPlusMinusZero_"),l("onAltNum_"),l("onPlusMinusZero_")],[d,"-_",f,l("onPlusMinusZero_"),f,l("onPlusMinusZero_")],[h,"=+",f,l("onPlusMinusZero_"),f,l("onPlusMinusZero_")],[8,"[BKSP]",o("","\b"),o("\b",""),f,f],[9,"[TAB]",i("\t","[Z"),m,g,f],[81,"qQ",f,a("Q"),f,f],[87,"wW",f,a("W"),f,f],[69,"eE",f,a("E"),f,f],[82,"rR",f,a("R"),f,f],[84,"tT",f,a("T"),f,f],[89,"yY",f,a("Y"),f,f],[85,"uU",f,a("U"),f,f],[73,"iI",f,a("I"),f,f],[79,"oO",f,a("O"),f,f],[80,"pP",f,a("P"),f,f],[219,"[{",f,a("["),f,f],[221,"]}",f,a("]"),f,f],[220,"\\|",f,a("\\"),f,f],[20,"[CAPS]",g,g,g,f],[65,"aA",f,a("A"),f,f],[83,"sS",f,a("S"),f,f],[68,"dD",f,a("D"),f,f],[70,"fF",f,a("F"),f,f],[71,"gG",f,a("G"),f,f],[72,"hH",f,a("H"),f,f],[74,"jJ",f,i(a("J"),g),f,f],[75,"kK",f,i(a("K"),l("onClear_")),f,f],[76,"lL",f,i(a("L"),g),f,f],[u,";:",f,m,f,f],[222,"'\"",f,m,f,f],[13,"[ENTER]","\r",p,p,f],[16,"[SHIFT]",g,g,g,f],[90,"zZ",f,a("Z"),f,f],[88,"xX",f,a("X"),f,f],[67,"cC",f,l("onCtrlC_"),f,l("onMetaC_")],[86,"vV",f,l("onCtrlV_"),f,l("onMetaV_")],[66,"bB",f,i(a("B"),g),f,i(f,g)],[78,"nN",f,l("onCtrlN_"),f,l("onMetaN_")],[77,"mM",f,a("M"),f,f],[188,",<",f,n(m,g),f,f],[190,".>",f,n(m,g),f,f],[191,"/?",f,i(a("_"),a("?")),f,f],[17,"[CTRL]",g,g,g,g],[18,"[ALT]",g,g,g,g],[91,"[LAPL]",g,g,g,g],[32," ",f,a("@"),f,f],[92,"[RAPL]",g,g,g,g],[93,"[RMENU]",g,g,g,g],[42,"[PRTSCR]",g,g,g,g],[145,"[SCRLK]",g,g,g,g],[19,"[BREAK]",g,g,g,g],[45,"[INSERT]",l("onKeyInsert_"),f,f,f],[36,"[HOME]",l("onKeyHome_"),f,f,f],[33,"[PGUP]",l("onKeyPageUp_"),f,f,f],[46,"[DEL]",l("onKeyDel_"),f,f,f],[35,"[END]",l("onKeyEnd_"),f,f,f],[34,"[PGDOWN]",l("onKeyPageDown_"),f,f,f],[38,"[UP]",l("onKeyArrowUp_"),f,f,f],[40,"[DOWN]",l("onKeyArrowDown_"),f,f,f],[39,"[RIGHT]",r("[C","OC"),f,f,f],[37,"[LEFT]",r("[D","OD"),f,f,f],[144,"[NUMLOCK]",g,g,g,g],[12,"[CLEAR]",g,g,g,g],[96,"[KP0]",f,f,f,f],[97,"[KP1]",f,f,f,f],[98,"[KP2]",f,f,f,f],[99,"[KP3]",f,f,f,f],[100,"[KP4]",f,f,f,f],[101,"[KP5]",f,f,f,f],[102,"[KP6]",f,f,f,f],[103,"[KP7]",f,f,f,f],[104,"[KP8]",f,f,f,f],[105,"[KP9]",f,f,f,f],[107,"[KP+]",f,l("onPlusMinusZero_"),f,l("onPlusMinusZero_")],[109,"[KP-]",f,l("onPlusMinusZero_"),f,l("onPlusMinusZero_")],[106,"[KP*]",f,f,f,f],[111,"[KP/]",f,f,f,f],[110,"[KP.]",f,f,f,f]),"cros"==U.os&&this.addKeyDefs([166,"[BACK]",c(s("OP","[P")),f,"[23~",f],[167,"[FWD]",c(s("OQ","[Q")),f,"[24~",f],[168,"[RELOAD]",c(s("OR","[R")),f,"[25~",f],[183,"[FSCR]",c(s("OS","[S")),f,"[26~",f],[182,"[WINS]",c("[15~"),f,"[28~",f],[216,"[BRIT-]",c("[17~"),f,"[29~",f],[217,"[BRIT+]",c("[18~"),f,"[31~",f],[173,"[MUTE]",c("[19~"),f,"[32~",f],[174,"[VOL-]",c("[20~"),f,"[33~",f],[175,"[VOL+]",c("[21~"),f,"[34~",f],[152,"[POWER]",f,f,f,f],[179,"[PLAY]",c("[18~"),f,"[31~",f],[154,"[DOGS]",c("[23~"),f,"[42~",f],[153,"[ASSIST]",f,f,f,f])},U.Keyboard.KeyMap.prototype.onKeyInsert_=function(e){return this.keyboard.shiftInsertPaste&&e.shiftKey?U.Keyboard.KeyActions.PASS:"[2~"},U.Keyboard.KeyMap.prototype.onKeyHome_=function(e){return!this.keyboard.homeKeysScroll^e.shiftKey?e.altey||e.ctrlKey||e.shiftKey||!this.keyboard.applicationCursor?"[H":"OH":(this.keyboard.terminal.scrollHome(),U.Keyboard.KeyActions.CANCEL)},U.Keyboard.KeyMap.prototype.onKeyEnd_=function(e){return!this.keyboard.homeKeysScroll^e.shiftKey?e.altKey||e.ctrlKey||e.shiftKey||!this.keyboard.applicationCursor?"[F":"OF":(this.keyboard.terminal.scrollEnd(),U.Keyboard.KeyActions.CANCEL)},U.Keyboard.KeyMap.prototype.onKeyPageUp_=function(e){return!this.keyboard.pageKeysScroll^e.shiftKey?"[5~":(this.keyboard.terminal.scrollPageUp(),U.Keyboard.KeyActions.CANCEL)},U.Keyboard.KeyMap.prototype.onKeyDel_=function(e){return this.keyboard.altBackspaceIsMetaBackspace&&this.keyboard.altKeyPressed&&!e.altKey?"":"[3~"},U.Keyboard.KeyMap.prototype.onKeyPageDown_=function(e){return!this.keyboard.pageKeysScroll^e.shiftKey?"[6~":(this.keyboard.terminal.scrollPageDown(),U.Keyboard.KeyActions.CANCEL)},U.Keyboard.KeyMap.prototype.onKeyArrowUp_=function(e){return!this.keyboard.applicationCursor&&e.shiftKey?(this.keyboard.terminal.scrollLineUp(),U.Keyboard.KeyActions.CANCEL):e.shiftKey||e.ctrlKey||e.altKey||e.metaKey||!this.keyboard.applicationCursor?"[A":"OA"},U.Keyboard.KeyMap.prototype.onKeyArrowDown_=function(e){return!this.keyboard.applicationCursor&&e.shiftKey?(this.keyboard.terminal.scrollLineDown(),U.Keyboard.KeyActions.CANCEL):e.shiftKey||e.ctrlKey||e.altKey||e.metaKey||!this.keyboard.applicationCursor?"[B":"OB"},U.Keyboard.KeyMap.prototype.onClear_=function(e,t){return this.keyboard.terminal.wipeContents(),U.Keyboard.KeyActions.CANCEL},U.Keyboard.KeyMap.prototype.onF11_=function(e,t){return"popup"!=U.windowType?U.Keyboard.KeyActions.PASS:"[23~"},U.Keyboard.KeyMap.prototype.onCtrlNum_=function(e,t){function r(e){return String.fromCharCode(e.charCodeAt(0)-64)}if(this.keyboard.terminal.passCtrlNumber&&!e.shiftKey)return U.Keyboard.KeyActions.PASS;switch(t.keyCap.substr(0,1)){case"1":return"1";case"2":return r("@");case"3":return r("[");case"4":return r("\\");case"5":return r("]");case"6":return r("^");case"7":return r("_");case"8":return"";case"9":return"9"}},U.Keyboard.KeyMap.prototype.onAltNum_=function(e,t){return this.keyboard.terminal.passAltNumber&&!e.shiftKey?U.Keyboard.KeyActions.PASS:U.Keyboard.KeyActions.DEFAULT},U.Keyboard.KeyMap.prototype.onMetaNum_=function(e,t){return this.keyboard.terminal.passMetaNumber&&!e.shiftKey?U.Keyboard.KeyActions.PASS:U.Keyboard.KeyActions.DEFAULT},U.Keyboard.KeyMap.prototype.onCtrlC_=function(e,t){var r=this.keyboard.terminal.getDocument().getSelection();if(!r.isCollapsed){if(this.keyboard.ctrlCCopy&&!e.shiftKey)return this.keyboard.terminal.clearSelectionAfterCopy&&setTimeout(r.collapseToEnd.bind(r),50),U.Keyboard.KeyActions.PASS;if(!this.keyboard.ctrlCCopy&&e.shiftKey)return this.keyboard.terminal.clearSelectionAfterCopy&&setTimeout(r.collapseToEnd.bind(r),50),this.keyboard.terminal.copySelectionToClipboard(),U.Keyboard.KeyActions.CANCEL}return""},U.Keyboard.KeyMap.prototype.onCtrlN_=function(e,t){return e.shiftKey?(window.open(document.location.href,"","chrome=no,close=yes,resize=yes,scrollbars=yes,minimizable=yes,width="+window.innerWidth+",height="+window.innerHeight),U.Keyboard.KeyActions.CANCEL):""},U.Keyboard.KeyMap.prototype.onCtrlV_=function(e,t){return!e.shiftKey&&this.keyboard.ctrlVPaste||e.shiftKey&&!this.keyboard.ctrlVPaste?this.keyboard.terminal.paste()?U.Keyboard.KeyActions.CANCEL:U.Keyboard.KeyActions.PASS:""},U.Keyboard.KeyMap.prototype.onMetaN_=function(e,t){return e.shiftKey?(window.open(document.location.href,"","chrome=no,close=yes,resize=yes,scrollbars=yes,minimizable=yes,width="+window.outerWidth+",height="+window.outerHeight),U.Keyboard.KeyActions.CANCEL):U.Keyboard.KeyActions.DEFAULT},U.Keyboard.KeyMap.prototype.onMetaC_=function(e,t){var r=this.keyboard.terminal.getDocument();return e.shiftKey||r.getSelection().isCollapsed?t.keyCap.substr(e.shiftKey?1:0,1):(this.keyboard.terminal.clearSelectionAfterCopy&&setTimeout((function(){r.getSelection().collapseToEnd()}),50),U.Keyboard.KeyActions.PASS)},U.Keyboard.KeyMap.prototype.onMetaV_=function(e,t){return e.shiftKey?U.Keyboard.KeyActions.PASS:this.keyboard.passMetaV?U.Keyboard.KeyActions.PASS:U.Keyboard.KeyActions.DEFAULT},U.Keyboard.KeyMap.prototype.onPlusMinusZero_=function(e,t){if(!(this.keyboard.ctrlPlusMinusZeroZoom^e.shiftKey))return"-_"==t.keyCap?"":U.Keyboard.KeyActions.CANCEL;if(1!=this.keyboard.terminal.getZoomFactor())return U.Keyboard.KeyActions.PASS;var r=t.keyCap.substr(0,1);if("0"==r)this.keyboard.terminal.setFontSize(0);else{var o=this.keyboard.terminal.getFontSize();"-"==r||"[KP-]"==t.keyCap?o-=1:o+=1,this.keyboard.terminal.setFontSize(o)}return U.Keyboard.KeyActions.CANCEL},U.Keyboard.KeyPattern=function(e){this.wildcardCount=0,this.keyCode=e.keyCode,U.Keyboard.KeyPattern.modifiers.forEach(function(t){this[t]=e[t]||!1,"*"==this[t]&&this.wildcardCount++}.bind(this))},U.Keyboard.KeyPattern.modifiers=["shift","ctrl","alt","meta"],U.Keyboard.KeyPattern.sortCompare=function(e,t){return e.wildcardCount<t.wildcardCount?-1:e.wildcardCount>t.wildcardCount?1:0},U.Keyboard.KeyPattern.prototype.match_=function(e,t){if(this.keyCode!=e.keyCode)return!1;var r=!0;return U.Keyboard.KeyPattern.modifiers.forEach(function(o){var i=o in e&&e[o];r&&(t||"*"!=this[o])&&this[o]!=i&&(r=!1)}.bind(this)),r},U.Keyboard.KeyPattern.prototype.matchKeyDown=function(e){return this.match_(e,!1)},U.Keyboard.KeyPattern.prototype.matchKeyPattern=function(e){return this.match_(e,!0)},U.Options=function(e){this.wraparound=!e||e.wraparound,this.reverseWraparound=!!e&&e.reverseWraparound,this.originMode=!!e&&e.originMode,this.autoCarriageReturn=!!e&&e.autoCarriageReturn,this.cursorVisible=!!e&&e.cursorVisible,this.cursorBlink=!!e&&e.cursorBlink,this.insertMode=!!e&&e.insertMode,this.reverseVideo=!!e&&e.reverseVideo,this.bracketedPaste=!!e&&e.bracketedPaste},K.rtdep("hterm.Keyboard.KeyActions"),U.Parser=function(){this.source="",this.pos=0,this.ch=null},U.Parser.prototype.error=function(e){return new Error("Parse error at "+this.pos+": "+e)},U.Parser.prototype.isComplete=function(){return this.pos==this.source.length},U.Parser.prototype.reset=function(e,t){this.source=e,this.pos=t||0,this.ch=e.substr(0,1)},U.Parser.prototype.parseKeySequence=function(){var e={keyCode:null};for(var t in U.Parser.identifiers.modifierKeys)e[U.Parser.identifiers.modifierKeys[t]]=!1;for(;this.pos<this.source.length;){this.skipSpace();var r=this.parseToken();if("integer"==r.type)e.keyCode=r.value;else if("identifier"==r.type){var o=r.value.toUpperCase();if(o in U.Parser.identifiers.modifierKeys&&U.Parser.identifiers.modifierKeys.hasOwnProperty(o)){var i=U.Parser.identifiers.modifierKeys[o];if(e[i]&&"*"!=e[i])throw this.error("Duplicate modifier: "+r.value);e[i]=!0}else{if(!(o in U.Parser.identifiers.keyCodes&&U.Parser.identifiers.keyCodes.hasOwnProperty(o)))throw this.error("Unknown key: "+r.value);e.keyCode=U.Parser.identifiers.keyCodes[o]}}else{if("symbol"!=r.type)throw this.error("Expected integer or identifier");if("*"!=r.value)throw this.error("Unexpected symbol: "+r.value);for(var n in U.Parser.identifiers.modifierKeys){var s=U.Parser.identifiers.modifierKeys[n];e[s]||(e[s]="*")}}if(this.skipSpace(),"-"!=this.ch)break;if(null!=e.keyCode)throw this.error("Extra definition after target key");this.advance(1)}if(null==e.keyCode)throw this.error("Missing target key");return e},U.Parser.prototype.parseKeyAction=function(){this.skipSpace();var e=this.parseToken();if("string"==e.type)return e.value;if("identifier"==e.type){if(e.value in U.Parser.identifiers.actions&&U.Parser.identifiers.actions.hasOwnProperty(e.value))return U.Parser.identifiers.actions[e.value];throw this.error("Unknown key action: "+e.value)}throw this.error("Expected string or identifier")},U.Parser.prototype.peekString=function(){return"'"==this.ch||'"'==this.ch},U.Parser.prototype.peekIdentifier=function(){return this.ch.match(/[a-z_]/i)},U.Parser.prototype.peekInteger=function(){return this.ch.match(/[0-9]/)},U.Parser.prototype.parseToken=function(){if("*"==this.ch){var e={type:"symbol",value:this.ch};return this.advance(1),e}if(this.peekIdentifier())return{type:"identifier",value:this.parseIdentifier()};if(this.peekString())return{type:"string",value:this.parseString()};if(this.peekInteger())return{type:"integer",value:this.parseInteger()};throw this.error("Unexpected token")},U.Parser.prototype.parseIdentifier=function(){if(!this.peekIdentifier())throw this.error("Expected identifier");return this.parsePattern(/[a-z0-9_]+/gi)},U.Parser.prototype.parseInteger=function(){return"0"==this.ch&&this.pos<this.source.length-1&&"x"==this.source.substr(this.pos+1,1)?parseInt(this.parsePattern(/0x[0-9a-f]+/gi)):parseInt(this.parsePattern(/\d+/g))},U.Parser.prototype.parseString=function(){var e="",t=this.ch;if('"'!=t&&"'"!=t)throw this.error("String expected");this.advance(1);for(var r=new RegExp("[\\\\"+t+"]","g");this.pos<this.source.length;){if(r.lastIndex=this.pos,!r.exec(this.source))throw this.error("Unterminated string literal");if(e+=this.source.substring(this.pos,r.lastIndex-1),this.advance(r.lastIndex-this.pos-1),'"'!=t||"\\"!=this.ch)if("'"!=t||"\\"!=this.ch){if(this.ch==t)return this.advance(1),e}else e+=this.ch,this.advance(1);else this.advance(1),e+=this.parseEscape()}throw this.error("Unterminated string literal")},U.Parser.prototype.parseEscape=function(){var e={'"':'"',"'":"'","\\":"\\",a:"",b:"\b",e:"",f:"\f",n:"\n",r:"\r",t:"\t",v:"\v",x:function(){var e=this.parsePattern(/[a-z0-9]{2}/gi);return String.fromCharCode(parseInt(e,16))},u:function(){var e=this.parsePattern(/[a-z0-9]{4}/gi);return String.fromCharCode(parseInt(e,16))}};if(!(this.ch in e&&e.hasOwnProperty(this.ch)))throw this.error("Unknown escape: "+this.ch);var t=e[this.ch];return this.advance(1),"function"==typeof t&&(t=t.call(this)),t},U.Parser.prototype.parsePattern=function(e){if(!e.global)throw this.error("Internal error: Span patterns must be global");e.lastIndex=this.pos;var t=e.exec(this.source);if(!t||e.lastIndex-t[0].length!=this.pos)throw this.error("Expected match for: "+e);return this.pos=e.lastIndex-1,this.advance(1),t[0]},U.Parser.prototype.advance=function(e){this.pos+=e,this.ch=this.source.substr(this.pos,1)},U.Parser.prototype.skipSpace=function(e){if(/\s/.test(this.ch)){var t=/\s+/gm;t.lastIndex=this.pos;var r=this.source;if(t.exec(r)&&(this.pos=t.lastIndex),this.ch=this.source.substr(this.pos,1),e&&-1==this.ch.indexOf(e))throw this.error("Expected one of "+e+", found: "+this.ch)}},U.Parser.identifiers={},U.Parser.identifiers.modifierKeys={SHIFT:"shift",CTRL:"ctrl",CONTROL:"ctrl",ALT:"alt",META:"meta"},U.Parser.identifiers.keyCodes={ESCAPE:27,ESC:27,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,ZERO:48,BACKSPACE:8,BKSP:8,BS:8,TAB:9,Q:81,W:87,E:69,R:82,T:84,Y:89,U:85,I:73,O:79,P:80,CAPS_LOCK:20,CAPSLOCK:20,CAPS:20,A:65,S:83,D:68,F:70,G:71,H:72,J:74,K:75,L:76,ENTER:13,ENT:13,RETURN:13,RET:13,Z:90,X:88,C:67,V:86,B:66,N:78,M:77,SPACE:32,SP:32,PRINT_SCREEN:42,PRTSC:42,SCROLL_LOCK:145,SCRLK:145,BREAK:19,BRK:19,INSERT:45,INS:45,HOME:36,PAGE_UP:33,PGUP:33,DELETE:46,DEL:46,END:35,PAGE_DOWN:34,PGDOWN:34,PGDN:34,UP:38,DOWN:40,RIGHT:39,LEFT:37,NUMLOCK:144,KP0:96,KP1:97,KP2:98,KP3:99,KP4:100,KP5:101,KP6:102,KP7:103,KP8:104,KP9:105,KP_PLUS:107,KP_ADD:107,KP_MINUS:109,KP_SUBTRACT:109,KP_STAR:106,KP_MULTIPLY:106,KP_DIVIDE:111,KP_DECIMAL:110,KP_PERIOD:110,NAVIGATE_BACK:166,NAVIGATE_FORWARD:167,RELOAD:168,FULL_SCREEN:183,WINDOW_OVERVIEW:182,BRIGHTNESS_UP:216,BRIGHTNESS_DOWN:217},U.Parser.identifiers.actions={CANCEL:U.Keyboard.KeyActions.CANCEL,DEFAULT:U.Keyboard.KeyActions.DEFAULT,PASS:U.Keyboard.KeyActions.PASS,scrollLineUp:function(e){return e.scrollLineUp(),U.Keyboard.KeyActions.CANCEL},scrollLineDown:function(e){return e.scrollLineDown(),U.Keyboard.KeyActions.CANCEL},scrollPageUp:function(e){return e.scrollPageUp(),U.Keyboard.KeyActions.CANCEL},scrollPageDown:function(e){return e.scrollPageDown(),U.Keyboard.KeyActions.CANCEL},scrollToTop:function(e){return e.scrollHome(),U.Keyboard.KeyActions.CANCEL},scrollToBottom:function(e){return e.scrollEnd(),U.Keyboard.KeyActions.CANCEL},clearScreen:function(e){return e.clearHome(),U.Keyboard.KeyActions.CANCEL},clearScrollback:function(e){return e.clearScrollback(),U.Keyboard.KeyActions.CANCEL},clearTerminal:function(e){return e.wipeContents(),U.Keyboard.KeyActions.CANCEL},fullReset:function(e){return e.reset(),U.Keyboard.KeyActions.CANCEL},softReset:function(e){return e.softReset(),U.Keyboard.KeyActions.CANCEL}},K.rtdep("lib.f","lib.Storage"),U.PreferenceManager=function(e){K.PreferenceManager.call(this,U.defaultStorage,U.PreferenceManager.prefix_+e),Object.entries(U.PreferenceManager.defaultPreferences).forEach(([e,t])=>{this.definePreference(e,t.default)})},U.PreferenceManager.prefix_="/hterm/profiles/",U.PreferenceManager.listProfiles=function(e){U.defaultStorage.getItems(null,t=>{const r={};for(let e of Object.keys(t))if(e.startsWith(U.PreferenceManager.prefix_)){r[e.slice(U.PreferenceManager.prefix_.length).split("/",1)[0]]=!0}e(Object.keys(r))})},U.PreferenceManager.categories={},U.PreferenceManager.categories.Keyboard="Keyboard",U.PreferenceManager.categories.Appearance="Appearance",U.PreferenceManager.categories.CopyPaste="CopyPaste",U.PreferenceManager.categories.Sounds="Sounds",U.PreferenceManager.categories.Scrolling="Scrolling",U.PreferenceManager.categories.Encoding="Encoding",U.PreferenceManager.categories.Extensions="Extensions",U.PreferenceManager.categories.Miscellaneous="Miscellaneous",U.PreferenceManager.categoryDefinitions=[{id:U.PreferenceManager.categories.Appearance,text:"Appearance (fonts, colors, images)"},{id:U.PreferenceManager.categories.CopyPaste,text:"Copy & Paste"},{id:U.PreferenceManager.categories.Encoding,text:"Encoding"},{id:U.PreferenceManager.categories.Keyboard,text:"Keyboard"},{id:U.PreferenceManager.categories.Scrolling,text:"Scrolling"},{id:U.PreferenceManager.categories.Sounds,text:"Sounds"},{id:U.PreferenceManager.categories.Extensions,text:"Extensions"},{id:U.PreferenceManager.categories.Miscellaneous,text:"Miscellaneous"}],U.PreferenceManager.definePref_=function(e,t,r,o){return{category:e,default:t,type:r,help:o}},U.PreferenceManager.defaultPreferences={"alt-gr-mode":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,null,[null,"none","ctrl-alt","left-alt","right-alt"],"Select an AltGr detection heuristic.\n\n'null': Autodetect based on navigator.language:\n      'en-us' => 'none', else => 'right-alt'\n'none': Disable any AltGr related munging.\n'ctrl-alt': Assume Ctrl+Alt means AltGr.\n'left-alt': Assume left Alt means AltGr.\n'right-alt': Assume right Alt means AltGr."),"alt-backspace-is-meta-backspace":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","If set, undoes the Chrome OS Alt-Backspace->DEL remap, so that Alt-Backspace indeed is Alt-Backspace."),"alt-is-meta":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","Whether the Alt key acts as a Meta key or as a distinct Alt key."),"alt-sends-what":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,"escape",["escape","8-bit","browser-key"],"Controls how the Alt key is handled.\n\n  escape: Send an ESC prefix.\n  8-bit: Add 128 to the typed character as in xterm.\n  browser-key: Wait for the keypress event and see what the browser\n    says. (This won't work well on platforms where the browser\n    performs a default action for some Alt sequences.)"),"audible-bell-sound":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Sounds,"lib-resource:hterm/audio/bell","url","URL of the terminal bell sound. Empty string for no audible bell."),"desktop-notification-bell":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Sounds,!1,"bool",'If true, terminal bells in the background will create a Web Notification. https://www.w3.org/TR/notifications/\n\nDisplaying notifications requires permission from the user. When this option is set to true, hterm will attempt to ask the user for permission if necessary. Browsers may not show this permission request if it was not triggered by a user action.\n\nChrome extensions with the "notifications" permission have permission to display notifications.'),"background-color":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"rgb(16, 16, 16)","color","The background color for text with no other color attributes."),"background-image":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"","string","CSS value of the background image. Empty string for no image.\n\nFor example:\n  url(https://goo.gl/anedTK)\n  linear-gradient(top bottom, blue, red)"),"background-size":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"","string","CSS value of the background image size."),"background-position":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"","string","CSS value of the background image position.\n\nFor example:\n  10% 10%\n  center"),"backspace-sends-backspace":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","If true, the backspace should send BS ('\\x08', aka ^H). Otherwise the backspace key should send '\\x7f'."),"character-map-overrides":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,null,"value",'This is specified as an object. It is a sparse array, where each property is the character set code and the value is an object that is a sparse array itself. In that sparse array, each property is the received character and the value is the displayed character.\n\nFor example:\n  {"0":{"+":"\\u2192",",":"\\u2190","-":"\\u2191",".":"\\u2193", "0":"\\u2588"}}'),"close-on-exit":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Miscellaneous,!0,"bool","Whether to close the window when the command finishes executing."),"cursor-blink":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,!1,"bool","Whether the text cursor blinks by default. This can be toggled at runtime via terminal escape sequences."),"cursor-blink-cycle":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,[1e3,500],"value","The text cursor blink rate in milliseconds.\n\nA two element array, the first of which is how long the text cursor should be on, second is how long it should be off."),"cursor-color":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"rgba(255, 0, 0, 0.5)","color","The color of the visible text cursor."),"color-palette-overrides":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,null,"value",'Override colors in the default palette.\n\nThis can be specified as an array or an object. If specified as an object it is assumed to be a sparse array, where each property is a numeric index into the color palette.\n\nValues can be specified as almost any CSS color value. This includes #RGB, #RRGGBB, rgb(...), rgba(...), and any color names that are also part of the standard X11 rgb.txt file.\n\nYou can use \'null\' to specify that the default value should be not be changed. This is useful for skipping a small number of indices when the value is specified as an array.\n\nFor example, these both set color index 1 to blue:\n  {1: "#0000ff"}\n  [null, "#0000ff"]'),"copy-on-select":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!0,"bool","Automatically copy mouse selection to the clipboard."),"use-default-window-copy":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!1,"bool","Whether to use the default browser/OS's copy behavior.\n\nAllow the browser/OS to handle the copy event directly which might improve compatibility with some systems (where copying doesn't work at all), but makes the text selection less robust.\n\nFor example, long lines that were automatically line wrapped will be copied with the newlines still in them."),"clear-selection-after-copy":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!0,"bool","Whether to clear the selection after copying."),"ctrl-plus-minus-zero-zoom":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!0,"bool","If true, Ctrl-Plus/Minus/Zero controls zoom.\nIf false, Ctrl-Shift-Plus/Minus/Zero controls zoom, Ctrl-Minus sends ^_, Ctrl-Plus/Zero do nothing."),"ctrl-c-copy":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","Ctrl-C copies if true, send ^C to host if false.\nCtrl-Shift-C sends ^C to host if true, copies if false."),"ctrl-v-paste":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","Ctrl-V pastes if true, send ^V to host if false.\nCtrl-Shift-V sends ^V to host if true, pastes if false."),"east-asian-ambiguous-as-two-column":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","Whether East Asian Ambiguous characters have two column width."),"enable-8-bit-control":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","True to enable 8-bit control characters, false to ignore them.\n\nWe'll respect the two-byte versions of these control characters regardless of this setting."),"enable-bold":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,null,"tristate","If true, use bold weight font for text with the bold/bright attribute. False to use the normal weight font. Null to autodetect."),"enable-bold-as-bright":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,!0,"bool","If true, use bright colors (8-15 on a 16 color palette) for any text with the bold attribute. False otherwise."),"enable-blink":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,!0,"bool","If true, respect the blink attribute. False to ignore it."),"enable-clipboard-notice":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!0,"bool","Whether to show a message in the terminal when the host writes to the clipboard."),"enable-clipboard-write":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!0,"bool","Allow the remote host to write directly to the local system clipboard.\nRead access is never granted regardless of this setting.\n\nThis is used to control access to features like OSC-52."),"enable-dec12":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Miscellaneous,!1,"bool","Respect the host's attempt to change the text cursor blink status using DEC Private Mode 12."),"enable-csi-j-3":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Miscellaneous,!0,"bool","Whether CSI-J (Erase Display) mode 3 may clear the terminal scrollback buffer.\n\nEnabling this by default is safe."),environment:U.PreferenceManager.definePref_(U.PreferenceManager.categories.Miscellaneous,{NCURSES_NO_UTF8_ACS:"1",TERM:"xterm-256color",COLORTERM:"truecolor"},"value","The initial set of environment variables, as an object."),"font-family":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,'"DejaVu Sans Mono", "Noto Sans Mono", "Everson Mono", FreeMono, Menlo, Terminal, monospace',"string","Default font family for the terminal text."),"font-size":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,15,"int","The default font size in pixels."),"font-smoothing":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"antialiased","string","CSS font-smoothing property."),"foreground-color":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"rgb(240, 240, 240)","color","The foreground color for text with no other color attributes."),"hide-mouse-while-typing":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,null,"tristate","Whether to automatically hide the mouse cursor when typing. By default, autodetect whether the platform/OS handles this.\n\nNote: Some operating systems may override this setting and thus you might not be able to always disable it."),"home-keys-scroll":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","If true, Home/End controls the terminal scrollbar and Shift-Home/Shift-End are sent to the remote host. If false, then Home/End are sent to the remote host and Shift-Home/Shift-End scrolls."),keybindings:U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,null,"value",'A map of key sequence to key actions. Key sequences include zero or more modifier keys followed by a key code. Key codes can be decimal or hexadecimal numbers, or a key identifier. Key actions can be specified as a string to send to the host, or an action identifier. For a full explanation of the format, see https://goo.gl/LWRndr.\n\nSample keybindings:\n{\n  "Ctrl-Alt-K": "clearTerminal",\n  "Ctrl-Shift-L": "PASS",\n  "Ctrl-H": "\'Hello World\'"\n}'),"media-keys-are-fkeys":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","If true, convert media keys to their Fkey equivalent. If false, let the browser handle the keys."),"meta-sends-escape":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!0,"bool","Send an ESC prefix when pressing a key while holding the Meta key.\n\nFor example, when enabled, pressing Meta-K will send ^[k as if you typed Escape then k. When disabled, only k will be sent."),"mouse-right-click-paste":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!0,"bool",'Paste on right mouse button clicks.\n\nThis option is independent of the "mouse-paste-button" setting.\n\nNote: This will handle left & right handed mice correctly.'),"mouse-paste-button":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,null,[null,0,1,2,3,4,5,6],"Mouse paste button, or null to autodetect.\n\nFor autodetect, we'll use the middle mouse button for non-X11 platforms (including Chrome OS). On X11, we'll use the right mouse button (since the native window manager should paste via the middle mouse button).\n\n0 == left (primary) button.\n1 == middle (auxiliary) button.\n2 == right (secondary) button.\n\nThis option is independent of the setting for right-click paste.\n\nNote: This will handle left & right handed mice correctly."),"word-break-match-left":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,"[^\\s\\[\\](){}<>\"'\\^!@#$%&*,;:`]","string",'Regular expression to halt matching to the left (start) of a selection.\n\nNormally this is a character class to reject specific characters.\nWe allow "~" and "." by default as paths frequently start with those.'),"word-break-match-right":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,"[^\\s\\[\\](){}<>\"'\\^!@#$%&*,;:~.`]","string","Regular expression to halt matching to the right (end) of a selection.\n\nNormally this is a character class to reject specific characters."),"word-break-match-middle":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,"[^\\s\\[\\](){}<>\"'\\^]*","string","Regular expression to match all the characters in the middle.\n\nNormally this is a character class to reject specific characters.\n\nUsed to expand the selection surrounding the starting point."),"page-keys-scroll":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","If true, Page Up/Page Down controls the terminal scrollbar and Shift-Page Up/Shift-Page Down are sent to the remote host. If false, then Page Up/Page Down are sent to the remote host and Shift-Page Up/Shift-Page Down scrolls."),"pass-alt-number":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,null,"tristate","Whether Alt-1..9 is passed to the browser.\n\nThis is handy when running hterm in a browser tab, so that you don't lose Chrome's \"switch to tab\" keyboard accelerators. When not running in a tab it's better to send these keys to the host so they can be used in vim or emacs.\n\nIf true, Alt-1..9 will be handled by the browser. If false, Alt-1..9 will be sent to the host. If null, autodetect based on browser platform and window type."),"pass-ctrl-number":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,null,"tristate","Whether Ctrl-1..9 is passed to the browser.\n\nThis is handy when running hterm in a browser tab, so that you don't lose Chrome's \"switch to tab\" keyboard accelerators. When not running in a tab it's better to send these keys to the host so they can be used in vim or emacs.\n\nIf true, Ctrl-1..9 will be handled by the browser. If false, Ctrl-1..9 will be sent to the host. If null, autodetect based on browser platform and window type."),"pass-meta-number":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,null,"tristate","Whether Meta-1..9 is passed to the browser.\n\nThis is handy when running hterm in a browser tab, so that you don't lose Chrome's \"switch to tab\" keyboard accelerators. When not running in a tab it's better to send these keys to the host so they can be used in vim or emacs.\n\nIf true, Meta-1..9 will be handled by the browser. If false, Meta-1..9 will be sent to the host. If null, autodetect based on browser platform and window type."),"pass-meta-v":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!0,"bool","Whether Meta-V gets passed to host."),"paste-on-drop":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!0,"bool","If true, Drag and dropped text will paste into terminal.\nIf false, dropped text will be ignored."),"receive-encoding":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Encoding,"utf-8",["utf-8","raw"],"Set the expected encoding for data received from the host.\nIf the encodings do not match, visual bugs are likely to be observed.\n\nValid values are 'utf-8' and 'raw'."),"scroll-on-keystroke":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Scrolling,!0,"bool","Whether to scroll to the bottom on any keystroke."),"scroll-on-output":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Scrolling,!1,"bool","Whether to scroll to the bottom on terminal output."),"scrollbar-visible":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Scrolling,!0,"bool","The vertical scrollbar mode."),"scroll-wheel-may-send-arrow-keys":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Scrolling,!1,"bool","When using the alternative screen buffer, and DECCKM (Application Cursor Keys) is active, mouse wheel scroll events will emulate arrow keys.\n\nIt can be temporarily disabled by holding the Shift key.\n\nThis frequently comes up when using pagers (less) or reading man pages or text editors (vi/nano) or using screen/tmux."),"scroll-wheel-move-multiplier":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Scrolling,1,"int","The multiplier for scroll wheel events when measured in pixels.\n\nAlters how fast the page scrolls."),"send-encoding":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Encoding,"utf-8",["utf-8","raw"],"Set the encoding for data sent to host."),"terminal-encoding":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Encoding,"utf-8",["iso-2022","utf-8","utf-8-locked"],"The default terminal encoding (DOCS).\n\nISO-2022 enables character map translations (like graphics maps).\nUTF-8 disables support for those.\n\nThe locked variant means the encoding cannot be changed at runtime via terminal escape sequences.\n\nYou should stick with UTF-8 unless you notice broken rendering with legacy applications."),"shift-insert-paste":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!0,"bool","Whether Shift-Insert is used for pasting or is sent to the remote host."),"user-css":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"","url","URL of user stylesheet to include in the terminal document."),"user-css-text":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"","multiline-string","Custom CSS text for styling the terminal."),"allow-images-inline":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Extensions,null,"tristate","Whether to allow the remote host to display images in the terminal.\n\nBy default, we prompt until a choice is made.")},U.PreferenceManager.prototype=Object.create(K.PreferenceManager.prototype),U.PreferenceManager.constructor=U.PreferenceManager,U.PubSub=function(){this.observers_={}},U.PubSub.addBehavior=function(e){var t=new U.PubSub;for(var r in U.PubSub.prototype)e[r]=U.PubSub.prototype[r].bind(t)},U.PubSub.prototype.subscribe=function(e,t){e in this.observers_||(this.observers_[e]=[]),this.observers_[e].push(t)},U.PubSub.prototype.unsubscribe=function(e,t){var r=this.observers_[e];if(!r)throw"Invalid subject: "+e;var o=r.indexOf(t);if(o<0)throw"Not subscribed: "+e;r.splice(o,1)},U.PubSub.prototype.publish=function(e,t,r){var o=this.observers_[e];o&&(o=[].concat(o)),r&&(o?o.push(r):o=[r]),o&&setTimeout((function e(r){r<o.length-1&&setTimeout(e,0,r+1),o[r](t)}),0,0)},K.rtdep("lib.f","lib.wc","hterm.RowCol","hterm.Size","hterm.TextAttributes"),U.Screen=function(e){this.rowsArray=[],this.columnCount_=e||80,this.textAttributes=new U.TextAttributes(window.document),this.cursorPosition=new U.RowCol(0,0),this.cursorState_=new U.Screen.CursorState(this),this.cursorRowNode_=null,this.cursorNode_=null,this.cursorOffset_=null,this.wordBreakMatchLeft=null,this.wordBreakMatchRight=null,this.wordBreakMatchMiddle=null},U.Screen.prototype.getSize=function(){return new U.Size(this.columnCount_,this.rowsArray.length)},U.Screen.prototype.getHeight=function(){return this.rowsArray.length},U.Screen.prototype.getWidth=function(){return this.columnCount_},U.Screen.prototype.setColumnCount=function(e){this.columnCount_=e,this.cursorPosition.column>=e&&this.setCursorPosition(this.cursorPosition.row,e-1)},U.Screen.prototype.shiftRow=function(){return this.shiftRows(1)[0]},U.Screen.prototype.shiftRows=function(e){return this.rowsArray.splice(0,e)},U.Screen.prototype.unshiftRow=function(e){this.rowsArray.splice(0,0,e)},U.Screen.prototype.unshiftRows=function(e){this.rowsArray.unshift.apply(this.rowsArray,e)},U.Screen.prototype.popRow=function(){return this.popRows(1)[0]},U.Screen.prototype.popRows=function(e){return this.rowsArray.splice(this.rowsArray.length-e,e)},U.Screen.prototype.pushRow=function(e){this.rowsArray.push(e)},U.Screen.prototype.pushRows=function(e){e.push.apply(this.rowsArray,e)},U.Screen.prototype.insertRow=function(e,t){this.rowsArray.splice(e,0,t)},U.Screen.prototype.insertRows=function(e,t){for(var r=0;r<t.length;r++)this.rowsArray.splice(e+r,0,t[r])},U.Screen.prototype.removeRow=function(e){return this.rowsArray.splice(e,1)[0]},U.Screen.prototype.removeRows=function(e,t){return this.rowsArray.splice(e,t)},U.Screen.prototype.invalidateCursorPosition=function(){this.cursorPosition.move(0,0),this.cursorRowNode_=null,this.cursorNode_=null,this.cursorOffset_=null},U.Screen.prototype.clearCursorRow=function(){var e;this.cursorRowNode_.innerHTML="",this.cursorRowNode_.removeAttribute("line-overflow"),this.cursorOffset_=0,this.cursorPosition.column=0,this.cursorPosition.overflow=!1,e=this.textAttributes.isDefault()?"":K.f.getWhitespace(this.columnCount_);var t=this.textAttributes.inverse;this.textAttributes.inverse=!1,this.textAttributes.syncColors();var r=this.textAttributes.createContainer(e);this.cursorRowNode_.appendChild(r),this.cursorNode_=r,this.textAttributes.inverse=t,this.textAttributes.syncColors()},U.Screen.prototype.commitLineOverflow=function(){this.cursorRowNode_.setAttribute("line-overflow",!0)},U.Screen.prototype.setCursorPosition=function(e,t){if(this.rowsArray.length){e>=this.rowsArray.length?(console.error("Row out of bounds: "+e),e=this.rowsArray.length-1):e<0&&(console.error("Row out of bounds: "+e),e=0),t>=this.columnCount_?(console.error("Column out of bounds: "+t),t=this.columnCount_-1):t<0&&(console.error("Column out of bounds: "+t),t=0),this.cursorPosition.overflow=!1;var r=this.rowsArray[e],o=r.firstChild;o||(o=r.ownerDocument.createTextNode(""),r.appendChild(o));var i=0;for(r==this.cursorRowNode_?t>=this.cursorPosition.column-this.cursorOffset_&&(o=this.cursorNode_,i=this.cursorPosition.column-this.cursorOffset_):this.cursorRowNode_=r,this.cursorPosition.move(e,t);o;){var n=t-i,s=U.TextAttributes.nodeWidth(o);if(!o.nextSibling||s>n)return this.cursorNode_=o,void(this.cursorOffset_=n);i+=s,o=o.nextSibling}}else console.warn("Attempt to set cursor position on empty screen.")},U.Screen.prototype.syncSelectionCaret=function(e){try{e.collapse(this.cursorNode_,this.cursorOffset_)}catch(e){}},U.Screen.prototype.splitNode_=function(e,t){var r=e.cloneNode(!1),o=e.textContent;e.textContent=U.TextAttributes.nodeSubstr(e,0,t),r.textContent=K.wc.substr(o,t),r.textContent&&e.parentNode.insertBefore(r,e.nextSibling),e.textContent||e.parentNode.removeChild(e)},U.Screen.prototype.maybeClipCurrentRow=function(){var e=U.TextAttributes.nodeWidth(this.cursorRowNode_);if(e<=this.columnCount_)this.cursorPosition.column>=this.columnCount_&&(this.setCursorPosition(this.cursorPosition.row,this.columnCount_-1),this.cursorPosition.overflow=!0);else{var t=this.cursorPosition.column;this.setCursorPosition(this.cursorPosition.row,this.columnCount_-1),e=U.TextAttributes.nodeWidth(this.cursorNode_),this.cursorOffset_<e-1&&(this.cursorNode_.textContent=U.TextAttributes.nodeSubstr(this.cursorNode_,0,this.cursorOffset_+1));for(var r=this.cursorRowNode_,o=this.cursorNode_.nextSibling;o;)r.removeChild(o),o=this.cursorNode_.nextSibling;t<this.columnCount_?this.setCursorPosition(this.cursorPosition.row,t):this.cursorPosition.overflow=!0}},U.Screen.prototype.insertString=function(e,t){var r=this.cursorNode_,o=r.textContent;this.cursorRowNode_.removeAttribute("line-overflow"),void 0===t&&(t=K.wc.strWidth(e)),this.cursorPosition.column+=t;var i=this.cursorOffset_,n=U.TextAttributes.nodeWidth(r)-i;if(n<0){var s=K.f.getWhitespace(-n);if(this.textAttributes.underline||this.textAttributes.strikethrough||this.textAttributes.background||this.textAttributes.wcNode||!this.textAttributes.asciiNode||null!=this.textAttributes.tileData)if(r.nodeType!=Node.TEXT_NODE&&(r.wcNode||!r.asciiNode||r.tileNode||r.style.textDecoration||r.style.textDecorationStyle||r.style.textDecorationLine||r.style.backgroundColor)){var a=r.ownerDocument.createTextNode(s);this.cursorRowNode_.insertBefore(a,r.nextSibling),this.cursorNode_=r=a,this.cursorOffset_=i=-n,o=s}else r.textContent=o+=s;else e=s+e;n=0}if(this.textAttributes.matchesContainer(r))return r.textContent=0==n?o+e:0==i?e+o:U.TextAttributes.nodeSubstr(r,0,i)+e+U.TextAttributes.nodeSubstr(r,i),void(this.cursorOffset_+=t);if(0==i){var l=r.previousSibling;if(l&&this.textAttributes.matchesContainer(l))return l.textContent+=e,this.cursorNode_=l,void(this.cursorOffset_=K.wc.strWidth(l.textContent));var c=this.textAttributes.createContainer(e);return this.cursorRowNode_.insertBefore(c,r),this.cursorNode_=c,void(this.cursorOffset_=t)}if(0==n){var u=r.nextSibling;if(u&&this.textAttributes.matchesContainer(u))return u.textContent=e+u.textContent,this.cursorNode_=u,void(this.cursorOffset_=K.wc.strWidth(e));c=this.textAttributes.createContainer(e);return this.cursorRowNode_.insertBefore(c,u),this.cursorNode_=c,void(this.cursorOffset_=U.TextAttributes.nodeWidth(c))}this.splitNode_(r,i);c=this.textAttributes.createContainer(e);this.cursorRowNode_.insertBefore(c,r.nextSibling),this.cursorNode_=c,this.cursorOffset_=t},U.Screen.prototype.overwriteString=function(e,t){var r=this.columnCount_-this.cursorPosition.column;return r?(void 0===t&&(t=K.wc.strWidth(e)),this.textAttributes.matchesContainer(this.cursorNode_)&&this.cursorNode_.textContent.substr(this.cursorOffset_)==e?(this.cursorOffset_+=t,void(this.cursorPosition.column+=t)):(this.deleteChars(Math.min(t,r)),void this.insertString(e,t))):[e]},U.Screen.prototype.deleteChars=function(e){var t=this.cursorNode_,r=this.cursorOffset_,o=this.cursorPosition.column;if(!(e=Math.min(e,this.columnCount_-o)))return 0;for(var i,n,s=e;t&&e;){if(e<0){console.error(`Deleting ${s} chars went negative: ${e}`);break}if(i=U.TextAttributes.nodeWidth(t),t.textContent=U.TextAttributes.nodeSubstr(t,0,r)+U.TextAttributes.nodeSubstr(t,r+e),n=U.TextAttributes.nodeWidth(t),t.wcNode&&r<i&&(n&&i==n||!n&&1==r)){var a=this.textAttributes.createContainer(" ");t.parentNode.insertBefore(a,r?t:t.nextSibling),t.textContent="",n=0,e-=1}else e-=i-n;var l=t.nextSibling;0==n&&t!=this.cursorNode_&&t.parentNode.removeChild(t),t=l,r=0}if(this.cursorNode_.nodeType!=Node.TEXT_NODE&&!this.cursorNode_.textContent){var c=this.cursorNode_;if(c.previousSibling)this.cursorNode_=c.previousSibling,this.cursorOffset_=U.TextAttributes.nodeWidth(c.previousSibling);else if(c.nextSibling)this.cursorNode_=c.nextSibling,this.cursorOffset_=0;else{var u=this.cursorRowNode_.ownerDocument.createTextNode("");this.cursorRowNode_.appendChild(u),this.cursorNode_=u,this.cursorOffset_=0}this.cursorRowNode_.removeChild(c)}return s},U.Screen.prototype.getLineStartRow_=function(e){for(;e.previousSibling&&e.previousSibling.hasAttribute("line-overflow");)e=e.previousSibling;return e},U.Screen.prototype.getLineText_=function(e){for(var t="";e&&(t+=e.textContent,e.hasAttribute("line-overflow"));)e=e.nextSibling;return t},U.Screen.prototype.getXRowAncestor_=function(e){for(;e&&"X-ROW"!==e.nodeName;)e=e.parentNode;return e},U.Screen.prototype.getPositionWithOverflow_=function(e,t,r){if(!t)return-1;var o=this.getXRowAncestor_(t);if(!o)return-1;for(var i=0;o!=e;){if(i+=U.TextAttributes.nodeWidth(e),!e.hasAttribute("line-overflow")||!e.nextSibling)return-1;e=e.nextSibling}return i+this.getPositionWithinRow_(e,t,r)},U.Screen.prototype.getPositionWithinRow_=function(e,t,r){if(t.parentNode!=e)return null==t.parentNode?-1:this.getPositionWithinRow_(t.parentNode,t,r)+this.getPositionWithinRow_(e,t.parentNode,0);for(var o=0,i=0;i<e.childNodes.length;i++){var n=e.childNodes[i];if(n==t)return o+r;o+=U.TextAttributes.nodeWidth(n)}return-1},U.Screen.prototype.getNodeAndOffsetWithOverflow_=function(e,t){for(;e&&t>U.TextAttributes.nodeWidth(e);){if(!e.hasAttribute("line-overflow")||!e.nextSibling)return-1;t-=U.TextAttributes.nodeWidth(e),e=e.nextSibling}return this.getNodeAndOffsetWithinRow_(e,t)},U.Screen.prototype.getNodeAndOffsetWithinRow_=function(e,t){for(var r=0;r<e.childNodes.length;r++){var o=e.childNodes[r],i=U.TextAttributes.nodeWidth(o);if(t<=i)return"SPAN"===o.nodeName?this.getNodeAndOffsetWithinRow_(o,t):[o,t];t-=i}return null},U.Screen.prototype.setRange_=function(e,t,r,o){var i=this.getNodeAndOffsetWithOverflow_(e,t);if(null!=i){var n=this.getNodeAndOffsetWithOverflow_(e,r);null!=n&&(o.setStart(i[0],i[1]),o.setEnd(n[0],n[1]))}},U.Screen.prototype.expandSelectionWithWordBreakMatches_=function(e,t,r,o){if(!e)return;var i=e.getRangeAt(0);if(!i||i.toString().match(/\s/))return;const n=this.getXRowAncestor_(i.startContainer);if(!n)return;const s=this.getLineStartRow_(n);if(s){var a=this.getPositionWithOverflow_(s,i.startContainer,i.startOffset);if(-1!=a){var l=this.getPositionWithOverflow_(s,i.endContainer,i.endOffset);if(-1!=l){var c=this.getLineText_(s),u=K.wc.substring(c,0,l),h=new RegExp(t+o+"$"),d=u.search(h);if(!(-1==d||d>a)){var p=K.wc.substring(c,a,K.wc.strWidth(c)),f=new RegExp("^"+o+r),g=p.match(f);if(g){var m=a+K.wc.strWidth(g[0]);-1==m||m<l||(this.setRange_(s,d,m,i),e.addRange(i))}}}}}},U.Screen.prototype.expandSelection=function(e){this.expandSelectionWithWordBreakMatches_(e,this.wordBreakMatchLeft,this.wordBreakMatchRight,this.wordBreakMatchMiddle)},U.Screen.prototype.expandSelectionForUrl=function(e){this.expandSelectionWithWordBreakMatches_(e,"[^\\s\\[\\](){}<>\"'\\^!@#$%&*,;:`]","[^\\s\\[\\](){}<>\"'\\^!@#$%&*,;:~.`]","[^\\s\\[\\](){}<>\"'\\^]*")},U.Screen.prototype.saveCursorAndState=function(e){this.cursorState_.save(e)},U.Screen.prototype.restoreCursorAndState=function(e){this.cursorState_.restore(e)},U.Screen.CursorState=function(e){this.screen_=e,this.cursor=null,this.textAttributes=null,this.GL=this.GR=this.G0=this.G1=this.G2=this.G3=null},U.Screen.CursorState.prototype.save=function(e){this.cursor=e.terminal.saveCursor(),this.textAttributes=this.screen_.textAttributes.clone(),this.GL=e.GL,this.GR=e.GR,this.G0=e.G0,this.G1=e.G1,this.G2=e.G2,this.G3=e.G3},U.Screen.CursorState.prototype.restore=function(e){e.terminal.restoreCursor(this.cursor);const t=this.textAttributes.clone();t.colorPalette=this.screen_.textAttributes.colorPalette,t.syncColors(),this.screen_.textAttributes=t,e.GL=this.GL,e.GR=this.GR,e.G0=this.G0,e.G1=this.G1,e.G2=this.G2,e.G3=this.G3},K.rtdep("lib.f","hterm.PubSub","hterm.Size"),U.ScrollPort=function(e){U.PubSub.addBehavior(this),this.rowProvider_=e,this.characterSize=new U.Size(10,10),this.ruler_=null,this.selection=new U.ScrollPort.Selection(this),this.currentRowNodeCache_=null,this.previousRowNodeCache_={},this.lastScreenWidth_=null,this.lastScreenHeight_=null,this.selectionEnabled_=!0,this.lastRowCount_=0,this.scrollWheelMultiplier_=1,this.lastTouch_={},this.isScrolledEnd=!0,this.currentScrollbarWidthPx=16,this.ctrlVPaste=!1,this.pasteOnDrop=!0,this.div_=null,this.document_=null,this.timeouts_={},this.observers_={},this.DEBUG_=!1},U.ScrollPort.Selection=function(e){this.scrollPort_=e,this.startRow=null,this.endRow=null,this.isMultiline=null,this.isCollapsed=null},U.ScrollPort.Selection.prototype.findFirstChild=function(e,t){for(var r=e.firstChild;r;){if(-1!=t.indexOf(r))return r;if(r.childNodes.length){var o=this.findFirstChild(r,t);if(o)return o}r=r.nextSibling}return null},U.ScrollPort.Selection.prototype.sync=function(){var e=this;function t(){e.startRow=n,e.startNode=o.anchorNode,e.startOffset=o.anchorOffset,e.endRow=s,e.endNode=o.focusNode,e.endOffset=o.focusOffset}function r(){e.startRow=s,e.startNode=o.focusNode,e.startOffset=o.focusOffset,e.endRow=n,e.endNode=o.anchorNode,e.endOffset=o.anchorOffset}var o=this.scrollPort_.getDocument().getSelection();if(this.startRow=null,this.endRow=null,this.isMultiline=null,this.isCollapsed=!o||o.isCollapsed,!o)return;const i=this.scrollPort_.accessibilityReader_&&this.scrollPort_.accessibilityReader_.accessibilityEnabled;if(!this.isCollapsed||i){for(var n=o.anchorNode;n&&"X-ROW"!=n.nodeName;)n=n.parentNode;if(n){for(var s=o.focusNode;s&&"X-ROW"!=s.nodeName;)s=s.parentNode;if(s){if(n.rowIndex<s.rowIndex)t();else if(n.rowIndex>s.rowIndex)r();else if(o.focusNode==o.anchorNode)o.anchorOffset<o.focusOffset?t():r();else{var a=this.findFirstChild(n,[o.anchorNode,o.focusNode]);if(!a)throw new Error("Unexpected error syncing selection.");a==o.anchorNode?t():r()}this.isMultiline=n.rowIndex!=s.rowIndex}}}},U.ScrollPort.prototype.decorate=function(e){this.div_=e,this.iframe_=e.ownerDocument.createElement("iframe"),this.iframe_.style.cssText="border: 0;height: 100%;position: absolute;width: 100%","mozInnerScreenX"in window&&(this.iframe_.src="#"),e.appendChild(this.iframe_),this.iframe_.contentWindow.addEventListener("resize",this.onResize_.bind(this));var t=this.document_=this.iframe_.contentDocument;t.body.style.cssText="margin: 0px;padding: 0px;height: 100%;width: 100%;overflow: hidden;cursor: var(--hterm-mouse-cursor-style);-webkit-user-select: none;-moz-user-select: none;";const r=t.createElement("meta");r.setAttribute("charset","utf-8"),t.head.appendChild(r),this.DEBUG_&&(this.document_.body.style.paddingTop=this.document_.body.style.paddingBottom="calc(var(--hterm-charsize-height) * 3)");var o=t.createElement("style");o.textContent="\n      x-row {\n        display: block;\n        height: var(--hterm-charsize-height);\n        line-height: var(--hterm-charsize-height);\n      }\n\n      x-screen x-row {\n        visibility: hidden;\n      }\n\n      #hterm\\:top-fold-for-row-selection ~ x-row {\n        visibility: visible;\n      }\n\n      #hterm\\:bottom-fold-for-row-selection ~ x-row {\n        visibility: hidden;\n      }",t.head.appendChild(o),this.userCssLink_=t.createElement("link"),this.userCssLink_.setAttribute("rel","stylesheet"),this.userCssText_=t.createElement("style"),t.head.appendChild(this.userCssText_),this.screen_=t.createElement("x-screen"),this.screen_.setAttribute("contenteditable","true"),this.screen_.setAttribute("spellcheck","false"),this.screen_.setAttribute("autocomplete","off"),this.screen_.setAttribute("autocorrect","off"),this.screen_.setAttribute("autocapitalize","none"),this.screen_.setAttribute("role","log"),this.screen_.setAttribute("aria-live","off"),this.screen_.setAttribute("aria-roledescription","Terminal"),this.screen_.setAttribute("aria-readonly","true"),this.screen_.setAttribute("tabindex","-1"),this.screen_.style.cssText="caret-color: transparent;display: block;font-family: monospace;font-size: 15px;font-variant-ligatures: none;height: 100%;overflow-y: scroll; overflow-x: hidden;white-space: pre;width: 100%;outline: none !important",t.body.appendChild(this.screen_),this.screen_.addEventListener("scroll",this.onScroll_.bind(this)),this.screen_.addEventListener("wheel",this.onScrollWheel_.bind(this)),this.screen_.addEventListener("touchstart",this.onTouch_.bind(this)),this.screen_.addEventListener("touchmove",this.onTouch_.bind(this)),this.screen_.addEventListener("touchend",this.onTouch_.bind(this)),this.screen_.addEventListener("touchcancel",this.onTouch_.bind(this)),this.screen_.addEventListener("copy",this.onCopy_.bind(this)),this.screen_.addEventListener("paste",this.onPaste_.bind(this)),this.screen_.addEventListener("drop",this.onDragAndDrop_.bind(this)),t.body.addEventListener("keydown",this.onBodyKeyDown_.bind(this));const i="right: 0px;\n                             position:fixed;\n                             z-index: 1;\n                             text-align: center;\n                             cursor: pointer;\n                             height: 30px;\n                             width: 110px;\n                             line-height: 30px;\n                             border-width: 1px;\n                             border-style: solid;\n                             font-weight: bold;";this.scrollUpButton_=this.document_.createElement("div"),this.scrollUpButton_.id="hterm:a11y:page-up",this.scrollUpButton_.innerText=U.msg("BUTTON_PAGE_UP",[],"Page up"),this.scrollUpButton_.setAttribute("role","button"),this.scrollUpButton_.style.cssText=i,this.scrollUpButton_.style.top="-32px",this.scrollUpButton_.addEventListener("click",this.scrollPageUp.bind(this)),this.scrollDownButton_=this.document_.createElement("div"),this.scrollDownButton_.id="hterm:a11y:page-down",this.scrollDownButton_.innerText=U.msg("BUTTON_PAGE_DOWN",[],"Page down"),this.scrollDownButton_.setAttribute("role","button"),this.scrollDownButton_.style.cssText=i,this.scrollDownButton_.style.bottom="-32px",this.scrollDownButton_.addEventListener("click",this.scrollPageDown.bind(this)),this.allowScrollButtonsToDisplay_=!1,setTimeout(()=>{this.allowScrollButtonsToDisplay_=!0},500),this.document_.addEventListener("selectionchange",()=>{if(this.selection.sync(),!this.allowScrollButtonsToDisplay_)return;const e=this.accessibilityReader_&&this.accessibilityReader_.accessibilityEnabled,t=this.document_.getSelection();let r;t.anchorNode&&t.anchorNode.parentElement&&(r=t.anchorNode.parentElement),e&&r==this.scrollUpButton_?this.scrollUpButton_.style.top="0px":this.scrollUpButton_.style.top="-32px",e&&r==this.scrollDownButton_?this.scrollDownButton_.style.bottom="0px":this.scrollDownButton_.style.bottom="-32px"}),this.screen_.appendChild(this.scrollUpButton_),this.rowNodes_=t.createElement("div"),this.rowNodes_.id="hterm:row-nodes",this.rowNodes_.style.cssText="display: block;position: fixed;overflow: hidden;-webkit-user-select: text;-moz-user-select: text;",this.screen_.appendChild(this.rowNodes_),this.screen_.appendChild(this.scrollDownButton_),this.topSelectBag_=t.createElement("x-select-bag"),this.topSelectBag_.style.cssText="display: block;overflow: hidden;height: var(--hterm-charsize-height);white-space: pre;",this.bottomSelectBag_=this.topSelectBag_.cloneNode(),this.topFold_=t.createElement("x-fold"),this.topFold_.id="hterm:top-fold-for-row-selection",this.topFold_.style.cssText="display: block;",this.rowNodes_.appendChild(this.topFold_),this.bottomFold_=this.topFold_.cloneNode(),this.bottomFold_.id="hterm:bottom-fold-for-row-selection",this.rowNodes_.appendChild(this.bottomFold_),this.scrollArea_=t.createElement("div"),this.scrollArea_.id="hterm:scrollarea",this.scrollArea_.style.cssText="visibility: hidden",this.screen_.appendChild(this.scrollArea_);var n="http://www.w3.org/2000/svg";this.svg_=this.div_.ownerDocument.createElementNS(n,"svg"),this.svg_.id="hterm:zoom-detector",this.svg_.setAttribute("xmlns",n),this.svg_.setAttribute("version","1.1"),this.svg_.style.cssText="position: absolute;top: 0;left: 0;visibility: hidden",this.pasteTarget_=t.createElement("textarea"),this.pasteTarget_.id="hterm:ctrl-v-paste-target",this.pasteTarget_.setAttribute("tabindex","-1"),this.pasteTarget_.setAttribute("aria-hidden","true"),this.pasteTarget_.style.cssText="position: absolute;height: 1px;width: 1px;left: 0px; bottom: 0px;opacity: 0",this.pasteTarget_.contentEditable=!0,this.screen_.appendChild(this.pasteTarget_),this.pasteTarget_.addEventListener("textInput",this.handlePasteTargetTextInput_.bind(this)),this.resize()},U.ScrollPort.prototype.setAccessibilityReader=function(e){this.accessibilityReader_=e},U.ScrollPort.prototype.scrollPageUp=function(){if(0==this.getTopRowIndex())return;const e=this.getTopRowIndex();this.scrollRowToTop(e-this.visibleRowCount+1),this.assertiveAnnounce_()},U.ScrollPort.prototype.scrollPageDown=function(){if(this.isScrolledEnd)return;const e=this.getTopRowIndex();this.scrollRowToTop(e+this.visibleRowCount-1),this.assertiveAnnounce_()},U.ScrollPort.prototype.setFontFamily=function(e,t){this.screen_.style.fontFamily=e,this.screen_.style.webkitFontSmoothing=t||"",this.syncCharacterSize()},U.ScrollPort.prototype.getFontFamily=function(){return this.screen_.style.fontFamily},U.ScrollPort.prototype.setUserCssUrl=function(e){e?(this.userCssLink_.setAttribute("href",e),this.userCssLink_.parentNode||this.document_.head.appendChild(this.userCssLink_)):this.userCssLink_.parentNode&&this.document_.head.removeChild(this.userCssLink_)},U.ScrollPort.prototype.setUserCssText=function(e){this.userCssText_.textContent=e},U.ScrollPort.prototype.focus=function(){this.iframe_.focus(),this.screen_.focus(),this.publish("focus")},U.ScrollPort.prototype.getForegroundColor=function(){return this.screen_.style.color},U.ScrollPort.prototype.setForegroundColor=function(e){this.screen_.style.color=e,this.scrollUpButton_.style.backgroundColor=e,this.scrollDownButton_.style.backgroundColor=e},U.ScrollPort.prototype.getBackgroundColor=function(){return this.screen_.style.backgroundColor},U.ScrollPort.prototype.setBackgroundColor=function(e){this.screen_.style.backgroundColor=e,this.scrollUpButton_.style.color=e,this.scrollDownButton_.style.color=e},U.ScrollPort.prototype.setBackgroundImage=function(e){this.screen_.style.backgroundImage=e},U.ScrollPort.prototype.setBackgroundSize=function(e){this.screen_.style.backgroundSize=e},U.ScrollPort.prototype.setBackgroundPosition=function(e){this.screen_.style.backgroundPosition=e},U.ScrollPort.prototype.setCtrlVPaste=function(e){this.ctrlVPaste=e},U.ScrollPort.prototype.setPasteOnDrop=function(e){this.pasteOnDrop=e},U.ScrollPort.prototype.getScreenSize=function(){var e=U.getClientSize(this.screen_);return{height:e.height,width:e.width-this.currentScrollbarWidthPx}},U.ScrollPort.prototype.getScreenWidth=function(){return this.getScreenSize().width},U.ScrollPort.prototype.getScreenHeight=function(){return this.getScreenSize().height},U.ScrollPort.prototype.getDocument=function(){return this.document_},U.ScrollPort.prototype.getScreenNode=function(){return this.screen_},U.ScrollPort.prototype.resetCache=function(){this.currentRowNodeCache_=null,this.previousRowNodeCache_={}},U.ScrollPort.prototype.setRowProvider=function(e){this.resetCache(),this.rowProvider_=e,this.scheduleRedraw()},U.ScrollPort.prototype.invalidate=function(){for(var e=this.topFold_.nextSibling;e!=this.bottomFold_;){var t=e.nextSibling;e.parentElement.removeChild(e),e=t}this.previousRowNodeCache_=null;var r=this.getTopRowIndex(),o=this.getBottomRowIndex(r);this.drawVisibleRows_(r,o)},U.ScrollPort.prototype.scheduleInvalidate=function(){if(!this.timeouts_.invalidate){var e=this;this.timeouts_.invalidate=setTimeout((function(){delete e.timeouts_.invalidate,e.invalidate()}),0)}},U.ScrollPort.prototype.setFontSize=function(e){this.screen_.style.fontSize=e+"px",this.syncCharacterSize()},U.ScrollPort.prototype.getFontSize=function(){return parseInt(this.screen_.style.fontSize)},U.ScrollPort.prototype.measureCharacterSize=function(e){this.ruler_||(this.ruler_=this.document_.createElement("div"),this.ruler_.id="hterm:ruler-character-size",this.ruler_.style.cssText="position: absolute;top: 0;left: 0;visibility: hidden;height: auto !important;width: auto !important;",this.rulerSpan_=this.document_.createElement("span"),this.rulerSpan_.id="hterm:ruler-span-workaround",this.rulerSpan_.innerHTML=("X".repeat(100)+"\r").repeat(100),this.ruler_.appendChild(this.rulerSpan_),this.rulerBaseline_=this.document_.createElement("span"),this.rulerSpan_.id="hterm:ruler-baseline",this.rulerBaseline_.style.fontSize="0px",this.rulerBaseline_.textContent="X"),this.rulerSpan_.style.fontWeight=e||"",this.rowNodes_.appendChild(this.ruler_);var t=U.getClientSize(this.rulerSpan_),r=new U.Size(t.width/100,t.height/100);return this.ruler_.appendChild(this.rulerBaseline_),r.baseline=this.rulerBaseline_.offsetTop,this.ruler_.removeChild(this.rulerBaseline_),this.rowNodes_.removeChild(this.ruler_),this.div_.ownerDocument.body.appendChild(this.svg_),r.zoomFactor=this.svg_.currentScale,this.div_.ownerDocument.body.removeChild(this.svg_),r},U.ScrollPort.prototype.syncCharacterSize=function(){this.characterSize=this.measureCharacterSize(),this.resize()},U.ScrollPort.prototype.resize=function(){this.currentScrollbarWidthPx=U.getClientWidth(this.screen_)-this.screen_.clientWidth,this.syncScrollHeight(),this.syncRowNodesDimensions_();var e=this;this.publish("resize",{scrollPort:this},(function(){e.scrollRowToBottom(e.rowProvider_.getRowCount()),e.scheduleRedraw()}))},U.ScrollPort.prototype.assertiveAnnounce_=function(){if(!this.accessibilityReader_)return;const e=this.getTopRowIndex(),t=this.getBottomRowIndex(e);let r=100*e/Math.max(1,this.rowProvider_.getRowCount()-this.visibleRowCount);r=Math.min(100,Math.round(r));let o=U.msg("ANNOUNCE_CURRENT_SCREEN_HEADER",[r],"$1% scrolled,");o+="\n";for(let r=e;r<=t;++r){o+=this.fetchRowNode_(r).textContent+"\n"}this.accessibilityReader_.assertiveAnnounce(o)},U.ScrollPort.prototype.syncRowNodesDimensions_=function(){var e=this.getScreenSize();this.lastScreenWidth_=e.width,this.lastScreenHeight_=e.height,this.visibleRowCount=K.f.smartFloorDivide(e.height,this.characterSize.height);var t=this.visibleRowCount*this.characterSize.height;this.visibleRowTopMargin=0,this.visibleRowBottomMargin=e.height-t,this.topFold_.style.marginBottom=this.visibleRowTopMargin+"px";for(var r=0,o=this.topFold_.previousSibling;o;)r+=U.getClientHeight(o),o=o.previousSibling;this.rowNodes_.style.width=e.width+"px",this.rowNodes_.style.height=t+r+"px",this.rowNodes_.style.left=this.screen_.offsetLeft+"px",this.rowNodes_.style.top=this.screen_.offsetTop-r+"px"},U.ScrollPort.prototype.syncScrollHeight=function(){this.lastRowCount_=this.rowProvider_.getRowCount(),this.scrollArea_.style.height=this.characterSize.height*this.lastRowCount_+this.visibleRowTopMargin+this.visibleRowBottomMargin+"px"},U.ScrollPort.prototype.scheduleRedraw=function(){if(!this.timeouts_.redraw){var e=this;this.timeouts_.redraw=setTimeout((function(){delete e.timeouts_.redraw,e.redraw_()}),0)}},U.ScrollPort.prototype.updateScrollButtonState_=function(){const e=(e,t)=>{e.setAttribute("aria-disabled",t?"true":"false"),e.style.opacity=t?.5:1};e(this.scrollUpButton_,0==this.getTopRowIndex()),e(this.scrollDownButton_,this.isScrolledEnd)},U.ScrollPort.prototype.redraw_=function(){this.resetSelectBags_(),this.selection.sync(),this.syncScrollHeight(),this.currentRowNodeCache_={};var e=this.getTopRowIndex(),t=this.getBottomRowIndex(e);this.drawTopFold_(e),this.drawBottomFold_(t),this.drawVisibleRows_(e,t),this.syncRowNodesDimensions_(),this.previousRowNodeCache_=this.currentRowNodeCache_,this.currentRowNodeCache_=null,this.isScrolledEnd=this.getTopRowIndex()+this.visibleRowCount>=this.lastRowCount_,this.updateScrollButtonState_()},U.ScrollPort.prototype.drawTopFold_=function(e){if(!this.selection.startRow||this.selection.startRow.rowIndex>=e)this.rowNodes_.firstChild!=this.topFold_&&this.rowNodes_.insertBefore(this.topFold_,this.rowNodes_.firstChild);else{if(!this.selection.isMultiline||this.selection.endRow.rowIndex>=e)this.selection.startRow.nextSibling!=this.topFold_&&this.rowNodes_.insertBefore(this.topFold_,this.selection.startRow.nextSibling);else for(this.selection.endRow.nextSibling!=this.topFold_&&this.rowNodes_.insertBefore(this.topFold_,this.selection.endRow.nextSibling);this.selection.startRow.nextSibling!=this.selection.endRow;)this.rowNodes_.removeChild(this.selection.startRow.nextSibling);for(;this.rowNodes_.firstChild!=this.selection.startRow;)this.rowNodes_.removeChild(this.rowNodes_.firstChild)}},U.ScrollPort.prototype.drawBottomFold_=function(e){if(!this.selection.endRow||this.selection.endRow.rowIndex<=e)this.rowNodes_.lastChild!=this.bottomFold_&&this.rowNodes_.appendChild(this.bottomFold_);else{if(!this.selection.isMultiline||this.selection.startRow.rowIndex<=e)this.bottomFold_.nextSibling!=this.selection.endRow&&this.rowNodes_.insertBefore(this.bottomFold_,this.selection.endRow);else for(this.bottomFold_.nextSibling!=this.selection.startRow&&this.rowNodes_.insertBefore(this.bottomFold_,this.selection.startRow);this.selection.startRow.nextSibling!=this.selection.endRow;)this.rowNodes_.removeChild(this.selection.startRow.nextSibling);for(;this.rowNodes_.lastChild!=this.selection.endRow;)this.rowNodes_.removeChild(this.rowNodes_.lastChild)}},U.ScrollPort.prototype.drawVisibleRows_=function(e,t){var r=this;function o(e,t){for(;e!=t;){if(!e)throw"Did not encounter target node";if(e==r.bottomFold_)throw"Encountered bottom fold before target node";var o=e;e=e.nextSibling,o.parentNode.removeChild(o)}}for(var i=this.selection.startRow,n=this.selection.endRow,s=this.bottomFold_,a=this.topFold_.nextSibling,l=Math.min(this.visibleRowCount,this.rowProvider_.getRowCount()),c=0;c<l;c++){var u=e+c;if(a!=s)if(a.rowIndex!=u)if(i&&i.rowIndex==u)o(a,i),a=i.nextSibling;else if(n&&n.rowIndex==u)o(a,n),a=n.nextSibling;else if(a!=i&&a!=n){if(!(h=this.fetchRowNode_(u))){console.log("Couldn't fetch row index: "+u);break}a!=h?(this.rowNodes_.insertBefore(h,a),h.nextSibling,this.rowNodes_.removeChild(a),a=h.nextSibling):a=a.nextSibling}else{if(!(h=this.fetchRowNode_(u))){console.log("Couldn't fetch row index: "+u);break}this.rowNodes_.insertBefore(h,a)}else a=a.nextSibling;else{var h;if(!(h=this.fetchRowNode_(u))){console.log("Couldn't fetch row index: "+u);break}this.rowNodes_.insertBefore(h,a)}}a!=this.bottomFold_&&o(a,s)},U.ScrollPort.prototype.resetSelectBags_=function(){this.topSelectBag_.parentNode&&(this.topSelectBag_.textContent="",this.topSelectBag_.parentNode.removeChild(this.topSelectBag_)),this.bottomSelectBag_.parentNode&&(this.bottomSelectBag_.textContent="",this.bottomSelectBag_.parentNode.removeChild(this.bottomSelectBag_))},U.ScrollPort.prototype.cacheRowNode_=function(e){this.currentRowNodeCache_[e.rowIndex]=e},U.ScrollPort.prototype.fetchRowNode_=function(e){var t;return t=this.previousRowNodeCache_&&e in this.previousRowNodeCache_?this.previousRowNodeCache_[e]:this.rowProvider_.getRowNode(e),this.currentRowNodeCache_&&this.cacheRowNode_(t),t},U.ScrollPort.prototype.selectAll=function(){var e;if(0!=this.topFold_.nextSibling.rowIndex){for(;this.topFold_.previousSibling;)this.rowNodes_.removeChild(this.topFold_.previousSibling);e=this.fetchRowNode_(0),this.rowNodes_.insertBefore(e,this.topFold_),this.syncRowNodesDimensions_()}else e=this.topFold_.nextSibling;var t,r=this.rowProvider_.getRowCount()-1;if(this.bottomFold_.previousSibling.rowIndex!=r){for(;this.bottomFold_.nextSibling;)this.rowNodes_.removeChild(this.bottomFold_.nextSibling);t=this.fetchRowNode_(r),this.rowNodes_.appendChild(t)}else t=this.bottomFold_.previousSibling.rowIndex;var o=this.document_.getSelection();o.collapse(e,0),o.extend(t,t.childNodes.length),this.selection.sync()},U.ScrollPort.prototype.getScrollMax_=function(e){return U.getClientHeight(this.scrollArea_)+this.visibleRowTopMargin+this.visibleRowBottomMargin-U.getClientHeight(this.screen_)},U.ScrollPort.prototype.scrollRowToTop=function(e){this.syncScrollHeight(),this.isScrolledEnd=e+this.visibleRowCount>=this.lastRowCount_;var t=e*this.characterSize.height+this.visibleRowTopMargin,r=this.getScrollMax_();t>r&&(t=r),this.screen_.scrollTop!=t&&(this.screen_.scrollTop=t,this.scheduleRedraw())},U.ScrollPort.prototype.scrollRowToBottom=function(e){this.syncScrollHeight(),this.isScrolledEnd=e+this.visibleRowCount>=this.lastRowCount_;var t=e*this.characterSize.height+this.visibleRowTopMargin+this.visibleRowBottomMargin;(t-=this.visibleRowCount*this.characterSize.height)<0&&(t=0),this.screen_.scrollTop!=t&&(this.screen_.scrollTop=t)},U.ScrollPort.prototype.getTopRowIndex=function(){return Math.round(this.screen_.scrollTop/this.characterSize.height)},U.ScrollPort.prototype.getBottomRowIndex=function(e){return e+this.visibleRowCount-1},U.ScrollPort.prototype.onScroll_=function(e){var t=this.getScreenSize();t.width==this.lastScreenWidth_&&t.height==this.lastScreenHeight_?(this.redraw_(),this.publish("scroll",{scrollPort:this})):this.resize()},U.ScrollPort.prototype.onScrollWheel=function(e){},U.ScrollPort.prototype.onScrollWheel_=function(e){if(this.onScrollWheel(e),e.defaultPrevented)return;const t=this.scrollWheelDelta(e);let r=this.screen_.scrollTop-t.y;r<0&&(r=0);var o=this.getScrollMax_();r>o&&(r=o),r!=this.screen_.scrollTop&&(this.screen_.scrollTop=r,e.preventDefault())},U.ScrollPort.prototype.scrollWheelDelta=function(e){const t={x:0,y:0};switch(e.deltaMode){case WheelEvent.DOM_DELTA_PIXEL:t.x=e.deltaX*this.scrollWheelMultiplier_,t.y=e.deltaY*this.scrollWheelMultiplier_;break;case WheelEvent.DOM_DELTA_LINE:t.x=e.deltaX*this.characterSize.width,t.y=e.deltaY*this.characterSize.height;break;case WheelEvent.DOM_DELTA_PAGE:t.x=e.deltaX*this.characterSize.width*this.screen_.getWidth(),t.y=e.deltaY*this.characterSize.height*this.screen_.getHeight()}return t.y*=-1,t},U.ScrollPort.prototype.onTouch=function(e){},U.ScrollPort.prototype.onTouch_=function(e){if(this.onTouch(e),!e.defaultPrevented){var t,r,o=function(e){return{id:e.identifier,y:e.clientY,x:e.clientX}};switch(e.type){case"touchstart":for(t=0;t<e.changedTouches.length;++t)r=o(e.changedTouches[t]),this.lastTouch_[r.id]=r;break;case"touchcancel":case"touchend":for(t=0;t<e.changedTouches.length;++t)delete this.lastTouch_[e.changedTouches[t].identifier];break;case"touchmove":var i=0;for(t=0;t<e.changedTouches.length;++t)r=o(e.changedTouches[t]),i+=this.lastTouch_[r.id].y-r.y,this.lastTouch_[r.id]=r;i*=-1;var n=this.screen_.scrollTop-i;n<0&&(n=0);var s=this.getScrollMax_();n>s&&(n=s),n!=this.screen_.scrollTop&&(this.screen_.scrollTop=n)}e.preventDefault()}},U.ScrollPort.prototype.onResize_=function(e){this.syncCharacterSize()},U.ScrollPort.prototype.onCopy=function(e){},U.ScrollPort.prototype.onCopy_=function(e){if(this.onCopy(e),!(e.defaultPrevented||(this.resetSelectBags_(),this.selection.sync(),this.selection.isCollapsed||this.selection.endRow.rowIndex-this.selection.startRow.rowIndex<2))){var t,r,o=this.getTopRowIndex(),i=this.getBottomRowIndex(o);if(this.selection.startRow.rowIndex<o)t=this.selection.endRow.rowIndex<o?this.selection.endRow.rowIndex:this.topFold_.nextSibling.rowIndex,this.topSelectBag_.textContent=this.rowProvider_.getRowsText(this.selection.startRow.rowIndex+1,t),this.rowNodes_.insertBefore(this.topSelectBag_,this.selection.startRow.nextSibling),this.syncRowNodesDimensions_();if(this.selection.endRow.rowIndex>i)r=this.selection.startRow.rowIndex>i?this.selection.startRow.rowIndex+1:this.bottomFold_.previousSibling.rowIndex+1,this.bottomSelectBag_.textContent=this.rowProvider_.getRowsText(r,this.selection.endRow.rowIndex),this.rowNodes_.insertBefore(this.bottomSelectBag_,this.selection.endRow)}},U.ScrollPort.prototype.onBodyKeyDown_=function(e){this.ctrlVPaste&&(e.ctrlKey||e.metaKey)&&118==e.keyCode&&this.pasteTarget_.focus()},U.ScrollPort.prototype.onPaste_=function(e){this.pasteTarget_.focus();var t=this;setTimeout((function(){t.publish("paste",{text:t.pasteTarget_.value}),t.pasteTarget_.value="",t.focus()}),0)},U.ScrollPort.prototype.handlePasteTargetTextInput_=function(e){e.stopPropagation()},U.ScrollPort.prototype.onDragAndDrop_=function(e){if(!this.pasteOnDrop)return;let t,r;e.preventDefault(),e.shiftKey&&(e.dataTransfer.types.forEach(e=>{!r&&"text/plain"!=e&&e.startsWith("text/")&&(r=e)}),r&&(t=e.dataTransfer.getData(r))),t||(t=e.dataTransfer.getData("text/plain")),t&&this.publish("paste",{text:t})},U.ScrollPort.prototype.setScrollbarVisible=function(e){this.screen_.style.overflowY=e?"scroll":"hidden"},U.ScrollPort.prototype.setScrollWheelMoveMultipler=function(e){this.scrollWheelMultiplier_=e},K.rtdep("lib.colors","lib.PreferenceManager","lib.resource","lib.wc","lib.f","hterm.AccessibilityReader","hterm.Keyboard","hterm.Options","hterm.PreferenceManager","hterm.Screen","hterm.ScrollPort","hterm.Size","hterm.TextAttributes","hterm.VT"),U.Terminal=function(e){this.profileId_=null,this.primaryScreen_=new U.Screen,this.alternateScreen_=new U.Screen,this.screen_=this.primaryScreen_,this.screenSize=new U.Size(0,0),this.scrollPort_=new U.ScrollPort(this),this.scrollPort_.subscribe("resize",this.onResize_.bind(this)),this.scrollPort_.subscribe("scroll",this.onScroll_.bind(this)),this.scrollPort_.subscribe("paste",this.onPaste_.bind(this)),this.scrollPort_.subscribe("focus",this.onScrollportFocus_.bind(this)),this.scrollPort_.onCopy=this.onCopy_.bind(this),this.div_=null,this.document_=window.document,this.scrollbackRows_=[],this.tabStops_=[],this.defaultTabStops=!0,this.vtScrollTop_=null,this.vtScrollBottom_=null,this.cursorNode_=null,this.cursorShape_=U.Terminal.cursorShape.BLOCK,this.cursorBlinkCycle_=[100,100],this.myOnCursorBlink_=this.onCursorBlink_.bind(this),this.backgroundColor_=null,this.foregroundColor_=null,this.scrollOnOutput_=null,this.scrollOnKeystroke_=null,this.scrollWheelArrowKeys_=null,this.defeatMouseReports_=!1,this.setAutomaticMouseHiding(),this.mouseHideDelay_=null,this.bellAudio_=this.document_.createElement("audio"),this.bellAudio_.id="hterm:bell-audio",this.bellAudio_.setAttribute("preload","auto"),this.accessibilityReader_=null,this.contextMenu=new U.ContextMenu,this.bellNotificationList_=[],this.desktopNotificationBell_=!1,this.savedOptions_={},this.options_=new U.Options,this.timeouts_={},this.vt=new U.VT(this),this.saveCursorAndState(!0),this.keyboard=new U.Keyboard(this),this.io=new U.Terminal.IO(this),this.enableMouseDragScroll=!0,this.copyOnSelect=null,this.mouseRightClickPaste=null,this.mousePasteButton=null,this.useDefaultWindowCopy=!1,this.clearSelectionAfterCopy=!0,this.realizeSize_(80,24),this.setDefaultTabStops(),this.allowImagesInline=null,this.reportFocus=!1,this.setProfile(e||"default",function(){this.onTerminalReady()}.bind(this))},U.Terminal.cursorShape={BLOCK:"BLOCK",BEAM:"BEAM",UNDERLINE:"UNDERLINE"},U.Terminal.prototype.onTerminalReady=function(){},U.Terminal.prototype.tabWidth=8,U.Terminal.prototype.setProfile=function(e,t){this.profileId_=e.replace(/\//g,"");var r=this;this.prefs_&&this.prefs_.deactivate(),this.prefs_=new U.PreferenceManager(this.profileId_),this.prefs_.addObservers(null,{"alt-gr-mode":function(e){e=null==e?"en-us"==navigator.language.toLowerCase()?"none":"right-alt":"string"==typeof e?e.toLowerCase():"none",/^(none|ctrl-alt|left-alt|right-alt)$/.test(e)||(e="none"),r.keyboard.altGrMode=e},"alt-backspace-is-meta-backspace":function(e){r.keyboard.altBackspaceIsMetaBackspace=e},"alt-is-meta":function(e){r.keyboard.altIsMeta=e},"alt-sends-what":function(e){/^(escape|8-bit|browser-key)$/.test(e)||(e="escape"),r.keyboard.altSendsWhat=e},"audible-bell-sound":function(e){var t=e.match(/^lib-resource:(\S+)/);t?r.bellAudio_.setAttribute("src",K.resource.getDataUrl(t[1])):r.bellAudio_.setAttribute("src",e)},"desktop-notification-bell":function(e){e&&Notification?(r.desktopNotificationBell_="granted"===Notification.permission,r.desktopNotificationBell_||console.warn("desktop-notification-bell is true but we do not have permission to display notifications.")):r.desktopNotificationBell_=!1},"background-color":function(e){r.setBackgroundColor(e)},"background-image":function(e){r.scrollPort_.setBackgroundImage(e)},"background-size":function(e){r.scrollPort_.setBackgroundSize(e)},"background-position":function(e){r.scrollPort_.setBackgroundPosition(e)},"backspace-sends-backspace":function(e){r.keyboard.backspaceSendsBackspace=e},"character-map-overrides":function(e){null==e||e instanceof Object?(r.vt.characterMaps.reset(),r.vt.characterMaps.setOverrides(e)):console.warn("Preference character-map-modifications is not an object: "+e)},"cursor-blink":function(e){r.setCursorBlink(!!e)},"cursor-blink-cycle":function(e){e instanceof Array&&"number"==typeof e[0]&&"number"==typeof e[1]?r.cursorBlinkCycle_=e:r.cursorBlinkCycle_="number"==typeof e?[e,e]:[100,100]},"cursor-color":function(e){r.setCursorColor(e)},"color-palette-overrides":function(e){if(null==e||e instanceof Object||e instanceof Array){if(K.colors.colorPalette=K.colors.stockColorPalette.concat(),e)for(var t in e){var o=parseInt(t);if(isNaN(o)||o<0||o>255)console.log("Invalid value in palette: "+t+": "+e[t]);else if(e[o]){var i=K.colors.normalizeCSS(e[o]);i&&(K.colors.colorPalette[o]=i)}}r.primaryScreen_.textAttributes.resetColorPalette(),r.alternateScreen_.textAttributes.resetColorPalette()}else console.warn("Preference color-palette-overrides is not an array or object: "+e)},"copy-on-select":function(e){r.copyOnSelect=!!e},"use-default-window-copy":function(e){r.useDefaultWindowCopy=!!e},"clear-selection-after-copy":function(e){r.clearSelectionAfterCopy=!!e},"ctrl-plus-minus-zero-zoom":function(e){r.keyboard.ctrlPlusMinusZeroZoom=e},"ctrl-c-copy":function(e){r.keyboard.ctrlCCopy=e},"ctrl-v-paste":function(e){r.keyboard.ctrlVPaste=e,r.scrollPort_.setCtrlVPaste(e)},"paste-on-drop":function(e){r.scrollPort_.setPasteOnDrop(e)},"east-asian-ambiguous-as-two-column":function(e){K.wc.regardCjkAmbiguous=e},"enable-8-bit-control":function(e){r.vt.enable8BitControl=!!e},"enable-bold":function(e){r.syncBoldSafeState()},"enable-bold-as-bright":function(e){r.primaryScreen_.textAttributes.enableBoldAsBright=!!e,r.alternateScreen_.textAttributes.enableBoldAsBright=!!e},"enable-blink":function(e){r.setTextBlink(!!e)},"enable-clipboard-write":function(e){r.vt.enableClipboardWrite=!!e},"enable-dec12":function(e){r.vt.enableDec12=!!e},"enable-csi-j-3":function(e){r.vt.enableCsiJ3=!!e},"font-family":function(e){r.syncFontFamily()},"font-size":function(e){(e=parseInt(e))<=0?console.error(`Invalid font size: ${e}`):r.setFontSize(e)},"font-smoothing":function(e){r.syncFontFamily()},"foreground-color":function(e){r.setForegroundColor(e)},"hide-mouse-while-typing":function(e){r.setAutomaticMouseHiding(e)},"home-keys-scroll":function(e){r.keyboard.homeKeysScroll=e},keybindings:function(e){if(r.keyboard.bindings.clear(),e)if(e instanceof Object)try{r.keyboard.bindings.addBindings(e)}catch(e){console.error("Error in keybindings preference: "+e)}else console.error("Error in keybindings preference: Expected object")},"media-keys-are-fkeys":function(e){r.keyboard.mediaKeysAreFKeys=e},"meta-sends-escape":function(e){r.keyboard.metaSendsEscape=e},"mouse-right-click-paste":function(e){r.mouseRightClickPaste=e},"mouse-paste-button":function(e){r.syncMousePasteButton()},"page-keys-scroll":function(e){r.keyboard.pageKeysScroll=e},"pass-alt-number":function(e){null==e&&(e="mac"!=U.os&&"popup"!=U.windowType),r.passAltNumber=e},"pass-ctrl-number":function(e){null==e&&(e="mac"!=U.os&&"popup"!=U.windowType),r.passCtrlNumber=e},"pass-meta-number":function(e){null==e&&(e="mac"==U.os&&"popup"!=U.windowType),r.passMetaNumber=e},"pass-meta-v":function(e){r.keyboard.passMetaV=e},"receive-encoding":function(e){/^(utf-8|raw)$/.test(e)||(console.warn('Invalid value for "receive-encoding": '+e),e="utf-8"),r.vt.characterEncoding=e},"scroll-on-keystroke":function(e){r.scrollOnKeystroke_=e},"scroll-on-output":function(e){r.scrollOnOutput_=e},"scrollbar-visible":function(e){r.setScrollbarVisible(e)},"scroll-wheel-may-send-arrow-keys":function(e){r.scrollWheelArrowKeys_=e},"scroll-wheel-move-multiplier":function(e){r.setScrollWheelMoveMultipler(e)},"send-encoding":function(e){/^(utf-8|raw)$/.test(e)||(console.warn('Invalid value for "send-encoding": '+e),e="utf-8"),r.keyboard.characterEncoding=e},"shift-insert-paste":function(e){r.keyboard.shiftInsertPaste=e},"terminal-encoding":function(e){r.vt.setEncoding(e)},"user-css":function(e){r.scrollPort_.setUserCssUrl(e)},"user-css-text":function(e){r.scrollPort_.setUserCssText(e)},"word-break-match-left":function(e){r.primaryScreen_.wordBreakMatchLeft=e,r.alternateScreen_.wordBreakMatchLeft=e},"word-break-match-right":function(e){r.primaryScreen_.wordBreakMatchRight=e,r.alternateScreen_.wordBreakMatchRight=e},"word-break-match-middle":function(e){r.primaryScreen_.wordBreakMatchMiddle=e,r.alternateScreen_.wordBreakMatchMiddle=e},"allow-images-inline":function(e){r.allowImagesInline=e}}),this.prefs_.readStorage(function(){this.prefs_.notifyAll(),t&&t()}.bind(this))},U.Terminal.prototype.getPrefs=function(){return this.prefs_},U.Terminal.prototype.setBracketedPaste=function(e){this.options_.bracketedPaste=e},U.Terminal.prototype.setCursorColor=function(e){void 0===e&&(e=this.prefs_.get("cursor-color")),this.setCssVar("cursor-color",e)},U.Terminal.prototype.getCursorColor=function(){return this.getCssVar("cursor-color")},U.Terminal.prototype.setSelectionEnabled=function(e){this.enableMouseDragScroll=e},U.Terminal.prototype.setBackgroundColor=function(e){void 0===e&&(e=this.prefs_.get("background-color")),this.backgroundColor_=K.colors.normalizeCSS(e),this.primaryScreen_.textAttributes.setDefaults(this.foregroundColor_,this.backgroundColor_),this.alternateScreen_.textAttributes.setDefaults(this.foregroundColor_,this.backgroundColor_),this.scrollPort_.setBackgroundColor(e)},U.Terminal.prototype.getBackgroundColor=function(){return this.backgroundColor_},U.Terminal.prototype.setForegroundColor=function(e){void 0===e&&(e=this.prefs_.get("foreground-color")),this.foregroundColor_=K.colors.normalizeCSS(e),this.primaryScreen_.textAttributes.setDefaults(this.foregroundColor_,this.backgroundColor_),this.alternateScreen_.textAttributes.setDefaults(this.foregroundColor_,this.backgroundColor_),this.scrollPort_.setForegroundColor(e)},U.Terminal.prototype.getForegroundColor=function(){return this.foregroundColor_},U.Terminal.prototype.runCommandClass=function(e,t){var r=this.prefs_.get("environment");"object"==typeof r&&null!=r||(r={});var o=this;this.command=new e({argString:t||"",io:this.io.push(),environment:r,onExit:function(e){o.io.pop(),o.uninstallKeyboard(),o.prefs_.get("close-on-exit")&&window.close()}}),this.installKeyboard(),this.command.run()},U.Terminal.prototype.isPrimaryScreen=function(){return this.screen_==this.primaryScreen_},U.Terminal.prototype.installKeyboard=function(){this.keyboard.installKeyboard(this.scrollPort_.getDocument().body)},U.Terminal.prototype.uninstallKeyboard=function(){this.keyboard.installKeyboard(null)},U.Terminal.prototype.setCssVar=function(e,t,r="--hterm-"){this.document_.documentElement.style.setProperty(`${r}${e}`,t)},U.Terminal.prototype.getCssVar=function(e,t="--hterm-"){return this.document_.documentElement.style.getPropertyValue(`${t}${e}`)},U.Terminal.prototype.setFontSize=function(e){e<=0&&(e=this.prefs_.get("font-size")),this.scrollPort_.setFontSize(e),this.setCssVar("charsize-width",this.scrollPort_.characterSize.width+"px"),this.setCssVar("charsize-height",this.scrollPort_.characterSize.height+"px")},U.Terminal.prototype.getFontSize=function(){return this.scrollPort_.getFontSize()},U.Terminal.prototype.getFontFamily=function(){return this.scrollPort_.getFontFamily()},U.Terminal.prototype.syncFontFamily=function(){this.scrollPort_.setFontFamily(this.prefs_.get("font-family"),this.prefs_.get("font-smoothing")),this.syncBoldSafeState()},U.Terminal.prototype.syncMousePasteButton=function(){var e=this.prefs_.get("mouse-paste-button");"number"!=typeof e?"linux"!=U.os?this.mousePasteButton=1:this.mousePasteButton=2:this.mousePasteButton=e},U.Terminal.prototype.syncBoldSafeState=function(){var e=this.prefs_.get("enable-bold");if(null!==e)return this.primaryScreen_.textAttributes.enableBold=e,void(this.alternateScreen_.textAttributes.enableBold=e);var t=this.scrollPort_.measureCharacterSize(),r=this.scrollPort_.measureCharacterSize("bold"),o=t.equals(r);o||console.warn("Bold characters disabled: Size of bold weight differs from normal.  Font family is: "+this.scrollPort_.getFontFamily()),this.primaryScreen_.textAttributes.enableBold=o,this.alternateScreen_.textAttributes.enableBold=o},U.Terminal.prototype.setTextBlink=function(e){void 0===e&&(e=this.prefs_.get("enable-blink")),this.setCssVar("blink-node-duration",e?"0.7s":"0")},U.Terminal.prototype.syncMouseStyle=function(){this.setCssVar("mouse-cursor-style",this.vt.mouseReport==this.vt.MOUSE_REPORT_DISABLED?"var(--hterm-mouse-cursor-text)":"var(--hterm-mouse-cursor-pointer)")},U.Terminal.prototype.saveCursor=function(){return this.screen_.cursorPosition.clone()},U.Terminal.prototype.getTextAttributes=function(){return this.screen_.textAttributes},U.Terminal.prototype.setTextAttributes=function(e){this.screen_.textAttributes=e},U.Terminal.prototype.getZoomFactor=function(){return this.scrollPort_.characterSize.zoomFactor},U.Terminal.prototype.setWindowTitle=function(e){window.document.title=e},U.Terminal.prototype.restoreCursor=function(e){var t=K.f.clamp(e.row,0,this.screenSize.height-1),r=K.f.clamp(e.column,0,this.screenSize.width-1);this.screen_.setCursorPosition(t,r),(e.column>r||e.column==r&&e.overflow)&&(this.screen_.cursorPosition.overflow=!0)},U.Terminal.prototype.clearCursorOverflow=function(){this.screen_.cursorPosition.overflow=!1},U.Terminal.prototype.saveCursorAndState=function(e){e?(this.primaryScreen_.saveCursorAndState(this.vt),this.alternateScreen_.saveCursorAndState(this.vt)):this.screen_.saveCursorAndState(this.vt)},U.Terminal.prototype.restoreCursorAndState=function(e){e?(this.primaryScreen_.restoreCursorAndState(this.vt),this.alternateScreen_.restoreCursorAndState(this.vt)):this.screen_.restoreCursorAndState(this.vt)},U.Terminal.prototype.setCursorShape=function(e){this.cursorShape_=e,this.restyleCursor_()},U.Terminal.prototype.getCursorShape=function(){return this.cursorShape_},U.Terminal.prototype.setWidth=function(e){null!=e?(this.div_.style.width=Math.ceil(this.scrollPort_.characterSize.width*e+this.scrollPort_.currentScrollbarWidthPx)+"px",this.realizeSize_(e,this.screenSize.height),this.scheduleSyncCursorPosition_()):this.div_.style.width="100%"},U.Terminal.prototype.setHeight=function(e){null!=e?(this.div_.style.height=this.scrollPort_.characterSize.height*e+"px",this.realizeSize_(this.screenSize.width,e),this.scheduleSyncCursorPosition_()):this.div_.style.height="100%"},U.Terminal.prototype.realizeSize_=function(e,t){e!=this.screenSize.width&&this.realizeWidth_(e),t!=this.screenSize.height&&this.realizeHeight_(t),this.io.onTerminalResize_(e,t)},U.Terminal.prototype.realizeWidth_=function(e){if(e<=0)throw new Error("Attempt to realize bad width: "+e);var t=e-this.screen_.getWidth();if(this.screenSize.width=e,this.screen_.setColumnCount(e),t>0)this.defaultTabStops&&this.setDefaultTabStops(this.screenSize.width-t);else for(var r=this.tabStops_.length-1;r>=0&&!(this.tabStops_[r]<e);r--)this.tabStops_.pop();this.screen_.setColumnCount(this.screenSize.width)},U.Terminal.prototype.realizeHeight_=function(e){if(e<=0)throw new Error("Attempt to realize bad height: "+e);var t=e-this.screen_.getHeight();this.screenSize.height=e;var r=this.saveCursor();if(t<0){for(t*=-1;t;){var o=this.getRowCount()-1;if(o-this.scrollbackRows_.length==r.row)break;if(this.getRowText(o))break;this.screen_.popRow(),t--}var i=this.screen_.shiftRows(t);this.scrollbackRows_.push.apply(this.scrollbackRows_,i),r.row=Math.max(r.row-t,0)}else if(t>0){if(t<=this.scrollbackRows_.length){var n=Math.min(t,this.scrollbackRows_.length),s=this.scrollbackRows_.splice(this.scrollbackRows_.length-n,n);this.screen_.unshiftRows(s),t-=n,r.row+=n}t&&this.appendRows_(t)}this.setVTScrollRegion(null,null),this.restoreCursor(r)},U.Terminal.prototype.scrollHome=function(){this.scrollPort_.scrollRowToTop(0)},U.Terminal.prototype.scrollEnd=function(){this.scrollPort_.scrollRowToBottom(this.getRowCount())},U.Terminal.prototype.scrollPageUp=function(){this.scrollPort_.scrollPageUp()},U.Terminal.prototype.scrollPageDown=function(){this.scrollPort_.scrollPageDown()},U.Terminal.prototype.scrollLineUp=function(){var e=this.scrollPort_.getTopRowIndex();this.scrollPort_.scrollRowToTop(e-1)},U.Terminal.prototype.scrollLineDown=function(){var e=this.scrollPort_.getTopRowIndex();this.scrollPort_.scrollRowToTop(e+1)},U.Terminal.prototype.wipeContents=function(){this.clearHome(this.primaryScreen_),this.clearHome(this.alternateScreen_),this.clearScrollback()},U.Terminal.prototype.clearScrollback=function(){this.scrollEnd(),this.scrollbackRows_.length=0,this.scrollPort_.resetCache(),[this.primaryScreen_,this.alternateScreen_].forEach(e=>{const t=e.getHeight();this.renumberRows_(0,t,e)}),this.syncCursorPosition_(),this.scrollPort_.invalidate()},U.Terminal.prototype.reset=function(){this.vt.reset(),this.clearAllTabStops(),this.setDefaultTabStops();const e=e=>{e.textAttributes.reset(),e.textAttributes.resetColorPalette(),this.clearHome(e),e.saveCursorAndState(this.vt)};e(this.primaryScreen_),e(this.alternateScreen_),this.options_=new U.Options,this.setCursorBlink(!!this.prefs_.get("cursor-blink")),this.setVTScrollRegion(null,null),this.setCursorVisible(!0)},U.Terminal.prototype.softReset=function(){this.vt.reset(),this.options_=new U.Options,this.options_.cursorBlink=!!this.timeouts_.cursorBlink;const e=e=>{e.textAttributes.reset(),e.textAttributes.resetColorPalette(),e.saveCursorAndState(this.vt)};e(this.primaryScreen_),e(this.alternateScreen_),this.setVTScrollRegion(null,null),this.setCursorVisible(!0)},U.Terminal.prototype.forwardTabStop=function(){for(var e=this.screen_.cursorPosition.column,t=0;t<this.tabStops_.length;t++)if(this.tabStops_[t]>e)return void this.setCursorColumn(this.tabStops_[t]);var r=this.screen_.cursorPosition.overflow;this.setCursorColumn(this.screenSize.width-1),this.screen_.cursorPosition.overflow=r},U.Terminal.prototype.backwardTabStop=function(){for(var e=this.screen_.cursorPosition.column,t=this.tabStops_.length-1;t>=0;t--)if(this.tabStops_[t]<e)return void this.setCursorColumn(this.tabStops_[t]);this.setCursorColumn(1)},U.Terminal.prototype.setTabStop=function(e){for(var t=this.tabStops_.length-1;t>=0;t--){if(this.tabStops_[t]==e)return;if(this.tabStops_[t]<e)return void this.tabStops_.splice(t+1,0,e)}this.tabStops_.splice(0,0,e)},U.Terminal.prototype.clearTabStopAtCursor=function(){var e=this.screen_.cursorPosition.column,t=this.tabStops_.indexOf(e);-1!=t&&this.tabStops_.splice(t,1)},U.Terminal.prototype.clearAllTabStops=function(){this.tabStops_.length=0,this.defaultTabStops=!1},U.Terminal.prototype.setDefaultTabStops=function(e){for(var t=e||0,r=this.tabWidth,o=t=t-1-(t-1)%r+r;o<this.screenSize.width;o+=r)this.setTabStop(o);this.defaultTabStops=!0},U.Terminal.prototype.interpret=function(e){this.scheduleSyncCursorPosition_(),this.vt.interpret(e)},U.Terminal.prototype.decorate=function(e){const t=e.ownerDocument.characterSet.toLowerCase();"utf-8"!=t&&console.warn(`Document encoding should be set to utf-8, not "${t}";`+" Add <meta charset='utf-8'/> to your HTML <head> to fix."),this.div_=e,this.accessibilityReader_=new U.AccessibilityReader(e),this.scrollPort_.decorate(e),this.scrollPort_.setBackgroundImage(this.prefs_.get("background-image")),this.scrollPort_.setBackgroundSize(this.prefs_.get("background-size")),this.scrollPort_.setBackgroundPosition(this.prefs_.get("background-position")),this.scrollPort_.setUserCssUrl(this.prefs_.get("user-css")),this.scrollPort_.setUserCssText(this.prefs_.get("user-css-text")),this.scrollPort_.setAccessibilityReader(this.accessibilityReader_),this.div_.focus=this.focus.bind(this),this.setFontSize(this.prefs_.get("font-size")),this.syncFontFamily(),this.setScrollbarVisible(this.prefs_.get("scrollbar-visible")),this.setScrollWheelMoveMultipler(this.prefs_.get("scroll-wheel-move-multiplier")),this.document_=this.scrollPort_.getDocument(),this.accessibilityReader_.decorate(this.document_),this.document_.body.oncontextmenu=function(){return!1},this.contextMenu.setDocument(this.document_);var r=this.onMouse_.bind(this),o=this.scrollPort_.getScreenNode();o.addEventListener("mousedown",r),o.addEventListener("mouseup",r),o.addEventListener("mousemove",r),this.scrollPort_.onScrollWheel=r,o.addEventListener("keydown",this.onKeyboardActivity_.bind(this)),o.addEventListener("focus",this.onFocusChange_.bind(this,!0)),o.addEventListener("mousedown",function(){setTimeout(this.onFocusChange_.bind(this,!0))}.bind(this)),o.addEventListener("blur",this.onFocusChange_.bind(this,!1));var i=this.document_.createElement("style");i.textContent='.cursor-node[focus="false"] {  box-sizing: border-box;  background-color: transparent !important;  border-width: 2px;  border-style: solid;}menu {  margin: 0;  padding: 0;  cursor: var(--hterm-mouse-cursor-pointer);}menuitem {  white-space: nowrap;  border-bottom: 1px dashed;  display: block;  padding: 0.3em 0.3em 0 0.3em;}menuitem.separator {  border-bottom: none;  height: 0.5em;  padding: 0;}menuitem:hover {  color: var(--hterm-cursor-color);}.wc-node {  display: inline-block;  text-align: center;  width: calc(var(--hterm-charsize-width) * 2);  line-height: var(--hterm-charsize-height);}:root {  --hterm-charsize-width: '+this.scrollPort_.characterSize.width+"px;  --hterm-charsize-height: "+this.scrollPort_.characterSize.height+"px;  --hterm-cursor-offset-col: -1;  --hterm-cursor-offset-row: -1;  --hterm-blink-node-duration: 0.7s;  --hterm-mouse-cursor-text: text;  --hterm-mouse-cursor-pointer: default;  --hterm-mouse-cursor-style: var(--hterm-mouse-cursor-text);}.uri-node:hover {  text-decoration: underline;  cursor: var(--hterm-mouse-cursor-pointer), pointer;}@keyframes blink {  from { opacity: 1.0; }  to { opacity: 0.0; }}.blink-node {  animation-name: blink;  animation-duration: var(--hterm-blink-node-duration);  animation-iteration-count: infinite;  animation-timing-function: ease-in-out;  animation-direction: alternate;}",this.document_.head.insertBefore(i,this.document_.head.firstChild),this.cursorNode_=this.document_.createElement("div"),this.cursorNode_.id="hterm:terminal-cursor",this.cursorNode_.className="cursor-node",this.cursorNode_.style.cssText="position: absolute;left: calc(var(--hterm-charsize-width) * var(--hterm-cursor-offset-col));top: calc(var(--hterm-charsize-height) * var(--hterm-cursor-offset-row));display: "+(this.options_.cursorVisible?"":"none")+";width: var(--hterm-charsize-width);height: var(--hterm-charsize-height);background-color: var(--hterm-cursor-color);border-color: var(--hterm-cursor-color);-webkit-transition: opacity, background-color 100ms linear;-moz-transition: opacity, background-color 100ms linear;",this.setCursorColor(),this.setCursorBlink(!!this.prefs_.get("cursor-blink")),this.restyleCursor_(),this.document_.body.appendChild(this.cursorNode_),this.scrollBlockerNode_=this.document_.createElement("div"),this.scrollBlockerNode_.id="hterm:mouse-drag-scroll-blocker",this.scrollBlockerNode_.setAttribute("aria-hidden","true"),this.scrollBlockerNode_.style.cssText="position: absolute;top: -99px;display: block;width: 10px;height: 10px;",this.document_.body.appendChild(this.scrollBlockerNode_),this.scrollPort_.onScrollWheel=r,["mousedown","mouseup","mousemove","click","dblclick"].forEach(function(e){this.scrollBlockerNode_.addEventListener(e,r),this.cursorNode_.addEventListener(e,r),this.document_.addEventListener(e,r)}.bind(this)),this.cursorNode_.addEventListener("mousedown",function(){setTimeout(this.focus.bind(this))}.bind(this)),this.setReverseVideo(!1),this.scrollPort_.focus(),this.scrollPort_.scheduleRedraw()},U.Terminal.prototype.getDocument=function(){return this.document_},U.Terminal.prototype.focus=function(){this.scrollPort_.focus()},U.Terminal.prototype.getRowNode=function(e){if(e<this.scrollbackRows_.length)return this.scrollbackRows_[e];var t=e-this.scrollbackRows_.length;return this.screen_.rowsArray[t]},U.Terminal.prototype.getRowsText=function(e,t){for(var r=[],o=e;o<t;o++){var i=this.getRowNode(o);r.push(i.textContent),o<t-1&&!i.getAttribute("line-overflow")&&r.push("\n")}return r.join("")},U.Terminal.prototype.getRowText=function(e){return this.getRowNode(e).textContent},U.Terminal.prototype.getRowCount=function(){return this.scrollbackRows_.length+this.screen_.rowsArray.length},U.Terminal.prototype.appendRows_=function(e){for(var t=this.screen_.rowsArray.length,r=this.scrollbackRows_.length+t,o=0;o<e;o++){var i=this.document_.createElement("x-row");i.appendChild(this.document_.createTextNode("")),i.rowIndex=r+o,this.screen_.pushRow(i)}var n=this.screen_.rowsArray.length-this.screenSize.height;if(n>0){var s=this.screen_.shiftRows(n);Array.prototype.push.apply(this.scrollbackRows_,s),this.scrollPort_.isScrolledEnd&&this.scheduleScrollDown_()}t>=this.screen_.rowsArray.length&&(t=this.screen_.rowsArray.length-1),this.setAbsoluteCursorPosition(t,0)},U.Terminal.prototype.moveRows_=function(e,t,r){var o,i,n=this.screen_.removeRows(e,t);this.screen_.insertRows(r,n),e<r?(o=e,i=r+t):(o=r,i=e+t),this.renumberRows_(o,i),this.scrollPort_.scheduleInvalidate()},U.Terminal.prototype.renumberRows_=function(e,t,r){for(var o=r||this.screen_,i=this.scrollbackRows_.length,n=e;n<t;n++)o.rowsArray[n].rowIndex=i+n},U.Terminal.prototype.print=function(e){this.scheduleSyncCursorPosition_(),this.accessibilityReader_.announce(e);var t=0,r=K.wc.strWidth(e);for(0==r&&e&&(r=1);t<r;){this.options_.wraparound&&this.screen_.cursorPosition.overflow&&(this.screen_.commitLineOverflow(),this.newLine(!0));var o,i=r-t,n=!1;this.screen_.cursorPosition.column+i>=this.screenSize.width&&(n=!0,i=this.screenSize.width-this.screen_.cursorPosition.column),n&&!this.options_.wraparound?(o=K.wc.substr(e,t,i-1)+K.wc.substr(e,r-1),i=r):o=K.wc.substr(e,t,i);for(var s=U.TextAttributes.splitWidecharString(o),a=0;a<s.length;a++)this.screen_.textAttributes.wcNode=s[a].wcNode,this.screen_.textAttributes.asciiNode=s[a].asciiNode,this.options_.insertMode?this.screen_.insertString(s[a].str,s[a].wcStrWidth):this.screen_.overwriteString(s[a].str,s[a].wcStrWidth),this.screen_.textAttributes.wcNode=!1,this.screen_.textAttributes.asciiNode=!0;this.screen_.maybeClipCurrentRow(),t+=i}this.scrollOnOutput_&&this.scrollPort_.scrollRowToBottom(this.getRowCount())},U.Terminal.prototype.setVTScrollRegion=function(e,t){0==e&&t==this.screenSize.height-1?(this.vtScrollTop_=null,this.vtScrollBottom_=null):(this.vtScrollTop_=e,this.vtScrollBottom_=t)},U.Terminal.prototype.getVTScrollTop=function(){return null!=this.vtScrollTop_?this.vtScrollTop_:0},U.Terminal.prototype.getVTScrollBottom=function(){return null!=this.vtScrollBottom_?this.vtScrollBottom_:this.screenSize.height-1},U.Terminal.prototype.newLine=function(e=!1){e||this.accessibilityReader_.newLine();var t=this.screen_.cursorPosition.row==this.screen_.rowsArray.length-1;null!=this.vtScrollBottom_?this.screen_.cursorPosition.row==this.vtScrollBottom_?(this.vtScrollUp(1),this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row,0)):t?this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row,0):this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row+1,0):t?this.appendRows_(1):this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row+1,0)},U.Terminal.prototype.lineFeed=function(){var e=this.screen_.cursorPosition.column;this.newLine(),this.setCursorColumn(e)},U.Terminal.prototype.formFeed=function(){this.options_.autoCarriageReturn?this.newLine():this.lineFeed()},U.Terminal.prototype.reverseLineFeed=function(){var e=this.getVTScrollTop(),t=this.screen_.cursorPosition.row;t==e?this.insertLines(1):this.setAbsoluteCursorRow(t-1)},U.Terminal.prototype.eraseToLeft=function(){var e=this.saveCursor();this.setCursorColumn(0);const t=e.column+1;this.screen_.overwriteString(K.f.getWhitespace(t),t),this.restoreCursor(e)},U.Terminal.prototype.eraseToRight=function(e){if(!this.screen_.cursorPosition.overflow){var t=this.screenSize.width-this.screen_.cursorPosition.column,r=e?Math.min(e,t):t;if(this.screen_.textAttributes.background===this.screen_.textAttributes.DEFAULT_COLOR){var o=this.screen_.rowsArray[this.screen_.cursorPosition.row];if(U.TextAttributes.nodeWidth(o)<=this.screen_.cursorPosition.column+r)return this.screen_.deleteChars(r),void this.clearCursorOverflow()}var i=this.saveCursor();this.screen_.overwriteString(K.f.getWhitespace(r),r),this.restoreCursor(i),this.clearCursorOverflow()}},U.Terminal.prototype.eraseLine=function(){var e=this.saveCursor();this.screen_.clearCursorRow(),this.restoreCursor(e),this.clearCursorOverflow()},U.Terminal.prototype.eraseAbove=function(){var e=this.saveCursor();this.eraseToLeft();for(var t=0;t<e.row;t++)this.setAbsoluteCursorPosition(t,0),this.screen_.clearCursorRow();this.restoreCursor(e),this.clearCursorOverflow()},U.Terminal.prototype.eraseBelow=function(){var e=this.saveCursor();this.eraseToRight();for(var t=this.screenSize.height-1,r=e.row+1;r<=t;r++)this.setAbsoluteCursorPosition(r,0),this.screen_.clearCursorRow();this.restoreCursor(e),this.clearCursorOverflow()},U.Terminal.prototype.fill=function(e){var t=this.saveCursor();this.setAbsoluteCursorPosition(0,0);for(var r=0;r<this.screenSize.height;r++)for(var o=0;o<this.screenSize.width;o++)this.setAbsoluteCursorPosition(r,o),this.screen_.overwriteString(e,1);this.restoreCursor(t)},U.Terminal.prototype.clearHome=function(e){var t=e||this.screen_,r=t.getHeight();if(this.accessibilityReader_.clear(),0!=r){for(var o=0;o<r;o++)t.setCursorPosition(o,0),t.clearCursorRow();t.setCursorPosition(0,0)}},U.Terminal.prototype.clear=function(e){var t=e||this.screen_,r=t.cursorPosition.clone();this.clearHome(t),t.setCursorPosition(r.row,r.column)},U.Terminal.prototype.insertLines=function(e){var t=this.screen_.cursorPosition.row,r=this.getVTScrollBottom(),o=r-t-(e=Math.min(e,r-t))+1;o&&this.moveRows_(t,o,t+e);for(var i=e-1;i>=0;i--)this.setAbsoluteCursorPosition(t+i,0),this.screen_.clearCursorRow()},U.Terminal.prototype.deleteLines=function(e){var t=this.saveCursor(),r=t.row,o=this.getVTScrollBottom(),i=o-r+1,n=o-(e=Math.min(e,i))+1;e!=i&&this.moveRows_(r,e,n);for(var s=0;s<e;s++)this.setAbsoluteCursorPosition(n+s,0),this.screen_.clearCursorRow();this.restoreCursor(t),this.clearCursorOverflow()},U.Terminal.prototype.insertSpace=function(e){var t=this.saveCursor(),r=K.f.getWhitespace(e||1);this.screen_.insertString(r,r.length),this.screen_.maybeClipCurrentRow(),this.restoreCursor(t),this.clearCursorOverflow()},U.Terminal.prototype.deleteChars=function(e){var t=this.screen_.deleteChars(e);if(t&&!this.screen_.textAttributes.isDefault()){var r=this.saveCursor();this.setCursorColumn(this.screenSize.width-t),this.screen_.insertString(K.f.getWhitespace(t)),this.restoreCursor(r)}this.clearCursorOverflow()},U.Terminal.prototype.vtScrollUp=function(e){var t=this.saveCursor();this.setAbsoluteCursorRow(this.getVTScrollTop()),this.deleteLines(e),this.restoreCursor(t)},U.Terminal.prototype.vtScrollDown=function(e){var t=this.saveCursor();this.setAbsoluteCursorPosition(this.getVTScrollTop(),0),this.insertLines(e),this.restoreCursor(t)},U.Terminal.prototype.setAccessibilityEnabled=function(e){this.accessibilityReader_.setAccessibilityEnabled(e)},U.Terminal.prototype.setCursorPosition=function(e,t){this.options_.originMode?this.setRelativeCursorPosition(e,t):this.setAbsoluteCursorPosition(e,t)},U.Terminal.prototype.setRelativeCursorPosition=function(e,t){var r=this.getVTScrollTop();e=K.f.clamp(e+r,r,this.getVTScrollBottom()),t=K.f.clamp(t,0,this.screenSize.width-1),this.screen_.setCursorPosition(e,t)},U.Terminal.prototype.setAbsoluteCursorPosition=function(e,t){e=K.f.clamp(e,0,this.screenSize.height-1),t=K.f.clamp(t,0,this.screenSize.width-1),this.screen_.setCursorPosition(e,t)},U.Terminal.prototype.setCursorColumn=function(e){this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row,e)},U.Terminal.prototype.getCursorColumn=function(){return this.screen_.cursorPosition.column},U.Terminal.prototype.setAbsoluteCursorRow=function(e){this.setAbsoluteCursorPosition(e,this.screen_.cursorPosition.column)},U.Terminal.prototype.getCursorRow=function(){return this.screen_.cursorPosition.row},U.Terminal.prototype.scheduleRedraw_=function(){if(!this.timeouts_.redraw){var e=this;this.timeouts_.redraw=setTimeout((function(){delete e.timeouts_.redraw,e.scrollPort_.redraw_()}),0)}},U.Terminal.prototype.scheduleScrollDown_=function(){if(!this.timeouts_.scrollDown){var e=this;this.timeouts_.scrollDown=setTimeout((function(){delete e.timeouts_.scrollDown,e.scrollPort_.scrollRowToBottom(e.getRowCount())}),10)}},U.Terminal.prototype.cursorUp=function(e){return this.cursorDown(-(e||1))},U.Terminal.prototype.cursorDown=function(e){e=e||1;var t=this.options_.originMode?this.getVTScrollTop():0,r=this.options_.originMode?this.getVTScrollBottom():this.screenSize.height-1,o=K.f.clamp(this.screen_.cursorPosition.row+e,t,r);this.setAbsoluteCursorRow(o)},U.Terminal.prototype.cursorLeft=function(e){if(!((e=e||1)<1)){var t=this.screen_.cursorPosition.column;if(this.options_.reverseWraparound){if(this.screen_.cursorPosition.overflow&&(e--,this.clearCursorOverflow(),!e))return;var r=this.screen_.cursorPosition.row;(o=t-e)<0&&((r=r-Math.floor(e/this.screenSize.width)-1)<0&&(r=this.screenSize.height+r%this.screenSize.height),o=this.screenSize.width+o%this.screenSize.width),this.setCursorPosition(Math.max(r,0),o)}else{var o=Math.max(t-e,0);this.setCursorColumn(o)}}},U.Terminal.prototype.cursorRight=function(e){if(!((e=e||1)<1)){var t=K.f.clamp(this.screen_.cursorPosition.column+e,0,this.screenSize.width-1);this.setCursorColumn(t)}},U.Terminal.prototype.setReverseVideo=function(e){this.options_.reverseVideo=e,e?(this.scrollPort_.setForegroundColor(this.prefs_.get("background-color")),this.scrollPort_.setBackgroundColor(this.prefs_.get("foreground-color"))):(this.scrollPort_.setForegroundColor(this.prefs_.get("foreground-color")),this.scrollPort_.setBackgroundColor(this.prefs_.get("background-color")))},U.Terminal.prototype.ringBell=function(){this.cursorNode_.style.backgroundColor=this.scrollPort_.getForegroundColor();var e=this;if(setTimeout((function(){e.restyleCursor_()}),200),!this.bellSquelchTimeout_&&(this.bellAudio_.getAttribute("src")?(this.bellAudio_.play(),this.bellSequelchTimeout_=setTimeout(function(){delete this.bellSquelchTimeout_}.bind(this),500)):delete this.bellSquelchTimeout_,this.desktopNotificationBell_&&!this.document_.hasFocus())){var t=U.notify();this.bellNotificationList_.push(t),t.onclick=function(){e.closeBellNotifications_()}}},U.Terminal.prototype.setOriginMode=function(e){this.options_.originMode=e,this.setCursorPosition(0,0)},U.Terminal.prototype.setInsertMode=function(e){this.options_.insertMode=e},U.Terminal.prototype.setAutoCarriageReturn=function(e){this.options_.autoCarriageReturn=e},U.Terminal.prototype.setWraparound=function(e){this.options_.wraparound=e},U.Terminal.prototype.setReverseWraparound=function(e){this.options_.reverseWraparound=e},U.Terminal.prototype.setAlternateMode=function(e){var t=this.saveCursor();if(this.screen_=e?this.alternateScreen_:this.primaryScreen_,this.screen_.rowsArray.length&&this.screen_.rowsArray[0].rowIndex!=this.scrollbackRows_.length)for(var r=this.scrollbackRows_.length,o=this.screen_.rowsArray,i=0;i<o.length;i++)o[i].rowIndex=r+i;this.realizeWidth_(this.screenSize.width),this.realizeHeight_(this.screenSize.height),this.scrollPort_.syncScrollHeight(),this.scrollPort_.invalidate(),this.restoreCursor(t),this.scrollPort_.resize()},U.Terminal.prototype.setCursorBlink=function(e){this.options_.cursorBlink=e,!e&&this.timeouts_.cursorBlink&&(clearTimeout(this.timeouts_.cursorBlink),delete this.timeouts_.cursorBlink),this.options_.cursorVisible&&this.setCursorVisible(!0)},U.Terminal.prototype.setCursorVisible=function(e){if(this.options_.cursorVisible=e,!e)return this.timeouts_.cursorBlink&&(clearTimeout(this.timeouts_.cursorBlink),delete this.timeouts_.cursorBlink),void(this.cursorNode_.style.opacity="0");if(this.syncCursorPosition_(),this.cursorNode_.style.opacity="1",this.options_.cursorBlink){if(this.timeouts_.cursorBlink)return;this.onCursorBlink_()}else this.timeouts_.cursorBlink&&(clearTimeout(this.timeouts_.cursorBlink),delete this.timeouts_.cursorBlink)},U.Terminal.prototype.syncCursorPosition_=function(){var e=this.scrollPort_.getTopRowIndex(),t=this.scrollPort_.getBottomRowIndex(e),r=this.scrollbackRows_.length+this.screen_.cursorPosition.row;let o=!1;if(this.accessibilityReader_.accessibilityEnabled){const e=this.screen_.cursorPosition.column,t=this.screen_.rowsArray[this.screen_.cursorPosition.row].innerText;o=this.accessibilityReader_.hasUserGesture,this.accessibilityReader_.afterCursorChange(t,r,e)}if(r>t)return this.setCssVar("cursor-offset-row","-1"),!1;this.options_.cursorVisible&&"none"==this.cursorNode_.style.display&&(this.cursorNode_.style.display=""),this.setCssVar("cursor-offset-row",`${r-e} + `+`${this.scrollPort_.visibleRowTopMargin}px`),this.setCssVar("cursor-offset-col",this.screen_.cursorPosition.column),this.cursorNode_.setAttribute("title","("+this.screen_.cursorPosition.column+", "+this.screen_.cursorPosition.row+")");var i=this.document_.getSelection();return i&&(i.isCollapsed||o)&&this.screen_.syncSelectionCaret(i),!0},U.Terminal.prototype.restyleCursor_=function(){var e=this.cursorShape_;"false"==this.cursorNode_.getAttribute("focus")&&(e=U.Terminal.cursorShape.BLOCK);var t=this.cursorNode_.style;switch(e){case U.Terminal.cursorShape.BEAM:t.height="var(--hterm-charsize-height)",t.backgroundColor="transparent",t.borderBottomStyle=null,t.borderLeftStyle="solid";break;case U.Terminal.cursorShape.UNDERLINE:t.height=this.scrollPort_.characterSize.baseline+"px",t.backgroundColor="transparent",t.borderBottomStyle="solid",t.borderLeftStyle=null;break;default:t.height="var(--hterm-charsize-height)",t.backgroundColor="var(--hterm-cursor-color)",t.borderBottomStyle=null,t.borderLeftStyle=null}},U.Terminal.prototype.scheduleSyncCursorPosition_=function(){if(!this.timeouts_.syncCursor){if(this.accessibilityReader_.accessibilityEnabled){const e=this.scrollbackRows_.length+this.screen_.cursorPosition.row,t=this.screen_.cursorPosition.column,r=this.screen_.rowsArray[this.screen_.cursorPosition.row].innerText;this.accessibilityReader_.beforeCursorChange(r,e,t)}var e=this;this.timeouts_.syncCursor=setTimeout((function(){e.syncCursorPosition_(),delete e.timeouts_.syncCursor}),0)}},U.Terminal.prototype.showZoomWarning_=function(e){if(!this.zoomWarningNode_){if(!e)return;this.zoomWarningNode_=this.document_.createElement("div"),this.zoomWarningNode_.id="hterm:zoom-warning",this.zoomWarningNode_.style.cssText="color: black;background-color: #ff2222;font-size: large;border-radius: 8px;opacity: 0.75;padding: 0.2em 0.5em 0.2em 0.5em;top: 0.5em;right: 1.2em;position: absolute;-webkit-text-size-adjust: none;-webkit-user-select: none;-moz-text-size-adjust: none;-moz-user-select: none;",this.zoomWarningNode_.addEventListener("click",(function(e){this.parentNode.removeChild(this)}))}this.zoomWarningNode_.textContent=K.MessageManager.replaceReferences(U.zoomWarningMessage,[parseInt(100*this.scrollPort_.characterSize.zoomFactor)]),this.zoomWarningNode_.style.fontFamily=this.prefs_.get("font-family"),e?this.zoomWarningNode_.parentNode||this.div_.parentNode.appendChild(this.zoomWarningNode_):this.zoomWarningNode_.parentNode&&this.zoomWarningNode_.parentNode.removeChild(this.zoomWarningNode_)},U.Terminal.prototype.showOverlay=function(e,t){if(!this.overlayNode_){if(!this.div_)return;this.overlayNode_=this.document_.createElement("div"),this.overlayNode_.style.cssText="border-radius: 15px;font-size: xx-large;opacity: 0.75;padding: 0.2em 0.5em 0.2em 0.5em;position: absolute;-webkit-user-select: none;-webkit-transition: opacity 180ms ease-in;-moz-user-select: none;-moz-transition: opacity 180ms ease-in;",this.overlayNode_.addEventListener("mousedown",(function(e){e.preventDefault(),e.stopPropagation()}),!0)}this.overlayNode_.style.color=this.prefs_.get("background-color"),this.overlayNode_.style.backgroundColor=this.prefs_.get("foreground-color"),this.overlayNode_.style.fontFamily=this.prefs_.get("font-family"),this.overlayNode_.textContent=e,this.overlayNode_.style.opacity="0.75",this.overlayNode_.parentNode||this.div_.appendChild(this.overlayNode_);var r=U.getClientSize(this.div_),o=U.getClientSize(this.overlayNode_);this.overlayNode_.style.top=(r.height-o.height)/2+"px",this.overlayNode_.style.left=(r.width-o.width-this.scrollPort_.currentScrollbarWidthPx)/2+"px",this.overlayTimeout_&&clearTimeout(this.overlayTimeout_),this.accessibilityReader_.assertiveAnnounce(e),null!==t&&(this.overlayTimeout_=setTimeout(()=>{this.overlayNode_.style.opacity="0",this.overlayTimeout_=setTimeout(()=>this.hideOverlay(),200)},t||1500))},U.Terminal.prototype.hideOverlay=function(){this.overlayTimeout_&&clearTimeout(this.overlayTimeout_),this.overlayTimeout_=null,this.overlayNode_.parentNode&&this.overlayNode_.parentNode.removeChild(this.overlayNode_),this.overlayNode_.style.opacity="0.75"},U.Terminal.prototype.paste=function(){return U.pasteFromClipboard(this.document_)},U.Terminal.prototype.copyStringToClipboard=function(e){this.prefs_.get("enable-clipboard-notice")&&setTimeout(this.showOverlay.bind(this,U.notifyCopyMessage,500),200);var t=this.document_.createElement("pre");t.id="hterm:copy-to-clipboard-source",t.textContent=e,t.style.cssText="-webkit-user-select: text;-moz-user-select: text;position: absolute;top: -99px",this.document_.body.appendChild(t);var r=this.document_.getSelection(),o=r.anchorNode,i=r.anchorOffset,n=r.focusNode,s=r.focusOffset;try{r.selectAllChildren(t)}catch(e){}U.copySelectionToClipboard(this.document_),r.extend&&(r.collapse(o,i),r.extend(n,s)),t.parentNode.removeChild(t)},U.Terminal.prototype.displayImage=function(e,t,r){if(void 0!==e.uri){if(e.name||(e.name=""),!0!==this.allowImagesInline){this.newLine();const e=this.getRowNode(this.scrollbackRows_.length+this.getCursorRow()-1);if(!1===this.allowImagesInline)return void(e.textContent=U.msg("POPUP_INLINE_IMAGE_DISABLED",[],"Inline Images Disabled"));let t;const r=this.document_.createElement("span");return r.innerText=U.msg("POPUP_INLINE_IMAGE",[],"Inline Images"),r.style.fontWeight="bold",r.style.borderWidth="1px",r.style.borderStyle="dashed",(t=this.document_.createElement("span")).innerText=U.msg("BUTTON_BLOCK",[],"block"),t.style.marginLeft="1em",t.style.borderWidth="1px",t.style.borderStyle="solid",t.addEventListener("click",()=>{this.prefs_.set("allow-images-inline",!1)}),r.appendChild(t),(t=this.document_.createElement("span")).innerText=U.msg("BUTTON_ALLOW_SESSION",[],"allow this session"),t.style.marginLeft="1em",t.style.borderWidth="1px",t.style.borderStyle="solid",t.addEventListener("click",()=>{this.allowImagesInline=!0}),r.appendChild(t),(t=this.document_.createElement("span")).innerText=U.msg("BUTTON_ALLOW_ALWAYS",[],"always allow"),t.style.marginLeft="1em",t.style.borderWidth="1px",t.style.borderStyle="solid",t.addEventListener("click",()=>{this.prefs_.set("allow-images-inline",!0)}),r.appendChild(t),void e.appendChild(r)}if(e.inline){const o=this.io.push();o.showOverlay(U.msg("LOADING_RESOURCE_START",[e.name],"Loading $1 ..."),null),o.onVTKeystroke=o.sendString=()=>{};const i=this.document_.createElement("img");i.src=e.uri,i.title=i.alt=e.name,this.document_.body.appendChild(i),i.onload=()=>{i.style.objectFit=e.preserveAspectRatio?"scale-down":"fill",i.style.maxWidth=`${this.document_.body.clientWidth}px`,i.style.maxHeight=`${this.document_.body.clientHeight}px`;const r=(e,t,r)=>{if(!e||"auto"==e)return"";const o=e.match(/^([0-9]+)(px|%)?$/);return o?"%"==o[2]?t*parseInt(o[1])/100+"px":"px"==o[2]?e:`calc(${e} * var(${r}))`:""};i.style.width=r(e.width,this.document_.body.clientWidth,"--hterm-charsize-width"),i.style.height=r(e.height,this.document_.body.clientHeight,"--hterm-charsize-height");const n=Math.ceil(i.clientHeight/this.scrollPort_.characterSize.height);for(let e=0;e<n;++e)this.newLine();i.style.maxHeight=`calc(${n} * var(--hterm-charsize-height))`,this.document_.body.removeChild(i);const s=this.document_.createElement("div");s.style.position="relative",s.style.textAlign=e.align,i.style.position="absolute",i.style.bottom="calc(0px - var(--hterm-charsize-height))",s.appendChild(i),this.getRowNode(this.scrollbackRows_.length+this.getCursorRow()-1).appendChild(s),o.hideOverlay(),o.pop(),t&&t()},i.onerror=t=>{this.document_.body.removeChild(i),o.showOverlay(U.msg("LOADING_RESOURCE_FAILED",[e.name],"Loading $1 failed")),o.pop(),r&&r(t)}}else{const t=this.document_.createElement("a");t.href=e.uri,t.download=e.name,this.document_.body.appendChild(t),t.click(),t.remove()}}},U.Terminal.prototype.getSelectionText=function(){var e=this.scrollPort_.selection;if(e.sync(),e.isCollapsed)return null;var t=e.startOffset,r=e.startNode;if(!r)return null;if("X-ROW"!=r.nodeName)for("#text"==r.nodeName&&"SPAN"==r.parentNode.nodeName&&(r=r.parentNode);r.previousSibling;)r=r.previousSibling,t+=U.TextAttributes.nodeWidth(r);var o=U.TextAttributes.nodeWidth(e.endNode)-e.endOffset;if("X-ROW"!=(r=e.endNode).nodeName)for("#text"==r.nodeName&&"SPAN"==r.parentNode.nodeName&&(r=r.parentNode);r.nextSibling;)r=r.nextSibling,o+=U.TextAttributes.nodeWidth(r);var i=this.getRowsText(e.startRow.rowIndex,e.endRow.rowIndex+1);return K.wc.substring(i,t,K.wc.strWidth(i)-o)},U.Terminal.prototype.copySelectionToClipboard=function(){var e=this.getSelectionText();null!=e&&this.copyStringToClipboard(e)},U.Terminal.prototype.overlaySize=function(){this.showOverlay(this.screenSize.width+"x"+this.screenSize.height)},U.Terminal.prototype.onVTKeystroke=function(e){this.scrollOnKeystroke_&&this.scrollPort_.scrollRowToBottom(this.getRowCount()),this.io.onVTKeystroke(this.keyboard.encode(e))},U.Terminal.prototype.openSelectedUrl_=function(){var e=this.getSelectionText();if((null!=e||(this.screen_.expandSelectionForUrl(this.document_.getSelection()),null!=(e=this.getSelectionText())))&&!(e.length>2048||e.search(/[\s\[\](){}<>"'\\^`]/)>=0)){if(e.search("^[a-zA-Z][a-zA-Z0-9+.-]*://")<0)switch(e.split(":",1)[0]){case"mailto":break;default:e="http://"+e}U.openUrl(e)}},U.Terminal.prototype.setAutomaticMouseHiding=function(e=null){null===e&&(e="cros"!=U.os&&"mac"!=U.os),this.mouseHideWhileTyping_=!!e},U.Terminal.prototype.onKeyboardActivity_=function(e){this.mouseHideWhileTyping_&&!this.mouseHideDelay_&&this.setCssVar("mouse-cursor-style","none")},U.Terminal.prototype.onMouse_=function(e){if(!e.processedByTerminalHandler_){e.button>2&&e.preventDefault();var t=!this.defeatMouseReports_&&this.vt.mouseReport!=this.vt.MOUSE_REPORT_DISABLED;if(e.processedByTerminalHandler_=!0,this.mouseHideWhileTyping_&&!this.mouseHideDelay_&&(this.syncMouseStyle(),this.mouseHideDelay_=setTimeout(()=>this.mouseHideDelay_=null,1e3)),e.terminalRow=parseInt((e.clientY-this.scrollPort_.visibleRowTopMargin)/this.scrollPort_.characterSize.height)+1,e.terminalColumn=parseInt(e.clientX/this.scrollPort_.characterSize.width)+1,!("mousedown"==e.type&&e.terminalColumn>this.screenSize.width)){if(this.options_.cursorVisible&&!t&&(e.terminalRow-1==this.screen_.cursorPosition.row&&e.terminalColumn-1==this.screen_.cursorPosition.column?this.cursorNode_.style.display="none":"none"==this.cursorNode_.style.display&&(this.cursorNode_.style.display="")),"mousedown"==e.type&&(this.contextMenu.hide(e),e.altKey||!t?(this.defeatMouseReports_=!0,this.setSelectionEnabled(!0)):(this.defeatMouseReports_=!1,this.document_.getSelection().collapseToEnd(),this.setSelectionEnabled(!1),e.preventDefault())),t)this.scrollBlockerNode_.engaged||("mousedown"==e.type?(this.scrollBlockerNode_.engaged=!0,this.scrollBlockerNode_.style.top=e.clientY-5+"px",this.scrollBlockerNode_.style.left=e.clientX-5+"px"):"mousemove"==e.type&&(this.document_.getSelection().collapseToEnd(),e.preventDefault())),this.onMouse(e);else{if("dblclick"==e.type&&(this.screen_.expandSelection(this.document_.getSelection()),this.copyOnSelect&&this.copySelectionToClipboard(this.document_)),"click"==e.type&&!e.shiftKey&&(e.ctrlKey||e.metaKey))return clearTimeout(this.timeouts_.openUrl),void(this.timeouts_.openUrl=setTimeout(this.openSelectedUrl_.bind(this),500));if("mousedown"==e.type&&(e.ctrlKey&&2==e.button?(e.preventDefault(),this.contextMenu.show(e,this)):(e.button==this.mousePasteButton||this.mouseRightClickPaste&&2==e.button)&&(this.paste()||console.warn("Could not paste manually due to web restrictions"))),"mouseup"==e.type&&0==e.button&&this.copyOnSelect&&!this.document_.getSelection().isCollapsed&&this.copySelectionToClipboard(this.document_),"mousemove"!=e.type&&"mouseup"!=e.type||!this.scrollBlockerNode_.engaged||(this.scrollBlockerNode_.engaged=!1,this.scrollBlockerNode_.style.top="-99px"),this.scrollWheelArrowKeys_&&!e.shiftKey&&this.keyboard.applicationCursor&&!this.isPrimaryScreen()&&"wheel"==e.type){const t=this.scrollPort_.scrollWheelDelta(e),r=(e,t,r,o)=>{if(0==e)return"";const i=K.f.smartFloorDivide(Math.abs(e),t);return("O"+(e<0?o:r)).repeat(i)};this.io.sendString(r(t.y,this.scrollPort_.characterSize.height,"A","B")+r(t.x,this.scrollPort_.characterSize.width,"C","D")),e.preventDefault()}}"mouseup"==e.type&&this.document_.getSelection().isCollapsed&&(this.defeatMouseReports_=!1)}}},U.Terminal.prototype.onMouse=function(e){},U.Terminal.prototype.onFocusChange_=function(e){this.cursorNode_.setAttribute("focus",e),this.restyleCursor_(),this.reportFocus&&this.io.sendString(!0===e?"[I":"[O"),!0===e&&this.closeBellNotifications_()},U.Terminal.prototype.onScroll_=function(){this.scheduleSyncCursorPosition_()},U.Terminal.prototype.onPaste_=function(e){var t=e.text.replace(/\n/gm,"\r");if(t=this.keyboard.encode(t),this.options_.bracketedPaste){const e=e=>e.replace(/[\x00-\x07\x0b-\x0c\x0e-\x1f]/g,"");t="[200~"+e(t)+"[201~"}this.io.sendString(t)},U.Terminal.prototype.onCopy_=function(e){this.useDefaultWindowCopy||(e.preventDefault(),setTimeout(this.copySelectionToClipboard.bind(this),0))},U.Terminal.prototype.onResize_=function(){var e=Math.floor(this.scrollPort_.getScreenWidth()/this.scrollPort_.characterSize.width)||0,t=K.f.smartFloorDivide(this.scrollPort_.getScreenHeight(),this.scrollPort_.characterSize.height)||0;if(!(e<=0||t<=0)){var r=e!=this.screenSize.width||t!=this.screenSize.height;this.realizeSize_(e,t),this.showZoomWarning_(1!=this.scrollPort_.characterSize.zoomFactor),r&&this.overlaySize(),this.restyleCursor_(),this.scheduleSyncCursorPosition_()}},U.Terminal.prototype.onCursorBlink_=function(){this.options_.cursorBlink?"false"==this.cursorNode_.getAttribute("focus")||"0"==this.cursorNode_.style.opacity?(this.cursorNode_.style.opacity="1",this.timeouts_.cursorBlink=setTimeout(this.myOnCursorBlink_,this.cursorBlinkCycle_[0])):(this.cursorNode_.style.opacity="0",this.timeouts_.cursorBlink=setTimeout(this.myOnCursorBlink_,this.cursorBlinkCycle_[1])):delete this.timeouts_.cursorBlink},U.Terminal.prototype.setScrollbarVisible=function(e){this.scrollPort_.setScrollbarVisible(e)},U.Terminal.prototype.setScrollWheelMoveMultipler=function(e){this.scrollPort_.setScrollWheelMoveMultipler(e)},U.Terminal.prototype.closeBellNotifications_=function(){this.bellNotificationList_.forEach((function(e){e.close()})),this.bellNotificationList_.length=0},U.Terminal.prototype.onScrollportFocus_=function(){const e=this.scrollPort_.getTopRowIndex(),t=this.scrollPort_.getBottomRowIndex(e),r=this.document_.getSelection();!this.syncCursorPosition_()&&r&&r.collapse(this.getRowNode(t))},K.rtdep("lib.encodeUTF8"),U.Terminal.IO=function(e){this.terminal_=e,this.previousIO_=null,this.buffered_=""},U.Terminal.IO.prototype.showOverlay=function(e,t){this.terminal_.showOverlay(e,t)},U.Terminal.IO.prototype.hideOverlay=function(){this.terminal_.hideOverlay()},U.Terminal.IO.prototype.createFrame=function(e,t){return new U.Frame(this.terminal_,e,t)},U.Terminal.IO.prototype.setTerminalProfile=function(e){this.terminal_.setProfile(e)},U.Terminal.IO.prototype.push=function(){var e=new U.Terminal.IO(this.terminal_);return e.keyboardCaptured_=this.keyboardCaptured_,e.columnCount=this.columnCount,e.rowCount=this.rowCount,e.previousIO_=this.terminal_.io,this.terminal_.io=e,e},U.Terminal.IO.prototype.pop=function(){this.terminal_.io=this.previousIO_,this.previousIO_.flush()},U.Terminal.IO.prototype.flush=function(){this.buffered_&&(this.terminal_.interpret(this.buffered_),this.buffered_="")},U.Terminal.IO.prototype.sendString=function(e){console.log("Unhandled sendString: "+e)},U.Terminal.IO.prototype.onVTKeystroke=function(e){console.log("Unobserverd VT keystroke: "+JSON.stringify(e))},U.Terminal.IO.prototype.onTerminalResize_=function(e,t){for(var r=this;r;)r.columnCount=e,r.rowCount=t,r=r.previousIO_;this.onTerminalResize(e,t)},U.Terminal.IO.prototype.onTerminalResize=function(e,t){},U.Terminal.IO.prototype.writeUTF8=function(e){this.terminal_.io==this?this.terminal_.interpret(e):this.buffered_+=e},U.Terminal.IO.prototype.writelnUTF8=function(e){this.writeUTF8(e+"\r\n")},U.Terminal.IO.prototype.print=U.Terminal.IO.prototype.writeUTF16=function(e){this.writeUTF8(K.encodeUTF8(e))},U.Terminal.IO.prototype.println=U.Terminal.IO.prototype.writelnUTF16=function(e){this.writelnUTF8(K.encodeUTF8(e))},K.rtdep("lib.colors"),U.TextAttributes=function(e){this.document_=e,this.foregroundSource=this.SRC_DEFAULT,this.backgroundSource=this.SRC_DEFAULT,this.underlineSource=this.SRC_DEFAULT,this.foreground=this.DEFAULT_COLOR,this.background=this.DEFAULT_COLOR,this.underlineColor=this.DEFAULT_COLOR,this.defaultForeground="rgb(255, 255, 255)",this.defaultBackground="rgb(0, 0, 0)",this.bold=!1,this.faint=!1,this.italic=!1,this.blink=!1,this.underline=!1,this.strikethrough=!1,this.inverse=!1,this.invisible=!1,this.wcNode=!1,this.asciiNode=!0,this.tileData=null,this.uri=null,this.uriId=null,this.colorPalette=null,this.resetColorPalette()},U.TextAttributes.prototype.enableBold=!0,U.TextAttributes.prototype.enableBoldAsBright=!0,U.TextAttributes.prototype.DEFAULT_COLOR=K.f.createEnum(""),U.TextAttributes.prototype.SRC_DEFAULT="default",U.TextAttributes.prototype.setDocument=function(e){this.document_=e},U.TextAttributes.prototype.clone=function(){var e=new U.TextAttributes(null);for(var t in this)e[t]=this[t];return e.colorPalette=this.colorPalette.concat(),e},U.TextAttributes.prototype.reset=function(){this.foregroundSource=this.SRC_DEFAULT,this.backgroundSource=this.SRC_DEFAULT,this.underlineSource=this.SRC_DEFAULT,this.foreground=this.DEFAULT_COLOR,this.background=this.DEFAULT_COLOR,this.underlineColor=this.DEFAULT_COLOR,this.bold=!1,this.faint=!1,this.italic=!1,this.blink=!1,this.underline=!1,this.strikethrough=!1,this.inverse=!1,this.invisible=!1,this.wcNode=!1,this.asciiNode=!0,this.uri=null,this.uriId=null},U.TextAttributes.prototype.resetColorPalette=function(){this.colorPalette=K.colors.colorPalette.concat(),this.syncColors()},U.TextAttributes.prototype.resetColor=function(e){e=parseInt(e,10),isNaN(e)||e>=this.colorPalette.length||(this.colorPalette[e]=K.colors.stockColorPalette[e],this.syncColors())},U.TextAttributes.prototype.isDefault=function(){return this.foregroundSource==this.SRC_DEFAULT&&this.backgroundSource==this.SRC_DEFAULT&&!this.bold&&!this.faint&&!this.italic&&!this.blink&&!this.underline&&!this.strikethrough&&!this.inverse&&!this.invisible&&!this.wcNode&&this.asciiNode&&null==this.tileData&&null==this.uri},U.TextAttributes.prototype.createContainer=function(e){if(this.isDefault()){const t=this.document_.createTextNode(e);return t.asciiNode=!0,t}var t=this.document_.createElement("span"),r=t.style,o=[];this.foreground!=this.DEFAULT_COLOR&&(r.color=this.foreground),this.background!=this.DEFAULT_COLOR&&(r.backgroundColor=this.background),this.enableBold&&this.bold&&(r.fontWeight="bold"),this.faint&&(t.faint=!0),this.italic&&(r.fontStyle="italic"),this.blink&&(o.push("blink-node"),t.blinkNode=!0);let i="";return t.underline=this.underline,this.underline&&(i+=" underline",r.textDecorationStyle=this.underline),this.underlineSource!=this.SRC_DEFAULT&&(r.textDecorationColor=this.underlineColor),this.strikethrough&&(i+=" line-through",t.strikethrough=!0),i&&(r.textDecorationLine=i),this.wcNode&&(o.push("wc-node"),t.wcNode=!0),t.asciiNode=this.asciiNode,null!=this.tileData&&(o.push("tile"),o.push("tile_"+this.tileData),t.tileNode=!0),e&&(t.textContent=e),this.uri&&(o.push("uri-node"),t.uriId=this.uriId,t.title=this.uri,t.addEventListener("click",U.openUrl.bind(this,this.uri))),o.length&&(t.className=o.join(" ")),t},U.TextAttributes.prototype.matchesContainer=function(e){if("string"==typeof e||e.nodeType==Node.TEXT_NODE)return this.isDefault();var t=e.style;return!(this.wcNode||e.wcNode||this.asciiNode!=e.asciiNode||null!=this.tileData||e.tileNode||this.uriId!=e.uriId||this.foreground!=t.color||this.background!=t.backgroundColor||this.underlineColor!=t.textDecorationColor||(this.enableBold&&this.bold)!=!!t.fontWeight||this.blink!=!!e.blinkNode||this.italic!=!!t.fontStyle||this.underline!=e.underline||!!this.strikethrough!=!!e.strikethrough)},U.TextAttributes.prototype.setDefaults=function(e,t){this.defaultForeground=e,this.defaultBackground=t,this.syncColors()},U.TextAttributes.prototype.syncColors=function(){const e=(e,t)=>e==this.DEFAULT_COLOR?t:e;var t,r=this.foregroundSource,o=this.backgroundSource;if(this.enableBoldAsBright&&this.bold&&Number.isInteger(r)&&(r=(t=r)<8?t+8:t),r==this.SRC_DEFAULT?this.foreground=this.DEFAULT_COLOR:Number.isInteger(r)?this.foreground=this.colorPalette[r]:this.foreground=r,this.faint){const t=e(this.foreground,this.defaultForeground);this.foreground=K.colors.mix(t,"rgb(0, 0, 0)",.3333)}if(o==this.SRC_DEFAULT?this.background=this.DEFAULT_COLOR:Number.isInteger(o)?this.background=this.colorPalette[o]:this.background=o,this.inverse){const t=e(this.foreground,this.defaultForeground);this.foreground=e(this.background,this.defaultBackground),this.background=t}this.invisible&&(this.foreground=this.background),this.underlineSource==this.SRC_DEFAULT?this.underlineColor="":Number.isInteger(this.underlineSource)?this.underlineColor=this.colorPalette[this.underlineSource]:this.underlineColor=this.underlineSource},U.TextAttributes.containersMatch=function(e,t){if("string"==typeof e)return U.TextAttributes.containerIsDefault(t);if(e.nodeType!=t.nodeType)return!1;if(e.nodeType==Node.TEXT_NODE)return!0;var r=e.style,o=t.style;return r.color==o.color&&r.backgroundColor==o.backgroundColor&&r.backgroundColor==o.backgroundColor&&r.fontWeight==o.fontWeight&&r.fontStyle==o.fontStyle&&r.textDecoration==o.textDecoration&&r.textDecorationColor==o.textDecorationColor&&r.textDecorationStyle==o.textDecorationStyle&&r.textDecorationLine==o.textDecorationLine},U.TextAttributes.containerIsDefault=function(e){return"string"==typeof e||e.nodeType==Node.TEXT_NODE},U.TextAttributes.nodeWidth=function(e){return e.asciiNode?e.textContent.length:K.wc.strWidth(e.textContent)},U.TextAttributes.nodeSubstr=function(e,t,r){return e.asciiNode?e.textContent.substr(t,r):K.wc.substr(e.textContent,t,r)},U.TextAttributes.nodeSubstring=function(e,t,r){return e.asciiNode?e.textContent.substring(t,r):K.wc.substring(e.textContent,t,r)},U.TextAttributes.splitWidecharString=function(e){for(var t,r=[],o=0,i=0,n=0,s=!0,a=0;a<e.length;){var l,c=e.codePointAt(a);c<128?(n+=1,i+=1,l=1):(l=c<=65535?1:2,(t=K.wc.charWidth(c))<=1?(n+=t,i+=l,s=!1):(i&&(r.push({str:e.substr(o,i),asciiNode:s,wcStrWidth:n}),s=!0,n=0),r.push({str:e.substr(a,l),wcNode:!0,asciiNode:!1,wcStrWidth:2}),o=a+l,i=0)),a+=l}return i&&r.push({str:e.substr(o,i),asciiNode:s,wcStrWidth:n}),r},K.rtdep("lib.colors","lib.f","lib.UTF8Decoder","hterm.VT.CharacterMap"),U.VT=function(e){this.terminal=e,e.onMouse=this.onTerminalMouse_.bind(this),this.mouseReport=this.MOUSE_REPORT_DISABLED,this.mouseCoordinates=this.MOUSE_COORDINATES_X10,this.lastMouseDragResponse_=null,this.parseState_=new U.VT.ParseState(this.parseUnknown_),this.leadingModifier_="",this.trailingModifier_="",this.allowColumnWidthChanges_=!1,this.oscTimeLimit_=2e4,this.utf8Decoder_=new K.UTF8Decoder,this.enable8BitControl=!1,this.enableClipboardWrite=!0,this.enableDec12=!1,this.enableCsiJ3=!0,this.characterEncoding="utf-8",this.warnUnimplemented=!1,this.characterMaps=new U.VT.CharacterMaps,this.G0=this.G1=this.G2=this.G3=this.characterMaps.getMap("B"),this.GL="G0",this.GR="G0",this.codingSystemUtf8_=!1,this.codingSystemLocked_=!1,this.cc1Pattern_=null,this.updateEncodingState_()},U.VT.prototype.MOUSE_REPORT_DISABLED=0,U.VT.prototype.MOUSE_REPORT_PRESS=1,U.VT.prototype.MOUSE_REPORT_CLICK=2,U.VT.prototype.MOUSE_REPORT_DRAG=3,U.VT.prototype.MOUSE_COORDINATES_X10=0,U.VT.prototype.MOUSE_COORDINATES_UTF8=1,U.VT.prototype.MOUSE_COORDINATES_SGR=2,U.VT.ParseState=function(e,t){this.defaultFunction=e,this.buf=t||null,this.pos=0,this.func=e,this.args=[],this.subargs=null},U.VT.ParseState.prototype.reset=function(e){this.resetParseFunction(),this.resetBuf(e||""),this.resetArguments()},U.VT.ParseState.prototype.resetParseFunction=function(){this.func=this.defaultFunction},U.VT.ParseState.prototype.resetBuf=function(e){this.buf="string"==typeof e?e:null,this.pos=0},U.VT.ParseState.prototype.resetArguments=function(e){this.args.length=0,void 0!==e&&(this.args[0]=e)},U.VT.ParseState.prototype.parseInt=function(e,t){if(void 0===t&&(t=0),e){const r=parseInt(e,10);return 0==r?t:r}return t},U.VT.ParseState.prototype.iarg=function(e,t){return this.parseInt(this.args[e],t)},U.VT.ParseState.prototype.argHasSubargs=function(e){return this.subargs&&this.subargs[e]},U.VT.ParseState.prototype.argSetSubargs=function(e){null===this.subargs&&(this.subargs={}),this.subargs[e]=!0},U.VT.ParseState.prototype.advance=function(e){this.pos+=e},U.VT.ParseState.prototype.peekRemainingBuf=function(){return this.buf.substr(this.pos)},U.VT.ParseState.prototype.peekChar=function(){return this.buf.substr(this.pos,1)},U.VT.ParseState.prototype.consumeChar=function(){return this.buf.substr(this.pos++,1)},U.VT.ParseState.prototype.isComplete=function(){return null==this.buf||this.buf.length<=this.pos},U.VT.prototype.reset=function(){this.G0=this.G1=this.G2=this.G3=this.characterMaps.getMap("B"),this.GL="G0",this.GR="G0",this.mouseReport=this.MOUSE_REPORT_DISABLED,this.mouseCoordinates=this.MOUSE_COORDINATES_X10,this.lastMouseDragResponse_=null},U.VT.prototype.onTerminalMouse_=function(e){if(this.mouseReport==this.MOUSE_REPORT_DISABLED)return;if(this.mouseReport!=this.MOUSE_REPORT_DRAG&&"mousemove"==e.type)return;var t,r=0;let o,i;this.mouseReport!=this.MOUSE_REPORT_PRESS&&(e.shiftKey&&(r|=4),(e.metaKey||this.terminal.keyboard.altIsMeta&&e.altKey)&&(r|=8),e.ctrlKey&&(r|=16));let n=255;switch(this.mouseCoordinates){case this.MOUSE_COORDINATES_UTF8:n=2047;case this.MOUSE_COORDINATES_X10:o=String.fromCharCode(K.f.clamp(e.terminalColumn+32,32,n)),i=String.fromCharCode(K.f.clamp(e.terminalRow+32,32,n));break;case this.MOUSE_COORDINATES_SGR:o=e.terminalColumn,i=e.terminalRow}switch(e.type){case"wheel":s=64+(-1*e.deltaY>0?0:1),s|=r,t=this.mouseCoordinates==this.MOUSE_COORDINATES_SGR?`[<${s};${o};${i}M`:"[M"+String.fromCharCode(s+32)+o+i,e.preventDefault();break;case"mousedown":var s=Math.min(e.button,2);this.mouseCoordinates!=this.MOUSE_COORDINATES_SGR&&(s+=32),s|=r,t=this.mouseCoordinates==this.MOUSE_COORDINATES_SGR?`[<${s};${o};${i}M`:"[M"+String.fromCharCode(s)+o+i;break;case"mouseup":this.mouseReport!=this.MOUSE_REPORT_PRESS&&(t=this.mouseCoordinates==this.MOUSE_COORDINATES_SGR?`[<${e.button};${o};${i}m`:"[M#"+o+i);break;case"mousemove":this.mouseReport==this.MOUSE_REPORT_DRAG&&e.buttons&&(s=this.mouseCoordinates==this.MOUSE_COORDINATES_SGR?0:32,1&e.buttons?s+=0:4&e.buttons?s+=1:2&e.buttons?s+=2:s+=3,s+=32,s|=r,t=this.mouseCoordinates==this.MOUSE_COORDINATES_SGR?`[<${s};${o};${i}M`:"[M"+String.fromCharCode(s)+o+i,this.lastMouseDragResponse_==t?t="":this.lastMouseDragResponse_=t);break;case"click":case"dblclick":break;default:console.error("Unknown mouse event: "+e.type,e)}t&&this.terminal.io.sendString(t)},U.VT.prototype.interpret=function(e){for(this.parseState_.resetBuf(this.decode(e));!this.parseState_.isComplete();){var t=this.parseState_.func,r=this.parseState_.pos;e=this.parseState_.buf;if(this.parseState_.func.call(this,this.parseState_),this.parseState_.func==t&&this.parseState_.pos==r&&this.parseState_.buf==e)throw"Parser did not alter the state!"}},U.VT.prototype.decode=function(e){return"utf-8"==this.characterEncoding?this.decodeUTF8(e):e},U.VT.prototype.encodeUTF8=function(e){return K.encodeUTF8(e)},U.VT.prototype.decodeUTF8=function(e){return this.utf8Decoder_.decode(e)},U.VT.prototype.setEncoding=function(e){switch(e){default:console.warn('Invalid value for "terminal-encoding": '+e);case"iso-2022":this.codingSystemUtf8_=!1,this.codingSystemLocked_=!1;break;case"utf-8-locked":this.codingSystemUtf8_=!0,this.codingSystemLocked_=!0;break;case"utf-8":this.codingSystemUtf8_=!0,this.codingSystemLocked_=!1}this.updateEncodingState_()},U.VT.prototype.updateEncodingState_=function(){var e=Object.keys(U.VT.CC1).filter(e=>!this.codingSystemUtf8_||e.charCodeAt()<128).map(e=>"\\x"+K.f.zpad(e.charCodeAt().toString(16),2)).join("");this.cc1Pattern_=new RegExp(`[${e}]`)},U.VT.prototype.parseUnknown_=function(e){var t=this;function r(e){!t.codingSystemUtf8_&&t[t.GL].GL&&(e=t[t.GL].GL(e)),t.terminal.print(e)}var o=e.peekRemainingBuf(),i=o.search(this.cc1Pattern_);return 0==i?(this.dispatch("CC1",o.substr(0,1),e),void e.advance(1)):-1==i?(r(o),void e.reset()):(r(o.substr(0,i)),this.dispatch("CC1",o.substr(i,1),e),void e.advance(i+1))},U.VT.prototype.parseCSI_=function(e){var t=e.peekChar(),r=e.args;const o=()=>{e.resetArguments(),e.subargs=null,e.resetParseFunction()};t>="@"&&t<="~"?(this.dispatch("CSI",this.leadingModifier_+this.trailingModifier_+t,e),o()):";"==t?this.trailingModifier_?o():(r.length||r.push(""),r.push("")):t>="0"&&t<="9"||":"==t?this.trailingModifier_?o():(r.length?r[r.length-1]+=t:r[0]=t,":"==t&&e.argSetSubargs(r.length-1)):t>=" "&&t<="?"?r.length?this.trailingModifier_+=t:this.leadingModifier_+=t:this.cc1Pattern_.test(t)?this.dispatch("CC1",t,e):o(),e.advance(1)},U.VT.prototype.parseUntilStringTerminator_=function(e){var t=e.peekRemainingBuf(),r=e.args;let o=0;r.length?""==r[0].slice(-1)&&(r[0]=r[0].slice(0,-1),t=""+t,o=1):(r[0]="",r[1]=new Date);const i=t.search(/[\x1b\x07]/),n=t[i];let s;var a;return(s=(""!=n||"\\"==t[i+1])&&-1!=i)?(r[0]+=t.substr(0,i),e.resetParseFunction(),e.advance(i+(""==n?2:1)-o),!0):(r[0]+=t,""==n&&i!=t.length-1&&(a="embedded escape: "+i),new Date-r[1]>this.oscTimeLimit_&&(a="timeout expired: "+(new Date-r[1])),a?(this.warnUnimplemented&&console.log("parseUntilStringTerminator_: aborting: "+a,r[0]),e.reset(r[0]),!1):(e.advance(t.length-o),!0))},U.VT.prototype.dispatch=function(e,t,r){var o=U.VT[e][t];o?o!=U.VT.ignore?!r.subargs||o.supportsSubargs?"CC1"==e&&t>""&&!this.enable8BitControl?console.warn("Ignoring 8-bit control code: 0x"+t.charCodeAt(0).toString(16)):o.apply(this,[r,t]):this.warnUnimplemented&&console.warn("Ignored "+e+" code w/subargs: "+JSON.stringify(t)):this.warnUnimplemented&&console.warn("Ignored "+e+" code: "+JSON.stringify(t)):this.warnUnimplemented&&console.warn("Unknown "+e+" code: "+JSON.stringify(t))},U.VT.prototype.setANSIMode=function(e,t){4==e?this.terminal.setInsertMode(t):20==e?this.terminal.setAutoCarriageReturn(t):this.warnUnimplemented&&console.warn("Unimplemented ANSI Mode: "+e)},U.VT.prototype.setDECMode=function(e,t){switch(parseInt(e,10)){case 1:this.terminal.keyboard.applicationCursor=t;break;case 3:this.allowColumnWidthChanges_&&(this.terminal.setWidth(t?132:80),this.terminal.clearHome(),this.terminal.setVTScrollRegion(null,null));break;case 5:this.terminal.setReverseVideo(t);break;case 6:this.terminal.setOriginMode(t);break;case 7:this.terminal.setWraparound(t);break;case 9:this.mouseReport=t?this.MOUSE_REPORT_PRESS:this.MOUSE_REPORT_DISABLED,this.terminal.syncMouseStyle();break;case 12:this.enableDec12&&this.terminal.setCursorBlink(t);break;case 25:this.terminal.setCursorVisible(t);break;case 30:this.terminal.setScrollbarVisible(t);break;case 40:this.terminal.allowColumnWidthChanges_=t;break;case 45:this.terminal.setReverseWraparound(t);break;case 67:this.terminal.keyboard.backspaceSendsBackspace=t;break;case 1e3:this.mouseReport=t?this.MOUSE_REPORT_CLICK:this.MOUSE_REPORT_DISABLED,this.terminal.syncMouseStyle();break;case 1002:this.mouseReport=t?this.MOUSE_REPORT_DRAG:this.MOUSE_REPORT_DISABLED,this.terminal.syncMouseStyle();break;case 1004:this.terminal.reportFocus=t;break;case 1005:this.mouseCoordinates=t?this.MOUSE_COORDINATES_UTF8:this.MOUSE_COORDINATES_X10;break;case 1006:this.mouseCoordinates=t?this.MOUSE_COORDINATES_SGR:this.MOUSE_COORDINATES_X10;break;case 1007:this.terminal.scrollWheelArrowKeys_=t;break;case 1010:this.terminal.scrollOnOutput=t;break;case 1011:this.terminal.scrollOnKeystroke=t;break;case 1036:this.terminal.keyboard.metaSendsEscape=t;break;case 1039:t?this.terminal.keyboard.previousAltSendsWhat_||(this.terminal.keyboard.previousAltSendsWhat_=this.terminal.keyboard.altSendsWhat,this.terminal.keyboard.altSendsWhat="escape"):this.terminal.keyboard.previousAltSendsWhat_&&(this.terminal.keyboard.altSendsWhat=this.terminal.keyboard.previousAltSendsWhat_,this.terminal.keyboard.previousAltSendsWhat_=null);break;case 47:case 1047:this.terminal.setAlternateMode(t);break;case 1048:t?this.terminal.saveCursorAndState():this.terminal.restoreCursorAndState();break;case 1049:t?(this.terminal.saveCursorAndState(),this.terminal.setAlternateMode(t),this.terminal.clear()):(this.terminal.setAlternateMode(t),this.terminal.restoreCursorAndState());break;case 2004:this.terminal.setBracketedPaste(t);break;default:this.warnUnimplemented&&console.warn("Unimplemented DEC Private Mode: "+e)}},U.VT.ignore=function(){},U.VT.CC1={},U.VT.ESC={},U.VT.CSI={},U.VT.OSC={},U.VT.VT52={},U.VT.CC1["\0"]=U.VT.ignore,U.VT.CC1[""]=U.VT.ignore,U.VT.CC1[""]=function(){this.terminal.ringBell()},U.VT.CC1["\b"]=function(){this.terminal.cursorLeft(1)},U.VT.CC1["\t"]=function(){this.terminal.forwardTabStop()},U.VT.CC1["\n"]=function(){this.terminal.formFeed()},U.VT.CC1["\v"]=U.VT.CC1["\n"],U.VT.CC1["\f"]=U.VT.CC1["\n"],U.VT.CC1["\r"]=function(){this.terminal.setCursorColumn(0)},U.VT.CC1[""]=function(){this.GL="G1"},U.VT.CC1[""]=function(){this.GL="G0"},U.VT.CC1[""]=U.VT.ignore,U.VT.CC1[""]=U.VT.ignore,U.VT.CC1[""]=function(e){"G1"==this.GL&&(this.GL="G0"),e.resetParseFunction(),this.terminal.print("?")},U.VT.CC1[""]=U.VT.CC1[""],U.VT.CC1[""]=function(e){e.func=function e(t){var r=t.consumeChar();""!=r&&(this.dispatch("ESC",r,t),t.func==e&&t.resetParseFunction())}},U.VT.CC1[""]=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC.D=function(){this.terminal.lineFeed()},U.VT.CC1[""]=U.VT.ESC.E=function(){this.terminal.setCursorColumn(0),this.terminal.cursorDown(1)},U.VT.CC1[""]=U.VT.ESC.H=function(){this.terminal.setTabStop(this.terminal.getCursorColumn())},U.VT.CC1[""]=U.VT.ESC.M=function(){this.terminal.reverseLineFeed()},U.VT.CC1[""]=U.VT.ESC.N=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC.O=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC.P=function(e){e.resetArguments(),e.func=this.parseUntilStringTerminator_},U.VT.CC1[""]=U.VT.ESC.V=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC.W=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC.X=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC.Z=function(){this.terminal.io.sendString("[?1;2c")},U.VT.CC1[""]=U.VT.ESC["["]=function(e){e.resetArguments(),this.leadingModifier_="",this.trailingModifier_="",e.func=this.parseCSI_},U.VT.CC1[""]=U.VT.ESC["\\"]=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC["]"]=function(e){e.resetArguments(),e.func=function e(t){if(this.parseUntilStringTerminator_(t)&&t.func!=e){var r=t.args[0].match(/^(\d+);(.*)$/);r?(t.args[0]=r[2],this.dispatch("OSC",r[1],t)):console.warn("Invalid OSC: "+JSON.stringify(t.args[0])),t.resetArguments()}}},U.VT.CC1[""]=U.VT.ESC["^"]=function(e){e.resetArguments(),e.func=this.parseUntilStringTerminator_},U.VT.CC1[""]=U.VT.ESC._=function(e){e.resetArguments(),e.func=this.parseUntilStringTerminator_},U.VT.ESC[" "]=function(e){e.func=function(e){var t=e.consumeChar();this.warnUnimplemented&&console.warn("Unimplemented sequence: ESC 0x20 "+t),e.resetParseFunction()}},U.VT.ESC["#"]=function(e){e.func=function(e){"8"==e.consumeChar()&&(this.terminal.setCursorPosition(0,0),this.terminal.fill("E")),e.resetParseFunction()}},U.VT.ESC["%"]=function(e){e.func=function(e){var t=e.consumeChar();if(this.codingSystemLocked_)return"/"==t&&e.consumeChar(),void e.resetParseFunction();switch(t){case"@":this.setEncoding("iso-2022");break;case"G":this.setEncoding("utf-8");break;case"/":switch(t=e.consumeChar()){case"G":case"H":case"I":this.setEncoding("utf-8-locked");break;default:this.warnUnimplemented&&console.warn("Unknown ESC % / argument: "+JSON.stringify(t))}break;default:this.warnUnimplemented&&console.warn("Unknown ESC % argument: "+JSON.stringify(t))}e.resetParseFunction()}},U.VT.ESC["("]=U.VT.ESC[")"]=U.VT.ESC["*"]=U.VT.ESC["+"]=U.VT.ESC["-"]=U.VT.ESC["."]=U.VT.ESC["/"]=function(e,t){e.func=function(e){var r=e.consumeChar();if(""==r)return e.resetParseFunction(),void e.func();var o=this.characterMaps.getMap(r);void 0!==o?"("==t?this.G0=o:")"==t||"-"==t?this.G1=o:"*"==t||"."==t?this.G2=o:"+"!=t&&"/"!=t||(this.G3=o):this.warnUnimplemented&&console.log('Invalid character set for "'+t+'": '+r),e.resetParseFunction()}},U.VT.ESC[6]=U.VT.ignore,U.VT.ESC[7]=function(){this.terminal.saveCursorAndState()},U.VT.ESC[8]=function(){this.terminal.restoreCursorAndState()},U.VT.ESC[9]=U.VT.ignore,U.VT.ESC["="]=function(){this.terminal.keyboard.applicationKeypad=!0},U.VT.ESC[">"]=function(){this.terminal.keyboard.applicationKeypad=!1},U.VT.ESC.F=U.VT.ignore,U.VT.ESC.c=function(){this.terminal.reset()},U.VT.ESC.l=U.VT.ESC.m=U.VT.ignore,U.VT.ESC.n=function(){this.GL="G2"},U.VT.ESC.o=function(){this.GL="G3"},U.VT.ESC["|"]=function(){this.GR="G3"},U.VT.ESC["}"]=function(){this.GR="G2"},U.VT.ESC["~"]=function(){this.GR="G1"},U.VT.OSC[0]=function(e){this.terminal.setWindowTitle(e.args[0])},U.VT.OSC[2]=U.VT.OSC[0],U.VT.OSC[4]=function(e){for(var t=e.args[0].split(";"),r=parseInt(t.length/2),o=this.terminal.getTextAttributes().colorPalette,i=[],n=0;n<r;++n){var s=parseInt(t[2*n]),a=t[2*n+1];s>=o.length||("?"!=a?(a=K.colors.x11ToCSS(a))&&(o[s]=a):(a=K.colors.rgbToX11(o[s]))&&i.push(s+";"+a))}i.length&&this.terminal.io.sendString("]4;"+i.join(";")+"")},U.VT.OSC[8]=function(e){const t=e.args[0].split(";");let r=null,o=null;if(2!=t.length||0==t[1].length);else{const e=t[0].split(":");r="",e.forEach(e=>{const t=e.indexOf("=");if(-1==t)return;const o=e.slice(0,t),i=e.slice(t+1);switch(o){case"id":r=i}}),o=t[1]}const i=this.terminal.getTextAttributes();i.uri=o,i.uriId=r},U.VT.OSC[9]=function(e){U.notify({body:e.args[0]})},U.VT.OSC[10]=function(e){var t=e.args[0].split(";");if(t){var r=K.colors.x11ToCSS(t.shift());r&&this.terminal.setForegroundColor(r),t.length>0&&(e.args[0]=t.join(";"),U.VT.OSC[11].apply(this,[e]))}},U.VT.OSC[11]=function(e){var t=e.args[0].split(";");if(t){var r=K.colors.x11ToCSS(t.shift());r&&this.terminal.setBackgroundColor(r),t.length>0&&(e.args[0]=t.join(";"),U.VT.OSC[12].apply(this,[e]))}},U.VT.OSC[12]=function(e){var t=e.args[0].split(";");if(t){var r=K.colors.x11ToCSS(t.shift());r&&this.terminal.setCursorColor(r)}},U.VT.OSC[50]=function(e){var t=e.args[0].match(/CursorShape=(.)/i);if(t)switch(t[1]){case"1":this.terminal.setCursorShape(U.Terminal.cursorShape.BEAM);break;case"2":this.terminal.setCursorShape(U.Terminal.cursorShape.UNDERLINE);break;default:this.terminal.setCursorShape(U.Terminal.cursorShape.BLOCK)}else console.warn("Could not parse OSC 50 args: "+e.args[0])},U.VT.OSC[52]=function(e){if(this.enableClipboardWrite){var t=e.args[0].match(/^[cps01234567]*;(.*)/);if(t){var r=window.atob(t[1]);r&&this.terminal.copyStringToClipboard(this.decode(r))}}},U.VT.OSC[104]=function(e){const t=this.terminal.getTextAttributes();e.args[0]?e.args[0].split(";").forEach(e=>t.resetColor(e)):t.resetColorPalette()},U.VT.OSC[110]=function(e){this.terminal.setForegroundColor()},U.VT.OSC[111]=function(e){this.terminal.setBackgroundColor()},U.VT.OSC[112]=function(e){this.terminal.setCursorColor()},U.VT.OSC[1337]=function(e){let t=e.args[0].match(/^File=([^:]*):([\s\S]*)$/m);if(!t)return void(this.warnUnimplemented&&console.log(`iTerm2 1337: unsupported sequence: ${t[1]}`));const r={name:"",size:0,preserveAspectRatio:!0,inline:!1,width:"auto",height:"auto",align:"left",uri:"data:application/octet-stream;base64,"+t[2].replace(/[\n\r]+/gm,"")};if(t[1].split(";").forEach(e=>{const t=e.match(/^([^=]+)=(.*)$/m);if(t)switch(t[1]){case"name":try{r.name=window.atob(t[2])}catch(e){}break;case"size":try{r.size=parseInt(t[2])}catch(e){}break;case"width":r.width=t[2];break;case"height":r.height=t[2];break;case"preserveAspectRatio":r.preserveAspectRatio=!("0"==t[2]);break;case"inline":r.inline=!("0"==t[2]);break;case"align":r.align=t[2]}}),r.inline){const t=this.terminal.io,o=e.peekRemainingBuf();e.advance(o.length),this.terminal.displayImage(r),t.writeUTF8(o)}else this.terminal.displayImage(r)},U.VT.OSC[777]=function(e){var t;switch(e.args[0].split(";",1)[0]){case"notify":var r,o;(t=e.args[0].match(/^[^;]+;([^;]*)(;([\s\S]*))?$/))&&(r=t[1],o=t[3]),U.notify({title:r,body:o});break;default:console.warn("Unknown urxvt module: "+e.args[0])}},U.VT.CSI["@"]=function(e){this.terminal.insertSpace(e.iarg(0,1))},U.VT.CSI.A=function(e){this.terminal.cursorUp(e.iarg(0,1))},U.VT.CSI.B=function(e){this.terminal.cursorDown(e.iarg(0,1))},U.VT.CSI.C=function(e){this.terminal.cursorRight(e.iarg(0,1))},U.VT.CSI.D=function(e){this.terminal.cursorLeft(e.iarg(0,1))},U.VT.CSI.E=function(e){this.terminal.cursorDown(e.iarg(0,1)),this.terminal.setCursorColumn(0)},U.VT.CSI.F=function(e){this.terminal.cursorUp(e.iarg(0,1)),this.terminal.setCursorColumn(0)},U.VT.CSI.G=function(e){this.terminal.setCursorColumn(e.iarg(0,1)-1)},U.VT.CSI.H=function(e){this.terminal.setCursorPosition(e.iarg(0,1)-1,e.iarg(1,1)-1)},U.VT.CSI.I=function(e){var t=e.iarg(0,1);t=K.f.clamp(t,1,this.terminal.screenSize.width);for(var r=0;r<t;r++)this.terminal.forwardTabStop()},U.VT.CSI.J=U.VT.CSI["?J"]=function(e,t){var r=e.args[0];r&&0!=r?1==r?this.terminal.eraseAbove():2==r?this.terminal.clear():3==r&&this.enableCsiJ3&&this.terminal.clearScrollback():this.terminal.eraseBelow()},U.VT.CSI.K=U.VT.CSI["?K"]=function(e,t){var r=e.args[0];r&&0!=r?1==r?this.terminal.eraseToLeft():2==r&&this.terminal.eraseLine():this.terminal.eraseToRight()},U.VT.CSI.L=function(e){this.terminal.insertLines(e.iarg(0,1))},U.VT.CSI.M=function(e){this.terminal.deleteLines(e.iarg(0,1))},U.VT.CSI.P=function(e){this.terminal.deleteChars(e.iarg(0,1))},U.VT.CSI.S=function(e){this.terminal.vtScrollUp(e.iarg(0,1))},U.VT.CSI.T=function(e){e.args.length<=1&&this.terminal.vtScrollDown(e.iarg(0,1))},U.VT.CSI[">T"]=U.VT.ignore,U.VT.CSI.X=function(e){this.terminal.eraseToRight(e.iarg(0,1))},U.VT.CSI.Z=function(e){var t=e.iarg(0,1);t=K.f.clamp(t,1,this.terminal.screenSize.width);for(var r=0;r<t;r++)this.terminal.backwardTabStop()},U.VT.CSI["`"]=U.VT.CSI.G,U.VT.CSI.a=function(e){this.terminal.setCursorColumn(this.terminal.getCursorColumn()+e.iarg(0,1))},U.VT.CSI.b=U.VT.ignore,U.VT.CSI.c=function(e){e.args[0]&&0!=e.args[0]||this.terminal.io.sendString("[?1;2c")},U.VT.CSI[">c"]=function(e){this.terminal.io.sendString("[>0;256;0c")},U.VT.CSI.d=function(e){this.terminal.setAbsoluteCursorRow(e.iarg(0,1)-1)},U.VT.CSI.f=U.VT.CSI.H,U.VT.CSI.g=function(e){e.args[0]&&0!=e.args[0]?3==e.args[0]&&this.terminal.clearAllTabStops():this.terminal.clearTabStopAtCursor(!1)},U.VT.CSI.h=function(e){for(var t=0;t<e.args.length;t++)this.setANSIMode(e.args[t],!0)},U.VT.CSI["?h"]=function(e){for(var t=0;t<e.args.length;t++)this.setDECMode(e.args[t],!0)},U.VT.CSI.i=U.VT.CSI["?i"]=U.VT.ignore,U.VT.CSI.l=function(e){for(var t=0;t<e.args.length;t++)this.setANSIMode(e.args[t],!1)},U.VT.CSI["?l"]=function(e){for(var t=0;t<e.args.length;t++)this.setDECMode(e.args[t],!1)},U.VT.prototype.parseSgrExtendedColors=function(e,t,r){let o,i;if(e.argHasSubargs(t))(o=e.args[t].split(":")).shift(),i=!0;else{if(e.argHasSubargs(t+1))return{skipCount:0};o=e.args.slice(t+1),i=!1}switch(parseInt(o[0])){default:case 0:return{skipCount:0};case 1:return i?{color:"rgba(0, 0, 0, 0)",skipCount:0}:{skipCount:0};case 2:{let t;if(t=i?4==o.length?1:2:1,o.length<t+3)return{skipCount:0};return{color:`rgb(${e.parseInt(o[t+0])}, ${e.parseInt(o[t+1])}, ${e.parseInt(o[t+2])})`,skipCount:i?0:4}}case 3:if(!i)return{skipCount:0};if(o.length<4)return{skipCount:0};e.parseInt(o[1]),e.parseInt(o[2]),e.parseInt(o[3]);return{skipCount:0};case 4:if(!i)return{skipCount:0};if(o.length<5)return{skipCount:0};e.parseInt(o[1]),e.parseInt(o[2]),e.parseInt(o[3]),e.parseInt(o[4]);return{skipCount:0};case 5:{if(o.length<2)return{skipCount:0};const t={skipCount:i?0:2},n=e.parseInt(o[1]);return n<r.colorPalette.length&&(t.color=n),t}}},U.VT.CSI.m=function(e){var t=this.terminal.getTextAttributes();if(e.args.length){for(var r=0;r<e.args.length;r++){var o=e.iarg(r,0);if(o<30)if(0==o)t.reset();else if(1==o)t.bold=!0;else if(2==o)t.faint=!0;else if(3==o)t.italic=!0;else if(4==o)if(e.argHasSubargs(r)){const o=e.args[r].split(":")[1];0==o?t.underline=!1:1==o?t.underline="solid":2==o?t.underline="double":3==o?t.underline="wavy":4==o?t.underline="dotted":5==o&&(t.underline="dashed")}else t.underline="solid";else 5==o?t.blink=!0:7==o?t.inverse=!0:8==o?t.invisible=!0:9==o?t.strikethrough=!0:21==o?t.underline="double":22==o?(t.bold=!1,t.faint=!1):23==o?t.italic=!1:24==o?t.underline=!1:25==o?t.blink=!1:27==o?t.inverse=!1:28==o?t.invisible=!1:29==o&&(t.strikethrough=!1);else if(o<50)if(o<38)t.foregroundSource=o-30;else if(38==o){const o=this.parseSgrExtendedColors(e,r,t);void 0!==o.color&&(t.foregroundSource=o.color),r+=o.skipCount}else if(39==o)t.foregroundSource=t.SRC_DEFAULT;else if(o<48)t.backgroundSource=o-40;else if(48==o){const o=this.parseSgrExtendedColors(e,r,t);void 0!==o.color&&(t.backgroundSource=o.color),r+=o.skipCount}else t.backgroundSource=t.SRC_DEFAULT;else if(58==o){const o=this.parseSgrExtendedColors(e,r,t);void 0!==o.color&&(t.underlineSource=o.color),r+=o.skipCount}else 59==o?t.underlineSource=t.SRC_DEFAULT:o>=90&&o<=97?t.foregroundSource=o-90+8:o>=100&&o<=107&&(t.backgroundSource=o-100+8)}t.setDefaults(this.terminal.getForegroundColor(),this.terminal.getBackgroundColor())}else t.reset()},U.VT.CSI.m.supportsSubargs=!0,U.VT.CSI[">m"]=U.VT.ignore,U.VT.CSI.n=function(e){if(5==e.args[0])this.terminal.io.sendString("0n");else if(6==e.args[0]){var t=this.terminal.getCursorRow()+1,r=this.terminal.getCursorColumn()+1;this.terminal.io.sendString("["+t+";"+r+"R")}},U.VT.CSI[">n"]=U.VT.ignore,U.VT.CSI["?n"]=function(e){if(6==e.args[0]){var t=this.terminal.getCursorRow()+1,r=this.terminal.getCursorColumn()+1;this.terminal.io.sendString("["+t+";"+r+"R")}else 15==e.args[0]?this.terminal.io.sendString("[?11n"):25==e.args[0]?this.terminal.io.sendString("[?21n"):26==e.args[0]?this.terminal.io.sendString("[?12;1;0;0n"):53==e.args[0]&&this.terminal.io.sendString("[?50n")},U.VT.CSI[">p"]=U.VT.ignore,U.VT.CSI["!p"]=function(){this.terminal.softReset()},U.VT.CSI.$p=U.VT.ignore,U.VT.CSI["?$p"]=U.VT.ignore,U.VT.CSI['"p']=U.VT.ignore,U.VT.CSI.q=U.VT.ignore,U.VT.CSI[" q"]=function(e){var t=e.args[0];0==t||1==t?(this.terminal.setCursorShape(U.Terminal.cursorShape.BLOCK),this.terminal.setCursorBlink(!0)):2==t?(this.terminal.setCursorShape(U.Terminal.cursorShape.BLOCK),this.terminal.setCursorBlink(!1)):3==t?(this.terminal.setCursorShape(U.Terminal.cursorShape.UNDERLINE),this.terminal.setCursorBlink(!0)):4==t?(this.terminal.setCursorShape(U.Terminal.cursorShape.UNDERLINE),this.terminal.setCursorBlink(!1)):5==t?(this.terminal.setCursorShape(U.Terminal.cursorShape.BEAM),this.terminal.setCursorBlink(!0)):6==t?(this.terminal.setCursorShape(U.Terminal.cursorShape.BEAM),this.terminal.setCursorBlink(!1)):console.warn("Unknown cursor style: "+t)},U.VT.CSI['"q']=U.VT.ignore,U.VT.CSI.r=function(e){var t=e.args,r=t[0]?parseInt(t[0],10)-1:null,o=t[1]?parseInt(t[1],10)-1:null;this.terminal.setVTScrollRegion(r,o),this.terminal.setCursorPosition(0,0)},U.VT.CSI["?r"]=U.VT.ignore,U.VT.CSI.$r=U.VT.ignore,U.VT.CSI.s=function(){this.terminal.saveCursorAndState()},U.VT.CSI["?s"]=U.VT.ignore,U.VT.CSI.t=U.VT.ignore,U.VT.CSI.$t=U.VT.ignore,U.VT.CSI[">t"]=U.VT.ignore,U.VT.CSI[" t"]=U.VT.ignore,U.VT.CSI.u=function(){this.terminal.restoreCursorAndState()},U.VT.CSI[" u"]=U.VT.ignore,U.VT.CSI.$v=U.VT.ignore,U.VT.CSI["'w"]=U.VT.ignore,U.VT.CSI.x=U.VT.ignore,U.VT.CSI["*x"]=U.VT.ignore,U.VT.CSI.$x=U.VT.ignore,U.VT.CSI.z=function(e){if(!(e.args.length<1)){var t=e.args[0];if(0==t){if(e.args.length<2)return;this.terminal.getTextAttributes().tileData=e.args[1]}else 1==t&&(this.terminal.getTextAttributes().tileData=null)}},U.VT.CSI["'z"]=U.VT.ignore,U.VT.CSI.$z=U.VT.ignore,U.VT.CSI["'{"]=U.VT.ignore,U.VT.CSI["'|"]=U.VT.ignore,U.VT.CSI["'}"]=U.VT.ignore,U.VT.CSI["'~"]=U.VT.ignore,K.rtdep("lib.f"),U.VT.CharacterMap=function(e,t){this.description=e,this.GL=null,this.glmapBase_=t,this.sync_()},U.VT.CharacterMap.prototype.sync_=function(e){if(!this.glmapBase_&&!e)return this.GL=null,delete this.glmap_,void delete this.glre_;this.glmap_=e?Object.assign({},this.glmapBase_,e):this.glmapBase_;var t=Object.keys(this.glmap_).map(e=>"\\x"+K.f.zpad(e.charCodeAt(0).toString(16)));this.glre_=new RegExp("["+t.join("")+"]","g"),this.GL=e=>e.replace(this.glre_,e=>this.glmap_[e])},U.VT.CharacterMap.prototype.reset=function(){this.glmap_!==this.glmapBase_&&this.sync_()},U.VT.CharacterMap.prototype.setOverrides=function(e){this.sync_(e)},U.VT.CharacterMap.prototype.clone=function(){var e=new U.VT.CharacterMap(this.description,this.glmapBase_);return this.glmap_!==this.glmapBase_&&e.setOverrides(this.glmap_),e},U.VT.CharacterMaps=function(){this.maps_=U.VT.CharacterMaps.DefaultMaps,this.mapsBase_=this.maps_},U.VT.CharacterMaps.prototype.getMap=function(e){return this.maps_.hasOwnProperty(e)?this.maps_[e]:void 0},U.VT.CharacterMaps.prototype.addMap=function(e,t){this.maps_===this.mapsBase_&&(this.maps_=Object.assign({},this.mapsBase_)),this.maps_[e]=t},U.VT.CharacterMaps.prototype.reset=function(){this.maps_!==U.VT.CharacterMaps.DefaultMaps&&(this.maps_=U.VT.CharacterMaps.DefaultMaps)},U.VT.CharacterMaps.prototype.setOverrides=function(e){for(var t in this.maps_===this.mapsBase_&&(this.maps_=Object.assign({},this.mapsBase_)),e){var r=this.getMap(t);void 0!==r?(this.maps_[t]=r.clone(),this.maps_[t].setOverrides(e[t])):this.addMap(t,new U.VT.CharacterMap("user "+t,e[t]))}},U.VT.CharacterMaps.DefaultMaps={},U.VT.CharacterMaps.DefaultMaps[0]=new U.VT.CharacterMap("graphic",{"`":"◆",a:"▒",b:"␉",c:"␌",d:"␍",e:"␊",f:"°",g:"±",h:"␤",i:"␋",j:"┘",k:"┐",l:"┌",m:"└",n:"┼",o:"⎺",p:"⎻",q:"─",r:"⎼",s:"⎽",t:"├",u:"┤",v:"┴",w:"┬",x:"│",y:"≤",z:"≥","{":"π","|":"≠","}":"£","~":"·"}),U.VT.CharacterMaps.DefaultMaps.A=new U.VT.CharacterMap("british",{"#":"£"}),U.VT.CharacterMaps.DefaultMaps.B=new U.VT.CharacterMap("us",null),U.VT.CharacterMaps.DefaultMaps[4]=new U.VT.CharacterMap("dutch",{"#":"£","@":"¾","[":"Ĳ","\\":"½","]":"|","{":"¨","|":"f","}":"¼","~":"´"}),U.VT.CharacterMaps.DefaultMaps.C=U.VT.CharacterMaps.DefaultMaps[5]=new U.VT.CharacterMap("finnish",{"[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"}),U.VT.CharacterMaps.DefaultMaps.R=new U.VT.CharacterMap("french",{"#":"£","@":"à","[":"°","\\":"ç","]":"§","{":"é","|":"ù","}":"è","~":"¨"}),U.VT.CharacterMaps.DefaultMaps.Q=new U.VT.CharacterMap("french canadian",{"@":"à","[":"â","\\":"ç","]":"ê","^":"î","`":"ô","{":"é","|":"ù","}":"è","~":"û"}),U.VT.CharacterMaps.DefaultMaps.K=new U.VT.CharacterMap("german",{"@":"§","[":"Ä","\\":"Ö","]":"Ü","{":"ä","|":"ö","}":"ü","~":"ß"}),U.VT.CharacterMaps.DefaultMaps.Y=new U.VT.CharacterMap("italian",{"#":"£","@":"§","[":"°","\\":"ç","]":"é","`":"ù","{":"à","|":"ò","}":"è","~":"ì"}),U.VT.CharacterMaps.DefaultMaps.E=U.VT.CharacterMaps.DefaultMaps[6]=new U.VT.CharacterMap("norwegian/danish",{"@":"Ä","[":"Æ","\\":"Ø","]":"Å","^":"Ü","`":"ä","{":"æ","|":"ø","}":"å","~":"ü"}),U.VT.CharacterMaps.DefaultMaps.Z=new U.VT.CharacterMap("spanish",{"#":"£","@":"§","[":"¡","\\":"Ñ","]":"¿","{":"°","|":"ñ","}":"ç"}),U.VT.CharacterMaps.DefaultMaps[7]=U.VT.CharacterMaps.DefaultMaps.H=new U.VT.CharacterMap("swedish",{"@":"É","[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"}),U.VT.CharacterMaps.DefaultMaps["="]=new U.VT.CharacterMap("swiss",{"#":"ù","@":"à","[":"é","\\":"ç","]":"ê","^":"î",_:"è","`":"ô","{":"ä","|":"ö","}":"ü","~":"û"}),K.resource.add("hterm/audio/bell","audio/ogg;base64",""),K.resource.add("hterm/images/icon-96","image/png;base64","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"),K.resource.add("hterm/concat/date","text/plain","Mon, 26 Nov 2018 08:50:10 +0000"),K.resource.add("hterm/changelog/version","text/plain","2018-10-24"),K.resource.add("hterm/changelog/date","text/plain","1.82"),K.resource.add("hterm/git/HEAD","text/plain","03ee0980444a38a97ef947b2272e44fdb3bdf5f5");var L=/(?:\x1b)([`0-9\-=~!@#$%^&*\(\)_+\[\]\\{}|;':",.//<>?a-zA-Z])/,z=new RegExp("^"+L.source+"$"),W=new RegExp("(?:+)(O|N|\\[|\\[\\[)(?:"+["(\\d+)(?:;(\\d+))?([~^$])","(?:M([@ #!a`])(.)(.))","(?:1;)?(\\d+)?([a-zA-Z])"].join("|")+")"),Q=new RegExp("^"+W.source),G=new RegExp([W.source,L.source,/\x1b./.source].join("|"));function H(e,t){if(!function(e){return/\x1b\[M/.test(e)||/\x1b\[M([\x00\u0020-\uffff]{3})/.test(e)||/\x1b\[(\d+;\d+;\d+)M/.test(e)||/\x1b\[<(\d+;\d+;\d+)([mM])/.test(e)||/\x1b\[<(\d+;\d+;\d+;\d+)&w/.test(e)||/\x1b\[24([0135])~\[(\d+),(\d+)\]\r/.test(e)||/\x1b\[(O|I)/.test(e)}(e)){for(var r,o=[];r=G.exec(e);)(o=o.concat(e.slice(0,r.index).split(""))).push(r[0]),e=e.slice(r.index+r[0].length);(o=o.concat(e.split(""))).forEach((function(e){var r,o={sequence:e,name:null,ctrl:!1,meta:!1,shift:!1,fullName:"",code:null,ch:null};if("\r"===e)o.name="return";else if("\n"===e)o.name="linefeed";else if("\t"===e)o.name="tab";else if("\b"===e||""===e||""===e||"\b"===e)o.name="backspace",o.meta=""===e.charAt(0);else if(""===e||""===e)o.name="escape",o.meta=2===e.length;else if(" "===e||" "===e)o.name="space",o.meta=2===e.length;else if(1===e.length&&e<="")o.name=String.fromCharCode(e.charCodeAt(0)+64).toLowerCase(),o.ctrl=!0;else if(1===e.length&&e>="a"&&e<="z")o.name=e;else if(1===e.length&&e>="A"&&e<="Z")o.name=e.toLowerCase(),o.shift=!0;else if(r=z.exec(e))o.name=r[1].toLowerCase(),o.meta=!0,o.shift=/^[A-Z]$/.test(r[1]);else if(r=Q.exec(e)){var i=(r[1]||"")+(r[2]||"")+(r[4]||"")+(r[9]||""),n=(r[3]||r[8]||1)-1;switch(o.ctrl=!!(4&n),o.meta=!!(10&n),o.shift=!!(1&n),o.code=i,i){case"OP":o.name="f1";break;case"OQ":o.name="f2";break;case"OR":o.name="f3";break;case"OS":o.name="f4";break;case"[11~":o.name="f1";break;case"[12~":o.name="f2";break;case"[13~":o.name="f3";break;case"[14~":o.name="f4";break;case"[[A":o.name="f1";break;case"[[B":o.name="f2";break;case"[[C":o.name="f3";break;case"[[D":o.name="f4";break;case"[[E":case"[15~":o.name="f5";break;case"[17~":o.name="f6";break;case"[18~":o.name="f7";break;case"[19~":o.name="f8";break;case"[20~":o.name="f9";break;case"[21~":o.name="f10";break;case"[23~":o.name="f11";break;case"[24~":o.name="f12";break;case"[A":o.name="up";break;case"[B":o.name="down";break;case"[C":o.name="right";break;case"[D":o.name="left";break;case"[E":o.name="clear";break;case"[F":o.name="end";break;case"[H":o.name="home";break;case"OA":o.name="up";break;case"OB":o.name="down";break;case"OC":o.name="right";break;case"OD":o.name="left";break;case"OE":o.name="clear";break;case"OF":o.name="end";break;case"OH":case"[1~":o.name="home";break;case"[2~":o.name="insert";break;case"[3~":o.name="delete";break;case"[4~":o.name="end";break;case"[5~":o.name="pageup";break;case"[6~":o.name="pagedown";break;case"[[5~":o.name="pageup";break;case"[[6~":o.name="pagedown";break;case"[7~":o.name="home";break;case"[8~":o.name="end";break;case"[a":o.name="up",o.shift=!0;break;case"[b":o.name="down",o.shift=!0;break;case"[c":o.name="right",o.shift=!0;break;case"[d":o.name="left",o.shift=!0;break;case"[e":o.name="clear",o.shift=!0;break;case"[2$":o.name="insert",o.shift=!0;break;case"[3$":o.name="delete",o.shift=!0;break;case"[5$":o.name="pageup",o.shift=!0;break;case"[6$":o.name="pagedown",o.shift=!0;break;case"[7$":o.name="home",o.shift=!0;break;case"[8$":o.name="end",o.shift=!0;break;case"Oa":o.name="up",o.ctrl=!0;break;case"Ob":o.name="down",o.ctrl=!0;break;case"Oc":o.name="right",o.ctrl=!0;break;case"Od":o.name="left",o.ctrl=!0;break;case"Oe":o.name="clear",o.ctrl=!0;break;case"[2^":o.name="insert",o.ctrl=!0;break;case"[3^":o.name="delete",o.ctrl=!0;break;case"[5^":o.name="pageup",o.ctrl=!0;break;case"[6^":o.name="pagedown",o.ctrl=!0;break;case"[7^":o.name="home",o.ctrl=!0;break;case"[8^":o.name="end",o.ctrl=!0;break;case"[Z":o.name="tab",o.shift=!0;break;default:o.name=null}}1===e.length&&(o.ch=e);let s=o.name||"";o.shift&&(s="S-"+s),o.meta&&(s="M-"+s),o.ctrl&&(s="C-"+s),o.fullName=s,t(o)}))}}const j={keyStrokeDelay:200,lingerDelay:1e3,fadeDuration:1e3,bezelColor:"#000",textColor:"#fff",position:"top-right"};let Z={right:"→",left:"←",up:"↑",down:"↓",space:"␣",enter:"↩",return:"↩",linefeed:"C-j",shift:"S-",ctrl:"C-",tab:"⇥",escape:"⎋",pagedown:"⇟",pageup:"⇞",home:"↖",end:"↘",delete:"⌦",backspace:"⌫",meta:"M-"};var q=new class{constructor(){this.initialized=!1,this.container=null,this.style=null,this.options=j,this.currentChunk=null,this._onKey=e=>{if(!this.container)return;this.currentChunk||(this.currentChunk=document.createElement("li"),0===this.options.position.indexOf("top")?this.container.insertBefore(this.currentChunk,this.container.childNodes[0]):this.container.appendChild(this.currentChunk));var t="";e.ctrl&&(t+=Z.ctrl),e.meta&&(t+=Z.meta),e.shift&&(t+=Z.shift);let r=(e.name||"").replace(/^[CMS]-/,"");this.currentChunk.textContent+=t+(Z[r]||r||e.ch);var o=this.options;clearTimeout(this.keyStrokeTimeout),this.keyStrokeTimeout=setTimeout(()=>{!function(e){setTimeout(()=>{e.style.opacity=0,setTimeout(()=>{e.parentNode.removeChild(e)},o.fadeDuration)},o.lingerDelay)}(this.currentChunk),this.currentChunk=null},o.keyStrokeDelay)}}cleanUp(){function e(e){e&&e.parentNode&&e.parentNode.removeChild(e)}e(this.container),e(this.style),clearTimeout(this.keyStrokeTimeout),this.currentChunk=null,this.container=this.style=null}injectComponents(){this.container=document.createElement("ul");let e=document.querySelector("x-screen");e&&e.appendChild(this.container),this.container.className="keystrokes";const t={"bottom-left":"bottom: 0;","bottom-right":"bottom: 0; direction: rtl;","top-left":"top: 0;","top-right":"top: 0; direction: rtl;"};t[this.options.position]||(console.warn(`Invalid position '${this.options.position}', using default 'bottom-left'. Valid positions: `,Object.keys(t)),this.options.position="bottom-left"),this.style=document.createElement("style"),this.style.innerHTML=`\n      ul.keystrokes {\n        padding: 0 10px;\n        position: fixed;\n        left: 0;\n        right: 0;\n        ${t[this.options.position]}\n      }\n\n      ul.keystrokes li {\n        direction: ltr;\n        background-color: ${this.options.bezelColor};\n        opacity: 0.9;\n        color: ${this.options.textColor};\n        padding: 5px 10px;\n        margin-bottom: 5px;\n        border-radius: 15px;\n        opacity: 1;\n        display: table;\n        -webkit-transition: opacity ${this.options.fadeDuration}ms linear;\n        transition: opacity ${this.options.fadeDuration}ms linear;\n      }`,document.body.appendChild(this.style)}processInput(e){H(e,this._onKey)}enable(e){this.cleanUp(),this.options=Object.assign({},j,e||this.options),this.injectComponents()}disable(){this.cleanUp()}},J=o(1),Y=o.n(J),X=/[\x1b\x07]/;function $(e,t){!e.codingSystemUtf8_&&e[e.GL].GL&&(t=e[e.GL].GL(t)),e.terminal.print(t)}U.VT.prototype.parseUntilStringTerminator_=function(e){var t=e.peekRemainingBuf(),r=e.args;let o=0;r.length?""==r[0].slice(-1)&&(r[0]=r[0].slice(0,-1),t=""+t,o=1):(r[0]="",r[1]=new Date);const i=t.search(X),n=t.charAt(i);let s;var a;return(s=(""!=n||"\\"===t.charAt(i+1))&&-1!==i)?(r[0]+=t.substr(0,i),e.resetParseFunction(),e.advance(i+(""==n?2:1)-o),!0):(r[0]+=t,""==n&&i!=t.length-1&&(a="embedded escape: "+i),new Date-r[1]>this.oscTimeLimit_&&(a="timeout expired: "+(new Date-r[1])),a?(this.warnUnimplemented&&console.log("parseUntilStringTerminator_: aborting: "+a,r[0]),e.reset(r[0]),!1):(e.advance(t.length-o),!0))},U.VT.prototype.dispatch=function(e,t,r){var o=ae.get(e).get(t);o?o!==U.VT.ignore?!r.subargs||o.supportsSubargs?"CC1"===e&&t>""&&!this.enable8BitControl?console.warn("Ignoring 8-bit control code: 0x"+t.charCodeAt(0).toString(16)):o.call(this,r,t):this.warnUnimplemented&&console.warn("Ignored "+e+" code w/subargs: "+JSON.stringify(t)):this.warnUnimplemented&&console.warn("Ignored "+e+" code: "+JSON.stringify(t)):this.warnUnimplemented&&console.warn("Unknown "+e+" code: "+JSON.stringify(t))},U.VT.ParseState.prototype.peekRemainingBuf=function(){return this.buf.substr(this.pos)},U.VT.ParseState.prototype.peekChar=function(){return this.buf.charAt(this.pos)},U.VT.ParseState.prototype.consumeChar=function(){return this.buf.charAt(this.pos++)},U.VT.prototype.parseUnknown_=function(e){var t=e.peekRemainingBuf(),r=t.search(this.cc1Pattern_);return 0===r?(this.dispatch("CC1",t.charAt(0),e),void e.advance(1)):-1===r?($(this,t),void e.reset()):($(this,t.substr(0,r)),this.dispatch("CC1",t.charAt(r),e),void e.advance(r+1))};var ee,te=[],re=null,oe=!1;function ie(){Y.a.unstable_deferredUpdates(ne)}function ne(){for(var e=ee,t=Date.now()+10;;){if(null===re){if(null==(i=te.shift()))break;e.parseState_.resetBuf(i),re=e.parseState_}for(;!re.isComplete();){var r=e.parseState_.func,o=e.parseState_.pos,i=e.parseState_.buf;if(e.parseState_.func.call(e,e.parseState_),e.parseState_.func==r&&e.parseState_.pos==o&&e.parseState_.buf==i)throw oe=!1,re=null,"Parser did not alter the state!";if(t<Date.now())return void requestAnimationFrame(ie)}re=null}window.t.syncCursorPosition_(),oe=!1}function se(e){e.resetArguments(),e.subargs=null,e.resetParseFunction()}U.VT.prototype.interpret=function(e){ee=this,te.push(this.decode(e)),oe||(oe=!0,ie())},U.VT.prototype.parseCSI_=function(e){var t=e.peekChar(),r=e.args;t>="@"&&t<="~"?(this.dispatch("CSI",this.leadingModifier_+this.trailingModifier_+t,e),se(e)):";"===t?this.trailingModifier_?se(e):(r.length||r.push(""),r.push("")):t>="0"&&t<="9"||":"===t?this.trailingModifier_?se(e):(r.length?r[r.length-1]+=t:r[0]=t,":"===t&&e.argSetSubargs(r.length-1)):t>=" "&&t<="?"?r.length?this.trailingModifier_+=t:this.leadingModifier_+=t:this.cc1Pattern_.test(t)?this.dispatch("CC1",t,e):se(e),e.advance(1)};var ae=new Map;function le(e){var t=e.consumeChar();""!=t&&(this.dispatch("ESC",t,e),e.func==le&&e.resetParseFunction())}U.VT.ParseState.prototype.resetArguments=function(){this.args=[]},U.VT.ParseState.prototype.parseInt=function(e,t){const r=e>>0;return 0===r?void 0===t?r:t:r},U.VT.prototype.parseSgrExtendedColors=function(e,t,r){let o,i;if(e.argHasSubargs(t))(o=e.args[t].split(":")).shift(),i=!0;else{if(e.argHasSubargs(t+1))return{skipCount:0};if(e.args[t+1]>>0==5)return function(e,t,r){if(e.length-t+1<2)return{skipCount:0};const o=e[t+2]>>0;return o<r.colorPalette.length?{skipCount:2,color:o}:{skipCount:2}}(e.args,t,r);o=e.args.slice(t+1),i=!1}switch(o[0]>>0){default:case 0:return{skipCount:0};case 1:return i?{color:"rgba(0, 0, 0, 0)",skipCount:0}:{skipCount:0};case 2:{let e;if(e=i?4==o.length?1:2:1,o.length<e+3)return{skipCount:0};return{color:`rgb(${o[e+0]>>0}, ${o[e+1]>>0}, ${o[e+2]>>0})`,skipCount:i?0:4}}case 3:if(!i)return{skipCount:0};if(o.length<4)return{skipCount:0};o[1],o[2],o[3];return{skipCount:0};case 4:if(!i)return{skipCount:0};if(o.length<5)return{skipCount:0};o[1],o[2],o[3],o[4];return{skipCount:0};case 5:{if(o.length<2)return{skipCount:0};const e={skipCount:i?0:2},t=o[1]>>0;return t<r.colorPalette.length&&(e.color=t),e}}},U.VT.CC1[""]=function(e){e.func=le},U.VT.OSC[52]=function(e){if(!this.enableClipboardWrite)return;var t=e.args[0].match(/^[cps01234567]*;(.*)/);if(!t)return;let r;try{r=window.atob(t[1])}catch(e){return}r&&this.terminal.copyStringToClipboard(this.decode(r))},U.VT.OSC[1337]=function(e){if("BlinkAutoCR=1"===e.args[0])return void this.terminal.setAutoCarriageReturn(!0);if("BlinkAutoCR=0"===e.args[0])return void this.terminal.setAutoCarriageReturn(!1);let t=e.args[0].match(/^BlinkPrompt=(.*)$/m);if(t)return void this.terminal.prompt.promptB64(t[1]);let r=e.args[0].match(/^File=([^:]*):([\s\S]*)$/m);if(!r)return void(this.warnUnimplemented&&console.log(`iTerm2 1337: unsupported sequence: ${r[1]}`));const o={name:"",size:0,preserveAspectRatio:!0,inline:!1,width:"auto",height:"auto",align:"left",uri:"data:application/octet-stream;base64,"+r[2].replace(/[\n\r]+/gm,"")};if(r[1].split(";").forEach(e=>{const t=e.match(/^([^=]+)=(.*)$/m);if(t)switch(t[1]){case"name":try{o.name=window.atob(t[2])}catch(e){}break;case"size":try{o.size=parseInt(t[2])}catch(e){}break;case"width":o.width=t[2];break;case"height":o.height=t[2];break;case"preserveAspectRatio":o.preserveAspectRatio=!("0"==t[2]);break;case"inline":o.inline=!("0"==t[2]);break;case"align":o.align=t[2]}}),o.inline){const t=this.terminal.io,r=e.peekRemainingBuf();e.advance(r.length),this.terminal.displayImage(o),t.writeUTF8(r)}else this.terminal.displayImage(o)},U.VT.OSC[4]=function(e){for(var t=e.args[0].split(";"),r=parseInt(t.length/2),o=this.terminal.getTextAttributes().colorPalette,i=[],n=0;n<r;++n){var s=parseInt(t[2*n]),a=t[2*n+1];s>=o.length||("?"!=a?(a=K.colors.x11ToCSS(a))&&(o[s]=a):(a=K.colors.rgbToX11(o[s]))&&i.push(s+";"+a))}i.length&&this.terminal.io.sendString("]4;"+i.join(";")+""),this.terminal.getTextAttributes().refreshCSSPalette()},U.VT.OSC[10]=function(e){var t=e.args[0].split(";");if(t){var r=t.shift();if("?"==r){var o=K.colors.rgbToX11(this.terminal.getForegroundColor());o&&this.terminal.io.sendString("]10;"+o+"")}else{var i=K.colors.x11ToCSS(r);i&&this.terminal.setForegroundColor(i),this.terminal.getTextAttributes().refreshCSSPalette()}t.length>0&&(e.args[0]=t.join(";"),U.VT.OSC[11].apply(this,[e]))}},U.VT.OSC[11]=function(e){var t=e.args[0].split(";");if(t){var r=t.shift();if("?"==r){var o=K.colors.rgbToX11(this.terminal.getBackgroundColor());o&&this.terminal.io.sendString("]11;"+o+"")}else{var i=K.colors.x11ToCSS(r);i&&this.terminal.setBackgroundColor(i),this.terminal.getTextAttributes().refreshCSSPalette()}t.length>0&&(e.args[0]=t.join(";"),U.VT.OSC[12].apply(this,[e]))}},["CC1","ESC","CSI","OSC","VT52"].forEach(e=>{var t=new Map,r=U.VT[e];Object.keys(r).map(e=>{t.set(e,r[e])}),ae.set(e,t)});var ce=o(0),ue=o.n(ce);const he=300;for(var de=new Array(256),pe=new Array(256),fe=new Array(256),ge="b",me="i",ye="blink-node",be="u",_e="s",we="us",Ce={solid:"u1",double:"u2",wavy:"u3",dotted:"u4",dashed:"u5"},Ae=0;Ae<256;Ae++)de[Ae]="c"+Ae,pe[Ae]="bc"+Ae,fe[Ae]="uc"+Ae;const ve=/(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|[\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|[\ud83c[\ude32-\ude3a]|[\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])/;class Se extends ue.a.Component{constructor(){super(...arguments),this._v=-1}render(){const e=this.props.node,t=e.attrs;if(this._v=e.v,t.isDefault)return e.txt;let r=[];var o=null;t.fci>=0?r.push(de[t.fci]):void 0!==t.fcs&&((o=o||{}).color=t.fcs),t.bci>=0?r.push(pe[t.bci]):void 0!==t.bcs&&((o=o||{}).backgroundColor=t.bcs),t.uci>=0?r.push(fe[t.uci]):void 0!==t.ucs&&((o=o||{}).textDecorationColor=t.ucs),t.bold&&r.push(ge),t.italic&&r.push(me),t.blink&&r.push(ye),t.underline?(t.strikethrough?r.push(we):r.push(be),r.push(Ce[t.underline])):t.strikethrough&&r.push(_e),t.asciiNode||(t.wcNode?ve.test(e.txt)?r.push("wc wc-node emoji"):r.push("wc wc-node"):e.wcw<he?r.push("wc wc"+e.wcw):(r.push("wc"),(o=o||{}).width="calc(var(--hterm-charsize-width) * "+e.wcw+")"));const i={};return r.length&&(i.className=r.join(" ")),o&&(i.style=o),ue.a.createElement("span",i,e.txt)}shouldComponentUpdate(e){return this._v!==e.node.v}}class ke extends ce.Component{constructor(){super(...arguments),this._v=-1,this._dirty=!0}render(){this._v=this.props.row.v;const e=this.props.row.nodes,t=e.length,r=new Array(t);for(let o=0;o<t;o++){const t=e[o];r[o]=ue.a.createElement(Se,{key:t.key,node:t})}return this.props.row.img&&r.push(this._renderImage(this.props.row.img)),this._dirty=!1,ue.a.createElement("x-row",null,r)}_renderImage(e){var t=ue.a.createElement("img",{src:e.src,alt:e.alt,title:e.title,style:{position:"absolute",objectFit:e.objectFit,maxWidth:"100%",height:`calc(${e.padRows} * var(--hterm-charsize-height))`,bottom:0}});return ue.a.createElement("div",{key:"image",style:{position:"relative",textAlign:e.textAlign,height:"calc(var(--hterm-charsize-height))"}},t)}shouldComponentUpdate(e){return this._v!==e.row.v}touch(){this._dirty||(this._dirty=!0,this.forceUpdate())}}class Te extends ue.a.Component{constructor(){super(...arguments),this._dirty=!0,this._rows=[],this._rowsMap=new Map}render(){const e=this._rows,t=e.length,r=new Array(t),o=new Map;for(let i=0;i<t;i++){const t=e[i],n=t.key,s=ue.a.createRef();r[i]=ue.a.createElement(ke,{key:n,ref:s,row:t}),o.set(n,s)}return this._rowsMap=o,this._dirty=!1,r}setRows(e){this._rows=e,this.touch()}touchRow(e){if(this._dirty)return;let t=this._rowsMap.get(e.key);t&&t.current&&t.current.touch()}touch(){this._dirty||(this._dirty=!0,this.forceUpdate())}}function xe(e,t){return`{${e}, ${t}}`}class Pe{constructor(e){this._x=-1,this._y=-1,this._viewWidth=0,this._viewHeight=0,this._contentWidth=0,this._contentHeight=0,this._callback=null,this._callback=e}_postMessage(e){let t=window.webkit.messageHandlers.wkScroller;t?t.postMessage(e):console.log(e)}setDimensions(e,t,r,o){let i=!1;null!=e&&this._viewWidth!==e&&(this._viewWidth=e,i=!0),null!=t&&this._viewHeight!==t&&(this._viewHeight=t,i=!0),null!=r&&this._contentWidth!==r&&(this._contentWidth=r,i=!0),null!=o&&this._contentHeight!==o&&(this._contentHeight=o,i=!0),i&&this._postMessage({op:"resize",viewSize:xe(this._viewWidth,this._viewHeight),contentSize:xe(this._contentWidth,this._contentHeight)})}reportScroll(e,t,r){this._x=e,this._y=t,this._callback&&this._callback(e,t,r)}scrollTo(e,t,r){this._x===e&&this._y===t||(this._x=e,this._y=t,this._postMessage({op:"scrollTo",x:e,y:t,animated:r}))}}let Ee={height:window.innerHeight,width:window.innerWidth},Re=0;var Me=function(e){for(const t in e)if(t.startsWith("__reactInternalInstance$")){const r=e[t];return r&&r.return&&r.return.stateNode}return null};U.ScrollPort.Selection.prototype.sync=function(){var e=this;function t(){e.startRow=i,e.startNode=o.anchorNode,e.startOffset=o.anchorOffset,e.endRow=n,e.endNode=o.focusNode,e.endOffset=o.focusOffset}function r(){e.startRow=n,e.startNode=o.focusNode,e.startOffset=o.focusOffset,e.endRow=i,e.endNode=o.anchorNode,e.endOffset=o.anchorOffset}var o=window.document.getSelection();if(this.startRow=null,this.endRow=null,this.isMultiline=null,this.isCollapsed=!o||o.isCollapsed,!this.isCollapsed){for(var i=o.anchorNode;i&&"X-ROW"!==i.nodeName;)i=i.parentNode;if(i){i.rowIndex=Me(i).props.row.n;for(var n=o.focusNode;n&&"X-ROW"!==n.nodeName;)n=n.parentNode;if(n){if(n.rowIndex=Me(n).props.row.n,i.rowIndex<n.rowIndex)t();else if(i.rowIndex>n.rowIndex)r();else if(o.focusNode==o.anchorNode)o.anchorOffset<o.focusOffset?t():r();else{var s=this.findFirstChild(i,[o.anchorNode,o.focusNode]);if(!s)throw new Error("Unexpected error syncing selection.");s==o.anchorNode?t():r()}this.isMultiline=i.rowIndex!=n.rowIndex}else console.error("Selection focus is not rooted in a row node: "+o.focusNode.nodeName)}else console.error("Selection anchor is not rooted in a row node: "+o.anchorNode.nodeName)}},U.ScrollPort.prototype.decorate=function(){this.div_=window.document.createElement("div"),window.document.body.appendChild(this.div_),window.addEventListener("resize",this.onResize_.bind(this));var e=window.document;this.document_=e,e.body.style.cssText="margin: 0px;padding: 0px;height: 100%;width: 100%;overflow: hidden;cursor: var(--hterm-mouse-cursor-style);-webkit-user-select: none;-moz-user-select: none;";var t=e.createElement("style");t.textContent="x-row {  display: block;  height: var(--hterm-charsize-height);  line-height: var(--hterm-charsize-height);  isolation: isolate;}",e.head.appendChild(t),this.userCssLink_=e.createElement("link"),this.userCssLink_.setAttribute("rel","stylesheet"),this.userCssText_=e.createElement("style"),e.head.appendChild(this.userCssText_),this.screen_=e.createElement("x-screen"),this.screen_.setAttribute("tabindex","-1"),this.screen_.style.cssText="display: block;font-family: monospace;font-size: 15px;overflow: hidden;white-space: pre;width: 100%;margin: 0px;padding: 0px;height: 100%;width: 100%;touch-atcion: manipulation;cursor: var(--hterm-mouse-cursor-style);outline: none !important",e.body.appendChild(this.screen_),this.screen_.addEventListener("touchstart",this.on_touchstart_.bind(this)),this.screen_.addEventListener("touchmove",this.on_touchmove_.bind(this)),this.screen_.addEventListener("touchend",this.on_touchend_.bind(this)),this.screen_.addEventListener("touchcancel",this.on_touchcancel_.bind(this)),this.screen_.addEventListener("copy",this.onCopy_.bind(this)),this.screen_.addEventListener("paste",this.onPaste_.bind(this)),this.screen_.addEventListener("drop",this.onDragAndDrop_.bind(this)),e.body.addEventListener("keydown",this.onBodyKeyDown_.bind(this));const r="right: 0px;\n                             position:fixed;\n                             z-index: 1;\n                             text-align: center;\n                             cursor: pointer;\n                             height: 30px;\n                             width: 110px;\n                             line-height: 30px;\n                             border-width: 1px;\n                             border-style: solid;\n                             font-weight: bold;";this.scrollUpButton_=this.document_.createElement("div"),this.scrollUpButton_.id="hterm:a11y:page-up",this.scrollUpButton_.innerText=U.msg("BUTTON_PAGE_UP",[],"Page up"),this.scrollUpButton_.setAttribute("role","button"),this.scrollUpButton_.style.cssText=r,this.scrollUpButton_.style.top="-32px",this.scrollUpButton_.addEventListener("click",this.scrollPageUp.bind(this)),this.scrollDownButton_=this.document_.createElement("div"),this.scrollDownButton_.id="hterm:a11y:page-down",this.scrollDownButton_.innerText=U.msg("BUTTON_PAGE_DOWN",[],"Page down"),this.scrollDownButton_.setAttribute("role","button"),this.scrollDownButton_.style.cssText=r,this.scrollDownButton_.style.bottom="-32px",this.scrollDownButton_.addEventListener("click",this.scrollPageDown.bind(this)),this.allowScrollButtonsToDisplay_=!1,setTimeout(()=>{this.allowScrollButtonsToDisplay_=!0},500),this.document_.addEventListener("selectionchange",()=>{if(this.selection.sync(),!this.allowScrollButtonsToDisplay_)return;const e=this.accessibilityReader_&&this.accessibilityReader_.accessibilityEnabled,t=this.document_.getSelection();let r;t.anchorNode&&t.anchorNode.parentElement&&(r=t.anchorNode.parentElement),e&&r==this.scrollUpButton_?this.scrollUpButton_.style.top="0px":this.scrollUpButton_.style.top="-32px",e&&r==this.scrollDownButton_?this.scrollDownButton_.style.bottom="0px":this.scrollDownButton_.style.bottom="-32px"}),this.screen_.appendChild(this.scrollUpButton_),this.rowNodes_=e.createElement("div"),this.rowNodes_.id="hterm:row-nodes",this.rowNodes_.style.cssText="display: block;position: absolute;top: 0;left: 0;right: 0;bottom: 0;background-color: inherit;overflow: hidden;-webkit-user-select: text;-moz-user-select: text;",this.screen_.appendChild(this.rowNodes_),this.topSelectBag_=e.createElement("x-select-bag"),this.topSelectBag_.style.cssText="display: block;overflow: hidden;height: var(--hterm-charsize-height);white-space: pre;",this.bottomSelectBag_=this.topSelectBag_.cloneNode(),this.topFold_=e.createElement("x-fold"),this.topFold_.id="hterm:top-fold-for-row-selection",this.topFold_.style.cssText="display: block;",this.rowNodes_.appendChild(this.topFold_),this._renderDom=e.createElement("div"),this._renderDom.id="hterm:renderer",this.rowNodes_.appendChild(this._renderDom),this.renderRef=Y.a.render(ue.a.createElement(Te),this._renderDom),this.bottomFold_=this.topFold_.cloneNode(),this.bottomFold_.id="hterm:bottom-fold-for-row-selection",this.rowNodes_.appendChild(this.bottomFold_);var o=this;Ee=U.getClientSize(this.screen_),this.scroller_=new Pe((function(e,t,r){Re!==t&&(Re=t||0,o.onScroll_())}),{scrollingX:!1}),this.scroller_.setDimensions(Ee.width,Ee.height,Ee.width,Ee.height);var i="http://www.w3.org/2000/svg";this.svg_=window.document.createElementNS(i,"svg"),this.svg_.id="hterm:zoom-detector",this.svg_.setAttribute("xmlns",i),this.svg_.setAttribute("version","1.1"),this.svg_.style.cssText="position: absolute;top: 0;left: 0;visibility: hidden",this.pasteTarget_=e.createElement("textarea"),this.pasteTarget_.id="hterm:ctrl-v-paste-target",this.pasteTarget_.setAttribute("tabindex","-1"),this.pasteTarget_.style.cssText="position: absolute;height: 1px;width: 1px;left: 0px; bottom: 0px;opacity: 0",this.pasteTarget_.contentEditable=!0,this.screen_.appendChild(this.pasteTarget_),this.pasteTarget_.addEventListener("textInput",this.handlePasteTargetTextInput_.bind(this)),this.resize()},U.ScrollPort.prototype.on_touchstart_=function(e){},U.ScrollPort.prototype.on_touchmove_=function(e){},U.ScrollPort.prototype.on_touchend_=function(e){},U.ScrollPort.prototype.on_touchcancel_=function(e){},U.ScrollPort.prototype.focus=function(){},U.ScrollPort.prototype.getScreenSize=function(){return Ee},U.ScrollPort.prototype.resetCache=function(){},U.ScrollPort.prototype.setRowProvider=function(e){this.resetCache(),this.rowProvider_=e,this.scheduleRedraw()},U.ScrollPort.prototype.invalidate=function(){var e=this.getTopRowIndex(),t=this.getBottomRowIndex(e);this.drawVisibleRows_(e,t)},U.ScrollPort.prototype.scheduleInvalidate=function(){if(!this.timeouts_.invalidate){var e=this;this.timeouts_.invalidate=setTimeout((function(){e.timeouts_.invalidate=0,e.invalidate()}),0)}};var Ne="";U.ScrollPort.prototype.syncRowNodesDimensions_=function(){var e=this.getScreenSize();this.lastScreenWidth_=e.width,this.lastScreenHeight_=e.height,this.visibleRowCount=K.f.smartFloorDivide(e.height,this.characterSize.height);var t=this.visibleRowCount*this.characterSize.height;this.visibleRowTopMargin=0,this.visibleRowBottomMargin=e.height-t;var r="";Re<0&&(r="translate3d(0, "+-Re+"px, 0)"),r!==Ne&&(Ne=r,this.rowNodes_.style.transform=r,this.rowProvider_.cursorOverlayNode_&&(this.rowProvider_.cursorOverlayNode_.style.transform=r))};var Fe=0;function Ie(e,t){var r=(Ie.canvas||(Ie.canvas=document.createElement("canvas"))).getContext("2d");r.font=t;var o=r.measureText(e);return{width:o.width,height:o.fontBoundingBoxAscent+o.fontBoundingBoxDescent}}U.ScrollPort.prototype.syncScrollHeight=function(){this.lastRowCount_=this.rowProvider_.getRowCount();var e=this.characterSize.height*this.lastRowCount_+this.visibleRowTopMargin+this.visibleRowBottomMargin;Fe!==e&&(Fe=e,this.scroller_.setDimensions(Ee.width,Ee.height,Ee.width,Fe))},U.ScrollPort.prototype.scheduleRedraw=function(){if(!this.timeouts_.redraw){var e=this;this.timeouts_.redraw=requestAnimationFrame((function(){e.timeouts_.redraw=0,e.redraw_()}))}},U.ScrollPort.prototype.redraw_=function(){this.syncScrollHeight();var e=this.getTopRowIndex(),t=this.getBottomRowIndex(e);this.drawVisibleRows_(e,t),this.syncRowNodesDimensions_(),this.isScrolledEnd=this.getTopRowIndex()+this.visibleRowCount>=this.lastRowCount_},U.ScrollPort.prototype.drawVisibleRows_=function(e,t){this.selection.startRow,this.selection.endRow,this.bottomFold_,this.topFold_.nextSibling;for(var r=Math.min(this.visibleRowCount,this.rowProvider_.getRowCount()),o=[],i=0;i<r;i++){var n=e+i,s=this.fetchRowNode_(n);s&&o.push(s)}this.renderRef.setRows(o)},U.ScrollPort.prototype.fetchRowNode_=function(e){return this.rowProvider_.getRowNode(e)},U.ScrollPort.prototype.getScrollMax_=function(e){return Fe+this.visibleRowTopMargin+this.visibleRowBottomMargin-Ee.height},U.ScrollPort.prototype.scrollRowToTop=function(e){this.syncScrollHeight(),this.isScrolledEnd=e+this.visibleRowCount>=this.lastRowCount_;var t=e*this.characterSize.height+this.visibleRowTopMargin,r=this.getScrollMax_();t>r&&(t=r),Re!==t&&(this.scroller_.scrollTo(0,t),this.scheduleRedraw())},U.ScrollPort.prototype.scrollRowToBottom=function(e){this.syncScrollHeight(),this.isScrolledEnd=e+this.visibleRowCount>=this.lastRowCount_;var t=e*this.characterSize.height+this.visibleRowTopMargin+this.visibleRowBottomMargin;(t-=this.visibleRowCount*this.characterSize.height)<0&&(t=0),Re!==t&&this.scroller_.scrollTo(0,t)},U.ScrollPort.prototype.scrollToBottom=function(){this.syncScrollHeight(),this.scroller_.scrollTo(0,Fe-Ee.height,!1)},U.ScrollPort.prototype.getTopRowIndex=function(){var e=Math.round(Re/this.characterSize.height);return e<0?0:e},U.ScrollPort.prototype.onScroll_=function(e){var t=this.getScreenSize();t.width==this.lastScreenWidth_&&t.height==this.lastScreenHeight_?(this.redraw_(),this.publish("scroll",{scrollPort:this})):this.resize()},U.ScrollPort.prototype.onScrollWheel=function(e){},U.ScrollPort.prototype.onResize_=function(e){Ee=U.getClientSize(this.screen_),this.scroller_.setDimensions(Ee.width,Ee.height,null,Fe),this.syncCharacterSize()},U.ScrollPort.prototype.onCopy_=function(e){if(this.onCopy(e),!e.defaultPrevented&&(this.resetSelectBags_(),this.selection.sync(),this.selection.startRow&&!(this.selection.endRow.rowIndex-this.selection.startRow.rowIndex<2))){var t,r,o=this.getTopRowIndex(),i=this.getBottomRowIndex(o);if(this.selection.startRow.rowIndex<o)t=this.selection.endRow.rowIndex<o?this.selection.endRow.rowIndex:this.topFold_.nextSibling.rowIndex,this.topSelectBag_.textContent=this.rowProvider_.getRowsText(this.selection.startRow.rowIndex+1,t),this.rowNodes_.insertBefore(this.topSelectBag_,this.selection.startRow.nextSibling),this.syncRowNodesDimensions_();if(this.selection.endRow.rowIndex>i)r=this.selection.startRow.rowIndex>i?this.selection.startRow.rowIndex+1:this.bottomFold_.previousSibling.rowIndex+1,this.bottomSelectBag_.textContent=this.rowProvider_.getRowsText(r,this.selection.endRow.rowIndex),this.rowNodes_.insertBefore(this.bottomSelectBag_,this.selection.endRow)}},U.ScrollPort.prototype.measureCharacterSize=function(e){var t,r="canvas"!==window.fontSizeDetectionMethod;if(this.ruler_||(this.ruler_=this.document_.createElement("div"),this.ruler_.id="hterm:ruler-character-size",this.ruler_.style.cssText="position: absolute;top: 0;left: 0;visibility: hidden;height: auto !important;width: auto !important;",r&&(this.rulerSpan_=this.document_.createElement("span"),this.rulerSpan_.id="hterm:ruler-span-workaround",this.rulerSpan_.innerHTML=("X".repeat(100)+"\r").repeat(100),this.ruler_.appendChild(this.rulerSpan_)),this.rulerBaseline_=this.document_.createElement("span"),this.rulerBaseline_.id="hterm:ruler-baseline",this.rulerBaseline_.style.fontSize="0px",this.rulerBaseline_.textContent="X"),this.rulerSpan_&&(this.rulerSpan_.style.fontWeight=e||""),this.rowNodes_.appendChild(this.ruler_),r){var o=U.getClientSize(this.rulerSpan_);t=new U.Size(o.width/100,o.height/100)}else{var i=this.screen_.style.font,n=Ie("QWER1YUIOX".repeat(10),i);t=new U.Size(n.width/100,n.height)}return this.ruler_.insertBefore(this.rulerBaseline_,this.ruler_.childNodes[0]),t.baseline=this.rulerBaseline_.offsetTop,this.ruler_.removeChild(this.rulerBaseline_),this.rowNodes_.removeChild(this.ruler_),this.div_.ownerDocument.body.appendChild(this.svg_),t.zoomFactor=this.svg_.currentScale,this.div_.ownerDocument.body.removeChild(this.svg_),t},U.ScrollPort.prototype.resize=function(){this.currentScrollbarWidthPx=U.getClientWidth(this.screen_)-this.screen_.clientWidth,this.syncScrollHeight(),this.syncRowNodesDimensions_();var e=this;this.publish("resize",{scrollPort:this},(function(){e.scroller_.setDimensions(Ee.width,Ee.height,Ee.width,Fe);var t=Fe-Ee.height;t<0&&(t=0),e.scroller_.scrollTo(0,t,!1),e.scheduleRedraw()}))};var De=0;function Ve(e){e.v=(e.v+1)%1e6}function Oe(){return De++%1e6}function Be(e,t,r){return e.attrs.asciiNode?e.txt.substr(t,r):K.wc.substr(e.txt,t,r)}function Ke(e){var t=0;const r=e.nodes;for(var o=r.length,i=0;i<o;i++)t+=r[i].wcw;return t}function Ue(e){let t="";for(var r=0,o=e.nodes.length;r<o;r++)t+=e.nodes[r].txt;return t}var Le=null;U.TextAttributes.prototype.DEFAULT_COLOR="";const ze=Object.freeze({isDefault:!0,wcNode:!1,asciiNode:!0,fci:-1,bci:-1,uci:-1});function We(e,t,r){e.txt=t,null!=r?e.wcw=r:e.attrs.asciiNode?e.wcw=t.length:e.wcw=K.wc.strWidth(t),Ve(e)}function Qe(e,t,r,o){t.txt=r,!e.asciiNode&&t.attrs.asciiNode&&(t.attrs=e),null!=o?t.wcw=o:t.attrs.asciiNode?t.wcw=r.length:t.wcw=K.wc.strWidth(r),Ve(t)}function Ge(e,t){return{v:0,txt:e,wcw:t,key:Oe(),attrs:ze}}function He(e,t){return{v:0,txt:e,wcw:t,key:Oe(),attrs:{isDefault:!0,wcNode:!1,asciiNode:!0,fci:-1,bci:-1,uci:-1}}}function je(e,t,r){return void 0===r&&(r=e.asciiNode?t.length:K.wc.strWidth(t)),{v:0,txt:t,wcw:r,key:Oe(),attrs:e}}function Ze(e,t){if(t.isDefault)return e.attrs.isDefault;var r=e.attrs;return!(r.wcNode||t.wcNode)&&r.fci===t.fci&&r.bci===t.bci&&r.uci===t.uci&&r.fcs===t.fcs&&r.bcs===t.bcs&&r.ucs===t.ucs&&r.bold===t.bold&&r.blink===t.blink&&r.italic===t.italic&&r.underline===t.underline&&r.strikethrough===t.strikethrough}U.TextAttributes.prototype.resetColorPalette=function(){this.colorPalette=K.colors.colorPalette.concat(),this.refreshCSSPalette(),this.syncColors()},U.TextAttributes.prototype.refreshCSSPalette=function(){if(!Le){var e=document.createElement("style");e.type="text/css",this.document_.getElementsByTagName("head")[0].appendChild(e),Le=e}this._debounce&&(clearTimeout(this._debounce),this._debounce=null);var t=this;this._debounce=setTimeout((function(){Le&&(Le.innerHTML=function(e){for(var t=[],r=0;r<256;r++){var o=e.colorPalette[r];t.push("span.c"+r+" { color: "+o+";}"),t.push("span.bc"+r+" { background: "+o+";}"),t.push("span.uc"+r+" { -webkit-text-decoration-color: "+o+";}")}for(t.push(".u { -webkit-text-decoration: underline;}"),t.push(".s { -webkit-text-decoration: line-through;}"),t.push(".us { -webkit-text-decoration: underline line-through;}"),t.push(".u1 { -webkit-text-decoration-style: solid;}"),t.push(".u2 { -webkit-text-decoration-style: double;}"),t.push(".u3 { -webkit-text-decoration-style: wavy;}"),t.push(".u4 { -webkit-text-decoration-style: dotted;}"),t.push(".u5 { -webkit-text-decoration-style: dashed;}"),t.push("span.b { font-weight: bold;}"),t.push("span.i { font-style: italic;}"),t.push("span.wc { display: inline-block; overflow-x:hidden; }"),r=0;r<he;r++)t.push("span.wc"+r+" { width: calc(var(--hterm-charsize-width) * "+r+");}");return t.join("\n")}(t)),t._debounce=null}),10)},U.TextAttributes.prototype.attrs=function(){if(this.isDefault())return ze;var e={isDefault:!1,wcNode:this.wcNode,asciiNode:this.asciiNode,fci:-1,bci:-1,uci:-1};return"number"==typeof this.foreground?e.fci=this.foreground:this.foreground!==this.DEFAULT_COLOR&&(e.fcs=this.foreground),"number"==typeof this.background?e.bci=this.background:this.background!==this.DEFAULT_COLOR&&(e.bcs=this.background),"number"==typeof this.underlineColor?e.uci=this.underlineColor:this.underlineColor!==this.DEFAULT_COLOR&&(e.ucs=this.underlineColor),this.enableBold&&this.bold&&(e.bold=!0),this.italic&&(e.italic=!0),this.blink&&(e.blink=!0),this.underline&&(e.underline=this.underline),this.strikethrough&&(e.strikethrough=!0),e},U.TextAttributes.prototype.syncColors=function(){var e,t=this.foregroundSource,r=this.backgroundSource,o=this.DEFAULT_COLOR,i=this.DEFAULT_COLOR;if(this.inverse&&(t=this.backgroundSource,r=this.foregroundSource,o=this.defaultBackground,i=this.defaultForeground),this.enableBoldAsBright&&this.bold&&Number.isInteger(t)&&(t=(e=t)<8?e+8:e),t===this.SRC_DEFAULT?this.foreground=o:this.foreground=t,this.faint){Number.isInteger(this.foreground)&&(this.foreground=this.colorPalette[this.foreground]);var n=this.foreground===this.DEFAULT_COLOR?this.defaultForeground:this.foreground;this.foreground=K.colors.mix(n,"rgb(0, 0, 0)",.3333)}r===this.SRC_DEFAULT?this.background=i:this.background=r,this.invisible&&(this.foreground=this.background),this.underlineSource===this.SRC_DEFAULT?this.underlineColor=this.DEFAULT_COLOR:this.underlineColor=this.underlineSource},U.TextAttributes.prototype.isDefault=function(){return this.asciiNode&&!this.wcNode&&this.foregroundSource==this.SRC_DEFAULT&&this.backgroundSource==this.SRC_DEFAULT&&!this.underline&&!this.bold&&!this.italic&&!this.faint&&!this.blink&&!this.strikethrough&&!this.inverse&&!this.invisible&&null==this.tileData&&null==this.uri};var qe=/[^\x00-\x7F]/;U.TextAttributes.splitWidecharString=function(e){var t=[],r=0,o=0,i=0,n=0,s=!0,a=e.length,l=e.search(qe);if(l<0)return[{str:e,wcNode:!1,asciiNode:s,wcStrWidth:a}];for(o=i=l;l<a;){var c,u=e.codePointAt(l);if(u<128){var h=e.substr(l),d=h.search(qe);if(-1===d)return o?t.push({str:e.substr(r),wcNode:!1,asciiNode:s,wcStrWidth:i+(a-l)}):t.push({str:h,wcNode:!1,asciiNode:!0,wcStrWidth:h.length}),t;i+=d,o+=d,c=d}else c=u<=65535?1:2,(n=K.wc.charWidth(u))<=1?(i+=n,o+=c,s=!1):(o&&(t.push({str:e.substr(r,o),wcNode:!1,asciiNode:s,wcStrWidth:i}),s=!0,i=0),t.push({str:e.substr(l,c),wcNode:!0,asciiNode:!1,wcStrWidth:2}),r=l+c,o=0);l+=c}return o&&t.push({str:e.substr(r,o),wcNode:!1,asciiNode:s,wcStrWidth:i}),t},K.wc.substr=function(e,t,r){if(!qe.test(e))return e.substr(t,r);var o,i,n=0;if(t)for(i=0;n<e.length;){const r=e.codePointAt(n);if((i+=K.wc.charWidth(r))>t)break;n+=r<=65535?1:2}if(null!=r){for(o=n,i=0;o<e.length;){const t=e.codePointAt(o);if((i+=K.wc.charWidth(t))>r)break;o+=t<=65535?1:2}return e.substring(n,o)}return e.substr(n)},K.wc.strWidth=function(e){var t,r=e.length,o=0,i=e.search(qe);if(i<0)return r;var n=i;for(o=i;n<r;){var s=e.codePointAt(n);if((t=K.wc.charWidth(s))<0)return-1;o+=t,n+=s<=65535?1:2}return o};let Je=new Map;const Ye=K.wc.charWidth;function Xe(e,t,r){var o={key:Oe(),txt:e.txt,wcw:e.wcw,attrs:e.attrs,v:0},i=e.txt;We(e,Be(e,0,t)),We(o,K.wc.substr(i,t));var n=[];return e.txt&&n.push(e),o.txt?e.attrs.wcNode&&o.txt===i?(n.push(He(" ",1)),n.push(r)):(n.push(r),n.push(o)):n.push(r),n}K.wc.charWidth=function(e){let t=Je.get(e);return void 0===t&&(t=Ye(e),Je.size>2e4&&(Je=new Map),Je.set(e,t)),t},U.Screen.prototype.invalidateCursorPosition=function(){this.cursorPosition.move(0,0),this.cursorRowIdx_=0,this.cursorNodeIdx_=0,this.cursorOffset_=0},U.Screen.prototype.clearCursorRow=function(){var e;this.cursorOffset_=0,this.cursorPosition.column=0,this.cursorPosition.overflow=!1,e=this.textAttributes.isDefault()?"":K.f.getWhitespace(this.columnCount_);var t=this.textAttributes.inverse;this.textAttributes.inverse=!1,this.textAttributes.syncColors();var r=je(this.textAttributes.attrs(),e,e.length),o=this.rowsArray[this.cursorRowIdx_];o.nodes=[r],o.o=!1,delete o.img,Ve(o),this.cursorNodeIdx_=0,this.textAttributes.inverse=t,this.textAttributes.syncColors()},U.Screen.prototype.commitLineOverflow=function(){var e=this.rowsArray[this.cursorRowIdx_];e.o=!0,Ve(e)},U.Screen.prototype.setCursorPosition=function(e,t){if(this.rowsArray.length){e>=this.rowsArray.length&&(console.error("Row out of bounds: "+e),e=this.rowsArray.length-1),e<0&&(console.error("Row out of bounds: "+e),e=0),t>=this.columnCount_?(console.error("Column out of bounds: "+t),t=this.columnCount_-1):t<0&&(console.error("Column out of bounds: "+t),t=0),this.cursorPosition.overflow=!1;var r=this.rowsArray[e],o=0,i=r.nodes[0];i||(i=He("",0),r.nodes=[i],Ve(r));var n=0;if(e===this.cursorRowIdx_?t>=this.cursorPosition.column-this.cursorOffset_&&(o=this.cursorNodeIdx_,i=r.nodes[o],n=this.cursorPosition.column-this.cursorOffset_):this.cursorRowIdx_=e,this.cursorPosition.move(e,t),0===t)return this.cursorNodeIdx_=0,void(this.cursorOffset_=0);for(;i;){var s=t-n;if(!r.nodes[o+1]||i.wcw>s)return this.cursorNodeIdx_=o,void(this.cursorOffset_=s);n+=i.wcw,i=r.nodes[++o]}}else console.warn("Attempt to set cursor position on empty screen.")},U.Screen.prototype.syncSelectionCaret=function(e){let t=window._kb.caret;t&&e.collapse(t,0)},U.Screen.prototype.cursorRow=function(){return this.rowsArray[this.cursorRowIdx_]},U.Screen.prototype.maybeClipCurrentRow=function(){var e=this.cursorRow(),t=Ke(e);if(t<=this.columnCount_)this.cursorPosition.column>=this.columnCount_&&(this.setCursorPosition(this.cursorPosition.row,this.columnCount_-1),this.cursorPosition.overflow=!0);else{var r=this.cursorPosition.column;this.setCursorPosition(this.cursorPosition.row,this.columnCount_-1);var o=this.rowsArray[this.cursorRowIdx_].nodes[this.cursorNodeIdx_];t=o.wcw,this.cursorOffset_<t-1&&We(o,Be(o,0,this.cursorOffset_+1)),e.nodes.splice(this.cursorNodeIdx_+1),r<this.columnCount_?this.setCursorPosition(this.cursorPosition.row,r):this.cursorPosition.overflow=!0}},U.Screen.prototype.overwriteNode=function(e,t,r){var o=this.rowsArray[this.cursorRowIdx_],i=o.nodes[this.cursorNodeIdx_];let n=t;var s=i.txt;o.o=!1,this.cursorPosition.column+=t;var a=this.cursorOffset_,l=i.wcw-a;if(l<0){var c=K.f.getWhitespace(-l);if(i.attrs.isDefault||!(!i.attrs.asciiNode||i.attrs.wcNode||i.attrs.bci>=0||i.attrs.bcs||i.attrs.underline||i.attrs.strikethrough))We(i,s+=c,i.wcw-l);else{var u=Ge(c,-l);this.cursorNodeIdx_++,o.nodes.splice(this.cursorNodeIdx_,0,u),i=u,this.cursorOffset_=a=-l,s=c}l=0}if(Ze(i,r)){if(0===l)Qe(r,i,s+e),o.nodes[this.cursorNodeIdx_+1]||(n=0);else if(0===a){const s=t-i.wcw;s>=0?(Qe(r,i,e,t),n=o.nodes[this.cursorNodeIdx_+1]?s:0):(Qe(r,i,e+Be(i,t)),n=0)}else{const o=t+a-i.wcw;if(o>=0)Qe(r,i,Be(i,0,a)+e),n=o;else Qe(r,i,Be(i,0,a)+e+Be(i,a+t)),n=0}return this.cursorOffset_+=t,n}if(0===a){var h=o.nodes[this.cursorNodeIdx_-1];if(h&&Ze(h,r)){Qe(r,h,h.txt+e);const s=t-i.wcw;return s>=0?(o.nodes.splice(this.cursorNodeIdx_,1),n=s):i.attrs.wcNode||(We(i,Be(i,t)),n=0),this.cursorNodeIdx_=this.cursorNodeIdx_-1,this.cursorOffset_=h.wcw,n}var d=je(r,e,t);this.cursorOffset_=t;const s=t-i.wcw;return s>=0?(o.nodes.splice(this.cursorNodeIdx_,1,d),n=s):(o.nodes.splice(this.cursorNodeIdx_,0,d),We(i,Be(i,t)),n=0),n}if(0===l){var p=o.nodes[this.cursorNodeIdx_+1];if(p&&Ze(p,r)){const o=t-p.wcw;return o>=0?(Qe(r,p,e,t),n=o):(Qe(r,p,e+Be(p,t)),n=0),this.cursorNodeIdx_++,this.cursorOffset_=t,n}return d=je(r,e,t),o.nodes.splice(this.cursorNodeIdx_+1,0,d),this.cursorNodeIdx_++,p||(n=0),this.cursorOffset_=d.wcw,n}const f=a+t-i.wcw;if(f>=0){We(i,Be(i,0,a));d=je(r,e,t);return this.cursorNodeIdx_++,o.nodes.splice(this.cursorNodeIdx_,0,d),this.cursorOffset_=t,n=f}var g=Xe(i,a,d=je(r,e,t)),m=g.length;return 1===m?o.nodes.splice(this.cursorNodeIdx_,1,g[0]):2===m?o.nodes.splice(this.cursorNodeIdx_,1,g[0],g[1]):3===m&&(o.nodes.splice(this.cursorNodeIdx_,1,g[0],g[1],g[2]),this.cursorNodeIdx_++),this.cursorNodeIdx_++,this.cursorOffset_=0,n},U.Screen.prototype.insertString=function(e,t){var r=this.rowsArray[this.cursorRowIdx_],o=r.nodes[this.cursorNodeIdx_],i=o.txt;const n=this.textAttributes.attrs();r.o=!1,this.cursorPosition.column+=t;var s=this.cursorOffset_,a=o.wcw-s;if(a<0){var l=K.f.getWhitespace(-a);if(o.attrs.isDefault||!(!o.attrs.asciiNode||o.attrs.wcNode||o.attrs.bci>=0||o.attrs.bcs||o.attrs.underline||o.attrs.strikethrough))We(o,i+=l,o.wcw-a);else{var c=Ge(l,-a);this.cursorNodeIdx_++,r.nodes.splice(this.cursorNodeIdx_,0,c),o=c,this.cursorOffset_=s=-a,i=l}a=0}if(Ze(o,n)){if(0===a)Qe(n,o,i+e);else if(0===s)Qe(n,o,e+i);else{Qe(n,o,Be(o,0,s)+e+Be(o,s))}this.cursorOffset_+=t}else{if(0===s){var u=r.nodes[this.cursorNodeIdx_-1];if(u&&Ze(u,n))return Qe(n,u,u.txt+e),this.cursorNodeIdx_=this.cursorNodeIdx_-1,void(this.cursorOffset_=u.wcw);var h=je(n,e,t);return r.nodes.splice(this.cursorNodeIdx_,0,h),void(this.cursorOffset_=t)}if(0===a){var d=r.nodes[this.cursorNodeIdx_+1];return d&&Ze(d,n)?(Qe(n,d,e+d.txt),this.cursorNodeIdx_++,void(this.cursorOffset_=t)):(h=je(n,e,t),r.nodes.splice(this.cursorNodeIdx_+1,0,h),this.cursorNodeIdx_++,void(this.cursorOffset_=h.wcw))}var p=Xe(o,s,h=je(n,e,t)),f=p.length;1===f?r.nodes.splice(this.cursorNodeIdx_,1,p[0]):2===f?r.nodes.splice(this.cursorNodeIdx_,1,p[0],p[1]):3===f&&(r.nodes.splice(this.cursorNodeIdx_,1,p[0],p[1],p[2]),this.cursorNodeIdx_++),this.cursorNodeIdx_++,this.cursorOffset_=0}},U.Screen.prototype.overwriteString=function(e,t){if(!(this.columnCount_-this.cursorPosition.column))return[e];var r=this.rowsArray[this.cursorRowIdx_],o=r.nodes[this.cursorNodeIdx_],i=this.textAttributes.attrs(),n=this.cursorOffset_;const s=t+n-o.wcw;if(s<=0&&Ze(o,i)){if(this.cursorOffset_+=t,this.cursorPosition.column+=t,0===s&&o.txt.substr(n)===e)return;return Qe(i,o,0===s?Be(o,0,n)+e:Be(o,0,n)+e+Be(o,n+t)),void Ve(r)}var a=this.overwriteNode(e,t,i);a>0&&this.deleteChars(a),function(e,t){for(var r=0,o=e.nodes[t],i=o.txt,n=o.wcw,s=o.attrs,a=t+1,l=e.nodes[a];l&&Ze(l,s);)i+=l.txt,n+=l.wcw,l.attrs.asciiNode||(s=l.attrs),r++,a++,l=e.nodes[a];r>0&&(Qe(s,o,i,n),e.nodes.splice(t+1,r),Ve(e))}(r,this.cursorNodeIdx_),Ve(r)},U.Screen.prototype.deleteChars=function(e){for(var t=this.rowsArray[this.cursorRowIdx_],r=this.cursorNodeIdx_,o=0,i=this.cursorOffset_,n=t.nodes.length,s=e,a=this.cursorNodeIdx_;a<n;a++){if(e<0){console.error(`Deleting ${s} chars went negative: ${e}`);break}if(0===e)break;var l=t.nodes[a],c=l.wcw;if(i>0){if(c-i===e)return We(l,Be(l,0,i)),s;if(c-i>e)return We(l,Be(l,0,i)+Be(l,i+e)),s;if(We(l,Be(l,0,i)),!t.nodes[a+1])return s;e-=c-i,i=0,r++}else{if(!(c<=e)){if(We(l,Be(l,e)),l.attrs.wcNode&&c===l.wcw){var u=He(" ",1);e-=1,t.nodes.splice(a,1,u)}break}o++,e-=c}}return 0===o?s:(t.nodes.splice(r,o),r>this.cursorNodeIdx_?s:0===(n=t.nodes.length)?(t.nodes=[He("",0)],this.cursorNodeIdx_=0,this.cursorOffset_=0,s):n<=this.cursorNodeIdx_?(this.cursorNodeIdx_=n-1,this.cursorOffset_=t.nodes[n-1].wcw,s):(this.cursorOffset_=0,s))},U.Screen.prototype.popRow=function(){return this.rowsArray.pop()},U.Screen.prototype.popRows=function(e){return this.rowsArray.splice(this.rowsArray.length-e,e)},U.Screen.prototype.pushRow=function(e){this.rowsArray[this.rowsArray.length]=e},U.Screen.prototype.setRow=function(e,t){this.rowsArray[t]=e},U.Screen.prototype.pushRows=function(e){for(var t=0,r=this.rowsArray.length,o=e.length;t<o;t++)this.rowsArray[t+r]=e[t]},U.Screen.prototype.getLineStartRow_=function(e){var t=this.rowsArray.indexOf(e);if(t<=0)return e;for(;this.rowsArray[t-1]&&this.rowsArray[t-1].o;)e=this.rowsArray[t-1],t--;return e},U.Screen.prototype.getLineText_=function(e){var t="",r=this.rowsArray.indexOf(e);if(r<0)return Ue(e);for(;e&&(t+=Ue(e),e.o);)r++,e=this.rowsArray[r];return t},U.Screen.prototype.getPositionWithOverflow_=function(e,t,r){return 0},U.Screen.prototype.getPositionWithinRow_=function(e,t,r){return 0},U.Screen.prototype.getNodeAndOffsetWithOverflow_=function(e,t){return-1},U.Screen.prototype.getNodeAndOffsetWithinRow_=function(e,t){return null},U.Screen.prototype.setRange_=function(e,t,r,o){},U.Screen.prototype.expandSelection=function(e){},U.AccessibilityReader=function(e){this.document_=e.ownerDocument;const t=this.document_.createElement("div");t.id="hterm:accessibility-live-region",t.style.cssText="position: absolute;\n                              width: 0; height: 0;\n                              overflow: hidden;\n                              left: -1000; top: -1000;",e.appendChild(t),this.accessibilityEnabled=!1,this.liveElement_=this.document_.createElement("p"),this.liveElement_.setAttribute("role","log"),t.appendChild(this.liveElement_),this.assertiveLiveElement_=this.document_.createElement("p"),this.assertiveLiveElement_.setAttribute("role","alert"),this.assertiveLiveElement_.setAttribute("area-relevant","all"),t.appendChild(this.assertiveLiveElement_),this.queue_=[],this.nextReadTimer_=null,this.cursorIsChanging_=!1,this.cursorChangeQueue_=[],this.lastCursorRowString_=null,this.lastCursorRow_=null,this.lastCursorColumn_=null,this.hasUserGesture=!1},U.AccessibilityReader.DELAY=50,U.AccessibilityReader.prototype.setAccessibilityEnabled=function(e){e||this.clear(),this.accessibilityEnabled=e},U.AccessibilityReader.prototype.decorate=function(e){["keydown","keypress","keyup","textInput"].forEach(t=>{e.addEventListener(t,()=>{this.hasUserGesture=!0})})},U.AccessibilityReader.prototype.beforeCursorChange=function(e,t,r){this.accessibilityEnabled&&this.hasUserGesture&&!this.cursorIsChanging_&&(this.cursorIsChanging_=!0,this.lastCursorRowString_=e,this.lastCursorRow_=t,this.lastCursorColumn_=r)},U.AccessibilityReader.prototype.afterCursorChange=function(e,t,r){if(this.cursorIsChanging_){if(this.cursorIsChanging_=!1,!this.announceAction_(e,t,r))for(let e=0;e<this.cursorChangeQueue_.length;++e)this.announce(this.cursorChangeQueue_[e]);this.cursorChangeQueue_=[],this.lastCursorRowString_=null,this.lastCursorRow_=null,this.lastCursorColumn_=null,this.hasUserGesture=!1}},U.AccessibilityReader.prototype.announce=function(e){if(this.accessibilityEnabled)if(this.hasUserGesture)this.assertiveAnnounce(e);else if(this.cursorIsChanging_)this.cursorChangeQueue_.push(e);else if("\n"==e&&this.queue_.length>0)this.queue_.push("");else{if(0==this.queue_.length)this.queue_.push(e);else{let t="";0!=this.queue_[this.queue_.length-1].length&&(t=" "),this.queue_[this.queue_.length-1]+=t+e}if(!this.nextReadTimer_){if(1!=this.queue_.length)throw new Error("Expected only one item in queue_ or nextReadTimer_ to be running.");this.nextReadTimer_=setTimeout(this.addToLiveRegion_.bind(this),U.AccessibilityReader.DELAY)}}},U.AccessibilityReader.prototype.assertiveAnnounce=function(e){this.hasUserGesture&&" "==e&&(e=U.msg("SPACE_CHARACTER",[],"Space")),(e=(e||"").trim())==this.assertiveLiveElement_.innerText&&(e="\n"+e),this.clear(),this.assertiveLiveElement_.innerText=e},U.AccessibilityReader.prototype.newLine=function(){this.announce("\n")},U.AccessibilityReader.prototype.clear=function(){this.liveElement_.innerText="",this.assertiveLiveElement_.innerText="",clearTimeout(this.nextReadTimer_),this.nextReadTimer_=null,this.queue_=[],this.cursorIsChanging_=!1,this.cursorChangeQueue_=[],this.lastCursorRowString_=null,this.lastCursorRow_=null,this.lastCursorColumn_=null,this.hasUserGesture=!1},U.AccessibilityReader.prototype.announceAction_=function(e,t,r){if(this.lastCursorRow_!=t)return!1;if(this.lastCursorRowString_==e){if(this.lastCursorColumn_!=r&&""==this.cursorChangeQueue_.join("").trim()){const e=Math.min(this.lastCursorColumn_,r),t=Math.abs(r-this.lastCursorColumn_);return this.assertiveAnnounce(K.wc.substr(this.lastCursorRowString_,e,t)),!0}return!1}if(this.lastCursorRowString_!=e){if(this.lastCursorColumn_+1==r&&" "==K.wc.substr(e,r-1,1)&&this.cursorChangeQueue_.length>0&&" "==this.cursorChangeQueue_[0])return this.assertiveAnnounce(" "),!0;const t=r;if(K.wc.strWidth(e)<=K.wc.strWidth(this.lastCursorRowString_)&&K.wc.substr(this.lastCursorRowString_,0,t)==K.wc.substr(e,0,t)){let r=K.wc.strWidth(e);for(;r>0&&(r!=t&&" "==K.wc.substr(e,r-1,1));--r);const o=K.wc.strWidth(this.lastCursorRowString_)-r,i=r-t;if(K.wc.substr(this.lastCursorRowString_,t+o,i)==K.wc.substr(e,t,i)){const e=K.wc.substr(this.lastCursorRowString_,t,o);if(""!=e)return this.assertiveAnnounce(e),!0}}return!1}return!1},U.AccessibilityReader.prototype.addToLiveRegion_=function(){this.nextReadTimer_=null;let e=this.queue_.join("\n").trim();e==this.liveElement_.innertText&&(e="\n"+e),this.liveElement_.innerText=e,this.queue_=[]};const $e=/^\W*\w+/,et=/\w+\W*$/,tt=8;class rt{constructor(e){this._cursor=-1,this._lastValue="",this._lastPrompt="",this._call=null,this._lines=[],this._total=0,this._found=0,this._response=null,this._prompt=e,this._lastValue=e._value,this._lastPrompt=e._prompt}enter(){let e=this._cursor,t=this._lines.find((function(t){return t.num==e}));t&&(this._prompt._value=t.val,this._prompt._cursor=K.wc.strWidth(t.val),this._prompt._render())}search(){this._cancelCall(),this._response&&this._response.pattern==this._prompt._value||(this._cursor=-1,this._call=window.term_apiRequest("history.search",{pattern:this._prompt._value,before:tt,after:0,cursor:this._cursor}),this._call.then(e=>{if(!e)return;this._response=e,this._lines=e.lines,this._total=e.total,this._found=e.found;let t=e.lines[e.lines.length-1];t&&(this._cursor=t.num),this.render()}))}_cancelCall(){this._call&&this._call.cancel(),this._call=null}prev(e){if(this._cancelCall(),e){let e=this._cursor,t=this._lines.findIndex((function(t){return t.num==e}));t>0?(this._cursor=this._lines[t-1].num,this._prompt._render()):(this._call=window.term_apiRequest("history.search",{pattern:this._prompt._value,before:1,after:0,cursor:this._cursor}),this._call.then(e=>{if(!e)return;let t=e.lines[0];t?(this._lines.splice(-1,1),this._lines.splice(0,0,t),this._cursor=t.num,this.render()):this._prompt._term.ringBell()}))}else this._call=window.term_apiRequest("history.search",{pattern:this._lastValue,before:1,after:0,cursor:this._cursor}),this._call.then(e=>{if(!e)return;let t=e.lines[0];t?(this._cursor=t.num,this._prompt._value=t.val,this._prompt._cursor=K.wc.strWidth(t.val),this._prompt._render()):this._prompt._term.ringBell()})}next(e){if(e){let e=this._cursor,t=this._lines.findIndex((function(t){return t.num==e}));t<this._lines.length-1&&-1!=t?(this._cursor=this._lines[t+1].num,this._prompt._render()):(this._call=window.term_apiRequest("history.search",{pattern:this._prompt._value,before:0,after:2,cursor:this._cursor}),this._call.then(e=>{if(!e)return;let t=e.lines[1];t?(this._lines.splice(0,1),this._lines.push(t),this._cursor=t.num,this.render()):this._prompt._term.ringBell()}))}else{if(this._cancelCall(),-1==this._cursor)return this._prompt._term.ringBell(),void(this._prompt._history=null);this._call=window.term_apiRequest("history.search",{pattern:this._lastValue,before:0,after:2,cursor:this._cursor}),this._call.then(e=>{if(!e)return;let t=e.lines[1];if(!t)return this._prompt._value=this._lastValue,this._prompt._cursor=K.wc.strWidth(this._lastValue),this._prompt._term.ringBell(),void(this._prompt._history=null);this._cursor=t.num,this._prompt._value=t.val,this._prompt._cursor=K.wc.strWidth(t.val),this._prompt._render()})}}reset(){this._cancelCall()}render(){let e=this._prompt._term,t=e.screen_.columnCount_;e.setCursorVisible(!1),e.setCursorPosition(this._prompt._startRow,this._prompt._startCol),e.eraseBelow();let r=K.wc.strWidth(this._prompt._value),o="📖 👀";r>0&&(o="📖 🔍",0==this._lines.length&&(o+=" 🤷")),o=(""+this._found).padStart(6," ")+" of "+this._total+" "+o;e.print(o,!1);let i=r+K.wc.strWidth("> "),n=i/t|0,s=i%t,a=Math.min(tt,this._lines.length),l=a+this._prompt._startRow+n+2-e.screenSize.height;l>0&&(e.appendRows_(l),this._prompt._startRow-=l,e.setCursorPosition(this._prompt._startRow,this._prompt._startCol));for(var c=0;c<a;c++){var u=this._lines[c];e.setCursorPosition(this._prompt._startRow+c+1,0),e.print((this._cursor==u.num?"* ":"  ")+(u.num+"").padStart(4," ")+" ",!1),e.print(u.val,!1)}e.setCursorPosition(this._prompt._startRow+a+1,0),e.print("> ",!1),e.print(this._prompt._value,!1),n=(i=this._prompt._cursor+K.wc.strWidth("> "))/t|0,s=i%t,e.setCursorPosition(this._prompt._startRow+n+a+1,s),e.setCursorVisible(!0)}}class ot{constructor(e){this._cursor=-1,this._lastValue="",this._call=null,this._response=null,this._n=0,this._lastCursor=-1,this._checkValue=null,this._checkCursor=-1,this._prompt=e,this._lastValue=e._value}complete(e){this._cancelCall();let t=this._prompt._cursor,r=this._prompt._value||"";if(!r.trim()){this._prompt._value="",this._prompt._cursor=K.wc.strWidth(this._prompt._value),this._prompt._hint="",this._prompt._render(),this._prompt._term.interpret("\r\n");let e="line",t={text:"help list-commands"};return void window.webkit.messageHandlers.interOp.postMessage({op:e,data:t})}let o=t,i=r,n=this._n;this._checkCursor==t&&this._checkValue==r?(n+=e,t=this._lastCursor,r=this._lastValue):(n=0,this._lastCursor=t,this._lastValue=r),this._call=window.term_apiRequest("completion.for",{cursor:t,input:r,n:n}),this._call.then(e=>{if(!e)return;if(o!=this._prompt._cursor||i!=this._prompt._value)return;let t=e.result;if(t){let o=r.substr(0,e.pos+e.len);o=r.substr(0,e.pos)+t;let i=K.wc.strWidth(o),s=r.substring(e.pos+e.len);this._prompt._value=[o,s].join(""),this._prompt._cursor=i,this._checkCursor=this._prompt._cursor,this._checkValue=this._prompt._value,this._n=n}else this._checkCursor=-1,this._checkValue=null,this._n=0;if(this._response.hint){let t=r.substr(0,e.start);this._prompt._hintPos=K.wc.strWidth(t),this._prompt._hint=e.hint}else this._prompt._hintPos=0,this._prompt._hint="";this.hint()})}hint(){this._cancelCall();let e=this._prompt._value,t=this._prompt._cursor;this._response&&this._response.input==e||(this._call=window.term_apiRequest("completion.for",{cursor:t,input:this._prompt._value,n:0}),this._call.then(r=>{if(!r)return;if(t!=this._prompt._cursor||e!=this._prompt._value)return;if(this._response=r,this._response.hint){let t=e.substr(0,r.start);this._prompt._hintPos=K.wc.strWidth(t),this._prompt._hint=r.hint}else this._prompt._hintPos=0,this._prompt._hint="";this._prompt._render()}))}_cancelCall(){this._call&&this._call.cancel(),this._call=null}}class it{constructor(e){this._prompt="",this._shell=!1,this._secure=!1,this._cursor=0,this._row=0,this._value="",this._history=null,this._complete=null,this._startCol=0,this._startRow=0,this._historySearchMode=!1,this._hint="",this._hintPos=0,this._onKey=e=>{let t=this._term;switch(e.fullName){case"tab":return void this._completeIfNeeded();case"S-tab":return void this._completeBackIfNeeded();case"M-f":case"M-right":this._forwardWord();break;case"M-b":case"M-left":this._backWord();break;case"C-w":this._deleteBackWord();break;case"M-d":this._deleteForwardWord();break;case"M-u":this._uppercaseForwardWord();break;case"home":case"C-a":this._cursor=0;break;case"end":case"C-e":this._cursor=K.wc.strWidth(this._value);break;case"C-u":this._value=K.wc.substr(this._value,this._cursor),this._cursor=0;break;case"C-l":0==this._cursor&&""===this._value?t.ringBell():(this._cursor=0,this._value="",this._resetHistory());break;case"C-r":this._shell?(this._historySearchMode=!0,this._resetHistory()):t.ringBell();break;case"C-c":this._cursor=0,this._value="";break;case"backspace":if(0==this._cursor)t.ringBell();else{let e=K.wc.substring(this._value,0,this._cursor-1),t=K.wc.substr(this._value,this._cursor);this._value=[e,t].join(""),this._cursor=K.wc.strWidth(e),this._resetHistory()}break;case"C-d":{let e=K.wc.substring(this._value,0,this._cursor),t=K.wc.substr(this._value,this._cursor+1);this._value=[e,t].join("")}break;case"C-b":case"left":this._moveLeft();break;case"C-f":case"right":this._moveRight();break;case"C-k":if(!this._historySearchMode){this._value=K.wc.substring(this._value,0,this._cursor),this._cursor=K.wc.strWidth(this._value),this._resetHistory();break}case"C-p":case"up":return this._moveUp();case"C-n":case"down":return this._moveDown();case"escape":this._historySearchMode=!1;break;case"linefeed":case"C-j":if(this._historySearchMode)return this._moveDown();case"return":case"enter":if(this._historySearchMode)return this._getHistory().enter(),this._historySearchMode=!1,this._resetHistory(),void this._render();this._cursor=K.wc.strWidth(this._value),this._hint="",this._render(),this._term.interpret("\r\n");let r="line",o={text:this._value||""};return void window.webkit.messageHandlers.interOp.postMessage({op:r,data:o});default:if(e.ch){let r=K.wc.strWidth(e.ch),o=K.wc.substring(this._value,0,this._cursor),i=K.wc.substr(this._value,this._cursor);t.accessibilityReader_.assertiveAnnounce(e.ch),this._value=[o,e.ch,i].join(""),this._cursor+=r,this._resetHistory()}}this._searchIfNeeded(),this._hintIfNeeded(),this._render()},this._term=e}_valueStartCol(){return this._startCol+K.wc.strWidth(this._prompt)}_searchIfNeeded(){this._shell&&this._historySearchMode&&this._getHistory().search()}_completeIfNeeded(){this._shell&&!this._historySearchMode&&this._getComplete().complete(1)}_completeBackIfNeeded(){this._shell&&!this._historySearchMode&&this._getComplete().complete(-1)}_hintIfNeeded(){this._shell&&!this._historySearchMode?this._getComplete().hint():this._hint=""}_moveLeft(){if(this._cursor<0)return this._cursor=0,void this._term.ringBell();var e,t,r=0;do{r+=1,e=K.wc.substring(this._value,0,this._cursor-r),t=K.wc.strWidth(e)}while(t>=this._cursor&&r<5);this._cursor=t}_moveRight(){let e=K.wc.strWidth(this._value);if(this._cursor>=e)return this._cursor=e,void this._term.ringBell();var t,r,o=0;do{o+=1,t=K.wc.substring(this._value,0,this._cursor+o),r=K.wc.strWidth(t)}while(r<=this._cursor&&o<5);this._cursor=r}_moveUp(){let e=this._term,t=this._term.screen_;if(((this._cursor+this._valueStartCol())/t.columnCount_|0)>0)this._cursor-=t.columnCount_,this._cursor<0&&(this._cursor=0);else{if(this._shell)return this._hint="",this._getHistory().prev(this._historySearchMode);e.ringBell()}this._render()}_moveDown(){let e=this._term,t=this._term.screen_,r=K.wc.strWidth(this._value);if(((this._cursor+this._valueStartCol())/t.columnCount_|0)<(r/t.columnCount_|0))this._cursor+=t.columnCount_,this._cursor>r&&(this._cursor=r);else{if(this._shell)return this._hint="",this._getHistory().next(this._historySearchMode);e.ringBell()}this._render()}_getHistory(){return this._history||(this._history=new rt(this)),this._history}_getComplete(){return this._complete||(this._complete=new ot(this)),this._complete}_resetHistory(){this._historySearchMode?this._getHistory().search():this._history&&(this._history.reset(),this._history=null)}_forwardWord(){let e=K.wc.substr(this._value,this._cursor),t=$e.exec(e);t&&(this._cursor+=K.wc.strWidth(t[0]))}_backWord(){let e=K.wc.substring(this._value,0,this._cursor),t=et.exec(e);t&&(this._cursor-=K.wc.strWidth(t[0]),this._cursor<0&&(this._cursor=0))}_deleteBackWord(){0==this._cursor&&this._term.ringBell();var e=K.wc.substring(this._value,0,this._cursor);let t=K.wc.substr(this._value,this._cursor),r=et.exec(e);if(!r)return;let o=K.wc.strWidth(r[0]);e=K.wc.substring(this._value,0,this._cursor-o),this._value=[e,t].join(""),this._cursor=Math.max(0,this._cursor-o),this._resetHistory()}_deleteForwardWord(){let e=K.wc.substring(this._value,0,this._cursor);var t=K.wc.substr(this._value,this._cursor);let r=$e.exec(t);if(!r)return;let o=K.wc.strWidth(r[0]);t=K.wc.substr(t,o),this._value=[e,t].join(""),this._resetHistory()}_uppercaseForwardWord(){let e=K.wc.substring(this._value,0,this._cursor);var t=K.wc.substr(this._value,this._cursor);let r=$e.exec(t);if(!r)return;let o=r[0].toUpperCase(),i=K.wc.strWidth(o);t=K.wc.substr(t,i),this._value=[e,o,t].join(""),this._cursor+=i,this._resetHistory()}_render(){if(this._historySearchMode)return void this._getHistory().render();let e=this._term,t=e.screen_.columnCount_;e.setCursorVisible(!1),e.setCursorPosition(this._startRow,this._startCol),e.eraseBelow();let r=this._hintPos+K.wc.strWidth(this._hint),o=K.wc.strWidth(this._value);o=Math.max(r,o),this._secure&&(o=0,r=0);let i=o+this._valueStartCol(),n=i/t|0,s=i%t,a=this._startRow+n+1-e.screenSize.height;a>0&&(e.appendRows_(a),this._startRow-=a,e.setCursorPosition(this._startRow,this._startCol)),e.print(this._prompt,!1);var l=e.saveCursor();if(!this._secure){if(this._hint&&this._shell){let r=this._hintPos+this._valueStartCol(),o=r/t|0,i=r%t;e.setCursorPosition(this._startRow+o,i),e.screen_.textAttributes.faint=!0,e.screen_.textAttributes.foregroundSource=3,e.screen_.textAttributes.syncColors(),e.print(this._hint,!1),e.restoreCursor(l),e.screen_.textAttributes.reset()}e.print(this._value,!1)}n=(i=(this._secure?0:this._cursor)+this._valueStartCol())/t|0,s=i%t,e.setCursorPosition(this._startRow+n,s),e.setCursorVisible(!0)}processInput(e){this._startCol<0&&(this._value="",this._cursor=0,this._startCol=this._term.getCursorColumn(),this._startRow=this._term.getCursorRow()),H(e,this._onKey)}processMouseClick(e){if(this._startCol<0)return!1;if(null==e.terminalRow||null==e.terminalColumn)return!1;var t=e.terminalColumn-1,r=e.terminalRow-1,o=this._startRow,i=this._getHistory()._lines;this._historySearchMode&&(o+=i.length+1);let n=r-o;if(n<0){if(-n<=i.length){let e=i[i.length+n];return this._getHistory()._cursor=e.num,void this._getHistory().render()}return this._cursor=0,void this._render()}let s=K.wc.strWidth(this._value),a=n*this._term.screen_.columnCount_+t-(this._historySearchMode?2:this._valueStartCol());this._cursor=Math.min(Math.max(a,0),s);let l=K.wc.substring(this._value,0,this._cursor);return this._cursor=K.wc.strWidth(l),this._render(),!0}processMouseScroll(e){return!(this._startCol<0)&&(null!=e.terminalRow&&null!=e.terminalColumn&&(!!this._historySearchMode&&(e.deltaY>0?this._moveUp():this._moveDown(),!0)))}promptB64(e){this.reset(),this._term.setAutoCarriageReturn(!0);let t=JSON.parse(window.atob(e));this._prompt=t.prompt,this._secure=t.secure,this._shell=t.shell,this._value="",this._hint="",this._hintPos=0,this._cursor=0,this._startCol=this._term.getCursorColumn(),this._startRow=this._term.getCursorRow(),this._render(),this._term.accessibilityReader_.announce(this._prompt)}reset(){-1!=this._startCol&&(this._history=null,this._complete=null,this._prompt="",this._startCol=-1,this._secure=!1,this._shell=!1,this._hint="",this._hintPos=0,this._historySearchMode=!1)}resize(){this._startCol<0||this._render()}}U.Terminal.prototype.decorate=function(e){this.div_=document.body,this.accessibilityReader_=new U.AccessibilityReader(this.div_),this.scrollPort_.decorate(e),this.scrollPort_.setUserCssUrl(this.prefs_.get("user-css")),this.scrollPort_.setUserCssText(this.prefs_.get("user-css-text")),this.scrollPort_.setAccessibilityReader(this.accessibilityReader_),this.div_.focus=this.focus.bind(this),this.setFontSize(this.prefs_.get("font-size")),this.syncFontFamily(),this.setScrollbarVisible(this.prefs_.get("scrollbar-visible")),this.setScrollWheelMoveMultipler(this.prefs_.get("scroll-wheel-move-multiplier")),this.document_=this.scrollPort_.getDocument(),this.document_.body.oncontextmenu=function(){return!1};var t=this.onMouse_.bind(this),r=this.scrollPort_.getScreenNode();r.addEventListener("mousedown",t),r.addEventListener("mouseup",t),r.addEventListener("mousemove",t),this.scrollPort_.onScrollWheel=t;let o=this.onFocusChange_.bind(this,!0);r.addEventListener("focus",o),r.addEventListener("mousedown",function(){setTimeout(o)}.bind(this)),r.addEventListener("blur",this.onFocusChange_.bind(this,!1));var i=this.document_.createElement("style");i.textContent='.cursor-node[focus="false"] {  box-sizing: border-box;  background-color: transparent !important;  border-width: 2px;  border-style: solid;}.wc-node {  display: inline-block;  text-align: center;  width: calc(var(--hterm-charsize-width) * 2);  line-height: var(--hterm-charsize-height);}:root {  --hterm-charsize-width: '+this.scrollPort_.characterSize.width+"px;  --hterm-charsize-height: "+this.scrollPort_.characterSize.height+"px;  --hterm-cursor-offset-col: -1;  --hterm-cursor-offset-row: -1;  --hterm-blink-node-duration: 0.7s;  --hterm-mouse-cursor-text: text;  --hterm-mouse-cursor-pointer: default;  --hterm-mouse-cursor-style: var(--hterm-mouse-cursor-text);}.uri-node:hover {  text-decoration: underline;  cursor: pointer;}@keyframes blink {  from { opacity: 1.0; }  to { opacity: 0.0; }}.blink-node {  animation-name: blink;  animation-duration: var(--hterm-blink-node-duration);  animation-iteration-count: infinite;  animation-timing-function: ease-in-out;  animation-direction: alternate;}",this.document_.head.appendChild(i),this.cursorOverlayNode_=this.document_.createElement("div"),this.cursorOverlayNode_.id="hterm:terminal-overlay-cursor",this.cursorOverlayNode_.style.cssText="position: absolute;left: 0;top: 0;bottom: 0;right: 0;pointer-events: none;",this.document_.body.appendChild(this.cursorOverlayNode_),this.cursorNode_=this.document_.createElement("div"),this.cursorNode_.id="hterm:terminal-cursor",this.cursorNode_.className="cursor-node",this.cursorNode_.style.cssText="position: absolute;display: "+(this.options_.cursorVisible?"":"none")+";width: var(--hterm-charsize-width);height: var(--hterm-charsize-height);background-color: var(--hterm-cursor-color);border-color: var(--hterm-cursor-color);  isolatation: isolate;  transform: translate3d(calc(var(--hterm-charsize-width) * var(--hterm-cursor-offset-col)), calc(var(--hterm-charsize-height) * var(--hterm-cursor-offset-row)), 0);-webkit-transition: opacity, background-color 100ms linear;-moz-transition: opacity, background-color 100ms linear;",this.setCursorColor(),this.setCursorBlink(!!this.prefs_.get("cursor-blink")),this.restyleCursor_(),this.cursorOverlayNode_.appendChild(this.cursorNode_),this.ime_=this.document_.createElement("ime"),this.cursorOverlayNode_.appendChild(this.ime_),this.scrollBlockerNode_=this.document_.createElement("div"),this.scrollBlockerNode_.id="hterm:mouse-drag-scroll-blocker",this.scrollBlockerNode_.style.cssText="position: absolute;top: -99px;display: block;width: 10px;height: 10px;",this.document_.body.appendChild(this.scrollBlockerNode_),this.scrollPort_.onScrollWheel=t,["mousedown","mouseup","mousemove","click","dblclick"].forEach(e=>{this.scrollBlockerNode_.addEventListener(e,t),this.cursorNode_.addEventListener(e,t),this.document_.addEventListener(e,t)}),this.cursorNode_.addEventListener("mousedown",()=>{setTimeout(this.focus.bind(this))}),this.setReverseVideo(!1),this.scrollPort_.focus(),this.scrollPort_.scheduleRedraw(),this.prompt=new it(this)},U.Terminal.prototype.syncCursorPosition_=function(){var e=this.scrollPort_.getTopRowIndex(),t=this.scrollPort_.getBottomRowIndex(e),r=this.scrollbackRows_.length+this.screen_.cursorPosition.row;let o=!1;if(this.accessibilityReader_.accessibilityEnabled){const e=this.screen_.cursorPosition.column;const t=Ue(this.getRowNode(this.screen_.cursorPosition.row));o=this.accessibilityReader_.hasUserGesture,this.accessibilityReader_.afterCursorChange(t,r,e)}if(r>t)this.setCssCursorPos({row:-1,col:-1});else{this.options_.cursorVisible&&"none"==this.cursorNode_.style.display&&(this.cursorNode_.style.display=""),this.setCssCursorPos({row:r-e+this.scrollPort_.visibleRowTopMargin,col:this.screen_.cursorPosition.column});var i=this.document_.getSelection();i&&(i.isCollapsed||o)&&this.screen_.syncSelectionCaret(i)}};var nt={row:-1,col:-1};U.Terminal.prototype.setCssCursorPos=function(e){nt.row===e.row&&nt.col===e.col||-1===nt.row&&-1===e.row||(nt.row!==e.row&&this.setCursorCssVar("cursor-offset-row",e.row+""),nt.col!==e.col&&this.setCursorCssVar("cursor-offset-col",e.col+""),this.blinkCursorPos=e,nt=e)},U.Terminal.prototype.setCursorCssVar=function(e,t,r="--hterm-"){this.cursorOverlayNode_.style.setProperty(`${r}${e}`,t)},U.Terminal.prototype.scheduleSyncCursorPosition_=function(){if(!this.timeouts_.syncCursor){var e=this;this.timeouts_.syncCursor=setTimeout((function(){requestAnimationFrame((function(){e.syncCursorPosition_(),e.timeouts_.syncCursor=0}))}),0)}},U.Terminal.prototype.scheduleRedraw_=function(){if(!this.timeouts_.redraw){var e=this;this.timeouts_.redraw=setTimeout((function(){e.timeouts_.redraw=0,e.scrollPort_.redraw_()}),0)}},U.Terminal.prototype.scheduleScrollDown_=function(){if(!this.timeouts_.scrollDown){var e=this;this.timeouts_.scrollDown=setTimeout((function(){e.timeouts_.scrollDown=0,e.scrollPort_.scrollToBottom()}),20)}},U.Terminal.prototype.renumberRows_=function(e,t,r){for(var o=r||this.screen_,i=this.scrollbackRows_.length,n=o.rowsArray,s=e;s<t;s++){var a=n[s];a.n=i+s,Ve(a)}},U.Terminal.prototype.appendRows_=function(e){var t=!1;this.scrollbackRows_.length>6e3&&(this.scrollbackRows_.splice(0,2e3),t=!0);for(var r=this.screen_.rowsArray.length,o=this.scrollbackRows_.length+r,i=0;i<e;i++){var n={key:Oe(),n:o+i,o:!1,v:0,nodes:[Ge("",0)]};this.screen_.setRow(n,r+i)}var s=this.screen_.rowsArray.length-this.screenSize.height;if(s>0){var a=this.screen_.shiftRows(s);Array.prototype.push.apply(this.scrollbackRows_,a),this.scrollPort_.isScrolledEnd&&this.scheduleScrollDown_()}t&&(this.scrollPort_.syncScrollHeight(),this.scheduleScrollDown_()),r>=this.screen_.rowsArray.length&&(r=this.screen_.rowsArray.length-1),this.setAbsoluteCursorPosition(r,0)},U.Terminal.prototype.moveRows_=function(e,t,r){var o,i,n=this.screen_.removeRows(e,t);this.screen_.insertRows(r,n),e<r?(o=e,i=r+t):(o=r,i=e+t),this.renumberRows_(o,i),this.scrollPort_.scheduleInvalidate()},U.Terminal.prototype.eraseToLeft=function(){var e=this.saveCursor();this.setCursorColumn(0);const t=e.column+1;this.screen_.overwriteString(K.f.getWhitespace(t),t),this.scrollPort_.renderRef.touchRow(this.screen_.cursorRow()),this.restoreCursor(e)},U.Terminal.prototype.eraseToRight=function(e){if(!this.screen_.cursorPosition.overflow){var t=this.screenSize.width-this.screen_.cursorPosition.column,r=e?Math.min(e,t):t,o=this.screen_.rowsArray[this.screen_.cursorPosition.row];if(this.screen_.textAttributes.background===this.screen_.textAttributes.DEFAULT_COLOR&&Ke(o)<=this.screen_.cursorPosition.column+r)return this.screen_.deleteChars(r),this.clearCursorOverflow(),void this.scrollPort_.renderRef.touchRow(o);var i=this.saveCursor();this.screen_.overwriteString(K.f.getWhitespace(r),r),this.scrollPort_.renderRef.touchRow(o),this.restoreCursor(i),this.clearCursorOverflow()}},U.Terminal.prototype.insertLines=function(e){var t=this.screen_.cursorPosition.row,r=this.getVTScrollBottom(),o=r-t-(e=Math.min(e,r-t))+1;o&&this.moveRows_(t,o,t+e);for(var i=e-1;i>=0;i--)this.setAbsoluteCursorPosition(t+i,0),this.screen_.clearCursorRow(),this.scrollPort_.renderRef.touchRow(this.screen_.cursorRow())},U.Terminal.prototype.deleteLines=function(e){var t=this.saveCursor(),r=t.row,o=this.getVTScrollBottom(),i=o-r+1,n=o-(e=Math.min(e,i))+1;e!=i&&this.moveRows_(r,e,n);for(var s=0;s<e;s++){this.setAbsoluteCursorPosition(n+s,0),this.screen_.clearCursorRow();var a=this.screen_.cursorRow();this.scrollPort_.renderRef.touchRow(a)}this.restoreCursor(t),this.clearCursorOverflow()},U.Terminal.prototype.insertSpace=function(e){var t=this.saveCursor(),r=K.f.getWhitespace(e||1);this.screen_.insertString(r,r.length),this.screen_.maybeClipCurrentRow();var o=this.screen_.cursorRow();this.scrollPort_.renderRef.touchRow(o),this.restoreCursor(t),this.clearCursorOverflow()},U.Terminal.prototype.deleteChars=function(e){var t=this.screen_.deleteChars(e);if(t&&!this.screen_.textAttributes.isDefault()){var r=this.saveCursor();this.setCursorColumn(this.screenSize.width-t),this.screen_.insertString(K.f.getWhitespace(t),t),this.restoreCursor(r)}var o=this.screen_.cursorRow();this.scrollPort_.renderRef.touchRow(o),this.clearCursorOverflow()},U.Terminal.prototype.eraseAbove=function(){var e=this.saveCursor();this.eraseToLeft();for(var t=0;t<e.row;t++){this.setAbsoluteCursorPosition(t,0),this.screen_.clearCursorRow();var r=this.screen_.cursorRow();Ve(r),this.scrollPort_.renderRef.touchRow(r)}this.restoreCursor(e),this.clearCursorOverflow()},U.Terminal.prototype.eraseLine=function(){var e=this.saveCursor();this.screen_.clearCursorRow(),this.restoreCursor(e),this.clearCursorOverflow(),this.scrollPort_.renderRef.touchRow(this.screen_.cursorRow())},U.Terminal.prototype.fill=function(e){var t=this.saveCursor();this.setAbsoluteCursorPosition(0,0);for(var r=0;r<this.screenSize.height;r++)for(var o=0;o<this.screenSize.width;o++)this.setAbsoluteCursorPosition(r,o),this.screen_.overwriteString(e,1);this.restoreCursor(t),this.scrollPort_.renderRef.touch()},U.Terminal.prototype.clearHome=function(e){var t=e||this.screen_,r=t.getHeight();if(0!==r){for(var o=0;o<r;o++){t.setCursorPosition(o,0),t.clearCursorRow();var i=this.screen_.cursorRow();this.scrollPort_.renderRef.touchRow(i)}t.setCursorPosition(0,0)}},U.Terminal.prototype.eraseBelow=function(){var e=this.saveCursor();this.eraseToRight();for(var t=this.screenSize.height-1,r=e.row+1;r<=t;r++){this.setAbsoluteCursorPosition(r,0),this.screen_.clearCursorRow();var o=this.screen_.cursorRow();this.scrollPort_.renderRef.touchRow(o)}this.restoreCursor(e),this.clearCursorOverflow()},U.Terminal.prototype.print=function(e,t=!0){this.scheduleSyncCursorPosition_(),t&&this.accessibilityReader_.announce(e);var r=0,o=K.wc.strWidth(e);for(0===o&&e&&(o=1);r<o;){this.options_.wraparound&&this.screen_.cursorPosition.overflow&&(this.screen_.commitLineOverflow(),this.newLine());var i,n=o-r,s=!1;this.screen_.cursorPosition.column+n>=this.screenSize.width&&(s=!0,n=this.screenSize.width-this.screen_.cursorPosition.column),s&&!this.options_.wraparound?(i=K.wc.substr(e,r,n-1)+K.wc.substr(e,o-1),n=o):i=K.wc.substr(e,r,n);for(var a=this.screen_.textAttributes,l=U.TextAttributes.splitWidecharString(i),c=l.length,u=0;u<c;u++){var h=l[u];a.wcNode=h.wcNode,a.asciiNode=h.asciiNode,this.options_.insertMode?this.screen_.insertString(h.str,h.wcStrWidth):this.screen_.overwriteString(h.str,h.wcStrWidth),a.wcNode=!1,a.asciiNode=!0}this.screen_.maybeClipCurrentRow(),r+=n,this.scrollPort_.renderRef.touchRow(this.screen_.cursorRow())}this.scrollOnOutput_&&this.scrollPort_.scrollRowToBottom(this.getRowCount())},U.Terminal.prototype.interpret=function(e){this.prompt.reset(),this.vt.interpret(e)},U.Terminal.prototype.setFontSize=function(e){e<=0&&(e=this.prefs_.get("font-size")),this.cursorOverlayNode_&&(this.cursorOverlayNode_.style.fontSize=e+"px"),this.scrollPort_.setFontSize(e),this.setCssVar("charsize-width",this.scrollPort_.characterSize.width+"px"),this.setCssVar("charsize-height",this.scrollPort_.characterSize.height+"px")},U.Terminal.prototype.syncFontFamily=function(){const e=this.prefs_.get("font-family");this.cursorOverlayNode_&&(this.cursorOverlayNode_.style.fontFamily=e),this.scrollPort_.setFontFamily(e,this.prefs_.get("font-smoothing")),this.syncBoldSafeState()},U.Terminal.prototype.displayImage=function(e){if(void 0!==e.uri&&(e.name||(e.name=""),e.inline)){const t=this.io.push();t.showOverlay(U.msg("LOADING_RESOURCE_START",[e.name],"Loading $1 ..."),null),t.onVTKeystroke=t.sendString=()=>{};const r=this.document_.createElement("img");r.src=e.uri,r.title=r.alt=e.name,this.document_.body.appendChild(r),r.onload=()=>{const o=(e,t,r)=>{if(!e||"auto"==e)return"";const o=e.match(/^([0-9]+)(px|%)?$/);return o?"%"==o[2]?t*parseInt(o[1])/100+"px":"px"==o[2]?e:`calc(${e} * var(${r}))`:""};r.style.width=o(e.width,this.document_.body.clientWidth,"--hterm-charsize-width"),r.style.height=o(e.height,this.document_.body.clientHeight,"--hterm-charsize-height");const i=Math.ceil(r.clientHeight/this.scrollPort_.characterSize.height);for(let e=0;e<i;++e)this.newLine();this.document_.body.removeChild(r);const n=this.getRowNode(this.scrollbackRows_.length+this.getCursorRow()-1);n.img={textAlign:e.align,padRows:i,objectFit:e.preserveAspectRatio?"scale-down":"fill",src:r.src,title:r.title,alt:r.alt,style:{positon:"absolute",bottom:"calc(0px - var(--hterm-charsize-height))"}},Ve(n),this.scrollPort_.renderRef.touchRow(n),t.hideOverlay(),t.pop()},r.onerror=o=>{this.document_.body.removeChild(r),t.showOverlay(U.msg("LOADING_RESOURCE_FAILED",[e.name],"Loading $1 failed ...")),t.pop()}}},U.Terminal.prototype.getRowsText=function(e,t){for(var r=[],o=e;o<t;o++){var i=this.getRowNode(o);r.push(Ue(i)),o<t-1&&!i.o&&r.push("\n")}return r.join("")},window.hterm=U,window.lib=K,window.KeystrokeVisualizer=q,window.installKB=function(e,t){const r=new B(e,t);t||document.body.append(r.element),r.focus(!0),window._onKB=r.onKB,window._kb=r}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,