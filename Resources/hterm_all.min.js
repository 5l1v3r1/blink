!function(e){var t={};function r(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(o,i,function(t){return e[t]}.bind(null,i));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=14)}([function(e,t,r){"use strict";e.exports=r(7)},function(e,t,r){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=r(6)},function(e,t,r){"use strict";var o=function(e){};e.exports=function(e,t,r,i,n,s,a,l){if(o(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[r,i,n,s,a,l],h=0;(c=new Error(t.replace(/%s/g,(function(){return u[h++]})))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,r){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function s(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach((function(e){o[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,a,l=s(e),c=1;c<arguments.length;c++){for(var u in r=Object(arguments[c]))i.call(r,u)&&(l[u]=r[u]);if(o){a=o(r);for(var h=0;h<a.length;h++)n.call(r,a[h])&&(l[a[h]]=r[a[h]])}}return l}},function(e,t,r){"use strict";e.exports={}},function(e,t,r){"use strict";function o(e){return function(){return e}}var i=function(){};i.thatReturns=o,i.thatReturnsFalse=o(!1),i.thatReturnsTrue=o(!0),i.thatReturnsNull=o(null),i.thatReturnsThis=function(){return this},i.thatReturnsArgument=function(e){return e},e.exports=i},function(e,t,r){"use strict";
/** @license React v16.4.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var o=r(2),i=r(0),n=r(8),s=r(3),a=r(5),l=r(9),c=r(10),u=r(11),h=r(4);function d(e){for(var t=arguments.length-1,r="https://reactjs.org/docs/error-decoder.html?invariant="+e,i=0;i<t;i++)r+="&args[]="+encodeURIComponent(arguments[i+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",r)}function p(e,t,r,o,i,n,s,a,l){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(r,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}i||d("227");var f={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,r,o,i,n,s,a,l){p.apply(f,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,r,o,i,n,s,a,l){if(f.invokeGuardedCallback.apply(this,arguments),f.hasCaughtError()){var c=f.clearCaughtError();f._hasRethrowError||(f._hasRethrowError=!0,f._rethrowError=c)}},rethrowCaughtError:function(){return g.apply(f,arguments)},hasCaughtError:function(){return f._hasCaughtError},clearCaughtError:function(){if(f._hasCaughtError){var e=f._caughtError;return f._caughtError=null,f._hasCaughtError=!1,e}d("198")}};function g(){if(f._hasRethrowError){var e=f._rethrowError;throw f._rethrowError=null,f._hasRethrowError=!1,e}}var m=null,y={};function b(){if(m)for(var e in y){var t=y[e],r=m.indexOf(e);if(-1<r||d("96",e),!w[r])for(var o in t.extractEvents||d("97",e),w[r]=t,r=t.eventTypes){var i=void 0,n=r[o],s=t,a=o;C.hasOwnProperty(a)&&d("99",a),C[a]=n;var l=n.phasedRegistrationNames;if(l){for(i in l)l.hasOwnProperty(i)&&_(l[i],s,a);i=!0}else n.registrationName?(_(n.registrationName,s,a),i=!0):i=!1;i||d("98",o,e)}}}function _(e,t,r){A[e]&&d("100",e),A[e]=t,v[e]=t.eventTypes[r].dependencies}var w=[],C={},A={},v={};function S(e){m&&d("101"),m=Array.prototype.slice.call(e),b()}function k(e){var t,r=!1;for(t in e)if(e.hasOwnProperty(t)){var o=e[t];y.hasOwnProperty(t)&&y[t]===o||(y[t]&&d("102",t),y[t]=o,r=!0)}r&&b()}var T={plugins:w,eventNameDispatchConfigs:C,registrationNameModules:A,registrationNameDependencies:v,possibleRegistrationNames:null,injectEventPluginOrder:S,injectEventPluginsByName:k},x=null,P=null,E=null;function R(e,t,r,o){t=e.type||"unknown-event",e.currentTarget=E(o),f.invokeGuardedCallbackAndCatchFirstError(t,r,void 0,e),e.currentTarget=null}function M(e,t){return null==t&&d("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function N(e,t,r){Array.isArray(e)?e.forEach(t,r):e&&t.call(r,e)}var F=null;function I(e,t){if(e){var r=e._dispatchListeners,o=e._dispatchInstances;if(Array.isArray(r))for(var i=0;i<r.length&&!e.isPropagationStopped();i++)R(e,t,r[i],o[i]);else r&&R(e,t,r,o);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function D(e){return I(e,!0)}function V(e){return I(e,!1)}var O={injectEventPluginOrder:S,injectEventPluginsByName:k};function B(e,t){var r=e.stateNode;if(!r)return null;var o=x(r);if(!o)return null;r=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}return e?null:(r&&"function"!=typeof r&&d("231",t,typeof r),r)}function K(e,t){null!==e&&(F=M(F,e)),e=F,F=null,e&&(N(e,t?D:V),F&&d("95"),f.rethrowCaughtError())}function U(e,t,r,o){for(var i=null,n=0;n<w.length;n++){var s=w[n];s&&(s=s.extractEvents(e,t,r,o))&&(i=M(i,s))}K(i,!1)}var L={injection:O,getListener:B,runEventsInBatch:K,runExtractedEventsInBatch:U},z=Math.random().toString(36).slice(2),W="__reactInternalInstance$"+z,Q="__reactEventHandlers$"+z;function G(e){if(e[W])return e[W];for(;!e[W];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[W]).tag||6===e.tag?e:null}function H(e){if(5===e.tag||6===e.tag)return e.stateNode;d("33")}function j(e){return e[Q]||null}var Z={precacheFiberNode:function(e,t){t[W]=e},getClosestInstanceFromNode:G,getInstanceFromNode:function(e){return!(e=e[W])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:H,getFiberCurrentPropsFromNode:j,updateFiberProps:function(e,t){e[Q]=t}};function q(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function J(e,t,r){for(var o=[];e;)o.push(e),e=q(e);for(e=o.length;0<e--;)t(o[e],"captured",r);for(e=0;e<o.length;e++)t(o[e],"bubbled",r)}function Y(e,t,r){(t=B(e,r.dispatchConfig.phasedRegistrationNames[t]))&&(r._dispatchListeners=M(r._dispatchListeners,t),r._dispatchInstances=M(r._dispatchInstances,e))}function X(e){e&&e.dispatchConfig.phasedRegistrationNames&&J(e._targetInst,Y,e)}function $(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;J(t=t?q(t):null,Y,e)}}function ee(e,t,r){e&&r&&r.dispatchConfig.registrationName&&(t=B(e,r.dispatchConfig.registrationName))&&(r._dispatchListeners=M(r._dispatchListeners,t),r._dispatchInstances=M(r._dispatchInstances,e))}function te(e){e&&e.dispatchConfig.registrationName&&ee(e._targetInst,null,e)}function re(e){N(e,X)}function oe(e,t,r,o){if(r&&o)e:{for(var i=r,n=o,s=0,a=i;a;a=q(a))s++;a=0;for(var l=n;l;l=q(l))a++;for(;0<s-a;)i=q(i),s--;for(;0<a-s;)n=q(n),a--;for(;s--;){if(i===n||i===n.alternate)break e;i=q(i),n=q(n)}i=null}else i=null;for(n=i,i=[];r&&r!==n&&(null===(s=r.alternate)||s!==n);)i.push(r),r=q(r);for(r=[];o&&o!==n&&(null===(s=o.alternate)||s!==n);)r.push(o),o=q(o);for(o=0;o<i.length;o++)ee(i[o],"bubbled",e);for(e=r.length;0<e--;)ee(r[e],"captured",t)}var ie={accumulateTwoPhaseDispatches:re,accumulateTwoPhaseDispatchesSkipTarget:function(e){N(e,$)},accumulateEnterLeaveDispatches:oe,accumulateDirectDispatches:function(e){N(e,te)}};function ne(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r["ms"+e]="MS"+t,r["O"+e]="o"+t.toLowerCase(),r}var se={animationend:ne("Animation","AnimationEnd"),animationiteration:ne("Animation","AnimationIteration"),animationstart:ne("Animation","AnimationStart"),transitionend:ne("Transition","TransitionEnd")},ae={},le={};function ce(e){if(ae[e])return ae[e];if(!se[e])return e;var t,r=se[e];for(t in r)if(r.hasOwnProperty(t)&&t in le)return ae[e]=r[t];return e}n.canUseDOM&&(le=document.createElement("div").style,"AnimationEvent"in window||(delete se.animationend.animation,delete se.animationiteration.animation,delete se.animationstart.animation),"TransitionEvent"in window||delete se.transitionend.transition);var ue=ce("animationend"),he=ce("animationiteration"),de=ce("animationstart"),pe=ce("transitionend"),fe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ge=null;function me(){return!ge&&n.canUseDOM&&(ge="textContent"in document.documentElement?"textContent":"innerText"),ge}var ye={_root:null,_startText:null,_fallbackText:null};function be(){if(ye._fallbackText)return ye._fallbackText;var e,t,r=ye._startText,o=r.length,i=_e(),n=i.length;for(e=0;e<o&&r[e]===i[e];e++);var s=o-e;for(t=1;t<=s&&r[o-t]===i[n-t];t++);return ye._fallbackText=i.slice(e,1<t?1-t:void 0),ye._fallbackText}function _e(){return"value"in ye._root?ye._root.value:ye._root[me()]}var we="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),Ce={type:null,target:null,currentTarget:a.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function Ae(e,t,r,o){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=r,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(r):"target"===i?this.target=o:this[i]=r[i]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?a.thatReturnsTrue:a.thatReturnsFalse,this.isPropagationStopped=a.thatReturnsFalse,this}function ve(e,t,r,o){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,r,o),i}return new this(e,t,r,o)}function Se(e){e instanceof this||d("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function ke(e){e.eventPool=[],e.getPooled=ve,e.release=Se}s(Ae.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=a.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=a.thatReturnsTrue)},persist:function(){this.isPersistent=a.thatReturnsTrue},isPersistent:a.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<we.length;t++)this[we[t]]=null}}),Ae.Interface=Ce,Ae.extend=function(e){function t(){}function r(){return o.apply(this,arguments)}var o=this;t.prototype=o.prototype;var i=new t;return s(i,r.prototype),r.prototype=i,r.prototype.constructor=r,r.Interface=s({},o.Interface,e),r.extend=o.extend,ke(r),r},ke(Ae);var Te=Ae.extend({data:null}),xe=Ae.extend({data:null}),Pe=[9,13,27,32],Ee=n.canUseDOM&&"CompositionEvent"in window,Re=null;n.canUseDOM&&"documentMode"in document&&(Re=document.documentMode);var Me=n.canUseDOM&&"TextEvent"in window&&!Re,Ne=n.canUseDOM&&(!Ee||Re&&8<Re&&11>=Re),Fe=String.fromCharCode(32),Ie={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},De=!1;function Ve(e,t){switch(e){case"keyup":return-1!==Pe.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Oe(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Be=!1;var Ke={eventTypes:Ie,extractEvents:function(e,t,r,o){var i=void 0,n=void 0;if(Ee)e:{switch(e){case"compositionstart":i=Ie.compositionStart;break e;case"compositionend":i=Ie.compositionEnd;break e;case"compositionupdate":i=Ie.compositionUpdate;break e}i=void 0}else Be?Ve(e,r)&&(i=Ie.compositionEnd):"keydown"===e&&229===r.keyCode&&(i=Ie.compositionStart);return i?(Ne&&(Be||i!==Ie.compositionStart?i===Ie.compositionEnd&&Be&&(n=be()):(ye._root=o,ye._startText=_e(),Be=!0)),i=Te.getPooled(i,t,r,o),n?i.data=n:null!==(n=Oe(r))&&(i.data=n),re(i),n=i):n=null,(e=Me?function(e,t){switch(e){case"compositionend":return Oe(t);case"keypress":return 32!==t.which?null:(De=!0,Fe);case"textInput":return(e=t.data)===Fe&&De?null:e;default:return null}}(e,r):function(e,t){if(Be)return"compositionend"===e||!Ee&&Ve(e,t)?(e=be(),ye._root=null,ye._startText=null,ye._fallbackText=null,Be=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ne?null:t.data;default:return null}}(e,r))?((t=xe.getPooled(Ie.beforeInput,t,r,o)).data=e,re(t)):t=null,null===n?t:null===t?n:[n,t]}},Ue=null,Le={injectFiberControlledHostComponent:function(e){Ue=e}},ze=null,We=null;function Qe(e){if(e=P(e)){Ue&&"function"==typeof Ue.restoreControlledState||d("194");var t=x(e.stateNode);Ue.restoreControlledState(e.stateNode,e.type,t)}}function Ge(e){ze?We?We.push(e):We=[e]:ze=e}function He(){return null!==ze||null!==We}function je(){if(ze){var e=ze,t=We;if(We=ze=null,Qe(e),t)for(e=0;e<t.length;e++)Qe(t[e])}}var Ze={injection:Le,enqueueStateRestore:Ge,needsStateRestore:He,restoreStateIfNeeded:je};function qe(e,t){return e(t)}function Je(e,t,r){return e(t,r)}function Ye(){}var Xe=!1;function $e(e,t){if(Xe)return e(t);Xe=!0;try{return qe(e,t)}finally{Xe=!1,He()&&(Ye(),je())}}var et={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function tt(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!et[e.type]:"textarea"===t}function rt(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ot(e,t){return!(!n.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function it(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function nt(e){e._valueTracker||(e._valueTracker=function(e){var t=it(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),o=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var i=r.get,n=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){o=""+e,n.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return o},setValue:function(e){o=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function st(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),o="";return e&&(o=it(e)?e.checked?"true":"false":e.value),(e=o)!==r&&(t.setValue(e),!0)}var at=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,lt="function"==typeof Symbol&&Symbol.for,ct=lt?Symbol.for("react.element"):60103,ut=lt?Symbol.for("react.portal"):60106,ht=lt?Symbol.for("react.fragment"):60107,dt=lt?Symbol.for("react.strict_mode"):60108,pt=lt?Symbol.for("react.profiler"):60114,ft=lt?Symbol.for("react.provider"):60109,gt=lt?Symbol.for("react.context"):60110,mt=lt?Symbol.for("react.async_mode"):60111,yt=lt?Symbol.for("react.forward_ref"):60112,bt=lt?Symbol.for("react.timeout"):60113,_t="function"==typeof Symbol&&Symbol.iterator;function wt(e){return null==e?null:"function"==typeof(e=_t&&e[_t]||e["@@iterator"])?e:null}function Ct(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case mt:return"AsyncMode";case gt:return"Context.Consumer";case ht:return"ReactFragment";case ut:return"ReactPortal";case pt:return"Profiler("+e.pendingProps.id+")";case ft:return"Context.Provider";case dt:return"StrictMode";case bt:return"Timeout"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case yt:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function At(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var r=e._debugOwner,o=e._debugSource,i=Ct(e),n=null;r&&(n=Ct(r)),i="\n    in "+(i||"Unknown")+((r=o)?" (at "+r.fileName.replace(/^.*[\\\/]/,"")+":"+r.lineNumber+")":n?" (created by "+n+")":"");break e;default:i=""}t+=i,e=e.return}while(e);return t}var vt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,St={},kt={};function Tt(e,t,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=o,this.attributeNamespace=i,this.mustUseProperty=r,this.propertyName=e,this.type=t}var xt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){xt[e]=new Tt(e,0,!1,e,null)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];xt[t]=new Tt(t,1,!1,e[1],null)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){xt[e]=new Tt(e,2,!1,e.toLowerCase(),null)})),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach((function(e){xt[e]=new Tt(e,2,!1,e,null)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){xt[e]=new Tt(e,3,!1,e.toLowerCase(),null)})),["checked","multiple","muted","selected"].forEach((function(e){xt[e]=new Tt(e,3,!0,e.toLowerCase(),null)})),["capture","download"].forEach((function(e){xt[e]=new Tt(e,4,!1,e.toLowerCase(),null)})),["cols","rows","size","span"].forEach((function(e){xt[e]=new Tt(e,6,!1,e.toLowerCase(),null)})),["rowSpan","start"].forEach((function(e){xt[e]=new Tt(e,5,!1,e.toLowerCase(),null)}));var Pt=/[\-:]([a-z])/g;function Et(e){return e[1].toUpperCase()}function Rt(e,t,r,o){var i=xt.hasOwnProperty(t)?xt[t]:null;(null!==i?0===i.type:!o&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,r,o){if(null==t||function(e,t,r,o){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,o))return!0;if(o)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,i,o)&&(r=null),o||null===i?function(e){return!!kt.hasOwnProperty(e)||!St.hasOwnProperty(e)&&(vt.test(e)?kt[e]=!0:(St[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):i.mustUseProperty?e[i.propertyName]=null===r?3!==i.type&&"":r:(t=i.attributeName,o=i.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(i=i.type)||4===i&&!0===r?"":""+r,o?e.setAttributeNS(o,t,r):e.setAttribute(t,r))))}function Mt(e,t){var r=t.checked;return s({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function Nt(e,t){var r=null==t.defaultValue?"":t.defaultValue,o=null!=t.checked?t.checked:t.defaultChecked;r=Ot(null!=t.value?t.value:r),e._wrapperState={initialChecked:o,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ft(e,t){null!=(t=t.checked)&&Rt(e,"checked",t,!1)}function It(e,t){Ft(e,t);var r=Ot(t.value);null!=r&&("number"===t.type?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r)),t.hasOwnProperty("value")?Vt(e,t.type,r):t.hasOwnProperty("defaultValue")&&Vt(e,t.type,Ot(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Dt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function Vt(e,t,r){"number"===t&&e.ownerDocument.activeElement===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function Ot(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Pt,Et);xt[t]=new Tt(t,1,!1,e,null)})),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Pt,Et);xt[t]=new Tt(t,1,!1,e,"http://www.w3.org/1999/xlink")})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Pt,Et);xt[t]=new Tt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")})),xt.tabIndex=new Tt("tabIndex",1,!1,"tabindex",null);var Bt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Kt(e,t,r){return(e=Ae.getPooled(Bt.change,e,t,r)).type="change",Ge(r),re(e),e}var Ut=null,Lt=null;function zt(e){K(e,!1)}function Wt(e){if(st(H(e)))return e}function Qt(e,t){if("change"===e)return t}var Gt=!1;function Ht(){Ut&&(Ut.detachEvent("onpropertychange",jt),Lt=Ut=null)}function jt(e){"value"===e.propertyName&&Wt(Lt)&&$e(zt,e=Kt(Lt,e,rt(e)))}function Zt(e,t,r){"focus"===e?(Ht(),Lt=r,(Ut=t).attachEvent("onpropertychange",jt)):"blur"===e&&Ht()}function qt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Wt(Lt)}function Jt(e,t){if("click"===e)return Wt(t)}function Yt(e,t){if("input"===e||"change"===e)return Wt(t)}n.canUseDOM&&(Gt=ot("input")&&(!document.documentMode||9<document.documentMode));var Xt={eventTypes:Bt,_isInputEventSupported:Gt,extractEvents:function(e,t,r,o){var i=t?H(t):window,n=void 0,s=void 0,a=i.nodeName&&i.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===i.type?n=Qt:tt(i)?Gt?n=Yt:(n=qt,s=Zt):(a=i.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(n=Jt),n&&(n=n(e,t)))return Kt(n,r,o);s&&s(e,i,t),"blur"===e&&null!=t&&(e=t._wrapperState||i._wrapperState)&&e.controlled&&"number"===i.type&&Vt(i,"number",i.value)}},$t=Ae.extend({view:null,detail:null}),er={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function tr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=er[e])&&!!t[e]}function rr(){return tr}var or=$t.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:rr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),ir=or.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),nr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},sr={eventTypes:nr,extractEvents:function(e,t,r,o){var i="mouseover"===e||"pointerover"===e,n="mouseout"===e||"pointerout"===e;if(i&&(r.relatedTarget||r.fromElement)||!n&&!i)return null;if(i=o.window===o?o:(i=o.ownerDocument)?i.defaultView||i.parentWindow:window,n?(n=t,t=(t=r.relatedTarget||r.toElement)?G(t):null):n=null,n===t)return null;var s=void 0,a=void 0,l=void 0,c=void 0;return"mouseout"===e||"mouseover"===e?(s=or,a=nr.mouseLeave,l=nr.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(s=ir,a=nr.pointerLeave,l=nr.pointerEnter,c="pointer"),e=null==n?i:H(n),i=null==t?i:H(t),(a=s.getPooled(a,n,r,o)).type=c+"leave",a.target=e,a.relatedTarget=i,(r=s.getPooled(l,t,r,o)).type=c+"enter",r.target=i,r.relatedTarget=e,oe(a,r,n,t),[a,r]}};function ar(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function lr(e){2!==ar(e)&&d("188")}function cr(e){var t=e.alternate;if(!t)return 3===(t=ar(e))&&d("188"),1===t?null:e;for(var r=e,o=t;;){var i=r.return,n=i?i.alternate:null;if(!i||!n)break;if(i.child===n.child){for(var s=i.child;s;){if(s===r)return lr(i),e;if(s===o)return lr(i),t;s=s.sibling}d("188")}if(r.return!==o.return)r=i,o=n;else{s=!1;for(var a=i.child;a;){if(a===r){s=!0,r=i,o=n;break}if(a===o){s=!0,o=i,r=n;break}a=a.sibling}if(!s){for(a=n.child;a;){if(a===r){s=!0,r=n,o=i;break}if(a===o){s=!0,o=n,r=i;break}a=a.sibling}s||d("189")}}r.alternate!==o&&d("190")}return 3!==r.tag&&d("188"),r.stateNode.current===r?e:t}function ur(e){if(!(e=cr(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var hr=Ae.extend({animationName:null,elapsedTime:null,pseudoElement:null}),dr=Ae.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),pr=$t.extend({relatedTarget:null});function fr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var gr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},mr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},yr=$t.extend({key:function(e){if(e.key){var t=gr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=fr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?mr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:rr,charCode:function(e){return"keypress"===e.type?fr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?fr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),br=or.extend({dataTransfer:null}),_r=$t.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:rr}),wr=Ae.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),Cr=or.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),Ar=[["abort","abort"],[ue,"animationEnd"],[he,"animationIteration"],[de,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[pe,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],vr={},Sr={};function kr(e,t){var r=e[0],o="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],isInteractive:t},vr[e]=t,Sr[r]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach((function(e){kr(e,!0)})),Ar.forEach((function(e){kr(e,!1)}));var Tr={eventTypes:vr,isInteractiveTopLevelEventType:function(e){return void 0!==(e=Sr[e])&&!0===e.isInteractive},extractEvents:function(e,t,r,o){var i=Sr[e];if(!i)return null;switch(e){case"keypress":if(0===fr(r))return null;case"keydown":case"keyup":e=yr;break;case"blur":case"focus":e=pr;break;case"click":if(2===r.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=or;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=br;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=_r;break;case ue:case he:case de:e=hr;break;case pe:e=wr;break;case"scroll":e=$t;break;case"wheel":e=Cr;break;case"copy":case"cut":case"paste":e=dr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=ir;break;default:e=Ae}return re(t=e.getPooled(i,t,r,o)),t}},xr=Tr.isInteractiveTopLevelEventType,Pr=[];function Er(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var r;for(r=t;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(t),t=G(r)}while(t);for(r=0;r<e.ancestors.length;r++)t=e.ancestors[r],U(e.topLevelType,t,e.nativeEvent,rt(e.nativeEvent))}var Rr=!0;function Mr(e){Rr=!!e}function Nr(e,t){if(!t)return null;var r=(xr(e)?Ir:Dr).bind(null,e);t.addEventListener(e,r,!1)}function Fr(e,t){if(!t)return null;var r=(xr(e)?Ir:Dr).bind(null,e);t.addEventListener(e,r,!0)}function Ir(e,t){Je(Dr,e,t)}function Dr(e,t){if(Rr){var r=rt(t);if(null===(r=G(r))||"number"!=typeof r.tag||2===ar(r)||(r=null),Pr.length){var o=Pr.pop();o.topLevelType=e,o.nativeEvent=t,o.targetInst=r,e=o}else e={topLevelType:e,nativeEvent:t,targetInst:r,ancestors:[]};try{$e(Er,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Pr.length&&Pr.push(e)}}}var Vr={get _enabled(){return Rr},setEnabled:Mr,isEnabled:function(){return Rr},trapBubbledEvent:Nr,trapCapturedEvent:Fr,dispatchEvent:Dr},Or={},Br=0,Kr="_reactListenersID"+(""+Math.random()).slice(2);function Ur(e){return Object.prototype.hasOwnProperty.call(e,Kr)||(e[Kr]=Br++,Or[e[Kr]]={}),Or[e[Kr]]}function Lr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function zr(e,t){var r,o=Lr(e);for(e=0;o;){if(3===o.nodeType){if(r=e+o.textContent.length,e<=t&&r>=t)return{node:o,offset:t-e};e=r}e:{for(;o;){if(o.nextSibling){o=o.nextSibling;break e}o=o.parentNode}o=void 0}o=Lr(o)}}function Wr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Qr=n.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Gr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Hr=null,jr=null,Zr=null,qr=!1;function Jr(e,t){if(qr||null==Hr||Hr!==l())return null;var r=Hr;return"selectionStart"in r&&Wr(r)?r={start:r.selectionStart,end:r.selectionEnd}:window.getSelection?r={anchorNode:(r=window.getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}:r=void 0,Zr&&c(Zr,r)?null:(Zr=r,(e=Ae.getPooled(Gr.select,jr,e,t)).type="select",e.target=Hr,re(e),e)}var Yr={eventTypes:Gr,extractEvents:function(e,t,r,o){var i,n=o.window===o?o.document:9===o.nodeType?o:o.ownerDocument;if(!(i=!n)){e:{n=Ur(n),i=v.onSelect;for(var s=0;s<i.length;s++){var a=i[s];if(!n.hasOwnProperty(a)||!n[a]){n=!1;break e}}n=!0}i=!n}if(i)return null;switch(n=t?H(t):window,e){case"focus":(tt(n)||"true"===n.contentEditable)&&(Hr=n,jr=t,Zr=null);break;case"blur":Zr=jr=Hr=null;break;case"mousedown":qr=!0;break;case"contextmenu":case"mouseup":return qr=!1,Jr(r,o);case"selectionchange":if(Qr)break;case"keydown":case"keyup":return Jr(r,o)}return null}};O.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=Z.getFiberCurrentPropsFromNode,P=Z.getInstanceFromNode,E=Z.getNodeFromInstance,O.injectEventPluginsByName({SimpleEventPlugin:Tr,EnterLeaveEventPlugin:sr,ChangeEventPlugin:Xt,SelectEventPlugin:Yr,BeforeInputEventPlugin:Ke});var Xr=void 0;Xr="object"==typeof performance&&"function"==typeof performance.now?function(){return performance.now()}:function(){return Date.now()};var $r=void 0,eo=void 0;if(n.canUseDOM){var to=[],ro=0,oo={},io=-1,no=!1,so=!1,ao=0,lo=33,co=33,uo={didTimeout:!1,timeRemaining:function(){var e=ao-Xr();return 0<e?e:0}},ho=function(e,t){if(oo[t])try{e(uo)}finally{delete oo[t]}},po="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",(function(e){if(e.source===window&&e.data===po&&(no=!1,0!==to.length)){if(0!==to.length&&(e=Xr(),!(-1===io||io>e))){io=-1,uo.didTimeout=!0;for(var t=0,r=to.length;t<r;t++){var o=to[t],i=o.timeoutTime;-1!==i&&i<=e?ho(o.scheduledCallback,o.callbackId):-1!==i&&(-1===io||i<io)&&(io=i)}}for(e=Xr();0<ao-e&&0<to.length;)e=to.shift(),uo.didTimeout=!1,ho(e.scheduledCallback,e.callbackId),e=Xr();0<to.length&&!so&&(so=!0,requestAnimationFrame(fo))}}),!1);var fo=function(e){so=!1;var t=e-ao+co;t<co&&lo<co?(8>t&&(t=8),co=t<lo?lo:t):lo=t,ao=e+co,no||(no=!0,window.postMessage(po,"*"))};$r=function(e,t){var r=-1;return null!=t&&"number"==typeof t.timeout&&(r=Xr()+t.timeout),(-1===io||-1!==r&&r<io)&&(io=r),t=++ro,to.push({scheduledCallback:e,callbackId:t,timeoutTime:r}),oo[t]=!0,so||(so=!0,requestAnimationFrame(fo)),t},eo=function(e){delete oo[e]}}else{var go=0,mo={};$r=function(e){var t=go++,r=setTimeout((function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})}));return mo[t]=r,t},eo=function(e){var t=mo[e];delete mo[e],clearTimeout(t)}}function yo(e,t){return e=s({children:void 0},t),(t=function(e){var t="";return i.Children.forEach(e,(function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)})),t}(t.children))&&(e.children=t),e}function bo(e,t,r,o){if(e=e.options,t){t={};for(var i=0;i<r.length;i++)t["$"+r[i]]=!0;for(r=0;r<e.length;r++)i=t.hasOwnProperty("$"+e[r].value),e[r].selected!==i&&(e[r].selected=i),i&&o&&(e[r].defaultSelected=!0)}else{for(r=""+r,t=null,i=0;i<e.length;i++){if(e[i].value===r)return e[i].selected=!0,void(o&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function _o(e,t){var r=t.value;e._wrapperState={initialValue:null!=r?r:t.defaultValue,wasMultiple:!!t.multiple}}function wo(e,t){return null!=t.dangerouslySetInnerHTML&&d("91"),s({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Co(e,t){var r=t.value;null==r&&(r=t.defaultValue,null!=(t=t.children)&&(null!=r&&d("92"),Array.isArray(t)&&(1>=t.length||d("93"),t=t[0]),r=""+t),null==r&&(r="")),e._wrapperState={initialValue:""+r}}function Ao(e,t){var r=t.value;null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&(e.defaultValue=r)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function vo(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var So={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function ko(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function To(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ko(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var xo=void 0,Po=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,r,o,i){MSApp.execUnsafeLocalFunction((function(){return e(t,r)}))}:e}((function(e,t){if(e.namespaceURI!==So.svg||"innerHTML"in e)e.innerHTML=t;else{for((xo=xo||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=xo.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Eo(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var Ro={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Mo=["Webkit","ms","Moz","O"];function No(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var o=0===r.indexOf("--"),i=r,n=t[r];i=null==n||"boolean"==typeof n||""===n?"":o||"number"!=typeof n||0===n||Ro.hasOwnProperty(i)&&Ro[i]?(""+n).trim():n+"px","float"===r&&(r="cssFloat"),o?e.setProperty(r,i):e[r]=i}}Object.keys(Ro).forEach((function(e){Mo.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Ro[t]=Ro[e]}))}));var Fo=s({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Io(e,t,r){t&&(Fo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&d("137",e,r()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&d("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||d("61")),null!=t.style&&"object"!=typeof t.style&&d("62",r()))}function Do(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Vo=a.thatReturns("");function Oo(e,t){var r=Ur(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=v[t];for(var o=0;o<t.length;o++){var i=t[o];if(!r.hasOwnProperty(i)||!r[i]){switch(i){case"scroll":Fr("scroll",e);break;case"focus":case"blur":Fr("focus",e),Fr("blur",e),r.blur=!0,r.focus=!0;break;case"cancel":case"close":ot(i,!0)&&Fr(i,e);break;case"invalid":case"submit":case"reset":break;default:-1===fe.indexOf(i)&&Nr(i,e)}r[i]=!0}}}function Bo(e,t,r,o){return r=9===r.nodeType?r:r.ownerDocument,o===So.html&&(o=ko(e)),o===So.html?"script"===e?((e=r.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?r.createElement(e,{is:t.is}):r.createElement(e):e=r.createElementNS(o,e),e}function Ko(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Uo(e,t,r,o){var i=Do(t,r);switch(t){case"iframe":case"object":Nr("load",e);var n=r;break;case"video":case"audio":for(n=0;n<fe.length;n++)Nr(fe[n],e);n=r;break;case"source":Nr("error",e),n=r;break;case"img":case"image":case"link":Nr("error",e),Nr("load",e),n=r;break;case"form":Nr("reset",e),Nr("submit",e),n=r;break;case"details":Nr("toggle",e),n=r;break;case"input":Nt(e,r),n=Mt(e,r),Nr("invalid",e),Oo(o,"onChange");break;case"option":n=yo(e,r);break;case"select":_o(e,r),n=s({},r,{value:void 0}),Nr("invalid",e),Oo(o,"onChange");break;case"textarea":Co(e,r),n=wo(e,r),Nr("invalid",e),Oo(o,"onChange");break;default:n=r}Io(t,n,Vo);var l,c=n;for(l in c)if(c.hasOwnProperty(l)){var u=c[l];"style"===l?No(e,u):"dangerouslySetInnerHTML"===l?null!=(u=u?u.__html:void 0)&&Po(e,u):"children"===l?"string"==typeof u?("textarea"!==t||""!==u)&&Eo(e,u):"number"==typeof u&&Eo(e,""+u):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(A.hasOwnProperty(l)?null!=u&&Oo(o,l):null!=u&&Rt(e,l,u,i))}switch(t){case"input":nt(e),Dt(e,r);break;case"textarea":nt(e),vo(e);break;case"option":null!=r.value&&e.setAttribute("value",r.value);break;case"select":e.multiple=!!r.multiple,null!=(t=r.value)?bo(e,!!r.multiple,t,!1):null!=r.defaultValue&&bo(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof n.onClick&&(e.onclick=a)}}function Lo(e,t,r,o,i){var n=null;switch(t){case"input":r=Mt(e,r),o=Mt(e,o),n=[];break;case"option":r=yo(e,r),o=yo(e,o),n=[];break;case"select":r=s({},r,{value:void 0}),o=s({},o,{value:void 0}),n=[];break;case"textarea":r=wo(e,r),o=wo(e,o),n=[];break;default:"function"!=typeof r.onClick&&"function"==typeof o.onClick&&(e.onclick=a)}Io(t,o,Vo),t=e=void 0;var l=null;for(e in r)if(!o.hasOwnProperty(e)&&r.hasOwnProperty(e)&&null!=r[e])if("style"===e){var c=r[e];for(t in c)c.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(A.hasOwnProperty(e)?n||(n=[]):(n=n||[]).push(e,null));for(e in o){var u=o[e];if(c=null!=r?r[e]:void 0,o.hasOwnProperty(e)&&u!==c&&(null!=u||null!=c))if("style"===e)if(c){for(t in c)!c.hasOwnProperty(t)||u&&u.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in u)u.hasOwnProperty(t)&&c[t]!==u[t]&&(l||(l={}),l[t]=u[t])}else l||(n||(n=[]),n.push(e,l)),l=u;else"dangerouslySetInnerHTML"===e?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(n=n||[]).push(e,""+u)):"children"===e?c===u||"string"!=typeof u&&"number"!=typeof u||(n=n||[]).push(e,""+u):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(A.hasOwnProperty(e)?(null!=u&&Oo(i,e),n||c===u||(n=[])):(n=n||[]).push(e,u))}return l&&(n=n||[]).push("style",l),n}function zo(e,t,r,o,i){"input"===r&&"radio"===i.type&&null!=i.name&&Ft(e,i),Do(r,o),o=Do(r,i);for(var n=0;n<t.length;n+=2){var s=t[n],a=t[n+1];"style"===s?No(e,a):"dangerouslySetInnerHTML"===s?Po(e,a):"children"===s?Eo(e,a):Rt(e,s,a,o)}switch(r){case"input":It(e,i);break;case"textarea":Ao(e,i);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!i.multiple,null!=(r=i.value)?bo(e,!!i.multiple,r,!1):t!==!!i.multiple&&(null!=i.defaultValue?bo(e,!!i.multiple,i.defaultValue,!0):bo(e,!!i.multiple,i.multiple?[]:"",!1))}}function Wo(e,t,r,o,i){switch(t){case"iframe":case"object":Nr("load",e);break;case"video":case"audio":for(o=0;o<fe.length;o++)Nr(fe[o],e);break;case"source":Nr("error",e);break;case"img":case"image":case"link":Nr("error",e),Nr("load",e);break;case"form":Nr("reset",e),Nr("submit",e);break;case"details":Nr("toggle",e);break;case"input":Nt(e,r),Nr("invalid",e),Oo(i,"onChange");break;case"select":_o(e,r),Nr("invalid",e),Oo(i,"onChange");break;case"textarea":Co(e,r),Nr("invalid",e),Oo(i,"onChange")}for(var n in Io(t,r,Vo),o=null,r)if(r.hasOwnProperty(n)){var s=r[n];"children"===n?"string"==typeof s?e.textContent!==s&&(o=["children",s]):"number"==typeof s&&e.textContent!==""+s&&(o=["children",""+s]):A.hasOwnProperty(n)&&null!=s&&Oo(i,n)}switch(t){case"input":nt(e),Dt(e,r);break;case"textarea":nt(e),vo(e);break;case"select":case"option":break;default:"function"==typeof r.onClick&&(e.onclick=a)}return o}function Qo(e,t){return e.nodeValue!==t}var Go={createElement:Bo,createTextNode:Ko,setInitialProperties:Uo,diffProperties:Lo,updateProperties:zo,diffHydratedProperties:Wo,diffHydratedText:Qo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,r){switch(t){case"input":if(It(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var o=r[t];if(o!==e&&o.form===e.form){var i=j(o);i||d("90"),st(o),It(o,i)}}}break;case"textarea":Ao(e,r);break;case"select":null!=(t=r.value)&&bo(e,!!r.multiple,t,!1)}}},Ho=null,jo=null;function Zo(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function qo(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var Jo=Xr,Yo=$r,Xo=eo;function $o(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function ei(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var ti=[],ri=-1;function oi(e){return{current:e}}function ii(e){0>ri||(e.current=ti[ri],ti[ri]=null,ri--)}function ni(e,t){ri++,ti[ri]=e.current,e.current=t}var si=oi(h),ai=oi(!1),li=h;function ci(e){return hi(e)?li:si.current}function ui(e,t){var r=e.type.contextTypes;if(!r)return h;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===t)return o.__reactInternalMemoizedMaskedChildContext;var i,n={};for(i in r)n[i]=t[i];return o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n),n}function hi(e){return 2===e.tag&&null!=e.type.childContextTypes}function di(e){hi(e)&&(ii(ai),ii(si))}function pi(e){ii(ai),ii(si)}function fi(e,t,r){si.current!==h&&d("168"),ni(si,t),ni(ai,r)}function gi(e,t){var r=e.stateNode,o=e.type.childContextTypes;if("function"!=typeof r.getChildContext)return t;for(var i in r=r.getChildContext())i in o||d("108",Ct(e)||"Unknown",i);return s({},t,r)}function mi(e){if(!hi(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||h,li=si.current,ni(si,t),ni(ai,ai.current),!0}function yi(e,t){var r=e.stateNode;if(r||d("169"),t){var o=gi(e,li);r.__reactInternalMemoizedMergedChildContext=o,ii(ai),ii(si),ni(si,o)}else ii(ai);ni(ai,t)}function bi(e,t,r,o){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=o,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function _i(e,t,r){var o=e.alternate;return null===o?((o=new bi(e.tag,t,e.key,e.mode)).type=e.type,o.stateNode=e.stateNode,o.alternate=e,e.alternate=o):(o.pendingProps=t,o.effectTag=0,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null),o.expirationTime=r,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,o.sibling=e.sibling,o.index=e.index,o.ref=e.ref,o}function wi(e,t,r){var o=e.type,i=e.key;if(e=e.props,"function"==typeof o)var n=o.prototype&&o.prototype.isReactComponent?2:0;else if("string"==typeof o)n=5;else switch(o){case ht:return Ci(e.children,t,r,i);case mt:n=11,t|=3;break;case dt:n=11,t|=2;break;case pt:return(o=new bi(15,e,i,4|t)).type=pt,o.expirationTime=r,o;case bt:n=16,t|=2;break;default:e:{switch("object"==typeof o&&null!==o?o.$$typeof:null){case ft:n=13;break e;case gt:n=12;break e;case yt:n=14;break e;default:d("130",null==o?o:typeof o,"")}n=void 0}}return(t=new bi(n,e,i,t)).type=o,t.expirationTime=r,t}function Ci(e,t,r,o){return(e=new bi(10,e,o,t)).expirationTime=r,e}function Ai(e,t,r){return(e=new bi(6,e,null,t)).expirationTime=r,e}function vi(e,t,r){return(t=new bi(4,null!==e.children?e.children:[],e.key,t)).expirationTime=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Si(e,t,r){return e={current:t=new bi(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:r,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var ki=null,Ti=null;function xi(e){return function(t){try{return e(t)}catch(e){}}}function Pi(e){"function"==typeof ki&&ki(e)}function Ei(e){"function"==typeof Ti&&Ti(e)}var Ri=!1;function Mi(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ni(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Fi(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Ii(e,t,r){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>r)&&(e.expirationTime=r)}function Di(e,t,r){var o=e.alternate;if(null===o){var i=e.updateQueue,n=null;null===i&&(i=e.updateQueue=Mi(e.memoizedState))}else i=e.updateQueue,n=o.updateQueue,null===i?null===n?(i=e.updateQueue=Mi(e.memoizedState),n=o.updateQueue=Mi(o.memoizedState)):i=e.updateQueue=Ni(n):null===n&&(n=o.updateQueue=Ni(i));null===n||i===n?Ii(i,t,r):null===i.lastUpdate||null===n.lastUpdate?(Ii(i,t,r),Ii(n,t,r)):(Ii(i,t,r),n.lastUpdate=t)}function Vi(e,t,r){var o=e.updateQueue;null===(o=null===o?e.updateQueue=Mi(e.memoizedState):Oi(e,o)).lastCapturedUpdate?o.firstCapturedUpdate=o.lastCapturedUpdate=t:(o.lastCapturedUpdate.next=t,o.lastCapturedUpdate=t),(0===o.expirationTime||o.expirationTime>r)&&(o.expirationTime=r)}function Oi(e,t){var r=e.alternate;return null!==r&&t===r.updateQueue&&(t=e.updateQueue=Ni(t)),t}function Bi(e,t,r,o,i,n){switch(r.tag){case 1:return"function"==typeof(e=r.payload)?e.call(n,o,i):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=r.payload)?e.call(n,o,i):e))break;return s({},o,i);case 2:Ri=!0}return o}function Ki(e,t,r,o,i){if(Ri=!1,!(0===t.expirationTime||t.expirationTime>i)){for(var n=(t=Oi(e,t)).baseState,s=null,a=0,l=t.firstUpdate,c=n;null!==l;){var u=l.expirationTime;u>i?(null===s&&(s=l,n=c),(0===a||a>u)&&(a=u)):(c=Bi(e,0,l,c,r,o),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(u=null,l=t.firstCapturedUpdate;null!==l;){var h=l.expirationTime;h>i?(null===u&&(u=l,null===s&&(n=c)),(0===a||a>h)&&(a=h)):(c=Bi(e,0,l,c,r,o),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===s&&(t.lastUpdate=null),null===u?t.lastCapturedUpdate=null:e.effectTag|=32,null===s&&null===u&&(n=c),t.baseState=n,t.firstUpdate=s,t.firstCapturedUpdate=u,t.expirationTime=a,e.memoizedState=c}}function Ui(e,t){"function"!=typeof e&&d("191",e),e.call(t)}function Li(e,t,r){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var o=e.callback;null!==o&&(e.callback=null,Ui(o,r)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,Ui(t,r)),e=e.nextEffect}function zi(e,t){return{value:e,source:t,stack:At(t)}}var Wi=oi(null),Qi=oi(null),Gi=oi(0);function Hi(e){var t=e.type._context;ni(Gi,t._changedBits),ni(Qi,t._currentValue),ni(Wi,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function ji(e){var t=Gi.current,r=Qi.current;ii(Wi),ii(Qi),ii(Gi),(e=e.type._context)._currentValue=r,e._changedBits=t}var Zi={},qi=oi(Zi),Ji=oi(Zi),Yi=oi(Zi);function Xi(e){return e===Zi&&d("174"),e}function $i(e,t){ni(Yi,t),ni(Ji,e),ni(qi,Zi);var r=t.nodeType;switch(r){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:To(null,"");break;default:t=To(t=(r=8===r?t.parentNode:t).namespaceURI||null,r=r.tagName)}ii(qi),ni(qi,t)}function en(e){ii(qi),ii(Ji),ii(Yi)}function tn(e){Ji.current===e&&(ii(qi),ii(Ji))}function rn(e,t,r){var o=e.memoizedState;o=null==(t=t(r,o))?o:s({},o,t),e.memoizedState=o,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=o)}var on={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===ar(e)},enqueueSetState:function(e,t,r){e=e._reactInternalFiber;var o=ms(),i=Fi(o=fs(o,e));i.payload=t,null!=r&&(i.callback=r),Di(e,i,o),gs(e,o)},enqueueReplaceState:function(e,t,r){e=e._reactInternalFiber;var o=ms(),i=Fi(o=fs(o,e));i.tag=1,i.payload=t,null!=r&&(i.callback=r),Di(e,i,o),gs(e,o)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var r=ms(),o=Fi(r=fs(r,e));o.tag=2,null!=t&&(o.callback=t),Di(e,o,r),gs(e,r)}};function nn(e,t,r,o,i,n){var s=e.stateNode;return e=e.type,"function"==typeof s.shouldComponentUpdate?s.shouldComponentUpdate(r,i,n):!e.prototype||!e.prototype.isPureReactComponent||(!c(t,r)||!c(o,i))}function sn(e,t,r,o){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,o),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,o),t.state!==e&&on.enqueueReplaceState(t,t.state,null)}function an(e,t){var r=e.type,o=e.stateNode,i=e.pendingProps,n=ci(e);o.props=i,o.state=e.memoizedState,o.refs=h,o.context=ui(e,n),null!==(n=e.updateQueue)&&(Ki(e,n,i,o,t),o.state=e.memoizedState),"function"==typeof(n=e.type.getDerivedStateFromProps)&&(rn(e,n,i),o.state=e.memoizedState),"function"==typeof r.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(r=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),r!==o.state&&on.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(Ki(e,n,i,o,t),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var ln=Array.isArray;function cn(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!=typeof e){if(r._owner){r=r._owner;var o=void 0;r&&(2!==r.tag&&d("110"),o=r.stateNode),o||d("147",e);var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=o.refs===h?o.refs={}:o.refs;null===e?delete t[i]:t[i]=e})._stringRef=i,t)}"string"!=typeof e&&d("148"),r._owner||d("254",e)}return e}function un(e,t){"textarea"!==e.type&&d("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function hn(e){function t(t,r){if(e){var o=t.lastEffect;null!==o?(o.nextEffect=r,t.lastEffect=r):t.firstEffect=t.lastEffect=r,r.nextEffect=null,r.effectTag=8}}function r(r,o){if(!e)return null;for(;null!==o;)t(r,o),o=o.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,r){return(e=_i(e,t,r)).index=0,e.sibling=null,e}function n(t,r,o){return t.index=o,e?null!==(o=t.alternate)?(o=o.index)<r?(t.effectTag=2,r):o:(t.effectTag=2,r):r}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function a(e,t,r,o){return null===t||6!==t.tag?((t=Ai(r,e.mode,o)).return=e,t):((t=i(t,r,o)).return=e,t)}function l(e,t,r,o){return null!==t&&t.type===r.type?((o=i(t,r.props,o)).ref=cn(e,t,r),o.return=e,o):((o=wi(r,e.mode,o)).ref=cn(e,t,r),o.return=e,o)}function c(e,t,r,o){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=vi(r,e.mode,o)).return=e,t):((t=i(t,r.children||[],o)).return=e,t)}function u(e,t,r,o,n){return null===t||10!==t.tag?((t=Ci(r,e.mode,o,n)).return=e,t):((t=i(t,r,o)).return=e,t)}function h(e,t,r){if("string"==typeof t||"number"==typeof t)return(t=Ai(""+t,e.mode,r)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ct:return(r=wi(t,e.mode,r)).ref=cn(e,null,t),r.return=e,r;case ut:return(t=vi(t,e.mode,r)).return=e,t}if(ln(t)||wt(t))return(t=Ci(t,e.mode,r,null)).return=e,t;un(e,t)}return null}function p(e,t,r,o){var i=null!==t?t.key:null;if("string"==typeof r||"number"==typeof r)return null!==i?null:a(e,t,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ct:return r.key===i?r.type===ht?u(e,t,r.props.children,o,i):l(e,t,r,o):null;case ut:return r.key===i?c(e,t,r,o):null}if(ln(r)||wt(r))return null!==i?null:u(e,t,r,o,null);un(e,r)}return null}function f(e,t,r,o,i){if("string"==typeof o||"number"==typeof o)return a(t,e=e.get(r)||null,""+o,i);if("object"==typeof o&&null!==o){switch(o.$$typeof){case ct:return e=e.get(null===o.key?r:o.key)||null,o.type===ht?u(t,e,o.props.children,i,o.key):l(t,e,o,i);case ut:return c(t,e=e.get(null===o.key?r:o.key)||null,o,i)}if(ln(o)||wt(o))return u(t,e=e.get(r)||null,o,i,null);un(t,o)}return null}function g(i,s,a,l){for(var c=null,u=null,d=s,g=s=0,m=null;null!==d&&g<a.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var y=p(i,d,a[g],l);if(null===y){null===d&&(d=m);break}e&&d&&null===y.alternate&&t(i,d),s=n(y,s,g),null===u?c=y:u.sibling=y,u=y,d=m}if(g===a.length)return r(i,d),c;if(null===d){for(;g<a.length;g++)(d=h(i,a[g],l))&&(s=n(d,s,g),null===u?c=d:u.sibling=d,u=d);return c}for(d=o(i,d);g<a.length;g++)(m=f(d,i,g,a[g],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),s=n(m,s,g),null===u?c=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return t(i,e)})),c}function m(i,s,a,l){var c=wt(a);"function"!=typeof c&&d("150"),null==(a=c.call(a))&&d("151");for(var u=c=null,g=s,m=s=0,y=null,b=a.next();null!==g&&!b.done;m++,b=a.next()){g.index>m?(y=g,g=null):y=g.sibling;var _=p(i,g,b.value,l);if(null===_){g||(g=y);break}e&&g&&null===_.alternate&&t(i,g),s=n(_,s,m),null===u?c=_:u.sibling=_,u=_,g=y}if(b.done)return r(i,g),c;if(null===g){for(;!b.done;m++,b=a.next())null!==(b=h(i,b.value,l))&&(s=n(b,s,m),null===u?c=b:u.sibling=b,u=b);return c}for(g=o(i,g);!b.done;m++,b=a.next())null!==(b=f(g,i,m,b.value,l))&&(e&&null!==b.alternate&&g.delete(null===b.key?m:b.key),s=n(b,s,m),null===u?c=b:u.sibling=b,u=b);return e&&g.forEach((function(e){return t(i,e)})),c}return function(e,o,n,a){"object"==typeof n&&null!==n&&n.type===ht&&null===n.key&&(n=n.props.children);var l="object"==typeof n&&null!==n;if(l)switch(n.$$typeof){case ct:e:{var c=n.key;for(l=o;null!==l;){if(l.key===c){if(10===l.tag?n.type===ht:l.type===n.type){r(e,l.sibling),(o=i(l,n.type===ht?n.props.children:n.props,a)).ref=cn(e,l,n),o.return=e,e=o;break e}r(e,l);break}t(e,l),l=l.sibling}n.type===ht?((o=Ci(n.props.children,e.mode,a,n.key)).return=e,e=o):((a=wi(n,e.mode,a)).ref=cn(e,o,n),a.return=e,e=a)}return s(e);case ut:e:{for(l=n.key;null!==o;){if(o.key===l){if(4===o.tag&&o.stateNode.containerInfo===n.containerInfo&&o.stateNode.implementation===n.implementation){r(e,o.sibling),(o=i(o,n.children||[],a)).return=e,e=o;break e}r(e,o);break}t(e,o),o=o.sibling}(o=vi(n,e.mode,a)).return=e,e=o}return s(e)}if("string"==typeof n||"number"==typeof n)return n=""+n,null!==o&&6===o.tag?(r(e,o.sibling),(o=i(o,n,a)).return=e,e=o):(r(e,o),(o=Ai(n,e.mode,a)).return=e,e=o),s(e);if(ln(n))return g(e,o,n,a);if(wt(n))return m(e,o,n,a);if(l&&un(e,n),void 0===n)switch(e.tag){case 2:case 1:d("152",(a=e.type).displayName||a.name||"Component")}return r(e,o)}}var dn=hn(!0),pn=hn(!1),fn=null,gn=null,mn=!1;function yn(e,t){var r=new bi(5,null,null,0);r.type="DELETED",r.stateNode=t,r.return=e,r.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function bn(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function _n(e){if(mn){var t=gn;if(t){var r=t;if(!bn(e,t)){if(!(t=$o(r))||!bn(e,t))return e.effectTag|=2,mn=!1,void(fn=e);yn(fn,r)}fn=e,gn=ei(t)}else e.effectTag|=2,mn=!1,fn=e}}function wn(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;fn=e}function Cn(e){if(e!==fn)return!1;if(!mn)return wn(e),mn=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!qo(t,e.memoizedProps))for(t=gn;t;)yn(e,t),t=$o(t);return wn(e),gn=fn?$o(e.stateNode):null,!0}function An(){gn=fn=null,mn=!1}function vn(e,t,r){Sn(e,t,r,t.expirationTime)}function Sn(e,t,r,o){t.child=null===e?pn(t,null,r,o):dn(t,e.child,r,o)}function kn(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.effectTag|=128)}function Tn(e,t,r,o,i){kn(e,t);var n=0!=(64&t.effectTag);if(!r&&!n)return o&&yi(t,!1),En(e,t);r=t.stateNode,at.current=t;var s=n?null:r.render();return t.effectTag|=1,n&&(Sn(e,t,null,i),t.child=null),Sn(e,t,s,i),t.memoizedState=r.state,t.memoizedProps=r.props,o&&yi(t,!0),t.child}function xn(e){var t=e.stateNode;t.pendingContext?fi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&fi(0,t.context,!1),$i(e,t.containerInfo)}function Pn(e,t,r,o){var i=e.child;for(null!==i&&(i.return=e);null!==i;){switch(i.tag){case 12:var n=0|i.stateNode;if(i.type===t&&0!=(n&r)){for(n=i;null!==n;){var s=n.alternate;if(0===n.expirationTime||n.expirationTime>o)n.expirationTime=o,null!==s&&(0===s.expirationTime||s.expirationTime>o)&&(s.expirationTime=o);else{if(null===s||!(0===s.expirationTime||s.expirationTime>o))break;s.expirationTime=o}n=n.return}n=null}else n=i.child;break;case 13:n=i.type===e.type?null:i.child;break;default:n=i.child}if(null!==n)n.return=i;else for(n=i;null!==n;){if(n===e){n=null;break}if(null!==(i=n.sibling)){i.return=n.return,n=i;break}n=n.return}i=n}}function En(e,t){if(null!==e&&t.child!==e.child&&d("153"),null!==t.child){var r=_i(e=t.child,e.pendingProps,e.expirationTime);for(t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=_i(e,e.pendingProps,e.expirationTime)).return=t;r.sibling=null}return t.child}function Rn(e,t,r){if(0===t.expirationTime||t.expirationTime>r){switch(t.tag){case 3:xn(t);break;case 2:mi(t);break;case 4:$i(t,t.stateNode.containerInfo);break;case 13:Hi(t)}return null}switch(t.tag){case 0:null!==e&&d("155");var o=t.type,i=t.pendingProps,n=ci(t);return o=o(i,n=ui(t,n)),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(n=t.type,t.tag=2,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,"function"==typeof(n=n.getDerivedStateFromProps)&&rn(t,n,i),i=mi(t),o.updater=on,t.stateNode=o,o._reactInternalFiber=t,an(t,r),e=Tn(e,t,!0,i,r)):(t.tag=1,vn(e,t,o),t.memoizedProps=i,e=t.child),e;case 1:return i=t.type,r=t.pendingProps,ai.current||t.memoizedProps!==r?(i=i(r,o=ui(t,o=ci(t))),t.effectTag|=1,vn(e,t,i),t.memoizedProps=r,e=t.child):e=En(e,t),e;case 2:if(i=mi(t),null===e)if(null===t.stateNode){var s=t.pendingProps,a=t.type;o=ci(t);var l=2===t.tag&&null!=t.type.contextTypes;s=new a(s,n=l?ui(t,o):h),t.memoizedState=null!==s.state&&void 0!==s.state?s.state:null,s.updater=on,t.stateNode=s,s._reactInternalFiber=t,l&&((l=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,l.__reactInternalMemoizedMaskedChildContext=n),an(t,r),o=!0}else{a=t.type,o=t.stateNode,l=t.memoizedProps,n=t.pendingProps,o.props=l;var c=o.context;s=ui(t,s=ci(t));var u=a.getDerivedStateFromProps;(a="function"==typeof u||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==n||c!==s)&&sn(t,o,n,s),Ri=!1;var p=t.memoizedState;c=o.state=p;var f=t.updateQueue;null!==f&&(Ki(t,f,n,o,r),c=t.memoizedState),l!==n||p!==c||ai.current||Ri?("function"==typeof u&&(rn(t,u,n),c=t.memoizedState),(l=Ri||nn(t,l,n,p,c,s))?(a||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.effectTag|=4)):("function"==typeof o.componentDidMount&&(t.effectTag|=4),t.memoizedProps=n,t.memoizedState=c),o.props=n,o.state=c,o.context=s,o=l):("function"==typeof o.componentDidMount&&(t.effectTag|=4),o=!1)}else a=t.type,o=t.stateNode,n=t.memoizedProps,l=t.pendingProps,o.props=n,c=o.context,s=ui(t,s=ci(t)),(a="function"==typeof(u=a.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(n!==l||c!==s)&&sn(t,o,l,s),Ri=!1,c=t.memoizedState,p=o.state=c,null!==(f=t.updateQueue)&&(Ki(t,f,l,o,r),p=t.memoizedState),n!==l||c!==p||ai.current||Ri?("function"==typeof u&&(rn(t,u,l),p=t.memoizedState),(u=Ri||nn(t,n,l,c,p,s))?(a||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(l,p,s),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(l,p,s)),"function"==typeof o.componentDidUpdate&&(t.effectTag|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof o.componentDidUpdate||n===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||n===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=l,t.memoizedState=p),o.props=l,o.state=p,o.context=s,o=u):("function"!=typeof o.componentDidUpdate||n===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||n===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),o=!1);return Tn(e,t,o,i,r);case 3:return xn(t),null!==(i=t.updateQueue)?(o=null!==(o=t.memoizedState)?o.element:null,Ki(t,i,t.pendingProps,null,r),(i=t.memoizedState.element)===o?(An(),e=En(e,t)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(gn=ei(t.stateNode.containerInfo),fn=t,o=mn=!0),o?(t.effectTag|=2,t.child=pn(t,null,i,r)):(An(),vn(e,t,i)),e=t.child)):(An(),e=En(e,t)),e;case 5:return Xi(Yi.current),(i=Xi(qi.current))!==(o=To(i,t.type))&&(ni(Ji,t),ni(qi,o)),null===e&&_n(t),i=t.type,l=t.memoizedProps,o=t.pendingProps,n=null!==e?e.memoizedProps:null,ai.current||l!==o||((l=1&t.mode&&!!o.hidden)&&(t.expirationTime=1073741823),l&&1073741823===r)?(l=o.children,qo(i,o)?l=null:n&&qo(i,n)&&(t.effectTag|=16),kn(e,t),1073741823!==r&&1&t.mode&&o.hidden?(t.expirationTime=1073741823,t.memoizedProps=o,e=null):(vn(e,t,l),t.memoizedProps=o,e=t.child)):e=En(e,t),e;case 6:return null===e&&_n(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return $i(t,t.stateNode.containerInfo),i=t.pendingProps,ai.current||t.memoizedProps!==i?(null===e?t.child=dn(t,null,i,r):vn(e,t,i),t.memoizedProps=i,e=t.child):e=En(e,t),e;case 14:return i=t.type.render,r=t.pendingProps,o=t.ref,ai.current||t.memoizedProps!==r||o!==(null!==e?e.ref:null)?(vn(e,t,i=i(r,o)),t.memoizedProps=r,e=t.child):e=En(e,t),e;case 10:return r=t.pendingProps,ai.current||t.memoizedProps!==r?(vn(e,t,r),t.memoizedProps=r,e=t.child):e=En(e,t),e;case 11:return r=t.pendingProps.children,ai.current||null!==r&&t.memoizedProps!==r?(vn(e,t,r),t.memoizedProps=r,e=t.child):e=En(e,t),e;case 15:return r=t.pendingProps,t.memoizedProps===r?e=En(e,t):(vn(e,t,r.children),t.memoizedProps=r,e=t.child),e;case 13:return function(e,t,r){var o=t.type._context,i=t.pendingProps,n=t.memoizedProps,s=!0;if(ai.current)s=!1;else if(n===i)return t.stateNode=0,Hi(t),En(e,t);var a=i.value;if(t.memoizedProps=i,null===n)a=1073741823;else if(n.value===i.value){if(n.children===i.children&&s)return t.stateNode=0,Hi(t),En(e,t);a=0}else{var l=n.value;if(l===a&&(0!==l||1/l==1/a)||l!=l&&a!=a){if(n.children===i.children&&s)return t.stateNode=0,Hi(t),En(e,t);a=0}else if(a="function"==typeof o._calculateChangedBits?o._calculateChangedBits(l,a):1073741823,0===(a|=0)){if(n.children===i.children&&s)return t.stateNode=0,Hi(t),En(e,t)}else Pn(t,o,a,r)}return t.stateNode=a,Hi(t),vn(e,t,i.children),t.child}(e,t,r);case 12:e:if(o=t.type,n=t.pendingProps,l=t.memoizedProps,i=o._currentValue,s=o._changedBits,ai.current||0!==s||l!==n){if(t.memoizedProps=n,null==(a=n.unstable_observedBits)&&(a=1073741823),t.stateNode=a,0!=(s&a))Pn(t,o,s,r);else if(l===n){e=En(e,t);break e}r=(r=n.children)(i),t.effectTag|=1,vn(e,t,r),e=t.child}else e=En(e,t);return e;default:d("156")}}function Mn(e){e.effectTag|=4}var Nn=void 0,Fn=void 0,In=void 0;function Dn(e,t){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return di(t),null;case 3:en(),pi();var o=t.stateNode;return o.pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),null!==e&&null!==e.child||(Cn(t),t.effectTag&=-3),Nn(t),null;case 5:tn(t),o=Xi(Yi.current);var i=t.type;if(null!==e&&null!=t.stateNode){var n=e.memoizedProps,s=t.stateNode,a=Xi(qi.current);s=Lo(s,i,n,r,o),Fn(e,t,s,i,n,r,o,a),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&d("166"),null;if(e=Xi(qi.current),Cn(t))r=t.stateNode,i=t.type,n=t.memoizedProps,r[W]=t,r[Q]=n,o=Wo(r,i,n,e,o),t.updateQueue=o,null!==o&&Mn(t);else{(e=Bo(i,r,o,e))[W]=t,e[Q]=r;e:for(n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)break e;n=n.return}n.sibling.return=n.return,n=n.sibling}Uo(e,i,r,o),Zo(i,r)&&Mn(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)In(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&d("166"),null;o=Xi(Yi.current),Xi(qi.current),Cn(t)?(o=t.stateNode,r=t.memoizedProps,o[W]=t,Qo(o,r)&&Mn(t)):((o=Ko(r,o))[W]=t,t.stateNode=o)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return en(),Nn(t),null;case 13:return ji(t),null;case 12:return null;case 0:d("167");default:d("156")}}function Vn(e,t){var r=t.source;null===t.stack&&null!==r&&At(r),null!==r&&Ct(r),t=t.value,null!==e&&2===e.tag&&Ct(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function On(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ds(e,t)}else t.current=null}function Bn(e){switch(Ei(e),e.tag){case 2:On(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){ds(e,t)}break;case 5:On(e);break;case 4:Ln(e)}}function Kn(e){return 5===e.tag||3===e.tag||4===e.tag}function Un(e){e:{for(var t=e.return;null!==t;){if(Kn(t)){var r=t;break e}t=t.return}d("160"),r=void 0}var o=t=void 0;switch(r.tag){case 5:t=r.stateNode,o=!1;break;case 3:case 4:t=r.stateNode.containerInfo,o=!0;break;default:d("161")}16&r.effectTag&&(Eo(t,""),r.effectTag&=-17);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||Kn(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;5!==r.tag&&6!==r.tag;){if(2&r.effectTag)continue t;if(null===r.child||4===r.tag)continue t;r.child.return=r,r=r.child}if(!(2&r.effectTag)){r=r.stateNode;break e}}for(var i=e;;){if(5===i.tag||6===i.tag)if(r)if(o){var n=t,s=i.stateNode,a=r;8===n.nodeType?n.parentNode.insertBefore(s,a):n.insertBefore(s,a)}else t.insertBefore(i.stateNode,r);else o?(n=t,s=i.stateNode,8===n.nodeType?n.parentNode.insertBefore(s,n):n.appendChild(s)):t.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function Ln(e){for(var t=e,r=!1,o=void 0,i=void 0;;){if(!r){r=t.return;e:for(;;){switch(null===r&&d("160"),r.tag){case 5:o=r.stateNode,i=!1;break e;case 3:case 4:o=r.stateNode.containerInfo,i=!0;break e}r=r.return}r=!0}if(5===t.tag||6===t.tag){e:for(var n=t,s=n;;)if(Bn(s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===n)break;for(;null===s.sibling;){if(null===s.return||s.return===n)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}i?(n=o,s=t.stateNode,8===n.nodeType?n.parentNode.removeChild(s):n.removeChild(s)):o.removeChild(t.stateNode)}else if(4===t.tag?o=t.stateNode.containerInfo:Bn(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(r=!1)}t.sibling.return=t.return,t=t.sibling}}function zn(e,t){switch(t.tag){case 2:break;case 5:var r=t.stateNode;if(null!=r){var o=t.memoizedProps;e=null!==e?e.memoizedProps:o;var i=t.type,n=t.updateQueue;t.updateQueue=null,null!==n&&(r[Q]=o,zo(r,n,i,e,o))}break;case 6:null===t.stateNode&&d("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:d("163")}}function Wn(e,t,r){(r=Fi(r)).tag=3,r.payload={element:null};var o=t.value;return r.callback=function(){qs(o),Vn(e,t)},r}function Qn(e,t,r){(r=Fi(r)).tag=3;var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(r.callback=function(){null===as?as=new Set([this]):as.add(this);var r=t.value,o=t.stack;Vn(e,t),this.componentDidCatch(r,{componentStack:null!==o?o:""})}),r}function Gn(e,t,r,o,i,n){r.effectTag|=512,r.firstEffect=r.lastEffect=null,o=zi(o,r),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void Vi(e,o=Wn(e,o,n),n);case 2:if(t=o,r=e.stateNode,0==(64&e.effectTag)&&null!==r&&"function"==typeof r.componentDidCatch&&(null===as||!as.has(r)))return e.effectTag|=1024,void Vi(e,o=Qn(e,t,n),n)}e=e.return}while(null!==e)}function Hn(e){switch(e.tag){case 2:di(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return en(),pi(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return tn(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return en(),null;case 13:return ji(e),null;default:return null}}Nn=function(){},Fn=function(e,t,r){(t.updateQueue=r)&&Mn(t)},In=function(e,t,r,o){r!==o&&Mn(t)};var jn=Jo(),Zn=2,qn=jn,Jn=0,Yn=0,Xn=!1,$n=null,es=null,ts=0,rs=-1,os=!1,is=null,ns=!1,ss=!1,as=null;function ls(){if(null!==$n)for(var e=$n.return;null!==e;){var t=e;switch(t.tag){case 2:di(t);break;case 3:en(),pi();break;case 5:tn(t);break;case 4:en();break;case 13:ji(t)}e=e.return}es=null,ts=0,rs=-1,os=!1,$n=null,ss=!1}function cs(e){for(;;){var t=e.alternate,r=e.return,o=e.sibling;if(0==(512&e.effectTag)){t=Dn(t,e);var i=e;if(1073741823===ts||1073741823!==i.expirationTime){var n=0;switch(i.tag){case 3:case 2:var s=i.updateQueue;null!==s&&(n=s.expirationTime)}for(s=i.child;null!==s;)0!==s.expirationTime&&(0===n||n>s.expirationTime)&&(n=s.expirationTime),s=s.sibling;i.expirationTime=n}if(null!==t)return t;if(null!==r&&0==(512&r.effectTag)&&(null===r.firstEffect&&(r.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==r.lastEffect&&(r.lastEffect.nextEffect=e.firstEffect),r.lastEffect=e.lastEffect),1<e.effectTag&&(null!==r.lastEffect?r.lastEffect.nextEffect=e:r.firstEffect=e,r.lastEffect=e)),null!==o)return o;if(null===r){ss=!0;break}e=r}else{if(null!==(e=Hn(e)))return e.effectTag&=511,e;if(null!==r&&(r.firstEffect=r.lastEffect=null,r.effectTag|=512),null!==o)return o;if(null===r)break;e=r}}return null}function us(e){var t=Rn(e.alternate,e,ts);return null===t&&(t=cs(e)),at.current=null,t}function hs(e,t,r){Xn&&d("243"),Xn=!0,t===ts&&e===es&&null!==$n||(ls(),ts=t,rs=-1,$n=_i((es=e).current,null,ts),e.pendingCommitExpirationTime=0);var o=!1;for(os=!r||ts<=Zn;;){try{if(r)for(;null!==$n&&!Zs();)$n=us($n);else for(;null!==$n;)$n=us($n)}catch(t){if(null===$n)o=!0,qs(t);else{null===$n&&d("271");var i=(r=$n).return;if(null===i){o=!0,qs(t);break}Gn(e,i,r,t,0,ts),$n=cs(r)}}break}if(Xn=!1,o)return null;if(null===$n){if(ss)return e.pendingCommitExpirationTime=t,e.current.alternate;os&&d("262"),0<=rs&&setTimeout((function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&Ks(e,t)}),rs),function(e){null===Ss&&d("246"),Ss.remainingExpirationTime=e}(e.current.expirationTime)}return null}function ds(e,t){var r;e:{for(Xn&&!ns&&d("263"),r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&(null===as||!as.has(o))){Di(r,e=Qn(r,e=zi(t,e),1),1),gs(r,1),r=void 0;break e}break;case 3:Di(r,e=Wn(r,e=zi(t,e),1),1),gs(r,1),r=void 0;break e}r=r.return}3===e.tag&&(Di(e,r=Wn(e,r=zi(t,e),1),1),gs(e,1)),r=void 0}return r}function ps(){var e=2+25*(1+((ms()-2+500)/25|0));return e<=Jn&&(e=Jn+1),Jn=e}function fs(e,t){return e=0!==Yn?Yn:Xn?ns?1:ts:1&t.mode?Fs?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Fs&&(0===Ts||e>Ts)&&(Ts=e),e}function gs(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var r=e.stateNode;!Xn&&0!==ts&&t<ts&&ls();var o=r.current.expirationTime;Xn&&!ns&&es===r||Ks(r,o),Vs>Ds&&d("185")}e=e.return}}function ms(){return qn=Jo()-jn,Zn=2+(qn/10|0)}function ys(e){var t=Yn;Yn=2+25*(1+((ms()-2+500)/25|0));try{return e()}finally{Yn=t}}function bs(e,t,r,o,i){var n=Yn;Yn=1;try{return e(t,r,o,i)}finally{Yn=n}}var _s=null,ws=null,Cs=0,As=-1,vs=!1,Ss=null,ks=0,Ts=0,xs=!1,Ps=!1,Es=null,Rs=null,Ms=!1,Ns=!1,Fs=!1,Is=null,Ds=1e3,Vs=0,Os=1;function Bs(e){if(0!==Cs){if(e>Cs)return;Xo(As)}var t=Jo()-jn;Cs=e,As=Yo(Ls,{timeout:10*(e-2)-t})}function Ks(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ws?(_s=ws=e,e.nextScheduledRoot=e):(ws=ws.nextScheduledRoot=e).nextScheduledRoot=_s;else{var r=e.remainingExpirationTime;(0===r||t<r)&&(e.remainingExpirationTime=t)}vs||(Ms?Ns&&(Ss=e,ks=1,Hs(e,1,!1)):1===t?zs():Bs(t))}function Us(){var e=0,t=null;if(null!==ws)for(var r=ws,o=_s;null!==o;){var i=o.remainingExpirationTime;if(0===i){if((null===r||null===ws)&&d("244"),o===o.nextScheduledRoot){_s=ws=o.nextScheduledRoot=null;break}if(o===_s)_s=i=o.nextScheduledRoot,ws.nextScheduledRoot=i,o.nextScheduledRoot=null;else{if(o===ws){(ws=r).nextScheduledRoot=_s,o.nextScheduledRoot=null;break}r.nextScheduledRoot=o.nextScheduledRoot,o.nextScheduledRoot=null}o=r.nextScheduledRoot}else{if((0===e||i<e)&&(e=i,t=o),o===ws)break;r=o,o=o.nextScheduledRoot}}null!==(r=Ss)&&r===t&&1===e?Vs++:Vs=0,Ss=t,ks=e}function Ls(e){Ws(0,!0,e)}function zs(){Ws(1,!1,null)}function Ws(e,t,r){if(Rs=r,Us(),t)for(;null!==Ss&&0!==ks&&(0===e||e>=ks)&&(!xs||ms()>=ks);)ms(),Hs(Ss,ks,!xs),Us();else for(;null!==Ss&&0!==ks&&(0===e||e>=ks);)Hs(Ss,ks,!1),Us();null!==Rs&&(Cs=0,As=-1),0!==ks&&Bs(ks),Rs=null,xs=!1,Gs()}function Qs(e,t){vs&&d("253"),Ss=e,ks=t,Hs(e,t,!1),zs(),Gs()}function Gs(){if(Vs=0,null!==Is){var e=Is;Is=null;for(var t=0;t<e.length;t++){var r=e[t];try{r._onComplete()}catch(e){Ps||(Ps=!0,Es=e)}}}if(Ps)throw e=Es,Es=null,Ps=!1,e}function Hs(e,t,r){vs&&d("245"),vs=!0,r?null!==(r=e.finishedWork)?js(e,r,t):(e.finishedWork=null,null!==(r=hs(e,t,!0))&&(Zs()?e.finishedWork=r:js(e,r,t))):null!==(r=e.finishedWork)?js(e,r,t):(e.finishedWork=null,null!==(r=hs(e,t,!1))&&js(e,r,t)),vs=!1}function js(e,t,r){var o=e.firstBatch;if(null!==o&&o._expirationTime<=r&&(null===Is?Is=[o]:Is.push(o),o._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,ns=Xn=!0,(r=t.stateNode).current===t&&d("177"),0===(o=r.pendingCommitExpirationTime)&&d("261"),r.pendingCommitExpirationTime=0,ms(),at.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;Ho=Rr;var n=l();if(Wr(n)){if("selectionStart"in n)var s={start:n.selectionStart,end:n.selectionEnd};else e:{var a=window.getSelection&&window.getSelection();if(a&&0!==a.rangeCount){s=a.anchorNode;var c=a.anchorOffset,h=a.focusNode;a=a.focusOffset;try{s.nodeType,h.nodeType}catch(e){s=null;break e}var p=0,f=-1,g=-1,m=0,y=0,b=n,_=null;t:for(;;){for(var w;b!==s||0!==c&&3!==b.nodeType||(f=p+c),b!==h||0!==a&&3!==b.nodeType||(g=p+a),3===b.nodeType&&(p+=b.nodeValue.length),null!==(w=b.firstChild);)_=b,b=w;for(;;){if(b===n)break t;if(_===s&&++m===c&&(f=p),_===h&&++y===a&&(g=p),null!==(w=b.nextSibling))break;_=(b=_).parentNode}b=w}s=-1===f||-1===g?null:{start:f,end:g}}else s=null}s=s||{start:0,end:0}}else s=null;for(jo={focusedElem:n,selectionRange:s},Mr(!1),is=i;null!==is;){n=!1,s=void 0;try{for(;null!==is;){if(256&is.effectTag){var C=is.alternate;switch((c=is).tag){case 2:if(256&c.effectTag&&null!==C){var A=C.memoizedProps,v=C.memoizedState,S=c.stateNode;S.props=c.memoizedProps,S.state=c.memoizedState;var k=S.getSnapshotBeforeUpdate(A,v);S.__reactInternalSnapshotBeforeUpdate=k}break;case 3:case 5:case 6:case 4:break;default:d("163")}}is=is.nextEffect}}catch(e){n=!0,s=e}n&&(null===is&&d("178"),ds(is,s),null!==is&&(is=is.nextEffect))}for(is=i;null!==is;){C=!1,A=void 0;try{for(;null!==is;){var T=is.effectTag;if(16&T&&Eo(is.stateNode,""),128&T){var x=is.alternate;if(null!==x){var P=x.ref;null!==P&&("function"==typeof P?P(null):P.current=null)}}switch(14&T){case 2:Un(is),is.effectTag&=-3;break;case 6:Un(is),is.effectTag&=-3,zn(is.alternate,is);break;case 4:zn(is.alternate,is);break;case 8:Ln(v=is),v.return=null,v.child=null,v.alternate&&(v.alternate.child=null,v.alternate.return=null)}is=is.nextEffect}}catch(e){C=!0,A=e}C&&(null===is&&d("178"),ds(is,A),null!==is&&(is=is.nextEffect))}if(P=jo,x=l(),T=P.focusedElem,C=P.selectionRange,x!==T&&u(document.documentElement,T)){Wr(T)&&(x=C.start,void 0===(P=C.end)&&(P=x),"selectionStart"in T?(T.selectionStart=x,T.selectionEnd=Math.min(P,T.value.length)):window.getSelection&&(x=window.getSelection(),A=T[me()].length,P=Math.min(C.start,A),C=void 0===C.end?P:Math.min(C.end,A),!x.extend&&P>C&&(A=C,C=P,P=A),A=zr(T,P),v=zr(T,C),A&&v&&(1!==x.rangeCount||x.anchorNode!==A.node||x.anchorOffset!==A.offset||x.focusNode!==v.node||x.focusOffset!==v.offset)&&((S=document.createRange()).setStart(A.node,A.offset),x.removeAllRanges(),P>C?(x.addRange(S),x.extend(v.node,v.offset)):(S.setEnd(v.node,v.offset),x.addRange(S))))),x=[];for(P=T;P=P.parentNode;)1===P.nodeType&&x.push({element:P,left:P.scrollLeft,top:P.scrollTop});for(T.focus(),T=0;T<x.length;T++)(P=x[T]).element.scrollLeft=P.left,P.element.scrollTop=P.top}for(jo=null,Mr(Ho),Ho=null,r.current=t,is=i;null!==is;){i=!1,T=void 0;try{for(x=o;null!==is;){var E=is.effectTag;if(36&E){var R=is.alternate;switch(C=x,(P=is).tag){case 2:var M=P.stateNode;if(4&P.effectTag)if(null===R)M.props=P.memoizedProps,M.state=P.memoizedState,M.componentDidMount();else{var N=R.memoizedProps,F=R.memoizedState;M.props=P.memoizedProps,M.state=P.memoizedState,M.componentDidUpdate(N,F,M.__reactInternalSnapshotBeforeUpdate)}var I=P.updateQueue;null!==I&&(M.props=P.memoizedProps,M.state=P.memoizedState,Li(P,I,M));break;case 3:var D=P.updateQueue;if(null!==D){if(A=null,null!==P.child)switch(P.child.tag){case 5:A=P.child.stateNode;break;case 2:A=P.child.stateNode}Li(P,D,A)}break;case 5:var V=P.stateNode;null===R&&4&P.effectTag&&Zo(P.type,P.memoizedProps)&&V.focus();break;case 6:case 4:case 15:case 16:break;default:d("163")}}if(128&E){P=void 0;var O=is.ref;if(null!==O){var B=is.stateNode;switch(is.tag){case 5:P=B;break;default:P=B}"function"==typeof O?O(P):O.current=P}}var K=is.nextEffect;is.nextEffect=null,is=K}}catch(e){i=!0,T=e}i&&(null===is&&d("178"),ds(is,T),null!==is&&(is=is.nextEffect))}Xn=ns=!1,Pi(t.stateNode),0===(t=r.current.expirationTime)&&(as=null),e.remainingExpirationTime=t}function Zs(){return!(null===Rs||Rs.timeRemaining()>Os)&&(xs=!0)}function qs(e){null===Ss&&d("246"),Ss.remainingExpirationTime=0,Ps||(Ps=!0,Es=e)}function Js(e,t){var r=Ms;Ms=!0;try{return e(t)}finally{(Ms=r)||vs||zs()}}function Ys(e,t){if(Ms&&!Ns){Ns=!0;try{return e(t)}finally{Ns=!1}}return e(t)}function Xs(e,t){vs&&d("187");var r=Ms;Ms=!0;try{return bs(e,t)}finally{Ms=r,zs()}}function $s(e){var t=Ms;Ms=!0;try{bs(e)}finally{(Ms=t)||vs||Ws(1,!1,null)}}function ea(e,t,r,o,i){var n=t.current;if(r){var s;e:{for(2===ar(r=r._reactInternalFiber)&&2===r.tag||d("170"),s=r;3!==s.tag;){if(hi(s)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break e}(s=s.return)||d("171")}s=s.stateNode.context}r=hi(r)?gi(r,s):s}else r=h;return null===t.context?t.context=r:t.pendingContext=r,t=i,(i=Fi(o)).payload={element:e},null!==(t=void 0===t?null:t)&&(i.callback=t),Di(n,i,o),gs(n,o),o}function ta(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?d("188"):d("268",Object.keys(e))),null===(e=ur(t))?null:e.stateNode}function ra(e,t,r,o){var i=t.current;return ea(e,t,r,i=fs(ms(),i),o)}function oa(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ia(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var r=t.inject(e);ki=xi((function(e){return t.onCommitFiberRoot(r,e)})),Ti=xi((function(e){return t.onCommitFiberUnmount(r,e)}))}catch(e){}return!0}(s({},e,{findHostInstanceByFiber:function(e){return null===(e=ur(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var na=Js,sa=function(e,t,r){if(Fs)return e(t,r);Ms||vs||0===Ts||(Ws(Ts,!1,null),Ts=0);var o=Fs,i=Ms;Ms=Fs=!0;try{return e(t,r)}finally{Fs=o,(Ms=i)||vs||zs()}},aa=function(){vs||0===Ts||(Ws(Ts,!1,null),Ts=0)};function la(e){this._expirationTime=ps(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function ca(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function ua(e,t,r){this._internalRoot=Si(e,t,r)}function ha(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function da(e,t,r,o,i){ha(r)||d("200");var n=r._reactRootContainer;if(n){if("function"==typeof i){var s=i;i=function(){var e=oa(n._internalRoot);s.call(e)}}null!=e?n.legacy_renderSubtreeIntoContainer(e,t,i):n.render(t,i)}else{if(n=r._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new ua(e,!1,t)}(r,o),"function"==typeof i){var a=i;i=function(){var e=oa(n._internalRoot);a.call(e)}}Ys((function(){null!=e?n.legacy_renderSubtreeIntoContainer(e,t,i):n.render(t,i)}))}return oa(n._internalRoot)}function pa(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return ha(t)||d("200"),function(e,t,r){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ut,key:null==o?null:""+o,children:e,containerInfo:t,implementation:r}}(e,t,null,r)}Le.injectFiberControlledHostComponent(Go),la.prototype.render=function(e){this._defer||d("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,r=this._expirationTime,o=new ca;return ea(e,t,null,r,o._onCommit),o},la.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},la.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||d("251"),this._hasChildren){var r=this._expirationTime;if(t!==this){this._hasChildren&&(r=this._expirationTime=t._expirationTime,this.render(this._children));for(var o=null,i=t;i!==this;)o=i,i=i._next;null===o&&d("251"),o._next=i._next,this._next=t,e.firstBatch=this}this._defer=!1,Qs(e,r),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},la.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},ca.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ca.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var r=e[t];"function"!=typeof r&&d("191",r),r()}}},ua.prototype.render=function(e,t){var r=this._internalRoot,o=new ca;return null!==(t=void 0===t?null:t)&&o.then(t),ra(e,r,null,o._onCommit),o},ua.prototype.unmount=function(e){var t=this._internalRoot,r=new ca;return null!==(e=void 0===e?null:e)&&r.then(e),ra(null,t,null,r._onCommit),r},ua.prototype.legacy_renderSubtreeIntoContainer=function(e,t,r){var o=this._internalRoot,i=new ca;return null!==(r=void 0===r?null:r)&&i.then(r),ra(t,o,e,i._onCommit),i},ua.prototype.createBatch=function(){var e=new la(this),t=e._expirationTime,r=this._internalRoot,o=r.firstBatch;if(null===o)r.firstBatch=e,e._next=null;else{for(r=null;null!==o&&o._expirationTime<=t;)r=o,o=o._next;e._next=o,null!==r&&(r._next=e)}return e},qe=na,Je=sa,Ye=aa;var fa={createPortal:pa,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:ta(e)},hydrate:function(e,t,r){return da(null,e,t,!0,r)},render:function(e,t,r){return da(null,e,t,!1,r)},unstable_renderSubtreeIntoContainer:function(e,t,r,o){return(null==e||void 0===e._reactInternalFiber)&&d("38"),da(e,t,r,!1,o)},unmountComponentAtNode:function(e){return ha(e)||d("40"),!!e._reactRootContainer&&(Ys((function(){da(null,null,e,!1,(function(){e._reactRootContainer=null}))})),!0)},unstable_createPortal:function(){return pa.apply(void 0,arguments)},unstable_batchedUpdates:Js,unstable_deferredUpdates:ys,flushSync:Xs,unstable_flushControlled:$s,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:L,EventPluginRegistry:T,EventPropagators:ie,ReactControlledComponent:Ze,ReactDOMComponentTree:Z,ReactDOMEventListener:Vr},unstable_createRoot:function(e,t){return new ua(e,!0,null!=t&&!0===t.hydrate)}};ia({findFiberByHostInstance:G,bundleType:0,version:"16.4.0",rendererPackageName:"react-dom"});var ga={default:fa},ma=ga&&fa||ga;e.exports=ma.default?ma.default:ma},function(e,t,r){"use strict";
/** @license React v16.4.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var o=r(3),i=r(2),n=r(4),s=r(5),a="function"==typeof Symbol&&Symbol.for,l=a?Symbol.for("react.element"):60103,c=a?Symbol.for("react.portal"):60106,u=a?Symbol.for("react.fragment"):60107,h=a?Symbol.for("react.strict_mode"):60108,d=a?Symbol.for("react.profiler"):60114,p=a?Symbol.for("react.provider"):60109,f=a?Symbol.for("react.context"):60110,g=a?Symbol.for("react.async_mode"):60111,m=a?Symbol.for("react.forward_ref"):60112;a&&Symbol.for("react.timeout");var y="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,r="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)r+="&args[]="+encodeURIComponent(arguments[o+1]);i(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",r)}var _={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function w(e,t,r){this.props=e,this.context=t,this.refs=n,this.updater=r||_}function C(){}function A(e,t,r){this.props=e,this.context=t,this.refs=n,this.updater=r||_}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},C.prototype=w.prototype;var v=A.prototype=new C;v.constructor=A,o(v,w.prototype),v.isPureReactComponent=!0;var S={current:null},k=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,r){var o=void 0,i={},n=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(n=""+t.key),t)k.call(t,o)&&!T.hasOwnProperty(o)&&(i[o]=t[o]);var a=arguments.length-2;if(1===a)i.children=r;else if(1<a){for(var c=Array(a),u=0;u<a;u++)c[u]=arguments[u+2];i.children=c}if(e&&e.defaultProps)for(o in a=e.defaultProps)void 0===i[o]&&(i[o]=a[o]);return{$$typeof:l,type:e,key:n,ref:s,props:i,_owner:S.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var E=/\/+/g,R=[];function M(e,t,r,o){if(R.length){var i=R.pop();return i.result=e,i.keyPrefix=t,i.func=r,i.context=o,i.count=0,i}return{result:e,keyPrefix:t,func:r,context:o,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function F(e,t,r,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var n=!1;if(null===e)n=!0;else switch(i){case"string":case"number":n=!0;break;case"object":switch(e.$$typeof){case l:case c:n=!0}}if(n)return r(o,e,""===t?"."+I(e,0):t),1;if(n=0,t=""===t?".":t+":",Array.isArray(e))for(var s=0;s<e.length;s++){var a=t+I(i=e[s],s);n+=F(i,a,r,o)}else if(null==e?a=null:a="function"==typeof(a=y&&e[y]||e["@@iterator"])?a:null,"function"==typeof a)for(e=a.call(e),s=0;!(i=e.next()).done;)n+=F(i=i.value,a=t+I(i,s++),r,o);else"object"===i&&b("31","[object Object]"===(r=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":r,"");return n}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function V(e,t,r){var o=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?O(e,o,r,s.thatReturnsArgument):null!=e&&(P(e)&&(t=i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(E,"$&/")+"/")+r,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),o.push(e))}function O(e,t,r,o,i){var n="";null!=r&&(n=(""+r).replace(E,"$&/")+"/"),t=M(t,n,o,i),null==e||F(e,"",V,t),N(t)}var B={Children:{map:function(e,t,r){if(null==e)return e;var o=[];return O(e,o,null,t,r),o},forEach:function(e,t,r){if(null==e)return e;t=M(null,null,t,r),null==e||F(e,"",D,t),N(t)},count:function(e){return null==e?0:F(e,"",s.thatReturnsNull,null)},toArray:function(e){var t=[];return O(e,t,null,s.thatReturnsArgument),t},only:function(e){return P(e)||b("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:A,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:m,render:e}},Fragment:u,StrictMode:h,unstable_AsyncMode:g,unstable_Profiler:d,createElement:x,cloneElement:function(e,t,r){null==e&&b("267",e);var i=void 0,n=o({},e.props),s=e.key,a=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(a=t.ref,c=S.current),void 0!==t.key&&(s=""+t.key);var u=void 0;for(i in e.type&&e.type.defaultProps&&(u=e.type.defaultProps),t)k.call(t,i)&&!T.hasOwnProperty(i)&&(n[i]=void 0===t[i]&&void 0!==u?u[i]:t[i])}if(1===(i=arguments.length-2))n.children=r;else if(1<i){u=Array(i);for(var h=0;h<i;h++)u[h]=arguments[h+2];n.children=u}return{$$typeof:l,type:e.type,key:s,ref:a,props:n,_owner:c}},createFactory:function(e){var t=x.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.4.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:S,assign:o}},K={default:B},U=K&&B||K;e.exports=U.default?U.default:U},function(e,t,r){"use strict";var o=!("undefined"==typeof window||!window.document||!window.document.createElement),i={canUseDOM:o,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:o&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:o&&!!window.screen,isInWorker:!o};e.exports=i},function(e,t,r){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,r){"use strict";var o=Object.prototype.hasOwnProperty;function i(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(i(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(var s=0;s<r.length;s++)if(!o.call(t,r[s])||!i(e[r[s]],t[r[s]]))return!1;return!0}},function(e,t,r){"use strict";var o=r(12);e.exports=function e(t,r){return!(!t||!r)&&(t===r||!o(t)&&(o(r)?e(t,r.parentNode):"contains"in t?t.contains(r):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(r))))}},function(e,t,r){"use strict";var o=r(13);e.exports=function(e){return o(e)&&3==e.nodeType}},function(e,t,r){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,r,o){"use strict";o.r(r);const i=Symbol("CANCEL"),n=Symbol("DEFAULT"),s=Symbol("PASS"),a=Symbol("STRIP"),l={CANCEL:i,DEFAULT:n,PASS:s,STRIP:a};function c(e,t){let r=Object.assign(Object.assign({},t),{op:e});window.webkit.messageHandlers._kb.postMessage(r)}const u="O",h="",d="[",p="",f=e=>String.fromCharCode(e.charCodeAt(0)-64),g={keyCode:0,keyCap:"[Unidentified]",normal:s,ctrl:s,alt:s,meta:s};class m{constructor(e){this._defs={},this._reverseDefs={},this._onCtrlNum=(e,t)=>{switch(t.keyCap.substr(0,1)){case"1":return"1";case"2":return f("@");case"3":return f("[");case"4":return f("\\");case"5":return f("]");case"6":return f("^");case"7":return f("_");case"8":return p;case"9":return"9";default:return s}},this._onAltNum=(e,t)=>n,this._onSel=(e,t)=>{let{ArrowDown:r,ArrowLeft:o,ArrowRight:n,ArrowUp:s,Escape:a,h:l,j:u,k:h,l:d,o:p,b:f,f:g,n:m,p:y,w:b,x:_,y:w}=this._reverseDefs;const C=e=>c("selection",e),A={command:"copy"};if(t===o||t===l){C({dir:"left",gran:e.shift?"word":"character"})}else if(t===n||t===d){C({dir:"right",gran:e.shift?"word":"character"})}else t===s||t===h?C({dir:"left",gran:"line"}):t===r||t===u?C({dir:"right",gran:"line"}):t===p||t===_?C({command:"change"}):t===m&&e.ctrl?C({dir:"right",gran:"line"}):t===y?e.ctrl?C({dir:"left",gran:"line"}):e.shift||e.alt||e.meta||C({command:"paste"}):t===f?e.ctrl?C({dir:"left",gran:"character"}):(e.alt,C({dir:"left",gran:"word"})):t===b?e.alt?C(A):C({dir:"right",gran:"word"}):t===g?e.ctrl?C({dir:"right",gran:"character"}):e.alt&&C({dir:"right",gran:"word"}):t===w?C(A):t===a&&C({command:"cancel"});return i},this._keyboard=e,this.reset()}getKeyDef(e){var t=this._defs[e];return t||(console.warn(`No definition for (keyCode ${e})`),t=g,this.addKeyDef(e,t),t)}addKeyDef(e,t){if(e in this._defs&&console.warn("Dup keyCode: ",e),this._defs[e]=t,/^\[\w+\]$/.test(t.keyCap)){let e=t.keyCap.replace(/\W/g,"");this._reverseDefs[e]=t}else{var r=t.keyCap[0];this._reverseDefs[r]=t,/0-9/.test(r)?this._reverseDefs["Digit"+r]=t:/[a-z]/.test(r)&&(this._reverseDefs["Key"+r.toUpperCase()]=t)}}reset(){this._defs={};const e=(e,t,r)=>"function"==typeof e?e.call(this,t,r):e,t=(t,r)=>(o,i)=>{let n=o.shift||o.ctrl||o.alt||o.meta?r:t;return e(n,o,i)},r=(t,r)=>(o,i)=>{let n=o.shift?r:t;return o.shift=!1,e(n,o,i)},o=(e,t)=>e,i=(t,r)=>(o,i)=>{let n=o.alt?t:r;return e(n,o,i)},l=(t,r)=>(o,i)=>{let n=o.shift||o.ctrl||o.alt||o.meta?t:r;return e(n,o,i)},c=t=>(r,o)=>{let i=this._keyboard.hasSelection?this._onSel:t;return e(i,r,o)},m=e=>this.addKeyDef(e.keyCode,e);m(g),m({keyCode:27,keyCap:"[Escape]",normal:c(h),ctrl:n,alt:n,meta:n}),m({keyCode:112,keyCap:"[F1]",normal:t(u+"P",d+"P"),ctrl:n,alt:d+"23~",meta:n}),m({keyCode:113,keyCap:"[F2]",normal:t(u+"Q",d+"Q"),ctrl:n,alt:d+"24~",meta:n}),m({keyCode:114,keyCap:"[F3]",normal:t(u+"R",d+"R"),ctrl:n,alt:d+"25~",meta:n}),m({keyCode:115,keyCap:"[F4]",normal:t(u+"S",d+"S"),ctrl:n,alt:d+"26~",meta:n}),m({keyCode:116,keyCap:"[F5]",normal:d+"15~",ctrl:n,alt:d+"28~",meta:n}),m({keyCode:117,keyCap:"[F6]",normal:d+"17~",ctrl:n,alt:d+"29~",meta:n}),m({keyCode:118,keyCap:"[F7]",normal:d+"18~",ctrl:n,alt:d+"31~",meta:n}),m({keyCode:119,keyCap:"[F8]",normal:d+"19~",ctrl:n,alt:d+"32~",meta:n}),m({keyCode:120,keyCap:"[F9]",normal:d+"20~",ctrl:n,alt:d+"33~",meta:n}),m({keyCode:121,keyCap:"[F10]",normal:d+"21~",ctrl:n,alt:d+"34~",meta:n}),m({keyCode:122,keyCap:"[F11]",normal:d+"23~",ctrl:n,alt:d+"42~",meta:n}),m({keyCode:123,keyCap:"[F12]",normal:d+"24~",ctrl:n,alt:d+"43~",meta:n});const y=this._onCtrlNum,b=this._onAltNum;m({keyCode:192,keyCap:"`~",normal:n,ctrl:r(f("@"),f("^")),alt:n,meta:n}),m({keyCode:49,keyCap:"1!",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:50,keyCap:"2@",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:51,keyCap:"3#",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:52,keyCap:"4$",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:53,keyCap:"5%",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:54,keyCap:"6^",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:55,keyCap:"7&",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:56,keyCap:"8*",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:57,keyCap:"9(",normal:n,ctrl:y,alt:b,meta:n}),m({keyCode:48,keyCap:"0)",normal:n,ctrl:n,alt:b,meta:n}),m({keyCode:189,keyCap:"-_",normal:n,ctrl:f("_"),alt:n,meta:n}),m({keyCode:187,keyCap:"=+",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:8,keyCap:"[Backspace]",normal:o(p),ctrl:o("\b"),alt:n,meta:n}),m({keyCode:9,keyCap:"[Tab]",normal:r("\t",d+"Z"),ctrl:a,alt:a,meta:n}),m({keyCode:81,keyCap:"qQ",normal:n,ctrl:f("Q"),alt:n,meta:n}),m({keyCode:87,keyCap:"wW",normal:c(n),ctrl:f("W"),alt:c(n),meta:n}),m({keyCode:69,keyCap:"eE",normal:n,ctrl:f("E"),alt:n,meta:n}),m({keyCode:82,keyCap:"rR",normal:n,ctrl:f("R"),alt:n,meta:n}),m({keyCode:84,keyCap:"tT",normal:n,ctrl:f("T"),alt:n,meta:n}),m({keyCode:89,keyCap:"yY",normal:c(n),ctrl:f("Y"),alt:n,meta:n}),m({keyCode:85,keyCap:"uU",normal:n,ctrl:f("U"),alt:n,meta:n}),m({keyCode:73,keyCap:"iI",normal:n,ctrl:f("I"),alt:n,meta:n}),m({keyCode:79,keyCap:"oO",normal:c(n),ctrl:f("O"),alt:n,meta:n}),m({keyCode:80,keyCap:"pP",normal:c(n),ctrl:c(f("P")),alt:n,meta:n}),m({keyCode:219,keyCap:"[{",normal:n,ctrl:f("["),alt:n,meta:n}),m({keyCode:221,keyCap:"]}",normal:n,ctrl:f("]"),alt:n,meta:n}),m({keyCode:220,keyCap:"\\|",normal:n,ctrl:f("\\"),alt:n,meta:n}),m({keyCode:20,keyCap:"[CapsLock]",normal:s,ctrl:s,alt:s,meta:n}),m({keyCode:65,keyCap:"aA",normal:n,ctrl:f("A"),alt:n,meta:n}),m({keyCode:83,keyCap:"sS",normal:n,ctrl:f("S"),alt:n,meta:n}),m({keyCode:68,keyCap:"dD",normal:n,ctrl:f("D"),alt:n,meta:n}),m({keyCode:70,keyCap:"fF",normal:n,ctrl:c(f("F")),alt:c(n),meta:n}),m({keyCode:71,keyCap:"gG",normal:n,ctrl:f("G"),alt:n,meta:n}),m({keyCode:72,keyCap:"hH",normal:c(n),ctrl:f("H"),alt:n,meta:n}),m({keyCode:74,keyCap:"jJ",normal:c(n),ctrl:f("J"),alt:n,meta:n}),m({keyCode:75,keyCap:"kK",normal:c(n),ctrl:f("K"),alt:n,meta:n}),m({keyCode:76,keyCap:"lL",normal:c(n),ctrl:f("L"),alt:n,meta:n}),m({keyCode:186,keyCap:";:",normal:n,ctrl:a,alt:n,meta:n}),m({keyCode:222,keyCap:"'\"",normal:n,ctrl:a,alt:n,meta:n}),m({keyCode:13,keyCap:"[Enter]",normal:"\r",ctrl:n,alt:n,meta:n}),m({keyCode:16,keyCap:"[Shift]",normal:s,ctrl:s,alt:s,meta:n}),m({keyCode:90,keyCap:"zZ",normal:n,ctrl:f("Z"),alt:n,meta:n}),m({keyCode:88,keyCap:"xX",normal:c(n),ctrl:c(f("X")),alt:n,meta:n}),m({keyCode:67,keyCap:"cC",normal:n,ctrl:f("C"),alt:n,meta:n}),m({keyCode:86,keyCap:"vV",normal:n,ctrl:f("V"),alt:n,meta:n}),m({keyCode:66,keyCap:"bB",normal:c(n),ctrl:c(f("B")),alt:c(n),meta:n}),m({keyCode:78,keyCap:"nN",normal:n,ctrl:c(f("N")),alt:n,meta:n}),m({keyCode:77,keyCap:"mM",normal:n,ctrl:f("M"),alt:n,meta:n}),m({keyCode:188,keyCap:",<",normal:n,ctrl:i(a,s),alt:n,meta:n}),m({keyCode:190,keyCap:".>",normal:n,ctrl:i(a,s),alt:n,meta:n}),m({keyCode:191,keyCap:"/?",normal:n,ctrl:r(f("_"),f("?")),alt:n,meta:n}),m({keyCode:17,keyCap:"[Control]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:18,keyCap:"[Alt]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:91,keyCap:"[Meta]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:32,keyCap:" ",normal:n,ctrl:f("@"),alt:n,meta:n}),m({keyCode:93,keyCap:"[Meta]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:42,keyCap:"[PRTSCR]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:145,keyCap:"[SCRLK]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:19,keyCap:"[BREAK]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:45,keyCap:"[Insert]",normal:d+"2~",ctrl:n,alt:n,meta:n}),m({keyCode:36,keyCap:"[Home]",normal:h+"OH",ctrl:n,alt:n,meta:n}),m({keyCode:33,keyCap:"[PageUp]",normal:d+"5~",ctrl:n,alt:n,meta:n}),m({keyCode:46,keyCap:"[DEL]",normal:d+"3~",ctrl:n,alt:n,meta:n}),m({keyCode:35,keyCap:"[End]",normal:h+"OF",ctrl:n,alt:n,meta:n}),m({keyCode:34,keyCap:"[PageDown]",normal:d+"6~",ctrl:n,alt:n,meta:n}),m({keyCode:38,keyCap:"[ArrowUp]",normal:c(l(d+"A",u+"A")),ctrl:n,alt:n,meta:n}),m({keyCode:40,keyCap:"[ArrowDown]",normal:c(l(d+"B",u+"B")),ctrl:n,alt:n,meta:n}),m({keyCode:39,keyCap:"[ArrowRight]",normal:c(l(d+"C",u+"C")),ctrl:n,alt:n,meta:n}),m({keyCode:37,keyCap:"[ArrowLeft]",normal:c(l(d+"D",u+"D")),ctrl:n,alt:n,meta:n}),m({keyCode:144,keyCap:"[NumLock]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:12,keyCap:"[Clear]",normal:s,ctrl:s,alt:s,meta:s}),m({keyCode:96,keyCap:"[Numpad0]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:97,keyCap:"[Numpad1]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:98,keyCap:"[Numpad2]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:99,keyCap:"[Numpad3]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:100,keyCap:"[Numpad4]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:101,keyCap:"[Numpad5]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:102,keyCap:"[Numpad6]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:103,keyCap:"[Numpad7]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:104,keyCap:"[Numpad8]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:105,keyCap:"[Numpad9]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:107,keyCap:"[NumpadAdd]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:109,keyCap:"[NumpadSubtract]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:106,keyCap:"[NumpadMultiply]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:111,keyCap:"[NumpadDivide]",normal:n,ctrl:n,alt:n,meta:n}),m({keyCode:110,keyCap:"[NumpadDicimal]",normal:n,ctrl:n,alt:n,meta:n}),this._reverseDefs.Backqoute=this._defs[192],this._reverseDefs.BracketLeft=this._defs[229],this._reverseDefs.BracketRight=this._defs[221],this._reverseDefs.Slash=this._defs[191],this._reverseDefs.Space=this._defs[32]}keyCode(e){let t=this._reverseDefs[e];return t?t.keyCode:0}key(e){let t=this._defs[e];if(!t)return"";let r=t.keyCap;return/^\[\w+\]$/.test(r)?r.substr(1,r.length-2):r.substr(0,1)}}const y=65536,b=1<<17,_=1<<18,w=1<<19,C=1<<20;function A(e){return{shift:(e&b)==b,alt:(e&w)==w,ctrl:(e&_)==_,meta:(e&C)==C}}class v{constructor(){this._map={},this.expandFn=e=>{if(0===e.keys.length)return;let t=[{keyCode:121,key:"F10",code:"F10",id:"121:0"},{keyCode:112,key:"F1",code:"F1",id:"112:0"},{keyCode:113,key:"F2",code:"F2",id:"113:0"},{keyCode:114,key:"F3",code:"F3",id:"114:0"},{keyCode:115,key:"F4",code:"F4",id:"115:0"},{keyCode:116,key:"F5",code:"F5",id:"116:0"},{keyCode:117,key:"F6",code:"F6",id:"117:0"},{keyCode:118,key:"F7",code:"F7",id:"118:0"},{keyCode:119,key:"F8",code:"F8",id:"119:0"},{keyCode:120,key:"F9",code:"F9",id:"120:0"}],r=e.keys.slice();for(var o=0;o<10;o++){let i=o+48+":0",n=t[o];e.keys=r.slice(),e.keys.push(i),e.action={type:"press",key:n,mods:0},this.expandBinding(e)}},this.expandCursor=e=>{if(0==e.keys.length)return;let t=[{keyCode:36,key:"HOME",code:"HOME",id:"36:0"},{keyCode:33,key:"PGUP",code:"PGUP",id:"33:0"},{keyCode:35,key:"END",code:"END",id:"35:0"},{keyCode:34,key:"PGDOWN",code:"PGDOWN",id:"34:0"}],r=["37:0","38:0","39:0","40:0"],o=e.keys.slice();for(var i=0;i<r.length;i++){let n=r[i],s=t[i];e.keys=o.slice(),e.keys.push(n),e.action={type:"press",key:s,mods:0},this.expandBinding(e)}},this.expandBinding=e=>{var t=e.keys.map(e=>e.split("-")[0]);if(0==t.length)return;var r=[t.sort()],o=0;var i=[{idLeft:"16:1",idRight:"16:2",loc:e.shiftLoc},{idLeft:"17:1",idRight:"17:2",loc:e.controlLoc},{idLeft:"18:1",idRight:"18:2",loc:e.optionLoc},{idLeft:"91:1",idRight:"93:0",loc:e.commandLoc}];for(let e of i)for(o=r.length-1;o>=0;o--){var n=r[o];let t=n.indexOf(e.idLeft);if(t<0&&(t=n.indexOf(e.idRight)),t<0)continue;if(1==e.loc){n[t]=e.idLeft;continue}if(2==e.loc){n[t]=e.idRight;continue}n[t]=e.idLeft;let i=n.slice();i[t]=e.idRight,r.push(i)}for(let t of r){let r=t.sort().join(":");this._map[r]=e.action}}}reset(){this._map={}}match(e){let t=e.sort().join(":");return this._map[t]}}const S=l.CANCEL,k=l.DEFAULT,T=l.PASS,x=l.STRIP;function P(e){let t="",r=e.length;for(let o=0;o<r;o+=2)t+=String.fromCharCode(parseInt(e.substr(o,2),16));return t}function E(e){return"escape"!==e?null:{keyCode:27,code:"[Escape]",key:"[Escape]"}}const R=new Set(["20:0","16:1","16:2","17:1","17:2","18:1","18:2","91:1","91:2","93:0"]),M="16:1",N="17:1",F="18:1",I="91:1",D="20:0";function V(e){let t=229===e.keyCode?0:e.keyCode,r=e.location;return t?`${t}:${r}`:`${t}:${r}:${(e.key||"").toLowerCase()}`}function O(e){e&&(e.preventDefault(),e.stopPropagation())}class B{constructor(e,r){this._keyMap=new m(this),this._bindings=new v,this._lang="en",this._langWithDeletes=!1,this._isHKB=!1,this.hasSelection=!1,this._lastKeyDownEvent=null,this._capsLockRemapped=!1,this._shiftRemapped=!1,this._removeAccents=!1,this._metaSendsEscape=!0,this._altSendsWhat="escape",this._ignoreAccents={AltLeft:!0,AltRight:!0},this._modsMap={ShiftLeft:"Shift",ShiftRight:"Shift",AltLeft:"Escape",AltRight:"Escape",MetaLeft:"Meta",MetaRight:"Meta",ControlLeft:"Control",ControlRight:"Control",CapsLock:""},this._downMap={},this._upMap={},this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},this._up=new Set,this._down=new Set,this.caret=document.createElement("div"),this._updateUIKitModsIfNeeded=e=>{let t=e.code;if(this._capsLockRemapped){let r;c("mods",{mods:r="keyup"==e.type&&"CapsLock"==t?0:function(e,t=!0){let r=0;return e.shiftKey&&(r|=b),e.ctrlKey&&(r|=_),e.altKey&&(r|=w),e.metaKey&&(r|=C),t&&(r|=y),r}(e)})}"AltLeft"!=t&&"AltRight"!=t||this._ignoreAccents[t]&&("keydown"==e.type?c("guard-ime-on",{}):c("guard-ime-off",{}),O(e))},this._downKeysIds=()=>{let e=Array.from(this._down);return this._mods.Meta.has("tb-meta")&&-1==e.indexOf(I)&&e.push(I),this._mods.Control.has("tb-ctrl")&&-1==e.indexOf(N)&&e.push(N),this._mods.Alt.has("tb-alt")&&-1==e.indexOf(F)&&e.push(F),this._mods.Shift.has("tb-shift")&&-1==e.indexOf(M)&&e.push(M),e},this._onKeyDown=e=>{if(e.isComposing)return void(this._lastKeyDownEvent=null);let t=e;if(229===e.keyCode){if(!this._lastKeyDownEvent)return;t=this._lastKeyDownEvent}else this._lastKeyDownEvent=e;let r=V(t);this._down.add(r);let o=this._bindings.match(this._downKeysIds());if(R.has(r)||this._down.delete(r),o)return this._execBinding(o,e),void O(e);let i=this._downMap[r],n=this._mod(this._modsMap[t.code]),s=!1;i&&(n&&(s=!this._mods[n].has(r)),s||(this._handleKeyDownKey(i,e),s=!0)),n&&this._mods[n].add(r),this._upMap[r]&&this._up.add(r),this._updateUIKitModsIfNeeded(t),s||this._handleKeyDown(t.keyCode,e)},this._onBeforeInput=e=>{"dictation"!==this._lang?("insertText"===e.inputType&&(this._output(e.data),this._langWithDeletes&&e.data),"deleteContentBackward"===e.inputType&&this._output(p),O(e)):c("voice",{data:e.data||""})},this._onInput=e=>O(e),this._onKeyUp=e=>{this._lastKeyDownEvent=null;let t=V(e);this._down.delete(t);let r=this._mod(this._modsMap[e.code]);r&&this._mods[r].delete(t),this._updateUIKitModsIfNeeded(e);let o=this._upMap[t];o&&this._up.has(t)&&this._handleKeyDownKey(o,null),O(e)},this._handleKeyDown=(e,t)=>{let r={keyCode:e,key:"",code:"Unidentified"};t&&(r.code=t.code,r.key=t.key),this._handleKeyDownKey(r,t)},this._handleKeyDownKey=(e,t)=>{let r=this._keyMap,o=this._mods.Alt.size>0,i=this._mods.Control.size>0,n=this._mods.Meta.size>0,s=this._mods.Shift.size>0,a=e.code,l=e.key,c=function(e,t,r,o){if(!o)return e;if(o.ctrlKey){let r=o.key.toLowerCase(),i=o.keyCode;if(8===i&&"h"===r||9===i&&"i"===r||13===i&&"c"===r||13===i&&"m"===r||27===i&&"["===r)return e.keyCode=t.keyCode(r)||e.keyCode,e;let n=o.code;if(8===i&&"KeyH"===n||9===i&&"KeyI"===n||13===i&&"KeyC"===n||13===i&&"KeyM"===n||27===i&&"BracketLeft"===n)return e.keyCode=t.keyCode(n)||e.keyCode,e}if(!r){let t=o.key.toLowerCase();return(/^[~!@#$%^&*()_+{}|:"<>?]$/.test(t)||/^\w$/.test(t)&&t!==o.key)&&(e.shift=!0),e}return e}({key:l,code:a,keyCode:e.keyCode,alt:o,ctrl:i,meta:n,shift:s},this._keyMap,this._isHKB,t),u=r.getKeyDef(c.keyCode);var p=null;function f(e){p=e;var t=u[e];return"function"==typeof t&&(t=t.call(r,c,u)),t===k&&"normal"!==e&&(t=f("normal")),t}let g;if(g=f(i?"ctrl":o?"alt":n?"meta":"normal"),!this._langWithDeletes||"[Backspace]"!==u.keyCap){if(!this.hasSelection&&(g===T||g===k&&!(i||o||n))){if(g===T&&!e.src)return;if(/^\[\w+\]$/.test(u.keyCap)){if(!e.src)return void(this._removeAccents=!1)}else if(this._langWithDeletes)return;if(!this._isHKB)return this._output(l),void O(t);let r=this._removeAccents?function(e){let t=e.normalize("NFD").replace(/[\u0300-\u036f]/g,""),r=t.replace(/^[\u02c6\u00a8\u00b4\u02dc\u0060]/,"");return r&&(t=r),t}(l):l;return this._removeAccents=!1,this._capsLockRemapped||this._shiftRemapped?this._output(s?r.toUpperCase():r.toLowerCase()):this._output(r),void O(t)}if(this._removeAccents=!1,g===x&&(o=i=!1,"function"==typeof(g=u.normal)&&(g=g.call(r,c,u)),g===k&&2===u.keyCap.length&&(g=u.keyCap.substr(s?1:0,1))),O(t),g!==S&&!this.hasSelection)if(g===k||"string"==typeof g){if("ctrl"===p?i=!1:"alt"===p?o=!1:"meta"===p&&(n=!1),s=c.shift,(o||i||s||n)&&"string"==typeof g&&g.substr(0,2)===d){let e=1;s&&(e+=1),o&&(e+=2),i&&(e+=4),n&&(e+=8);let t=";"+e;g=3==g.length?d+"1"+t+g.substr(2,1):g.substr(0,g.length-1)+t+g.substr(g.length-1)}else{if(g===k&&(g=u.keyCap.substr(s?1:0,1),i)){let e=u.keyCap.substr(0,1).charCodeAt(0);e>=64&&e<=95&&(g=String.fromCharCode(e-64))}let e=g.toString();if(o&&"8-bit"==this._altSendsWhat&&1==e.length){let t=e.charCodeAt(0)+128;g=String.fromCharCode(t)}(o&&"escape"==this._altSendsWhat||n&&this._metaSendsEscape)&&(g=h+e)}"string"==typeof g?this._output(g):console.warn("action is not a string",g)}else console.log("Invalid action: "+JSON.stringify(g))}},this._onIME=e=>{let r=e.type,o=e.data||"";c("ime",{type:r,data:o});var i=this._t.scrollPort_;let n=this.caret;n.style.backgroundColor=lib.colors.setAlpha(t.getCursorColor(),1),n.style.color=i.getBackgroundColor();const s=this._t.screenSize.width,a=this._t.screenSize.height,l=this._t.screen_.cursorPosition.column,u=this._t.screen_.cursorPosition.row;var h=lib.wc.strWidth(o);n.style.bottom="auto",n.style.top="auto",h>=s?(n.style.left="0px",n.style.right="0px",n.style.top=u<.8*a?`calc(var(--hterm-charsize-height) * ${u+1})`:`calc(var(--hterm-charsize-height) * ${u-Math.floor(h/(s+1))-1})`):l+h<=s?(n.style.left=`calc(var(--hterm-charsize-width) * ${l})`,n.style.top=`calc(var(--hterm-charsize-height) * ${u})`,n.style.right="auto"):0==u?(n.style.top=`calc(var(--hterm-charsize-height) * ${u+1})`,n.style.left="auto",n.style.right="0px"):(n.style.top=`calc(var(--hterm-charsize-height) * ${u-1}`,n.style.left="auto",n.style.right="0px"),"compositionend"==r&&this._output(o)},this._output=e=>{this._up.clear(),this.caret.innerHTML="&#8288;",e&&c("out",{data:e})},this._stateReset=e=>{this._down.clear(),this._up.clear(),this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},this.caret.innerHTML="&#8288;",this.hasSelection=e},this._configKey=e=>{let t=e.code,r=E(e.down);r&&(this._downMap[t.id]=r);let o=this._mod(e.mod);o&&(this._modsMap[t.code]=e.mod);let i=E(e.up);i&&(this._upMap[t.id]=i),"AltRight"!==t.code&&"AltLeft"!==t.code||(this._ignoreAccents[t.code]=e.ignoreAccents&&(!!o||!!i||!!r))},this._config=e=>{this._reset(),this._bindings.reset(),this._configKey(e.capsLock),this._configKey(e.command.left),this._configKey(e.command.right),this._configKey(e.control.left),this._configKey(e.control.right),this._configKey(e.option.left),this._configKey(e.option.right),this._configKey(e.shift.left),this._configKey(e.shift.right),this._bindings.expandFn(e.fn),this._bindings.expandCursor(e.cursor);for(let t of e.shortcuts){let e={keys:this._keysFromShortcut(t.input,t.modifiers),action:t.action,shiftLoc:0,controlLoc:0,optionLoc:0,commandLoc:0};this._bindings.expandBinding(e)}this._updateRemappingFlags()},this._onToolbarMods=e=>{let t=A(e);t.alt?this._mods.Alt.add("tb-alt"):this._mods.Alt.delete("tb-alt"),t.ctrl?this._mods.Control.add("tb-ctrl"):this._mods.Control.delete("tb-ctrl"),t.shift?this._mods.Shift.add("tb-shift"):this._mods.Shift.delete("tb-shift"),t.meta?this._mods.Meta.add("tb-meta"):this._mods.Meta.delete("tb-meta")},this._execPress=(e,t,r)=>{let o=e.split(/:/g),i=this._mods;this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set};let n=parseInt(o[0],10),s=A(n);s.shift&&this._mods.Shift.add("tb-shift"),s.ctrl&&this._mods.Control.add("tb-ctrl"),s.alt&&this._mods.Alt.add("tb-alt"),s.meta&&this._mods.Meta.add("tb-meta");let a=parseInt(o[1],10),l=""==o[3]?":":o[3]||this._keyMap.key(a)||"",c={keyCode:a,key:l,code:"",src:"toolbar"};if(!r&&n>0){let e=c.keyCode+":"+o[2]+(0==a?":"+l:"");this._down.add(e);let t=this._bindings.match(this._downKeysIds());if(this._down.delete(e),t)return this._execBinding(t,null),void(this._mods=i)}this._handleKeyDownKey(c,t),this._mods=i,this._removeAccents=!0},this.onKB=(e,t)=>{switch(e){case"mods-down":this._handleCapsLockDown(!0);break;case"mods-up":this._handleCapsLockDown(!1);break;case"guard-up":this._handleGuard(!0,t);break;case"guard-down":this._handleGuard(!1,t);break;case"selection":this.hasSelection=t;break;case"lang":this._handleLang(t);break;case"toolbar-mods":this._onToolbarMods(t);break;case"toolbar-press":this._execPress(t,null,!1);break;case"press":this._execPress(t,null,!0);break;case"state-reset":this._stateReset(t);break;case"focus":this.focus(t);break;case"hex":this._output(P(t)),this._removeAccents=!0;break;case"config":this._config(t)}},this._t=e,this.element=r||document.createElement("div");let o=this.element;this.caret.innerHTML="&#8288;";var i=document.getElementById("hterm:row-nodes");null==i||i.append(this.caret),this.caret.style.position="absolute",this.caret.style.zIndex="1000",o.setAttribute("autocomplete","off"),o.setAttribute("spellcheck","false"),o.setAttribute("autocorrect","off"),o.setAttribute("autocapitalize","none"),o.setAttribute("contenteditable","plaintext-only"),o.addEventListener("keydown",this._onKeyDown),o.addEventListener("keyup",this._onKeyUp),window.addEventListener("keydown",this._onKeyDown),window.addEventListener("keyup",this._onKeyUp),o.addEventListener("compositionstart",this._onIME),o.addEventListener("compositionupdate",this._onIME),o.addEventListener("compositionend",this._onIME),o.addEventListener("beforeinput",this._onBeforeInput),o.addEventListener("input",this._onInput),this._updateRemappingFlags()}_updateRemappingFlags(){this._capsLockRemapped=null!=this._modsMap.CapsLock||null!=this._downMap[D]||null!=this._upMap[D],this._shiftRemapped=null!=this._modsMap.ShiftLeft&&"Shift"!==this._modsMap.ShiftLeft||null!=this._modsMap.ShiftRight&&"Shift"!==this._modsMap.ShiftRight}_mod(e){switch(e){case"Escape":return this._altSendsWhat="escape","Alt";case"8-bit":return this._altSendsWhat="8-bit","Alt";case"Shift":return"Shift";case"Control":return"Control";case"Meta":return this._metaSendsEscape=!1,"Meta";case"Meta-Escape":return this._metaSendsEscape=!0,"Meta";default:return null}}focus(e){var t;e?(this.element.focus(),null===(t=window.getSelection())||void 0===t||t.collapse(this.caret)):this.element.blur()}_handleCapsLockDown(e){let t=this._modsMap.CapsLock;if(e){this._down.add(D);let e=this._downMap[D];return!e||t&&this._mods[t].has(D)||this._handleKeyDownKey(e,null),t&&this._mods[t].add(D),void(this._upMap[D]&&this._up.add(D))}this._down.delete(D),t&&this._mods[t].delete(D);let r=this._upMap[D];r&&this._up.has(D)&&this._handleKeyDownKey(r,null)}_handleLang(e){let t=e.split(":");this._lang=t[0],this._isHKB="hw"===t[1],this._langWithDeletes="ko-KR"===this._lang,this._stateReset(this.hasSelection),"dictation"!==this._lang&&c("voice",{data:""})}_handleGuard(e,t){let r=this._keyMap.keyCode(t),o=`${r}:0`;if(e)return this._down.delete(o),void(this._removeAccents=!0);this._down.add(o),this._handleKeyDown(r,null)}_reset(){this.hasSelection=!1,this._removeAccents=!1,this._modsMap={},this._downMap={},this._upMap={},this._up.clear(),this._down.clear(),this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},this._ignoreAccents={AltLeft:!0,AltRight:!0}}_keysFromShortcut(e,t){var r=[];let o=A(t);o.shift&&r.push(M),o.alt&&r.push(F),o.ctrl&&r.push(N),o.meta&&r.push(I);let i=this._keyMap.keyCode(e);return i?r.push(i+":0"):r.push("0:0-"+e),r}_execBinding(e,t){switch(e.type){case"command":c("command",{command:e.value});break;case"press":this._execPress(`${e.mods}:${e.key.id}`,t,!0);break;case"hex":this._output(P(e.value)),this._removeAccents=!0}}}if(void 0!==K)throw new Error('Global "lib" object already exists.');var K={runtimeDependencies_:{},initCallbacks_:[],rtdep:function(e){var t;try{throw new Error}catch(e){var r=e.stack.split("\n");t=r.length>=3?r[2].replace(/^\s*at\s+/,""):r[1].replace(/^\s*global code@/,"")}for(var o=0;o<arguments.length;o++){var i=arguments[o];if(i instanceof Array)K.rtdep.apply(K,i);else{var n=this.runtimeDependencies_[i];n||(n=this.runtimeDependencies_[i]=[]),n.push(t)}}},ensureRuntimeDependencies_:function(){var e=!0;for(var t in K.runtimeDependencies_)for(var r=K.runtimeDependencies_[t],o=t.split("."),i=window,n=0;n<o.length;n++){if(!(o[n]in i)){console.warn('Missing "'+t+'" is needed by',r),e=!1;break}i=i[o[n]]}if(!e)throw new Error("Failed runtime dependency check")},registerInit:function(e,t){return K.initCallbacks_.push([e,t]),t},init:function(e,t){var r=K.initCallbacks_,o=function(){if(r.length){var i=r.shift();t&&t("init: "+i[0]),i[1](K.f.alarm(o))}else e()};if("function"!=typeof e)throw new Error("Missing or invalid argument: onInit");K.ensureRuntimeDependencies_(),setTimeout(o,0)}};if(String.prototype.padStart||(String.prototype.padStart=function(e,t){return(e-=this.length)<=0?String(this):(void 0===t&&(t=" "),e>t.length&&(t=t.repeat(e/t.length+1)),t.slice(0,e)+String(this))}),String.prototype.padEnd||(String.prototype.padEnd=function(e,t){return(e-=this.length)<=0?String(this):(void 0===t&&(t=" "),e>t.length&&(t=t.repeat(e/t.length+1)),String(this)+t.slice(0,e))}),!Object.values||!Object.entries){const e=Function.bind.call(Function.call,Array.prototype.reduce),t=Function.bind.call(Function.call,Object.prototype.propertyIsEnumerable),r=Function.bind.call(Function.call,Array.prototype.concat);Object.values||(Object.values=function(o){return e(Reflect.ownKeys(o),(e,i)=>r(e,"string"==typeof i&&t(o,i)?[o[i]]:[]),[])}),Object.entries||(Object.entries=function(o){return e(Reflect.ownKeys(o),(e,i)=>r(e,"string"==typeof i&&t(o,i)?[[i,o[i]]]:[]),[])})}if("function"!=typeof Promise.prototype.finally){const e=function(e,t){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("Assertion failed: Type(O) is not Object");const r=e.constructor;if(void 0===r)return t;if(!r||"object"!=typeof r&&"function"!=typeof r)throw new TypeError("O.constructor is not an Object");const o="function"==typeof Symbol&&"symbol"==typeof Symbol.species?r[Symbol.species]:void 0;if(null==o)return t;if("function"==typeof o&&o.prototype)return o;throw new TypeError("no constructor found")},t={finally(t){const r=this;if("object"!=typeof r||null===r)throw new TypeError('"this" value is not an Object');const o=e(r,Promise);return"function"!=typeof t?Promise.prototype.then.call(r,t,t):Promise.prototype.then.call(r,e=>new o(e=>e(t())).then(()=>e),e=>new o(e=>e(t())).then(()=>{throw e}))}};Object.defineProperty(Promise.prototype,"finally",{configurable:!0,writable:!0,value:t.finally})}K.array={},K.array.arrayBigEndianToUint32=function(e){return(e[0]<<24|e[1]<<16|e[2]<<8|e[3]<<0)>>>0},K.array.uint32ToArrayBigEndian=function(e){return[e>>>24&255,e>>>16&255,e>>>8&255,e>>>0&255]},K.array.concatTyped=function(...e){let t=0;for(const r of e)t+=r.length;const r=new e[0].constructor(t);let o=0;for(const t of e)r.set(t,o),o+=t.length;return r},K.array.compare=function(e,t){if(null===e||null===t)return null===e&&null===t;if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0},K.colors={},K.colors.re_={hex16:/#([a-f0-9])([a-f0-9])([a-f0-9])/i,hex24:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/i,rgb:new RegExp("^/s*rgb/s*/(/s*(/d{1,3})/s*,/s*(/d{1,3})/s*,/s*(/d{1,3})/s*/)/s*$".replace(/\//g,"\\"),"i"),rgba:new RegExp("^/s*rgba/s*/(/s*(/d{1,3})/s*,/s*(/d{1,3})/s*,/s*(/d{1,3})/s*(?:,/s*(/d+(?:/./d+)?)/s*)/)/s*$".replace(/\//g,"\\"),"i"),rgbx:new RegExp("^/s*rgba?/s*/(/s*(/d{1,3})/s*,/s*(/d{1,3})/s*,/s*(/d{1,3})/s*(?:,/s*(/d+(?:/./d+)?)/s*)?/)/s*$".replace(/\//g,"\\"),"i"),x11rgb:/^\s*rgb:([a-f0-9]{1,4})\/([a-f0-9]{1,4})\/([a-f0-9]{1,4})\s*$/i,name:/[a-z][a-z0-9\s]+/},K.colors.rgbToX11=function(e){function t(e){return e=(257*Math.min(e,255)).toString(16),K.f.zpad(e,4)}var r=e.match(K.colors.re_.rgbx);return r?"rgb:"+t(r[1])+"/"+t(r[2])+"/"+t(r[3]):null},K.colors.x11HexToCSS=function(e){if(!e.startsWith("#"))return null;if(e=e.substr(1),-1==[3,6,9,12].indexOf(e.length))return null;if(e.match(/[^a-f0-9]/i))return null;var t=e.length/3,r=e.substr(0,t),o=e.substr(t,t),i=e.substr(t+t,t);return K.colors.arrayToRGBA([r,o,i].map((function(e){return e=parseInt(e,16),2==t?e:1==t?e<<4:e>>4*(t-2)})))},K.colors.x11ToCSS=function(e){var t=e.match(K.colors.re_.x11rgb);return t?(t.splice(0,1),K.colors.arrayToRGBA(t.map((function(e){return 1==e.length?parseInt(e+e,16):2==e.length?parseInt(e,16):(3==e.length&&(e+=e.substr(2)),Math.round(parseInt(e,16)/257))})))):e.startsWith("#")?K.colors.x11HexToCSS(e):K.colors.nameToRGB(e)},K.colors.hexToRGB=function(e){var t=K.colors.re_.hex16,r=K.colors.re_.hex24;function o(e){4==e.length&&(e=e.replace(t,(function(e,t,r,o){return"#"+t+t+r+r+o+o})));var o=e.match(r);return o?"rgb("+parseInt(o[1],16)+", "+parseInt(o[2],16)+", "+parseInt(o[3],16)+")":null}if(e instanceof Array)for(var i=0;i<e.length;i++)e[i]=o(e[i]);else e=o(e);return e},K.colors.rgbToHex=function(e){function t(e){var t=K.colors.crackRGB(e);return t?"#"+K.f.zpad((parseInt(t[0])<<16|parseInt(t[1])<<8|parseInt(t[2])<<0).toString(16),6):null}if(e instanceof Array)for(var r=0;r<e.length;r++)e[r]=t(e[r]);else e=t(e);return e},K.colors.normalizeCSS=function(e){return e.startsWith("#")?K.colors.hexToRGB(e):K.colors.re_.rgbx.test(e)?e:K.colors.nameToRGB(e)},K.colors.arrayToRGBA=function(e){var t=e.length>3?e[3]:1;return"rgba("+e[0]+", "+e[1]+", "+e[2]+", "+t+")"},K.colors.setAlpha=function(e,t){var r=K.colors.crackRGB(e);return r[3]=t,K.colors.arrayToRGBA(r)},K.colors.mix=function(e,t,r){for(var o=K.colors.crackRGB(e),i=K.colors.crackRGB(t),n=0;n<4;++n){var s=i[n]-o[n];o[n]=Math.round(parseInt(o[n])+s*r)}return K.colors.arrayToRGBA(o)},K.colors.crackRGB=function(e){var t;if(e.startsWith("rgba")){if(t=e.match(K.colors.re_.rgba))return t.shift(),t}else if(t=e.match(K.colors.re_.rgb))return t.shift(),t.push("1"),t;return console.error("Couldn't crack: "+e),null},K.colors.nameToRGB=function(e){return e in K.colors.colorNames?K.colors.colorNames[e]:(e=e.toLowerCase())in K.colors.colorNames?K.colors.colorNames[e]:(e=e.replace(/\s+/g,""))in K.colors.colorNames?K.colors.colorNames[e]:null},K.colors.stockColorPalette=K.colors.hexToRGB(["#000000","#CC0000","#4E9A06","#C4A000","#3465A4","#75507B","#06989A","#D3D7CF","#555753","#EF2929","#00BA13","#FCE94F","#729FCF","#F200CB","#00B5BD","#EEEEEC","#000000","#00005F","#000087","#0000AF","#0000D7","#0000FF","#005F00","#005F5F","#005F87","#005FAF","#005FD7","#005FFF","#008700","#00875F","#008787","#0087AF","#0087D7","#0087FF","#00AF00","#00AF5F","#00AF87","#00AFAF","#00AFD7","#00AFFF","#00D700","#00D75F","#00D787","#00D7AF","#00D7D7","#00D7FF","#00FF00","#00FF5F","#00FF87","#00FFAF","#00FFD7","#00FFFF","#5F0000","#5F005F","#5F0087","#5F00AF","#5F00D7","#5F00FF","#5F5F00","#5F5F5F","#5F5F87","#5F5FAF","#5F5FD7","#5F5FFF","#5F8700","#5F875F","#5F8787","#5F87AF","#5F87D7","#5F87FF","#5FAF00","#5FAF5F","#5FAF87","#5FAFAF","#5FAFD7","#5FAFFF","#5FD700","#5FD75F","#5FD787","#5FD7AF","#5FD7D7","#5FD7FF","#5FFF00","#5FFF5F","#5FFF87","#5FFFAF","#5FFFD7","#5FFFFF","#870000","#87005F","#870087","#8700AF","#8700D7","#8700FF","#875F00","#875F5F","#875F87","#875FAF","#875FD7","#875FFF","#878700","#87875F","#878787","#8787AF","#8787D7","#8787FF","#87AF00","#87AF5F","#87AF87","#87AFAF","#87AFD7","#87AFFF","#87D700","#87D75F","#87D787","#87D7AF","#87D7D7","#87D7FF","#87FF00","#87FF5F","#87FF87","#87FFAF","#87FFD7","#87FFFF","#AF0000","#AF005F","#AF0087","#AF00AF","#AF00D7","#AF00FF","#AF5F00","#AF5F5F","#AF5F87","#AF5FAF","#AF5FD7","#AF5FFF","#AF8700","#AF875F","#AF8787","#AF87AF","#AF87D7","#AF87FF","#AFAF00","#AFAF5F","#AFAF87","#AFAFAF","#AFAFD7","#AFAFFF","#AFD700","#AFD75F","#AFD787","#AFD7AF","#AFD7D7","#AFD7FF","#AFFF00","#AFFF5F","#AFFF87","#AFFFAF","#AFFFD7","#AFFFFF","#D70000","#D7005F","#D70087","#D700AF","#D700D7","#D700FF","#D75F00","#D75F5F","#D75F87","#D75FAF","#D75FD7","#D75FFF","#D78700","#D7875F","#D78787","#D787AF","#D787D7","#D787FF","#D7AF00","#D7AF5F","#D7AF87","#D7AFAF","#D7AFD7","#D7AFFF","#D7D700","#D7D75F","#D7D787","#D7D7AF","#D7D7D7","#D7D7FF","#D7FF00","#D7FF5F","#D7FF87","#D7FFAF","#D7FFD7","#D7FFFF","#FF0000","#FF005F","#FF0087","#FF00AF","#FF00D7","#FF00FF","#FF5F00","#FF5F5F","#FF5F87","#FF5FAF","#FF5FD7","#FF5FFF","#FF8700","#FF875F","#FF8787","#FF87AF","#FF87D7","#FF87FF","#FFAF00","#FFAF5F","#FFAF87","#FFAFAF","#FFAFD7","#FFAFFF","#FFD700","#FFD75F","#FFD787","#FFD7AF","#FFD7D7","#FFD7FF","#FFFF00","#FFFF5F","#FFFF87","#FFFFAF","#FFFFD7","#FFFFFF","#080808","#121212","#1C1C1C","#262626","#303030","#3A3A3A","#444444","#4E4E4E","#585858","#626262","#6C6C6C","#767676","#808080","#8A8A8A","#949494","#9E9E9E","#A8A8A8","#B2B2B2","#BCBCBC","#C6C6C6","#D0D0D0","#DADADA","#E4E4E4","#EEEEEE"]),K.colors.colorPalette=K.colors.stockColorPalette,K.colors.colorNames={aliceblue:"rgb(240, 248, 255)",antiquewhite:"rgb(250, 235, 215)",antiquewhite1:"rgb(255, 239, 219)",antiquewhite2:"rgb(238, 223, 204)",antiquewhite3:"rgb(205, 192, 176)",antiquewhite4:"rgb(139, 131, 120)",aquamarine:"rgb(127, 255, 212)",aquamarine1:"rgb(127, 255, 212)",aquamarine2:"rgb(118, 238, 198)",aquamarine3:"rgb(102, 205, 170)",aquamarine4:"rgb(69, 139, 116)",azure:"rgb(240, 255, 255)",azure1:"rgb(240, 255, 255)",azure2:"rgb(224, 238, 238)",azure3:"rgb(193, 205, 205)",azure4:"rgb(131, 139, 139)",beige:"rgb(245, 245, 220)",bisque:"rgb(255, 228, 196)",bisque1:"rgb(255, 228, 196)",bisque2:"rgb(238, 213, 183)",bisque3:"rgb(205, 183, 158)",bisque4:"rgb(139, 125, 107)",black:"rgb(0, 0, 0)",blanchedalmond:"rgb(255, 235, 205)",blue:"rgb(0, 0, 255)",blue1:"rgb(0, 0, 255)",blue2:"rgb(0, 0, 238)",blue3:"rgb(0, 0, 205)",blue4:"rgb(0, 0, 139)",blueviolet:"rgb(138, 43, 226)",brown:"rgb(165, 42, 42)",brown1:"rgb(255, 64, 64)",brown2:"rgb(238, 59, 59)",brown3:"rgb(205, 51, 51)",brown4:"rgb(139, 35, 35)",burlywood:"rgb(222, 184, 135)",burlywood1:"rgb(255, 211, 155)",burlywood2:"rgb(238, 197, 145)",burlywood3:"rgb(205, 170, 125)",burlywood4:"rgb(139, 115, 85)",cadetblue:"rgb(95, 158, 160)",cadetblue1:"rgb(152, 245, 255)",cadetblue2:"rgb(142, 229, 238)",cadetblue3:"rgb(122, 197, 205)",cadetblue4:"rgb(83, 134, 139)",chartreuse:"rgb(127, 255, 0)",chartreuse1:"rgb(127, 255, 0)",chartreuse2:"rgb(118, 238, 0)",chartreuse3:"rgb(102, 205, 0)",chartreuse4:"rgb(69, 139, 0)",chocolate:"rgb(210, 105, 30)",chocolate1:"rgb(255, 127, 36)",chocolate2:"rgb(238, 118, 33)",chocolate3:"rgb(205, 102, 29)",chocolate4:"rgb(139, 69, 19)",coral:"rgb(255, 127, 80)",coral1:"rgb(255, 114, 86)",coral2:"rgb(238, 106, 80)",coral3:"rgb(205, 91, 69)",coral4:"rgb(139, 62, 47)",cornflowerblue:"rgb(100, 149, 237)",cornsilk:"rgb(255, 248, 220)",cornsilk1:"rgb(255, 248, 220)",cornsilk2:"rgb(238, 232, 205)",cornsilk3:"rgb(205, 200, 177)",cornsilk4:"rgb(139, 136, 120)",cyan:"rgb(0, 255, 255)",cyan1:"rgb(0, 255, 255)",cyan2:"rgb(0, 238, 238)",cyan3:"rgb(0, 205, 205)",cyan4:"rgb(0, 139, 139)",darkblue:"rgb(0, 0, 139)",darkcyan:"rgb(0, 139, 139)",darkgoldenrod:"rgb(184, 134, 11)",darkgoldenrod1:"rgb(255, 185, 15)",darkgoldenrod2:"rgb(238, 173, 14)",darkgoldenrod3:"rgb(205, 149, 12)",darkgoldenrod4:"rgb(139, 101, 8)",darkgray:"rgb(169, 169, 169)",darkgreen:"rgb(0, 100, 0)",darkgrey:"rgb(169, 169, 169)",darkkhaki:"rgb(189, 183, 107)",darkmagenta:"rgb(139, 0, 139)",darkolivegreen:"rgb(85, 107, 47)",darkolivegreen1:"rgb(202, 255, 112)",darkolivegreen2:"rgb(188, 238, 104)",darkolivegreen3:"rgb(162, 205, 90)",darkolivegreen4:"rgb(110, 139, 61)",darkorange:"rgb(255, 140, 0)",darkorange1:"rgb(255, 127, 0)",darkorange2:"rgb(238, 118, 0)",darkorange3:"rgb(205, 102, 0)",darkorange4:"rgb(139, 69, 0)",darkorchid:"rgb(153, 50, 204)",darkorchid1:"rgb(191, 62, 255)",darkorchid2:"rgb(178, 58, 238)",darkorchid3:"rgb(154, 50, 205)",darkorchid4:"rgb(104, 34, 139)",darkred:"rgb(139, 0, 0)",darksalmon:"rgb(233, 150, 122)",darkseagreen:"rgb(143, 188, 143)",darkseagreen1:"rgb(193, 255, 193)",darkseagreen2:"rgb(180, 238, 180)",darkseagreen3:"rgb(155, 205, 155)",darkseagreen4:"rgb(105, 139, 105)",darkslateblue:"rgb(72, 61, 139)",darkslategray:"rgb(47, 79, 79)",darkslategray1:"rgb(151, 255, 255)",darkslategray2:"rgb(141, 238, 238)",darkslategray3:"rgb(121, 205, 205)",darkslategray4:"rgb(82, 139, 139)",darkslategrey:"rgb(47, 79, 79)",darkturquoise:"rgb(0, 206, 209)",darkviolet:"rgb(148, 0, 211)",debianred:"rgb(215, 7, 81)",deeppink:"rgb(255, 20, 147)",deeppink1:"rgb(255, 20, 147)",deeppink2:"rgb(238, 18, 137)",deeppink3:"rgb(205, 16, 118)",deeppink4:"rgb(139, 10, 80)",deepskyblue:"rgb(0, 191, 255)",deepskyblue1:"rgb(0, 191, 255)",deepskyblue2:"rgb(0, 178, 238)",deepskyblue3:"rgb(0, 154, 205)",deepskyblue4:"rgb(0, 104, 139)",dimgray:"rgb(105, 105, 105)",dimgrey:"rgb(105, 105, 105)",dodgerblue:"rgb(30, 144, 255)",dodgerblue1:"rgb(30, 144, 255)",dodgerblue2:"rgb(28, 134, 238)",dodgerblue3:"rgb(24, 116, 205)",dodgerblue4:"rgb(16, 78, 139)",firebrick:"rgb(178, 34, 34)",firebrick1:"rgb(255, 48, 48)",firebrick2:"rgb(238, 44, 44)",firebrick3:"rgb(205, 38, 38)",firebrick4:"rgb(139, 26, 26)",floralwhite:"rgb(255, 250, 240)",forestgreen:"rgb(34, 139, 34)",gainsboro:"rgb(220, 220, 220)",ghostwhite:"rgb(248, 248, 255)",gold:"rgb(255, 215, 0)",gold1:"rgb(255, 215, 0)",gold2:"rgb(238, 201, 0)",gold3:"rgb(205, 173, 0)",gold4:"rgb(139, 117, 0)",goldenrod:"rgb(218, 165, 32)",goldenrod1:"rgb(255, 193, 37)",goldenrod2:"rgb(238, 180, 34)",goldenrod3:"rgb(205, 155, 29)",goldenrod4:"rgb(139, 105, 20)",gray:"rgb(190, 190, 190)",gray0:"rgb(0, 0, 0)",gray1:"rgb(3, 3, 3)",gray10:"rgb(26, 26, 26)",gray100:"rgb(255, 255, 255)",gray11:"rgb(28, 28, 28)",gray12:"rgb(31, 31, 31)",gray13:"rgb(33, 33, 33)",gray14:"rgb(36, 36, 36)",gray15:"rgb(38, 38, 38)",gray16:"rgb(41, 41, 41)",gray17:"rgb(43, 43, 43)",gray18:"rgb(46, 46, 46)",gray19:"rgb(48, 48, 48)",gray2:"rgb(5, 5, 5)",gray20:"rgb(51, 51, 51)",gray21:"rgb(54, 54, 54)",gray22:"rgb(56, 56, 56)",gray23:"rgb(59, 59, 59)",gray24:"rgb(61, 61, 61)",gray25:"rgb(64, 64, 64)",gray26:"rgb(66, 66, 66)",gray27:"rgb(69, 69, 69)",gray28:"rgb(71, 71, 71)",gray29:"rgb(74, 74, 74)",gray3:"rgb(8, 8, 8)",gray30:"rgb(77, 77, 77)",gray31:"rgb(79, 79, 79)",gray32:"rgb(82, 82, 82)",gray33:"rgb(84, 84, 84)",gray34:"rgb(87, 87, 87)",gray35:"rgb(89, 89, 89)",gray36:"rgb(92, 92, 92)",gray37:"rgb(94, 94, 94)",gray38:"rgb(97, 97, 97)",gray39:"rgb(99, 99, 99)",gray4:"rgb(10, 10, 10)",gray40:"rgb(102, 102, 102)",gray41:"rgb(105, 105, 105)",gray42:"rgb(107, 107, 107)",gray43:"rgb(110, 110, 110)",gray44:"rgb(112, 112, 112)",gray45:"rgb(115, 115, 115)",gray46:"rgb(117, 117, 117)",gray47:"rgb(120, 120, 120)",gray48:"rgb(122, 122, 122)",gray49:"rgb(125, 125, 125)",gray5:"rgb(13, 13, 13)",gray50:"rgb(127, 127, 127)",gray51:"rgb(130, 130, 130)",gray52:"rgb(133, 133, 133)",gray53:"rgb(135, 135, 135)",gray54:"rgb(138, 138, 138)",gray55:"rgb(140, 140, 140)",gray56:"rgb(143, 143, 143)",gray57:"rgb(145, 145, 145)",gray58:"rgb(148, 148, 148)",gray59:"rgb(150, 150, 150)",gray6:"rgb(15, 15, 15)",gray60:"rgb(153, 153, 153)",gray61:"rgb(156, 156, 156)",gray62:"rgb(158, 158, 158)",gray63:"rgb(161, 161, 161)",gray64:"rgb(163, 163, 163)",gray65:"rgb(166, 166, 166)",gray66:"rgb(168, 168, 168)",gray67:"rgb(171, 171, 171)",gray68:"rgb(173, 173, 173)",gray69:"rgb(176, 176, 176)",gray7:"rgb(18, 18, 18)",gray70:"rgb(179, 179, 179)",gray71:"rgb(181, 181, 181)",gray72:"rgb(184, 184, 184)",gray73:"rgb(186, 186, 186)",gray74:"rgb(189, 189, 189)",gray75:"rgb(191, 191, 191)",gray76:"rgb(194, 194, 194)",gray77:"rgb(196, 196, 196)",gray78:"rgb(199, 199, 199)",gray79:"rgb(201, 201, 201)",gray8:"rgb(20, 20, 20)",gray80:"rgb(204, 204, 204)",gray81:"rgb(207, 207, 207)",gray82:"rgb(209, 209, 209)",gray83:"rgb(212, 212, 212)",gray84:"rgb(214, 214, 214)",gray85:"rgb(217, 217, 217)",gray86:"rgb(219, 219, 219)",gray87:"rgb(222, 222, 222)",gray88:"rgb(224, 224, 224)",gray89:"rgb(227, 227, 227)",gray9:"rgb(23, 23, 23)",gray90:"rgb(229, 229, 229)",gray91:"rgb(232, 232, 232)",gray92:"rgb(235, 235, 235)",gray93:"rgb(237, 237, 237)",gray94:"rgb(240, 240, 240)",gray95:"rgb(242, 242, 242)",gray96:"rgb(245, 245, 245)",gray97:"rgb(247, 247, 247)",gray98:"rgb(250, 250, 250)",gray99:"rgb(252, 252, 252)",green:"rgb(0, 255, 0)",green1:"rgb(0, 255, 0)",green2:"rgb(0, 238, 0)",green3:"rgb(0, 205, 0)",green4:"rgb(0, 139, 0)",greenyellow:"rgb(173, 255, 47)",grey:"rgb(190, 190, 190)",grey0:"rgb(0, 0, 0)",grey1:"rgb(3, 3, 3)",grey10:"rgb(26, 26, 26)",grey100:"rgb(255, 255, 255)",grey11:"rgb(28, 28, 28)",grey12:"rgb(31, 31, 31)",grey13:"rgb(33, 33, 33)",grey14:"rgb(36, 36, 36)",grey15:"rgb(38, 38, 38)",grey16:"rgb(41, 41, 41)",grey17:"rgb(43, 43, 43)",grey18:"rgb(46, 46, 46)",grey19:"rgb(48, 48, 48)",grey2:"rgb(5, 5, 5)",grey20:"rgb(51, 51, 51)",grey21:"rgb(54, 54, 54)",grey22:"rgb(56, 56, 56)",grey23:"rgb(59, 59, 59)",grey24:"rgb(61, 61, 61)",grey25:"rgb(64, 64, 64)",grey26:"rgb(66, 66, 66)",grey27:"rgb(69, 69, 69)",grey28:"rgb(71, 71, 71)",grey29:"rgb(74, 74, 74)",grey3:"rgb(8, 8, 8)",grey30:"rgb(77, 77, 77)",grey31:"rgb(79, 79, 79)",grey32:"rgb(82, 82, 82)",grey33:"rgb(84, 84, 84)",grey34:"rgb(87, 87, 87)",grey35:"rgb(89, 89, 89)",grey36:"rgb(92, 92, 92)",grey37:"rgb(94, 94, 94)",grey38:"rgb(97, 97, 97)",grey39:"rgb(99, 99, 99)",grey4:"rgb(10, 10, 10)",grey40:"rgb(102, 102, 102)",grey41:"rgb(105, 105, 105)",grey42:"rgb(107, 107, 107)",grey43:"rgb(110, 110, 110)",grey44:"rgb(112, 112, 112)",grey45:"rgb(115, 115, 115)",grey46:"rgb(117, 117, 117)",grey47:"rgb(120, 120, 120)",grey48:"rgb(122, 122, 122)",grey49:"rgb(125, 125, 125)",grey5:"rgb(13, 13, 13)",grey50:"rgb(127, 127, 127)",grey51:"rgb(130, 130, 130)",grey52:"rgb(133, 133, 133)",grey53:"rgb(135, 135, 135)",grey54:"rgb(138, 138, 138)",grey55:"rgb(140, 140, 140)",grey56:"rgb(143, 143, 143)",grey57:"rgb(145, 145, 145)",grey58:"rgb(148, 148, 148)",grey59:"rgb(150, 150, 150)",grey6:"rgb(15, 15, 15)",grey60:"rgb(153, 153, 153)",grey61:"rgb(156, 156, 156)",grey62:"rgb(158, 158, 158)",grey63:"rgb(161, 161, 161)",grey64:"rgb(163, 163, 163)",grey65:"rgb(166, 166, 166)",grey66:"rgb(168, 168, 168)",grey67:"rgb(171, 171, 171)",grey68:"rgb(173, 173, 173)",grey69:"rgb(176, 176, 176)",grey7:"rgb(18, 18, 18)",grey70:"rgb(179, 179, 179)",grey71:"rgb(181, 181, 181)",grey72:"rgb(184, 184, 184)",grey73:"rgb(186, 186, 186)",grey74:"rgb(189, 189, 189)",grey75:"rgb(191, 191, 191)",grey76:"rgb(194, 194, 194)",grey77:"rgb(196, 196, 196)",grey78:"rgb(199, 199, 199)",grey79:"rgb(201, 201, 201)",grey8:"rgb(20, 20, 20)",grey80:"rgb(204, 204, 204)",grey81:"rgb(207, 207, 207)",grey82:"rgb(209, 209, 209)",grey83:"rgb(212, 212, 212)",grey84:"rgb(214, 214, 214)",grey85:"rgb(217, 217, 217)",grey86:"rgb(219, 219, 219)",grey87:"rgb(222, 222, 222)",grey88:"rgb(224, 224, 224)",grey89:"rgb(227, 227, 227)",grey9:"rgb(23, 23, 23)",grey90:"rgb(229, 229, 229)",grey91:"rgb(232, 232, 232)",grey92:"rgb(235, 235, 235)",grey93:"rgb(237, 237, 237)",grey94:"rgb(240, 240, 240)",grey95:"rgb(242, 242, 242)",grey96:"rgb(245, 245, 245)",grey97:"rgb(247, 247, 247)",grey98:"rgb(250, 250, 250)",grey99:"rgb(252, 252, 252)",honeydew:"rgb(240, 255, 240)",honeydew1:"rgb(240, 255, 240)",honeydew2:"rgb(224, 238, 224)",honeydew3:"rgb(193, 205, 193)",honeydew4:"rgb(131, 139, 131)",hotpink:"rgb(255, 105, 180)",hotpink1:"rgb(255, 110, 180)",hotpink2:"rgb(238, 106, 167)",hotpink3:"rgb(205, 96, 144)",hotpink4:"rgb(139, 58, 98)",indianred:"rgb(205, 92, 92)",indianred1:"rgb(255, 106, 106)",indianred2:"rgb(238, 99, 99)",indianred3:"rgb(205, 85, 85)",indianred4:"rgb(139, 58, 58)",ivory:"rgb(255, 255, 240)",ivory1:"rgb(255, 255, 240)",ivory2:"rgb(238, 238, 224)",ivory3:"rgb(205, 205, 193)",ivory4:"rgb(139, 139, 131)",khaki:"rgb(240, 230, 140)",khaki1:"rgb(255, 246, 143)",khaki2:"rgb(238, 230, 133)",khaki3:"rgb(205, 198, 115)",khaki4:"rgb(139, 134, 78)",lavender:"rgb(230, 230, 250)",lavenderblush:"rgb(255, 240, 245)",lavenderblush1:"rgb(255, 240, 245)",lavenderblush2:"rgb(238, 224, 229)",lavenderblush3:"rgb(205, 193, 197)",lavenderblush4:"rgb(139, 131, 134)",lawngreen:"rgb(124, 252, 0)",lemonchiffon:"rgb(255, 250, 205)",lemonchiffon1:"rgb(255, 250, 205)",lemonchiffon2:"rgb(238, 233, 191)",lemonchiffon3:"rgb(205, 201, 165)",lemonchiffon4:"rgb(139, 137, 112)",lightblue:"rgb(173, 216, 230)",lightblue1:"rgb(191, 239, 255)",lightblue2:"rgb(178, 223, 238)",lightblue3:"rgb(154, 192, 205)",lightblue4:"rgb(104, 131, 139)",lightcoral:"rgb(240, 128, 128)",lightcyan:"rgb(224, 255, 255)",lightcyan1:"rgb(224, 255, 255)",lightcyan2:"rgb(209, 238, 238)",lightcyan3:"rgb(180, 205, 205)",lightcyan4:"rgb(122, 139, 139)",lightgoldenrod:"rgb(238, 221, 130)",lightgoldenrod1:"rgb(255, 236, 139)",lightgoldenrod2:"rgb(238, 220, 130)",lightgoldenrod3:"rgb(205, 190, 112)",lightgoldenrod4:"rgb(139, 129, 76)",lightgoldenrodyellow:"rgb(250, 250, 210)",lightgray:"rgb(211, 211, 211)",lightgreen:"rgb(144, 238, 144)",lightgrey:"rgb(211, 211, 211)",lightpink:"rgb(255, 182, 193)",lightpink1:"rgb(255, 174, 185)",lightpink2:"rgb(238, 162, 173)",lightpink3:"rgb(205, 140, 149)",lightpink4:"rgb(139, 95, 101)",lightsalmon:"rgb(255, 160, 122)",lightsalmon1:"rgb(255, 160, 122)",lightsalmon2:"rgb(238, 149, 114)",lightsalmon3:"rgb(205, 129, 98)",lightsalmon4:"rgb(139, 87, 66)",lightseagreen:"rgb(32, 178, 170)",lightskyblue:"rgb(135, 206, 250)",lightskyblue1:"rgb(176, 226, 255)",lightskyblue2:"rgb(164, 211, 238)",lightskyblue3:"rgb(141, 182, 205)",lightskyblue4:"rgb(96, 123, 139)",lightslateblue:"rgb(132, 112, 255)",lightslategray:"rgb(119, 136, 153)",lightslategrey:"rgb(119, 136, 153)",lightsteelblue:"rgb(176, 196, 222)",lightsteelblue1:"rgb(202, 225, 255)",lightsteelblue2:"rgb(188, 210, 238)",lightsteelblue3:"rgb(162, 181, 205)",lightsteelblue4:"rgb(110, 123, 139)",lightyellow:"rgb(255, 255, 224)",lightyellow1:"rgb(255, 255, 224)",lightyellow2:"rgb(238, 238, 209)",lightyellow3:"rgb(205, 205, 180)",lightyellow4:"rgb(139, 139, 122)",limegreen:"rgb(50, 205, 50)",linen:"rgb(250, 240, 230)",magenta:"rgb(255, 0, 255)",magenta1:"rgb(255, 0, 255)",magenta2:"rgb(238, 0, 238)",magenta3:"rgb(205, 0, 205)",magenta4:"rgb(139, 0, 139)",maroon:"rgb(176, 48, 96)",maroon1:"rgb(255, 52, 179)",maroon2:"rgb(238, 48, 167)",maroon3:"rgb(205, 41, 144)",maroon4:"rgb(139, 28, 98)",mediumaquamarine:"rgb(102, 205, 170)",mediumblue:"rgb(0, 0, 205)",mediumorchid:"rgb(186, 85, 211)",mediumorchid1:"rgb(224, 102, 255)",mediumorchid2:"rgb(209, 95, 238)",mediumorchid3:"rgb(180, 82, 205)",mediumorchid4:"rgb(122, 55, 139)",mediumpurple:"rgb(147, 112, 219)",mediumpurple1:"rgb(171, 130, 255)",mediumpurple2:"rgb(159, 121, 238)",mediumpurple3:"rgb(137, 104, 205)",mediumpurple4:"rgb(93, 71, 139)",mediumseagreen:"rgb(60, 179, 113)",mediumslateblue:"rgb(123, 104, 238)",mediumspringgreen:"rgb(0, 250, 154)",mediumturquoise:"rgb(72, 209, 204)",mediumvioletred:"rgb(199, 21, 133)",midnightblue:"rgb(25, 25, 112)",mintcream:"rgb(245, 255, 250)",mistyrose:"rgb(255, 228, 225)",mistyrose1:"rgb(255, 228, 225)",mistyrose2:"rgb(238, 213, 210)",mistyrose3:"rgb(205, 183, 181)",mistyrose4:"rgb(139, 125, 123)",moccasin:"rgb(255, 228, 181)",navajowhite:"rgb(255, 222, 173)",navajowhite1:"rgb(255, 222, 173)",navajowhite2:"rgb(238, 207, 161)",navajowhite3:"rgb(205, 179, 139)",navajowhite4:"rgb(139, 121, 94)",navy:"rgb(0, 0, 128)",navyblue:"rgb(0, 0, 128)",oldlace:"rgb(253, 245, 230)",olivedrab:"rgb(107, 142, 35)",olivedrab1:"rgb(192, 255, 62)",olivedrab2:"rgb(179, 238, 58)",olivedrab3:"rgb(154, 205, 50)",olivedrab4:"rgb(105, 139, 34)",orange:"rgb(255, 165, 0)",orange1:"rgb(255, 165, 0)",orange2:"rgb(238, 154, 0)",orange3:"rgb(205, 133, 0)",orange4:"rgb(139, 90, 0)",orangered:"rgb(255, 69, 0)",orangered1:"rgb(255, 69, 0)",orangered2:"rgb(238, 64, 0)",orangered3:"rgb(205, 55, 0)",orangered4:"rgb(139, 37, 0)",orchid:"rgb(218, 112, 214)",orchid1:"rgb(255, 131, 250)",orchid2:"rgb(238, 122, 233)",orchid3:"rgb(205, 105, 201)",orchid4:"rgb(139, 71, 137)",palegoldenrod:"rgb(238, 232, 170)",palegreen:"rgb(152, 251, 152)",palegreen1:"rgb(154, 255, 154)",palegreen2:"rgb(144, 238, 144)",palegreen3:"rgb(124, 205, 124)",palegreen4:"rgb(84, 139, 84)",paleturquoise:"rgb(175, 238, 238)",paleturquoise1:"rgb(187, 255, 255)",paleturquoise2:"rgb(174, 238, 238)",paleturquoise3:"rgb(150, 205, 205)",paleturquoise4:"rgb(102, 139, 139)",palevioletred:"rgb(219, 112, 147)",palevioletred1:"rgb(255, 130, 171)",palevioletred2:"rgb(238, 121, 159)",palevioletred3:"rgb(205, 104, 137)",palevioletred4:"rgb(139, 71, 93)",papayawhip:"rgb(255, 239, 213)",peachpuff:"rgb(255, 218, 185)",peachpuff1:"rgb(255, 218, 185)",peachpuff2:"rgb(238, 203, 173)",peachpuff3:"rgb(205, 175, 149)",peachpuff4:"rgb(139, 119, 101)",peru:"rgb(205, 133, 63)",pink:"rgb(255, 192, 203)",pink1:"rgb(255, 181, 197)",pink2:"rgb(238, 169, 184)",pink3:"rgb(205, 145, 158)",pink4:"rgb(139, 99, 108)",plum:"rgb(221, 160, 221)",plum1:"rgb(255, 187, 255)",plum2:"rgb(238, 174, 238)",plum3:"rgb(205, 150, 205)",plum4:"rgb(139, 102, 139)",powderblue:"rgb(176, 224, 230)",purple:"rgb(160, 32, 240)",purple1:"rgb(155, 48, 255)",purple2:"rgb(145, 44, 238)",purple3:"rgb(125, 38, 205)",purple4:"rgb(85, 26, 139)",red:"rgb(255, 0, 0)",red1:"rgb(255, 0, 0)",red2:"rgb(238, 0, 0)",red3:"rgb(205, 0, 0)",red4:"rgb(139, 0, 0)",rosybrown:"rgb(188, 143, 143)",rosybrown1:"rgb(255, 193, 193)",rosybrown2:"rgb(238, 180, 180)",rosybrown3:"rgb(205, 155, 155)",rosybrown4:"rgb(139, 105, 105)",royalblue:"rgb(65, 105, 225)",royalblue1:"rgb(72, 118, 255)",royalblue2:"rgb(67, 110, 238)",royalblue3:"rgb(58, 95, 205)",royalblue4:"rgb(39, 64, 139)",saddlebrown:"rgb(139, 69, 19)",salmon:"rgb(250, 128, 114)",salmon1:"rgb(255, 140, 105)",salmon2:"rgb(238, 130, 98)",salmon3:"rgb(205, 112, 84)",salmon4:"rgb(139, 76, 57)",sandybrown:"rgb(244, 164, 96)",seagreen:"rgb(46, 139, 87)",seagreen1:"rgb(84, 255, 159)",seagreen2:"rgb(78, 238, 148)",seagreen3:"rgb(67, 205, 128)",seagreen4:"rgb(46, 139, 87)",seashell:"rgb(255, 245, 238)",seashell1:"rgb(255, 245, 238)",seashell2:"rgb(238, 229, 222)",seashell3:"rgb(205, 197, 191)",seashell4:"rgb(139, 134, 130)",sienna:"rgb(160, 82, 45)",sienna1:"rgb(255, 130, 71)",sienna2:"rgb(238, 121, 66)",sienna3:"rgb(205, 104, 57)",sienna4:"rgb(139, 71, 38)",skyblue:"rgb(135, 206, 235)",skyblue1:"rgb(135, 206, 255)",skyblue2:"rgb(126, 192, 238)",skyblue3:"rgb(108, 166, 205)",skyblue4:"rgb(74, 112, 139)",slateblue:"rgb(106, 90, 205)",slateblue1:"rgb(131, 111, 255)",slateblue2:"rgb(122, 103, 238)",slateblue3:"rgb(105, 89, 205)",slateblue4:"rgb(71, 60, 139)",slategray:"rgb(112, 128, 144)",slategray1:"rgb(198, 226, 255)",slategray2:"rgb(185, 211, 238)",slategray3:"rgb(159, 182, 205)",slategray4:"rgb(108, 123, 139)",slategrey:"rgb(112, 128, 144)",snow:"rgb(255, 250, 250)",snow1:"rgb(255, 250, 250)",snow2:"rgb(238, 233, 233)",snow3:"rgb(205, 201, 201)",snow4:"rgb(139, 137, 137)",springgreen:"rgb(0, 255, 127)",springgreen1:"rgb(0, 255, 127)",springgreen2:"rgb(0, 238, 118)",springgreen3:"rgb(0, 205, 102)",springgreen4:"rgb(0, 139, 69)",steelblue:"rgb(70, 130, 180)",steelblue1:"rgb(99, 184, 255)",steelblue2:"rgb(92, 172, 238)",steelblue3:"rgb(79, 148, 205)",steelblue4:"rgb(54, 100, 139)",tan:"rgb(210, 180, 140)",tan1:"rgb(255, 165, 79)",tan2:"rgb(238, 154, 73)",tan3:"rgb(205, 133, 63)",tan4:"rgb(139, 90, 43)",thistle:"rgb(216, 191, 216)",thistle1:"rgb(255, 225, 255)",thistle2:"rgb(238, 210, 238)",thistle3:"rgb(205, 181, 205)",thistle4:"rgb(139, 123, 139)",tomato:"rgb(255, 99, 71)",tomato1:"rgb(255, 99, 71)",tomato2:"rgb(238, 92, 66)",tomato3:"rgb(205, 79, 57)",tomato4:"rgb(139, 54, 38)",turquoise:"rgb(64, 224, 208)",turquoise1:"rgb(0, 245, 255)",turquoise2:"rgb(0, 229, 238)",turquoise3:"rgb(0, 197, 205)",turquoise4:"rgb(0, 134, 139)",violet:"rgb(238, 130, 238)",violetred:"rgb(208, 32, 144)",violetred1:"rgb(255, 62, 150)",violetred2:"rgb(238, 58, 140)",violetred3:"rgb(205, 50, 120)",violetred4:"rgb(139, 34, 82)",wheat:"rgb(245, 222, 179)",wheat1:"rgb(255, 231, 186)",wheat2:"rgb(238, 216, 174)",wheat3:"rgb(205, 186, 150)",wheat4:"rgb(139, 126, 102)",white:"rgb(255, 255, 255)",whitesmoke:"rgb(245, 245, 245)",yellow:"rgb(255, 255, 0)",yellow1:"rgb(255, 255, 0)",yellow2:"rgb(238, 238, 0)",yellow3:"rgb(205, 205, 0)",yellow4:"rgb(139, 139, 0)",yellowgreen:"rgb(154, 205, 50)"},K.f={},K.f.createEnum=function(e){return new String(e)},K.f.replaceVars=function(e,t){return e.replace(/%([a-z]*)\(([^\)]+)\)/gi,(function(e,r,o){if(void 0===t[o])throw"Unknown variable: "+o;var i=t[o];if(r in K.f.replaceVars.functions)i=K.f.replaceVars.functions[r](i);else if(r)throw"Unknown escape function: "+r;return i}))},K.f.replaceVars.functions={encodeURI:encodeURI,encodeURIComponent:encodeURIComponent,escapeHTML:function(e){var t={"<":"&lt;",">":"&gt;","&":"&amp;",'"':"&quot;","'":"&#39;"};return e.replace(/[<>&\"\']/g,e=>t[e])}},K.f.parseQuery=function(e){e.startsWith("?")&&(e=e.substr(1));for(var t={},r=e.split("&"),o=0;o<r.length;o++){var i=r[o].split("=");let e=decodeURIComponent(i[0]),n=decodeURIComponent(i[1]);e.endsWith("[]")?(t[e=e.slice(0,-2)]instanceof Array||(t[e]=[]),t[e].push(n)):t[e]=n}return t},K.f.getURL=function(e){return K.f.getURL.chromeSupported()?chrome.runtime.getURL(e):e},K.f.getURL.chromeSupported=function(){return window.chrome&&chrome.runtime&&chrome.runtime.getURL},K.f.clamp=function(e,t,r){return e<t?t:e>r?r:e},K.f.zpad=function(e,t){return String(e).padStart(t,"0")},K.f.getWhitespace=function(e){if(e<=0)return"";var t=this.getWhitespace;for(t.whitespace||(t.whitespace="          ");e>t.whitespace.length;)t.whitespace+=t.whitespace;return t.whitespace.substr(0,e)},K.f.alarm=function(e,t){var r,o,i=t||5e3,n=K.f.getStack(1);return r=setTimeout((function(){var t="string"==typeof e?t:e.name;t=t?": "+t:"",console.warn("lib.f.alarm: timeout expired: "+i/1e3+"s"+t),console.log(n),r=null}),i),o=function(e){return function(){return r&&(clearTimeout(r),r=null),e.apply(null,arguments)}},"string"==typeof e?o:o(e)},K.f.getStack=function(e=0,t){const r=(new Error).stack.split("\n");e+=2;const o=r.length-e;t=void 0===t?o:K.f.clamp(t,0,o);const i=new Array;for(let o=e;o<t+e;++o)i.push(r[o].replace(/^\s*at\s+/,""));return i},K.f.smartFloorDivide=function(e,t){var r=e/t,o=Math.ceil(r);return o-r<1e-4?o:Math.floor(r)},K.f.randomInt=function(e,t){return Math.floor(Math.random()*(t-e+1))+e},K.f.getOs=function(){if(window.browser&&browser.runtime&&browser.runtime.getPlatformInfo)return browser.runtime.getPlatformInfo().then(e=>e.os);if(window.chrome&&chrome.runtime&&chrome.runtime.getPlatformInfo)return new Promise((e,t)=>chrome.runtime.getPlatformInfo(t=>e(t.os)));if(window.navigator&&navigator.userAgent){const e=navigator.userAgent;if(e.includes("Mac OS X"))return Promise.resolve("mac");if(e.includes("CrOS"))return Promise.resolve("cros");if(e.includes("Linux"))return Promise.resolve("linux");if(e.includes("Android"))return Promise.resolve("android");if(e.includes("Windows"))return Promise.resolve("windows")}return Promise.reject(null)},K.f.getChromeMilestone=function(){if(window.navigator&&navigator.userAgent){const e=navigator.userAgent.match(/\sChrome\/(\d+)/);if(e)return parseInt(e[1])}return NaN},K.f.lastError=function(e=null){let t;return window.browser&&browser.runtime?t=browser.runtime.lastError:window.chrome&&chrome.runtime&&(t=chrome.runtime.lastError),t&&t.message?t.message:e},K.i18n={},K.i18n.browser_=window.browser&&browser.i18n?browser.i18n:window.chrome&&chrome.i18n?chrome.i18n:null,K.i18n.getAcceptLanguages=function(e){K.i18n.browser_?K.i18n.browser_.getAcceptLanguages(e):setTimeout((function(){e([navigator.language.replace(/-/g,"_")])}),0)},K.i18n.getMessage=function(e,t=[],r=""){if(K.i18n.browser_){const r=K.i18n.browser_.getMessage(e,t);if(r)return r}return K.i18n.replaceReferences(r,t)},K.i18n.replaceReferences=function(e,t=[]){return null===t&&(t=[]),t instanceof Array||(t=[t]),e.replace(/\$(\d+)/g,(e,r)=>r<=t.length?t[r-1]:"")},K.MessageManager=function(e){this.languages_=e.map(e=>e.replace(/-/g,"_")),-1==this.languages_.indexOf("en")&&this.languages_.unshift("en"),this.messages={}},K.MessageManager.prototype.addMessages=function(e){for(var t in e){var r=e[t];r.placeholders?this.messages[t]=r.message.replace(/\$([a-z][^\s\$]+)\$/gi,(function(r,o){return e[t].placeholders[o.toLowerCase()].content})):this.messages[t]=r.message}},K.MessageManager.prototype.findAndLoadMessages=function(e,t){var r=this.languages_.concat(),o=[],i=[];function n(e){e?o=r.shift():i=r.shift(),r.length?s():t(o,i)}var s=function(){this.loadMessages(this.replaceReferences(e,r),n.bind(this,!0),n.bind(this,!1))}.bind(this);s()},K.MessageManager.prototype.loadMessages=function(e,t,r){var o=new XMLHttpRequest;o.onload=()=>{this.addMessages(JSON.parse(o.responseText)),t()},r&&(o.onerror=()=>r(o)),o.open("GET",e),o.send()},K.MessageManager.prototype.replaceReferences=K.i18n.replaceReferences,K.MessageManager.prototype.get=function(e,t,r){let o=K.i18n.getMessage(e,t);return o||((o=this.messages[e])||(console.warn("Unknown message: "+e),o=void 0===r?e:r,this.messages[e]=o),this.replaceReferences(o,t))},K.MessageManager.prototype.processI18nAttributes=function(e){for(var t=e.querySelectorAll("[i18n]"),r=0;r<t.length;r++)this.processI18nAttribute(t[r])},K.MessageManager.prototype.processI18nAttribute=function(e){const t=e=>e.replace(/-/g,"_").toUpperCase();var r=e.getAttribute("i18n");if(r){try{r=JSON.parse(r)}catch(t){throw console.error("Can't parse "+e.tagName+"#"+e.id+": "+r),t}for(var o in r){var i=o,n=r[o];n.startsWith("=")&&(o=n.substr(1),n=r[o]),n.startsWith("$")&&(n=t(e.getAttribute(n.substr(1))+"_"+o));var s=this.get(n);"_"==i?e.textContent=s:e.setAttribute(i,s)}}},K.PreferenceManager=function(e,t){this.storage=e,this.storageObserver_=this.onStorageChange_.bind(this),this.isActive_=!1,this.activate(),this.trace=!1;var r=t||"/";r.endsWith("/")||(r+="/"),this.prefix=r,this.isImportingJson_=!1,this.prefRecords_={},this.globalObservers_=[],this.childFactories_={},this.childLists_={}},K.PreferenceManager.prototype.DEFAULT_VALUE=K.f.createEnum("DEFAULT"),K.PreferenceManager.Record=function(e,t){this.name=e,this.defaultValue=t,this.currentValue=this.DEFAULT_VALUE,this.observers=[]},K.PreferenceManager.Record.prototype.DEFAULT_VALUE=K.PreferenceManager.prototype.DEFAULT_VALUE,K.PreferenceManager.Record.prototype.addObserver=function(e){this.observers.push(e)},K.PreferenceManager.Record.prototype.removeObserver=function(e){var t=this.observers.indexOf(e);t>=0&&this.observers.splice(t,1)},K.PreferenceManager.Record.prototype.get=function(){return this.currentValue===this.DEFAULT_VALUE?/^(string|number)$/.test(typeof this.defaultValue)?this.defaultValue:"object"==typeof this.defaultValue?JSON.parse(JSON.stringify(this.defaultValue)):this.defaultValue:this.currentValue},K.PreferenceManager.prototype.deactivate=function(){if(!this.isActive_)throw new Error("Not activated");this.isActive_=!1,this.storage.removeObserver(this.storageObserver_)},K.PreferenceManager.prototype.activate=function(){if(this.isActive_)throw new Error("Already activated");this.isActive_=!0,this.storage.addObserver(this.storageObserver_)},K.PreferenceManager.prototype.readStorage=function(e){var t=0;function r(){0==--t&&e&&e()}var o=Object.keys(this.prefRecords_).map(e=>this.prefix+e);this.trace&&console.log("Preferences read: "+this.prefix),this.storage.getItems(o,function(o){var i=this.prefix.length;for(var n in o){var s=o[n],a=n.substr(i),l=a in this.childLists_&&JSON.stringify(s)!=JSON.stringify(this.prefRecords_[a].currentValue);this.prefRecords_[a].currentValue=s,l&&(t++,this.syncChildList(a,r))}0==t&&e&&setTimeout(e)}.bind(this))},K.PreferenceManager.prototype.definePreference=function(e,t,r){var o=this.prefRecords_[e];o?this.changeDefault(e,t):o=this.prefRecords_[e]=new K.PreferenceManager.Record(e,t),r&&o.addObserver(r)},K.PreferenceManager.prototype.definePreferences=function(e){for(var t=0;t<e.length;t++)this.definePreference(e[t][0],e[t][1],e[t][2])},K.PreferenceManager.prototype.defineChildren=function(e,t){this.definePreference(e,[],this.onChildListChange_.bind(this,e)),this.childFactories_[e]=t,this.childLists_[e]={}},K.PreferenceManager.prototype.addObservers=function(e,t){if(e&&"function"!=typeof e)throw new Error("Invalid param: globals");if(e&&this.globalObservers_.push(e),t)for(var r in t){if(!(r in this.prefRecords_))throw new Error("Unknown preference: "+r);this.prefRecords_[r].addObserver(t[r])}},K.PreferenceManager.prototype.notifyAll=function(){for(var e in this.prefRecords_)this.notifyChange_(e)},K.PreferenceManager.prototype.notifyChange_=function(e){var t=this.prefRecords_[e];if(!t)throw new Error("Unknown preference: "+e);for(var r=t.get(),o=0;o<this.globalObservers_.length;o++)this.globalObservers_[o](e,r);for(o=0;o<t.observers.length;o++)t.observers[o](r,e,this)},K.PreferenceManager.prototype.createChild=function(e,t,r){var o,i=this.get(e);if(r){if(o=r,-1!=i.indexOf(o))throw new Error("Duplicate child: "+e+": "+o)}else for(;!o||-1!=i.indexOf(o);)o=K.f.randomInt(1,65535).toString(16),o=K.f.zpad(o,4),t&&(o=t+":"+o);var n=this.childFactories_[e](this,o);return n.trace=this.trace,n.resetAll(),this.childLists_[e][o]=n,i.push(o),this.set(e,i,void 0,!this.isImportingJson_),n},K.PreferenceManager.prototype.removeChild=function(e,t){this.getChild(e,t).resetAll();var r=this.get(e),o=r.indexOf(t);-1!=o&&(r.splice(o,1),this.set(e,r,void 0,!this.isImportingJson_)),delete this.childLists_[e][t]},K.PreferenceManager.prototype.getChild=function(e,t,r){if(!(e in this.childLists_))throw new Error("Unknown child list: "+e);var o=this.childLists_[e];if(!(t in o)){if(void 0===r)throw new Error('Unknown "'+e+'" child: '+t);return r}return o[t]},K.PreferenceManager.diffChildLists=function(e,t){for(var r={added:{},removed:{},common:{}},o=0;o<e.length;o++)-1!=t.indexOf(e[o])?r.common[e[o]]=!0:r.added[e[o]]=!0;for(o=0;o<t.length;o++)t[o]in r.added||t[o]in r.common||(r.removed[t[o]]=!0);return r},K.PreferenceManager.prototype.syncChildList=function(e,t){var r=0;function o(){0==--r&&t&&t()}for(var i=this.get(e),n=Object.keys(this.childLists_[e]),s=(K.PreferenceManager.diffChildLists(i,n),0);s<i.length;s++){var a=i[s],l=n.indexOf(a);if(l>=0&&n.splice(l,1),!this.childLists_[e][a]){var c=this.childFactories_[e](this,a);if(!c){console.warn("Unable to restore child: "+e+": "+a);continue}c.trace=this.trace,this.childLists_[e][a]=c,r++,c.readStorage(o)}}for(s=0;s<n.length;s++)delete this.childLists_[e][n[s]];!r&&t&&setTimeout(t)},K.PreferenceManager.prototype.reset=function(e){var t=this.prefRecords_[e];if(!t)throw new Error("Unknown preference: "+e);this.storage.removeItem(this.prefix+e),t.currentValue!==this.DEFAULT_VALUE&&(t.currentValue=this.DEFAULT_VALUE,this.notifyChange_(e))},K.PreferenceManager.prototype.resetAll=function(){var e=[];for(var t in this.childLists_){var r=this.childLists_[t];for(var o in r)r[o].resetAll()}for(var i in this.prefRecords_)this.prefRecords_[i].currentValue!==this.DEFAULT_VALUE&&(this.prefRecords_[i].currentValue=this.DEFAULT_VALUE,e.push(i));var n=Object.keys(this.prefRecords_).map(function(e){return this.prefix+e}.bind(this));this.storage.removeItems(n),e.forEach(this.notifyChange_.bind(this))},K.PreferenceManager.prototype.diff=function(e,t){return typeof e!=typeof t||!/^(undefined|boolean|number|string)$/.test(typeof e)||e!==t},K.PreferenceManager.prototype.changeDefault=function(e,t){var r=this.prefRecords_[e];if(!r)throw new Error("Unknown preference: "+e);this.diff(r.defaultValue,t)&&(r.currentValue===this.DEFAULT_VALUE?(r.defaultValue=t,this.notifyChange_(e)):r.defaultValue=t)},K.PreferenceManager.prototype.changeDefaults=function(e){for(var t in e)this.changeDefault(t,e[t])},K.PreferenceManager.prototype.set=function(e,t,r,o=!0){var i=this.prefRecords_[e];if(!i)throw new Error("Unknown preference: "+e);var n=i.get();this.diff(n,t)&&(this.diff(i.defaultValue,t)?(i.currentValue=t,o&&this.storage.setItem(this.prefix+e,t,r)):(i.currentValue=this.DEFAULT_VALUE,o&&this.storage.removeItem(this.prefix+e,r)),setTimeout(this.notifyChange_.bind(this,e),0))},K.PreferenceManager.prototype.get=function(e){var t=this.prefRecords_[e];if(!t)throw new Error("Unknown preference: "+e);return t.get()},K.PreferenceManager.prototype.exportAsJson=function(){var e={};for(var t in this.prefRecords_)if(t in this.childLists_){e[t]=[];for(var r=this.get(t),o=0;o<r.length;o++){var i=r[o];e[t].push({id:i,json:this.getChild(t,i).exportAsJson()})}}else{var n=this.prefRecords_[t];n.currentValue!=this.DEFAULT_VALUE&&(e[t]=n.currentValue)}return e},K.PreferenceManager.prototype.importFromJson=function(e,t){this.isImportingJson_=!0;let r=0;const o=()=>{if(--r<1){t&&t();for(let t in e)t in this.childLists_&&this.set(t,this.get(t));this.isImportingJson_=!1}};for(var i in e)if(i in this.childLists_)for(var n=e[i],s=0;s<n.length;s++){var a=n[s].id,l=this.childLists_[i][a];l||(l=this.createChild(i,null,a)),l.importFromJson(n[s].json,o),r++}else this.set(i,e[i]);0==r&&t&&t()},K.PreferenceManager.prototype.onChildListChange_=function(e){this.syncChildList(e)},K.PreferenceManager.prototype.onStorageChange_=function(e){for(var t in e)if(!this.prefix||0==t.lastIndexOf(this.prefix,0)){var r=t.substr(this.prefix.length);if(r in this.prefRecords_){var o=this.prefRecords_[r],i=e[t].newValue,n=o.currentValue;n===o.DEFAULT_VALUE&&(n=void 0),this.diff(n,i)&&(o.currentValue=null==i?o.DEFAULT_VALUE:i,this.notifyChange_(r))}}},K.resource={resources_:{}},K.resource.add=function(e,t,r){K.resource.resources_[e]={type:t,name:e,data:r}},K.resource.get=function(e,t){if(!(e in K.resource.resources_)){if(void 0===t)throw"Unknown resource: "+e;return t}return K.resource.resources_[e]},K.resource.getData=function(e,t){if(!(e in K.resource.resources_)){if(void 0===t)throw"Unknown resource: "+e;return t}return K.resource.resources_[e].data},K.resource.getDataUrl=function(e,t){var r=K.resource.get(e,t);return"data:"+r.type+","+r.data},K.Storage=new Object,K.Storage.Chrome=function(e){this.storage_=e,this.observers_=[],chrome.storage.onChanged.addListener(this.onChanged_.bind(this))},K.Storage.Chrome.prototype.onChanged_=function(e,t){if(chrome.storage[t]==this.storage_)for(var r=0;r<this.observers_.length;r++)this.observers_[r](e)},K.Storage.Chrome.prototype.addObserver=function(e){this.observers_.push(e)},K.Storage.Chrome.prototype.removeObserver=function(e){var t=this.observers_.indexOf(e);-1!=t&&this.observers_.splice(t,1)},K.Storage.Chrome.prototype.clear=function(e){this.storage_.clear(),e&&setTimeout(e,0)},K.Storage.Chrome.prototype.getItem=function(e,t){this.storage_.get(e,t)},K.Storage.Chrome.prototype.getItems=function(e,t){this.storage_.get(e,t)},K.Storage.Chrome.prototype.setItem=function(e,t,r){const o=()=>{const i=K.f.lastError();if(i){if(i.indexOf("MAX_WRITE_OPERATIONS"))return console.warn(`Will retry save of ${e} after exceeding quota: ${i}`),void setTimeout(()=>this.setItem(e,t,o),1e3);console.error(`Unknown runtime error: ${i}`)}r&&r()};var i={};i[e]=t,this.storage_.set(i,o)},K.Storage.Chrome.prototype.setItems=function(e,t){this.storage_.set(e,t)},K.Storage.Chrome.prototype.removeItem=function(e,t){this.storage_.remove(e,t)},K.Storage.Chrome.prototype.removeItems=function(e,t){this.storage_.remove(e,t)},K.Storage.Local=function(){this.observers_=[],this.storage_=window.localStorage,window.addEventListener("storage",this.onStorage_.bind(this))},K.Storage.Local.prototype.onStorage_=function(e){if(e.storageArea==this.storage_){var t=e.oldValue?JSON.parse(e.oldValue):e.oldValue,r=e.newValue?JSON.parse(e.newValue):e.newValue,o={};o[e.key]={oldValue:t,newValue:r};for(var i=0;i<this.observers_.length;i++)this.observers_[i](o)}},K.Storage.Local.prototype.addObserver=function(e){this.observers_.push(e)},K.Storage.Local.prototype.removeObserver=function(e){var t=this.observers_.indexOf(e);-1!=t&&this.observers_.splice(t,1)},K.Storage.Local.prototype.clear=function(e){this.storage_.clear(),e&&setTimeout(e,0)},K.Storage.Local.prototype.getItem=function(e,t){var r=this.storage_.getItem(e);if("string"==typeof r)try{r=JSON.parse(r)}catch(e){}setTimeout(t.bind(null,r),0)},K.Storage.Local.prototype.getItems=function(e,t){for(var r={},o=e.length-1;o>=0;o--){var i=e[o],n=this.storage_.getItem(i);if("string"==typeof n)try{r[i]=JSON.parse(n)}catch(e){r[i]=n}else e.splice(o,1)}setTimeout(t.bind(null,r),0)},K.Storage.Local.prototype.setItem=function(e,t,r){this.storage_.setItem(e,JSON.stringify(t)),r&&setTimeout(r,0)},K.Storage.Local.prototype.setItems=function(e,t){for(var r in e)this.storage_.setItem(r,JSON.stringify(e[r]));t&&setTimeout(t,0)},K.Storage.Local.prototype.removeItem=function(e,t){this.storage_.removeItem(e),t&&setTimeout(t,0)},K.Storage.Local.prototype.removeItems=function(e,t){for(var r=0;r<e.length;r++)this.storage_.removeItem(e[r]);t&&setTimeout(t,0)},K.Storage.Memory=function(){this.observers_=[],this.storage_={}},K.Storage.Memory.prototype.addObserver=function(e){this.observers_.push(e)},K.Storage.Memory.prototype.removeObserver=function(e){var t=this.observers_.indexOf(e);-1!=t&&this.observers_.splice(t,1)},K.Storage.Memory.prototype.clear=function(e){var t={};for(var r in this.storage_)t[r]={oldValue:this.storage_[r],newValue:void 0};this.storage_={},setTimeout(function(){for(var e=0;e<this.observers_.length;e++)this.observers_[e](t)}.bind(this),0),e&&setTimeout(e,0)},K.Storage.Memory.prototype.getItem=function(e,t){var r=this.storage_[e];if("string"==typeof r)try{r=JSON.parse(r)}catch(e){}setTimeout(t.bind(null,r),0)},K.Storage.Memory.prototype.getItems=function(e,t){for(var r={},o=e.length-1;o>=0;o--){var i=e[o],n=this.storage_[i];if("string"==typeof n)try{r[i]=JSON.parse(n)}catch(e){r[i]=n}else e.splice(o,1)}setTimeout(t.bind(null,r),0)},K.Storage.Memory.prototype.setItem=function(e,t,r){var o=this.storage_[e];this.storage_[e]=JSON.stringify(t);var i={};i[e]={oldValue:o,newValue:t},setTimeout(function(){for(var e=0;e<this.observers_.length;e++)this.observers_[e](i)}.bind(this),0),r&&setTimeout(r,0)},K.Storage.Memory.prototype.setItems=function(e,t){var r={};for(var o in e)r[o]={oldValue:this.storage_[o],newValue:e[o]},this.storage_[o]=JSON.stringify(e[o]);setTimeout(function(){for(var e=0;e<this.observers_.length;e++)this.observers_[e](r)}.bind(this)),t&&setTimeout(t,0)},K.Storage.Memory.prototype.removeItem=function(e,t){delete this.storage_[e],t&&setTimeout(t,0)},K.Storage.Memory.prototype.removeItems=function(e,t){for(var r=0;r<e.length;r++)delete this.storage_[e[r]];t&&setTimeout(t,0)},K.TestManager=function(e){this.log=e||new K.TestManager.Log},K.TestManager.prototype.createTestRun=function(e){return new K.TestManager.TestRun(this,e)},K.TestManager.prototype.onTestRunComplete=function(e){},K.TestManager.prototype.testPreamble=function(e,t){},K.TestManager.prototype.testPostamble=function(e,t){},K.TestManager.Log=function(e=console){this.save=!1,this.data="",this.prefix_="",this.prefixStack_=0,this.console_=e,["log","debug","info","warn","error"].forEach(e=>{let t="";switch(e){case"debug":case"warn":case"error":t=e.toUpperCase()+": "}const r=this.console_[e];this[e]=this.console_[e]=(...e)=>{this.save&&(this.data+=this.prefix_+t+e.join(" ")+"\n"),r.apply(this.console_,e)}}),["group","groupCollapsed"].forEach(e=>{const t=this.console_[e];this[e]=this.console_[e]=(e="")=>{t(e),this.save&&(this.data+=this.prefix_+e+"\n"),this.prefix_="  ".repeat(++this.prefixStack_)}});const t=this.console_.groupEnd;this.groupEnd=this.console_.groupEnd=()=>{t(),this.prefixStack_&&(this.prefix_="  ".repeat(--this.prefixStack_))}},K.TestManager.Suite=function(e){function t(t,r){this.testManager_=t,this.suiteName=e,this.setup(r)}return t.suiteName=e,t.addTest=K.TestManager.Suite.addTest,t.disableTest=K.TestManager.Suite.disableTest,t.getTest=K.TestManager.Suite.getTest,t.getTestList=K.TestManager.Suite.getTestList,t.testList_=[],t.testMap_={},t.prototype=Object.create(K.TestManager.Suite.prototype),t.constructor=K.TestManager.Suite,K.TestManager.Suite.subclasses.push(t),t},K.TestManager.Suite.subclasses=[],K.TestManager.Suite.addTest=function(e,t){if(e in this.testMap_)throw"Duplicate test name: "+e;var r=new K.TestManager.Test(this,e,t);this.testMap_[e]=r,this.testList_.push(r)},K.TestManager.Suite.disableTest=function(e,t){if(e in this.testMap_)throw"Duplicate test name: "+e;var r=new K.TestManager.Test(this,e,t);console.log("Disabled test: "+r.fullName)},K.TestManager.Suite.getTest=function(e){return this.testMap_[e]},K.TestManager.Suite.getTestList=function(){return this.testList_},K.TestManager.Suite.prototype.setDefaults=function(e,t){for(var r in t)this[r]=r in e?e[r]:t[r]},K.TestManager.Suite.prototype.setup=function(e){},K.TestManager.Suite.prototype.preamble=function(e,t){},K.TestManager.Suite.prototype.postamble=function(e,t){},K.TestManager.Test=function(e,t,r){this.suiteClass=e,this.testName=t,this.fullName=e.suiteName+"["+t+"]",this.testFunction_=r},K.TestManager.Test.prototype.run=function(e){try{this.testFunction_.apply(e.suite,[e,e.testRun.cx])}catch(t){if(t instanceof K.TestManager.Result.TestComplete)return;e.println("Test raised an exception: "+t),t.stack&&(t.stack instanceof Array?e.println(t.stack.join("\n")):e.println(t.stack)),e.completeTest_(e.FAILED,!1)}},K.TestManager.TestRun=function(e,t){this.testManager=e,this.log=e.log,this.cx=t||{},this.failures=[],this.passes=[],this.startDate=null,this.duration=null,this.currentResult=null,this.maxFailures=0,this.panic=!1,this.testQueue_=[]},K.TestManager.TestRun.prototype.ALL_TESTS=K.f.createEnum("<all-tests>"),K.TestManager.TestRun.prototype.selectTest=function(e){this.testQueue_.push(e)},K.TestManager.TestRun.prototype.selectSuite=function(e,t){for(var r=t||this.ALL_TESTS,o=0,i=e.getTestList(),n=0;n<i.length;n++){var s=i[n];if(r!==this.ALL_TESTS)if(r instanceof RegExp){if(!r.test(s.testName))continue}else if(s.testName!=r)continue;this.selectTest(s),o++}return o},K.TestManager.TestRun.prototype.selectPattern=function(e){for(var t=0,r=0;r<K.TestManager.Suite.subclasses.length;r++)t+=this.selectSuite(K.TestManager.Suite.subclasses[r],e);return t||this.log.warn("No tests matched selection criteria: "+e),t},K.TestManager.TestRun.prototype.onUncaughtException_=function(e,t,r){if(0==e.indexOf("Uncaught lib.TestManager.Result.TestComplete")||-1!=e.indexOf("status: passed"))return!0;if(this.currentResult&&e!="Uncaught "+this.currentResult.expectedErrorMessage_){var o="during";return this.currentResult.status!=this.currentResult.PENDING&&(o="after"),this.log.error("Uncaught exception "+o+" test case: "+this.currentResult.test.fullName),this.log.error(e+", "+t+":"+r),this.currentResult.completeTest_(this.currentResult.FAILED,!1),!1}},K.TestManager.TestRun.prototype.onTestRunComplete_=function(e){e?(this.duration=new Date-this.startDate,this.log.groupEnd(),this.log.info(this.passes.length+" passed, "+this.failures.length+" failed, "+this.msToSeconds_(this.duration)),this.summarize(),window.onerror=null,this.testManager.onTestRunComplete(this)):setTimeout(this.onTestRunComplete_.bind(this),0,!0)},K.TestManager.TestRun.prototype.onResultComplete=function(e){try{this.testManager.testPostamble(e,this.cx),e.suite.postamble(e,this.ctx)}catch(e){this.log.error("Unexpected exception in postamble: "+(e.stack?e.stack:e)),this.panic=!0}if(e.status!=e.PASSED?this.log.error(e.status):e.duration>500&&this.log.warn("Slow test took "+this.msToSeconds_(e.duration)),this.log.groupEnd(),e.status==e.FAILED)this.failures.push(e),this.currentSuite=null;else{if(e.status!=e.PASSED)return this.log.error("Unknown result status: "+e.test.fullName+": "+e.status),void(this.panic=!0);this.passes.push(e)}this.runNextTest_()},K.TestManager.TestRun.prototype.onResultReComplete=function(e,t){this.log.error("Late complete for test: "+e.test.fullName+": "+t);var r=this.passes.indexOf(e);r>=0&&(this.passes.splice(r,1),this.failures.push(e))},K.TestManager.TestRun.prototype.runNextTest_=function(){if(!this.panic&&this.testQueue_.length){if(this.maxFailures&&this.failures.length>=this.maxFailures)return this.log.error("Maximum failure count reached, aborting test run."),void this.onTestRunComplete_();var e=this.testQueue_[0],t=this.currentResult?this.currentResult.suite:null;try{t&&t instanceof e.suiteClass||(t&&this.log.groupEnd(),this.log.group(e.suiteClass.suiteName),t=new e.suiteClass(this.testManager,this.cx))}catch(e){return this.log.error("Exception during setup: "+(e.stack?e.stack:e)),this.panic=!0,void this.onTestRunComplete_()}try{this.log.group(e.testName),this.currentResult=new K.TestManager.Result(this,t,e),this.testManager.testPreamble(this.currentResult,this.cx),t.preamble(this.currentResult,this.cx),this.testQueue_.shift()}catch(e){return this.log.error("Unexpected exception during test preamble: "+(e.stack?e.stack:e)),this.log.groupEnd(),this.panic=!0,void this.onTestRunComplete_()}try{this.currentResult.run()}catch(e){this.log.error("Unexpected exception during test run: "+(e.stack?e.stack:e)),this.panic=!0}}else this.onTestRunComplete_()},K.TestManager.TestRun.prototype.run=function(){this.log.info("Running "+this.testQueue_.length+" test(s)"),window.onerror=this.onUncaughtException_.bind(this),this.startDate=new Date,this.runNextTest_()},K.TestManager.TestRun.prototype.msToSeconds_=function(e){return(e/1e3).toFixed(2)+"s"},K.TestManager.TestRun.prototype.summarize=function(){if(this.failures.length)for(var e=0;e<this.failures.length;e++)this.log.error("FAILED: "+this.failures[e].test.fullName);this.testQueue_.length&&this.log.warn("Test run incomplete: "+this.testQueue_.length+" test(s) were not run.")},K.TestManager.Result=function(e,t,r){this.testRun=e,this.suite=t,this.test=r,this.startDate=null,this.duration=null,this.status=this.PENDING,this.expectedErrorMessage_=null},K.TestManager.Result.prototype.PENDING="pending",K.TestManager.Result.prototype.FAILED="FAILED",K.TestManager.Result.prototype.PASSED="passed",K.TestManager.Result.TestComplete=function(e){this.result=e},K.TestManager.Result.TestComplete.prototype.toString=function(){return"lib.TestManager.Result.TestComplete: "+this.result.test.fullName+", status: "+this.result.status},K.TestManager.Result.prototype.run=function(){this.startDate=new Date,this.test.run(this),this.status!=this.PENDING||this.timeout_||(this.println("Test did not return a value and did not request more time."),this.completeTest_(this.FAILED,!1))},K.TestManager.Result.prototype.expectErrorMessage=function(e){this.expectedErrorMessage_=e},K.TestManager.Result.prototype.onTimeout_=function(){this.timeout_=null,this.status==this.PENDING&&(this.println("Test timed out."),this.completeTest_(this.FAILED,!1))},K.TestManager.Result.prototype.requestTime=function(e){this.timeout_&&clearTimeout(this.timeout_),this.timeout_=setTimeout(this.onTimeout_.bind(this),e)},K.TestManager.Result.prototype.completeTest_=function(e,t){if(this.status==this.PENDING?(this.duration=new Date-this.startDate,this.status=e,this.testRun.onResultComplete(this)):this.testRun.onResultReComplete(this,e),arguments.length<2||t)throw new K.TestManager.Result.TestComplete(this)},K.TestManager.Result.prototype.assertEQ=function(e,t,r){function o(e){if("number"==typeof e)return e;var t=String(e).split("\n").map(e=>JSON.stringify(e));return t.length>1?"\n"+t.join("\n"):t.join("\n")}if(e!==t&&!(t instanceof Array&&K.array.compare(e,t))){var i=r?"["+r+"]":"";this.fail("assertEQ"+i+": "+this.getCallerLocation_(1)+": "+o(e)+" !== "+o(t))}},K.TestManager.Result.prototype.assert=function(e,t){if(!0!==e){var r=t?"["+t+"]":"";this.fail("assert"+r+": "+this.getCallerLocation_(1)+": "+String(e))}},K.TestManager.Result.prototype.getCallerLocation_=function(e){try{throw new Error}catch(r){var t=r.stack.split("\n")[e+2].match(/([^/]+:\d+):\d+\)?$/);return t?t[1]:"???"}},K.TestManager.Result.prototype.println=function(e){this.testRun.log.info(e)},K.TestManager.Result.prototype.fail=function(e){arguments.length&&this.println(e),this.completeTest_(this.FAILED,!0)},K.TestManager.Result.prototype.pass=function(){this.completeTest_(this.PASSED,!0)},K.UTF8Decoder=function(){this.bytesLeft=0,this.codePoint=0,this.lowerBound=0},K.UTF8Decoder.prototype.decode=function(e){for(var t="",r=0;r<e.length;r++){var o=e.charCodeAt(r);if(0==this.bytesLeft)o<=127?t+=e.charAt(r):192<=o&&o<=223?(this.codePoint=o-192,this.bytesLeft=1,this.lowerBound=128):224<=o&&o<=239?(this.codePoint=o-224,this.bytesLeft=2,this.lowerBound=2048):240<=o&&o<=247?(this.codePoint=o-240,this.bytesLeft=3,this.lowerBound=65536):248<=o&&o<=251?(this.codePoint=o-248,this.bytesLeft=4,this.lowerBound=2097152):252<=o&&o<=253?(this.codePoint=o-252,this.bytesLeft=5,this.lowerBound=67108864):t+="�";else if(128<=o&&o<=191){if(this.bytesLeft--,this.codePoint=(this.codePoint<<6)+(o-128),0==this.bytesLeft){var i=this.codePoint;i<this.lowerBound||55296<=i&&i<=57343||i>1114111?t+="�":i<65536?t+=String.fromCharCode(i):(i-=65536,t+=String.fromCharCode(55296+(i>>>10&1023),56320+(1023&i)))}}else t+="�",this.bytesLeft=0,r--}return t},K.decodeUTF8=function(e){return(new K.UTF8Decoder).decode(e)},K.encodeUTF8=function(e){for(var t="",r=0;r<e.length;r++){var o,i=e.charCodeAt(r);if(56320<=i&&i<=57343)i=65533;else if(55296<=i&&i<=56319)if(r+1<e.length){var n=e.charCodeAt(r+1);56320<=n&&n<=57343?(i=65536+((1023&i)<<10)+(1023&n),r++):i=65533}else i=65533;if(i<=127)t+=e.charAt(r);else for(i<=2047?(t+=String.fromCharCode(192|i>>>6),o=1):i<=65535?(t+=String.fromCharCode(224|i>>>12),o=2):(t+=String.fromCharCode(240|i>>>18),o=3);o>0;)o--,t+=String.fromCharCode(128|i>>>6*o&63)}return t},K.wc={},K.wc.nulWidth=0,K.wc.controlWidth=0,K.wc.regardCjkAmbiguous=!1,K.wc.cjkAmbiguousWidth=2,K.wc.combining=[[173,173],[768,879],[1155,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1552,1562],[1564,1564],[1611,1631],[1648,1648],[1750,1756],[1759,1764],[1767,1768],[1770,1773],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2045,2045],[2070,2073],[2075,2083],[2085,2087],[2089,2093],[2137,2139],[2259,2273],[2275,2306],[2362,2362],[2364,2364],[2369,2376],[2381,2381],[2385,2391],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2558,2558],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2641,2641],[2672,2673],[2677,2677],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2810,2815],[2817,2817],[2876,2876],[2879,2879],[2881,2884],[2893,2893],[2902,2902],[2914,2915],[2946,2946],[3008,3008],[3021,3021],[3072,3072],[3076,3076],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3170,3171],[3201,3201],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3328,3329],[3387,3388],[3393,3396],[3405,3405],[3426,3427],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3981,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4151],[4153,4154],[4157,4158],[4184,4185],[4190,4192],[4209,4212],[4226,4226],[4229,4230],[4237,4237],[4253,4253],[4448,4607],[4957,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6158],[6277,6278],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6683,6683],[6742,6742],[6744,6750],[6752,6752],[6754,6754],[6757,6764],[6771,6780],[6783,6783],[6832,6846],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7040,7041],[7074,7077],[7080,7081],[7083,7085],[7142,7142],[7144,7145],[7149,7149],[7151,7153],[7212,7219],[7222,7223],[7376,7378],[7380,7392],[7394,7400],[7405,7405],[7412,7412],[7416,7417],[7616,7673],[7675,7679],[8203,8207],[8234,8238],[8288,8292],[8294,8303],[8400,8432],[11503,11505],[11647,11647],[11744,11775],[12330,12333],[12441,12442],[42607,42610],[42612,42621],[42654,42655],[42736,42737],[43010,43010],[43014,43014],[43019,43019],[43045,43046],[43204,43205],[43232,43249],[43263,43263],[43302,43309],[43335,43345],[43392,43394],[43443,43443],[43446,43449],[43452,43452],[43493,43493],[43561,43566],[43569,43570],[43573,43574],[43587,43587],[43596,43596],[43644,43644],[43696,43696],[43698,43700],[43703,43704],[43710,43711],[43713,43713],[43756,43757],[43766,43766],[44005,44005],[44008,44008],[44013,44013],[64286,64286],[65024,65039],[65056,65071],[65279,65279],[65529,65531],[66045,66045],[66272,66272],[66422,66426],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[68325,68326],[68900,68903],[69446,69456],[69633,69633],[69688,69702],[69759,69761],[69811,69814],[69817,69818],[69888,69890],[69927,69931],[69933,69940],[70003,70003],[70016,70017],[70070,70078],[70089,70092],[70191,70193],[70196,70196],[70198,70199],[70206,70206],[70367,70367],[70371,70378],[70400,70401],[70459,70460],[70464,70464],[70502,70508],[70512,70516],[70712,70719],[70722,70724],[70726,70726],[70750,70750],[70835,70840],[70842,70842],[70847,70848],[70850,70851],[71090,71093],[71100,71101],[71103,71104],[71132,71133],[71219,71226],[71229,71229],[71231,71232],[71339,71339],[71341,71341],[71344,71349],[71351,71351],[71453,71455],[71458,71461],[71463,71467],[71727,71735],[71737,71738],[72193,72202],[72243,72248],[72251,72254],[72263,72263],[72273,72278],[72281,72283],[72330,72342],[72344,72345],[72752,72758],[72760,72765],[72767,72767],[72850,72871],[72874,72880],[72882,72883],[72885,72886],[73009,73014],[73018,73018],[73020,73021],[73023,73029],[73031,73031],[73104,73105],[73109,73109],[73111,73111],[73459,73460],[92912,92916],[92976,92982],[94095,94098],[113821,113822],[113824,113827],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[121344,121398],[121403,121452],[121461,121461],[121476,121476],[121499,121503],[121505,121519],[122880,122886],[122888,122904],[122907,122913],[122915,122916],[122918,122922],[125136,125142],[125252,125258],[917505,917505],[917536,917631],[917760,917999]],K.wc.ambiguous=[[161,161],[164,164],[167,168],[170,170],[173,174],[176,180],[182,186],[188,191],[198,198],[208,208],[215,216],[222,225],[230,230],[232,234],[236,237],[240,240],[242,243],[247,250],[252,252],[254,254],[257,257],[273,273],[275,275],[283,283],[294,295],[299,299],[305,307],[312,312],[319,322],[324,324],[328,331],[333,333],[338,339],[358,359],[363,363],[462,462],[464,464],[466,466],[468,468],[470,470],[472,472],[474,474],[476,476],[593,593],[609,609],[708,708],[711,711],[713,715],[717,717],[720,720],[728,731],[733,733],[735,735],[768,879],[913,929],[931,937],[945,961],[963,969],[1025,1025],[1040,1103],[1105,1105],[4352,4447],[8208,8208],[8211,8214],[8216,8217],[8220,8221],[8224,8226],[8228,8231],[8240,8240],[8242,8243],[8245,8245],[8251,8251],[8254,8254],[8308,8308],[8319,8319],[8321,8324],[8364,8364],[8451,8451],[8453,8453],[8457,8457],[8467,8467],[8470,8470],[8481,8482],[8486,8486],[8491,8491],[8531,8532],[8539,8542],[8544,8555],[8560,8569],[8585,8585],[8592,8601],[8632,8633],[8658,8658],[8660,8660],[8679,8679],[8704,8704],[8706,8707],[8711,8712],[8715,8715],[8719,8719],[8721,8721],[8725,8725],[8730,8730],[8733,8736],[8739,8739],[8741,8741],[8743,8748],[8750,8750],[8756,8759],[8764,8765],[8776,8776],[8780,8780],[8786,8786],[8800,8801],[8804,8807],[8810,8811],[8814,8815],[8834,8835],[8838,8839],[8853,8853],[8857,8857],[8869,8869],[8895,8895],[8978,8978],[8986,8987],[9001,9002],[9193,9196],[9200,9200],[9203,9203],[9312,9449],[9451,9547],[9552,9587],[9600,9615],[9618,9621],[9632,9633],[9635,9641],[9650,9651],[9654,9655],[9660,9661],[9664,9665],[9670,9672],[9675,9675],[9678,9681],[9698,9701],[9711,9711],[9725,9726],[9733,9734],[9737,9737],[9742,9743],[9748,9749],[9756,9756],[9758,9758],[9792,9792],[9794,9794],[9800,9811],[9824,9825],[9827,9829],[9831,9834],[9836,9837],[9839,9839],[9855,9855],[9875,9875],[9886,9887],[9889,9889],[9898,9899],[9917,9919],[9924,9953],[9955,9955],[9960,9983],[9989,9989],[9994,9995],[10024,10024],[10045,10045],[10060,10060],[10062,10062],[10067,10069],[10071,10071],[10102,10111],[10133,10135],[10160,10160],[10175,10175],[11035,11036],[11088,11088],[11093,11097],[11904,12255],[12272,12350],[12352,19903],[19968,42191],[43360,43391],[44032,55203],[57344,64255],[65024,65049],[65072,65135],[65281,65376],[65504,65510],[65533,65533],[94176,94177],[94208,101119],[110592,110895],[110960,111359],[126980,126980],[127183,127183],[127232,127242],[127248,127277],[127280,127337],[127344,127404],[127488,127490],[127504,127547],[127552,127560],[127568,127569],[127584,127589],[127744,127776],[127789,127797],[127799,127868],[127870,127891],[127904,127946],[127951,127955],[127968,127984],[127988,127988],[127992,128062],[128064,128064],[128066,128252],[128255,128317],[128331,128334],[128336,128359],[128378,128378],[128405,128406],[128420,128420],[128507,128591],[128640,128709],[128716,128716],[128720,128722],[128747,128748],[128756,128761],[129296,129342],[129344,129392],[129395,129398],[129402,129402],[129404,129442],[129456,129465],[129472,129474],[129488,129535],[131072,196605],[196608,262141],[917760,917999],[983040,1048573],[1048576,1114109]],K.wc.unambiguous=[[4352,4447],[8986,8987],[9001,9002],[9193,9196],[9200,9200],[9203,9203],[9725,9726],[9748,9749],[9800,9811],[9855,9855],[9875,9875],[9889,9889],[9898,9899],[9917,9918],[9924,9925],[9934,9934],[9940,9940],[9962,9962],[9970,9971],[9973,9973],[9978,9978],[9981,9981],[9989,9989],[9994,9995],[10024,10024],[10060,10060],[10062,10062],[10067,10069],[10071,10071],[10133,10135],[10160,10160],[10175,10175],[11035,11036],[11088,11088],[11093,11093],[11904,12255],[12272,12350],[12352,12871],[12880,19903],[19968,42191],[43360,43391],[44032,55203],[63744,64255],[65040,65049],[65072,65135],[65281,65376],[65504,65510],[94176,94177],[94208,101119],[110592,110895],[110960,111359],[126980,126980],[127183,127183],[127374,127374],[127377,127386],[127488,127490],[127504,127547],[127552,127560],[127568,127569],[127584,127589],[127744,127776],[127789,127797],[127799,127868],[127870,127891],[127904,127946],[127951,127955],[127968,127984],[127988,127988],[127992,128062],[128064,128064],[128066,128252],[128255,128317],[128331,128334],[128336,128359],[128378,128378],[128405,128406],[128420,128420],[128507,128591],[128640,128709],[128716,128716],[128720,128722],[128747,128748],[128756,128761],[129296,129342],[129344,129392],[129395,129398],[129402,129402],[129404,129442],[129456,129465],[129472,129474],[129488,129535],[131072,196605],[196608,262141]],K.wc.binaryTableSearch_=function(e,t){var r,o=0,i=t.length-1;if(e<t[o][0]||e>t[i][1])return!1;for(;i>=o;)if(e>t[r=Math.floor((o+i)/2)][1])o=r+1;else{if(!(e<t[r][0]))return!0;i=r-1}return!1},K.wc.isSpace=function(e){return K.wc.binaryTableSearch_(e,K.wc.combining)},K.wc.isCjkAmbiguous=function(e){return K.wc.binaryTableSearch_(e,K.wc.ambiguous)},K.wc.charWidth=function(e){return K.wc.regardCjkAmbiguous?K.wc.charWidthRegardAmbiguous(e):K.wc.charWidthDisregardAmbiguous(e)},K.wc.charWidthDisregardAmbiguous=function(e){return e<127?e>=32?1:0==e?K.wc.nulWidth:K.wc.controlWidth:e<160?K.wc.controlWidth:K.wc.isSpace(e)?0:K.wc.binaryTableSearch_(e,K.wc.unambiguous)?2:1},K.wc.charWidthRegardAmbiguous=function(e){return K.wc.isCjkAmbiguous(e)?K.wc.cjkAmbiguousWidth:K.wc.charWidthDisregardAmbiguous(e)},K.wc.strWidth=function(e){for(var t,r=0,o=0;o<e.length;){var i=e.codePointAt(o);if((t=K.wc.charWidth(i))<0)return-1;r+=t,o+=i<=65535?1:2}return r},K.wc.substr=function(e,t,r){var o,i,n=0;if(t)for(i=0;n<e.length;){const r=e.codePointAt(n);if((i+=K.wc.charWidth(r))>t)break;n+=r<=65535?1:2}if(null!=r){for(o=n,i=0;o<e.length;){const t=e.codePointAt(o);if((i+=K.wc.charWidth(t))>r)break;o+=t<=65535?1:2}return e.substring(n,o)}return e.substr(n)},K.wc.substring=function(e,t,r){return K.wc.substr(e,t,r-t)},K.resource.add("libdot/changelog/version","text/plain","2018-10-24"),K.resource.add("libdot/changelog/date","text/plain","1.24"),K.resource.add("hterm/audio/bell","audio/ogg;base64","T2dnUwACAAAAAAAAAADhqW5KAAAAAMFvEjYBHgF2b3JiaXMAAAAAAYC7AAAAAAAAAHcBAAAAAAC4AU9nZ1MAAAAAAAAAAAAA4aluSgEAAAAAesI3EC3//////////////////8kDdm9yYmlzHQAAAFhpcGguT3JnIGxpYlZvcmJpcyBJIDIwMDkwNzA5AAAAAAEFdm9yYmlzKUJDVgEACAAAADFMIMWA0JBVAAAQAABgJCkOk2ZJKaWUoSh5mJRISSmllMUwiZiUicUYY4wxxhhjjDHGGGOMIDRkFQAABACAKAmOo+ZJas45ZxgnjnKgOWlOOKcgB4pR4DkJwvUmY26mtKZrbs4pJQgNWQUAAAIAQEghhRRSSCGFFGKIIYYYYoghhxxyyCGnnHIKKqigggoyyCCDTDLppJNOOumoo4466ii00EILLbTSSkwx1VZjrr0GXXxzzjnnnHPOOeecc84JQkNWAQAgAAAEQgYZZBBCCCGFFFKIKaaYcgoyyIDQkFUAACAAgAAAAABHkRRJsRTLsRzN0SRP8ixREzXRM0VTVE1VVVVVdV1XdmXXdnXXdn1ZmIVbuH1ZuIVb2IVd94VhGIZhGIZhGIZh+H3f933f930gNGQVACABAKAjOZbjKaIiGqLiOaIDhIasAgBkAAAEACAJkiIpkqNJpmZqrmmbtmirtm3LsizLsgyEhqwCAAABAAQAAAAAAKBpmqZpmqZpmqZpmqZpmqZpmqZpmmZZlmVZlmVZlmVZlmVZlmVZlmVZlmVZlmVZlmVZlmVZlmVZlmVZQGjIKgBAAgBAx3Ecx3EkRVIkx3IsBwgNWQUAyAAACABAUizFcjRHczTHczzHczxHdETJlEzN9EwPCA1ZBQAAAgAIAAAAAABAMRzFcRzJ0SRPUi3TcjVXcz3Xc03XdV1XVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVYHQkFUAAAQAACGdZpZqgAgzkGEgNGQVAIAAAAAYoQhDDAgNWQUAAAQAAIih5CCa0JrzzTkOmuWgqRSb08GJVJsnuamYm3POOeecbM4Z45xzzinKmcWgmdCac85JDJqloJnQmnPOeRKbB62p0ppzzhnnnA7GGWGcc85p0poHqdlYm3POWdCa5qi5FJtzzomUmye1uVSbc84555xzzjnnnHPOqV6czsE54Zxzzonam2u5CV2cc875ZJzuzQnhnHPOOeecc84555xzzglCQ1YBAEAAAARh2BjGnYIgfY4GYhQhpiGTHnSPDpOgMcgppB6NjkZKqYNQUhknpXSC0JBVAAAgAACEEFJIIYUUUkghhRRSSCGGGGKIIaeccgoqqKSSiirKKLPMMssss8wyy6zDzjrrsMMQQwwxtNJKLDXVVmONteaec645SGultdZaK6WUUkoppSA0ZBUAAAIAQCBkkEEGGYUUUkghhphyyimnoIIKCA1ZBQAAAgAIAAAA8CTPER3RER3RER3RER3RER3P8RxREiVREiXRMi1TMz1VVFVXdm1Zl3Xbt4Vd2HXf133f141fF4ZlWZZlWZZlWZZlWZZlWZZlCUJDVgEAIAAAAEIIIYQUUkghhZRijDHHnINOQgmB0JBVAAAgAIAAAAAAR3EUx5EcyZEkS7IkTdIszfI0T/M00RNFUTRNUxVd0RV10xZlUzZd0zVl01Vl1XZl2bZlW7d9WbZ93/d93/d93/d93/d939d1IDRkFQAgAQCgIzmSIimSIjmO40iSBISGrAIAZAAABACgKI7iOI4jSZIkWZImeZZniZqpmZ7pqaIKhIasAgAAAQAEAAAAAACgaIqnmIqniIrniI4oiZZpiZqquaJsyq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7rukBoyCoAQAIAQEdyJEdyJEVSJEVyJAcIDVkFAMgAAAgAwDEcQ1Ikx7IsTfM0T/M00RM90TM9VXRFFwgNWQUAAAIACAAAAAAAwJAMS7EczdEkUVIt1VI11VItVVQ9VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV1TRN0zSB0JCVAAAZAAAjQQYZhBCKcpBCbj1YCDHmJAWhOQahxBiEpxAzDDkNInSQQSc9uJI5wwzz4FIoFURMg40lN44gDcKmXEnlOAhCQ1YEAFEAAIAxyDHEGHLOScmgRM4xCZ2UyDknpZPSSSktlhgzKSWmEmPjnKPSScmklBhLip2kEmOJrQAAgAAHAIAAC6HQkBUBQBQAAGIMUgophZRSzinmkFLKMeUcUko5p5xTzjkIHYTKMQadgxAppRxTzinHHITMQeWcg9BBKAAAIMABACDAQig0ZEUAECcA4HAkz5M0SxQlSxNFzxRl1xNN15U0zTQ1UVRVyxNV1VRV2xZNVbYlTRNNTfRUVRNFVRVV05ZNVbVtzzRl2VRV3RZV1bZl2xZ+V5Z13zNNWRZV1dZNVbV115Z9X9ZtXZg0zTQ1UVRVTRRV1VRV2zZV17Y1UXRVUVVlWVRVWXZlWfdVV9Z9SxRV1VNN2RVVVbZV2fVtVZZ94XRVXVdl2fdVWRZ+W9eF4fZ94RhV1dZN19V1VZZ9YdZlYbd13yhpmmlqoqiqmiiqqqmqtm2qrq1bouiqoqrKsmeqrqzKsq+rrmzrmiiqrqiqsiyqqiyrsqz7qizrtqiquq3KsrCbrqvrtu8LwyzrunCqrq6rsuz7qizruq3rxnHrujB8pinLpqvquqm6um7runHMtm0co6rqvirLwrDKsu/rui+0dSFRVXXdlF3jV2VZ921fd55b94WybTu/rfvKceu60vg5z28cubZtHLNuG7+t+8bzKz9hOI6lZ5q2baqqrZuqq+uybivDrOtCUVV9XZVl3zddWRdu3zeOW9eNoqrquirLvrDKsjHcxm8cuzAcXds2jlvXnbKtC31jyPcJz2vbxnH7OuP2daOvDAnHjwAAgAEHAIAAE8pAoSErAoA4AQAGIecUUxAqxSB0EFLqIKRUMQYhc05KxRyUUEpqIZTUKsYgVI5JyJyTEkpoKZTSUgehpVBKa6GU1lJrsabUYu0gpBZKaS2U0lpqqcbUWowRYxAy56RkzkkJpbQWSmktc05K56CkDkJKpaQUS0otVsxJyaCj0kFIqaQSU0mptVBKa6WkFktKMbYUW24x1hxKaS2kEltJKcYUU20txpojxiBkzknJnJMSSmktlNJa5ZiUDkJKmYOSSkqtlZJSzJyT0kFIqYOOSkkptpJKTKGU1kpKsYVSWmwx1pxSbDWU0lpJKcaSSmwtxlpbTLV1EFoLpbQWSmmttVZraq3GUEprJaUYS0qxtRZrbjHmGkppraQSW0mpxRZbji3GmlNrNabWam4x5hpbbT3WmnNKrdbUUo0txppjbb3VmnvvIKQWSmktlNJiai3G1mKtoZTWSiqxlZJabDHm2lqMOZTSYkmpxZJSjC3GmltsuaaWamwx5ppSi7Xm2nNsNfbUWqwtxppTS7XWWnOPufVWAADAgAMAQIAJZaDQkJUAQBQAAEGIUs5JaRByzDkqCULMOSepckxCKSlVzEEIJbXOOSkpxdY5CCWlFksqLcVWaykptRZrLQAAoMABACDABk2JxQEKDVkJAEQBACDGIMQYhAYZpRiD0BikFGMQIqUYc05KpRRjzknJGHMOQioZY85BKCmEUEoqKYUQSkklpQIAAAocAAACbNCUWByg0JAVAUAUAABgDGIMMYYgdFQyKhGETEonqYEQWgutddZSa6XFzFpqrbTYQAithdYySyXG1FpmrcSYWisAAOzAAQDswEIoNGQlAJAHAEAYoxRjzjlnEGLMOegcNAgx5hyEDirGnIMOQggVY85BCCGEzDkIIYQQQuYchBBCCKGDEEIIpZTSQQghhFJK6SCEEEIppXQQQgihlFIKAAAqcAAACLBRZHOCkaBCQ1YCAHkAAIAxSjkHoZRGKcYglJJSoxRjEEpJqXIMQikpxVY5B6GUlFrsIJTSWmw1dhBKaS3GWkNKrcVYa64hpdZirDXX1FqMteaaa0otxlprzbkAANwFBwCwAxtFNicYCSo0ZCUAkAcAgCCkFGOMMYYUYoox55xDCCnFmHPOKaYYc84555RijDnnnHOMMeecc845xphzzjnnHHPOOeecc44555xzzjnnnHPOOeecc84555xzzgkAACpwAAAIsFFkc4KRoEJDVgIAqQAAABFWYowxxhgbCDHGGGOMMUYSYowxxhhjbDHGGGOMMcaYYowxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY4wxxhhjjDHGGFtrrbXWWmuttdZaa6211lprrQBAvwoHAP8HG1ZHOCkaCyw0ZCUAEA4AABjDmHOOOQYdhIYp6KSEDkIIoUNKOSglhFBKKSlzTkpKpaSUWkqZc1JSKiWlllLqIKTUWkottdZaByWl1lJqrbXWOgiltNRaa6212EFIKaXWWostxlBKSq212GKMNYZSUmqtxdhirDGk0lJsLcYYY6yhlNZaazHGGGstKbXWYoy1xlprSam11mKLNdZaCwDgbnAAgEiwcYaVpLPC0eBCQ1YCACEBAARCjDnnnHMQQgghUoox56CDEEIIIURKMeYcdBBCCCGEjDHnoIMQQgghhJAx5hx0EEIIIYQQOucchBBCCKGEUkrnHHQQQgghlFBC6SCEEEIIoYRSSikdhBBCKKGEUkopJYQQQgmllFJKKaWEEEIIoYQSSimllBBCCKWUUkoppZQSQgghlFJKKaWUUkIIoZRQSimllFJKCCGEUkoppZRSSgkhhFBKKaWUUkopIYQSSimllFJKKaUAAIADBwCAACPoJKPKImw04cIDUGjISgCADAAAcdhq6ynWyCDFnISWS4SQchBiLhFSijlHsWVIGcUY1ZQxpRRTUmvonGKMUU+dY0oxw6yUVkookYLScqy1dswBAAAgCAAwECEzgUABFBjIAIADhAQpAKCwwNAxXAQE5BIyCgwKx4Rz0mkDABCEyAyRiFgMEhOqgaJiOgBYXGDIB4AMjY20iwvoMsAFXdx1IIQgBCGIxQEUkICDE2544g1PuMEJOkWlDgIAAAAA4AAAHgAAkg0gIiKaOY4Ojw+QEJERkhKTE5QAAAAAALABgA8AgCQFiIiIZo6jw+MDJERkhKTE5AQlAAAAAAAAAAAACAgIAAAAAAAEAAAACAhPZ2dTAAQYOwAAAAAAAOGpbkoCAAAAmc74DRgyNjM69TAzOTk74dnLubewsbagmZiNp4d0KbsExSY/I3XUTwJgkeZdn1HY4zoj33/q9DFtv3Ui1/jmx7lCUtPt18/sYf9MkgAsAGRBd3gMGP4sU+qCPYBy9VrA3YqJosW3W2/ef1iO/u3cg8ZG/57jU+pPmbGEJUgkfnaI39DbPqxddZphbMRmCc5rKlkUMkyx8iIoug5dJv1OYH9a59c+3Gevqc7Z2XFdDjL/qHztRfjWEWxJ/aiGezjohu9HsCZdQBKbiH0VtU/3m85lDG2T/+xkZcYnX+E+aqzv/xTgOoTFG+x7SNqQ4N+oAABSxuVXw77Jd5bmmTmuJakX7509HH0kGYKvARPpwfOSAPySPAc2EkneDwB2HwAAJlQDYK5586N79GJCjx4+p6aDUd27XSvRyXLJkIC5YZ1jLv5lpOhZTz0s+DmnF1diptrnM6UDgIW11Xh8cHTd0/SmbgOAdxcyWwMAAGIrZ3fNSfZbzKiYrK4+tPqtnMVLOeWOG2kVvUY+p2PJ/hkCl5aFRO4TLGYPZcIU3vYM1hohS4jHFlnyW/2T5J7kGsShXWT8N05V+3C/GPqJ1QdWisGPxEzHqXISBPIinWDUt7IeJv/f5OtzBxpTzZZQ+CYEhHXfqG4aABQli72GJhN4oJv+hXcApAJSErAW8G2raAX4NUcABnVt77CzZAB+LsHcVe+Q4h+QB1wh/ZrJTPxSBdI8mgTeAdTsQOoFUEng9BHcVPhxSRRYkKWZJXOFYP6V4AEripJoEjXgA2wJRZHSExmJDm8F0A6gEXsg5a4ZsALItrMB7+fh7UKLvYWSdtsDwFf1mzYzS1F82N1h2Oyt2e76B1QdS0SAsQigLPMOgJS9JRC7hFXA6kUsLFNKD5cA5cTRvgSqPc3Fl99xW3QTi/MHR8DEm6WnvaVQATwRqRKjywQ9BrrhugR2AKTsPQeQckrAOgDOhbTESyrXQ50CkNpXdtWjW7W2/3UjeX3U95gIdalfRAoAmqUEiwp53hCdcCwlg47fcbfzlmQMAgaBkh7c+fcDgF+ifwDXfzegLPcLYJsAAJQArTXjnh/uXGy3v1Hk3pV6/3t5ruW81f6prfbM2Q3WNVy98BwUtbCwhFhAWuPev6Oe/4ZaFQUcgKrVs4defzh1TADA1DEh5b3VlDaECw5b+bPfkKos3tIAue3vJZOih3ga3l6O3PSfIkrLv0PAS86PPdL7g8oc2KteNFKKzKRehOv2gJoFLBPXmaXvPBQILgJon0bbWBszrYZYYwE7jl2j+vTdU7Vpk21LiU0QajPkywAAHqbUC0/YsYOdb4e6BOp7E0cCi04Ao/TgD8ZVAMid6h/A8IeBNkp6/xsAACZELEYIk+yvI6Qz1NN6lIftB/6IMWjWJNOqPTMedAmyaj6Es0QBklJpiSWWHnQ2CoYbGWAmt+0gLQBFKCBnp2QUUQZ/1thtZDBJUpFWY82z34ocorB62oX7qB5y0oPAv/foxH25wVmgIHf2xFOr8leZcBq1Kx3ZvCq9Bga639AxuHuPNL/71YCF4EywJpqHFAX6XF0sjVbuANnvvdLcrufYwOM/iDa6iA468AYAAB6mNBMXcgTD8HSRqJ4vw8CjAlCEPACASlX/APwPOJKl9xQAAAPmnev2eWp33Xgyw3Dvfz6myGk3oyP8YTKsCOvzAgALQi0o1c6Nzs2O2Pg2h4ACIJAgAGP0aNn5x0BDgVfH7u2TtyfDcRIuYAyQhBF/lvSRAttgA6TPbWZA9gaUrZWAUEAA+Dx47Q3/r87HxUUqZmB0BmUuMlojFjHt1gDunnvuX8MImsjSq5WkzSzGS62OEIlOufWWezxWpv6FBgDgJVltfXFYtNAAnqU0xQoD0YLiXo5cF5QV4CnY1tBLAkZCOABAhbk/AM+/AwSCCdlWAAAMcFjS7owb8GVDzveDiZvznbt2tF4bL5odN1YKl88TAEABCZvufq9YCTBtMwVAQUEAwGtNltzSaHvADYC3TxLVjqiRA+OZAMhzcqEgRcAOwoCgvdTxsTHLQEF6+oOb2+PAI8ciPQcXg7pOY+LjxQSv2fjmFuj34gGwz310/bGK6z3xgT887eomWULEaDd04wHetYxdjcgV2SxvSwn0VoZXJRqkRC5ASQ/muVoAUsX7AgAQMBNaVwAAlABRxT/1PmfqLqSRNDbhXb07berpB3b94jpuWEZjBCD2OcdXFpCKEgCDfcFPMw8AAADUwT4lnUm50lmwrpMMhPQIKj6u0E8fr2vGBngMNdIlrZsigjahljud6AFVg+tzXwUnXL3TJLpajaWKA4VAAAAMiFfqJgKAZ08XrtS3dxtQNYcpPvYEG8ClvrQRJgBephwnNWJjtGqmp6VEPSvBe7EBiU3qgJbQAwD4Le8LAMDMhHbNAAAlgK+tFs5O+YyJc9yCnJa3rxLPulGnxwsXV9Fsk2k4PisCAHC8FkwbGE9gJQAAoMnyksj0CdFMZLLgoz8M+FxziwYBgIx+zHiCBAKAlBKNpF1sO9JpVcyEi9ar15YlHgrut5fPJnkdJ6vEwZPyAHQBIEDUrlMcBAAd2KAS0Qq+JwRsE4AJZtMnAD6GnOYwYlOIZvtzUNdjreB7fiMkWI0CmBB6AIAKc38A9osEFlTSGECB+cbeRDC0aRpLHqNPplcK/76Lxn2rpmqyXsYJWRi/FQAAAKBQk9MCAOibrQBQADCDsqpooPutd+05Ce9g6iEdiYXgVmQAI4+4wskEBEiBloNQ6Ki0/KTQ0QjWfjxzi+AeuXKoMjEVfQOZzr0y941qLgM2AExvbZOqcxZ6J6krlrj4y2j9AdgKDx6GnJsVLhbc42uq584+ouSdNBpoCiCVHrz+WzUA/DDtD8ATgA3h0lMCAAzcFv+S+fSSNkeYWlTpb34mf2RfmqqJeMeklhHAfu7VoAEACgAApKRktL+KkQDWMwYCUAAAAHCKsp80xhp91UjqQBw3x45cetqkjQEyu3G9B6N+R650Uq8OVig7wOm6Wun0ea4lKDPoabJs6aLqgbhPzpv4KR4iODilw88ZpY7q1IOMcbASAOAVtmcCnobcrkG4KGS7/ZnskVWRNF9J0RUHKOnByy9WA8Dv6L4AAARMCQUA4GritfVM2lcZfH3Q3T/vZ47J2YHhcmBazjfdyuV25gLAzrc0cwAAAAAYCh6PdwAAAGyWjFW4yScjaWa2mGcofHxWxewKALglWBpLUvwwk+UOh5eNGyUOs1/EF+pZr+ud5OzoGwYdAABg2p52LiSgAY/ZVlOmilEgHn6G3OcwYjzI7vOj1t6xsx4S3lBY96EUQBF6AIBAmPYH4PoGYCoJAADWe+OZJZi7/x76/yH7Lzf9M5XzRKnFPmveMsilQHwVAAAAAKB3LQD8PCIAAADga0QujBLywzeJ4a6Z/ERVBAUlAEDqvoM7BQBAuAguzFqILtmjH3Kd4wfKobnOhA3z85qWoRPm9hwoOHoDAAlCbwDAA56FHAuXflHo3fe2ttG9XUDeA9YmYCBQ0oPr/1QC8IvuCwAAApbUAQCK22MmE3O78VAbHQT9PIPNoT9zNc3l2Oe7TAVLANBufT8MAQAAAGzT4PS8AQAAoELGHb2uaCwwEv1EWhFriUkbAaAZ27/fVZnTZXbWz3BwWpjUaMZKRj7dZ0J//gUeTdpVEwAAZOFsNxKAjQSgA+ABPoY8Jj5y2wje81jsXc/1TOQWTDYZBmAkNDiqVwuA2NJ9AQAAEBKAt9Vrsfs/2N19MO91S9rd8EHTZHnzC5MYmfQEACy/FBcAAADA5c4gi4z8RANs/m6FNXVo9DV46JG1BBDukqlw/Va5G7QbuGVSI+2aZaoLXJrdVj2zlC9Z5QEAEFz/5QzgVZwAAAAA/oXcxyC6WfTu+09Ve/c766J4VTAGUFmA51+VANKi/QPoPwYgYAkA715OH4S0s5KDHvj99MMq8TPFc3roKZnGOoT1bmIhVgc7XAMBAAAAAMAW1VbQw3gapzOpJd+Kd2fc4iSO62fJv9+movui1wUNPAj059N3OVxzk4gV73PmE8FIA2F5mRq37Evc76vLXfF4rD5UJJAw46hW6LZCb5sNLdx+kzMCAAB+hfy95+965ZCLP7B3/VlTHCvDEKtQhTm4KiCgAEAbrfbWTPssAAAAXpee1tVrozYYn41wD1aeYtkKfswN5/SXPO0JDnhO/4laUortv/s412fybe/nONdncoCHnBVliu0CQGBWlPY/5Kwom2L/kruPM6Q7oz4tvDQy+bZ3HzOi+gNHA4DZEgA="),K.resource.add("hterm/images/icon-96","image/png;base64","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"),K.resource.add("hterm/concat/date","text/plain","Mon, 26 Nov 2018 08:50:09 +0000"),K.resource.add("hterm/changelog/version","text/plain","2018-10-24"),K.resource.add("hterm/changelog/date","text/plain","1.82"),K.resource.add("hterm/git/HEAD","text/plain","03ee0980444a38a97ef947b2272e44fdb3bdf5f5"),K.rtdep("lib.Storage");var U={windowType:null,os:null,zoomWarningMessage:"ZOOM != 100%",notifyCopyMessage:"✂",desktopNotificationTitle:"♪ %(title) ♪",testDeps:["hterm.AccessibilityReader.Tests","hterm.ScrollPort.Tests","hterm.Screen.Tests","hterm.Terminal.Tests","hterm.VT.Tests","hterm.VT.CannedTests"]};K.registerInit("hterm",(function(e){function t(t){U.os=t,e()}function r(){K.i18n.getAcceptLanguages(e=>{U.messageManager||(U.messageManager=new K.MessageManager(e)),K.f.getOs().then(t).catch(t)})}function o(e){U.windowType=e.type,r()}U.defaultStorage||(window.chrome&&chrome.storage&&chrome.storage.sync?U.defaultStorage=new K.Storage.Chrome(chrome.storage.sync):U.defaultStorage=new K.Storage.Local);var i=!1;if(window.chrome&&chrome.runtime&&chrome.runtime.getManifest){var n=chrome.runtime.getManifest();i=n.app&&n.app.background}i?setTimeout(o.bind(null,{type:"popup"}),0):window.chrome&&chrome.tabs?chrome.tabs.getCurrent((function(e){e&&window.chrome?chrome.windows.get(e.windowId,null,o):(U.windowType="normal",r())})):setTimeout(o.bind(null,{type:"normal"}),0)})),U.getClientSize=function(e){return e.getBoundingClientRect()},U.getClientWidth=function(e){return e.getBoundingClientRect().width},U.getClientHeight=function(e){return e.getBoundingClientRect().height},U.copySelectionToClipboard=function(e){try{e.execCommand("copy")}catch(e){}},U.pasteFromClipboard=function(e){try{return e.execCommand("paste")}catch(e){return!1}},U.msg=function(e,t=[],r){return U.messageManager.get("HTERM_"+e,t,r)},U.notify=function(e){var t=(e,t)=>void 0!==e?e:t;null==e&&(e={});var r={body:e.body,icon:t(e.icon,K.resource.getDataUrl("hterm/images/icon-96"))},o=t(e.title,window.document.title);o||(o="hterm"),o=K.f.replaceVars(U.desktopNotificationTitle,{title:o});var i=new Notification(o,r);return i.onclick=function(){window.focus(),this.close()},i},U.openUrl=function(e){if(window.chrome&&chrome.browser&&chrome.browser.openTab)chrome.browser.openTab({url:e});else{window.open(e,"_blank").focus()}},U.Size=function(e,t){this.width=e,this.height=t},U.Size.prototype.resize=function(e,t){this.width=e,this.height=t},U.Size.prototype.clone=function(){return new U.Size(this.width,this.height)},U.Size.prototype.setTo=function(e){this.width=e.width,this.height=e.height},U.Size.prototype.equals=function(e){return this.width==e.width&&this.height==e.height},U.Size.prototype.toString=function(){return"[hterm.Size: "+this.width+", "+this.height+"]"},U.RowCol=function(e,t,r){this.row=e,this.column=t,this.overflow=!!r},U.RowCol.prototype.move=function(e,t,r){this.row=e,this.column=t,this.overflow=!!r},U.RowCol.prototype.clone=function(){return new U.RowCol(this.row,this.column,this.overflow)},U.RowCol.prototype.setTo=function(e){this.row=e.row,this.column=e.column,this.overflow=e.overflow},U.RowCol.prototype.equals=function(e){return this.row==e.row&&this.column==e.column&&this.overflow==e.overflow},U.RowCol.prototype.toString=function(){return"[hterm.RowCol: "+this.row+", "+this.column+", "+this.overflow+"]"},U.AccessibilityReader=function(e){this.document_=e.ownerDocument;const t=this.document_.createElement("div");t.id="hterm:accessibility-live-region",t.style.cssText="position: absolute;\n                              width: 0; height: 0;\n                              overflow: hidden;\n                              left: 0; top: 0;",e.appendChild(t),this.accessibilityEnabled=!1,this.liveElement_=this.document_.createElement("p"),this.liveElement_.setAttribute("aria-live","polite"),this.liveElement_.setAttribute("aria-label",""),t.appendChild(this.liveElement_),this.assertiveLiveElement_=this.document_.createElement("p"),this.assertiveLiveElement_.setAttribute("aria-live","assertive"),this.assertiveLiveElement_.setAttribute("aria-label",""),t.appendChild(this.assertiveLiveElement_),this.queue_=[],this.nextReadTimer_=null,this.cursorIsChanging_=!1,this.cursorChangeQueue_=[],this.lastCursorRowString_=null,this.lastCursorRow_=null,this.lastCursorColumn_=null,this.hasUserGesture=!1},U.AccessibilityReader.DELAY=50,U.AccessibilityReader.prototype.setAccessibilityEnabled=function(e){e||this.clear(),this.accessibilityEnabled=e},U.AccessibilityReader.prototype.decorate=function(e){["keydown","keypress","keyup","textInput"].forEach(t=>{e.addEventListener(t,()=>{this.hasUserGesture=!0})})},U.AccessibilityReader.prototype.beforeCursorChange=function(e,t,r){this.accessibilityEnabled&&this.hasUserGesture&&!this.cursorIsChanging_&&(this.cursorIsChanging_=!0,this.lastCursorRowString_=e,this.lastCursorRow_=t,this.lastCursorColumn_=r)},U.AccessibilityReader.prototype.afterCursorChange=function(e,t,r){if(this.cursorIsChanging_){if(this.cursorIsChanging_=!1,!this.announceAction_(e,t,r))for(let e=0;e<this.cursorChangeQueue_.length;++e)this.announce(this.cursorChangeQueue_[e]);this.cursorChangeQueue_=[],this.lastCursorRowString_=null,this.lastCursorRow_=null,this.lastCursorColumn_=null,this.hasUserGesture=!1}},U.AccessibilityReader.prototype.announce=function(e){if(this.accessibilityEnabled)if(this.cursorIsChanging_)this.cursorChangeQueue_.push(e);else if("\n"==e&&this.queue_.length>0)this.queue_.push("");else{if(0==this.queue_.length)this.queue_.push(e);else{let t="";0!=this.queue_[this.queue_.length-1].length&&(t=" "),this.queue_[this.queue_.length-1]+=t+e}if(!this.nextReadTimer_){if(1!=this.queue_.length)throw new Error("Expected only one item in queue_ or nextReadTimer_ to be running.");this.nextReadTimer_=setTimeout(this.addToLiveRegion_.bind(this),U.AccessibilityReader.DELAY)}}},U.AccessibilityReader.prototype.assertiveAnnounce=function(e){this.hasUserGesture&&" "==e&&(e=U.msg("SPACE_CHARACTER",[],"Space")),(e=e.trim())==this.assertiveLiveElement_.getAttribute("aria-label")&&(e="\n"+e),this.clear(),this.assertiveLiveElement_.setAttribute("aria-label",e)},U.AccessibilityReader.prototype.newLine=function(){this.announce("\n")},U.AccessibilityReader.prototype.clear=function(){this.liveElement_.setAttribute("aria-label",""),this.assertiveLiveElement_.setAttribute("aria-label",""),clearTimeout(this.nextReadTimer_),this.nextReadTimer_=null,this.queue_=[],this.cursorIsChanging_=!1,this.cursorChangeQueue_=[],this.lastCursorRowString_=null,this.lastCursorRow_=null,this.lastCursorColumn_=null,this.hasUserGesture=!1},U.AccessibilityReader.prototype.announceAction_=function(e,t,r){if(this.lastCursorRow_!=t)return!1;if(this.lastCursorRowString_==e){if(this.lastCursorColumn_!=r&&""==this.cursorChangeQueue_.join("").trim()){const e=Math.min(this.lastCursorColumn_,r),t=Math.abs(r-this.lastCursorColumn_);return this.assertiveAnnounce(K.wc.substr(this.lastCursorRowString_,e,t)),!0}return!1}if(this.lastCursorRowString_!=e){if(this.lastCursorColumn_+1==r&&" "==K.wc.substr(e,r-1,1)&&this.cursorChangeQueue_.length>0&&" "==this.cursorChangeQueue_[0])return this.assertiveAnnounce(" "),!0;const t=r;if(K.wc.strWidth(e)<=K.wc.strWidth(this.lastCursorRowString_)&&K.wc.substr(this.lastCursorRowString_,0,t)==K.wc.substr(e,0,t)){let r=K.wc.strWidth(e);for(;r>0&&(r!=t&&" "==K.wc.substr(e,r-1,1));--r);const o=K.wc.strWidth(this.lastCursorRowString_)-r,i=r-t;if(K.wc.substr(this.lastCursorRowString_,t+o,i)==K.wc.substr(e,t,i)){const e=K.wc.substr(this.lastCursorRowString_,t,o);if(""!=e)return this.assertiveAnnounce(e),!0}}return!1}return!1},U.AccessibilityReader.prototype.addToLiveRegion_=function(){this.nextReadTimer_=null;let e=this.queue_.join("\n").trim();e==this.liveElement_.getAttribute("aria-label")&&(e="\n"+e),this.liveElement_.setAttribute("aria-label",e),this.queue_=[]},U.ContextMenu=function(){this.document_=null,this.element_=null,this.menu_=[]},U.ContextMenu.SEPARATOR={},U.ContextMenu.prototype.setDocument=function(e){this.element_&&(this.element_.remove(),this.element_=null),this.document_=e,this.regenerate_(),this.document_.body.appendChild(this.element_)},U.ContextMenu.prototype.regenerate_=function(){for(this.element_?this.hide():(this.element_=this.document_.createElement("menu"),this.element_.id="hterm:context-menu",this.element_.style.cssText="\n        display: none;\n        border: solid 1px;\n        position: absolute;\n    ");this.element_.firstChild;)this.element_.removeChild(this.element_.firstChild);this.menu_.forEach(([e,t])=>{const r=this.document_.createElement("menuitem");e===U.ContextMenu.SEPARATOR?(r.innerHTML="<hr>",r.className="separator"):(r.innerText=e,r.addEventListener("mousedown",(function(e){e.preventDefault(),t(e)}))),this.element_.appendChild(r)})},U.ContextMenu.prototype.setItems=function(e){this.menu_=e,this.regenerate_()},U.ContextMenu.prototype.show=function(e,t){if(0==this.menu_.length)return;t&&(this.element_.style.backgroundColor=t.getBackgroundColor(),this.element_.style.color=t.getForegroundColor(),this.element_.style.fontSize=t.getFontSize(),this.element_.style.fontFamily=t.getFontFamily()),this.element_.style.top=`${e.clientY}px`,this.element_.style.left=`${e.clientX}px`;const r=U.getClientSize(this.document_.body);this.element_.style.display="block";const o=U.getClientSize(this.element_),i=Math.max(0,r.height-o.height),n=Math.max(0,r.width-o.width);i<e.clientY&&(this.element_.style.top=`${i}px`),n<e.clientX&&(this.element_.style.left=`${n}px`)},U.ContextMenu.prototype.hide=function(){this.element_&&(this.element_.style.display="none")},K.rtdep("lib.f"),U.Frame=function(e,t,r){this.terminal_=e,this.div_=e.div_,this.url=t,this.options=r||{},this.iframe_=null,this.container_=null,this.messageChannel_=null},U.Frame.prototype.onMessage_=function(e){switch(e.data.name){case"ipc-init-ok":return void this.sendTerminalInfo_();case"terminal-info-ok":return this.container_.style.display="flex",this.postMessage("visible"),this.messageChannel_.port1.onmessage=this.onMessage.bind(this),void this.onLoad();default:return void console.log("Unknown message from frame:",e.data)}},U.Frame.prototype.onMessage=function(){},U.Frame.prototype.onLoad_=function(){this.messageChannel_=new MessageChannel,this.messageChannel_.port1.onmessage=this.onMessage_.bind(this),this.messageChannel_.port1.start(),this.iframe_.contentWindow.postMessage({name:"ipc-init",argv:[{messagePort:this.messageChannel_.port2}]},this.url,[this.messageChannel_.port2])},U.Frame.prototype.onLoad=function(){},U.Frame.prototype.sendTerminalInfo_=function(){K.i18n.getAcceptLanguages(function(e){this.postMessage("terminal-info",[{acceptLanguages:e,foregroundColor:this.terminal_.getForegroundColor(),backgroundColor:this.terminal_.getBackgroundColor(),cursorColor:this.terminal_.getCursorColor(),fontSize:this.terminal_.getFontSize(),fontFamily:this.terminal_.getFontFamily(),baseURL:K.f.getURL("/")}])}.bind(this))},U.Frame.prototype.onCloseClicked_=function(){this.close()},U.Frame.prototype.close=function(){this.container_&&this.container_.parentNode&&(this.container_.parentNode.removeChild(this.container_),this.onClose())},U.Frame.prototype.onClose=function(){},U.Frame.prototype.postMessage=function(e,t){if(!this.messageChannel_)throw new Error("Message channel is not set up.");this.messageChannel_.port1.postMessage({name:e,argv:t})},U.Frame.prototype.show=function(){var e=this;function t(t,r){return t in e.options?e.options[t]:r}e=this;if(this.container_&&this.container_.parentNode)console.error("Frame already visible");else{var r=U.getClientSize(this.div_),o=t("width",640),i=t("height",480),n=(r.width,r.height,this.terminal_.document_),s=this.container_=n.createElement("div");s.style.cssText="position: absolute;display: none;flex-direction: column;top: 10%;left: 4%;width: 90%;height: 80%;min-height: 20%;max-height: 80%;box-shadow: 0 0 2px "+this.terminal_.getForegroundColor()+";border: 2px "+this.terminal_.getForegroundColor()+" solid;";var a=this.iframe_=n.createElement("iframe");a.onload=this.onLoad_.bind(this),a.style.cssText="display: flex;flex: 1;width: 100%",a.setAttribute("src",this.url),a.setAttribute("seamless",!0),s.appendChild(a),this.div_.appendChild(s)}},K.rtdep("hterm.Keyboard.KeyMap"),U.Keyboard=function(e){this.terminal=e,this.keyboardElement_=null,this.handlers_=[["focusout",this.onFocusOut_.bind(this)],["keydown",this.onKeyDown_.bind(this)],["keypress",this.onKeyPress_.bind(this)],["keyup",this.onKeyUp_.bind(this)],["textInput",this.onTextInput_.bind(this)]],this.keyMap=new U.Keyboard.KeyMap(this),this.bindings=new U.Keyboard.Bindings(this),this.altGrMode="none",this.shiftInsertPaste=!0,this.homeKeysScroll=!1,this.pageKeysScroll=!1,this.ctrlPlusMinusZeroZoom=!0,this.ctrlCCopy=!1,this.ctrlVPaste=!1,this.applicationKeypad=!1,this.applicationCursor=!1,this.backspaceSendsBackspace=!1,this.characterEncoding="utf-8",this.metaSendsEscape=!0,this.passMetaV=!0,this.altSendsWhat="escape",this.altIsMeta=!1,this.altBackspaceIsMetaBackspace=!1,this.altKeyPressed=0,this.mediaKeysAreFKeys=!1,this.previousAltSendsWhat_=null},U.Keyboard.KeyActions={CANCEL:K.f.createEnum("CANCEL"),DEFAULT:K.f.createEnum("DEFAULT"),PASS:K.f.createEnum("PASS"),STRIP:K.f.createEnum("STRIP")},U.Keyboard.prototype.encode=function(e){return"utf-8"==this.characterEncoding?this.terminal.vt.encodeUTF8(e):e},U.Keyboard.prototype.installKeyboard=function(e){if(e!=this.keyboardElement_){e&&this.keyboardElement_&&this.installKeyboard(null);for(var t=0;t<this.handlers_.length;t++){var r=this.handlers_[t];e?e.addEventListener(r[0],r[1]):this.keyboardElement_.removeEventListener(r[0],r[1])}this.keyboardElement_=e}},U.Keyboard.prototype.uninstallKeyboard=function(){this.installKeyboard(null)},U.Keyboard.prototype.onTextInput_=function(e){e.data&&this.terminal.onVTKeystroke(e.data)},U.Keyboard.prototype.onKeyPress_=function(e){if((!e.ctrlKey&&!e.metaKey||99!=e.keyCode&&118!=e.keyCode)&&9!=e.keyCode){if(e.altKey&&"browser-key"==this.altSendsWhat&&0==e.charCode){var t=String.fromCharCode(e.keyCode);e.shiftKey||(t=t.toLowerCase()),t.charCodeAt(0)+128}else e.charCode>=32&&(t=e.charCode);t&&this.terminal.onVTKeystroke(String.fromCharCode(t)),e.preventDefault(),e.stopPropagation()}},U.Keyboard.prototype.preventChromeAppNonCtrlShiftDefault_=function(e){window.chrome&&window.chrome.app&&window.chrome.app.window&&(e.ctrlKey&&e.shiftKey||e.preventDefault())},U.Keyboard.prototype.onFocusOut_=function(e){this.altKeyPressed=0},U.Keyboard.prototype.onKeyUp_=function(e){18==e.keyCode&&(this.altKeyPressed=this.altKeyPressed&~(1<<e.location-1)),27==e.keyCode&&this.preventChromeAppNonCtrlShiftDefault_(e)},U.Keyboard.prototype.onKeyDown_=function(e){18==e.keyCode&&(this.altKeyPressed=this.altKeyPressed|1<<e.location-1),27==e.keyCode&&this.preventChromeAppNonCtrlShiftDefault_(e);var t=this.keyMap.keyDefs[e.keyCode];t||(console.warn(`No definition for key ${e.key} (keyCode ${e.keyCode})`),t=this.keyMap.keyDefs[0],this.keyMap.addKeyDef(e.keyCode,t));var r=null,o=this;function i(n){r=n;var s=t[n];return"function"==typeof s&&(s=s.apply(o.keyMap,[e,t])),s===a&&"normal"!=n&&(s=i("normal")),s}var n,s=U.Keyboard.KeyActions.CANCEL,a=U.Keyboard.KeyActions.DEFAULT,l=U.Keyboard.KeyActions.PASS,c=U.Keyboard.KeyActions.STRIP,u=e.ctrlKey,h=!this.altIsMeta&&e.altKey,d=this.altIsMeta&&e.altKey||e.metaKey,p=!/^\[\w+\]$/.test(t.keyCap);switch(this.altGrMode){case"ctrl-alt":p&&u&&h&&(u=!1,h=!1);break;case"right-alt":p&&2&this.terminal.keyboard.altKeyPressed&&(u=!1,h=!1);break;case"left-alt":p&&1&this.terminal.keyboard.altKeyPressed&&(u=!1,h=!1)}n=i(u?"control":h?"alt":d?"meta":"normal");var f=!e.maskShiftKey&&e.shiftKey,g={keyCode:e.keyCode,shift:e.shiftKey,ctrl:u,alt:h,meta:d},m=this.bindings.getBinding(g);if(m&&(f=u=h=d=!1,r="normal","function"==typeof(n=m.action)&&(n=n.call(this,this.terminal,g))),h&&"browser-key"==this.altSendsWhat&&n==a&&(n=l),n!==l&&(n!==a||u||h||d)&&(n===c&&(h=u=!1,"function"==typeof(n=t.normal)&&(n=n.apply(this.keyMap,[e,t])),n==a&&2==t.keyCap.length&&(n=t.keyCap.substr(f?1:0,1))),e.preventDefault(),e.stopPropagation(),n!==s))if(n===a||"string"==typeof n){if("control"==r?u=!1:"alt"==r?h=!1:"meta"==r&&(d=!1),"["==n.substr(0,2)&&(h||u||f||d)){let e=1;f&&(e+=1),h&&(e+=2),u&&(e+=4),d&&(e+=8);let t=";"+e;n=3==n.length?"[1"+t+n.substr(2,1):n.substr(0,n.length-1)+t+n.substr(n.length-1)}else{if(n===a)if(n=t.keyCap.substr(f?1:0,1),u)(y=t.keyCap.substr(0,1).charCodeAt(0))>=64&&y<=95&&(n=String.fromCharCode(y-64));if(h&&"8-bit"==this.altSendsWhat&&1==n.length){var y=n.charCodeAt(0)+128;n=String.fromCharCode(y)}(h&&"escape"==this.altSendsWhat||d&&this.metaSendsEscape)&&(n=""+n)}this.terminal.onVTKeystroke(n)}else console.warn("Invalid action: "+JSON.stringify(n))},U.Keyboard.Bindings=function(){this.bindings_={}},U.Keyboard.Bindings.prototype.clear=function(){this.bindings_={}},U.Keyboard.Bindings.prototype.addBinding_=function(e,t){var r=null,o=this.bindings_[e.keyCode];if(o)for(var i=0;i<o.length;i++)if(o[i].keyPattern.matchKeyPattern(e)){r=o[i];break}r?r.action=t:(r={keyPattern:e,action:t},o?(this.bindings_[e.keyCode].push(r),o.sort((function(e,t){return U.Keyboard.KeyPattern.sortCompare(e.keyPattern,t.keyPattern)}))):this.bindings_[e.keyCode]=[r])},U.Keyboard.Bindings.prototype.addBinding=function(e,t){if("string"==typeof e){var r,o=new U.Parser;o.reset(e);try{r=o.parseKeySequence()}catch(e){return void console.error(e)}if(o.isComplete()){if("string"==typeof t){o.reset(t);try{t=o.parseKeyAction()}catch(e){return void console.error(e)}}o.isComplete()?this.addBinding_(new U.Keyboard.KeyPattern(r),t):console.error(o.error("Expected end of sequence: "+r))}else console.error(o.error("Expected end of sequence: "+r))}else this.addBinding_(e,t)},U.Keyboard.Bindings.prototype.addBindings=function(e){for(var t in e)this.addBinding(t,e[t])},U.Keyboard.Bindings.prototype.getBinding=function(e){var t=this.bindings_[e.keyCode];if(!t)return null;for(var r=0;r<t.length;r++){var o=t[r];if(o.keyPattern.matchKeyDown(e))return o}return null},K.rtdep("hterm.Keyboard.KeyActions"),U.Keyboard.KeyMap=function(e){this.keyboard=e,this.keyDefs={},this.reset()},U.Keyboard.KeyMap.prototype.addKeyDef=function(e,t){e in this.keyDefs&&console.warn("Duplicate keyCode: "+e),this.keyDefs[e]=t},U.Keyboard.KeyMap.prototype.addKeyDefs=function(e){for(var t=0;t<arguments.length;t++)this.addKeyDef(arguments[t][0],{keyCap:arguments[t][1],normal:arguments[t][2],control:arguments[t][3],alt:arguments[t][4],meta:arguments[t][5]})},U.Keyboard.KeyMap.prototype.reset=function(){this.keyDefs={};var e=this;function t(t,r,o){return"function"==typeof t?t.apply(e,[r,o]):t}function r(r,o){return function(i,n){return t(i.shiftKey||i.ctrlKey||i.altKey||i.metaKey||!e.keyboard.applicationCursor?r:o,i,n)}}function o(r,o){return function(i,n){return t(e.keyboard.backspaceSendsBackspace?o:r,i,n)}}function i(e,r){return function(o,i){var n=o.shiftKey?r:e;return o.maskShiftKey=!0,t(n,o,i)}}function n(e,r){return function(o,i){return t(o.altKey?r:e,o,i)}}function s(e,r){return function(o,i){return t(o.shiftKey||o.ctrlKey||o.altKey||o.metaKey?r:e,o,i)}}function a(e){return String.fromCharCode(e.charCodeAt(0)-64)}function l(e){return function(t,r){return this[e](t,r)}}function c(r){return function(o,i){return e.keyboard.mediaKeysAreFKeys?t(r,o,i):166==o.keyCode||167==o.keyCode||168==o.keyCode?U.Keyboard.KeyActions.CANCEL:U.Keyboard.KeyActions.PASS}}if(window.navigator&&navigator.userAgent)if(navigator.userAgent.includes("Firefox")){var u=59,h=61,d=173;this.addKeyDefs([171,"+*",f,l("onPlusMinusZero_"),f,l("onPlusMinusZero_")])}else u=186,h=187,d=189;var p=U.Keyboard.KeyActions.CANCEL,f=U.Keyboard.KeyActions.DEFAULT,g=U.Keyboard.KeyActions.PASS,m=U.Keyboard.KeyActions.STRIP;this.addKeyDefs([0,"[UNKNOWN]",g,g,g,g],[27,"[ESC]","",f,f,f],[112,"[F1]",s("OP","[P"),f,"[23~",f],[113,"[F2]",s("OQ","[Q"),f,"[24~",f],[114,"[F3]",s("OR","[R"),f,"[25~",f],[115,"[F4]",s("OS","[S"),f,"[26~",f],[116,"[F5]","[15~",f,"[28~",f],[117,"[F6]","[17~",f,"[29~",f],[118,"[F7]","[18~",f,"[31~",f],[119,"[F8]","[19~",f,"[32~",f],[120,"[F9]","[20~",f,"[33~",f],[121,"[F10]","[21~",f,"[34~",f],[122,"[F11]",l("onF11_"),f,"[42~",f],[123,"[F12]","[24~",f,"[43~",f],[192,"`~",f,i(a("@"),a("^")),f,g],[49,"1!",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[50,"2@",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[51,"3#",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[52,"4$",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[53,"5%",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[54,"6^",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[55,"7&",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[56,"8*",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[57,"9(",f,l("onCtrlNum_"),l("onAltNum_"),l("onMetaNum_")],[48,"0)",f,l("onPlusMinusZero_"),l("onAltNum_"),l("onPlusMinusZero_")],[d,"-_",f,l("onPlusMinusZero_"),f,l("onPlusMinusZero_")],[h,"=+",f,l("onPlusMinusZero_"),f,l("onPlusMinusZero_")],[8,"[BKSP]",o("","\b"),o("\b",""),f,f],[9,"[TAB]",i("\t","[Z"),m,g,f],[81,"qQ",f,a("Q"),f,f],[87,"wW",f,a("W"),f,f],[69,"eE",f,a("E"),f,f],[82,"rR",f,a("R"),f,f],[84,"tT",f,a("T"),f,f],[89,"yY",f,a("Y"),f,f],[85,"uU",f,a("U"),f,f],[73,"iI",f,a("I"),f,f],[79,"oO",f,a("O"),f,f],[80,"pP",f,a("P"),f,f],[219,"[{",f,a("["),f,f],[221,"]}",f,a("]"),f,f],[220,"\\|",f,a("\\"),f,f],[20,"[CAPS]",g,g,g,f],[65,"aA",f,a("A"),f,f],[83,"sS",f,a("S"),f,f],[68,"dD",f,a("D"),f,f],[70,"fF",f,a("F"),f,f],[71,"gG",f,a("G"),f,f],[72,"hH",f,a("H"),f,f],[74,"jJ",f,i(a("J"),g),f,f],[75,"kK",f,i(a("K"),l("onClear_")),f,f],[76,"lL",f,i(a("L"),g),f,f],[u,";:",f,m,f,f],[222,"'\"",f,m,f,f],[13,"[ENTER]","\r",p,p,f],[16,"[SHIFT]",g,g,g,f],[90,"zZ",f,a("Z"),f,f],[88,"xX",f,a("X"),f,f],[67,"cC",f,l("onCtrlC_"),f,l("onMetaC_")],[86,"vV",f,l("onCtrlV_"),f,l("onMetaV_")],[66,"bB",f,i(a("B"),g),f,i(f,g)],[78,"nN",f,l("onCtrlN_"),f,l("onMetaN_")],[77,"mM",f,a("M"),f,f],[188,",<",f,n(m,g),f,f],[190,".>",f,n(m,g),f,f],[191,"/?",f,i(a("_"),a("?")),f,f],[17,"[CTRL]",g,g,g,g],[18,"[ALT]",g,g,g,g],[91,"[LAPL]",g,g,g,g],[32," ",f,a("@"),f,f],[92,"[RAPL]",g,g,g,g],[93,"[RMENU]",g,g,g,g],[42,"[PRTSCR]",g,g,g,g],[145,"[SCRLK]",g,g,g,g],[19,"[BREAK]",g,g,g,g],[45,"[INSERT]",l("onKeyInsert_"),f,f,f],[36,"[HOME]",l("onKeyHome_"),f,f,f],[33,"[PGUP]",l("onKeyPageUp_"),f,f,f],[46,"[DEL]",l("onKeyDel_"),f,f,f],[35,"[END]",l("onKeyEnd_"),f,f,f],[34,"[PGDOWN]",l("onKeyPageDown_"),f,f,f],[38,"[UP]",l("onKeyArrowUp_"),f,f,f],[40,"[DOWN]",l("onKeyArrowDown_"),f,f,f],[39,"[RIGHT]",r("[C","OC"),f,f,f],[37,"[LEFT]",r("[D","OD"),f,f,f],[144,"[NUMLOCK]",g,g,g,g],[12,"[CLEAR]",g,g,g,g],[96,"[KP0]",f,f,f,f],[97,"[KP1]",f,f,f,f],[98,"[KP2]",f,f,f,f],[99,"[KP3]",f,f,f,f],[100,"[KP4]",f,f,f,f],[101,"[KP5]",f,f,f,f],[102,"[KP6]",f,f,f,f],[103,"[KP7]",f,f,f,f],[104,"[KP8]",f,f,f,f],[105,"[KP9]",f,f,f,f],[107,"[KP+]",f,l("onPlusMinusZero_"),f,l("onPlusMinusZero_")],[109,"[KP-]",f,l("onPlusMinusZero_"),f,l("onPlusMinusZero_")],[106,"[KP*]",f,f,f,f],[111,"[KP/]",f,f,f,f],[110,"[KP.]",f,f,f,f]),"cros"==U.os&&this.addKeyDefs([166,"[BACK]",c(s("OP","[P")),f,"[23~",f],[167,"[FWD]",c(s("OQ","[Q")),f,"[24~",f],[168,"[RELOAD]",c(s("OR","[R")),f,"[25~",f],[183,"[FSCR]",c(s("OS","[S")),f,"[26~",f],[182,"[WINS]",c("[15~"),f,"[28~",f],[216,"[BRIT-]",c("[17~"),f,"[29~",f],[217,"[BRIT+]",c("[18~"),f,"[31~",f],[173,"[MUTE]",c("[19~"),f,"[32~",f],[174,"[VOL-]",c("[20~"),f,"[33~",f],[175,"[VOL+]",c("[21~"),f,"[34~",f],[152,"[POWER]",f,f,f,f],[179,"[PLAY]",c("[18~"),f,"[31~",f],[154,"[DOGS]",c("[23~"),f,"[42~",f],[153,"[ASSIST]",f,f,f,f])},U.Keyboard.KeyMap.prototype.onKeyInsert_=function(e){return this.keyboard.shiftInsertPaste&&e.shiftKey?U.Keyboard.KeyActions.PASS:"[2~"},U.Keyboard.KeyMap.prototype.onKeyHome_=function(e){return!this.keyboard.homeKeysScroll^e.shiftKey?e.altey||e.ctrlKey||e.shiftKey||!this.keyboard.applicationCursor?"[H":"OH":(this.keyboard.terminal.scrollHome(),U.Keyboard.KeyActions.CANCEL)},U.Keyboard.KeyMap.prototype.onKeyEnd_=function(e){return!this.keyboard.homeKeysScroll^e.shiftKey?e.altKey||e.ctrlKey||e.shiftKey||!this.keyboard.applicationCursor?"[F":"OF":(this.keyboard.terminal.scrollEnd(),U.Keyboard.KeyActions.CANCEL)},U.Keyboard.KeyMap.prototype.onKeyPageUp_=function(e){return!this.keyboard.pageKeysScroll^e.shiftKey?"[5~":(this.keyboard.terminal.scrollPageUp(),U.Keyboard.KeyActions.CANCEL)},U.Keyboard.KeyMap.prototype.onKeyDel_=function(e){return this.keyboard.altBackspaceIsMetaBackspace&&this.keyboard.altKeyPressed&&!e.altKey?"":"[3~"},U.Keyboard.KeyMap.prototype.onKeyPageDown_=function(e){return!this.keyboard.pageKeysScroll^e.shiftKey?"[6~":(this.keyboard.terminal.scrollPageDown(),U.Keyboard.KeyActions.CANCEL)},U.Keyboard.KeyMap.prototype.onKeyArrowUp_=function(e){return!this.keyboard.applicationCursor&&e.shiftKey?(this.keyboard.terminal.scrollLineUp(),U.Keyboard.KeyActions.CANCEL):e.shiftKey||e.ctrlKey||e.altKey||e.metaKey||!this.keyboard.applicationCursor?"[A":"OA"},U.Keyboard.KeyMap.prototype.onKeyArrowDown_=function(e){return!this.keyboard.applicationCursor&&e.shiftKey?(this.keyboard.terminal.scrollLineDown(),U.Keyboard.KeyActions.CANCEL):e.shiftKey||e.ctrlKey||e.altKey||e.metaKey||!this.keyboard.applicationCursor?"[B":"OB"},U.Keyboard.KeyMap.prototype.onClear_=function(e,t){return this.keyboard.terminal.wipeContents(),U.Keyboard.KeyActions.CANCEL},U.Keyboard.KeyMap.prototype.onF11_=function(e,t){return"popup"!=U.windowType?U.Keyboard.KeyActions.PASS:"[23~"},U.Keyboard.KeyMap.prototype.onCtrlNum_=function(e,t){function r(e){return String.fromCharCode(e.charCodeAt(0)-64)}if(this.keyboard.terminal.passCtrlNumber&&!e.shiftKey)return U.Keyboard.KeyActions.PASS;switch(t.keyCap.substr(0,1)){case"1":return"1";case"2":return r("@");case"3":return r("[");case"4":return r("\\");case"5":return r("]");case"6":return r("^");case"7":return r("_");case"8":return"";case"9":return"9"}},U.Keyboard.KeyMap.prototype.onAltNum_=function(e,t){return this.keyboard.terminal.passAltNumber&&!e.shiftKey?U.Keyboard.KeyActions.PASS:U.Keyboard.KeyActions.DEFAULT},U.Keyboard.KeyMap.prototype.onMetaNum_=function(e,t){return this.keyboard.terminal.passMetaNumber&&!e.shiftKey?U.Keyboard.KeyActions.PASS:U.Keyboard.KeyActions.DEFAULT},U.Keyboard.KeyMap.prototype.onCtrlC_=function(e,t){var r=this.keyboard.terminal.getDocument().getSelection();if(!r.isCollapsed){if(this.keyboard.ctrlCCopy&&!e.shiftKey)return this.keyboard.terminal.clearSelectionAfterCopy&&setTimeout(r.collapseToEnd.bind(r),50),U.Keyboard.KeyActions.PASS;if(!this.keyboard.ctrlCCopy&&e.shiftKey)return this.keyboard.terminal.clearSelectionAfterCopy&&setTimeout(r.collapseToEnd.bind(r),50),this.keyboard.terminal.copySelectionToClipboard(),U.Keyboard.KeyActions.CANCEL}return""},U.Keyboard.KeyMap.prototype.onCtrlN_=function(e,t){return e.shiftKey?(window.open(document.location.href,"","chrome=no,close=yes,resize=yes,scrollbars=yes,minimizable=yes,width="+window.innerWidth+",height="+window.innerHeight),U.Keyboard.KeyActions.CANCEL):""},U.Keyboard.KeyMap.prototype.onCtrlV_=function(e,t){return!e.shiftKey&&this.keyboard.ctrlVPaste||e.shiftKey&&!this.keyboard.ctrlVPaste?this.keyboard.terminal.paste()?U.Keyboard.KeyActions.CANCEL:U.Keyboard.KeyActions.PASS:""},U.Keyboard.KeyMap.prototype.onMetaN_=function(e,t){return e.shiftKey?(window.open(document.location.href,"","chrome=no,close=yes,resize=yes,scrollbars=yes,minimizable=yes,width="+window.outerWidth+",height="+window.outerHeight),U.Keyboard.KeyActions.CANCEL):U.Keyboard.KeyActions.DEFAULT},U.Keyboard.KeyMap.prototype.onMetaC_=function(e,t){var r=this.keyboard.terminal.getDocument();return e.shiftKey||r.getSelection().isCollapsed?t.keyCap.substr(e.shiftKey?1:0,1):(this.keyboard.terminal.clearSelectionAfterCopy&&setTimeout((function(){r.getSelection().collapseToEnd()}),50),U.Keyboard.KeyActions.PASS)},U.Keyboard.KeyMap.prototype.onMetaV_=function(e,t){return e.shiftKey?U.Keyboard.KeyActions.PASS:this.keyboard.passMetaV?U.Keyboard.KeyActions.PASS:U.Keyboard.KeyActions.DEFAULT},U.Keyboard.KeyMap.prototype.onPlusMinusZero_=function(e,t){if(!(this.keyboard.ctrlPlusMinusZeroZoom^e.shiftKey))return"-_"==t.keyCap?"":U.Keyboard.KeyActions.CANCEL;if(1!=this.keyboard.terminal.getZoomFactor())return U.Keyboard.KeyActions.PASS;var r=t.keyCap.substr(0,1);if("0"==r)this.keyboard.terminal.setFontSize(0);else{var o=this.keyboard.terminal.getFontSize();"-"==r||"[KP-]"==t.keyCap?o-=1:o+=1,this.keyboard.terminal.setFontSize(o)}return U.Keyboard.KeyActions.CANCEL},U.Keyboard.KeyPattern=function(e){this.wildcardCount=0,this.keyCode=e.keyCode,U.Keyboard.KeyPattern.modifiers.forEach(function(t){this[t]=e[t]||!1,"*"==this[t]&&this.wildcardCount++}.bind(this))},U.Keyboard.KeyPattern.modifiers=["shift","ctrl","alt","meta"],U.Keyboard.KeyPattern.sortCompare=function(e,t){return e.wildcardCount<t.wildcardCount?-1:e.wildcardCount>t.wildcardCount?1:0},U.Keyboard.KeyPattern.prototype.match_=function(e,t){if(this.keyCode!=e.keyCode)return!1;var r=!0;return U.Keyboard.KeyPattern.modifiers.forEach(function(o){var i=o in e&&e[o];r&&(t||"*"!=this[o])&&this[o]!=i&&(r=!1)}.bind(this)),r},U.Keyboard.KeyPattern.prototype.matchKeyDown=function(e){return this.match_(e,!1)},U.Keyboard.KeyPattern.prototype.matchKeyPattern=function(e){return this.match_(e,!0)},U.Options=function(e){this.wraparound=!e||e.wraparound,this.reverseWraparound=!!e&&e.reverseWraparound,this.originMode=!!e&&e.originMode,this.autoCarriageReturn=!!e&&e.autoCarriageReturn,this.cursorVisible=!!e&&e.cursorVisible,this.cursorBlink=!!e&&e.cursorBlink,this.insertMode=!!e&&e.insertMode,this.reverseVideo=!!e&&e.reverseVideo,this.bracketedPaste=!!e&&e.bracketedPaste},K.rtdep("hterm.Keyboard.KeyActions"),U.Parser=function(){this.source="",this.pos=0,this.ch=null},U.Parser.prototype.error=function(e){return new Error("Parse error at "+this.pos+": "+e)},U.Parser.prototype.isComplete=function(){return this.pos==this.source.length},U.Parser.prototype.reset=function(e,t){this.source=e,this.pos=t||0,this.ch=e.substr(0,1)},U.Parser.prototype.parseKeySequence=function(){var e={keyCode:null};for(var t in U.Parser.identifiers.modifierKeys)e[U.Parser.identifiers.modifierKeys[t]]=!1;for(;this.pos<this.source.length;){this.skipSpace();var r=this.parseToken();if("integer"==r.type)e.keyCode=r.value;else if("identifier"==r.type){var o=r.value.toUpperCase();if(o in U.Parser.identifiers.modifierKeys&&U.Parser.identifiers.modifierKeys.hasOwnProperty(o)){var i=U.Parser.identifiers.modifierKeys[o];if(e[i]&&"*"!=e[i])throw this.error("Duplicate modifier: "+r.value);e[i]=!0}else{if(!(o in U.Parser.identifiers.keyCodes&&U.Parser.identifiers.keyCodes.hasOwnProperty(o)))throw this.error("Unknown key: "+r.value);e.keyCode=U.Parser.identifiers.keyCodes[o]}}else{if("symbol"!=r.type)throw this.error("Expected integer or identifier");if("*"!=r.value)throw this.error("Unexpected symbol: "+r.value);for(var n in U.Parser.identifiers.modifierKeys){var s=U.Parser.identifiers.modifierKeys[n];e[s]||(e[s]="*")}}if(this.skipSpace(),"-"!=this.ch)break;if(null!=e.keyCode)throw this.error("Extra definition after target key");this.advance(1)}if(null==e.keyCode)throw this.error("Missing target key");return e},U.Parser.prototype.parseKeyAction=function(){this.skipSpace();var e=this.parseToken();if("string"==e.type)return e.value;if("identifier"==e.type){if(e.value in U.Parser.identifiers.actions&&U.Parser.identifiers.actions.hasOwnProperty(e.value))return U.Parser.identifiers.actions[e.value];throw this.error("Unknown key action: "+e.value)}throw this.error("Expected string or identifier")},U.Parser.prototype.peekString=function(){return"'"==this.ch||'"'==this.ch},U.Parser.prototype.peekIdentifier=function(){return this.ch.match(/[a-z_]/i)},U.Parser.prototype.peekInteger=function(){return this.ch.match(/[0-9]/)},U.Parser.prototype.parseToken=function(){if("*"==this.ch){var e={type:"symbol",value:this.ch};return this.advance(1),e}if(this.peekIdentifier())return{type:"identifier",value:this.parseIdentifier()};if(this.peekString())return{type:"string",value:this.parseString()};if(this.peekInteger())return{type:"integer",value:this.parseInteger()};throw this.error("Unexpected token")},U.Parser.prototype.parseIdentifier=function(){if(!this.peekIdentifier())throw this.error("Expected identifier");return this.parsePattern(/[a-z0-9_]+/gi)},U.Parser.prototype.parseInteger=function(){return"0"==this.ch&&this.pos<this.source.length-1&&"x"==this.source.substr(this.pos+1,1)?parseInt(this.parsePattern(/0x[0-9a-f]+/gi)):parseInt(this.parsePattern(/\d+/g))},U.Parser.prototype.parseString=function(){var e="",t=this.ch;if('"'!=t&&"'"!=t)throw this.error("String expected");this.advance(1);for(var r=new RegExp("[\\\\"+t+"]","g");this.pos<this.source.length;){if(r.lastIndex=this.pos,!r.exec(this.source))throw this.error("Unterminated string literal");if(e+=this.source.substring(this.pos,r.lastIndex-1),this.advance(r.lastIndex-this.pos-1),'"'!=t||"\\"!=this.ch)if("'"!=t||"\\"!=this.ch){if(this.ch==t)return this.advance(1),e}else e+=this.ch,this.advance(1);else this.advance(1),e+=this.parseEscape()}throw this.error("Unterminated string literal")},U.Parser.prototype.parseEscape=function(){var e={'"':'"',"'":"'","\\":"\\",a:"",b:"\b",e:"",f:"\f",n:"\n",r:"\r",t:"\t",v:"\v",x:function(){var e=this.parsePattern(/[a-z0-9]{2}/gi);return String.fromCharCode(parseInt(e,16))},u:function(){var e=this.parsePattern(/[a-z0-9]{4}/gi);return String.fromCharCode(parseInt(e,16))}};if(!(this.ch in e&&e.hasOwnProperty(this.ch)))throw this.error("Unknown escape: "+this.ch);var t=e[this.ch];return this.advance(1),"function"==typeof t&&(t=t.call(this)),t},U.Parser.prototype.parsePattern=function(e){if(!e.global)throw this.error("Internal error: Span patterns must be global");e.lastIndex=this.pos;var t=e.exec(this.source);if(!t||e.lastIndex-t[0].length!=this.pos)throw this.error("Expected match for: "+e);return this.pos=e.lastIndex-1,this.advance(1),t[0]},U.Parser.prototype.advance=function(e){this.pos+=e,this.ch=this.source.substr(this.pos,1)},U.Parser.prototype.skipSpace=function(e){if(/\s/.test(this.ch)){var t=/\s+/gm;t.lastIndex=this.pos;var r=this.source;if(t.exec(r)&&(this.pos=t.lastIndex),this.ch=this.source.substr(this.pos,1),e&&-1==this.ch.indexOf(e))throw this.error("Expected one of "+e+", found: "+this.ch)}},U.Parser.identifiers={},U.Parser.identifiers.modifierKeys={SHIFT:"shift",CTRL:"ctrl",CONTROL:"ctrl",ALT:"alt",META:"meta"},U.Parser.identifiers.keyCodes={ESCAPE:27,ESC:27,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,ZERO:48,BACKSPACE:8,BKSP:8,BS:8,TAB:9,Q:81,W:87,E:69,R:82,T:84,Y:89,U:85,I:73,O:79,P:80,CAPS_LOCK:20,CAPSLOCK:20,CAPS:20,A:65,S:83,D:68,F:70,G:71,H:72,J:74,K:75,L:76,ENTER:13,ENT:13,RETURN:13,RET:13,Z:90,X:88,C:67,V:86,B:66,N:78,M:77,SPACE:32,SP:32,PRINT_SCREEN:42,PRTSC:42,SCROLL_LOCK:145,SCRLK:145,BREAK:19,BRK:19,INSERT:45,INS:45,HOME:36,PAGE_UP:33,PGUP:33,DELETE:46,DEL:46,END:35,PAGE_DOWN:34,PGDOWN:34,PGDN:34,UP:38,DOWN:40,RIGHT:39,LEFT:37,NUMLOCK:144,KP0:96,KP1:97,KP2:98,KP3:99,KP4:100,KP5:101,KP6:102,KP7:103,KP8:104,KP9:105,KP_PLUS:107,KP_ADD:107,KP_MINUS:109,KP_SUBTRACT:109,KP_STAR:106,KP_MULTIPLY:106,KP_DIVIDE:111,KP_DECIMAL:110,KP_PERIOD:110,NAVIGATE_BACK:166,NAVIGATE_FORWARD:167,RELOAD:168,FULL_SCREEN:183,WINDOW_OVERVIEW:182,BRIGHTNESS_UP:216,BRIGHTNESS_DOWN:217},U.Parser.identifiers.actions={CANCEL:U.Keyboard.KeyActions.CANCEL,DEFAULT:U.Keyboard.KeyActions.DEFAULT,PASS:U.Keyboard.KeyActions.PASS,scrollLineUp:function(e){return e.scrollLineUp(),U.Keyboard.KeyActions.CANCEL},scrollLineDown:function(e){return e.scrollLineDown(),U.Keyboard.KeyActions.CANCEL},scrollPageUp:function(e){return e.scrollPageUp(),U.Keyboard.KeyActions.CANCEL},scrollPageDown:function(e){return e.scrollPageDown(),U.Keyboard.KeyActions.CANCEL},scrollToTop:function(e){return e.scrollHome(),U.Keyboard.KeyActions.CANCEL},scrollToBottom:function(e){return e.scrollEnd(),U.Keyboard.KeyActions.CANCEL},clearScreen:function(e){return e.clearHome(),U.Keyboard.KeyActions.CANCEL},clearScrollback:function(e){return e.clearScrollback(),U.Keyboard.KeyActions.CANCEL},clearTerminal:function(e){return e.wipeContents(),U.Keyboard.KeyActions.CANCEL},fullReset:function(e){return e.reset(),U.Keyboard.KeyActions.CANCEL},softReset:function(e){return e.softReset(),U.Keyboard.KeyActions.CANCEL}},K.rtdep("lib.f","lib.Storage"),U.PreferenceManager=function(e){K.PreferenceManager.call(this,U.defaultStorage,U.PreferenceManager.prefix_+e),Object.entries(U.PreferenceManager.defaultPreferences).forEach(([e,t])=>{this.definePreference(e,t.default)})},U.PreferenceManager.prefix_="/hterm/profiles/",U.PreferenceManager.listProfiles=function(e){U.defaultStorage.getItems(null,t=>{const r={};for(let e of Object.keys(t))if(e.startsWith(U.PreferenceManager.prefix_)){r[e.slice(U.PreferenceManager.prefix_.length).split("/",1)[0]]=!0}e(Object.keys(r))})},U.PreferenceManager.categories={},U.PreferenceManager.categories.Keyboard="Keyboard",U.PreferenceManager.categories.Appearance="Appearance",U.PreferenceManager.categories.CopyPaste="CopyPaste",U.PreferenceManager.categories.Sounds="Sounds",U.PreferenceManager.categories.Scrolling="Scrolling",U.PreferenceManager.categories.Encoding="Encoding",U.PreferenceManager.categories.Extensions="Extensions",U.PreferenceManager.categories.Miscellaneous="Miscellaneous",U.PreferenceManager.categoryDefinitions=[{id:U.PreferenceManager.categories.Appearance,text:"Appearance (fonts, colors, images)"},{id:U.PreferenceManager.categories.CopyPaste,text:"Copy & Paste"},{id:U.PreferenceManager.categories.Encoding,text:"Encoding"},{id:U.PreferenceManager.categories.Keyboard,text:"Keyboard"},{id:U.PreferenceManager.categories.Scrolling,text:"Scrolling"},{id:U.PreferenceManager.categories.Sounds,text:"Sounds"},{id:U.PreferenceManager.categories.Extensions,text:"Extensions"},{id:U.PreferenceManager.categories.Miscellaneous,text:"Miscellaneous"}],U.PreferenceManager.definePref_=function(e,t,r,o){return{category:e,default:t,type:r,help:o}},U.PreferenceManager.defaultPreferences={"alt-gr-mode":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,null,[null,"none","ctrl-alt","left-alt","right-alt"],"Select an AltGr detection heuristic.\n\n'null': Autodetect based on navigator.language:\n      'en-us' => 'none', else => 'right-alt'\n'none': Disable any AltGr related munging.\n'ctrl-alt': Assume Ctrl+Alt means AltGr.\n'left-alt': Assume left Alt means AltGr.\n'right-alt': Assume right Alt means AltGr."),"alt-backspace-is-meta-backspace":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","If set, undoes the Chrome OS Alt-Backspace->DEL remap, so that Alt-Backspace indeed is Alt-Backspace."),"alt-is-meta":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","Whether the Alt key acts as a Meta key or as a distinct Alt key."),"alt-sends-what":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,"escape",["escape","8-bit","browser-key"],"Controls how the Alt key is handled.\n\n  escape: Send an ESC prefix.\n  8-bit: Add 128 to the typed character as in xterm.\n  browser-key: Wait for the keypress event and see what the browser\n    says. (This won't work well on platforms where the browser\n    performs a default action for some Alt sequences.)"),"audible-bell-sound":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Sounds,"lib-resource:hterm/audio/bell","url","URL of the terminal bell sound. Empty string for no audible bell."),"desktop-notification-bell":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Sounds,!1,"bool",'If true, terminal bells in the background will create a Web Notification. https://www.w3.org/TR/notifications/\n\nDisplaying notifications requires permission from the user. When this option is set to true, hterm will attempt to ask the user for permission if necessary. Browsers may not show this permission request if it was not triggered by a user action.\n\nChrome extensions with the "notifications" permission have permission to display notifications.'),"background-color":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"rgb(16, 16, 16)","color","The background color for text with no other color attributes."),"background-image":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"","string","CSS value of the background image. Empty string for no image.\n\nFor example:\n  url(https://goo.gl/anedTK)\n  linear-gradient(top bottom, blue, red)"),"background-size":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"","string","CSS value of the background image size."),"background-position":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"","string","CSS value of the background image position.\n\nFor example:\n  10% 10%\n  center"),"backspace-sends-backspace":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","If true, the backspace should send BS ('\\x08', aka ^H). Otherwise the backspace key should send '\\x7f'."),"character-map-overrides":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,null,"value",'This is specified as an object. It is a sparse array, where each property is the character set code and the value is an object that is a sparse array itself. In that sparse array, each property is the received character and the value is the displayed character.\n\nFor example:\n  {"0":{"+":"\\u2192",",":"\\u2190","-":"\\u2191",".":"\\u2193", "0":"\\u2588"}}'),"close-on-exit":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Miscellaneous,!0,"bool","Whether to close the window when the command finishes executing."),"cursor-blink":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,!1,"bool","Whether the text cursor blinks by default. This can be toggled at runtime via terminal escape sequences."),"cursor-blink-cycle":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,[1e3,500],"value","The text cursor blink rate in milliseconds.\n\nA two element array, the first of which is how long the text cursor should be on, second is how long it should be off."),"cursor-color":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"rgba(255, 0, 0, 0.5)","color","The color of the visible text cursor."),"color-palette-overrides":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,null,"value",'Override colors in the default palette.\n\nThis can be specified as an array or an object. If specified as an object it is assumed to be a sparse array, where each property is a numeric index into the color palette.\n\nValues can be specified as almost any CSS color value. This includes #RGB, #RRGGBB, rgb(...), rgba(...), and any color names that are also part of the standard X11 rgb.txt file.\n\nYou can use \'null\' to specify that the default value should be not be changed. This is useful for skipping a small number of indices when the value is specified as an array.\n\nFor example, these both set color index 1 to blue:\n  {1: "#0000ff"}\n  [null, "#0000ff"]'),"copy-on-select":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!0,"bool","Automatically copy mouse selection to the clipboard."),"use-default-window-copy":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!1,"bool","Whether to use the default browser/OS's copy behavior.\n\nAllow the browser/OS to handle the copy event directly which might improve compatibility with some systems (where copying doesn't work at all), but makes the text selection less robust.\n\nFor example, long lines that were automatically line wrapped will be copied with the newlines still in them."),"clear-selection-after-copy":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!0,"bool","Whether to clear the selection after copying."),"ctrl-plus-minus-zero-zoom":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!0,"bool","If true, Ctrl-Plus/Minus/Zero controls zoom.\nIf false, Ctrl-Shift-Plus/Minus/Zero controls zoom, Ctrl-Minus sends ^_, Ctrl-Plus/Zero do nothing."),"ctrl-c-copy":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","Ctrl-C copies if true, send ^C to host if false.\nCtrl-Shift-C sends ^C to host if true, copies if false."),"ctrl-v-paste":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","Ctrl-V pastes if true, send ^V to host if false.\nCtrl-Shift-V sends ^V to host if true, pastes if false."),"east-asian-ambiguous-as-two-column":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","Whether East Asian Ambiguous characters have two column width."),"enable-8-bit-control":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","True to enable 8-bit control characters, false to ignore them.\n\nWe'll respect the two-byte versions of these control characters regardless of this setting."),"enable-bold":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,null,"tristate","If true, use bold weight font for text with the bold/bright attribute. False to use the normal weight font. Null to autodetect."),"enable-bold-as-bright":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,!0,"bool","If true, use bright colors (8-15 on a 16 color palette) for any text with the bold attribute. False otherwise."),"enable-blink":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,!0,"bool","If true, respect the blink attribute. False to ignore it."),"enable-clipboard-notice":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!0,"bool","Whether to show a message in the terminal when the host writes to the clipboard."),"enable-clipboard-write":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!0,"bool","Allow the remote host to write directly to the local system clipboard.\nRead access is never granted regardless of this setting.\n\nThis is used to control access to features like OSC-52."),"enable-dec12":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Miscellaneous,!1,"bool","Respect the host's attempt to change the text cursor blink status using DEC Private Mode 12."),"enable-csi-j-3":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Miscellaneous,!0,"bool","Whether CSI-J (Erase Display) mode 3 may clear the terminal scrollback buffer.\n\nEnabling this by default is safe."),environment:U.PreferenceManager.definePref_(U.PreferenceManager.categories.Miscellaneous,{NCURSES_NO_UTF8_ACS:"1",TERM:"xterm-256color",COLORTERM:"truecolor"},"value","The initial set of environment variables, as an object."),"font-family":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,'"DejaVu Sans Mono", "Noto Sans Mono", "Everson Mono", FreeMono, Menlo, Terminal, monospace',"string","Default font family for the terminal text."),"font-size":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,15,"int","The default font size in pixels."),"font-smoothing":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"antialiased","string","CSS font-smoothing property."),"foreground-color":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"rgb(240, 240, 240)","color","The foreground color for text with no other color attributes."),"hide-mouse-while-typing":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,null,"tristate","Whether to automatically hide the mouse cursor when typing. By default, autodetect whether the platform/OS handles this.\n\nNote: Some operating systems may override this setting and thus you might not be able to always disable it."),"home-keys-scroll":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","If true, Home/End controls the terminal scrollbar and Shift-Home/Shift-End are sent to the remote host. If false, then Home/End are sent to the remote host and Shift-Home/Shift-End scrolls."),keybindings:U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,null,"value",'A map of key sequence to key actions. Key sequences include zero or more modifier keys followed by a key code. Key codes can be decimal or hexadecimal numbers, or a key identifier. Key actions can be specified as a string to send to the host, or an action identifier. For a full explanation of the format, see https://goo.gl/LWRndr.\n\nSample keybindings:\n{\n  "Ctrl-Alt-K": "clearTerminal",\n  "Ctrl-Shift-L": "PASS",\n  "Ctrl-H": "\'Hello World\'"\n}'),"media-keys-are-fkeys":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","If true, convert media keys to their Fkey equivalent. If false, let the browser handle the keys."),"meta-sends-escape":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!0,"bool","Send an ESC prefix when pressing a key while holding the Meta key.\n\nFor example, when enabled, pressing Meta-K will send ^[k as if you typed Escape then k. When disabled, only k will be sent."),"mouse-right-click-paste":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!0,"bool",'Paste on right mouse button clicks.\n\nThis option is independent of the "mouse-paste-button" setting.\n\nNote: This will handle left & right handed mice correctly.'),"mouse-paste-button":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,null,[null,0,1,2,3,4,5,6],"Mouse paste button, or null to autodetect.\n\nFor autodetect, we'll use the middle mouse button for non-X11 platforms (including Chrome OS). On X11, we'll use the right mouse button (since the native window manager should paste via the middle mouse button).\n\n0 == left (primary) button.\n1 == middle (auxiliary) button.\n2 == right (secondary) button.\n\nThis option is independent of the setting for right-click paste.\n\nNote: This will handle left & right handed mice correctly."),"word-break-match-left":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,"[^\\s\\[\\](){}<>\"'\\^!@#$%&*,;:`]","string",'Regular expression to halt matching to the left (start) of a selection.\n\nNormally this is a character class to reject specific characters.\nWe allow "~" and "." by default as paths frequently start with those.'),"word-break-match-right":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,"[^\\s\\[\\](){}<>\"'\\^!@#$%&*,;:~.`]","string","Regular expression to halt matching to the right (end) of a selection.\n\nNormally this is a character class to reject specific characters."),"word-break-match-middle":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,"[^\\s\\[\\](){}<>\"'\\^]*","string","Regular expression to match all the characters in the middle.\n\nNormally this is a character class to reject specific characters.\n\nUsed to expand the selection surrounding the starting point."),"page-keys-scroll":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!1,"bool","If true, Page Up/Page Down controls the terminal scrollbar and Shift-Page Up/Shift-Page Down are sent to the remote host. If false, then Page Up/Page Down are sent to the remote host and Shift-Page Up/Shift-Page Down scrolls."),"pass-alt-number":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,null,"tristate","Whether Alt-1..9 is passed to the browser.\n\nThis is handy when running hterm in a browser tab, so that you don't lose Chrome's \"switch to tab\" keyboard accelerators. When not running in a tab it's better to send these keys to the host so they can be used in vim or emacs.\n\nIf true, Alt-1..9 will be handled by the browser. If false, Alt-1..9 will be sent to the host. If null, autodetect based on browser platform and window type."),"pass-ctrl-number":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,null,"tristate","Whether Ctrl-1..9 is passed to the browser.\n\nThis is handy when running hterm in a browser tab, so that you don't lose Chrome's \"switch to tab\" keyboard accelerators. When not running in a tab it's better to send these keys to the host so they can be used in vim or emacs.\n\nIf true, Ctrl-1..9 will be handled by the browser. If false, Ctrl-1..9 will be sent to the host. If null, autodetect based on browser platform and window type."),"pass-meta-number":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,null,"tristate","Whether Meta-1..9 is passed to the browser.\n\nThis is handy when running hterm in a browser tab, so that you don't lose Chrome's \"switch to tab\" keyboard accelerators. When not running in a tab it's better to send these keys to the host so they can be used in vim or emacs.\n\nIf true, Meta-1..9 will be handled by the browser. If false, Meta-1..9 will be sent to the host. If null, autodetect based on browser platform and window type."),"pass-meta-v":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!0,"bool","Whether Meta-V gets passed to host."),"paste-on-drop":U.PreferenceManager.definePref_(U.PreferenceManager.categories.CopyPaste,!0,"bool","If true, Drag and dropped text will paste into terminal.\nIf false, dropped text will be ignored."),"receive-encoding":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Encoding,"utf-8",["utf-8","raw"],"Set the expected encoding for data received from the host.\nIf the encodings do not match, visual bugs are likely to be observed.\n\nValid values are 'utf-8' and 'raw'."),"scroll-on-keystroke":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Scrolling,!0,"bool","Whether to scroll to the bottom on any keystroke."),"scroll-on-output":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Scrolling,!1,"bool","Whether to scroll to the bottom on terminal output."),"scrollbar-visible":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Scrolling,!0,"bool","The vertical scrollbar mode."),"scroll-wheel-may-send-arrow-keys":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Scrolling,!1,"bool","When using the alternative screen buffer, and DECCKM (Application Cursor Keys) is active, mouse wheel scroll events will emulate arrow keys.\n\nIt can be temporarily disabled by holding the Shift key.\n\nThis frequently comes up when using pagers (less) or reading man pages or text editors (vi/nano) or using screen/tmux."),"scroll-wheel-move-multiplier":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Scrolling,1,"int","The multiplier for scroll wheel events when measured in pixels.\n\nAlters how fast the page scrolls."),"send-encoding":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Encoding,"utf-8",["utf-8","raw"],"Set the encoding for data sent to host."),"terminal-encoding":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Encoding,"utf-8",["iso-2022","utf-8","utf-8-locked"],"The default terminal encoding (DOCS).\n\nISO-2022 enables character map translations (like graphics maps).\nUTF-8 disables support for those.\n\nThe locked variant means the encoding cannot be changed at runtime via terminal escape sequences.\n\nYou should stick with UTF-8 unless you notice broken rendering with legacy applications."),"shift-insert-paste":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Keyboard,!0,"bool","Whether Shift-Insert is used for pasting or is sent to the remote host."),"user-css":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"","url","URL of user stylesheet to include in the terminal document."),"user-css-text":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Appearance,"","multiline-string","Custom CSS text for styling the terminal."),"allow-images-inline":U.PreferenceManager.definePref_(U.PreferenceManager.categories.Extensions,null,"tristate","Whether to allow the remote host to display images in the terminal.\n\nBy default, we prompt until a choice is made.")},U.PreferenceManager.prototype=Object.create(K.PreferenceManager.prototype),U.PreferenceManager.constructor=U.PreferenceManager,U.PubSub=function(){this.observers_={}},U.PubSub.addBehavior=function(e){var t=new U.PubSub;for(var r in U.PubSub.prototype)e[r]=U.PubSub.prototype[r].bind(t)},U.PubSub.prototype.subscribe=function(e,t){e in this.observers_||(this.observers_[e]=[]),this.observers_[e].push(t)},U.PubSub.prototype.unsubscribe=function(e,t){var r=this.observers_[e];if(!r)throw"Invalid subject: "+e;var o=r.indexOf(t);if(o<0)throw"Not subscribed: "+e;r.splice(o,1)},U.PubSub.prototype.publish=function(e,t,r){var o=this.observers_[e];o&&(o=[].concat(o)),r&&(o?o.push(r):o=[r]),o&&setTimeout((function e(r){r<o.length-1&&setTimeout(e,0,r+1),o[r](t)}),0,0)},K.rtdep("lib.f","lib.wc","hterm.RowCol","hterm.Size","hterm.TextAttributes"),U.Screen=function(e){this.rowsArray=[],this.columnCount_=e||80,this.textAttributes=new U.TextAttributes(window.document),this.cursorPosition=new U.RowCol(0,0),this.cursorState_=new U.Screen.CursorState(this),this.cursorRowNode_=null,this.cursorNode_=null,this.cursorOffset_=null,this.wordBreakMatchLeft=null,this.wordBreakMatchRight=null,this.wordBreakMatchMiddle=null},U.Screen.prototype.getSize=function(){return new U.Size(this.columnCount_,this.rowsArray.length)},U.Screen.prototype.getHeight=function(){return this.rowsArray.length},U.Screen.prototype.getWidth=function(){return this.columnCount_},U.Screen.prototype.setColumnCount=function(e){this.columnCount_=e,this.cursorPosition.column>=e&&this.setCursorPosition(this.cursorPosition.row,e-1)},U.Screen.prototype.shiftRow=function(){return this.shiftRows(1)[0]},U.Screen.prototype.shiftRows=function(e){return this.rowsArray.splice(0,e)},U.Screen.prototype.unshiftRow=function(e){this.rowsArray.splice(0,0,e)},U.Screen.prototype.unshiftRows=function(e){this.rowsArray.unshift.apply(this.rowsArray,e)},U.Screen.prototype.popRow=function(){return this.popRows(1)[0]},U.Screen.prototype.popRows=function(e){return this.rowsArray.splice(this.rowsArray.length-e,e)},U.Screen.prototype.pushRow=function(e){this.rowsArray.push(e)},U.Screen.prototype.pushRows=function(e){e.push.apply(this.rowsArray,e)},U.Screen.prototype.insertRow=function(e,t){this.rowsArray.splice(e,0,t)},U.Screen.prototype.insertRows=function(e,t){for(var r=0;r<t.length;r++)this.rowsArray.splice(e+r,0,t[r])},U.Screen.prototype.removeRow=function(e){return this.rowsArray.splice(e,1)[0]},U.Screen.prototype.removeRows=function(e,t){return this.rowsArray.splice(e,t)},U.Screen.prototype.invalidateCursorPosition=function(){this.cursorPosition.move(0,0),this.cursorRowNode_=null,this.cursorNode_=null,this.cursorOffset_=null},U.Screen.prototype.clearCursorRow=function(){var e;this.cursorRowNode_.innerHTML="",this.cursorRowNode_.removeAttribute("line-overflow"),this.cursorOffset_=0,this.cursorPosition.column=0,this.cursorPosition.overflow=!1,e=this.textAttributes.isDefault()?"":K.f.getWhitespace(this.columnCount_);var t=this.textAttributes.inverse;this.textAttributes.inverse=!1,this.textAttributes.syncColors();var r=this.textAttributes.createContainer(e);this.cursorRowNode_.appendChild(r),this.cursorNode_=r,this.textAttributes.inverse=t,this.textAttributes.syncColors()},U.Screen.prototype.commitLineOverflow=function(){this.cursorRowNode_.setAttribute("line-overflow",!0)},U.Screen.prototype.setCursorPosition=function(e,t){if(this.rowsArray.length){e>=this.rowsArray.length?(console.error("Row out of bounds: "+e),e=this.rowsArray.length-1):e<0&&(console.error("Row out of bounds: "+e),e=0),t>=this.columnCount_?(console.error("Column out of bounds: "+t),t=this.columnCount_-1):t<0&&(console.error("Column out of bounds: "+t),t=0),this.cursorPosition.overflow=!1;var r=this.rowsArray[e],o=r.firstChild;o||(o=r.ownerDocument.createTextNode(""),r.appendChild(o));var i=0;for(r==this.cursorRowNode_?t>=this.cursorPosition.column-this.cursorOffset_&&(o=this.cursorNode_,i=this.cursorPosition.column-this.cursorOffset_):this.cursorRowNode_=r,this.cursorPosition.move(e,t);o;){var n=t-i,s=U.TextAttributes.nodeWidth(o);if(!o.nextSibling||s>n)return this.cursorNode_=o,void(this.cursorOffset_=n);i+=s,o=o.nextSibling}}else console.warn("Attempt to set cursor position on empty screen.")},U.Screen.prototype.syncSelectionCaret=function(e){try{e.collapse(this.cursorNode_,this.cursorOffset_)}catch(e){}},U.Screen.prototype.splitNode_=function(e,t){var r=e.cloneNode(!1),o=e.textContent;e.textContent=U.TextAttributes.nodeSubstr(e,0,t),r.textContent=K.wc.substr(o,t),r.textContent&&e.parentNode.insertBefore(r,e.nextSibling),e.textContent||e.parentNode.removeChild(e)},U.Screen.prototype.maybeClipCurrentRow=function(){var e=U.TextAttributes.nodeWidth(this.cursorRowNode_);if(e<=this.columnCount_)this.cursorPosition.column>=this.columnCount_&&(this.setCursorPosition(this.cursorPosition.row,this.columnCount_-1),this.cursorPosition.overflow=!0);else{var t=this.cursorPosition.column;this.setCursorPosition(this.cursorPosition.row,this.columnCount_-1),e=U.TextAttributes.nodeWidth(this.cursorNode_),this.cursorOffset_<e-1&&(this.cursorNode_.textContent=U.TextAttributes.nodeSubstr(this.cursorNode_,0,this.cursorOffset_+1));for(var r=this.cursorRowNode_,o=this.cursorNode_.nextSibling;o;)r.removeChild(o),o=this.cursorNode_.nextSibling;t<this.columnCount_?this.setCursorPosition(this.cursorPosition.row,t):this.cursorPosition.overflow=!0}},U.Screen.prototype.insertString=function(e,t){var r=this.cursorNode_,o=r.textContent;this.cursorRowNode_.removeAttribute("line-overflow"),void 0===t&&(t=K.wc.strWidth(e)),this.cursorPosition.column+=t;var i=this.cursorOffset_,n=U.TextAttributes.nodeWidth(r)-i;if(n<0){var s=K.f.getWhitespace(-n);if(this.textAttributes.underline||this.textAttributes.strikethrough||this.textAttributes.background||this.textAttributes.wcNode||!this.textAttributes.asciiNode||null!=this.textAttributes.tileData)if(r.nodeType!=Node.TEXT_NODE&&(r.wcNode||!r.asciiNode||r.tileNode||r.style.textDecoration||r.style.textDecorationStyle||r.style.textDecorationLine||r.style.backgroundColor)){var a=r.ownerDocument.createTextNode(s);this.cursorRowNode_.insertBefore(a,r.nextSibling),this.cursorNode_=r=a,this.cursorOffset_=i=-n,o=s}else r.textContent=o+=s;else e=s+e;n=0}if(this.textAttributes.matchesContainer(r))return r.textContent=0==n?o+e:0==i?e+o:U.TextAttributes.nodeSubstr(r,0,i)+e+U.TextAttributes.nodeSubstr(r,i),void(this.cursorOffset_+=t);if(0==i){var l=r.previousSibling;if(l&&this.textAttributes.matchesContainer(l))return l.textContent+=e,this.cursorNode_=l,void(this.cursorOffset_=K.wc.strWidth(l.textContent));var c=this.textAttributes.createContainer(e);return this.cursorRowNode_.insertBefore(c,r),this.cursorNode_=c,void(this.cursorOffset_=t)}if(0==n){var u=r.nextSibling;if(u&&this.textAttributes.matchesContainer(u))return u.textContent=e+u.textContent,this.cursorNode_=u,void(this.cursorOffset_=K.wc.strWidth(e));c=this.textAttributes.createContainer(e);return this.cursorRowNode_.insertBefore(c,u),this.cursorNode_=c,void(this.cursorOffset_=U.TextAttributes.nodeWidth(c))}this.splitNode_(r,i);c=this.textAttributes.createContainer(e);this.cursorRowNode_.insertBefore(c,r.nextSibling),this.cursorNode_=c,this.cursorOffset_=t},U.Screen.prototype.overwriteString=function(e,t){var r=this.columnCount_-this.cursorPosition.column;return r?(void 0===t&&(t=K.wc.strWidth(e)),this.textAttributes.matchesContainer(this.cursorNode_)&&this.cursorNode_.textContent.substr(this.cursorOffset_)==e?(this.cursorOffset_+=t,void(this.cursorPosition.column+=t)):(this.deleteChars(Math.min(t,r)),void this.insertString(e,t))):[e]},U.Screen.prototype.deleteChars=function(e){var t=this.cursorNode_,r=this.cursorOffset_,o=this.cursorPosition.column;if(!(e=Math.min(e,this.columnCount_-o)))return 0;for(var i,n,s=e;t&&e;){if(e<0){console.error(`Deleting ${s} chars went negative: ${e}`);break}if(i=U.TextAttributes.nodeWidth(t),t.textContent=U.TextAttributes.nodeSubstr(t,0,r)+U.TextAttributes.nodeSubstr(t,r+e),n=U.TextAttributes.nodeWidth(t),t.wcNode&&r<i&&(n&&i==n||!n&&1==r)){var a=this.textAttributes.createContainer(" ");t.parentNode.insertBefore(a,r?t:t.nextSibling),t.textContent="",n=0,e-=1}else e-=i-n;var l=t.nextSibling;0==n&&t!=this.cursorNode_&&t.parentNode.removeChild(t),t=l,r=0}if(this.cursorNode_.nodeType!=Node.TEXT_NODE&&!this.cursorNode_.textContent){var c=this.cursorNode_;if(c.previousSibling)this.cursorNode_=c.previousSibling,this.cursorOffset_=U.TextAttributes.nodeWidth(c.previousSibling);else if(c.nextSibling)this.cursorNode_=c.nextSibling,this.cursorOffset_=0;else{var u=this.cursorRowNode_.ownerDocument.createTextNode("");this.cursorRowNode_.appendChild(u),this.cursorNode_=u,this.cursorOffset_=0}this.cursorRowNode_.removeChild(c)}return s},U.Screen.prototype.getLineStartRow_=function(e){for(;e.previousSibling&&e.previousSibling.hasAttribute("line-overflow");)e=e.previousSibling;return e},U.Screen.prototype.getLineText_=function(e){for(var t="";e&&(t+=e.textContent,e.hasAttribute("line-overflow"));)e=e.nextSibling;return t},U.Screen.prototype.getXRowAncestor_=function(e){for(;e&&"X-ROW"!==e.nodeName;)e=e.parentNode;return e},U.Screen.prototype.getPositionWithOverflow_=function(e,t,r){if(!t)return-1;var o=this.getXRowAncestor_(t);if(!o)return-1;for(var i=0;o!=e;){if(i+=U.TextAttributes.nodeWidth(e),!e.hasAttribute("line-overflow")||!e.nextSibling)return-1;e=e.nextSibling}return i+this.getPositionWithinRow_(e,t,r)},U.Screen.prototype.getPositionWithinRow_=function(e,t,r){if(t.parentNode!=e)return null==t.parentNode?-1:this.getPositionWithinRow_(t.parentNode,t,r)+this.getPositionWithinRow_(e,t.parentNode,0);for(var o=0,i=0;i<e.childNodes.length;i++){var n=e.childNodes[i];if(n==t)return o+r;o+=U.TextAttributes.nodeWidth(n)}return-1},U.Screen.prototype.getNodeAndOffsetWithOverflow_=function(e,t){for(;e&&t>U.TextAttributes.nodeWidth(e);){if(!e.hasAttribute("line-overflow")||!e.nextSibling)return-1;t-=U.TextAttributes.nodeWidth(e),e=e.nextSibling}return this.getNodeAndOffsetWithinRow_(e,t)},U.Screen.prototype.getNodeAndOffsetWithinRow_=function(e,t){for(var r=0;r<e.childNodes.length;r++){var o=e.childNodes[r],i=U.TextAttributes.nodeWidth(o);if(t<=i)return"SPAN"===o.nodeName?this.getNodeAndOffsetWithinRow_(o,t):[o,t];t-=i}return null},U.Screen.prototype.setRange_=function(e,t,r,o){var i=this.getNodeAndOffsetWithOverflow_(e,t);if(null!=i){var n=this.getNodeAndOffsetWithOverflow_(e,r);null!=n&&(o.setStart(i[0],i[1]),o.setEnd(n[0],n[1]))}},U.Screen.prototype.expandSelectionWithWordBreakMatches_=function(e,t,r,o){if(!e)return;var i=e.getRangeAt(0);if(!i||i.toString().match(/\s/))return;const n=this.getXRowAncestor_(i.startContainer);if(!n)return;const s=this.getLineStartRow_(n);if(s){var a=this.getPositionWithOverflow_(s,i.startContainer,i.startOffset);if(-1!=a){var l=this.getPositionWithOverflow_(s,i.endContainer,i.endOffset);if(-1!=l){var c=this.getLineText_(s),u=K.wc.substring(c,0,l),h=new RegExp(t+o+"$"),d=u.search(h);if(!(-1==d||d>a)){var p=K.wc.substring(c,a,K.wc.strWidth(c)),f=new RegExp("^"+o+r),g=p.match(f);if(g){var m=a+K.wc.strWidth(g[0]);-1==m||m<l||(this.setRange_(s,d,m,i),e.addRange(i))}}}}}},U.Screen.prototype.expandSelection=function(e){this.expandSelectionWithWordBreakMatches_(e,this.wordBreakMatchLeft,this.wordBreakMatchRight,this.wordBreakMatchMiddle)},U.Screen.prototype.expandSelectionForUrl=function(e){this.expandSelectionWithWordBreakMatches_(e,"[^\\s\\[\\](){}<>\"'\\^!@#$%&*,;:`]","[^\\s\\[\\](){}<>\"'\\^!@#$%&*,;:~.`]","[^\\s\\[\\](){}<>\"'\\^]*")},U.Screen.prototype.saveCursorAndState=function(e){this.cursorState_.save(e)},U.Screen.prototype.restoreCursorAndState=function(e){this.cursorState_.restore(e)},U.Screen.CursorState=function(e){this.screen_=e,this.cursor=null,this.textAttributes=null,this.GL=this.GR=this.G0=this.G1=this.G2=this.G3=null},U.Screen.CursorState.prototype.save=function(e){this.cursor=e.terminal.saveCursor(),this.textAttributes=this.screen_.textAttributes.clone(),this.GL=e.GL,this.GR=e.GR,this.G0=e.G0,this.G1=e.G1,this.G2=e.G2,this.G3=e.G3},U.Screen.CursorState.prototype.restore=function(e){e.terminal.restoreCursor(this.cursor);const t=this.textAttributes.clone();t.colorPalette=this.screen_.textAttributes.colorPalette,t.syncColors(),this.screen_.textAttributes=t,e.GL=this.GL,e.GR=this.GR,e.G0=this.G0,e.G1=this.G1,e.G2=this.G2,e.G3=this.G3},K.rtdep("lib.f","hterm.PubSub","hterm.Size"),U.ScrollPort=function(e){U.PubSub.addBehavior(this),this.rowProvider_=e,this.characterSize=new U.Size(10,10),this.ruler_=null,this.selection=new U.ScrollPort.Selection(this),this.currentRowNodeCache_=null,this.previousRowNodeCache_={},this.lastScreenWidth_=null,this.lastScreenHeight_=null,this.selectionEnabled_=!0,this.lastRowCount_=0,this.scrollWheelMultiplier_=1,this.lastTouch_={},this.isScrolledEnd=!0,this.currentScrollbarWidthPx=16,this.ctrlVPaste=!1,this.pasteOnDrop=!0,this.div_=null,this.document_=null,this.timeouts_={},this.observers_={},this.DEBUG_=!1},U.ScrollPort.Selection=function(e){this.scrollPort_=e,this.startRow=null,this.endRow=null,this.isMultiline=null,this.isCollapsed=null},U.ScrollPort.Selection.prototype.findFirstChild=function(e,t){for(var r=e.firstChild;r;){if(-1!=t.indexOf(r))return r;if(r.childNodes.length){var o=this.findFirstChild(r,t);if(o)return o}r=r.nextSibling}return null},U.ScrollPort.Selection.prototype.sync=function(){var e=this;function t(){e.startRow=n,e.startNode=o.anchorNode,e.startOffset=o.anchorOffset,e.endRow=s,e.endNode=o.focusNode,e.endOffset=o.focusOffset}function r(){e.startRow=s,e.startNode=o.focusNode,e.startOffset=o.focusOffset,e.endRow=n,e.endNode=o.anchorNode,e.endOffset=o.anchorOffset}var o=this.scrollPort_.getDocument().getSelection();if(this.startRow=null,this.endRow=null,this.isMultiline=null,this.isCollapsed=!o||o.isCollapsed,!o)return;const i=this.scrollPort_.accessibilityReader_&&this.scrollPort_.accessibilityReader_.accessibilityEnabled;if(!this.isCollapsed||i){for(var n=o.anchorNode;n&&"X-ROW"!=n.nodeName;)n=n.parentNode;if(n){for(var s=o.focusNode;s&&"X-ROW"!=s.nodeName;)s=s.parentNode;if(s){if(n.rowIndex<s.rowIndex)t();else if(n.rowIndex>s.rowIndex)r();else if(o.focusNode==o.anchorNode)o.anchorOffset<o.focusOffset?t():r();else{var a=this.findFirstChild(n,[o.anchorNode,o.focusNode]);if(!a)throw new Error("Unexpected error syncing selection.");a==o.anchorNode?t():r()}this.isMultiline=n.rowIndex!=s.rowIndex}}}},U.ScrollPort.prototype.decorate=function(e){this.div_=e,this.iframe_=e.ownerDocument.createElement("iframe"),this.iframe_.style.cssText="border: 0;height: 100%;position: absolute;width: 100%","mozInnerScreenX"in window&&(this.iframe_.src="#"),e.appendChild(this.iframe_),this.iframe_.contentWindow.addEventListener("resize",this.onResize_.bind(this));var t=this.document_=this.iframe_.contentDocument;t.body.style.cssText="margin: 0px;padding: 0px;height: 100%;width: 100%;overflow: hidden;cursor: var(--hterm-mouse-cursor-style);-webkit-user-select: none;-moz-user-select: none;";const r=t.createElement("meta");r.setAttribute("charset","utf-8"),t.head.appendChild(r),this.DEBUG_&&(this.document_.body.style.paddingTop=this.document_.body.style.paddingBottom="calc(var(--hterm-charsize-height) * 3)");var o=t.createElement("style");o.textContent="\n      x-row {\n        display: block;\n        height: var(--hterm-charsize-height);\n        line-height: var(--hterm-charsize-height);\n      }\n\n      x-screen x-row {\n        visibility: hidden;\n      }\n\n      #hterm\\:top-fold-for-row-selection ~ x-row {\n        visibility: visible;\n      }\n\n      #hterm\\:bottom-fold-for-row-selection ~ x-row {\n        visibility: hidden;\n      }",t.head.appendChild(o),this.userCssLink_=t.createElement("link"),this.userCssLink_.setAttribute("rel","stylesheet"),this.userCssText_=t.createElement("style"),t.head.appendChild(this.userCssText_),this.screen_=t.createElement("x-screen"),this.screen_.setAttribute("contenteditable","true"),this.screen_.setAttribute("spellcheck","false"),this.screen_.setAttribute("autocomplete","off"),this.screen_.setAttribute("autocorrect","off"),this.screen_.setAttribute("autocapitalize","none"),this.screen_.setAttribute("role","log"),this.screen_.setAttribute("aria-live","off"),this.screen_.setAttribute("aria-roledescription","Terminal"),this.screen_.setAttribute("aria-readonly","true"),this.screen_.setAttribute("tabindex","-1"),this.screen_.style.cssText="caret-color: transparent;display: block;font-family: monospace;font-size: 15px;font-variant-ligatures: none;height: 100%;overflow-y: scroll; overflow-x: hidden;white-space: pre;width: 100%;outline: none !important",t.body.appendChild(this.screen_),this.screen_.addEventListener("scroll",this.onScroll_.bind(this)),this.screen_.addEventListener("wheel",this.onScrollWheel_.bind(this)),this.screen_.addEventListener("touchstart",this.onTouch_.bind(this)),this.screen_.addEventListener("touchmove",this.onTouch_.bind(this)),this.screen_.addEventListener("touchend",this.onTouch_.bind(this)),this.screen_.addEventListener("touchcancel",this.onTouch_.bind(this)),this.screen_.addEventListener("copy",this.onCopy_.bind(this)),this.screen_.addEventListener("paste",this.onPaste_.bind(this)),this.screen_.addEventListener("drop",this.onDragAndDrop_.bind(this)),t.body.addEventListener("keydown",this.onBodyKeyDown_.bind(this));const i="right: 0px;\n                             position:fixed;\n                             z-index: 1;\n                             text-align: center;\n                             cursor: pointer;\n                             height: 30px;\n                             width: 110px;\n                             line-height: 30px;\n                             border-width: 1px;\n                             border-style: solid;\n                             font-weight: bold;";this.scrollUpButton_=this.document_.createElement("div"),this.scrollUpButton_.id="hterm:a11y:page-up",this.scrollUpButton_.innerText=U.msg("BUTTON_PAGE_UP",[],"Page up"),this.scrollUpButton_.setAttribute("role","button"),this.scrollUpButton_.style.cssText=i,this.scrollUpButton_.style.top="-32px",this.scrollUpButton_.addEventListener("click",this.scrollPageUp.bind(this)),this.scrollDownButton_=this.document_.createElement("div"),this.scrollDownButton_.id="hterm:a11y:page-down",this.scrollDownButton_.innerText=U.msg("BUTTON_PAGE_DOWN",[],"Page down"),this.scrollDownButton_.setAttribute("role","button"),this.scrollDownButton_.style.cssText=i,this.scrollDownButton_.style.bottom="-32px",this.scrollDownButton_.addEventListener("click",this.scrollPageDown.bind(this)),this.allowScrollButtonsToDisplay_=!1,setTimeout(()=>{this.allowScrollButtonsToDisplay_=!0},500),this.document_.addEventListener("selectionchange",()=>{if(this.selection.sync(),!this.allowScrollButtonsToDisplay_)return;const e=this.accessibilityReader_&&this.accessibilityReader_.accessibilityEnabled,t=this.document_.getSelection();let r;t.anchorNode&&t.anchorNode.parentElement&&(r=t.anchorNode.parentElement),e&&r==this.scrollUpButton_?this.scrollUpButton_.style.top="0px":this.scrollUpButton_.style.top="-32px",e&&r==this.scrollDownButton_?this.scrollDownButton_.style.bottom="0px":this.scrollDownButton_.style.bottom="-32px"}),this.screen_.appendChild(this.scrollUpButton_),this.rowNodes_=t.createElement("div"),this.rowNodes_.id="hterm:row-nodes",this.rowNodes_.style.cssText="display: block;position: fixed;overflow: hidden;-webkit-user-select: text;-moz-user-select: text;",this.screen_.appendChild(this.rowNodes_),this.screen_.appendChild(this.scrollDownButton_),this.topSelectBag_=t.createElement("x-select-bag"),this.topSelectBag_.style.cssText="display: block;overflow: hidden;height: var(--hterm-charsize-height);white-space: pre;",this.bottomSelectBag_=this.topSelectBag_.cloneNode(),this.topFold_=t.createElement("x-fold"),this.topFold_.id="hterm:top-fold-for-row-selection",this.topFold_.style.cssText="display: block;",this.rowNodes_.appendChild(this.topFold_),this.bottomFold_=this.topFold_.cloneNode(),this.bottomFold_.id="hterm:bottom-fold-for-row-selection",this.rowNodes_.appendChild(this.bottomFold_),this.scrollArea_=t.createElement("div"),this.scrollArea_.id="hterm:scrollarea",this.scrollArea_.style.cssText="visibility: hidden",this.screen_.appendChild(this.scrollArea_);var n="http://www.w3.org/2000/svg";this.svg_=this.div_.ownerDocument.createElementNS(n,"svg"),this.svg_.id="hterm:zoom-detector",this.svg_.setAttribute("xmlns",n),this.svg_.setAttribute("version","1.1"),this.svg_.style.cssText="position: absolute;top: 0;left: 0;visibility: hidden",this.pasteTarget_=t.createElement("textarea"),this.pasteTarget_.id="hterm:ctrl-v-paste-target",this.pasteTarget_.setAttribute("tabindex","-1"),this.pasteTarget_.setAttribute("aria-hidden","true"),this.pasteTarget_.style.cssText="position: absolute;height: 1px;width: 1px;left: 0px; bottom: 0px;opacity: 0",this.pasteTarget_.contentEditable=!0,this.screen_.appendChild(this.pasteTarget_),this.pasteTarget_.addEventListener("textInput",this.handlePasteTargetTextInput_.bind(this)),this.resize()},U.ScrollPort.prototype.setAccessibilityReader=function(e){this.accessibilityReader_=e},U.ScrollPort.prototype.scrollPageUp=function(){if(0==this.getTopRowIndex())return;const e=this.getTopRowIndex();this.scrollRowToTop(e-this.visibleRowCount+1),this.assertiveAnnounce_()},U.ScrollPort.prototype.scrollPageDown=function(){if(this.isScrolledEnd)return;const e=this.getTopRowIndex();this.scrollRowToTop(e+this.visibleRowCount-1),this.assertiveAnnounce_()},U.ScrollPort.prototype.setFontFamily=function(e,t){this.screen_.style.fontFamily=e,this.screen_.style.webkitFontSmoothing=t||"",this.syncCharacterSize()},U.ScrollPort.prototype.getFontFamily=function(){return this.screen_.style.fontFamily},U.ScrollPort.prototype.setUserCssUrl=function(e){e?(this.userCssLink_.setAttribute("href",e),this.userCssLink_.parentNode||this.document_.head.appendChild(this.userCssLink_)):this.userCssLink_.parentNode&&this.document_.head.removeChild(this.userCssLink_)},U.ScrollPort.prototype.setUserCssText=function(e){this.userCssText_.textContent=e},U.ScrollPort.prototype.focus=function(){this.iframe_.focus(),this.screen_.focus(),this.publish("focus")},U.ScrollPort.prototype.getForegroundColor=function(){return this.screen_.style.color},U.ScrollPort.prototype.setForegroundColor=function(e){this.screen_.style.color=e,this.scrollUpButton_.style.backgroundColor=e,this.scrollDownButton_.style.backgroundColor=e},U.ScrollPort.prototype.getBackgroundColor=function(){return this.screen_.style.backgroundColor},U.ScrollPort.prototype.setBackgroundColor=function(e){this.screen_.style.backgroundColor=e,this.scrollUpButton_.style.color=e,this.scrollDownButton_.style.color=e},U.ScrollPort.prototype.setBackgroundImage=function(e){this.screen_.style.backgroundImage=e},U.ScrollPort.prototype.setBackgroundSize=function(e){this.screen_.style.backgroundSize=e},U.ScrollPort.prototype.setBackgroundPosition=function(e){this.screen_.style.backgroundPosition=e},U.ScrollPort.prototype.setCtrlVPaste=function(e){this.ctrlVPaste=e},U.ScrollPort.prototype.setPasteOnDrop=function(e){this.pasteOnDrop=e},U.ScrollPort.prototype.getScreenSize=function(){var e=U.getClientSize(this.screen_);return{height:e.height,width:e.width-this.currentScrollbarWidthPx}},U.ScrollPort.prototype.getScreenWidth=function(){return this.getScreenSize().width},U.ScrollPort.prototype.getScreenHeight=function(){return this.getScreenSize().height},U.ScrollPort.prototype.getDocument=function(){return this.document_},U.ScrollPort.prototype.getScreenNode=function(){return this.screen_},U.ScrollPort.prototype.resetCache=function(){this.currentRowNodeCache_=null,this.previousRowNodeCache_={}},U.ScrollPort.prototype.setRowProvider=function(e){this.resetCache(),this.rowProvider_=e,this.scheduleRedraw()},U.ScrollPort.prototype.invalidate=function(){for(var e=this.topFold_.nextSibling;e!=this.bottomFold_;){var t=e.nextSibling;e.parentElement.removeChild(e),e=t}this.previousRowNodeCache_=null;var r=this.getTopRowIndex(),o=this.getBottomRowIndex(r);this.drawVisibleRows_(r,o)},U.ScrollPort.prototype.scheduleInvalidate=function(){if(!this.timeouts_.invalidate){var e=this;this.timeouts_.invalidate=setTimeout((function(){delete e.timeouts_.invalidate,e.invalidate()}),0)}},U.ScrollPort.prototype.setFontSize=function(e){this.screen_.style.fontSize=e+"px",this.syncCharacterSize()},U.ScrollPort.prototype.getFontSize=function(){return parseInt(this.screen_.style.fontSize)},U.ScrollPort.prototype.measureCharacterSize=function(e){this.ruler_||(this.ruler_=this.document_.createElement("div"),this.ruler_.id="hterm:ruler-character-size",this.ruler_.style.cssText="position: absolute;top: 0;left: 0;visibility: hidden;height: auto !important;width: auto !important;",this.rulerSpan_=this.document_.createElement("span"),this.rulerSpan_.id="hterm:ruler-span-workaround",this.rulerSpan_.innerHTML=("X".repeat(100)+"\r").repeat(100),this.ruler_.appendChild(this.rulerSpan_),this.rulerBaseline_=this.document_.createElement("span"),this.rulerSpan_.id="hterm:ruler-baseline",this.rulerBaseline_.style.fontSize="0px",this.rulerBaseline_.textContent="X"),this.rulerSpan_.style.fontWeight=e||"",this.rowNodes_.appendChild(this.ruler_);var t=U.getClientSize(this.rulerSpan_),r=new U.Size(t.width/100,t.height/100);return this.ruler_.appendChild(this.rulerBaseline_),r.baseline=this.rulerBaseline_.offsetTop,this.ruler_.removeChild(this.rulerBaseline_),this.rowNodes_.removeChild(this.ruler_),this.div_.ownerDocument.body.appendChild(this.svg_),r.zoomFactor=this.svg_.currentScale,this.div_.ownerDocument.body.removeChild(this.svg_),r},U.ScrollPort.prototype.syncCharacterSize=function(){this.characterSize=this.measureCharacterSize(),this.resize()},U.ScrollPort.prototype.resize=function(){this.currentScrollbarWidthPx=U.getClientWidth(this.screen_)-this.screen_.clientWidth,this.syncScrollHeight(),this.syncRowNodesDimensions_();var e=this;this.publish("resize",{scrollPort:this},(function(){e.scrollRowToBottom(e.rowProvider_.getRowCount()),e.scheduleRedraw()}))},U.ScrollPort.prototype.assertiveAnnounce_=function(){if(!this.accessibilityReader_)return;const e=this.getTopRowIndex(),t=this.getBottomRowIndex(e);let r=100*e/Math.max(1,this.rowProvider_.getRowCount()-this.visibleRowCount);r=Math.min(100,Math.round(r));let o=U.msg("ANNOUNCE_CURRENT_SCREEN_HEADER",[r],"$1% scrolled,");o+="\n";for(let r=e;r<=t;++r){o+=this.fetchRowNode_(r).textContent+"\n"}this.accessibilityReader_.assertiveAnnounce(o)},U.ScrollPort.prototype.syncRowNodesDimensions_=function(){var e=this.getScreenSize();this.lastScreenWidth_=e.width,this.lastScreenHeight_=e.height,this.visibleRowCount=K.f.smartFloorDivide(e.height,this.characterSize.height);var t=this.visibleRowCount*this.characterSize.height;this.visibleRowTopMargin=0,this.visibleRowBottomMargin=e.height-t,this.topFold_.style.marginBottom=this.visibleRowTopMargin+"px";for(var r=0,o=this.topFold_.previousSibling;o;)r+=U.getClientHeight(o),o=o.previousSibling;this.rowNodes_.style.width=e.width+"px",this.rowNodes_.style.height=t+r+"px",this.rowNodes_.style.left=this.screen_.offsetLeft+"px",this.rowNodes_.style.top=this.screen_.offsetTop-r+"px"},U.ScrollPort.prototype.syncScrollHeight=function(){this.lastRowCount_=this.rowProvider_.getRowCount(),this.scrollArea_.style.height=this.characterSize.height*this.lastRowCount_+this.visibleRowTopMargin+this.visibleRowBottomMargin+"px"},U.ScrollPort.prototype.scheduleRedraw=function(){if(!this.timeouts_.redraw){var e=this;this.timeouts_.redraw=setTimeout((function(){delete e.timeouts_.redraw,e.redraw_()}),0)}},U.ScrollPort.prototype.updateScrollButtonState_=function(){const e=(e,t)=>{e.setAttribute("aria-disabled",t?"true":"false"),e.style.opacity=t?.5:1};e(this.scrollUpButton_,0==this.getTopRowIndex()),e(this.scrollDownButton_,this.isScrolledEnd)},U.ScrollPort.prototype.redraw_=function(){this.resetSelectBags_(),this.selection.sync(),this.syncScrollHeight(),this.currentRowNodeCache_={};var e=this.getTopRowIndex(),t=this.getBottomRowIndex(e);this.drawTopFold_(e),this.drawBottomFold_(t),this.drawVisibleRows_(e,t),this.syncRowNodesDimensions_(),this.previousRowNodeCache_=this.currentRowNodeCache_,this.currentRowNodeCache_=null,this.isScrolledEnd=this.getTopRowIndex()+this.visibleRowCount>=this.lastRowCount_,this.updateScrollButtonState_()},U.ScrollPort.prototype.drawTopFold_=function(e){if(!this.selection.startRow||this.selection.startRow.rowIndex>=e)this.rowNodes_.firstChild!=this.topFold_&&this.rowNodes_.insertBefore(this.topFold_,this.rowNodes_.firstChild);else{if(!this.selection.isMultiline||this.selection.endRow.rowIndex>=e)this.selection.startRow.nextSibling!=this.topFold_&&this.rowNodes_.insertBefore(this.topFold_,this.selection.startRow.nextSibling);else for(this.selection.endRow.nextSibling!=this.topFold_&&this.rowNodes_.insertBefore(this.topFold_,this.selection.endRow.nextSibling);this.selection.startRow.nextSibling!=this.selection.endRow;)this.rowNodes_.removeChild(this.selection.startRow.nextSibling);for(;this.rowNodes_.firstChild!=this.selection.startRow;)this.rowNodes_.removeChild(this.rowNodes_.firstChild)}},U.ScrollPort.prototype.drawBottomFold_=function(e){if(!this.selection.endRow||this.selection.endRow.rowIndex<=e)this.rowNodes_.lastChild!=this.bottomFold_&&this.rowNodes_.appendChild(this.bottomFold_);else{if(!this.selection.isMultiline||this.selection.startRow.rowIndex<=e)this.bottomFold_.nextSibling!=this.selection.endRow&&this.rowNodes_.insertBefore(this.bottomFold_,this.selection.endRow);else for(this.bottomFold_.nextSibling!=this.selection.startRow&&this.rowNodes_.insertBefore(this.bottomFold_,this.selection.startRow);this.selection.startRow.nextSibling!=this.selection.endRow;)this.rowNodes_.removeChild(this.selection.startRow.nextSibling);for(;this.rowNodes_.lastChild!=this.selection.endRow;)this.rowNodes_.removeChild(this.rowNodes_.lastChild)}},U.ScrollPort.prototype.drawVisibleRows_=function(e,t){var r=this;function o(e,t){for(;e!=t;){if(!e)throw"Did not encounter target node";if(e==r.bottomFold_)throw"Encountered bottom fold before target node";var o=e;e=e.nextSibling,o.parentNode.removeChild(o)}}for(var i=this.selection.startRow,n=this.selection.endRow,s=this.bottomFold_,a=this.topFold_.nextSibling,l=Math.min(this.visibleRowCount,this.rowProvider_.getRowCount()),c=0;c<l;c++){var u=e+c;if(a!=s)if(a.rowIndex!=u)if(i&&i.rowIndex==u)o(a,i),a=i.nextSibling;else if(n&&n.rowIndex==u)o(a,n),a=n.nextSibling;else if(a!=i&&a!=n){if(!(h=this.fetchRowNode_(u))){console.log("Couldn't fetch row index: "+u);break}a!=h?(this.rowNodes_.insertBefore(h,a),h.nextSibling,this.rowNodes_.removeChild(a),a=h.nextSibling):a=a.nextSibling}else{if(!(h=this.fetchRowNode_(u))){console.log("Couldn't fetch row index: "+u);break}this.rowNodes_.insertBefore(h,a)}else a=a.nextSibling;else{var h;if(!(h=this.fetchRowNode_(u))){console.log("Couldn't fetch row index: "+u);break}this.rowNodes_.insertBefore(h,a)}}a!=this.bottomFold_&&o(a,s)},U.ScrollPort.prototype.resetSelectBags_=function(){this.topSelectBag_.parentNode&&(this.topSelectBag_.textContent="",this.topSelectBag_.parentNode.removeChild(this.topSelectBag_)),this.bottomSelectBag_.parentNode&&(this.bottomSelectBag_.textContent="",this.bottomSelectBag_.parentNode.removeChild(this.bottomSelectBag_))},U.ScrollPort.prototype.cacheRowNode_=function(e){this.currentRowNodeCache_[e.rowIndex]=e},U.ScrollPort.prototype.fetchRowNode_=function(e){var t;return t=this.previousRowNodeCache_&&e in this.previousRowNodeCache_?this.previousRowNodeCache_[e]:this.rowProvider_.getRowNode(e),this.currentRowNodeCache_&&this.cacheRowNode_(t),t},U.ScrollPort.prototype.selectAll=function(){var e;if(0!=this.topFold_.nextSibling.rowIndex){for(;this.topFold_.previousSibling;)this.rowNodes_.removeChild(this.topFold_.previousSibling);e=this.fetchRowNode_(0),this.rowNodes_.insertBefore(e,this.topFold_),this.syncRowNodesDimensions_()}else e=this.topFold_.nextSibling;var t,r=this.rowProvider_.getRowCount()-1;if(this.bottomFold_.previousSibling.rowIndex!=r){for(;this.bottomFold_.nextSibling;)this.rowNodes_.removeChild(this.bottomFold_.nextSibling);t=this.fetchRowNode_(r),this.rowNodes_.appendChild(t)}else t=this.bottomFold_.previousSibling.rowIndex;var o=this.document_.getSelection();o.collapse(e,0),o.extend(t,t.childNodes.length),this.selection.sync()},U.ScrollPort.prototype.getScrollMax_=function(e){return U.getClientHeight(this.scrollArea_)+this.visibleRowTopMargin+this.visibleRowBottomMargin-U.getClientHeight(this.screen_)},U.ScrollPort.prototype.scrollRowToTop=function(e){this.syncScrollHeight(),this.isScrolledEnd=e+this.visibleRowCount>=this.lastRowCount_;var t=e*this.characterSize.height+this.visibleRowTopMargin,r=this.getScrollMax_();t>r&&(t=r),this.screen_.scrollTop!=t&&(this.screen_.scrollTop=t,this.scheduleRedraw())},U.ScrollPort.prototype.scrollRowToBottom=function(e){this.syncScrollHeight(),this.isScrolledEnd=e+this.visibleRowCount>=this.lastRowCount_;var t=e*this.characterSize.height+this.visibleRowTopMargin+this.visibleRowBottomMargin;(t-=this.visibleRowCount*this.characterSize.height)<0&&(t=0),this.screen_.scrollTop!=t&&(this.screen_.scrollTop=t)},U.ScrollPort.prototype.getTopRowIndex=function(){return Math.round(this.screen_.scrollTop/this.characterSize.height)},U.ScrollPort.prototype.getBottomRowIndex=function(e){return e+this.visibleRowCount-1},U.ScrollPort.prototype.onScroll_=function(e){var t=this.getScreenSize();t.width==this.lastScreenWidth_&&t.height==this.lastScreenHeight_?(this.redraw_(),this.publish("scroll",{scrollPort:this})):this.resize()},U.ScrollPort.prototype.onScrollWheel=function(e){},U.ScrollPort.prototype.onScrollWheel_=function(e){if(this.onScrollWheel(e),e.defaultPrevented)return;const t=this.scrollWheelDelta(e);let r=this.screen_.scrollTop-t.y;r<0&&(r=0);var o=this.getScrollMax_();r>o&&(r=o),r!=this.screen_.scrollTop&&(this.screen_.scrollTop=r,e.preventDefault())},U.ScrollPort.prototype.scrollWheelDelta=function(e){const t={x:0,y:0};switch(e.deltaMode){case WheelEvent.DOM_DELTA_PIXEL:t.x=e.deltaX*this.scrollWheelMultiplier_,t.y=e.deltaY*this.scrollWheelMultiplier_;break;case WheelEvent.DOM_DELTA_LINE:t.x=e.deltaX*this.characterSize.width,t.y=e.deltaY*this.characterSize.height;break;case WheelEvent.DOM_DELTA_PAGE:t.x=e.deltaX*this.characterSize.width*this.screen_.getWidth(),t.y=e.deltaY*this.characterSize.height*this.screen_.getHeight()}return t.y*=-1,t},U.ScrollPort.prototype.onTouch=function(e){},U.ScrollPort.prototype.onTouch_=function(e){if(this.onTouch(e),!e.defaultPrevented){var t,r,o=function(e){return{id:e.identifier,y:e.clientY,x:e.clientX}};switch(e.type){case"touchstart":for(t=0;t<e.changedTouches.length;++t)r=o(e.changedTouches[t]),this.lastTouch_[r.id]=r;break;case"touchcancel":case"touchend":for(t=0;t<e.changedTouches.length;++t)delete this.lastTouch_[e.changedTouches[t].identifier];break;case"touchmove":var i=0;for(t=0;t<e.changedTouches.length;++t)r=o(e.changedTouches[t]),i+=this.lastTouch_[r.id].y-r.y,this.lastTouch_[r.id]=r;i*=-1;var n=this.screen_.scrollTop-i;n<0&&(n=0);var s=this.getScrollMax_();n>s&&(n=s),n!=this.screen_.scrollTop&&(this.screen_.scrollTop=n)}e.preventDefault()}},U.ScrollPort.prototype.onResize_=function(e){this.syncCharacterSize()},U.ScrollPort.prototype.onCopy=function(e){},U.ScrollPort.prototype.onCopy_=function(e){if(this.onCopy(e),!(e.defaultPrevented||(this.resetSelectBags_(),this.selection.sync(),this.selection.isCollapsed||this.selection.endRow.rowIndex-this.selection.startRow.rowIndex<2))){var t,r,o=this.getTopRowIndex(),i=this.getBottomRowIndex(o);if(this.selection.startRow.rowIndex<o)t=this.selection.endRow.rowIndex<o?this.selection.endRow.rowIndex:this.topFold_.nextSibling.rowIndex,this.topSelectBag_.textContent=this.rowProvider_.getRowsText(this.selection.startRow.rowIndex+1,t),this.rowNodes_.insertBefore(this.topSelectBag_,this.selection.startRow.nextSibling),this.syncRowNodesDimensions_();if(this.selection.endRow.rowIndex>i)r=this.selection.startRow.rowIndex>i?this.selection.startRow.rowIndex+1:this.bottomFold_.previousSibling.rowIndex+1,this.bottomSelectBag_.textContent=this.rowProvider_.getRowsText(r,this.selection.endRow.rowIndex),this.rowNodes_.insertBefore(this.bottomSelectBag_,this.selection.endRow)}},U.ScrollPort.prototype.onBodyKeyDown_=function(e){this.ctrlVPaste&&(e.ctrlKey||e.metaKey)&&118==e.keyCode&&this.pasteTarget_.focus()},U.ScrollPort.prototype.onPaste_=function(e){this.pasteTarget_.focus();var t=this;setTimeout((function(){t.publish("paste",{text:t.pasteTarget_.value}),t.pasteTarget_.value="",t.focus()}),0)},U.ScrollPort.prototype.handlePasteTargetTextInput_=function(e){e.stopPropagation()},U.ScrollPort.prototype.onDragAndDrop_=function(e){if(!this.pasteOnDrop)return;let t,r;e.preventDefault(),e.shiftKey&&(e.dataTransfer.types.forEach(e=>{!r&&"text/plain"!=e&&e.startsWith("text/")&&(r=e)}),r&&(t=e.dataTransfer.getData(r))),t||(t=e.dataTransfer.getData("text/plain")),t&&this.publish("paste",{text:t})},U.ScrollPort.prototype.setScrollbarVisible=function(e){this.screen_.style.overflowY=e?"scroll":"hidden"},U.ScrollPort.prototype.setScrollWheelMoveMultipler=function(e){this.scrollWheelMultiplier_=e},K.rtdep("lib.colors","lib.PreferenceManager","lib.resource","lib.wc","lib.f","hterm.AccessibilityReader","hterm.Keyboard","hterm.Options","hterm.PreferenceManager","hterm.Screen","hterm.ScrollPort","hterm.Size","hterm.TextAttributes","hterm.VT"),U.Terminal=function(e){this.profileId_=null,this.primaryScreen_=new U.Screen,this.alternateScreen_=new U.Screen,this.screen_=this.primaryScreen_,this.screenSize=new U.Size(0,0),this.scrollPort_=new U.ScrollPort(this),this.scrollPort_.subscribe("resize",this.onResize_.bind(this)),this.scrollPort_.subscribe("scroll",this.onScroll_.bind(this)),this.scrollPort_.subscribe("paste",this.onPaste_.bind(this)),this.scrollPort_.subscribe("focus",this.onScrollportFocus_.bind(this)),this.scrollPort_.onCopy=this.onCopy_.bind(this),this.div_=null,this.document_=window.document,this.scrollbackRows_=[],this.tabStops_=[],this.defaultTabStops=!0,this.vtScrollTop_=null,this.vtScrollBottom_=null,this.cursorNode_=null,this.cursorShape_=U.Terminal.cursorShape.BLOCK,this.cursorBlinkCycle_=[100,100],this.myOnCursorBlink_=this.onCursorBlink_.bind(this),this.backgroundColor_=null,this.foregroundColor_=null,this.scrollOnOutput_=null,this.scrollOnKeystroke_=null,this.scrollWheelArrowKeys_=null,this.defeatMouseReports_=!1,this.setAutomaticMouseHiding(),this.mouseHideDelay_=null,this.bellAudio_=this.document_.createElement("audio"),this.bellAudio_.id="hterm:bell-audio",this.bellAudio_.setAttribute("preload","auto"),this.accessibilityReader_=null,this.contextMenu=new U.ContextMenu,this.bellNotificationList_=[],this.desktopNotificationBell_=!1,this.savedOptions_={},this.options_=new U.Options,this.timeouts_={},this.vt=new U.VT(this),this.saveCursorAndState(!0),this.keyboard=new U.Keyboard(this),this.io=new U.Terminal.IO(this),this.enableMouseDragScroll=!0,this.copyOnSelect=null,this.mouseRightClickPaste=null,this.mousePasteButton=null,this.useDefaultWindowCopy=!1,this.clearSelectionAfterCopy=!0,this.realizeSize_(80,24),this.setDefaultTabStops(),this.allowImagesInline=null,this.reportFocus=!1,this.setProfile(e||"default",function(){this.onTerminalReady()}.bind(this))},U.Terminal.cursorShape={BLOCK:"BLOCK",BEAM:"BEAM",UNDERLINE:"UNDERLINE"},U.Terminal.prototype.onTerminalReady=function(){},U.Terminal.prototype.tabWidth=8,U.Terminal.prototype.setProfile=function(e,t){this.profileId_=e.replace(/\//g,"");var r=this;this.prefs_&&this.prefs_.deactivate(),this.prefs_=new U.PreferenceManager(this.profileId_),this.prefs_.addObservers(null,{"alt-gr-mode":function(e){e=null==e?"en-us"==navigator.language.toLowerCase()?"none":"right-alt":"string"==typeof e?e.toLowerCase():"none",/^(none|ctrl-alt|left-alt|right-alt)$/.test(e)||(e="none"),r.keyboard.altGrMode=e},"alt-backspace-is-meta-backspace":function(e){r.keyboard.altBackspaceIsMetaBackspace=e},"alt-is-meta":function(e){r.keyboard.altIsMeta=e},"alt-sends-what":function(e){/^(escape|8-bit|browser-key)$/.test(e)||(e="escape"),r.keyboard.altSendsWhat=e},"audible-bell-sound":function(e){var t=e.match(/^lib-resource:(\S+)/);t?r.bellAudio_.setAttribute("src",K.resource.getDataUrl(t[1])):r.bellAudio_.setAttribute("src",e)},"desktop-notification-bell":function(e){e&&Notification?(r.desktopNotificationBell_="granted"===Notification.permission,r.desktopNotificationBell_||console.warn("desktop-notification-bell is true but we do not have permission to display notifications.")):r.desktopNotificationBell_=!1},"background-color":function(e){r.setBackgroundColor(e)},"background-image":function(e){r.scrollPort_.setBackgroundImage(e)},"background-size":function(e){r.scrollPort_.setBackgroundSize(e)},"background-position":function(e){r.scrollPort_.setBackgroundPosition(e)},"backspace-sends-backspace":function(e){r.keyboard.backspaceSendsBackspace=e},"character-map-overrides":function(e){null==e||e instanceof Object?(r.vt.characterMaps.reset(),r.vt.characterMaps.setOverrides(e)):console.warn("Preference character-map-modifications is not an object: "+e)},"cursor-blink":function(e){r.setCursorBlink(!!e)},"cursor-blink-cycle":function(e){e instanceof Array&&"number"==typeof e[0]&&"number"==typeof e[1]?r.cursorBlinkCycle_=e:r.cursorBlinkCycle_="number"==typeof e?[e,e]:[100,100]},"cursor-color":function(e){r.setCursorColor(e)},"color-palette-overrides":function(e){if(null==e||e instanceof Object||e instanceof Array){if(K.colors.colorPalette=K.colors.stockColorPalette.concat(),e)for(var t in e){var o=parseInt(t);if(isNaN(o)||o<0||o>255)console.log("Invalid value in palette: "+t+": "+e[t]);else if(e[o]){var i=K.colors.normalizeCSS(e[o]);i&&(K.colors.colorPalette[o]=i)}}r.primaryScreen_.textAttributes.resetColorPalette(),r.alternateScreen_.textAttributes.resetColorPalette()}else console.warn("Preference color-palette-overrides is not an array or object: "+e)},"copy-on-select":function(e){r.copyOnSelect=!!e},"use-default-window-copy":function(e){r.useDefaultWindowCopy=!!e},"clear-selection-after-copy":function(e){r.clearSelectionAfterCopy=!!e},"ctrl-plus-minus-zero-zoom":function(e){r.keyboard.ctrlPlusMinusZeroZoom=e},"ctrl-c-copy":function(e){r.keyboard.ctrlCCopy=e},"ctrl-v-paste":function(e){r.keyboard.ctrlVPaste=e,r.scrollPort_.setCtrlVPaste(e)},"paste-on-drop":function(e){r.scrollPort_.setPasteOnDrop(e)},"east-asian-ambiguous-as-two-column":function(e){K.wc.regardCjkAmbiguous=e},"enable-8-bit-control":function(e){r.vt.enable8BitControl=!!e},"enable-bold":function(e){r.syncBoldSafeState()},"enable-bold-as-bright":function(e){r.primaryScreen_.textAttributes.enableBoldAsBright=!!e,r.alternateScreen_.textAttributes.enableBoldAsBright=!!e},"enable-blink":function(e){r.setTextBlink(!!e)},"enable-clipboard-write":function(e){r.vt.enableClipboardWrite=!!e},"enable-dec12":function(e){r.vt.enableDec12=!!e},"enable-csi-j-3":function(e){r.vt.enableCsiJ3=!!e},"font-family":function(e){r.syncFontFamily()},"font-size":function(e){(e=parseInt(e))<=0?console.error(`Invalid font size: ${e}`):r.setFontSize(e)},"font-smoothing":function(e){r.syncFontFamily()},"foreground-color":function(e){r.setForegroundColor(e)},"hide-mouse-while-typing":function(e){r.setAutomaticMouseHiding(e)},"home-keys-scroll":function(e){r.keyboard.homeKeysScroll=e},keybindings:function(e){if(r.keyboard.bindings.clear(),e)if(e instanceof Object)try{r.keyboard.bindings.addBindings(e)}catch(e){console.error("Error in keybindings preference: "+e)}else console.error("Error in keybindings preference: Expected object")},"media-keys-are-fkeys":function(e){r.keyboard.mediaKeysAreFKeys=e},"meta-sends-escape":function(e){r.keyboard.metaSendsEscape=e},"mouse-right-click-paste":function(e){r.mouseRightClickPaste=e},"mouse-paste-button":function(e){r.syncMousePasteButton()},"page-keys-scroll":function(e){r.keyboard.pageKeysScroll=e},"pass-alt-number":function(e){null==e&&(e="mac"!=U.os&&"popup"!=U.windowType),r.passAltNumber=e},"pass-ctrl-number":function(e){null==e&&(e="mac"!=U.os&&"popup"!=U.windowType),r.passCtrlNumber=e},"pass-meta-number":function(e){null==e&&(e="mac"==U.os&&"popup"!=U.windowType),r.passMetaNumber=e},"pass-meta-v":function(e){r.keyboard.passMetaV=e},"receive-encoding":function(e){/^(utf-8|raw)$/.test(e)||(console.warn('Invalid value for "receive-encoding": '+e),e="utf-8"),r.vt.characterEncoding=e},"scroll-on-keystroke":function(e){r.scrollOnKeystroke_=e},"scroll-on-output":function(e){r.scrollOnOutput_=e},"scrollbar-visible":function(e){r.setScrollbarVisible(e)},"scroll-wheel-may-send-arrow-keys":function(e){r.scrollWheelArrowKeys_=e},"scroll-wheel-move-multiplier":function(e){r.setScrollWheelMoveMultipler(e)},"send-encoding":function(e){/^(utf-8|raw)$/.test(e)||(console.warn('Invalid value for "send-encoding": '+e),e="utf-8"),r.keyboard.characterEncoding=e},"shift-insert-paste":function(e){r.keyboard.shiftInsertPaste=e},"terminal-encoding":function(e){r.vt.setEncoding(e)},"user-css":function(e){r.scrollPort_.setUserCssUrl(e)},"user-css-text":function(e){r.scrollPort_.setUserCssText(e)},"word-break-match-left":function(e){r.primaryScreen_.wordBreakMatchLeft=e,r.alternateScreen_.wordBreakMatchLeft=e},"word-break-match-right":function(e){r.primaryScreen_.wordBreakMatchRight=e,r.alternateScreen_.wordBreakMatchRight=e},"word-break-match-middle":function(e){r.primaryScreen_.wordBreakMatchMiddle=e,r.alternateScreen_.wordBreakMatchMiddle=e},"allow-images-inline":function(e){r.allowImagesInline=e}}),this.prefs_.readStorage(function(){this.prefs_.notifyAll(),t&&t()}.bind(this))},U.Terminal.prototype.getPrefs=function(){return this.prefs_},U.Terminal.prototype.setBracketedPaste=function(e){this.options_.bracketedPaste=e},U.Terminal.prototype.setCursorColor=function(e){void 0===e&&(e=this.prefs_.get("cursor-color")),this.setCssVar("cursor-color",e)},U.Terminal.prototype.getCursorColor=function(){return this.getCssVar("cursor-color")},U.Terminal.prototype.setSelectionEnabled=function(e){this.enableMouseDragScroll=e},U.Terminal.prototype.setBackgroundColor=function(e){void 0===e&&(e=this.prefs_.get("background-color")),this.backgroundColor_=K.colors.normalizeCSS(e),this.primaryScreen_.textAttributes.setDefaults(this.foregroundColor_,this.backgroundColor_),this.alternateScreen_.textAttributes.setDefaults(this.foregroundColor_,this.backgroundColor_),this.scrollPort_.setBackgroundColor(e)},U.Terminal.prototype.getBackgroundColor=function(){return this.backgroundColor_},U.Terminal.prototype.setForegroundColor=function(e){void 0===e&&(e=this.prefs_.get("foreground-color")),this.foregroundColor_=K.colors.normalizeCSS(e),this.primaryScreen_.textAttributes.setDefaults(this.foregroundColor_,this.backgroundColor_),this.alternateScreen_.textAttributes.setDefaults(this.foregroundColor_,this.backgroundColor_),this.scrollPort_.setForegroundColor(e)},U.Terminal.prototype.getForegroundColor=function(){return this.foregroundColor_},U.Terminal.prototype.runCommandClass=function(e,t){var r=this.prefs_.get("environment");"object"==typeof r&&null!=r||(r={});var o=this;this.command=new e({argString:t||"",io:this.io.push(),environment:r,onExit:function(e){o.io.pop(),o.uninstallKeyboard(),o.prefs_.get("close-on-exit")&&window.close()}}),this.installKeyboard(),this.command.run()},U.Terminal.prototype.isPrimaryScreen=function(){return this.screen_==this.primaryScreen_},U.Terminal.prototype.installKeyboard=function(){this.keyboard.installKeyboard(this.scrollPort_.getDocument().body)},U.Terminal.prototype.uninstallKeyboard=function(){this.keyboard.installKeyboard(null)},U.Terminal.prototype.setCssVar=function(e,t,r="--hterm-"){this.document_.documentElement.style.setProperty(`${r}${e}`,t)},U.Terminal.prototype.getCssVar=function(e,t="--hterm-"){return this.document_.documentElement.style.getPropertyValue(`${t}${e}`)},U.Terminal.prototype.setFontSize=function(e){e<=0&&(e=this.prefs_.get("font-size")),this.scrollPort_.setFontSize(e),this.setCssVar("charsize-width",this.scrollPort_.characterSize.width+"px"),this.setCssVar("charsize-height",this.scrollPort_.characterSize.height+"px")},U.Terminal.prototype.getFontSize=function(){return this.scrollPort_.getFontSize()},U.Terminal.prototype.getFontFamily=function(){return this.scrollPort_.getFontFamily()},U.Terminal.prototype.syncFontFamily=function(){this.scrollPort_.setFontFamily(this.prefs_.get("font-family"),this.prefs_.get("font-smoothing")),this.syncBoldSafeState()},U.Terminal.prototype.syncMousePasteButton=function(){var e=this.prefs_.get("mouse-paste-button");"number"!=typeof e?"linux"!=U.os?this.mousePasteButton=1:this.mousePasteButton=2:this.mousePasteButton=e},U.Terminal.prototype.syncBoldSafeState=function(){var e=this.prefs_.get("enable-bold");if(null!==e)return this.primaryScreen_.textAttributes.enableBold=e,void(this.alternateScreen_.textAttributes.enableBold=e);var t=this.scrollPort_.measureCharacterSize(),r=this.scrollPort_.measureCharacterSize("bold"),o=t.equals(r);o||console.warn("Bold characters disabled: Size of bold weight differs from normal.  Font family is: "+this.scrollPort_.getFontFamily()),this.primaryScreen_.textAttributes.enableBold=o,this.alternateScreen_.textAttributes.enableBold=o},U.Terminal.prototype.setTextBlink=function(e){void 0===e&&(e=this.prefs_.get("enable-blink")),this.setCssVar("blink-node-duration",e?"0.7s":"0")},U.Terminal.prototype.syncMouseStyle=function(){this.setCssVar("mouse-cursor-style",this.vt.mouseReport==this.vt.MOUSE_REPORT_DISABLED?"var(--hterm-mouse-cursor-text)":"var(--hterm-mouse-cursor-pointer)")},U.Terminal.prototype.saveCursor=function(){return this.screen_.cursorPosition.clone()},U.Terminal.prototype.getTextAttributes=function(){return this.screen_.textAttributes},U.Terminal.prototype.setTextAttributes=function(e){this.screen_.textAttributes=e},U.Terminal.prototype.getZoomFactor=function(){return this.scrollPort_.characterSize.zoomFactor},U.Terminal.prototype.setWindowTitle=function(e){window.document.title=e},U.Terminal.prototype.restoreCursor=function(e){var t=K.f.clamp(e.row,0,this.screenSize.height-1),r=K.f.clamp(e.column,0,this.screenSize.width-1);this.screen_.setCursorPosition(t,r),(e.column>r||e.column==r&&e.overflow)&&(this.screen_.cursorPosition.overflow=!0)},U.Terminal.prototype.clearCursorOverflow=function(){this.screen_.cursorPosition.overflow=!1},U.Terminal.prototype.saveCursorAndState=function(e){e?(this.primaryScreen_.saveCursorAndState(this.vt),this.alternateScreen_.saveCursorAndState(this.vt)):this.screen_.saveCursorAndState(this.vt)},U.Terminal.prototype.restoreCursorAndState=function(e){e?(this.primaryScreen_.restoreCursorAndState(this.vt),this.alternateScreen_.restoreCursorAndState(this.vt)):this.screen_.restoreCursorAndState(this.vt)},U.Terminal.prototype.setCursorShape=function(e){this.cursorShape_=e,this.restyleCursor_()},U.Terminal.prototype.getCursorShape=function(){return this.cursorShape_},U.Terminal.prototype.setWidth=function(e){null!=e?(this.div_.style.width=Math.ceil(this.scrollPort_.characterSize.width*e+this.scrollPort_.currentScrollbarWidthPx)+"px",this.realizeSize_(e,this.screenSize.height),this.scheduleSyncCursorPosition_()):this.div_.style.width="100%"},U.Terminal.prototype.setHeight=function(e){null!=e?(this.div_.style.height=this.scrollPort_.characterSize.height*e+"px",this.realizeSize_(this.screenSize.width,e),this.scheduleSyncCursorPosition_()):this.div_.style.height="100%"},U.Terminal.prototype.realizeSize_=function(e,t){e!=this.screenSize.width&&this.realizeWidth_(e),t!=this.screenSize.height&&this.realizeHeight_(t),this.io.onTerminalResize_(e,t)},U.Terminal.prototype.realizeWidth_=function(e){if(e<=0)throw new Error("Attempt to realize bad width: "+e);var t=e-this.screen_.getWidth();if(this.screenSize.width=e,this.screen_.setColumnCount(e),t>0)this.defaultTabStops&&this.setDefaultTabStops(this.screenSize.width-t);else for(var r=this.tabStops_.length-1;r>=0&&!(this.tabStops_[r]<e);r--)this.tabStops_.pop();this.screen_.setColumnCount(this.screenSize.width)},U.Terminal.prototype.realizeHeight_=function(e){if(e<=0)throw new Error("Attempt to realize bad height: "+e);var t=e-this.screen_.getHeight();this.screenSize.height=e;var r=this.saveCursor();if(t<0){for(t*=-1;t;){var o=this.getRowCount()-1;if(o-this.scrollbackRows_.length==r.row)break;if(this.getRowText(o))break;this.screen_.popRow(),t--}var i=this.screen_.shiftRows(t);this.scrollbackRows_.push.apply(this.scrollbackRows_,i),r.row=Math.max(r.row-t,0)}else if(t>0){if(t<=this.scrollbackRows_.length){var n=Math.min(t,this.scrollbackRows_.length),s=this.scrollbackRows_.splice(this.scrollbackRows_.length-n,n);this.screen_.unshiftRows(s),t-=n,r.row+=n}t&&this.appendRows_(t)}this.setVTScrollRegion(null,null),this.restoreCursor(r)},U.Terminal.prototype.scrollHome=function(){this.scrollPort_.scrollRowToTop(0)},U.Terminal.prototype.scrollEnd=function(){this.scrollPort_.scrollRowToBottom(this.getRowCount())},U.Terminal.prototype.scrollPageUp=function(){this.scrollPort_.scrollPageUp()},U.Terminal.prototype.scrollPageDown=function(){this.scrollPort_.scrollPageDown()},U.Terminal.prototype.scrollLineUp=function(){var e=this.scrollPort_.getTopRowIndex();this.scrollPort_.scrollRowToTop(e-1)},U.Terminal.prototype.scrollLineDown=function(){var e=this.scrollPort_.getTopRowIndex();this.scrollPort_.scrollRowToTop(e+1)},U.Terminal.prototype.wipeContents=function(){this.clearHome(this.primaryScreen_),this.clearHome(this.alternateScreen_),this.clearScrollback()},U.Terminal.prototype.clearScrollback=function(){this.scrollEnd(),this.scrollbackRows_.length=0,this.scrollPort_.resetCache(),[this.primaryScreen_,this.alternateScreen_].forEach(e=>{const t=e.getHeight();this.renumberRows_(0,t,e)}),this.syncCursorPosition_(),this.scrollPort_.invalidate()},U.Terminal.prototype.reset=function(){this.vt.reset(),this.clearAllTabStops(),this.setDefaultTabStops();const e=e=>{e.textAttributes.reset(),e.textAttributes.resetColorPalette(),this.clearHome(e),e.saveCursorAndState(this.vt)};e(this.primaryScreen_),e(this.alternateScreen_),this.options_=new U.Options,this.setCursorBlink(!!this.prefs_.get("cursor-blink")),this.setVTScrollRegion(null,null),this.setCursorVisible(!0)},U.Terminal.prototype.softReset=function(){this.vt.reset(),this.options_=new U.Options,this.options_.cursorBlink=!!this.timeouts_.cursorBlink;const e=e=>{e.textAttributes.reset(),e.textAttributes.resetColorPalette(),e.saveCursorAndState(this.vt)};e(this.primaryScreen_),e(this.alternateScreen_),this.setVTScrollRegion(null,null),this.setCursorVisible(!0)},U.Terminal.prototype.forwardTabStop=function(){for(var e=this.screen_.cursorPosition.column,t=0;t<this.tabStops_.length;t++)if(this.tabStops_[t]>e)return void this.setCursorColumn(this.tabStops_[t]);var r=this.screen_.cursorPosition.overflow;this.setCursorColumn(this.screenSize.width-1),this.screen_.cursorPosition.overflow=r},U.Terminal.prototype.backwardTabStop=function(){for(var e=this.screen_.cursorPosition.column,t=this.tabStops_.length-1;t>=0;t--)if(this.tabStops_[t]<e)return void this.setCursorColumn(this.tabStops_[t]);this.setCursorColumn(1)},U.Terminal.prototype.setTabStop=function(e){for(var t=this.tabStops_.length-1;t>=0;t--){if(this.tabStops_[t]==e)return;if(this.tabStops_[t]<e)return void this.tabStops_.splice(t+1,0,e)}this.tabStops_.splice(0,0,e)},U.Terminal.prototype.clearTabStopAtCursor=function(){var e=this.screen_.cursorPosition.column,t=this.tabStops_.indexOf(e);-1!=t&&this.tabStops_.splice(t,1)},U.Terminal.prototype.clearAllTabStops=function(){this.tabStops_.length=0,this.defaultTabStops=!1},U.Terminal.prototype.setDefaultTabStops=function(e){for(var t=e||0,r=this.tabWidth,o=t=t-1-(t-1)%r+r;o<this.screenSize.width;o+=r)this.setTabStop(o);this.defaultTabStops=!0},U.Terminal.prototype.interpret=function(e){this.scheduleSyncCursorPosition_(),this.vt.interpret(e)},U.Terminal.prototype.decorate=function(e){const t=e.ownerDocument.characterSet.toLowerCase();"utf-8"!=t&&console.warn(`Document encoding should be set to utf-8, not "${t}";`+" Add <meta charset='utf-8'/> to your HTML <head> to fix."),this.div_=e,this.accessibilityReader_=new U.AccessibilityReader(e),this.scrollPort_.decorate(e),this.scrollPort_.setBackgroundImage(this.prefs_.get("background-image")),this.scrollPort_.setBackgroundSize(this.prefs_.get("background-size")),this.scrollPort_.setBackgroundPosition(this.prefs_.get("background-position")),this.scrollPort_.setUserCssUrl(this.prefs_.get("user-css")),this.scrollPort_.setUserCssText(this.prefs_.get("user-css-text")),this.scrollPort_.setAccessibilityReader(this.accessibilityReader_),this.div_.focus=this.focus.bind(this),this.setFontSize(this.prefs_.get("font-size")),this.syncFontFamily(),this.setScrollbarVisible(this.prefs_.get("scrollbar-visible")),this.setScrollWheelMoveMultipler(this.prefs_.get("scroll-wheel-move-multiplier")),this.document_=this.scrollPort_.getDocument(),this.accessibilityReader_.decorate(this.document_),this.document_.body.oncontextmenu=function(){return!1},this.contextMenu.setDocument(this.document_);var r=this.onMouse_.bind(this),o=this.scrollPort_.getScreenNode();o.addEventListener("mousedown",r),o.addEventListener("mouseup",r),o.addEventListener("mousemove",r),this.scrollPort_.onScrollWheel=r,o.addEventListener("keydown",this.onKeyboardActivity_.bind(this)),o.addEventListener("focus",this.onFocusChange_.bind(this,!0)),o.addEventListener("mousedown",function(){setTimeout(this.onFocusChange_.bind(this,!0))}.bind(this)),o.addEventListener("blur",this.onFocusChange_.bind(this,!1));var i=this.document_.createElement("style");i.textContent='.cursor-node[focus="false"] {  box-sizing: border-box;  background-color: transparent !important;  border-width: 2px;  border-style: solid;}menu {  margin: 0;  padding: 0;  cursor: var(--hterm-mouse-cursor-pointer);}menuitem {  white-space: nowrap;  border-bottom: 1px dashed;  display: block;  padding: 0.3em 0.3em 0 0.3em;}menuitem.separator {  border-bottom: none;  height: 0.5em;  padding: 0;}menuitem:hover {  color: var(--hterm-cursor-color);}.wc-node {  display: inline-block;  text-align: center;  width: calc(var(--hterm-charsize-width) * 2);  line-height: var(--hterm-charsize-height);}:root {  --hterm-charsize-width: '+this.scrollPort_.characterSize.width+"px;  --hterm-charsize-height: "+this.scrollPort_.characterSize.height+"px;  --hterm-cursor-offset-col: -1;  --hterm-cursor-offset-row: -1;  --hterm-blink-node-duration: 0.7s;  --hterm-mouse-cursor-text: text;  --hterm-mouse-cursor-pointer: default;  --hterm-mouse-cursor-style: var(--hterm-mouse-cursor-text);}.uri-node:hover {  text-decoration: underline;  cursor: var(--hterm-mouse-cursor-pointer), pointer;}@keyframes blink {  from { opacity: 1.0; }  to { opacity: 0.0; }}.blink-node {  animation-name: blink;  animation-duration: var(--hterm-blink-node-duration);  animation-iteration-count: infinite;  animation-timing-function: ease-in-out;  animation-direction: alternate;}",this.document_.head.insertBefore(i,this.document_.head.firstChild),this.cursorNode_=this.document_.createElement("div"),this.cursorNode_.id="hterm:terminal-cursor",this.cursorNode_.className="cursor-node",this.cursorNode_.style.cssText="position: absolute;left: calc(var(--hterm-charsize-width) * var(--hterm-cursor-offset-col));top: calc(var(--hterm-charsize-height) * var(--hterm-cursor-offset-row));display: "+(this.options_.cursorVisible?"":"none")+";width: var(--hterm-charsize-width);height: var(--hterm-charsize-height);background-color: var(--hterm-cursor-color);border-color: var(--hterm-cursor-color);-webkit-transition: opacity, background-color 100ms linear;-moz-transition: opacity, background-color 100ms linear;",this.setCursorColor(),this.setCursorBlink(!!this.prefs_.get("cursor-blink")),this.restyleCursor_(),this.document_.body.appendChild(this.cursorNode_),this.scrollBlockerNode_=this.document_.createElement("div"),this.scrollBlockerNode_.id="hterm:mouse-drag-scroll-blocker",this.scrollBlockerNode_.setAttribute("aria-hidden","true"),this.scrollBlockerNode_.style.cssText="position: absolute;top: -99px;display: block;width: 10px;height: 10px;",this.document_.body.appendChild(this.scrollBlockerNode_),this.scrollPort_.onScrollWheel=r,["mousedown","mouseup","mousemove","click","dblclick"].forEach(function(e){this.scrollBlockerNode_.addEventListener(e,r),this.cursorNode_.addEventListener(e,r),this.document_.addEventListener(e,r)}.bind(this)),this.cursorNode_.addEventListener("mousedown",function(){setTimeout(this.focus.bind(this))}.bind(this)),this.setReverseVideo(!1),this.scrollPort_.focus(),this.scrollPort_.scheduleRedraw()},U.Terminal.prototype.getDocument=function(){return this.document_},U.Terminal.prototype.focus=function(){this.scrollPort_.focus()},U.Terminal.prototype.getRowNode=function(e){if(e<this.scrollbackRows_.length)return this.scrollbackRows_[e];var t=e-this.scrollbackRows_.length;return this.screen_.rowsArray[t]},U.Terminal.prototype.getRowsText=function(e,t){for(var r=[],o=e;o<t;o++){var i=this.getRowNode(o);r.push(i.textContent),o<t-1&&!i.getAttribute("line-overflow")&&r.push("\n")}return r.join("")},U.Terminal.prototype.getRowText=function(e){return this.getRowNode(e).textContent},U.Terminal.prototype.getRowCount=function(){return this.scrollbackRows_.length+this.screen_.rowsArray.length},U.Terminal.prototype.appendRows_=function(e){for(var t=this.screen_.rowsArray.length,r=this.scrollbackRows_.length+t,o=0;o<e;o++){var i=this.document_.createElement("x-row");i.appendChild(this.document_.createTextNode("")),i.rowIndex=r+o,this.screen_.pushRow(i)}var n=this.screen_.rowsArray.length-this.screenSize.height;if(n>0){var s=this.screen_.shiftRows(n);Array.prototype.push.apply(this.scrollbackRows_,s),this.scrollPort_.isScrolledEnd&&this.scheduleScrollDown_()}t>=this.screen_.rowsArray.length&&(t=this.screen_.rowsArray.length-1),this.setAbsoluteCursorPosition(t,0)},U.Terminal.prototype.moveRows_=function(e,t,r){var o,i,n=this.screen_.removeRows(e,t);this.screen_.insertRows(r,n),e<r?(o=e,i=r+t):(o=r,i=e+t),this.renumberRows_(o,i),this.scrollPort_.scheduleInvalidate()},U.Terminal.prototype.renumberRows_=function(e,t,r){for(var o=r||this.screen_,i=this.scrollbackRows_.length,n=e;n<t;n++)o.rowsArray[n].rowIndex=i+n},U.Terminal.prototype.print=function(e){this.scheduleSyncCursorPosition_(),this.accessibilityReader_.announce(e);var t=0,r=K.wc.strWidth(e);for(0==r&&e&&(r=1);t<r;){this.options_.wraparound&&this.screen_.cursorPosition.overflow&&(this.screen_.commitLineOverflow(),this.newLine(!0));var o,i=r-t,n=!1;this.screen_.cursorPosition.column+i>=this.screenSize.width&&(n=!0,i=this.screenSize.width-this.screen_.cursorPosition.column),n&&!this.options_.wraparound?(o=K.wc.substr(e,t,i-1)+K.wc.substr(e,r-1),i=r):o=K.wc.substr(e,t,i);for(var s=U.TextAttributes.splitWidecharString(o),a=0;a<s.length;a++)this.screen_.textAttributes.wcNode=s[a].wcNode,this.screen_.textAttributes.asciiNode=s[a].asciiNode,this.options_.insertMode?this.screen_.insertString(s[a].str,s[a].wcStrWidth):this.screen_.overwriteString(s[a].str,s[a].wcStrWidth),this.screen_.textAttributes.wcNode=!1,this.screen_.textAttributes.asciiNode=!0;this.screen_.maybeClipCurrentRow(),t+=i}this.scrollOnOutput_&&this.scrollPort_.scrollRowToBottom(this.getRowCount())},U.Terminal.prototype.setVTScrollRegion=function(e,t){0==e&&t==this.screenSize.height-1?(this.vtScrollTop_=null,this.vtScrollBottom_=null):(this.vtScrollTop_=e,this.vtScrollBottom_=t)},U.Terminal.prototype.getVTScrollTop=function(){return null!=this.vtScrollTop_?this.vtScrollTop_:0},U.Terminal.prototype.getVTScrollBottom=function(){return null!=this.vtScrollBottom_?this.vtScrollBottom_:this.screenSize.height-1},U.Terminal.prototype.newLine=function(e=!1){e||this.accessibilityReader_.newLine();var t=this.screen_.cursorPosition.row==this.screen_.rowsArray.length-1;null!=this.vtScrollBottom_?this.screen_.cursorPosition.row==this.vtScrollBottom_?(this.vtScrollUp(1),this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row,0)):t?this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row,0):this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row+1,0):t?this.appendRows_(1):this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row+1,0)},U.Terminal.prototype.lineFeed=function(){var e=this.screen_.cursorPosition.column;this.newLine(),this.setCursorColumn(e)},U.Terminal.prototype.formFeed=function(){this.options_.autoCarriageReturn?this.newLine():this.lineFeed()},U.Terminal.prototype.reverseLineFeed=function(){var e=this.getVTScrollTop(),t=this.screen_.cursorPosition.row;t==e?this.insertLines(1):this.setAbsoluteCursorRow(t-1)},U.Terminal.prototype.eraseToLeft=function(){var e=this.saveCursor();this.setCursorColumn(0);const t=e.column+1;this.screen_.overwriteString(K.f.getWhitespace(t),t),this.restoreCursor(e)},U.Terminal.prototype.eraseToRight=function(e){if(!this.screen_.cursorPosition.overflow){var t=this.screenSize.width-this.screen_.cursorPosition.column,r=e?Math.min(e,t):t;if(this.screen_.textAttributes.background===this.screen_.textAttributes.DEFAULT_COLOR){var o=this.screen_.rowsArray[this.screen_.cursorPosition.row];if(U.TextAttributes.nodeWidth(o)<=this.screen_.cursorPosition.column+r)return this.screen_.deleteChars(r),void this.clearCursorOverflow()}var i=this.saveCursor();this.screen_.overwriteString(K.f.getWhitespace(r),r),this.restoreCursor(i),this.clearCursorOverflow()}},U.Terminal.prototype.eraseLine=function(){var e=this.saveCursor();this.screen_.clearCursorRow(),this.restoreCursor(e),this.clearCursorOverflow()},U.Terminal.prototype.eraseAbove=function(){var e=this.saveCursor();this.eraseToLeft();for(var t=0;t<e.row;t++)this.setAbsoluteCursorPosition(t,0),this.screen_.clearCursorRow();this.restoreCursor(e),this.clearCursorOverflow()},U.Terminal.prototype.eraseBelow=function(){var e=this.saveCursor();this.eraseToRight();for(var t=this.screenSize.height-1,r=e.row+1;r<=t;r++)this.setAbsoluteCursorPosition(r,0),this.screen_.clearCursorRow();this.restoreCursor(e),this.clearCursorOverflow()},U.Terminal.prototype.fill=function(e){var t=this.saveCursor();this.setAbsoluteCursorPosition(0,0);for(var r=0;r<this.screenSize.height;r++)for(var o=0;o<this.screenSize.width;o++)this.setAbsoluteCursorPosition(r,o),this.screen_.overwriteString(e,1);this.restoreCursor(t)},U.Terminal.prototype.clearHome=function(e){var t=e||this.screen_,r=t.getHeight();if(this.accessibilityReader_.clear(),0!=r){for(var o=0;o<r;o++)t.setCursorPosition(o,0),t.clearCursorRow();t.setCursorPosition(0,0)}},U.Terminal.prototype.clear=function(e){var t=e||this.screen_,r=t.cursorPosition.clone();this.clearHome(t),t.setCursorPosition(r.row,r.column)},U.Terminal.prototype.insertLines=function(e){var t=this.screen_.cursorPosition.row,r=this.getVTScrollBottom(),o=r-t-(e=Math.min(e,r-t))+1;o&&this.moveRows_(t,o,t+e);for(var i=e-1;i>=0;i--)this.setAbsoluteCursorPosition(t+i,0),this.screen_.clearCursorRow()},U.Terminal.prototype.deleteLines=function(e){var t=this.saveCursor(),r=t.row,o=this.getVTScrollBottom(),i=o-r+1,n=o-(e=Math.min(e,i))+1;e!=i&&this.moveRows_(r,e,n);for(var s=0;s<e;s++)this.setAbsoluteCursorPosition(n+s,0),this.screen_.clearCursorRow();this.restoreCursor(t),this.clearCursorOverflow()},U.Terminal.prototype.insertSpace=function(e){var t=this.saveCursor(),r=K.f.getWhitespace(e||1);this.screen_.insertString(r,r.length),this.screen_.maybeClipCurrentRow(),this.restoreCursor(t),this.clearCursorOverflow()},U.Terminal.prototype.deleteChars=function(e){var t=this.screen_.deleteChars(e);if(t&&!this.screen_.textAttributes.isDefault()){var r=this.saveCursor();this.setCursorColumn(this.screenSize.width-t),this.screen_.insertString(K.f.getWhitespace(t)),this.restoreCursor(r)}this.clearCursorOverflow()},U.Terminal.prototype.vtScrollUp=function(e){var t=this.saveCursor();this.setAbsoluteCursorRow(this.getVTScrollTop()),this.deleteLines(e),this.restoreCursor(t)},U.Terminal.prototype.vtScrollDown=function(e){var t=this.saveCursor();this.setAbsoluteCursorPosition(this.getVTScrollTop(),0),this.insertLines(e),this.restoreCursor(t)},U.Terminal.prototype.setAccessibilityEnabled=function(e){this.accessibilityReader_.setAccessibilityEnabled(e)},U.Terminal.prototype.setCursorPosition=function(e,t){this.options_.originMode?this.setRelativeCursorPosition(e,t):this.setAbsoluteCursorPosition(e,t)},U.Terminal.prototype.setRelativeCursorPosition=function(e,t){var r=this.getVTScrollTop();e=K.f.clamp(e+r,r,this.getVTScrollBottom()),t=K.f.clamp(t,0,this.screenSize.width-1),this.screen_.setCursorPosition(e,t)},U.Terminal.prototype.setAbsoluteCursorPosition=function(e,t){e=K.f.clamp(e,0,this.screenSize.height-1),t=K.f.clamp(t,0,this.screenSize.width-1),this.screen_.setCursorPosition(e,t)},U.Terminal.prototype.setCursorColumn=function(e){this.setAbsoluteCursorPosition(this.screen_.cursorPosition.row,e)},U.Terminal.prototype.getCursorColumn=function(){return this.screen_.cursorPosition.column},U.Terminal.prototype.setAbsoluteCursorRow=function(e){this.setAbsoluteCursorPosition(e,this.screen_.cursorPosition.column)},U.Terminal.prototype.getCursorRow=function(){return this.screen_.cursorPosition.row},U.Terminal.prototype.scheduleRedraw_=function(){if(!this.timeouts_.redraw){var e=this;this.timeouts_.redraw=setTimeout((function(){delete e.timeouts_.redraw,e.scrollPort_.redraw_()}),0)}},U.Terminal.prototype.scheduleScrollDown_=function(){if(!this.timeouts_.scrollDown){var e=this;this.timeouts_.scrollDown=setTimeout((function(){delete e.timeouts_.scrollDown,e.scrollPort_.scrollRowToBottom(e.getRowCount())}),10)}},U.Terminal.prototype.cursorUp=function(e){return this.cursorDown(-(e||1))},U.Terminal.prototype.cursorDown=function(e){e=e||1;var t=this.options_.originMode?this.getVTScrollTop():0,r=this.options_.originMode?this.getVTScrollBottom():this.screenSize.height-1,o=K.f.clamp(this.screen_.cursorPosition.row+e,t,r);this.setAbsoluteCursorRow(o)},U.Terminal.prototype.cursorLeft=function(e){if(!((e=e||1)<1)){var t=this.screen_.cursorPosition.column;if(this.options_.reverseWraparound){if(this.screen_.cursorPosition.overflow&&(e--,this.clearCursorOverflow(),!e))return;var r=this.screen_.cursorPosition.row;(o=t-e)<0&&((r=r-Math.floor(e/this.screenSize.width)-1)<0&&(r=this.screenSize.height+r%this.screenSize.height),o=this.screenSize.width+o%this.screenSize.width),this.setCursorPosition(Math.max(r,0),o)}else{var o=Math.max(t-e,0);this.setCursorColumn(o)}}},U.Terminal.prototype.cursorRight=function(e){if(!((e=e||1)<1)){var t=K.f.clamp(this.screen_.cursorPosition.column+e,0,this.screenSize.width-1);this.setCursorColumn(t)}},U.Terminal.prototype.setReverseVideo=function(e){this.options_.reverseVideo=e,e?(this.scrollPort_.setForegroundColor(this.prefs_.get("background-color")),this.scrollPort_.setBackgroundColor(this.prefs_.get("foreground-color"))):(this.scrollPort_.setForegroundColor(this.prefs_.get("foreground-color")),this.scrollPort_.setBackgroundColor(this.prefs_.get("background-color")))},U.Terminal.prototype.ringBell=function(){this.cursorNode_.style.backgroundColor=this.scrollPort_.getForegroundColor();var e=this;if(setTimeout((function(){e.restyleCursor_()}),200),!this.bellSquelchTimeout_&&(this.bellAudio_.getAttribute("src")?(this.bellAudio_.play(),this.bellSequelchTimeout_=setTimeout(function(){delete this.bellSquelchTimeout_}.bind(this),500)):delete this.bellSquelchTimeout_,this.desktopNotificationBell_&&!this.document_.hasFocus())){var t=U.notify();this.bellNotificationList_.push(t),t.onclick=function(){e.closeBellNotifications_()}}},U.Terminal.prototype.setOriginMode=function(e){this.options_.originMode=e,this.setCursorPosition(0,0)},U.Terminal.prototype.setInsertMode=function(e){this.options_.insertMode=e},U.Terminal.prototype.setAutoCarriageReturn=function(e){this.options_.autoCarriageReturn=e},U.Terminal.prototype.setWraparound=function(e){this.options_.wraparound=e},U.Terminal.prototype.setReverseWraparound=function(e){this.options_.reverseWraparound=e},U.Terminal.prototype.setAlternateMode=function(e){var t=this.saveCursor();if(this.screen_=e?this.alternateScreen_:this.primaryScreen_,this.screen_.rowsArray.length&&this.screen_.rowsArray[0].rowIndex!=this.scrollbackRows_.length)for(var r=this.scrollbackRows_.length,o=this.screen_.rowsArray,i=0;i<o.length;i++)o[i].rowIndex=r+i;this.realizeWidth_(this.screenSize.width),this.realizeHeight_(this.screenSize.height),this.scrollPort_.syncScrollHeight(),this.scrollPort_.invalidate(),this.restoreCursor(t),this.scrollPort_.resize()},U.Terminal.prototype.setCursorBlink=function(e){this.options_.cursorBlink=e,!e&&this.timeouts_.cursorBlink&&(clearTimeout(this.timeouts_.cursorBlink),delete this.timeouts_.cursorBlink),this.options_.cursorVisible&&this.setCursorVisible(!0)},U.Terminal.prototype.setCursorVisible=function(e){if(this.options_.cursorVisible=e,!e)return this.timeouts_.cursorBlink&&(clearTimeout(this.timeouts_.cursorBlink),delete this.timeouts_.cursorBlink),void(this.cursorNode_.style.opacity="0");if(this.syncCursorPosition_(),this.cursorNode_.style.opacity="1",this.options_.cursorBlink){if(this.timeouts_.cursorBlink)return;this.onCursorBlink_()}else this.timeouts_.cursorBlink&&(clearTimeout(this.timeouts_.cursorBlink),delete this.timeouts_.cursorBlink)},U.Terminal.prototype.syncCursorPosition_=function(){var e=this.scrollPort_.getTopRowIndex(),t=this.scrollPort_.getBottomRowIndex(e),r=this.scrollbackRows_.length+this.screen_.cursorPosition.row;let o=!1;if(this.accessibilityReader_.accessibilityEnabled){const e=this.screen_.cursorPosition.column,t=this.screen_.rowsArray[this.screen_.cursorPosition.row].innerText;o=this.accessibilityReader_.hasUserGesture,this.accessibilityReader_.afterCursorChange(t,r,e)}if(r>t)return this.setCssVar("cursor-offset-row","-1"),!1;this.options_.cursorVisible&&"none"==this.cursorNode_.style.display&&(this.cursorNode_.style.display=""),this.setCssVar("cursor-offset-row",`${r-e} + `+`${this.scrollPort_.visibleRowTopMargin}px`),this.setCssVar("cursor-offset-col",this.screen_.cursorPosition.column),this.cursorNode_.setAttribute("title","("+this.screen_.cursorPosition.column+", "+this.screen_.cursorPosition.row+")");var i=this.document_.getSelection();return i&&(i.isCollapsed||o)&&this.screen_.syncSelectionCaret(i),!0},U.Terminal.prototype.restyleCursor_=function(){var e=this.cursorShape_;"false"==this.cursorNode_.getAttribute("focus")&&(e=U.Terminal.cursorShape.BLOCK);var t=this.cursorNode_.style;switch(e){case U.Terminal.cursorShape.BEAM:t.height="var(--hterm-charsize-height)",t.backgroundColor="transparent",t.borderBottomStyle=null,t.borderLeftStyle="solid";break;case U.Terminal.cursorShape.UNDERLINE:t.height=this.scrollPort_.characterSize.baseline+"px",t.backgroundColor="transparent",t.borderBottomStyle="solid",t.borderLeftStyle=null;break;default:t.height="var(--hterm-charsize-height)",t.backgroundColor="var(--hterm-cursor-color)",t.borderBottomStyle=null,t.borderLeftStyle=null}},U.Terminal.prototype.scheduleSyncCursorPosition_=function(){if(!this.timeouts_.syncCursor){if(this.accessibilityReader_.accessibilityEnabled){const e=this.scrollbackRows_.length+this.screen_.cursorPosition.row,t=this.screen_.cursorPosition.column,r=this.screen_.rowsArray[this.screen_.cursorPosition.row].innerText;this.accessibilityReader_.beforeCursorChange(r,e,t)}var e=this;this.timeouts_.syncCursor=setTimeout((function(){e.syncCursorPosition_(),delete e.timeouts_.syncCursor}),0)}},U.Terminal.prototype.showZoomWarning_=function(e){if(!this.zoomWarningNode_){if(!e)return;this.zoomWarningNode_=this.document_.createElement("div"),this.zoomWarningNode_.id="hterm:zoom-warning",this.zoomWarningNode_.style.cssText="color: black;background-color: #ff2222;font-size: large;border-radius: 8px;opacity: 0.75;padding: 0.2em 0.5em 0.2em 0.5em;top: 0.5em;right: 1.2em;position: absolute;-webkit-text-size-adjust: none;-webkit-user-select: none;-moz-text-size-adjust: none;-moz-user-select: none;",this.zoomWarningNode_.addEventListener("click",(function(e){this.parentNode.removeChild(this)}))}this.zoomWarningNode_.textContent=K.MessageManager.replaceReferences(U.zoomWarningMessage,[parseInt(100*this.scrollPort_.characterSize.zoomFactor)]),this.zoomWarningNode_.style.fontFamily=this.prefs_.get("font-family"),e?this.zoomWarningNode_.parentNode||this.div_.parentNode.appendChild(this.zoomWarningNode_):this.zoomWarningNode_.parentNode&&this.zoomWarningNode_.parentNode.removeChild(this.zoomWarningNode_)},U.Terminal.prototype.showOverlay=function(e,t){if(!this.overlayNode_){if(!this.div_)return;this.overlayNode_=this.document_.createElement("div"),this.overlayNode_.style.cssText="border-radius: 15px;font-size: xx-large;opacity: 0.75;padding: 0.2em 0.5em 0.2em 0.5em;position: absolute;-webkit-user-select: none;-webkit-transition: opacity 180ms ease-in;-moz-user-select: none;-moz-transition: opacity 180ms ease-in;",this.overlayNode_.addEventListener("mousedown",(function(e){e.preventDefault(),e.stopPropagation()}),!0)}this.overlayNode_.style.color=this.prefs_.get("background-color"),this.overlayNode_.style.backgroundColor=this.prefs_.get("foreground-color"),this.overlayNode_.style.fontFamily=this.prefs_.get("font-family"),this.overlayNode_.textContent=e,this.overlayNode_.style.opacity="0.75",this.overlayNode_.parentNode||this.div_.appendChild(this.overlayNode_);var r=U.getClientSize(this.div_),o=U.getClientSize(this.overlayNode_);this.overlayNode_.style.top=(r.height-o.height)/2+"px",this.overlayNode_.style.left=(r.width-o.width-this.scrollPort_.currentScrollbarWidthPx)/2+"px",this.overlayTimeout_&&clearTimeout(this.overlayTimeout_),this.accessibilityReader_.assertiveAnnounce(e),null!==t&&(this.overlayTimeout_=setTimeout(()=>{this.overlayNode_.style.opacity="0",this.overlayTimeout_=setTimeout(()=>this.hideOverlay(),200)},t||1500))},U.Terminal.prototype.hideOverlay=function(){this.overlayTimeout_&&clearTimeout(this.overlayTimeout_),this.overlayTimeout_=null,this.overlayNode_.parentNode&&this.overlayNode_.parentNode.removeChild(this.overlayNode_),this.overlayNode_.style.opacity="0.75"},U.Terminal.prototype.paste=function(){return U.pasteFromClipboard(this.document_)},U.Terminal.prototype.copyStringToClipboard=function(e){this.prefs_.get("enable-clipboard-notice")&&setTimeout(this.showOverlay.bind(this,U.notifyCopyMessage,500),200);var t=this.document_.createElement("pre");t.id="hterm:copy-to-clipboard-source",t.textContent=e,t.style.cssText="-webkit-user-select: text;-moz-user-select: text;position: absolute;top: -99px",this.document_.body.appendChild(t);var r=this.document_.getSelection(),o=r.anchorNode,i=r.anchorOffset,n=r.focusNode,s=r.focusOffset;try{r.selectAllChildren(t)}catch(e){}U.copySelectionToClipboard(this.document_),r.extend&&(r.collapse(o,i),r.extend(n,s)),t.parentNode.removeChild(t)},U.Terminal.prototype.displayImage=function(e,t,r){if(void 0!==e.uri){if(e.name||(e.name=""),!0!==this.allowImagesInline){this.newLine();const e=this.getRowNode(this.scrollbackRows_.length+this.getCursorRow()-1);if(!1===this.allowImagesInline)return void(e.textContent=U.msg("POPUP_INLINE_IMAGE_DISABLED",[],"Inline Images Disabled"));let t;const r=this.document_.createElement("span");return r.innerText=U.msg("POPUP_INLINE_IMAGE",[],"Inline Images"),r.style.fontWeight="bold",r.style.borderWidth="1px",r.style.borderStyle="dashed",(t=this.document_.createElement("span")).innerText=U.msg("BUTTON_BLOCK",[],"block"),t.style.marginLeft="1em",t.style.borderWidth="1px",t.style.borderStyle="solid",t.addEventListener("click",()=>{this.prefs_.set("allow-images-inline",!1)}),r.appendChild(t),(t=this.document_.createElement("span")).innerText=U.msg("BUTTON_ALLOW_SESSION",[],"allow this session"),t.style.marginLeft="1em",t.style.borderWidth="1px",t.style.borderStyle="solid",t.addEventListener("click",()=>{this.allowImagesInline=!0}),r.appendChild(t),(t=this.document_.createElement("span")).innerText=U.msg("BUTTON_ALLOW_ALWAYS",[],"always allow"),t.style.marginLeft="1em",t.style.borderWidth="1px",t.style.borderStyle="solid",t.addEventListener("click",()=>{this.prefs_.set("allow-images-inline",!0)}),r.appendChild(t),void e.appendChild(r)}if(e.inline){const o=this.io.push();o.showOverlay(U.msg("LOADING_RESOURCE_START",[e.name],"Loading $1 ..."),null),o.onVTKeystroke=o.sendString=()=>{};const i=this.document_.createElement("img");i.src=e.uri,i.title=i.alt=e.name,this.document_.body.appendChild(i),i.onload=()=>{i.style.objectFit=e.preserveAspectRatio?"scale-down":"fill",i.style.maxWidth=`${this.document_.body.clientWidth}px`,i.style.maxHeight=`${this.document_.body.clientHeight}px`;const r=(e,t,r)=>{if(!e||"auto"==e)return"";const o=e.match(/^([0-9]+)(px|%)?$/);return o?"%"==o[2]?t*parseInt(o[1])/100+"px":"px"==o[2]?e:`calc(${e} * var(${r}))`:""};i.style.width=r(e.width,this.document_.body.clientWidth,"--hterm-charsize-width"),i.style.height=r(e.height,this.document_.body.clientHeight,"--hterm-charsize-height");const n=Math.ceil(i.clientHeight/this.scrollPort_.characterSize.height);for(let e=0;e<n;++e)this.newLine();i.style.maxHeight=`calc(${n} * var(--hterm-charsize-height))`,this.document_.body.removeChild(i);const s=this.document_.createElement("div");s.style.position="relative",s.style.textAlign=e.align,i.style.position="absolute",i.style.bottom="calc(0px - var(--hterm-charsize-height))",s.appendChild(i),this.getRowNode(this.scrollbackRows_.length+this.getCursorRow()-1).appendChild(s),o.hideOverlay(),o.pop(),t&&t()},i.onerror=t=>{this.document_.body.removeChild(i),o.showOverlay(U.msg("LOADING_RESOURCE_FAILED",[e.name],"Loading $1 failed")),o.pop(),r&&r(t)}}else{const t=this.document_.createElement("a");t.href=e.uri,t.download=e.name,this.document_.body.appendChild(t),t.click(),t.remove()}}},U.Terminal.prototype.getSelectionText=function(){var e=this.scrollPort_.selection;if(e.sync(),e.isCollapsed)return null;var t=e.startOffset,r=e.startNode;if(!r)return null;if("X-ROW"!=r.nodeName)for("#text"==r.nodeName&&"SPAN"==r.parentNode.nodeName&&(r=r.parentNode);r.previousSibling;)r=r.previousSibling,t+=U.TextAttributes.nodeWidth(r);var o=U.TextAttributes.nodeWidth(e.endNode)-e.endOffset;if("X-ROW"!=(r=e.endNode).nodeName)for("#text"==r.nodeName&&"SPAN"==r.parentNode.nodeName&&(r=r.parentNode);r.nextSibling;)r=r.nextSibling,o+=U.TextAttributes.nodeWidth(r);var i=this.getRowsText(e.startRow.rowIndex,e.endRow.rowIndex+1);return K.wc.substring(i,t,K.wc.strWidth(i)-o)},U.Terminal.prototype.copySelectionToClipboard=function(){var e=this.getSelectionText();null!=e&&this.copyStringToClipboard(e)},U.Terminal.prototype.overlaySize=function(){this.showOverlay(this.screenSize.width+"x"+this.screenSize.height)},U.Terminal.prototype.onVTKeystroke=function(e){this.scrollOnKeystroke_&&this.scrollPort_.scrollRowToBottom(this.getRowCount()),this.io.onVTKeystroke(this.keyboard.encode(e))},U.Terminal.prototype.openSelectedUrl_=function(){var e=this.getSelectionText();if((null!=e||(this.screen_.expandSelectionForUrl(this.document_.getSelection()),null!=(e=this.getSelectionText())))&&!(e.length>2048||e.search(/[\s\[\](){}<>"'\\^`]/)>=0)){if(e.search("^[a-zA-Z][a-zA-Z0-9+.-]*://")<0)switch(e.split(":",1)[0]){case"mailto":break;default:e="http://"+e}U.openUrl(e)}},U.Terminal.prototype.setAutomaticMouseHiding=function(e=null){null===e&&(e="cros"!=U.os&&"mac"!=U.os),this.mouseHideWhileTyping_=!!e},U.Terminal.prototype.onKeyboardActivity_=function(e){this.mouseHideWhileTyping_&&!this.mouseHideDelay_&&this.setCssVar("mouse-cursor-style","none")},U.Terminal.prototype.onMouse_=function(e){if(!e.processedByTerminalHandler_){e.button>2&&e.preventDefault();var t=!this.defeatMouseReports_&&this.vt.mouseReport!=this.vt.MOUSE_REPORT_DISABLED;if(e.processedByTerminalHandler_=!0,this.mouseHideWhileTyping_&&!this.mouseHideDelay_&&(this.syncMouseStyle(),this.mouseHideDelay_=setTimeout(()=>this.mouseHideDelay_=null,1e3)),e.terminalRow=parseInt((e.clientY-this.scrollPort_.visibleRowTopMargin)/this.scrollPort_.characterSize.height)+1,e.terminalColumn=parseInt(e.clientX/this.scrollPort_.characterSize.width)+1,!("mousedown"==e.type&&e.terminalColumn>this.screenSize.width)){if(this.options_.cursorVisible&&!t&&(e.terminalRow-1==this.screen_.cursorPosition.row&&e.terminalColumn-1==this.screen_.cursorPosition.column?this.cursorNode_.style.display="none":"none"==this.cursorNode_.style.display&&(this.cursorNode_.style.display="")),"mousedown"==e.type&&(this.contextMenu.hide(e),e.altKey||!t?(this.defeatMouseReports_=!0,this.setSelectionEnabled(!0)):(this.defeatMouseReports_=!1,this.document_.getSelection().collapseToEnd(),this.setSelectionEnabled(!1),e.preventDefault())),t)this.scrollBlockerNode_.engaged||("mousedown"==e.type?(this.scrollBlockerNode_.engaged=!0,this.scrollBlockerNode_.style.top=e.clientY-5+"px",this.scrollBlockerNode_.style.left=e.clientX-5+"px"):"mousemove"==e.type&&(this.document_.getSelection().collapseToEnd(),e.preventDefault())),this.onMouse(e);else{if("dblclick"==e.type&&(this.screen_.expandSelection(this.document_.getSelection()),this.copyOnSelect&&this.copySelectionToClipboard(this.document_)),"click"==e.type&&!e.shiftKey&&(e.ctrlKey||e.metaKey))return clearTimeout(this.timeouts_.openUrl),void(this.timeouts_.openUrl=setTimeout(this.openSelectedUrl_.bind(this),500));if("mousedown"==e.type&&(e.ctrlKey&&2==e.button?(e.preventDefault(),this.contextMenu.show(e,this)):(e.button==this.mousePasteButton||this.mouseRightClickPaste&&2==e.button)&&(this.paste()||console.warn("Could not paste manually due to web restrictions"))),"mouseup"==e.type&&0==e.button&&this.copyOnSelect&&!this.document_.getSelection().isCollapsed&&this.copySelectionToClipboard(this.document_),"mousemove"!=e.type&&"mouseup"!=e.type||!this.scrollBlockerNode_.engaged||(this.scrollBlockerNode_.engaged=!1,this.scrollBlockerNode_.style.top="-99px"),this.scrollWheelArrowKeys_&&!e.shiftKey&&this.keyboard.applicationCursor&&!this.isPrimaryScreen()&&"wheel"==e.type){const t=this.scrollPort_.scrollWheelDelta(e),r=(e,t,r,o)=>{if(0==e)return"";const i=K.f.smartFloorDivide(Math.abs(e),t);return("O"+(e<0?o:r)).repeat(i)};this.io.sendString(r(t.y,this.scrollPort_.characterSize.height,"A","B")+r(t.x,this.scrollPort_.characterSize.width,"C","D")),e.preventDefault()}}"mouseup"==e.type&&this.document_.getSelection().isCollapsed&&(this.defeatMouseReports_=!1)}}},U.Terminal.prototype.onMouse=function(e){},U.Terminal.prototype.onFocusChange_=function(e){this.cursorNode_.setAttribute("focus",e),this.restyleCursor_(),this.reportFocus&&this.io.sendString(!0===e?"[I":"[O"),!0===e&&this.closeBellNotifications_()},U.Terminal.prototype.onScroll_=function(){this.scheduleSyncCursorPosition_()},U.Terminal.prototype.onPaste_=function(e){var t=e.text.replace(/\n/gm,"\r");if(t=this.keyboard.encode(t),this.options_.bracketedPaste){const e=e=>e.replace(/[\x00-\x07\x0b-\x0c\x0e-\x1f]/g,"");t="[200~"+e(t)+"[201~"}this.io.sendString(t)},U.Terminal.prototype.onCopy_=function(e){this.useDefaultWindowCopy||(e.preventDefault(),setTimeout(this.copySelectionToClipboard.bind(this),0))},U.Terminal.prototype.onResize_=function(){var e=Math.floor(this.scrollPort_.getScreenWidth()/this.scrollPort_.characterSize.width)||0,t=K.f.smartFloorDivide(this.scrollPort_.getScreenHeight(),this.scrollPort_.characterSize.height)||0;if(!(e<=0||t<=0)){var r=e!=this.screenSize.width||t!=this.screenSize.height;this.realizeSize_(e,t),this.showZoomWarning_(1!=this.scrollPort_.characterSize.zoomFactor),r&&this.overlaySize(),this.restyleCursor_(),this.scheduleSyncCursorPosition_()}},U.Terminal.prototype.onCursorBlink_=function(){this.options_.cursorBlink?"false"==this.cursorNode_.getAttribute("focus")||"0"==this.cursorNode_.style.opacity?(this.cursorNode_.style.opacity="1",this.timeouts_.cursorBlink=setTimeout(this.myOnCursorBlink_,this.cursorBlinkCycle_[0])):(this.cursorNode_.style.opacity="0",this.timeouts_.cursorBlink=setTimeout(this.myOnCursorBlink_,this.cursorBlinkCycle_[1])):delete this.timeouts_.cursorBlink},U.Terminal.prototype.setScrollbarVisible=function(e){this.scrollPort_.setScrollbarVisible(e)},U.Terminal.prototype.setScrollWheelMoveMultipler=function(e){this.scrollPort_.setScrollWheelMoveMultipler(e)},U.Terminal.prototype.closeBellNotifications_=function(){this.bellNotificationList_.forEach((function(e){e.close()})),this.bellNotificationList_.length=0},U.Terminal.prototype.onScrollportFocus_=function(){const e=this.scrollPort_.getTopRowIndex(),t=this.scrollPort_.getBottomRowIndex(e),r=this.document_.getSelection();!this.syncCursorPosition_()&&r&&r.collapse(this.getRowNode(t))},K.rtdep("lib.encodeUTF8"),U.Terminal.IO=function(e){this.terminal_=e,this.previousIO_=null,this.buffered_=""},U.Terminal.IO.prototype.showOverlay=function(e,t){this.terminal_.showOverlay(e,t)},U.Terminal.IO.prototype.hideOverlay=function(){this.terminal_.hideOverlay()},U.Terminal.IO.prototype.createFrame=function(e,t){return new U.Frame(this.terminal_,e,t)},U.Terminal.IO.prototype.setTerminalProfile=function(e){this.terminal_.setProfile(e)},U.Terminal.IO.prototype.push=function(){var e=new U.Terminal.IO(this.terminal_);return e.keyboardCaptured_=this.keyboardCaptured_,e.columnCount=this.columnCount,e.rowCount=this.rowCount,e.previousIO_=this.terminal_.io,this.terminal_.io=e,e},U.Terminal.IO.prototype.pop=function(){this.terminal_.io=this.previousIO_,this.previousIO_.flush()},U.Terminal.IO.prototype.flush=function(){this.buffered_&&(this.terminal_.interpret(this.buffered_),this.buffered_="")},U.Terminal.IO.prototype.sendString=function(e){console.log("Unhandled sendString: "+e)},U.Terminal.IO.prototype.onVTKeystroke=function(e){console.log("Unobserverd VT keystroke: "+JSON.stringify(e))},U.Terminal.IO.prototype.onTerminalResize_=function(e,t){for(var r=this;r;)r.columnCount=e,r.rowCount=t,r=r.previousIO_;this.onTerminalResize(e,t)},U.Terminal.IO.prototype.onTerminalResize=function(e,t){},U.Terminal.IO.prototype.writeUTF8=function(e){this.terminal_.io==this?this.terminal_.interpret(e):this.buffered_+=e},U.Terminal.IO.prototype.writelnUTF8=function(e){this.writeUTF8(e+"\r\n")},U.Terminal.IO.prototype.print=U.Terminal.IO.prototype.writeUTF16=function(e){this.writeUTF8(K.encodeUTF8(e))},U.Terminal.IO.prototype.println=U.Terminal.IO.prototype.writelnUTF16=function(e){this.writelnUTF8(K.encodeUTF8(e))},K.rtdep("lib.colors"),U.TextAttributes=function(e){this.document_=e,this.foregroundSource=this.SRC_DEFAULT,this.backgroundSource=this.SRC_DEFAULT,this.underlineSource=this.SRC_DEFAULT,this.foreground=this.DEFAULT_COLOR,this.background=this.DEFAULT_COLOR,this.underlineColor=this.DEFAULT_COLOR,this.defaultForeground="rgb(255, 255, 255)",this.defaultBackground="rgb(0, 0, 0)",this.bold=!1,this.faint=!1,this.italic=!1,this.blink=!1,this.underline=!1,this.strikethrough=!1,this.inverse=!1,this.invisible=!1,this.wcNode=!1,this.asciiNode=!0,this.tileData=null,this.uri=null,this.uriId=null,this.colorPalette=null,this.resetColorPalette()},U.TextAttributes.prototype.enableBold=!0,U.TextAttributes.prototype.enableBoldAsBright=!0,U.TextAttributes.prototype.DEFAULT_COLOR=K.f.createEnum(""),U.TextAttributes.prototype.SRC_DEFAULT="default",U.TextAttributes.prototype.setDocument=function(e){this.document_=e},U.TextAttributes.prototype.clone=function(){var e=new U.TextAttributes(null);for(var t in this)e[t]=this[t];return e.colorPalette=this.colorPalette.concat(),e},U.TextAttributes.prototype.reset=function(){this.foregroundSource=this.SRC_DEFAULT,this.backgroundSource=this.SRC_DEFAULT,this.underlineSource=this.SRC_DEFAULT,this.foreground=this.DEFAULT_COLOR,this.background=this.DEFAULT_COLOR,this.underlineColor=this.DEFAULT_COLOR,this.bold=!1,this.faint=!1,this.italic=!1,this.blink=!1,this.underline=!1,this.strikethrough=!1,this.inverse=!1,this.invisible=!1,this.wcNode=!1,this.asciiNode=!0,this.uri=null,this.uriId=null},U.TextAttributes.prototype.resetColorPalette=function(){this.colorPalette=K.colors.colorPalette.concat(),this.syncColors()},U.TextAttributes.prototype.resetColor=function(e){e=parseInt(e,10),isNaN(e)||e>=this.colorPalette.length||(this.colorPalette[e]=K.colors.stockColorPalette[e],this.syncColors())},U.TextAttributes.prototype.isDefault=function(){return this.foregroundSource==this.SRC_DEFAULT&&this.backgroundSource==this.SRC_DEFAULT&&!this.bold&&!this.faint&&!this.italic&&!this.blink&&!this.underline&&!this.strikethrough&&!this.inverse&&!this.invisible&&!this.wcNode&&this.asciiNode&&null==this.tileData&&null==this.uri},U.TextAttributes.prototype.createContainer=function(e){if(this.isDefault()){const t=this.document_.createTextNode(e);return t.asciiNode=!0,t}var t=this.document_.createElement("span"),r=t.style,o=[];this.foreground!=this.DEFAULT_COLOR&&(r.color=this.foreground),this.background!=this.DEFAULT_COLOR&&(r.backgroundColor=this.background),this.enableBold&&this.bold&&(r.fontWeight="bold"),this.faint&&(t.faint=!0),this.italic&&(r.fontStyle="italic"),this.blink&&(o.push("blink-node"),t.blinkNode=!0);let i="";return t.underline=this.underline,this.underline&&(i+=" underline",r.textDecorationStyle=this.underline),this.underlineSource!=this.SRC_DEFAULT&&(r.textDecorationColor=this.underlineColor),this.strikethrough&&(i+=" line-through",t.strikethrough=!0),i&&(r.textDecorationLine=i),this.wcNode&&(o.push("wc-node"),t.wcNode=!0),t.asciiNode=this.asciiNode,null!=this.tileData&&(o.push("tile"),o.push("tile_"+this.tileData),t.tileNode=!0),e&&(t.textContent=e),this.uri&&(o.push("uri-node"),t.uriId=this.uriId,t.title=this.uri,t.addEventListener("click",U.openUrl.bind(this,this.uri))),o.length&&(t.className=o.join(" ")),t},U.TextAttributes.prototype.matchesContainer=function(e){if("string"==typeof e||e.nodeType==Node.TEXT_NODE)return this.isDefault();var t=e.style;return!(this.wcNode||e.wcNode||this.asciiNode!=e.asciiNode||null!=this.tileData||e.tileNode||this.uriId!=e.uriId||this.foreground!=t.color||this.background!=t.backgroundColor||this.underlineColor!=t.textDecorationColor||(this.enableBold&&this.bold)!=!!t.fontWeight||this.blink!=!!e.blinkNode||this.italic!=!!t.fontStyle||this.underline!=e.underline||!!this.strikethrough!=!!e.strikethrough)},U.TextAttributes.prototype.setDefaults=function(e,t){this.defaultForeground=e,this.defaultBackground=t,this.syncColors()},U.TextAttributes.prototype.syncColors=function(){const e=(e,t)=>e==this.DEFAULT_COLOR?t:e;var t,r=this.foregroundSource,o=this.backgroundSource;if(this.enableBoldAsBright&&this.bold&&Number.isInteger(r)&&(r=(t=r)<8?t+8:t),r==this.SRC_DEFAULT?this.foreground=this.DEFAULT_COLOR:Number.isInteger(r)?this.foreground=this.colorPalette[r]:this.foreground=r,this.faint){const t=e(this.foreground,this.defaultForeground);this.foreground=K.colors.mix(t,"rgb(0, 0, 0)",.3333)}if(o==this.SRC_DEFAULT?this.background=this.DEFAULT_COLOR:Number.isInteger(o)?this.background=this.colorPalette[o]:this.background=o,this.inverse){const t=e(this.foreground,this.defaultForeground);this.foreground=e(this.background,this.defaultBackground),this.background=t}this.invisible&&(this.foreground=this.background),this.underlineSource==this.SRC_DEFAULT?this.underlineColor="":Number.isInteger(this.underlineSource)?this.underlineColor=this.colorPalette[this.underlineSource]:this.underlineColor=this.underlineSource},U.TextAttributes.containersMatch=function(e,t){if("string"==typeof e)return U.TextAttributes.containerIsDefault(t);if(e.nodeType!=t.nodeType)return!1;if(e.nodeType==Node.TEXT_NODE)return!0;var r=e.style,o=t.style;return r.color==o.color&&r.backgroundColor==o.backgroundColor&&r.backgroundColor==o.backgroundColor&&r.fontWeight==o.fontWeight&&r.fontStyle==o.fontStyle&&r.textDecoration==o.textDecoration&&r.textDecorationColor==o.textDecorationColor&&r.textDecorationStyle==o.textDecorationStyle&&r.textDecorationLine==o.textDecorationLine},U.TextAttributes.containerIsDefault=function(e){return"string"==typeof e||e.nodeType==Node.TEXT_NODE},U.TextAttributes.nodeWidth=function(e){return e.asciiNode?e.textContent.length:K.wc.strWidth(e.textContent)},U.TextAttributes.nodeSubstr=function(e,t,r){return e.asciiNode?e.textContent.substr(t,r):K.wc.substr(e.textContent,t,r)},U.TextAttributes.nodeSubstring=function(e,t,r){return e.asciiNode?e.textContent.substring(t,r):K.wc.substring(e.textContent,t,r)},U.TextAttributes.splitWidecharString=function(e){for(var t,r=[],o=0,i=0,n=0,s=!0,a=0;a<e.length;){var l,c=e.codePointAt(a);c<128?(n+=1,i+=1,l=1):(l=c<=65535?1:2,(t=K.wc.charWidth(c))<=1?(n+=t,i+=l,s=!1):(i&&(r.push({str:e.substr(o,i),asciiNode:s,wcStrWidth:n}),s=!0,n=0),r.push({str:e.substr(a,l),wcNode:!0,asciiNode:!1,wcStrWidth:2}),o=a+l,i=0)),a+=l}return i&&r.push({str:e.substr(o,i),asciiNode:s,wcStrWidth:n}),r},K.rtdep("lib.colors","lib.f","lib.UTF8Decoder","hterm.VT.CharacterMap"),U.VT=function(e){this.terminal=e,e.onMouse=this.onTerminalMouse_.bind(this),this.mouseReport=this.MOUSE_REPORT_DISABLED,this.mouseCoordinates=this.MOUSE_COORDINATES_X10,this.lastMouseDragResponse_=null,this.parseState_=new U.VT.ParseState(this.parseUnknown_),this.leadingModifier_="",this.trailingModifier_="",this.allowColumnWidthChanges_=!1,this.oscTimeLimit_=2e4,this.utf8Decoder_=new K.UTF8Decoder,this.enable8BitControl=!1,this.enableClipboardWrite=!0,this.enableDec12=!1,this.enableCsiJ3=!0,this.characterEncoding="utf-8",this.warnUnimplemented=!1,this.characterMaps=new U.VT.CharacterMaps,this.G0=this.G1=this.G2=this.G3=this.characterMaps.getMap("B"),this.GL="G0",this.GR="G0",this.codingSystemUtf8_=!1,this.codingSystemLocked_=!1,this.cc1Pattern_=null,this.updateEncodingState_()},U.VT.prototype.MOUSE_REPORT_DISABLED=0,U.VT.prototype.MOUSE_REPORT_PRESS=1,U.VT.prototype.MOUSE_REPORT_CLICK=2,U.VT.prototype.MOUSE_REPORT_DRAG=3,U.VT.prototype.MOUSE_COORDINATES_X10=0,U.VT.prototype.MOUSE_COORDINATES_UTF8=1,U.VT.prototype.MOUSE_COORDINATES_SGR=2,U.VT.ParseState=function(e,t){this.defaultFunction=e,this.buf=t||null,this.pos=0,this.func=e,this.args=[],this.subargs=null},U.VT.ParseState.prototype.reset=function(e){this.resetParseFunction(),this.resetBuf(e||""),this.resetArguments()},U.VT.ParseState.prototype.resetParseFunction=function(){this.func=this.defaultFunction},U.VT.ParseState.prototype.resetBuf=function(e){this.buf="string"==typeof e?e:null,this.pos=0},U.VT.ParseState.prototype.resetArguments=function(e){this.args.length=0,void 0!==e&&(this.args[0]=e)},U.VT.ParseState.prototype.parseInt=function(e,t){if(void 0===t&&(t=0),e){const r=parseInt(e,10);return 0==r?t:r}return t},U.VT.ParseState.prototype.iarg=function(e,t){return this.parseInt(this.args[e],t)},U.VT.ParseState.prototype.argHasSubargs=function(e){return this.subargs&&this.subargs[e]},U.VT.ParseState.prototype.argSetSubargs=function(e){null===this.subargs&&(this.subargs={}),this.subargs[e]=!0},U.VT.ParseState.prototype.advance=function(e){this.pos+=e},U.VT.ParseState.prototype.peekRemainingBuf=function(){return this.buf.substr(this.pos)},U.VT.ParseState.prototype.peekChar=function(){return this.buf.substr(this.pos,1)},U.VT.ParseState.prototype.consumeChar=function(){return this.buf.substr(this.pos++,1)},U.VT.ParseState.prototype.isComplete=function(){return null==this.buf||this.buf.length<=this.pos},U.VT.prototype.reset=function(){this.G0=this.G1=this.G2=this.G3=this.characterMaps.getMap("B"),this.GL="G0",this.GR="G0",this.mouseReport=this.MOUSE_REPORT_DISABLED,this.mouseCoordinates=this.MOUSE_COORDINATES_X10,this.lastMouseDragResponse_=null},U.VT.prototype.onTerminalMouse_=function(e){if(this.mouseReport==this.MOUSE_REPORT_DISABLED)return;if(this.mouseReport!=this.MOUSE_REPORT_DRAG&&"mousemove"==e.type)return;var t,r=0;let o,i;this.mouseReport!=this.MOUSE_REPORT_PRESS&&(e.shiftKey&&(r|=4),(e.metaKey||this.terminal.keyboard.altIsMeta&&e.altKey)&&(r|=8),e.ctrlKey&&(r|=16));let n=255;switch(this.mouseCoordinates){case this.MOUSE_COORDINATES_UTF8:n=2047;case this.MOUSE_COORDINATES_X10:o=String.fromCharCode(K.f.clamp(e.terminalColumn+32,32,n)),i=String.fromCharCode(K.f.clamp(e.terminalRow+32,32,n));break;case this.MOUSE_COORDINATES_SGR:o=e.terminalColumn,i=e.terminalRow}switch(e.type){case"wheel":s=64+(-1*e.deltaY>0?0:1),s|=r,t=this.mouseCoordinates==this.MOUSE_COORDINATES_SGR?`[<${s};${o};${i}M`:"[M"+String.fromCharCode(s+32)+o+i,e.preventDefault();break;case"mousedown":var s=Math.min(e.button,2);this.mouseCoordinates!=this.MOUSE_COORDINATES_SGR&&(s+=32),s|=r,t=this.mouseCoordinates==this.MOUSE_COORDINATES_SGR?`[<${s};${o};${i}M`:"[M"+String.fromCharCode(s)+o+i;break;case"mouseup":this.mouseReport!=this.MOUSE_REPORT_PRESS&&(t=this.mouseCoordinates==this.MOUSE_COORDINATES_SGR?`[<${e.button};${o};${i}m`:"[M#"+o+i);break;case"mousemove":this.mouseReport==this.MOUSE_REPORT_DRAG&&e.buttons&&(s=this.mouseCoordinates==this.MOUSE_COORDINATES_SGR?0:32,1&e.buttons?s+=0:4&e.buttons?s+=1:2&e.buttons?s+=2:s+=3,s+=32,s|=r,t=this.mouseCoordinates==this.MOUSE_COORDINATES_SGR?`[<${s};${o};${i}M`:"[M"+String.fromCharCode(s)+o+i,this.lastMouseDragResponse_==t?t="":this.lastMouseDragResponse_=t);break;case"click":case"dblclick":break;default:console.error("Unknown mouse event: "+e.type,e)}t&&this.terminal.io.sendString(t)},U.VT.prototype.interpret=function(e){for(this.parseState_.resetBuf(this.decode(e));!this.parseState_.isComplete();){var t=this.parseState_.func,r=this.parseState_.pos;e=this.parseState_.buf;if(this.parseState_.func.call(this,this.parseState_),this.parseState_.func==t&&this.parseState_.pos==r&&this.parseState_.buf==e)throw"Parser did not alter the state!"}},U.VT.prototype.decode=function(e){return"utf-8"==this.characterEncoding?this.decodeUTF8(e):e},U.VT.prototype.encodeUTF8=function(e){return K.encodeUTF8(e)},U.VT.prototype.decodeUTF8=function(e){return this.utf8Decoder_.decode(e)},U.VT.prototype.setEncoding=function(e){switch(e){default:console.warn('Invalid value for "terminal-encoding": '+e);case"iso-2022":this.codingSystemUtf8_=!1,this.codingSystemLocked_=!1;break;case"utf-8-locked":this.codingSystemUtf8_=!0,this.codingSystemLocked_=!0;break;case"utf-8":this.codingSystemUtf8_=!0,this.codingSystemLocked_=!1}this.updateEncodingState_()},U.VT.prototype.updateEncodingState_=function(){var e=Object.keys(U.VT.CC1).filter(e=>!this.codingSystemUtf8_||e.charCodeAt()<128).map(e=>"\\x"+K.f.zpad(e.charCodeAt().toString(16),2)).join("");this.cc1Pattern_=new RegExp(`[${e}]`)},U.VT.prototype.parseUnknown_=function(e){var t=this;function r(e){!t.codingSystemUtf8_&&t[t.GL].GL&&(e=t[t.GL].GL(e)),t.terminal.print(e)}var o=e.peekRemainingBuf(),i=o.search(this.cc1Pattern_);return 0==i?(this.dispatch("CC1",o.substr(0,1),e),void e.advance(1)):-1==i?(r(o),void e.reset()):(r(o.substr(0,i)),this.dispatch("CC1",o.substr(i,1),e),void e.advance(i+1))},U.VT.prototype.parseCSI_=function(e){var t=e.peekChar(),r=e.args;const o=()=>{e.resetArguments(),e.subargs=null,e.resetParseFunction()};t>="@"&&t<="~"?(this.dispatch("CSI",this.leadingModifier_+this.trailingModifier_+t,e),o()):";"==t?this.trailingModifier_?o():(r.length||r.push(""),r.push("")):t>="0"&&t<="9"||":"==t?this.trailingModifier_?o():(r.length?r[r.length-1]+=t:r[0]=t,":"==t&&e.argSetSubargs(r.length-1)):t>=" "&&t<="?"?r.length?this.trailingModifier_+=t:this.leadingModifier_+=t:this.cc1Pattern_.test(t)?this.dispatch("CC1",t,e):o(),e.advance(1)},U.VT.prototype.parseUntilStringTerminator_=function(e){var t=e.peekRemainingBuf(),r=e.args;let o=0;r.length?""==r[0].slice(-1)&&(r[0]=r[0].slice(0,-1),t=""+t,o=1):(r[0]="",r[1]=new Date);const i=t.search(/[\x1b\x07]/),n=t[i];let s;var a;return(s=(""!=n||"\\"==t[i+1])&&-1!=i)?(r[0]+=t.substr(0,i),e.resetParseFunction(),e.advance(i+(""==n?2:1)-o),!0):(r[0]+=t,""==n&&i!=t.length-1&&(a="embedded escape: "+i),new Date-r[1]>this.oscTimeLimit_&&(a="timeout expired: "+(new Date-r[1])),a?(this.warnUnimplemented&&console.log("parseUntilStringTerminator_: aborting: "+a,r[0]),e.reset(r[0]),!1):(e.advance(t.length-o),!0))},U.VT.prototype.dispatch=function(e,t,r){var o=U.VT[e][t];o?o!=U.VT.ignore?!r.subargs||o.supportsSubargs?"CC1"==e&&t>""&&!this.enable8BitControl?console.warn("Ignoring 8-bit control code: 0x"+t.charCodeAt(0).toString(16)):o.apply(this,[r,t]):this.warnUnimplemented&&console.warn("Ignored "+e+" code w/subargs: "+JSON.stringify(t)):this.warnUnimplemented&&console.warn("Ignored "+e+" code: "+JSON.stringify(t)):this.warnUnimplemented&&console.warn("Unknown "+e+" code: "+JSON.stringify(t))},U.VT.prototype.setANSIMode=function(e,t){4==e?this.terminal.setInsertMode(t):20==e?this.terminal.setAutoCarriageReturn(t):this.warnUnimplemented&&console.warn("Unimplemented ANSI Mode: "+e)},U.VT.prototype.setDECMode=function(e,t){switch(parseInt(e,10)){case 1:this.terminal.keyboard.applicationCursor=t;break;case 3:this.allowColumnWidthChanges_&&(this.terminal.setWidth(t?132:80),this.terminal.clearHome(),this.terminal.setVTScrollRegion(null,null));break;case 5:this.terminal.setReverseVideo(t);break;case 6:this.terminal.setOriginMode(t);break;case 7:this.terminal.setWraparound(t);break;case 9:this.mouseReport=t?this.MOUSE_REPORT_PRESS:this.MOUSE_REPORT_DISABLED,this.terminal.syncMouseStyle();break;case 12:this.enableDec12&&this.terminal.setCursorBlink(t);break;case 25:this.terminal.setCursorVisible(t);break;case 30:this.terminal.setScrollbarVisible(t);break;case 40:this.terminal.allowColumnWidthChanges_=t;break;case 45:this.terminal.setReverseWraparound(t);break;case 67:this.terminal.keyboard.backspaceSendsBackspace=t;break;case 1e3:this.mouseReport=t?this.MOUSE_REPORT_CLICK:this.MOUSE_REPORT_DISABLED,this.terminal.syncMouseStyle();break;case 1002:this.mouseReport=t?this.MOUSE_REPORT_DRAG:this.MOUSE_REPORT_DISABLED,this.terminal.syncMouseStyle();break;case 1004:this.terminal.reportFocus=t;break;case 1005:this.mouseCoordinates=t?this.MOUSE_COORDINATES_UTF8:this.MOUSE_COORDINATES_X10;break;case 1006:this.mouseCoordinates=t?this.MOUSE_COORDINATES_SGR:this.MOUSE_COORDINATES_X10;break;case 1007:this.terminal.scrollWheelArrowKeys_=t;break;case 1010:this.terminal.scrollOnOutput=t;break;case 1011:this.terminal.scrollOnKeystroke=t;break;case 1036:this.terminal.keyboard.metaSendsEscape=t;break;case 1039:t?this.terminal.keyboard.previousAltSendsWhat_||(this.terminal.keyboard.previousAltSendsWhat_=this.terminal.keyboard.altSendsWhat,this.terminal.keyboard.altSendsWhat="escape"):this.terminal.keyboard.previousAltSendsWhat_&&(this.terminal.keyboard.altSendsWhat=this.terminal.keyboard.previousAltSendsWhat_,this.terminal.keyboard.previousAltSendsWhat_=null);break;case 47:case 1047:this.terminal.setAlternateMode(t);break;case 1048:t?this.terminal.saveCursorAndState():this.terminal.restoreCursorAndState();break;case 1049:t?(this.terminal.saveCursorAndState(),this.terminal.setAlternateMode(t),this.terminal.clear()):(this.terminal.setAlternateMode(t),this.terminal.restoreCursorAndState());break;case 2004:this.terminal.setBracketedPaste(t);break;default:this.warnUnimplemented&&console.warn("Unimplemented DEC Private Mode: "+e)}},U.VT.ignore=function(){},U.VT.CC1={},U.VT.ESC={},U.VT.CSI={},U.VT.OSC={},U.VT.VT52={},U.VT.CC1["\0"]=U.VT.ignore,U.VT.CC1[""]=U.VT.ignore,U.VT.CC1[""]=function(){this.terminal.ringBell()},U.VT.CC1["\b"]=function(){this.terminal.cursorLeft(1)},U.VT.CC1["\t"]=function(){this.terminal.forwardTabStop()},U.VT.CC1["\n"]=function(){this.terminal.formFeed()},U.VT.CC1["\v"]=U.VT.CC1["\n"],U.VT.CC1["\f"]=U.VT.CC1["\n"],U.VT.CC1["\r"]=function(){this.terminal.setCursorColumn(0)},U.VT.CC1[""]=function(){this.GL="G1"},U.VT.CC1[""]=function(){this.GL="G0"},U.VT.CC1[""]=U.VT.ignore,U.VT.CC1[""]=U.VT.ignore,U.VT.CC1[""]=function(e){"G1"==this.GL&&(this.GL="G0"),e.resetParseFunction(),this.terminal.print("?")},U.VT.CC1[""]=U.VT.CC1[""],U.VT.CC1[""]=function(e){e.func=function e(t){var r=t.consumeChar();""!=r&&(this.dispatch("ESC",r,t),t.func==e&&t.resetParseFunction())}},U.VT.CC1[""]=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC.D=function(){this.terminal.lineFeed()},U.VT.CC1[""]=U.VT.ESC.E=function(){this.terminal.setCursorColumn(0),this.terminal.cursorDown(1)},U.VT.CC1[""]=U.VT.ESC.H=function(){this.terminal.setTabStop(this.terminal.getCursorColumn())},U.VT.CC1[""]=U.VT.ESC.M=function(){this.terminal.reverseLineFeed()},U.VT.CC1[""]=U.VT.ESC.N=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC.O=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC.P=function(e){e.resetArguments(),e.func=this.parseUntilStringTerminator_},U.VT.CC1[""]=U.VT.ESC.V=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC.W=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC.X=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC.Z=function(){this.terminal.io.sendString("[?1;2c")},U.VT.CC1[""]=U.VT.ESC["["]=function(e){e.resetArguments(),this.leadingModifier_="",this.trailingModifier_="",e.func=this.parseCSI_},U.VT.CC1[""]=U.VT.ESC["\\"]=U.VT.ignore,U.VT.CC1[""]=U.VT.ESC["]"]=function(e){e.resetArguments(),e.func=function e(t){if(this.parseUntilStringTerminator_(t)&&t.func!=e){var r=t.args[0].match(/^(\d+);(.*)$/);r?(t.args[0]=r[2],this.dispatch("OSC",r[1],t)):console.warn("Invalid OSC: "+JSON.stringify(t.args[0])),t.resetArguments()}}},U.VT.CC1[""]=U.VT.ESC["^"]=function(e){e.resetArguments(),e.func=this.parseUntilStringTerminator_},U.VT.CC1[""]=U.VT.ESC._=function(e){e.resetArguments(),e.func=this.parseUntilStringTerminator_},U.VT.ESC[" "]=function(e){e.func=function(e){var t=e.consumeChar();this.warnUnimplemented&&console.warn("Unimplemented sequence: ESC 0x20 "+t),e.resetParseFunction()}},U.VT.ESC["#"]=function(e){e.func=function(e){"8"==e.consumeChar()&&(this.terminal.setCursorPosition(0,0),this.terminal.fill("E")),e.resetParseFunction()}},U.VT.ESC["%"]=function(e){e.func=function(e){var t=e.consumeChar();if(this.codingSystemLocked_)return"/"==t&&e.consumeChar(),void e.resetParseFunction();switch(t){case"@":this.setEncoding("iso-2022");break;case"G":this.setEncoding("utf-8");break;case"/":switch(t=e.consumeChar()){case"G":case"H":case"I":this.setEncoding("utf-8-locked");break;default:this.warnUnimplemented&&console.warn("Unknown ESC % / argument: "+JSON.stringify(t))}break;default:this.warnUnimplemented&&console.warn("Unknown ESC % argument: "+JSON.stringify(t))}e.resetParseFunction()}},U.VT.ESC["("]=U.VT.ESC[")"]=U.VT.ESC["*"]=U.VT.ESC["+"]=U.VT.ESC["-"]=U.VT.ESC["."]=U.VT.ESC["/"]=function(e,t){e.func=function(e){var r=e.consumeChar();if(""==r)return e.resetParseFunction(),void e.func();var o=this.characterMaps.getMap(r);void 0!==o?"("==t?this.G0=o:")"==t||"-"==t?this.G1=o:"*"==t||"."==t?this.G2=o:"+"!=t&&"/"!=t||(this.G3=o):this.warnUnimplemented&&console.log('Invalid character set for "'+t+'": '+r),e.resetParseFunction()}},U.VT.ESC[6]=U.VT.ignore,U.VT.ESC[7]=function(){this.terminal.saveCursorAndState()},U.VT.ESC[8]=function(){this.terminal.restoreCursorAndState()},U.VT.ESC[9]=U.VT.ignore,U.VT.ESC["="]=function(){this.terminal.keyboard.applicationKeypad=!0},U.VT.ESC[">"]=function(){this.terminal.keyboard.applicationKeypad=!1},U.VT.ESC.F=U.VT.ignore,U.VT.ESC.c=function(){this.terminal.reset()},U.VT.ESC.l=U.VT.ESC.m=U.VT.ignore,U.VT.ESC.n=function(){this.GL="G2"},U.VT.ESC.o=function(){this.GL="G3"},U.VT.ESC["|"]=function(){this.GR="G3"},U.VT.ESC["}"]=function(){this.GR="G2"},U.VT.ESC["~"]=function(){this.GR="G1"},U.VT.OSC[0]=function(e){this.terminal.setWindowTitle(e.args[0])},U.VT.OSC[2]=U.VT.OSC[0],U.VT.OSC[4]=function(e){for(var t=e.args[0].split(";"),r=parseInt(t.length/2),o=this.terminal.getTextAttributes().colorPalette,i=[],n=0;n<r;++n){var s=parseInt(t[2*n]),a=t[2*n+1];s>=o.length||("?"!=a?(a=K.colors.x11ToCSS(a))&&(o[s]=a):(a=K.colors.rgbToX11(o[s]))&&i.push(s+";"+a))}i.length&&this.terminal.io.sendString("]4;"+i.join(";")+"")},U.VT.OSC[8]=function(e){const t=e.args[0].split(";");let r=null,o=null;if(2!=t.length||0==t[1].length);else{const e=t[0].split(":");r="",e.forEach(e=>{const t=e.indexOf("=");if(-1==t)return;const o=e.slice(0,t),i=e.slice(t+1);switch(o){case"id":r=i}}),o=t[1]}const i=this.terminal.getTextAttributes();i.uri=o,i.uriId=r},U.VT.OSC[9]=function(e){U.notify({body:e.args[0]})},U.VT.OSC[10]=function(e){var t=e.args[0].split(";");if(t){var r=K.colors.x11ToCSS(t.shift());r&&this.terminal.setForegroundColor(r),t.length>0&&(e.args[0]=t.join(";"),U.VT.OSC[11].apply(this,[e]))}},U.VT.OSC[11]=function(e){var t=e.args[0].split(";");if(t){var r=K.colors.x11ToCSS(t.shift());r&&this.terminal.setBackgroundColor(r),t.length>0&&(e.args[0]=t.join(";"),U.VT.OSC[12].apply(this,[e]))}},U.VT.OSC[12]=function(e){var t=e.args[0].split(";");if(t){var r=K.colors.x11ToCSS(t.shift());r&&this.terminal.setCursorColor(r)}},U.VT.OSC[50]=function(e){var t=e.args[0].match(/CursorShape=(.)/i);if(t)switch(t[1]){case"1":this.terminal.setCursorShape(U.Terminal.cursorShape.BEAM);break;case"2":this.terminal.setCursorShape(U.Terminal.cursorShape.UNDERLINE);break;default:this.terminal.setCursorShape(U.Terminal.cursorShape.BLOCK)}else console.warn("Could not parse OSC 50 args: "+e.args[0])},U.VT.OSC[52]=function(e){if(this.enableClipboardWrite){var t=e.args[0].match(/^[cps01234567]*;(.*)/);if(t){var r=window.atob(t[1]);r&&this.terminal.copyStringToClipboard(this.decode(r))}}},U.VT.OSC[104]=function(e){const t=this.terminal.getTextAttributes();e.args[0]?e.args[0].split(";").forEach(e=>t.resetColor(e)):t.resetColorPalette()},U.VT.OSC[110]=function(e){this.terminal.setForegroundColor()},U.VT.OSC[111]=function(e){this.terminal.setBackgroundColor()},U.VT.OSC[112]=function(e){this.terminal.setCursorColor()},U.VT.OSC[1337]=function(e){let t=e.args[0].match(/^File=([^:]*):([\s\S]*)$/m);if(!t)return void(this.warnUnimplemented&&console.log(`iTerm2 1337: unsupported sequence: ${t[1]}`));const r={name:"",size:0,preserveAspectRatio:!0,inline:!1,width:"auto",height:"auto",align:"left",uri:"data:application/octet-stream;base64,"+t[2].replace(/[\n\r]+/gm,"")};if(t[1].split(";").forEach(e=>{const t=e.match(/^([^=]+)=(.*)$/m);if(t)switch(t[1]){case"name":try{r.name=window.atob(t[2])}catch(e){}break;case"size":try{r.size=parseInt(t[2])}catch(e){}break;case"width":r.width=t[2];break;case"height":r.height=t[2];break;case"preserveAspectRatio":r.preserveAspectRatio=!("0"==t[2]);break;case"inline":r.inline=!("0"==t[2]);break;case"align":r.align=t[2]}}),r.inline){const t=this.terminal.io,o=e.peekRemainingBuf();e.advance(o.length),this.terminal.displayImage(r),t.writeUTF8(o)}else this.terminal.displayImage(r)},U.VT.OSC[777]=function(e){var t;switch(e.args[0].split(";",1)[0]){case"notify":var r,o;(t=e.args[0].match(/^[^;]+;([^;]*)(;([\s\S]*))?$/))&&(r=t[1],o=t[3]),U.notify({title:r,body:o});break;default:console.warn("Unknown urxvt module: "+e.args[0])}},U.VT.CSI["@"]=function(e){this.terminal.insertSpace(e.iarg(0,1))},U.VT.CSI.A=function(e){this.terminal.cursorUp(e.iarg(0,1))},U.VT.CSI.B=function(e){this.terminal.cursorDown(e.iarg(0,1))},U.VT.CSI.C=function(e){this.terminal.cursorRight(e.iarg(0,1))},U.VT.CSI.D=function(e){this.terminal.cursorLeft(e.iarg(0,1))},U.VT.CSI.E=function(e){this.terminal.cursorDown(e.iarg(0,1)),this.terminal.setCursorColumn(0)},U.VT.CSI.F=function(e){this.terminal.cursorUp(e.iarg(0,1)),this.terminal.setCursorColumn(0)},U.VT.CSI.G=function(e){this.terminal.setCursorColumn(e.iarg(0,1)-1)},U.VT.CSI.H=function(e){this.terminal.setCursorPosition(e.iarg(0,1)-1,e.iarg(1,1)-1)},U.VT.CSI.I=function(e){var t=e.iarg(0,1);t=K.f.clamp(t,1,this.terminal.screenSize.width);for(var r=0;r<t;r++)this.terminal.forwardTabStop()},U.VT.CSI.J=U.VT.CSI["?J"]=function(e,t){var r=e.args[0];r&&0!=r?1==r?this.terminal.eraseAbove():2==r?this.terminal.clear():3==r&&this.enableCsiJ3&&this.terminal.clearScrollback():this.terminal.eraseBelow()},U.VT.CSI.K=U.VT.CSI["?K"]=function(e,t){var r=e.args[0];r&&0!=r?1==r?this.terminal.eraseToLeft():2==r&&this.terminal.eraseLine():this.terminal.eraseToRight()},U.VT.CSI.L=function(e){this.terminal.insertLines(e.iarg(0,1))},U.VT.CSI.M=function(e){this.terminal.deleteLines(e.iarg(0,1))},U.VT.CSI.P=function(e){this.terminal.deleteChars(e.iarg(0,1))},U.VT.CSI.S=function(e){this.terminal.vtScrollUp(e.iarg(0,1))},U.VT.CSI.T=function(e){e.args.length<=1&&this.terminal.vtScrollDown(e.iarg(0,1))},U.VT.CSI[">T"]=U.VT.ignore,U.VT.CSI.X=function(e){this.terminal.eraseToRight(e.iarg(0,1))},U.VT.CSI.Z=function(e){var t=e.iarg(0,1);t=K.f.clamp(t,1,this.terminal.screenSize.width);for(var r=0;r<t;r++)this.terminal.backwardTabStop()},U.VT.CSI["`"]=U.VT.CSI.G,U.VT.CSI.a=function(e){this.terminal.setCursorColumn(this.terminal.getCursorColumn()+e.iarg(0,1))},U.VT.CSI.b=U.VT.ignore,U.VT.CSI.c=function(e){e.args[0]&&0!=e.args[0]||this.terminal.io.sendString("[?1;2c")},U.VT.CSI[">c"]=function(e){this.terminal.io.sendString("[>0;256;0c")},U.VT.CSI.d=function(e){this.terminal.setAbsoluteCursorRow(e.iarg(0,1)-1)},U.VT.CSI.f=U.VT.CSI.H,U.VT.CSI.g=function(e){e.args[0]&&0!=e.args[0]?3==e.args[0]&&this.terminal.clearAllTabStops():this.terminal.clearTabStopAtCursor(!1)},U.VT.CSI.h=function(e){for(var t=0;t<e.args.length;t++)this.setANSIMode(e.args[t],!0)},U.VT.CSI["?h"]=function(e){for(var t=0;t<e.args.length;t++)this.setDECMode(e.args[t],!0)},U.VT.CSI.i=U.VT.CSI["?i"]=U.VT.ignore,U.VT.CSI.l=function(e){for(var t=0;t<e.args.length;t++)this.setANSIMode(e.args[t],!1)},U.VT.CSI["?l"]=function(e){for(var t=0;t<e.args.length;t++)this.setDECMode(e.args[t],!1)},U.VT.prototype.parseSgrExtendedColors=function(e,t,r){let o,i;if(e.argHasSubargs(t))(o=e.args[t].split(":")).shift(),i=!0;else{if(e.argHasSubargs(t+1))return{skipCount:0};o=e.args.slice(t+1),i=!1}switch(parseInt(o[0])){default:case 0:return{skipCount:0};case 1:return i?{color:"rgba(0, 0, 0, 0)",skipCount:0}:{skipCount:0};case 2:{let t;if(t=i?4==o.length?1:2:1,o.length<t+3)return{skipCount:0};return{color:`rgb(${e.parseInt(o[t+0])}, ${e.parseInt(o[t+1])}, ${e.parseInt(o[t+2])})`,skipCount:i?0:4}}case 3:if(!i)return{skipCount:0};if(o.length<4)return{skipCount:0};e.parseInt(o[1]),e.parseInt(o[2]),e.parseInt(o[3]);return{skipCount:0};case 4:if(!i)return{skipCount:0};if(o.length<5)return{skipCount:0};e.parseInt(o[1]),e.parseInt(o[2]),e.parseInt(o[3]),e.parseInt(o[4]);return{skipCount:0};case 5:{if(o.length<2)return{skipCount:0};const t={skipCount:i?0:2},n=e.parseInt(o[1]);return n<r.colorPalette.length&&(t.color=n),t}}},U.VT.CSI.m=function(e){var t=this.terminal.getTextAttributes();if(e.args.length){for(var r=0;r<e.args.length;r++){var o=e.iarg(r,0);if(o<30)if(0==o)t.reset();else if(1==o)t.bold=!0;else if(2==o)t.faint=!0;else if(3==o)t.italic=!0;else if(4==o)if(e.argHasSubargs(r)){const o=e.args[r].split(":")[1];0==o?t.underline=!1:1==o?t.underline="solid":2==o?t.underline="double":3==o?t.underline="wavy":4==o?t.underline="dotted":5==o&&(t.underline="dashed")}else t.underline="solid";else 5==o?t.blink=!0:7==o?t.inverse=!0:8==o?t.invisible=!0:9==o?t.strikethrough=!0:21==o?t.underline="double":22==o?(t.bold=!1,t.faint=!1):23==o?t.italic=!1:24==o?t.underline=!1:25==o?t.blink=!1:27==o?t.inverse=!1:28==o?t.invisible=!1:29==o&&(t.strikethrough=!1);else if(o<50)if(o<38)t.foregroundSource=o-30;else if(38==o){const o=this.parseSgrExtendedColors(e,r,t);void 0!==o.color&&(t.foregroundSource=o.color),r+=o.skipCount}else if(39==o)t.foregroundSource=t.SRC_DEFAULT;else if(o<48)t.backgroundSource=o-40;else if(48==o){const o=this.parseSgrExtendedColors(e,r,t);void 0!==o.color&&(t.backgroundSource=o.color),r+=o.skipCount}else t.backgroundSource=t.SRC_DEFAULT;else if(58==o){const o=this.parseSgrExtendedColors(e,r,t);void 0!==o.color&&(t.underlineSource=o.color),r+=o.skipCount}else 59==o?t.underlineSource=t.SRC_DEFAULT:o>=90&&o<=97?t.foregroundSource=o-90+8:o>=100&&o<=107&&(t.backgroundSource=o-100+8)}t.setDefaults(this.terminal.getForegroundColor(),this.terminal.getBackgroundColor())}else t.reset()},U.VT.CSI.m.supportsSubargs=!0,U.VT.CSI[">m"]=U.VT.ignore,U.VT.CSI.n=function(e){if(5==e.args[0])this.terminal.io.sendString("0n");else if(6==e.args[0]){var t=this.terminal.getCursorRow()+1,r=this.terminal.getCursorColumn()+1;this.terminal.io.sendString("["+t+";"+r+"R")}},U.VT.CSI[">n"]=U.VT.ignore,U.VT.CSI["?n"]=function(e){if(6==e.args[0]){var t=this.terminal.getCursorRow()+1,r=this.terminal.getCursorColumn()+1;this.terminal.io.sendString("["+t+";"+r+"R")}else 15==e.args[0]?this.terminal.io.sendString("[?11n"):25==e.args[0]?this.terminal.io.sendString("[?21n"):26==e.args[0]?this.terminal.io.sendString("[?12;1;0;0n"):53==e.args[0]&&this.terminal.io.sendString("[?50n")},U.VT.CSI[">p"]=U.VT.ignore,U.VT.CSI["!p"]=function(){this.terminal.softReset()},U.VT.CSI.$p=U.VT.ignore,U.VT.CSI["?$p"]=U.VT.ignore,U.VT.CSI['"p']=U.VT.ignore,U.VT.CSI.q=U.VT.ignore,U.VT.CSI[" q"]=function(e){var t=e.args[0];0==t||1==t?(this.terminal.setCursorShape(U.Terminal.cursorShape.BLOCK),this.terminal.setCursorBlink(!0)):2==t?(this.terminal.setCursorShape(U.Terminal.cursorShape.BLOCK),this.terminal.setCursorBlink(!1)):3==t?(this.terminal.setCursorShape(U.Terminal.cursorShape.UNDERLINE),this.terminal.setCursorBlink(!0)):4==t?(this.terminal.setCursorShape(U.Terminal.cursorShape.UNDERLINE),this.terminal.setCursorBlink(!1)):5==t?(this.terminal.setCursorShape(U.Terminal.cursorShape.BEAM),this.terminal.setCursorBlink(!0)):6==t?(this.terminal.setCursorShape(U.Terminal.cursorShape.BEAM),this.terminal.setCursorBlink(!1)):console.warn("Unknown cursor style: "+t)},U.VT.CSI['"q']=U.VT.ignore,U.VT.CSI.r=function(e){var t=e.args,r=t[0]?parseInt(t[0],10)-1:null,o=t[1]?parseInt(t[1],10)-1:null;this.terminal.setVTScrollRegion(r,o),this.terminal.setCursorPosition(0,0)},U.VT.CSI["?r"]=U.VT.ignore,U.VT.CSI.$r=U.VT.ignore,U.VT.CSI.s=function(){this.terminal.saveCursorAndState()},U.VT.CSI["?s"]=U.VT.ignore,U.VT.CSI.t=U.VT.ignore,U.VT.CSI.$t=U.VT.ignore,U.VT.CSI[">t"]=U.VT.ignore,U.VT.CSI[" t"]=U.VT.ignore,U.VT.CSI.u=function(){this.terminal.restoreCursorAndState()},U.VT.CSI[" u"]=U.VT.ignore,U.VT.CSI.$v=U.VT.ignore,U.VT.CSI["'w"]=U.VT.ignore,U.VT.CSI.x=U.VT.ignore,U.VT.CSI["*x"]=U.VT.ignore,U.VT.CSI.$x=U.VT.ignore,U.VT.CSI.z=function(e){if(!(e.args.length<1)){var t=e.args[0];if(0==t){if(e.args.length<2)return;this.terminal.getTextAttributes().tileData=e.args[1]}else 1==t&&(this.terminal.getTextAttributes().tileData=null)}},U.VT.CSI["'z"]=U.VT.ignore,U.VT.CSI.$z=U.VT.ignore,U.VT.CSI["'{"]=U.VT.ignore,U.VT.CSI["'|"]=U.VT.ignore,U.VT.CSI["'}"]=U.VT.ignore,U.VT.CSI["'~"]=U.VT.ignore,K.rtdep("lib.f"),U.VT.CharacterMap=function(e,t){this.description=e,this.GL=null,this.glmapBase_=t,this.sync_()},U.VT.CharacterMap.prototype.sync_=function(e){if(!this.glmapBase_&&!e)return this.GL=null,delete this.glmap_,void delete this.glre_;this.glmap_=e?Object.assign({},this.glmapBase_,e):this.glmapBase_;var t=Object.keys(this.glmap_).map(e=>"\\x"+K.f.zpad(e.charCodeAt(0).toString(16)));this.glre_=new RegExp("["+t.join("")+"]","g"),this.GL=e=>e.replace(this.glre_,e=>this.glmap_[e])},U.VT.CharacterMap.prototype.reset=function(){this.glmap_!==this.glmapBase_&&this.sync_()},U.VT.CharacterMap.prototype.setOverrides=function(e){this.sync_(e)},U.VT.CharacterMap.prototype.clone=function(){var e=new U.VT.CharacterMap(this.description,this.glmapBase_);return this.glmap_!==this.glmapBase_&&e.setOverrides(this.glmap_),e},U.VT.CharacterMaps=function(){this.maps_=U.VT.CharacterMaps.DefaultMaps,this.mapsBase_=this.maps_},U.VT.CharacterMaps.prototype.getMap=function(e){return this.maps_.hasOwnProperty(e)?this.maps_[e]:void 0},U.VT.CharacterMaps.prototype.addMap=function(e,t){this.maps_===this.mapsBase_&&(this.maps_=Object.assign({},this.mapsBase_)),this.maps_[e]=t},U.VT.CharacterMaps.prototype.reset=function(){this.maps_!==U.VT.CharacterMaps.DefaultMaps&&(this.maps_=U.VT.CharacterMaps.DefaultMaps)},U.VT.CharacterMaps.prototype.setOverrides=function(e){for(var t in this.maps_===this.mapsBase_&&(this.maps_=Object.assign({},this.mapsBase_)),e){var r=this.getMap(t);void 0!==r?(this.maps_[t]=r.clone(),this.maps_[t].setOverrides(e[t])):this.addMap(t,new U.VT.CharacterMap("user "+t,e[t]))}},U.VT.CharacterMaps.DefaultMaps={},U.VT.CharacterMaps.DefaultMaps[0]=new U.VT.CharacterMap("graphic",{"`":"◆",a:"▒",b:"␉",c:"␌",d:"␍",e:"␊",f:"°",g:"±",h:"␤",i:"␋",j:"┘",k:"┐",l:"┌",m:"└",n:"┼",o:"⎺",p:"⎻",q:"─",r:"⎼",s:"⎽",t:"├",u:"┤",v:"┴",w:"┬",x:"│",y:"≤",z:"≥","{":"π","|":"≠","}":"£","~":"·"}),U.VT.CharacterMaps.DefaultMaps.A=new U.VT.CharacterMap("british",{"#":"£"}),U.VT.CharacterMaps.DefaultMaps.B=new U.VT.CharacterMap("us",null),U.VT.CharacterMaps.DefaultMaps[4]=new U.VT.CharacterMap("dutch",{"#":"£","@":"¾","[":"Ĳ","\\":"½","]":"|","{":"¨","|":"f","}":"¼","~":"´"}),U.VT.CharacterMaps.DefaultMaps.C=U.VT.CharacterMaps.DefaultMaps[5]=new U.VT.CharacterMap("finnish",{"[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"}),U.VT.CharacterMaps.DefaultMaps.R=new U.VT.CharacterMap("french",{"#":"£","@":"à","[":"°","\\":"ç","]":"§","{":"é","|":"ù","}":"è","~":"¨"}),U.VT.CharacterMaps.DefaultMaps.Q=new U.VT.CharacterMap("french canadian",{"@":"à","[":"â","\\":"ç","]":"ê","^":"î","`":"ô","{":"é","|":"ù","}":"è","~":"û"}),U.VT.CharacterMaps.DefaultMaps.K=new U.VT.CharacterMap("german",{"@":"§","[":"Ä","\\":"Ö","]":"Ü","{":"ä","|":"ö","}":"ü","~":"ß"}),U.VT.CharacterMaps.DefaultMaps.Y=new U.VT.CharacterMap("italian",{"#":"£","@":"§","[":"°","\\":"ç","]":"é","`":"ù","{":"à","|":"ò","}":"è","~":"ì"}),U.VT.CharacterMaps.DefaultMaps.E=U.VT.CharacterMaps.DefaultMaps[6]=new U.VT.CharacterMap("norwegian/danish",{"@":"Ä","[":"Æ","\\":"Ø","]":"Å","^":"Ü","`":"ä","{":"æ","|":"ø","}":"å","~":"ü"}),U.VT.CharacterMaps.DefaultMaps.Z=new U.VT.CharacterMap("spanish",{"#":"£","@":"§","[":"¡","\\":"Ñ","]":"¿","{":"°","|":"ñ","}":"ç"}),U.VT.CharacterMaps.DefaultMaps[7]=U.VT.CharacterMaps.DefaultMaps.H=new U.VT.CharacterMap("swedish",{"@":"É","[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"}),U.VT.CharacterMaps.DefaultMaps["="]=new U.VT.CharacterMap("swiss",{"#":"ù","@":"à","[":"é","\\":"ç","]":"ê","^":"î",_:"è","`":"ô","{":"ä","|":"ö","}":"ü","~":"û"}),K.resource.add("hterm/audio/bell","audio/ogg;base64",""),K.resource.add("hterm/images/icon-96","image/png;base64","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"),K.resource.add("hterm/concat/date","text/plain","Mon, 26 Nov 2018 08:50:10 +0000"),K.resource.add("hterm/changelog/version","text/plain","2018-10-24"),K.resource.add("hterm/changelog/date","text/plain","1.82"),K.resource.add("hterm/git/HEAD","text/plain","03ee0980444a38a97ef947b2272e44fdb3bdf5f5");var L=/(?:\x1b)([`0-9\-=~!@#$%^&*\(\)_+\[\]\\{}|;':",.//<>?a-zA-Z])/,z=new RegExp("^"+L.source+"$"),W=new RegExp("(?:+)(O|N|\\[|\\[\\[)(?:"+["(\\d+)(?:;(\\d+))?([~^$])","(?:M([@ #!a`])(.)(.))","(?:1;)?(\\d+)?([a-zA-Z])"].join("|")+")"),Q=new RegExp("^"+W.source),G=new RegExp([W.source,L.source,/\x1b./.source].join("|"));function H(e,t){if(!function(e){return/\x1b\[M/.test(e)||/\x1b\[M([\x00\u0020-\uffff]{3})/.test(e)||/\x1b\[(\d+;\d+;\d+)M/.test(e)||/\x1b\[<(\d+;\d+;\d+)([mM])/.test(e)||/\x1b\[<(\d+;\d+;\d+;\d+)&w/.test(e)||/\x1b\[24([0135])~\[(\d+),(\d+)\]\r/.test(e)||/\x1b\[(O|I)/.test(e)}(e)){for(var r,o=[];r=G.exec(e);)(o=o.concat(e.slice(0,r.index).split(""))).push(r[0]),e=e.slice(r.index+r[0].length);(o=o.concat(e.split(""))).forEach((function(e){var r,o={sequence:e,name:null,ctrl:!1,meta:!1,shift:!1,fullName:"",code:null,ch:null};if("\r"===e)o.name="return";else if("\n"===e)o.name="linefeed";else if("\t"===e)o.name="tab";else if("\b"===e||""===e||""===e||"\b"===e)o.name="backspace",o.meta=""===e.charAt(0);else if(""===e||""===e)o.name="escape",o.meta=2===e.length;else if(" "===e||" "===e)o.name="space",o.meta=2===e.length;else if(1===e.length&&e<="")o.name=String.fromCharCode(e.charCodeAt(0)+64).toLowerCase(),o.ctrl=!0;else if(1===e.length&&e>="a"&&e<="z")o.name=e;else if(1===e.length&&e>="A"&&e<="Z")o.name=e.toLowerCase(),o.shift=!0;else if(r=z.exec(e))o.name=r[1].toLowerCase(),o.meta=!0,o.shift=/^[A-Z]$/.test(r[1]);else if(r=Q.exec(e)){var i=(r[1]||"")+(r[2]||"")+(r[4]||"")+(r[9]||""),n=(r[3]||r[8]||1)-1;switch(o.ctrl=!!(4&n),o.meta=!!(10&n),o.shift=!!(1&n),o.code=i,i){case"OP":o.name="f1";break;case"OQ":o.name="f2";break;case"OR":o.name="f3";break;case"OS":o.name="f4";break;case"[11~":o.name="f1";break;case"[12~":o.name="f2";break;case"[13~":o.name="f3";break;case"[14~":o.name="f4";break;case"[[A":o.name="f1";break;case"[[B":o.name="f2";break;case"[[C":o.name="f3";break;case"[[D":o.name="f4";break;case"[[E":case"[15~":o.name="f5";break;case"[17~":o.name="f6";break;case"[18~":o.name="f7";break;case"[19~":o.name="f8";break;case"[20~":o.name="f9";break;case"[21~":o.name="f10";break;case"[23~":o.name="f11";break;case"[24~":o.name="f12";break;case"[A":o.name="up";break;case"[B":o.name="down";break;case"[C":o.name="right";break;case"[D":o.name="left";break;case"[E":o.name="clear";break;case"[F":o.name="end";break;case"[H":o.name="home";break;case"OA":o.name="up";break;case"OB":o.name="down";break;case"OC":o.name="right";break;case"OD":o.name="left";break;case"OE":o.name="clear";break;case"OF":o.name="end";break;case"OH":case"[1~":o.name="home";break;case"[2~":o.name="insert";break;case"[3~":o.name="delete";break;case"[4~":o.name="end";break;case"[5~":o.name="pageup";break;case"[6~":o.name="pagedown";break;case"[[5~":o.name="pageup";break;case"[[6~":o.name="pagedown";break;case"[7~":o.name="home";break;case"[8~":o.name="end";break;case"[a":o.name="up",o.shift=!0;break;case"[b":o.name="down",o.shift=!0;break;case"[c":o.name="right",o.shift=!0;break;case"[d":o.name="left",o.shift=!0;break;case"[e":o.name="clear",o.shift=!0;break;case"[2$":o.name="insert",o.shift=!0;break;case"[3$":o.name="delete",o.shift=!0;break;case"[5$":o.name="pageup",o.shift=!0;break;case"[6$":o.name="pagedown",o.shift=!0;break;case"[7$":o.name="home",o.shift=!0;break;case"[8$":o.name="end",o.shift=!0;break;case"Oa":o.name="up",o.ctrl=!0;break;case"Ob":o.name="down",o.ctrl=!0;break;case"Oc":o.name="right",o.ctrl=!0;break;case"Od":o.name="left",o.ctrl=!0;break;case"Oe":o.name="clear",o.ctrl=!0;break;case"[2^":o.name="insert",o.ctrl=!0;break;case"[3^":o.name="delete",o.ctrl=!0;break;case"[5^":o.name="pageup",o.ctrl=!0;break;case"[6^":o.name="pagedown",o.ctrl=!0;break;case"[7^":o.name="home",o.ctrl=!0;break;case"[8^":o.name="end",o.ctrl=!0;break;case"[Z":o.name="tab",o.shift=!0;break;default:o.name=null}}1===e.length&&(o.ch=e);let s=o.name||"";o.shift&&(s="S-"+s),o.meta&&(s="M-"+s),o.ctrl&&(s="C-"+s),o.fullName=s,t(o)}))}}const j={keyStrokeDelay:200,lingerDelay:1e3,fadeDuration:1e3,bezelColor:"#000",textColor:"#fff",position:"top-right"};let Z={right:"→",left:"←",up:"↑",down:"↓",space:"␣",enter:"↩",return:"↩",linefeed:"C-j",shift:"S-",ctrl:"C-",tab:"⇥",escape:"⎋",pagedown:"⇟",pageup:"⇞",home:"↖",end:"↘",delete:"⌦",backspace:"⌫",meta:"M-"};var q=new class{constructor(){this.initialized=!1,this.container=null,this.style=null,this.options=j,this.currentChunk=null,this._onKey=e=>{if(!this.container)return;this.currentChunk||(this.currentChunk=document.createElement("li"),0===this.options.position.indexOf("top")?this.container.insertBefore(this.currentChunk,this.container.childNodes[0]):this.container.appendChild(this.currentChunk));var t="";e.ctrl&&(t+=Z.ctrl),e.meta&&(t+=Z.meta),e.shift&&(t+=Z.shift);let r=(e.name||"").replace(/^[CMS]-/,"");this.currentChunk.textContent+=t+(Z[r]||r||e.ch);var o=this.options;clearTimeout(this.keyStrokeTimeout),this.keyStrokeTimeout=setTimeout(()=>{!function(e){setTimeout(()=>{e.style.opacity=0,setTimeout(()=>{e.parentNode.removeChild(e)},o.fadeDuration)},o.lingerDelay)}(this.currentChunk),this.currentChunk=null},o.keyStrokeDelay)}}cleanUp(){function e(e){e&&e.parentNode&&e.parentNode.removeChild(e)}e(this.container),e(this.style),clearTimeout(this.keyStrokeTimeout),this.currentChunk=null,this.container=this.style=null}injectComponents(){this.container=document.createElement("ul");let e=document.querySelector("x-screen");e&&e.appendChild(this.container),this.container.className="keystrokes";const t={"bottom-left":"bottom: 0;","bottom-right":"bottom: 0; direction: rtl;","top-left":"top: 0;","top-right":"top: 0; direction: rtl;"};t[this.options.position]||(console.warn(`Invalid position '${this.options.position}', using default 'bottom-left'. Valid positions: `,Object.keys(t)),this.options.position="bottom-left"),this.style=document.createElement("style"),this.style.innerHTML=`\n      ul.keystrokes {\n        padding: 0 10px;\n        position: fixed;\n        left: 0;\n        right: 0;\n        ${t[this.options.position]}\n      }\n\n      ul.keystrokes li {\n        direction: ltr;\n        background-color: ${this.options.bezelColor};\n        opacity: 0.9;\n        color: ${this.options.textColor};\n        padding: 5px 10px;\n        margin-bottom: 5px;\n        border-radius: 15px;\n        opacity: 1;\n        display: table;\n        -webkit-transition: opacity ${this.options.fadeDuration}ms linear;\n        transition: opacity ${this.options.fadeDuration}ms linear;\n      }`,document.body.appendChild(this.style)}processInput(e){H(e,this._onKey)}enable(e){this.cleanUp(),this.options=Object.assign({},j,e||this.options),this.injectComponents()}disable(){this.cleanUp()}},J=o(1),Y=o.n(J),X=/[\x1b\x07]/;function $(e,t){!e.codingSystemUtf8_&&e[e.GL].GL&&(t=e[e.GL].GL(t)),e.terminal.print(t)}U.VT.prototype.parseUntilStringTerminator_=function(e){var t=e.peekRemainingBuf(),r=e.args;let o=0;r.length?""==r[0].slice(-1)&&(r[0]=r[0].slice(0,-1),t=""+t,o=1):(r[0]="",r[1]=new Date);const i=t.search(X),n=t.charAt(i);let s;var a;return(s=(""!=n||"\\"===t.charAt(i+1))&&-1!==i)?(r[0]+=t.substr(0,i),e.resetParseFunction(),e.advance(i+(""==n?2:1)-o),!0):(r[0]+=t,""==n&&i!=t.length-1&&(a="embedded escape: "+i),new Date-r[1]>this.oscTimeLimit_&&(a="timeout expired: "+(new Date-r[1])),a?(this.warnUnimplemented&&console.log("parseUntilStringTerminator_: aborting: "+a,r[0]),e.reset(r[0]),!1):(e.advance(t.length-o),!0))},U.VT.prototype.dispatch=function(e,t,r){var o=ae.get(e).get(t);o?o!==U.VT.ignore?!r.subargs||o.supportsSubargs?"CC1"===e&&t>""&&!this.enable8BitControl?console.warn("Ignoring 8-bit control code: 0x"+t.charCodeAt(0).toString(16)):o.call(this,r,t):this.warnUnimplemented&&console.warn("Ignored "+e+" code w/subargs: "+JSON.stringify(t)):this.warnUnimplemented&&console.warn("Ignored "+e+" code: "+JSON.stringify(t)):this.warnUnimplemented&&console.warn("Unknown "+e+" code: "+JSON.stringify(t))},U.VT.ParseState.prototype.peekRemainingBuf=function(){return this.buf.substr(this.pos)},U.VT.ParseState.prototype.peekChar=function(){return this.buf.charAt(this.pos)},U.VT.ParseState.prototype.consumeChar=function(){return this.buf.charAt(this.pos++)},U.VT.prototype.parseUnknown_=function(e){var t=e.peekRemainingBuf(),r=t.search(this.cc1Pattern_);return 0===r?(this.dispatch("CC1",t.charAt(0),e),void e.advance(1)):-1===r?($(this,t),void e.reset()):($(this,t.substr(0,r)),this.dispatch("CC1",t.charAt(r),e),void e.advance(r+1))};var ee,te=[],re=null,oe=!1;function ie(){Y.a.unstable_deferredUpdates(ne)}function ne(){for(var e=ee,t=Date.now()+10;;){if(null===re){if(null==(i=te.shift()))break;e.parseState_.resetBuf(i),re=e.parseState_}for(;!re.isComplete();){var r=e.parseState_.func,o=e.parseState_.pos,i=e.parseState_.buf;if(e.parseState_.func.call(e,e.parseState_),e.parseState_.func==r&&e.parseState_.pos==o&&e.parseState_.buf==i)throw oe=!1,re=null,"Parser did not alter the state!";if(t<Date.now())return void requestAnimationFrame(ie)}re=null}window.t.syncCursorPosition_(),oe=!1}function se(e){e.resetArguments(),e.subargs=null,e.resetParseFunction()}U.VT.prototype.interpret=function(e){ee=this,te.push(this.decode(e)),oe||(oe=!0,ie())},U.VT.prototype.parseCSI_=function(e){var t=e.peekChar(),r=e.args;t>="@"&&t<="~"?(this.dispatch("CSI",this.leadingModifier_+this.trailingModifier_+t,e),se(e)):";"===t?this.trailingModifier_?se(e):(r.length||r.push(""),r.push("")):t>="0"&&t<="9"||":"===t?this.trailingModifier_?se(e):(r.length?r[r.length-1]+=t:r[0]=t,":"===t&&e.argSetSubargs(r.length-1)):t>=" "&&t<="?"?r.length?this.trailingModifier_+=t:this.leadingModifier_+=t:this.cc1Pattern_.test(t)?this.dispatch("CC1",t,e):se(e),e.advance(1)};var ae=new Map;function le(e){var t=e.consumeChar();""!=t&&(this.dispatch("ESC",t,e),e.func==le&&e.resetParseFunction())}U.VT.ParseState.prototype.resetArguments=function(){this.args=[]},U.VT.ParseState.prototype.parseInt=function(e,t){const r=e>>0;return 0===r?void 0===t?r:t:r},U.VT.prototype.parseSgrExtendedColors=function(e,t,r){let o,i;if(e.argHasSubargs(t))(o=e.args[t].split(":")).shift(),i=!0;else{if(e.argHasSubargs(t+1))return{skipCount:0};if(e.args[t+1]>>0==5)return function(e,t,r){if(e.length-t+1<2)return{skipCount:0};const o=e[t+2]>>0;return o<r.colorPalette.length?{skipCount:2,color:o}:{skipCount:2}}(e.args,t,r);o=e.args.slice(t+1),i=!1}switch(o[0]>>0){default:case 0:return{skipCount:0};case 1:return i?{color:"rgba(0, 0, 0, 0)",skipCount:0}:{skipCount:0};case 2:{let e;if(e=i?4==o.length?1:2:1,o.length<e+3)return{skipCount:0};return{color:`rgb(${o[e+0]>>0}, ${o[e+1]>>0}, ${o[e+2]>>0})`,skipCount:i?0:4}}case 3:if(!i)return{skipCount:0};if(o.length<4)return{skipCount:0};o[1],o[2],o[3];return{skipCount:0};case 4:if(!i)return{skipCount:0};if(o.length<5)return{skipCount:0};o[1],o[2],o[3],o[4];return{skipCount:0};case 5:{if(o.length<2)return{skipCount:0};const e={skipCount:i?0:2},t=o[1]>>0;return t<r.colorPalette.length&&(e.color=t),e}}},U.VT.CC1[""]=function(e){e.func=le},U.VT.OSC[52]=function(e){if(!this.enableClipboardWrite)return;var t=e.args[0].match(/^[cps01234567]*;(.*)/);if(!t)return;let r;try{r=window.atob(t[1])}catch(e){return}r&&this.terminal.copyStringToClipboard(this.decode(r))},U.VT.OSC[1337]=function(e){if("BlinkAutoCR=1"===e.args[0])return void this.terminal.setAutoCarriageReturn(!0);if("BlinkAutoCR=0"===e.args[0])return void this.terminal.setAutoCarriageReturn(!1);let t=e.args[0].match(/^BlinkPrompt=(.*)$/m);if(t)return void this.terminal.prompt.promptB64(t[1]);let r=e.args[0].match(/^File=([^:]*):([\s\S]*)$/m);if(!r)return void(this.warnUnimplemented&&console.log(`iTerm2 1337: unsupported sequence: ${r[1]}`));const o={name:"",size:0,preserveAspectRatio:!0,inline:!1,width:"auto",height:"auto",align:"left",uri:"data:application/octet-stream;base64,"+r[2].replace(/[\n\r]+/gm,"")};if(r[1].split(";").forEach(e=>{const t=e.match(/^([^=]+)=(.*)$/m);if(t)switch(t[1]){case"name":try{o.name=window.atob(t[2])}catch(e){}break;case"size":try{o.size=parseInt(t[2])}catch(e){}break;case"width":o.width=t[2];break;case"height":o.height=t[2];break;case"preserveAspectRatio":o.preserveAspectRatio=!("0"==t[2]);break;case"inline":o.inline=!("0"==t[2]);break;case"align":o.align=t[2]}}),o.inline){const t=this.terminal.io,r=e.peekRemainingBuf();e.advance(r.length),this.terminal.displayImage(o),t.writeUTF8(r)}else this.terminal.displayImage(o)},U.VT.OSC[4]=function(e){for(var t=e.args[0].split(";"),r=parseInt(t.length/2),o=this.terminal.getTextAttributes().colorPalette,i=[],n=0;n<r;++n){var s=parseInt(t[2*n]),a=t[2*n+1];s>=o.length||("?"!=a?(a=K.colors.x11ToCSS(a))&&(o[s]=a):(a=K.colors.rgbToX11(o[s]))&&i.push(s+";"+a))}i.length&&this.terminal.io.sendString("]4;"+i.join(";")+""),this.terminal.getTextAttributes().refreshCSSPalette()},U.VT.OSC[10]=function(e){var t=e.args[0].split(";");if(t){var r=t.shift();if("?"==r){var o=K.colors.rgbToX11(this.terminal.getForegroundColor());o&&this.terminal.io.sendString("]10;"+o+"")}else{var i=K.colors.x11ToCSS(r);i&&this.terminal.setForegroundColor(i),this.terminal.getTextAttributes().refreshCSSPalette()}t.length>0&&(e.args[0]=t.join(";"),U.VT.OSC[11].apply(this,[e]))}},U.VT.OSC[11]=function(e){var t=e.args[0].split(";");if(t){var r=t.shift();if("?"==r){var o=K.colors.rgbToX11(this.terminal.getBackgroundColor());o&&this.terminal.io.sendString("]11;"+o+"")}else{var i=K.colors.x11ToCSS(r);i&&this.terminal.setBackgroundColor(i),this.terminal.getTextAttributes().refreshCSSPalette()}t.length>0&&(e.args[0]=t.join(";"),U.VT.OSC[12].apply(this,[e]))}},["CC1","ESC","CSI","OSC","VT52"].forEach(e=>{var t=new Map,r=U.VT[e];Object.keys(r).map(e=>{t.set(e,r[e])}),ae.set(e,t)});var ce=o(0),ue=o.n(ce);const he=300;for(var de=new Array(256),pe=new Array(256),fe=new Array(256),ge="b",me="i",ye="blink-node",be="u",_e="s",we="us",Ce={solid:"u1",double:"u2",wavy:"u3",dotted:"u4",dashed:"u5"},Ae=0;Ae<256;Ae++)de[Ae]="c"+Ae,pe[Ae]="bc"+Ae,fe[Ae]="uc"+Ae;const ve=/(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|[\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|[\ud83c[\ude32-\ude3a]|[\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])/;class Se extends ue.a.Component{constructor(){super(...arguments),this._v=-1}render(){const e=this.props.node,t=e.attrs;if(this._v=e.v,t.isDefault)return e.txt;let r=[];var o=null;t.fci>=0?r.push(de[t.fci]):void 0!==t.fcs&&((o=o||{}).color=t.fcs),t.bci>=0?r.push(pe[t.bci]):void 0!==t.bcs&&((o=o||{}).backgroundColor=t.bcs),t.uci>=0?r.push(fe[t.uci]):void 0!==t.ucs&&((o=o||{}).textDecorationColor=t.ucs),t.bold&&r.push(ge),t.italic&&r.push(me),t.blink&&r.push(ye),t.underline?(t.strikethrough?r.push(we):r.push(be),r.push(Ce[t.underline])):t.strikethrough&&r.push(_e),t.asciiNode||(t.wcNode?ve.test(e.txt)?r.push("wc wc-node emoji"):r.push("wc wc-node"):e.wcw<he?r.push("wc wc"+e.wcw):(r.push("wc"),(o=o||{}).width="calc(var(--hterm-charsize-width) * "+e.wcw+")"));const i={};return r.length&&(i.className=r.join(" ")),o&&(i.style=o),ue.a.createElement("span",i,e.txt)}shouldComponentUpdate(e){return this._v!==e.node.v}}class ke extends ce.Component{constructor(){super(...arguments),this._v=-1,this._dirty=!0}render(){this._v=this.props.row.v;const e=this.props.row.nodes,t=e.length,r=new Array(t);for(let o=0;o<t;o++){const t=e[o];r[o]=ue.a.createElement(Se,{key:t.key,node:t})}return this.props.row.img&&r.push(this._renderImage(this.props.row.img)),this._dirty=!1,ue.a.createElement("x-row",null,r)}_renderImage(e){var t=ue.a.createElement("img",{src:e.src,alt:e.alt,title:e.title,style:{position:"absolute",objectFit:e.objectFit,maxWidth:"100%",height:`calc(${e.padRows} * var(--hterm-charsize-height))`,bottom:0}});return ue.a.createElement("div",{key:"image",style:{position:"relative",textAlign:e.textAlign,height:"calc(var(--hterm-charsize-height))"}},t)}shouldComponentUpdate(e){return this._v!==e.row.v}touch(){this._dirty||(this._dirty=!0,this.forceUpdate())}}class Te extends ue.a.Component{constructor(){super(...arguments),this._dirty=!0,this._rows=[],this._rowsMap=new Map}render(){const e=this._rows,t=e.length,r=new Array(t),o=new Map;for(let i=0;i<t;i++){const t=e[i],n=t.key,s=ue.a.createRef();r[i]=ue.a.createElement(ke,{key:n,ref:s,row:t}),o.set(n,s)}return this._rowsMap=o,this._dirty=!1,r}setRows(e){this._rows=e,this.touch()}touchRow(e){if(this._dirty)return;let t=this._rowsMap.get(e.key);t&&t.current&&t.current.touch()}touch(){this._dirty||(this._dirty=!0,this.forceUpdate())}}function xe(e,t){return`{${e}, ${t}}`}class Pe{constructor(e){this._x=-1,this._y=-1,this._viewWidth=0,this._viewHeight=0,this._contentWidth=0,this._contentHeight=0,this._callback=null,this._callback=e}_postMessage(e){let t=window.webkit.messageHandlers.wkScroller;t?t.postMessage(e):console.log(e)}setDimensions(e,t,r,o){let i=!1;null!=e&&this._viewWidth!==e&&(this._viewWidth=e,i=!0),null!=t&&this._viewHeight!==t&&(this._viewHeight=t,i=!0),null!=r&&this._contentWidth!==r&&(this._contentWidth=r,i=!0),null!=o&&this._contentHeight!==o&&(this._contentHeight=o,i=!0),i&&this._postMessage({op:"resize",viewSize:xe(this._viewWidth,this._viewHeight),contentSize:xe(this._contentWidth,this._contentHeight)})}reportScroll(e,t,r){this._x=e,this._y=t,this._callback&&this._callback(e,t,r)}scrollTo(e,t,r){this._x===e&&this._y===t||(this._x=e,this._y=t,this._postMessage({op:"scrollTo",x:e,y:t,animated:r}))}}let Ee={height:window.innerHeight,width:window.innerWidth},Re=0;var Me=function(e){for(const t in e)if(t.startsWith("__reactInternalInstance$")){const r=e[t];return r&&r.return&&r.return.stateNode}return null};U.ScrollPort.Selection.prototype.sync=function(){var e=this;function t(){e.startRow=i,e.startNode=o.anchorNode,e.startOffset=o.anchorOffset,e.endRow=n,e.endNode=o.focusNode,e.endOffset=o.focusOffset}function r(){e.startRow=n,e.startNode=o.focusNode,e.startOffset=o.focusOffset,e.endRow=i,e.endNode=o.anchorNode,e.endOffset=o.anchorOffset}var o=window.document.getSelection();if(this.startRow=null,this.endRow=null,this.isMultiline=null,this.isCollapsed=!o||o.isCollapsed,!this.isCollapsed){for(var i=o.anchorNode;i&&"X-ROW"!==i.nodeName;)i=i.parentNode;if(i){i.rowIndex=Me(i).props.row.n;for(var n=o.focusNode;n&&"X-ROW"!==n.nodeName;)n=n.parentNode;if(n){if(n.rowIndex=Me(n).props.row.n,i.rowIndex<n.rowIndex)t();else if(i.rowIndex>n.rowIndex)r();else if(o.focusNode==o.anchorNode)o.anchorOffset<o.focusOffset?t():r();else{var s=this.findFirstChild(i,[o.anchorNode,o.focusNode]);if(!s)throw new Error("Unexpected error syncing selection.");s==o.anchorNode?t():r()}this.isMultiline=i.rowIndex!=n.rowIndex}else console.error("Selection focus is not rooted in a row node: "+o.focusNode.nodeName)}else console.error("Selection anchor is not rooted in a row node: "+o.anchorNode.nodeName)}},U.ScrollPort.prototype.decorate=function(){this.div_=window.document.createElement("div"),window.document.body.appendChild(this.div_),window.addEventListener("resize",this.onResize_.bind(this));var e=window.document;this.document_=e,e.body.style.cssText="margin: 0px;padding: 0px;height: 100%;width: 100%;overflow: hidden;cursor: var(--hterm-mouse-cursor-style);-webkit-user-select: none;-moz-user-select: none;";var t=e.createElement("style");t.textContent="x-row {  display: block;  height: var(--hterm-charsize-height);  line-height: var(--hterm-charsize-height);  isolation: isolate;}",e.head.appendChild(t),this.userCssLink_=e.createElement("link"),this.userCssLink_.setAttribute("rel","stylesheet"),this.userCssText_=e.createElement("style"),e.head.appendChild(this.userCssText_),this.screen_=e.createElement("x-screen"),this.screen_.setAttribute("tabindex","-1"),this.screen_.style.cssText="display: block;font-family: monospace;font-size: 15px;overflow: hidden;white-space: pre;width: 100%;margin: 0px;padding: 0px;height: 100%;width: 100%;touch-atcion: manipulation;cursor: var(--hterm-mouse-cursor-style);outline: none !important",e.body.appendChild(this.screen_),this.screen_.addEventListener("touchstart",this.on_touchstart_.bind(this)),this.screen_.addEventListener("touchmove",this.on_touchmove_.bind(this)),this.screen_.addEventListener("touchend",this.on_touchend_.bind(this)),this.screen_.addEventListener("touchcancel",this.on_touchcancel_.bind(this)),this.screen_.addEventListener("copy",this.onCopy_.bind(this)),this.screen_.addEventListener("paste",this.onPaste_.bind(this)),this.screen_.addEventListener("drop",this.onDragAndDrop_.bind(this)),e.body.addEventListener("keydown",this.onBodyKeyDown_.bind(this));const r="right: 0px;\n                             position:fixed;\n                             z-index: 1;\n                             text-align: center;\n                             cursor: pointer;\n                             height: 30px;\n                             width: 110px;\n                             line-height: 30px;\n                             border-width: 1px;\n                             border-style: solid;\n                             font-weight: bold;";this.scrollUpButton_=this.document_.createElement("div"),this.scrollUpButton_.id="hterm:a11y:page-up",this.scrollUpButton_.innerText=U.msg("BUTTON_PAGE_UP",[],"Page up"),this.scrollUpButton_.setAttribute("role","button"),this.scrollUpButton_.style.cssText=r,this.scrollUpButton_.style.top="-32px",this.scrollUpButton_.addEventListener("click",this.scrollPageUp.bind(this)),this.scrollDownButton_=this.document_.createElement("div"),this.scrollDownButton_.id="hterm:a11y:page-down",this.scrollDownButton_.innerText=U.msg("BUTTON_PAGE_DOWN",[],"Page down"),this.scrollDownButton_.setAttribute("role","button"),this.scrollDownButton_.style.cssText=r,this.scrollDownButton_.style.bottom="-32px",this.scrollDownButton_.addEventListener("click",this.scrollPageDown.bind(this)),this.allowScrollButtonsToDisplay_=!1,setTimeout(()=>{this.allowScrollButtonsToDisplay_=!0},500),this.document_.addEventListener("selectionchange",()=>{if(this.selection.sync(),!this.allowScrollButtonsToDisplay_)return;const e=this.accessibilityReader_&&this.accessibilityReader_.accessibilityEnabled,t=this.document_.getSelection();let r;t.anchorNode&&t.anchorNode.parentElement&&(r=t.anchorNode.parentElement),e&&r==this.scrollUpButton_?this.scrollUpButton_.style.top="0px":this.scrollUpButton_.style.top="-32px",e&&r==this.scrollDownButton_?this.scrollDownButton_.style.bottom="0px":this.scrollDownButton_.style.bottom="-32px"}),this.screen_.appendChild(this.scrollUpButton_),this.rowNodes_=e.createElement("div"),this.rowNodes_.id="hterm:row-nodes",this.rowNodes_.style.cssText="display: block;position: absolute;top: 0;left: 0;right: 0;bottom: 0;background-color: inherit;overflow: hidden;-webkit-user-select: text;-moz-user-select: text;",this.screen_.appendChild(this.rowNodes_),this.topSelectBag_=e.createElement("x-select-bag"),this.topSelectBag_.style.cssText="display: block;overflow: hidden;height: var(--hterm-charsize-height);white-space: pre;",this.bottomSelectBag_=this.topSelectBag_.cloneNode(),this.topFold_=e.createElement("x-fold"),this.topFold_.id="hterm:top-fold-for-row-selection",this.topFold_.style.cssText="display: block;",this.rowNodes_.appendChild(this.topFold_),this._renderDom=e.createElement("div"),this._renderDom.id="hterm:renderer",this.rowNodes_.appendChild(this._renderDom),this.renderRef=Y.a.render(ue.a.createElement(Te),this._renderDom),this.bottomFold_=this.topFold_.cloneNode(),this.bottomFold_.id="hterm:bottom-fold-for-row-selection",this.rowNodes_.appendChild(this.bottomFold_);var o=this;Ee=U.getClientSize(this.screen_),this.scroller_=new Pe((function(e,t,r){Re!==t&&(Re=t||0,o.onScroll_())}),{scrollingX:!1}),this.scroller_.setDimensions(Ee.width,Ee.height,Ee.width,Ee.height);var i="http://www.w3.org/2000/svg";this.svg_=window.document.createElementNS(i,"svg"),this.svg_.id="hterm:zoom-detector",this.svg_.setAttribute("xmlns",i),this.svg_.setAttribute("version","1.1"),this.svg_.style.cssText="position: absolute;top: 0;left: 0;visibility: hidden",this.pasteTarget_=e.createElement("textarea"),this.pasteTarget_.id="hterm:ctrl-v-paste-target",this.pasteTarget_.setAttribute("tabindex","-1"),this.pasteTarget_.style.cssText="position: absolute;height: 1px;width: 1px;left: 0px; bottom: 0px;opacity: 0",this.pasteTarget_.contentEditable=!0,this.screen_.appendChild(this.pasteTarget_),this.pasteTarget_.addEventListener("textInput",this.handlePasteTargetTextInput_.bind(this)),this.resize()},U.ScrollPort.prototype.on_touchstart_=function(e){},U.ScrollPort.prototype.on_touchmove_=function(e){},U.ScrollPort.prototype.on_touchend_=function(e){},U.ScrollPort.prototype.on_touchcancel_=function(e){},U.ScrollPort.prototype.focus=function(){},U.ScrollPort.prototype.getScreenSize=function(){return Ee},U.ScrollPort.prototype.resetCache=function(){},U.ScrollPort.prototype.setRowProvider=function(e){this.resetCache(),this.rowProvider_=e,this.scheduleRedraw()},U.ScrollPort.prototype.invalidate=function(){var e=this.getTopRowIndex(),t=this.getBottomRowIndex(e);this.drawVisibleRows_(e,t)},U.ScrollPort.prototype.scheduleInvalidate=function(){if(!this.timeouts_.invalidate){var e=this;this.timeouts_.invalidate=setTimeout((function(){e.timeouts_.invalidate=0,e.invalidate()}),0)}};var Ne="";U.ScrollPort.prototype.syncRowNodesDimensions_=function(){var e=this.getScreenSize();this.lastScreenWidth_=e.width,this.lastScreenHeight_=e.height,this.visibleRowCount=K.f.smartFloorDivide(e.height,this.characterSize.height);var t=this.visibleRowCount*this.characterSize.height;this.visibleRowTopMargin=0,this.visibleRowBottomMargin=e.height-t;var r="";Re<0&&(r="translate3d(0, "+-Re+"px, 0)"),r!==Ne&&(Ne=r,this.rowNodes_.style.transform=r,this.rowProvider_.cursorOverlayNode_&&(this.rowProvider_.cursorOverlayNode_.style.transform=r))};var Fe=0;function Ie(e,t){var r=(Ie.canvas||(Ie.canvas=document.createElement("canvas"))).getContext("2d");r.font=t;var o=r.measureText(e);return{width:o.width,height:o.fontBoundingBoxAscent+o.fontBoundingBoxDescent}}U.ScrollPort.prototype.syncScrollHeight=function(){this.lastRowCount_=this.rowProvider_.getRowCount();var e=this.characterSize.height*this.lastRowCount_+this.visibleRowTopMargin+this.visibleRowBottomMargin;Fe!==e&&(Fe=e,this.scroller_.setDimensions(Ee.width,Ee.height,Ee.width,Fe))},U.ScrollPort.prototype.scheduleRedraw=function(){if(!this.timeouts_.redraw){var e=this;this.timeouts_.redraw=requestAnimationFrame((function(){e.timeouts_.redraw=0,e.redraw_()}))}},U.ScrollPort.prototype.redraw_=function(){this.syncScrollHeight();var e=this.getTopRowIndex(),t=this.getBottomRowIndex(e);this.drawVisibleRows_(e,t),this.syncRowNodesDimensions_(),this.isScrolledEnd=this.getTopRowIndex()+this.visibleRowCount>=this.lastRowCount_},U.ScrollPort.prototype.drawVisibleRows_=function(e,t){this.selection.startRow,this.selection.endRow,this.bottomFold_,this.topFold_.nextSibling;for(var r=Math.min(this.visibleRowCount,this.rowProvider_.getRowCount()),o=[],i=0;i<r;i++){var n=e+i,s=this.fetchRowNode_(n);s&&o.push(s)}this.renderRef.setRows(o)},U.ScrollPort.prototype.fetchRowNode_=function(e){return this.rowProvider_.getRowNode(e)},U.ScrollPort.prototype.getScrollMax_=function(e){return Fe+this.visibleRowTopMargin+this.visibleRowBottomMargin-Ee.height},U.ScrollPort.prototype.scrollRowToTop=function(e){this.syncScrollHeight(),this.isScrolledEnd=e+this.visibleRowCount>=this.lastRowCount_;var t=e*this.characterSize.height+this.visibleRowTopMargin,r=this.getScrollMax_();t>r&&(t=r),Re!==t&&(this.scroller_.scrollTo(0,t),this.scheduleRedraw())},U.ScrollPort.prototype.scrollRowToBottom=function(e){this.syncScrollHeight(),this.isScrolledEnd=e+this.visibleRowCount>=this.lastRowCount_;var t=e*this.characterSize.height+this.visibleRowTopMargin+this.visibleRowBottomMargin;(t-=this.visibleRowCount*this.characterSize.height)<0&&(t=0),Re!==t&&this.scroller_.scrollTo(0,t)},U.ScrollPort.prototype.scrollToBottom=function(){this.syncScrollHeight(),this.scroller_.scrollTo(0,Fe-Ee.height,!1)},U.ScrollPort.prototype.getTopRowIndex=function(){var e=Math.round(Re/this.characterSize.height);return e<0?0:e},U.ScrollPort.prototype.onScroll_=function(e){var t=this.getScreenSize();t.width==this.lastScreenWidth_&&t.height==this.lastScreenHeight_?(this.redraw_(),this.publish("scroll",{scrollPort:this})):this.resize()},U.ScrollPort.prototype.onScrollWheel=function(e){},U.ScrollPort.prototype.onResize_=function(e){Ee=U.getClientSize(this.screen_),this.scroller_.setDimensions(Ee.width,Ee.height,null,Fe),this.syncCharacterSize()},U.ScrollPort.prototype.onCopy_=function(e){if(this.onCopy(e),!e.defaultPrevented&&(this.resetSelectBags_(),this.selection.sync(),this.selection.startRow&&!(this.selection.endRow.rowIndex-this.selection.startRow.rowIndex<2))){var t,r,o=this.getTopRowIndex(),i=this.getBottomRowIndex(o);if(this.selection.startRow.rowIndex<o)t=this.selection.endRow.rowIndex<o?this.selection.endRow.rowIndex:this.topFold_.nextSibling.rowIndex,this.topSelectBag_.textContent=this.rowProvider_.getRowsText(this.selection.startRow.rowIndex+1,t),this.rowNodes_.insertBefore(this.topSelectBag_,this.selection.startRow.nextSibling),this.syncRowNodesDimensions_();if(this.selection.endRow.rowIndex>i)r=this.selection.startRow.rowIndex>i?this.selection.startRow.rowIndex+1:this.bottomFold_.previousSibling.rowIndex+1,this.bottomSelectBag_.textContent=this.rowProvider_.getRowsText(r,this.selection.endRow.rowIndex),this.rowNodes_.insertBefore(this.bottomSelectBag_,this.selection.endRow)}},U.ScrollPort.prototype.measureCharacterSize=function(e){var t,r="canvas"!==window.fontSizeDetectionMethod;if(this.ruler_||(this.ruler_=this.document_.createElement("div"),this.ruler_.id="hterm:ruler-character-size",this.ruler_.style.cssText="position: absolute;top: 0;left: 0;visibility: hidden;height: auto !important;width: auto !important;",r&&(this.rulerSpan_=this.document_.createElement("span"),this.rulerSpan_.id="hterm:ruler-span-workaround",this.rulerSpan_.innerHTML=("X".repeat(100)+"\r").repeat(100),this.ruler_.appendChild(this.rulerSpan_)),this.rulerBaseline_=this.document_.createElement("span"),this.rulerBaseline_.id="hterm:ruler-baseline",this.rulerBaseline_.style.fontSize="0px",this.rulerBaseline_.textContent="X"),this.rulerSpan_&&(this.rulerSpan_.style.fontWeight=e||""),this.rowNodes_.appendChild(this.ruler_),r){var o=U.getClientSize(this.rulerSpan_);t=new U.Size(o.width/100,o.height/100)}else{var i=this.screen_.style.font,n=Ie("QWER1YUIOX".repeat(10),i);t=new U.Size(n.width/100,n.height)}return this.ruler_.insertBefore(this.rulerBaseline_,this.ruler_.childNodes[0]),t.baseline=this.rulerBaseline_.offsetTop,this.ruler_.removeChild(this.rulerBaseline_),this.rowNodes_.removeChild(this.ruler_),this.div_.ownerDocument.body.appendChild(this.svg_),t.zoomFactor=this.svg_.currentScale,this.div_.ownerDocument.body.removeChild(this.svg_),t},U.ScrollPort.prototype.resize=function(){this.currentScrollbarWidthPx=U.getClientWidth(this.screen_)-this.screen_.clientWidth,this.syncScrollHeight(),this.syncRowNodesDimensions_();var e=this;this.publish("resize",{scrollPort:this},(function(){e.scroller_.setDimensions(Ee.width,Ee.height,Ee.width,Fe);var t=Fe-Ee.height;t<0&&(t=0),e.scroller_.scrollTo(0,t,!1),e.scheduleRedraw()}))};var De=0;function Ve(e){e.v=(e.v+1)%1e6}function Oe(){return De++%1e6}function Be(e,t,r){return e.attrs.asciiNode?e.txt.substr(t,r):K.wc.substr(e.txt,t,r)}function Ke(e){var t=0;const r=e.nodes;for(var o=r.length,i=0;i<o;i++)t+=r[i].wcw;return t}function Ue(e){let t="";for(var r=0,o=e.nodes.length;r<o;r++)t+=e.nodes[r].txt;return t}var Le=null;U.TextAttributes.prototype.DEFAULT_COLOR="";const ze=Object.freeze({isDefault:!0,wcNode:!1,asciiNode:!0,fci:-1,bci:-1,uci:-1});function We(e,t,r){e.txt=t,null!=r?e.wcw=r:e.attrs.asciiNode?e.wcw=t.length:e.wcw=K.wc.strWidth(t),Ve(e)}function Qe(e,t,r,o){t.txt=r,!e.asciiNode&&t.attrs.asciiNode&&(t.attrs=e),null!=o?t.wcw=o:t.attrs.asciiNode?t.wcw=r.length:t.wcw=K.wc.strWidth(r),Ve(t)}function Ge(e,t){return{v:0,txt:e,wcw:t,key:Oe(),attrs:ze}}function He(e,t){return{v:0,txt:e,wcw:t,key:Oe(),attrs:{isDefault:!0,wcNode:!1,asciiNode:!0,fci:-1,bci:-1,uci:-1}}}function je(e,t,r){return void 0===r&&(r=e.asciiNode?t.length:K.wc.strWidth(t)),{v:0,txt:t,wcw:r,key:Oe(),attrs:e}}function Ze(e,t){if(t.isDefault)return e.attrs.isDefault;var r=e.attrs;return!(r.wcNode||t.wcNode)&&r.fci===t.fci&&r.bci===t.bci&&r.uci===t.uci&&r.fcs===t.fcs&&r.bcs===t.bcs&&r.ucs===t.ucs&&r.bold===t.bold&&r.blink===t.blink&&r.italic===t.italic&&r.underline===t.underline&&r.strikethrough===t.strikethrough}U.TextAttributes.prototype.resetColorPalette=function(){this.colorPalette=K.colors.colorPalette.concat(),this.refreshCSSPalette(),this.syncColors()},U.TextAttributes.prototype.refreshCSSPalette=function(){if(!Le){var e=document.createElement("style");e.type="text/css",this.document_.getElementsByTagName("head")[0].appendChild(e),Le=e}this._debounce&&(clearTimeout(this._debounce),this._debounce=null);var t=this;this._debounce=setTimeout((function(){Le&&(Le.innerHTML=function(e){for(var t=[],r=0;r<256;r++){var o=e.colorPalette[r];t.push("span.c"+r+" { color: "+o+";}"),t.push("span.bc"+r+" { background: "+o+";}"),t.push("span.uc"+r+" { -webkit-text-decoration-color: "+o+";}")}for(t.push(".u { -webkit-text-decoration: underline;}"),t.push(".s { -webkit-text-decoration: line-through;}"),t.push(".us { -webkit-text-decoration: underline line-through;}"),t.push(".u1 { -webkit-text-decoration-style: solid;}"),t.push(".u2 { -webkit-text-decoration-style: double;}"),t.push(".u3 { -webkit-text-decoration-style: wavy;}"),t.push(".u4 { -webkit-text-decoration-style: dotted;}"),t.push(".u5 { -webkit-text-decoration-style: dashed;}"),t.push("span.b { font-weight: bold;}"),t.push("span.i { font-style: italic;}"),t.push("span.wc { display: inline-block; overflow-x:hidden; }"),r=0;r<he;r++)t.push("span.wc"+r+" { width: calc(var(--hterm-charsize-width) * "+r+");}");return t.join("\n")}(t)),t._debounce=null}),10)},U.TextAttributes.prototype.attrs=function(){if(this.isDefault())return ze;var e={isDefault:!1,wcNode:this.wcNode,asciiNode:this.asciiNode,fci:-1,bci:-1,uci:-1};return"number"==typeof this.foreground?e.fci=this.foreground:this.foreground!==this.DEFAULT_COLOR&&(e.fcs=this.foreground),"number"==typeof this.background?e.bci=this.background:this.background!==this.DEFAULT_COLOR&&(e.bcs=this.background),"number"==typeof this.underlineColor?e.uci=this.underlineColor:this.underlineColor!==this.DEFAULT_COLOR&&(e.ucs=this.underlineColor),this.enableBold&&this.bold&&(e.bold=!0),this.italic&&(e.italic=!0),this.blink&&(e.blink=!0),this.underline&&(e.underline=this.underline),this.strikethrough&&(e.strikethrough=!0),e},U.TextAttributes.prototype.syncColors=function(){var e,t=this.foregroundSource,r=this.backgroundSource,o=this.DEFAULT_COLOR,i=this.DEFAULT_COLOR;if(this.inverse&&(t=this.backgroundSource,r=this.foregroundSource,o=this.defaultBackground,i=this.defaultForeground),this.enableBoldAsBright&&this.bold&&Number.isInteger(t)&&(t=(e=t)<8?e+8:e),t===this.SRC_DEFAULT?this.foreground=o:this.foreground=t,this.faint){Number.isInteger(this.foreground)&&(this.foreground=this.colorPalette[this.foreground]);var n=this.foreground===this.DEFAULT_COLOR?this.defaultForeground:this.foreground;this.foreground=K.colors.mix(n,"rgb(0, 0, 0)",.3333)}r===this.SRC_DEFAULT?this.background=i:this.background=r,this.invisible&&(this.foreground=this.background),this.underlineSource===this.SRC_DEFAULT?this.underlineColor=this.DEFAULT_COLOR:this.underlineColor=this.underlineSource},U.TextAttributes.prototype.isDefault=function(){return this.asciiNode&&!this.wcNode&&this.foregroundSource==this.SRC_DEFAULT&&this.backgroundSource==this.SRC_DEFAULT&&!this.underline&&!this.bold&&!this.italic&&!this.faint&&!this.blink&&!this.strikethrough&&!this.inverse&&!this.invisible&&null==this.tileData&&null==this.uri};var qe=/[^\x00-\x7F]/;U.TextAttributes.splitWidecharString=function(e){var t=[],r=0,o=0,i=0,n=0,s=!0,a=e.length,l=e.search(qe);if(l<0)return[{str:e,wcNode:!1,asciiNode:s,wcStrWidth:a}];for(o=i=l;l<a;){var c,u=e.codePointAt(l);if(u<128){var h=e.substr(l),d=h.search(qe);if(-1===d)return o?t.push({str:e.substr(r),wcNode:!1,asciiNode:s,wcStrWidth:i+(a-l)}):t.push({str:h,wcNode:!1,asciiNode:!0,wcStrWidth:h.length}),t;i+=d,o+=d,c=d}else c=u<=65535?1:2,(n=K.wc.charWidth(u))<=1?(i+=n,o+=c,s=!1):(o&&(t.push({str:e.substr(r,o),wcNode:!1,asciiNode:s,wcStrWidth:i}),s=!0,i=0),t.push({str:e.substr(l,c),wcNode:!0,asciiNode:!1,wcStrWidth:2}),r=l+c,o=0);l+=c}return o&&t.push({str:e.substr(r,o),wcNode:!1,asciiNode:s,wcStrWidth:i}),t},K.wc.substr=function(e,t,r){if(!qe.test(e))return e.substr(t,r);var o,i,n=0;if(t)for(i=0;n<e.length;){const r=e.codePointAt(n);if((i+=K.wc.charWidth(r))>t)break;n+=r<=65535?1:2}if(null!=r){for(o=n,i=0;o<e.length;){const t=e.codePointAt(o);if((i+=K.wc.charWidth(t))>r)break;o+=t<=65535?1:2}return e.substring(n,o)}return e.substr(n)},K.wc.strWidth=function(e){var t,r=e.length,o=0,i=e.search(qe);if(i<0)return r;var n=i;for(o=i;n<r;){var s=e.codePointAt(n);if((t=K.wc.charWidth(s))<0)return-1;o+=t,n+=s<=65535?1:2}return o};let Je=new Map;const Ye=K.wc.charWidth;function Xe(e,t,r){var o={key:Oe(),txt:e.txt,wcw:e.wcw,attrs:e.attrs,v:0},i=e.txt;We(e,Be(e,0,t)),We(o,K.wc.substr(i,t));var n=[];return e.txt&&n.push(e),o.txt?e.attrs.wcNode&&o.txt===i?(n.push(He(" ",1)),n.push(r)):(n.push(r),n.push(o)):n.push(r),n}K.wc.charWidth=function(e){let t=Je.get(e);return void 0===t&&(t=Ye(e),Je.size>2e4&&(Je=new Map),Je.set(e,t)),t},U.Screen.prototype.invalidateCursorPosition=function(){this.cursorPosition.move(0,0),this.cursorRowIdx_=0,this.cursorNodeIdx_=0,this.cursorOffset_=0},U.Screen.prototype.clearCursorRow=function(){var e;this.cursorOffset_=0,this.cursorPosition.column=0,this.cursorPosition.overflow=!1,e=this.textAttributes.isDefault()?"":K.f.getWhitespace(this.columnCount_);var t=this.textAttributes.inverse;this.textAttributes.inverse=!1,this.textAttributes.syncColors();var r=je(this.textAttributes.attrs(),e,e.length),o=this.rowsArray[this.cursorRowIdx_];o.nodes=[r],o.o=!1,delete o.img,Ve(o),this.cursorNodeIdx_=0,this.textAttributes.inverse=t,this.textAttributes.syncColors()},U.Screen.prototype.commitLineOverflow=function(){var e=this.rowsArray[this.cursorRowIdx_];e.o=!0,Ve(e)},U.Screen.prototype.setCursorPosition=function(e,t){if(this.rowsArray.length){e>=this.rowsArray.length&&(console.error("Row out of bounds: "+e),e=this.rowsArray.length-1),e<0&&(console.error("Row out of bounds: "+e),e=0),t>=this.columnCount_?(console.error("Column out of bounds: "+t),t=this.columnCount_-1):t<0&&(console.error("Column out of bounds: "+t),t=0),this.cursorPosition.overflow=!1;var r=this.rowsArray[e],o=0,i=r.nodes[0];i||(i=He("",0),r.nodes=[i],Ve(r));var n=0;if(e===this.cursorRowIdx_?t>=this.cursorPosition.column-this.cursorOffset_&&(o=this.cursorNodeIdx_,i=r.nodes[o],n=this.cursorPosition.column-this.cursorOffset_):this.cursorRowIdx_=e,this.cursorPosition.move(e,t),0===t)return this.cursorNodeIdx_=0,void(this.cursorOffset_=0);for(;i;){var s=t-n;if(!r.nodes[o+1]||i.wcw>s)return this.cursorNodeIdx_=o,void(this.cursorOffset_=s);n+=i.wcw,i=r.nodes[++o]}}else console.warn("Attempt to set cursor position on empty screen.")},U.Screen.prototype.syncSelectionCaret=function(e){let t=window._kb.caret;t&&e.collapse(t,0)},U.Screen.prototype.cursorRow=function(){return this.rowsArray[this.cursorRowIdx_]},U.Screen.prototype.maybeClipCurrentRow=function(){var e=this.cursorRow(),t=Ke(e);if(t<=this.columnCount_)this.cursorPosition.column>=this.columnCount_&&(this.setCursorPosition(this.cursorPosition.row,this.columnCount_-1),this.cursorPosition.overflow=!0);else{var r=this.cursorPosition.column;this.setCursorPosition(this.cursorPosition.row,this.columnCount_-1);var o=this.rowsArray[this.cursorRowIdx_].nodes[this.cursorNodeIdx_];t=o.wcw,this.cursorOffset_<t-1&&We(o,Be(o,0,this.cursorOffset_+1)),e.nodes.splice(this.cursorNodeIdx_+1),r<this.columnCount_?this.setCursorPosition(this.cursorPosition.row,r):this.cursorPosition.overflow=!0}},U.Screen.prototype.overwriteNode=function(e,t,r){var o=this.rowsArray[this.cursorRowIdx_],i=o.nodes[this.cursorNodeIdx_];let n=t;var s=i.txt;o.o=!1,this.cursorPosition.column+=t;var a=this.cursorOffset_,l=i.wcw-a;if(l<0){var c=K.f.getWhitespace(-l);if(i.attrs.isDefault||!(!i.attrs.asciiNode||i.attrs.wcNode||i.attrs.bci>=0||i.attrs.bcs||i.attrs.underline||i.attrs.strikethrough))We(i,s+=c,i.wcw-l);else{var u=Ge(c,-l);this.cursorNodeIdx_++,o.nodes.splice(this.cursorNodeIdx_,0,u),i=u,this.cursorOffset_=a=-l,s=c}l=0}if(Ze(i,r)){if(0===l)Qe(r,i,s+e),o.nodes[this.cursorNodeIdx_+1]||(n=0);else if(0===a){const s=t-i.wcw;s>=0?(Qe(r,i,e,t),n=o.nodes[this.cursorNodeIdx_+1]?s:0):(Qe(r,i,e+Be(i,t)),n=0)}else{const o=t+a-i.wcw;if(o>=0)Qe(r,i,Be(i,0,a)+e),n=o;else Qe(r,i,Be(i,0,a)+e+Be(i,a+t)),n=0}return this.cursorOffset_+=t,n}if(0===a){var h=o.nodes[this.cursorNodeIdx_-1];if(h&&Ze(h,r)){Qe(r,h,h.txt+e);const s=t-i.wcw;return s>=0?(o.nodes.splice(this.cursorNodeIdx_,1),n=s):i.attrs.wcNode||(We(i,Be(i,t)),n=0),this.cursorNodeIdx_=this.cursorNodeIdx_-1,this.cursorOffset_=h.wcw,n}var d=je(r,e,t);this.cursorOffset_=t;const s=t-i.wcw;return s>=0?(o.nodes.splice(this.cursorNodeIdx_,1,d),n=s):(o.nodes.splice(this.cursorNodeIdx_,0,d),We(i,Be(i,t)),n=0),n}if(0===l){var p=o.nodes[this.cursorNodeIdx_+1];if(p&&Ze(p,r)){const o=t-p.wcw;return o>=0?(Qe(r,p,e,t),n=o):(Qe(r,p,e+Be(p,t)),n=0),this.cursorNodeIdx_++,this.cursorOffset_=t,n}return d=je(r,e,t),o.nodes.splice(this.cursorNodeIdx_+1,0,d),this.cursorNodeIdx_++,p||(n=0),this.cursorOffset_=d.wcw,n}const f=a+t-i.wcw;if(f>=0){We(i,Be(i,0,a));d=je(r,e,t);return this.cursorNodeIdx_++,o.nodes.splice(this.cursorNodeIdx_,0,d),this.cursorOffset_=t,n=f}var g=Xe(i,a,d=je(r,e,t)),m=g.length;return 1===m?o.nodes.splice(this.cursorNodeIdx_,1,g[0]):2===m?o.nodes.splice(this.cursorNodeIdx_,1,g[0],g[1]):3===m&&(o.nodes.splice(this.cursorNodeIdx_,1,g[0],g[1],g[2]),this.cursorNodeIdx_++),this.cursorNodeIdx_++,this.cursorOffset_=0,n},U.Screen.prototype.insertString=function(e,t){var r=this.rowsArray[this.cursorRowIdx_],o=r.nodes[this.cursorNodeIdx_],i=o.txt;const n=this.textAttributes.attrs();r.o=!1,this.cursorPosition.column+=t;var s=this.cursorOffset_,a=o.wcw-s;if(a<0){var l=K.f.getWhitespace(-a);if(o.attrs.isDefault||!(!o.attrs.asciiNode||o.attrs.wcNode||o.attrs.bci>=0||o.attrs.bcs||o.attrs.underline||o.attrs.strikethrough))We(o,i+=l,o.wcw-a);else{var c=Ge(l,-a);this.cursorNodeIdx_++,r.nodes.splice(this.cursorNodeIdx_,0,c),o=c,this.cursorOffset_=s=-a,i=l}a=0}if(Ze(o,n)){if(0===a)Qe(n,o,i+e);else if(0===s)Qe(n,o,e+i);else{Qe(n,o,Be(o,0,s)+e+Be(o,s))}this.cursorOffset_+=t}else{if(0===s){var u=r.nodes[this.cursorNodeIdx_-1];if(u&&Ze(u,n))return Qe(n,u,u.txt+e),this.cursorNodeIdx_=this.cursorNodeIdx_-1,void(this.cursorOffset_=u.wcw);var h=je(n,e,t);return r.nodes.splice(this.cursorNodeIdx_,0,h),void(this.cursorOffset_=t)}if(0===a){var d=r.nodes[this.cursorNodeIdx_+1];return d&&Ze(d,n)?(Qe(n,d,e+d.txt),this.cursorNodeIdx_++,void(this.cursorOffset_=t)):(h=je(n,e,t),r.nodes.splice(this.cursorNodeIdx_+1,0,h),this.cursorNodeIdx_++,void(this.cursorOffset_=h.wcw))}var p=Xe(o,s,h=je(n,e,t)),f=p.length;1===f?r.nodes.splice(this.cursorNodeIdx_,1,p[0]):2===f?r.nodes.splice(this.cursorNodeIdx_,1,p[0],p[1]):3===f&&(r.nodes.splice(this.cursorNodeIdx_,1,p[0],p[1],p[2]),this.cursorNodeIdx_++),this.cursorNodeIdx_++,this.cursorOffset_=0}},U.Screen.prototype.overwriteString=function(e,t){if(!(this.columnCount_-this.cursorPosition.column))return[e];var r=this.rowsArray[this.cursorRowIdx_],o=r.nodes[this.cursorNodeIdx_],i=this.textAttributes.attrs(),n=this.cursorOffset_;const s=t+n-o.wcw;if(s<=0&&Ze(o,i)){if(this.cursorOffset_+=t,this.cursorPosition.column+=t,0===s&&o.txt.substr(n)===e)return;return Qe(i,o,0===s?Be(o,0,n)+e:Be(o,0,n)+e+Be(o,n+t)),void Ve(r)}var a=this.overwriteNode(e,t,i);a>0&&this.deleteChars(a),function(e,t){for(var r=0,o=e.nodes[t],i=o.txt,n=o.wcw,s=o.attrs,a=t+1,l=e.nodes[a];l&&Ze(l,s);)i+=l.txt,n+=l.wcw,l.attrs.asciiNode||(s=l.attrs),r++,a++,l=e.nodes[a];r>0&&(Qe(s,o,i,n),e.nodes.splice(t+1,r),Ve(e))}(r,this.cursorNodeIdx_),Ve(r)},U.Screen.prototype.deleteChars=function(e){for(var t=this.rowsArray[this.cursorRowIdx_],r=this.cursorNodeIdx_,o=0,i=this.cursorOffset_,n=t.nodes.length,s=e,a=this.cursorNodeIdx_;a<n;a++){if(e<0){console.error(`Deleting ${s} chars went negative: ${e}`);break}if(0===e)break;var l=t.nodes[a],c=l.wcw;if(i>0){if(c-i===e)return We(l,Be(l,0,i)),s;if(c-i>e)return We(l,Be(l,0,i)+Be(l,i+e)),s;if(We(l,Be(l,0,i)),!t.nodes[a+1])return s;e-=c-i,i=0,r++}else{if(!(c<=e)){if(We(l,Be(l,e)),l.attrs.wcNode&&c===l.wcw){var u=He(" ",1);e-=1,t.nodes.splice(a,1,u)}break}o++,e-=c}}return 0===o?s:(t.nodes.splice(r,o),r>this.cursorNodeIdx_?s:0===(n=t.nodes.length)?(t.nodes=[He("",0)],this.cursorNodeIdx_=0,this.cursorOffset_=0,s):n<=this.cursorNodeIdx_?(this.cursorNodeIdx_=n-1,this.cursorOffset_=t.nodes[n-1].wcw,s):(this.cursorOffset_=0,s))},U.Screen.prototype.popRow=function(){return this.rowsArray.pop()},U.Screen.prototype.popRows=function(e){return this.rowsArray.splice(this.rowsArray.length-e,e)},U.Screen.prototype.pushRow=function(e){this.rowsArray[this.rowsArray.length]=e},U.Screen.prototype.setRow=function(e,t){this.rowsArray[t]=e},U.Screen.prototype.pushRows=function(e){for(var t=0,r=this.rowsArray.length,o=e.length;t<o;t++)this.rowsArray[t+r]=e[t]},U.Screen.prototype.getLineStartRow_=function(e){var t=this.rowsArray.indexOf(e);if(t<=0)return e;for(;this.rowsArray[t-1]&&this.rowsArray[t-1].o;)e=this.rowsArray[t-1],t--;return e},U.Screen.prototype.getLineText_=function(e){var t="",r=this.rowsArray.indexOf(e);if(r<0)return Ue(e);for(;e&&(t+=Ue(e),e.o);)r++,e=this.rowsArray[r];return t},U.Screen.prototype.getPositionWithOverflow_=function(e,t,r){return 0},U.Screen.prototype.getPositionWithinRow_=function(e,t,r){return 0},U.Screen.prototype.getNodeAndOffsetWithOverflow_=function(e,t){return-1},U.Screen.prototype.getNodeAndOffsetWithinRow_=function(e,t){return null},U.Screen.prototype.setRange_=function(e,t,r,o){},U.Screen.prototype.expandSelection=function(e){},U.AccessibilityReader=function(e){this.document_=e.ownerDocument;const t=this.document_.createElement("div");t.id="hterm:accessibility-live-region",t.style.cssText="position: absolute;\n                              width: 0; height: 0;\n                              overflow: hidden;\n                              left: -1000; top: -1000;",e.appendChild(t),this.accessibilityEnabled=!1,this.liveElement_=this.document_.createElement("p"),this.liveElement_.setAttribute("role","log"),t.appendChild(this.liveElement_),this.assertiveLiveElement_=this.document_.createElement("p"),this.assertiveLiveElement_.setAttribute("role","alert"),this.assertiveLiveElement_.setAttribute("area-relevant","all"),t.appendChild(this.assertiveLiveElement_),this.queue_=[],this.nextReadTimer_=null,this.cursorIsChanging_=!1,this.cursorChangeQueue_=[],this.lastCursorRowString_=null,this.lastCursorRow_=null,this.lastCursorColumn_=null,this.hasUserGesture=!1},U.AccessibilityReader.DELAY=50,U.AccessibilityReader.prototype.setAccessibilityEnabled=function(e){e||this.clear(),this.accessibilityEnabled=e},U.AccessibilityReader.prototype.decorate=function(e){["keydown","keypress","keyup","textInput"].forEach(t=>{e.addEventListener(t,()=>{this.hasUserGesture=!0})})},U.AccessibilityReader.prototype.beforeCursorChange=function(e,t,r){this.accessibilityEnabled&&this.hasUserGesture&&!this.cursorIsChanging_&&(this.cursorIsChanging_=!0,this.lastCursorRowString_=e,this.lastCursorRow_=t,this.lastCursorColumn_=r)},U.AccessibilityReader.prototype.afterCursorChange=function(e,t,r){if(this.cursorIsChanging_){if(this.cursorIsChanging_=!1,!this.announceAction_(e,t,r))for(let e=0;e<this.cursorChangeQueue_.length;++e)this.announce(this.cursorChangeQueue_[e]);this.cursorChangeQueue_=[],this.lastCursorRowString_=null,this.lastCursorRow_=null,this.lastCursorColumn_=null,this.hasUserGesture=!1}},U.AccessibilityReader.prototype.announce=function(e){if(this.accessibilityEnabled)if(this.hasUserGesture)this.assertiveAnnounce(e);else if(this.cursorIsChanging_)this.cursorChangeQueue_.push(e);else if("\n"==e&&this.queue_.length>0)this.queue_.push("");else{if(0==this.queue_.length)this.queue_.push(e);else{let t="";0!=this.queue_[this.queue_.length-1].length&&(t=" "),this.queue_[this.queue_.length-1]+=t+e}if(!this.nextReadTimer_){if(1!=this.queue_.length)throw new Error("Expected only one item in queue_ or nextReadTimer_ to be running.");this.nextReadTimer_=setTimeout(this.addToLiveRegion_.bind(this),U.AccessibilityReader.DELAY)}}},U.AccessibilityReader.prototype.assertiveAnnounce=function(e){this.hasUserGesture&&" "==e&&(e=U.msg("SPACE_CHARACTER",[],"Space")),(e=(e||"").trim())==this.assertiveLiveElement_.innerText&&(e="\n"+e),this.clear(),this.assertiveLiveElement_.innerText=e},U.AccessibilityReader.prototype.newLine=function(){this.announce("\n")},U.AccessibilityReader.prototype.clear=function(){this.liveElement_.innerText="",this.assertiveLiveElement_.innerText="",clearTimeout(this.nextReadTimer_),this.nextReadTimer_=null,this.queue_=[],this.cursorIsChanging_=!1,this.cursorChangeQueue_=[],this.lastCursorRowString_=null,this.lastCursorRow_=null,this.lastCursorColumn_=null,this.hasUserGesture=!1},U.AccessibilityReader.prototype.announceAction_=function(e,t,r){if(this.lastCursorRow_!=t)return!1;if(this.lastCursorRowString_==e){if(this.lastCursorColumn_!=r&&""==this.cursorChangeQueue_.join("").trim()){const e=Math.min(this.lastCursorColumn_,r),t=Math.abs(r-this.lastCursorColumn_);return this.assertiveAnnounce(K.wc.substr(this.lastCursorRowString_,e,t)),!0}return!1}if(this.lastCursorRowString_!=e){if(this.lastCursorColumn_+1==r&&" "==K.wc.substr(e,r-1,1)&&this.cursorChangeQueue_.length>0&&" "==this.cursorChangeQueue_[0])return this.assertiveAnnounce(" "),!0;const t=r;if(K.wc.strWidth(e)<=K.wc.strWidth(this.lastCursorRowString_)&&K.wc.substr(this.lastCursorRowString_,0,t)==K.wc.substr(e,0,t)){let r=K.wc.strWidth(e);for(;r>0&&(r!=t&&" "==K.wc.substr(e,r-1,1));--r);const o=K.wc.strWidth(this.lastCursorRowString_)-r,i=r-t;if(K.wc.substr(this.lastCursorRowString_,t+o,i)==K.wc.substr(e,t,i)){const e=K.wc.substr(this.lastCursorRowString_,t,o);if(""!=e)return this.assertiveAnnounce(e),!0}}return!1}return!1},U.AccessibilityReader.prototype.addToLiveRegion_=function(){this.nextReadTimer_=null;let e=this.queue_.join("\n").trim();e==this.liveElement_.innertText&&(e="\n"+e),this.liveElement_.innerText=e,this.queue_=[]};const $e=/^\W*\w+/,et=/\w+\W*$/,tt=8;class rt{constructor(e){this._cursor=-1,this._lastValue="",this._lastPrompt="",this._call=null,this._lines=[],this._total=0,this._found=0,this._response=null,this._prompt=e,this._lastValue=e._value,this._lastPrompt=e._prompt}enter(){let e=this._cursor,t=this._lines.find((function(t){return t.num==e}));t&&(this._prompt._value=t.val,this._prompt._cursor=K.wc.strWidth(t.val),this._prompt._render())}search(){this._cancelCall(),this._response&&this._response.pattern==this._prompt._value||(this._cursor=-1,this._call=window.term_apiRequest("history.search",{pattern:this._prompt._value,before:tt,after:0,cursor:this._cursor}),this._call.then(e=>{if(!e)return;this._response=e,this._lines=e.lines,this._total=e.total,this._found=e.found;let t=e.lines[e.lines.length-1];t&&(this._cursor=t.num),this.render()}))}_cancelCall(){this._call&&this._call.cancel(),this._call=null}prev(e){if(this._cancelCall(),e){let e=this._cursor,t=this._lines.findIndex((function(t){return t.num==e}));t>0?(this._cursor=this._lines[t-1].num,this._prompt._render()):(this._call=window.term_apiRequest("history.search",{pattern:this._prompt._value,before:1,after:0,cursor:this._cursor}),this._call.then(e=>{if(!e)return;let t=e.lines[0];t?(this._lines.splice(-1,1),this._lines.splice(0,0,t),this._cursor=t.num,this.render()):this._prompt._term.ringBell()}))}else this._call=window.term_apiRequest("history.search",{pattern:this._lastValue,before:1,after:0,cursor:this._cursor}),this._call.then(e=>{if(!e)return;let t=e.lines[0];t?(this._cursor=t.num,this._prompt._value=t.val,this._prompt._cursor=K.wc.strWidth(t.val),this._prompt._render()):this._prompt._term.ringBell()})}next(e){if(e){let e=this._cursor,t=this._lines.findIndex((function(t){return t.num==e}));t<this._lines.length-1&&-1!=t?(this._cursor=this._lines[t+1].num,this._prompt._render()):(this._call=window.term_apiRequest("history.search",{pattern:this._prompt._value,before:0,after:2,cursor:this._cursor}),this._call.then(e=>{if(!e)return;let t=e.lines[1];t?(this._lines.splice(0,1),this._lines.push(t),this._cursor=t.num,this.render()):this._prompt._term.ringBell()}))}else{if(this._cancelCall(),-1==this._cursor)return this._prompt._term.ringBell(),void(this._prompt._history=null);this._call=window.term_apiRequest("history.search",{pattern:this._lastValue,before:0,after:2,cursor:this._cursor}),this._call.then(e=>{if(!e)return;let t=e.lines[1];if(!t)return this._prompt._value=this._lastValue,this._prompt._cursor=K.wc.strWidth(this._lastValue),this._prompt._term.ringBell(),void(this._prompt._history=null);this._cursor=t.num,this._prompt._value=t.val,this._prompt._cursor=K.wc.strWidth(t.val),this._prompt._render()})}}reset(){this._cancelCall()}render(){let e=this._prompt._term,t=e.screen_.columnCount_;e.setCursorVisible(!1),e.setCursorPosition(this._prompt._startRow,this._prompt._startCol),e.eraseBelow();let r=K.wc.strWidth(this._prompt._value),o="📖 👀";r>0&&(o="📖 🔍",0==this._lines.length&&(o+=" 🤷")),o=(""+this._found).padStart(6," ")+" of "+this._total+" "+o;e.print(o,!1);let i=r+K.wc.strWidth("> "),n=i/t|0,s=i%t,a=Math.min(tt,this._lines.length),l=a+this._prompt._startRow+n+2-e.screenSize.height;l>0&&(e.appendRows_(l),this._prompt._startRow-=l,e.setCursorPosition(this._prompt._startRow,this._prompt._startCol));for(var c=0;c<a;c++){var u=this._lines[c];e.setCursorPosition(this._prompt._startRow+c+1,0),e.print((this._cursor==u.num?"* ":"  ")+(u.num+"").padStart(4," ")+" ",!1),e.print(u.val,!1)}e.setCursorPosition(this._prompt._startRow+a+1,0),e.print("> ",!1),e.print(this._prompt._value,!1),n=(i=this._prompt._cursor+K.wc.strWidth("> "))/t|0,s=i%t,e.setCursorPosition(this._prompt._startRow+n+a+1,s),e.setCursorVisible(!0)}}class ot{constructor(e){this._cursor=-1,this._lastValue="",this._call=null,this._response=null,this._n=0,this._lastCursor=-1,this._checkValue=null,this._checkCursor=-1,this._prompt=e,this._lastValue=e._value}complete(e){this._cancelCall();let t=this._prompt._cursor,r=this._prompt._value||"";if(!r.trim()){this._prompt._value="",this._prompt._cursor=K.wc.strWidth(this._prompt._value),this._prompt._hint="",this._prompt._render(),this._prompt._term.interpret("\r\n");let e="line",t={text:"help list-commands"};return void window.webkit.messageHandlers.interOp.postMessage({op:e,data:t})}let o=t,i=r,n=this._n;this._checkCursor==t&&this._checkValue==r?(n+=e,t=this._lastCursor,r=this._lastValue):(n=0,this._lastCursor=t,this._lastValue=r),this._call=window.term_apiRequest("completion.for",{cursor:t,input:r,n:n}),this._call.then(e=>{if(!e)return;if(o!=this._prompt._cursor||i!=this._prompt._value)return;let t=e.result;if(t){let o=r.substr(0,e.pos+e.len);o=r.substr(0,e.pos)+t;let i=K.wc.strWidth(o),s=r.substring(e.pos+e.len);this._prompt._value=[o,s].join(""),this._prompt._cursor=i,this._checkCursor=this._prompt._cursor,this._checkValue=this._prompt._value,this._n=n}else this._checkCursor=-1,this._checkValue=null,this._n=0;if(this._response.hint){let t=r.substr(0,e.start);this._prompt._hintPos=K.wc.strWidth(t),this._prompt._hint=e.hint}else this._prompt._hintPos=0,this._prompt._hint="";this.hint()})}hint(){this._cancelCall();let e=this._prompt._value,t=this._prompt._cursor;this._response&&this._response.input==e||(this._call=window.term_apiRequest("completion.for",{cursor:t,input:this._prompt._value,n:0}),this._call.then(r=>{if(!r)return;if(t!=this._prompt._cursor||e!=this._prompt._value)return;if(this._response=r,this._response.hint){let t=e.substr(0,r.start);this._prompt._hintPos=K.wc.strWidth(t),this._prompt._hint=r.hint}else this._prompt._hintPos=0,this._prompt._hint="";this._prompt._render()}))}_cancelCall(){this._call&&this._call.cancel(),this._call=null}}class it{constructor(e){this._prompt="",this._shell=!1,this._secure=!1,this._cursor=0,this._row=0,this._value="",this._history=null,this._complete=null,this._startCol=0,this._startRow=0,this._historySearchMode=!1,this._hint="",this._hintPos=0,this._onKey=e=>{let t=this._term;switch(e.fullName){case"tab":return void this._completeIfNeeded();case"S-tab":return void this._completeBackIfNeeded();case"M-f":case"M-right":this._forwardWord();break;case"M-b":case"M-left":this._backWord();break;case"C-w":this._deleteBackWord();break;case"M-d":this._deleteForwardWord();break;case"M-u":this._uppercaseForwardWord();break;case"home":case"C-a":this._cursor=0;break;case"end":case"C-e":this._cursor=K.wc.strWidth(this._value);break;case"C-u":this._value=K.wc.substr(this._value,this._cursor),this._cursor=0;break;case"C-l":0==this._cursor&&""===this._value?t.ringBell():(this._cursor=0,this._value="",this._resetHistory());break;case"C-r":this._shell?(this._historySearchMode=!0,this._resetHistory()):t.ringBell();break;case"C-c":this._cursor=0,this._value="";break;case"backspace":if(0==this._cursor)t.ringBell();else{let e=K.wc.substring(this._value,0,this._cursor-1),t=K.wc.substr(this._value,this._cursor);this._value=[e,t].join(""),this._cursor=K.wc.strWidth(e),this._resetHistory()}break;case"C-d":{let e=K.wc.substring(this._value,0,this._cursor),t=K.wc.substr(this._value,this._cursor+1);this._value=[e,t].join("")}break;case"C-b":case"left":this._moveLeft();break;case"C-f":case"right":this._moveRight();break;case"C-k":if(!this._historySearchMode){this._value=K.wc.substring(this._value,0,this._cursor),this._cursor=K.wc.strWidth(this._value),this._resetHistory();break}case"C-p":case"up":return this._moveUp();case"C-n":case"down":return this._moveDown();case"escape":this._historySearchMode=!1;break;case"linefeed":case"C-j":if(this._historySearchMode)return this._moveDown();case"return":case"enter":if(this._historySearchMode)return this._getHistory().enter(),this._historySearchMode=!1,this._resetHistory(),void this._render();this._cursor=K.wc.strWidth(this._value),this._hint="",this._render(),this._term.interpret("\r\n");let r="line",o={text:this._value||""};return void window.webkit.messageHandlers.interOp.postMessage({op:r,data:o});default:if(e.ch){let r=K.wc.strWidth(e.ch),o=K.wc.substring(this._value,0,this._cursor),i=K.wc.substr(this._value,this._cursor);t.accessibilityReader_.assertiveAnnounce(e.ch),this._value=[o,e.ch,i].join(""),this._cursor+=r,this._resetHistory()}}this._searchIfNeeded(),this._hintIfNeeded(),this._render()},this._term=e}_valueStartCol(){return this._startCol+K.wc.strWidth(this._prompt)}_searchIfNeeded(){this._shell&&this._historySearchMode&&this._getHistory().search()}_completeIfNeeded(){this._shell&&!this._historySearchMode&&this._getComplete().complete(1)}_completeBackIfNeeded(){this._shell&&!this._historySearchMode&&this._getComplete().complete(-1)}_hintIfNeeded(){this._shell&&!this._historySearchMode?this._getComplete().hint():this._hint=""}_moveLeft(){if(this._cursor<0)return this._cursor=0,void this._term.ringBell();var e,t,r=0;do{r+=1,e=K.wc.substring(this._value,0,this._cursor-r),t=K.wc.strWidth(e)}while(t>=this._cursor&&r<5);this._cursor=t}_moveRight(){let e=K.wc.strWidth(this._value);if(this._cursor>=e)return this._cursor=e,void this._term.ringBell();var t,r,o=0;do{o+=1,t=K.wc.substring(this._value,0,this._cursor+o),r=K.wc.strWidth(t)}while(r<=this._cursor&&o<5);this._cursor=r}_moveUp(){let e=this._term,t=this._term.screen_;if(((this._cursor+this._valueStartCol())/t.columnCount_|0)>0)this._cursor-=t.columnCount_,this._cursor<0&&(this._cursor=0);else{if(this._shell)return this._hint="",this._getHistory().prev(this._historySearchMode);e.ringBell()}this._render()}_moveDown(){let e=this._term,t=this._term.screen_,r=K.wc.strWidth(this._value);if(((this._cursor+this._valueStartCol())/t.columnCount_|0)<(r/t.columnCount_|0))this._cursor+=t.columnCount_,this._cursor>r&&(this._cursor=r);else{if(this._shell)return this._hint="",this._getHistory().next(this._historySearchMode);e.ringBell()}this._render()}_getHistory(){return this._history||(this._history=new rt(this)),this._history}_getComplete(){return this._complete||(this._complete=new ot(this)),this._complete}_resetHistory(){this._historySearchMode?this._getHistory().search():this._history&&(this._history.reset(),this._history=null)}_forwardWord(){let e=K.wc.substr(this._value,this._cursor),t=$e.exec(e);t&&(this._cursor+=K.wc.strWidth(t[0]))}_backWord(){let e=K.wc.substring(this._value,0,this._cursor),t=et.exec(e);t&&(this._cursor-=K.wc.strWidth(t[0]),this._cursor<0&&(this._cursor=0))}_deleteBackWord(){0==this._cursor&&this._term.ringBell();var e=K.wc.substring(this._value,0,this._cursor);let t=K.wc.substr(this._value,this._cursor),r=et.exec(e);if(!r)return;let o=K.wc.strWidth(r[0]);e=K.wc.substring(this._value,0,this._cursor-o),this._value=[e,t].join(""),this._cursor=Math.max(0,this._cursor-o),this._resetHistory()}_deleteForwardWord(){let e=K.wc.substring(this._value,0,this._cursor);var t=K.wc.substr(this._value,this._cursor);let r=$e.exec(t);if(!r)return;let o=K.wc.strWidth(r[0]);t=K.wc.substr(t,o),this._value=[e,t].join(""),this._resetHistory()}_uppercaseForwardWord(){let e=K.wc.substring(this._value,0,this._cursor);var t=K.wc.substr(this._value,this._cursor);let r=$e.exec(t);if(!r)return;let o=r[0].toUpperCase(),i=K.wc.strWidth(o);t=K.wc.substr(t,i),this._value=[e,o,t].join(""),this._cursor+=i,this._resetHistory()}_render(){if(this._historySearchMode)return void this._getHistory().render();let e=this._term,t=e.screen_.columnCount_;e.setCursorVisible(!1),e.setCursorPosition(this._startRow,this._startCol),e.eraseBelow();let r=this._hintPos+K.wc.strWidth(this._hint),o=K.wc.strWidth(this._value);o=Math.max(r,o),this._secure&&(o=0,r=0);let i=o+this._valueStartCol(),n=i/t|0,s=i%t,a=this._startRow+n+1-e.screenSize.height;a>0&&(e.appendRows_(a),this._startRow-=a,e.setCursorPosition(this._startRow,this._startCol)),e.print(this._prompt,!1);var l=e.saveCursor();if(!this._secure){if(this._hint&&this._shell){let r=this._hintPos+this._valueStartCol(),o=r/t|0,i=r%t;e.setCursorPosition(this._startRow+o,i),e.screen_.textAttributes.faint=!0,e.screen_.textAttributes.foregroundSource=3,e.screen_.textAttributes.syncColors(),e.print(this._hint,!1),e.restoreCursor(l),e.screen_.textAttributes.reset()}e.print(this._value,!1)}n=(i=(this._secure?0:this._cursor)+this._valueStartCol())/t|0,s=i%t,e.setCursorPosition(this._startRow+n,s),e.setCursorVisible(!0)}processInput(e){this._startCol<0&&(this._value="",this._cursor=0,this._startCol=this._term.getCursorColumn(),this._startRow=this._term.getCursorRow()),H(e,this._onKey)}processMouseClick(e){if(this._startCol<0)return!1;if(null==e.terminalRow||null==e.terminalColumn)return!1;var t=e.terminalColumn-1,r=e.terminalRow-1,o=this._startRow,i=this._getHistory()._lines;this._historySearchMode&&(o+=i.length+1);let n=r-o;if(n<0){if(-n<=i.length){let e=i[i.length+n];return this._getHistory()._cursor=e.num,void this._getHistory().render()}return this._cursor=0,void this._render()}let s=K.wc.strWidth(this._value),a=n*this._term.screen_.columnCount_+t-(this._historySearchMode?2:this._valueStartCol());this._cursor=Math.min(Math.max(a,0),s);let l=K.wc.substring(this._value,0,this._cursor);return this._cursor=K.wc.strWidth(l),this._render(),!0}processMouseScroll(e){return!(this._startCol<0)&&(null!=e.terminalRow&&null!=e.terminalColumn&&(!!this._historySearchMode&&(e.deltaY>0?this._moveUp():this._moveDown(),!0)))}promptB64(e){this.reset(),this._term.setAutoCarriageReturn(!0);let t=JSON.parse(window.atob(e));this._prompt=t.prompt,this._secure=t.secure,this._shell=t.shell,this._value="",this._hint="",this._hintPos=0,this._cursor=0,this._startCol=this._term.getCursorColumn(),this._startRow=this._term.getCursorRow(),this._render(),this._term.accessibilityReader_.announce(this._prompt)}reset(){-1!=this._startCol&&(this._history=null,this._complete=null,this._prompt="",this._startCol=-1,this._secure=!1,this._shell=!1,this._hint="",this._hintPos=0,this._historySearchMode=!1)}resize(){this._startCol<0||this._render()}}U.Terminal.prototype.decorate=function(e){this.div_=document.body,this.accessibilityReader_=new U.AccessibilityReader(this.div_),this.scrollPort_.decorate(e),this.scrollPort_.setUserCssUrl(this.prefs_.get("user-css")),this.scrollPort_.setUserCssText(this.prefs_.get("user-css-text")),this.scrollPort_.setAccessibilityReader(this.accessibilityReader_),this.div_.focus=this.focus.bind(this),this.setFontSize(this.prefs_.get("font-size")),this.syncFontFamily(),this.setScrollbarVisible(this.prefs_.get("scrollbar-visible")),this.setScrollWheelMoveMultipler(this.prefs_.get("scroll-wheel-move-multiplier")),this.document_=this.scrollPort_.getDocument(),this.document_.body.oncontextmenu=function(){return!1};var t=this.onMouse_.bind(this),r=this.scrollPort_.getScreenNode();r.addEventListener("mousedown",t),r.addEventListener("mouseup",t),r.addEventListener("mousemove",t),this.scrollPort_.onScrollWheel=t;let o=this.onFocusChange_.bind(this,!0);r.addEventListener("focus",o),r.addEventListener("mousedown",function(){setTimeout(o)}.bind(this)),r.addEventListener("blur",this.onFocusChange_.bind(this,!1));var i=this.document_.createElement("style");i.textContent='.cursor-node[focus="false"] {  box-sizing: border-box;  background-color: transparent !important;  border-width: 2px;  border-style: solid;}.wc-node {  display: inline-block;  text-align: center;  width: calc(var(--hterm-charsize-width) * 2);  line-height: var(--hterm-charsize-height);}:root {  --hterm-charsize-width: '+this.scrollPort_.characterSize.width+"px;  --hterm-charsize-height: "+this.scrollPort_.characterSize.height+"px;  --hterm-cursor-offset-col: -1;  --hterm-cursor-offset-row: -1;  --hterm-blink-node-duration: 0.7s;  --hterm-mouse-cursor-text: text;  --hterm-mouse-cursor-pointer: default;  --hterm-mouse-cursor-style: var(--hterm-mouse-cursor-text);}.uri-node:hover {  text-decoration: underline;  cursor: pointer;}@keyframes blink {  from { opacity: 1.0; }  to { opacity: 0.0; }}.blink-node {  animation-name: blink;  animation-duration: var(--hterm-blink-node-duration);  animation-iteration-count: infinite;  animation-timing-function: ease-in-out;  animation-direction: alternate;}",this.document_.head.appendChild(i),this.cursorOverlayNode_=this.document_.createElement("div"),this.cursorOverlayNode_.id="hterm:terminal-overlay-cursor",this.cursorOverlayNode_.style.cssText="position: absolute;left: 0;top: 0;bottom: 0;right: 0;pointer-events: none;",this.document_.body.appendChild(this.cursorOverlayNode_),this.cursorNode_=this.document_.createElement("div"),this.cursorNode_.id="hterm:terminal-cursor",this.cursorNode_.className="cursor-node",this.cursorNode_.style.cssText="position: absolute;display: "+(this.options_.cursorVisible?"":"none")+";width: var(--hterm-charsize-width);height: var(--hterm-charsize-height);background-color: var(--hterm-cursor-color);border-color: var(--hterm-cursor-color);  isolatation: isolate;  transform: translate3d(calc(var(--hterm-charsize-width) * var(--hterm-cursor-offset-col)), calc(var(--hterm-charsize-height) * var(--hterm-cursor-offset-row)), 0);-webkit-transition: opacity, background-color 100ms linear;-moz-transition: opacity, background-color 100ms linear;",this.setCursorColor(),this.setCursorBlink(!!this.prefs_.get("cursor-blink")),this.restyleCursor_(),this.cursorOverlayNode_.appendChild(this.cursorNode_),this.ime_=this.document_.createElement("ime"),this.cursorOverlayNode_.appendChild(this.ime_),this.scrollBlockerNode_=this.document_.createElement("div"),this.scrollBlockerNode_.id="hterm:mouse-drag-scroll-blocker",this.scrollBlockerNode_.style.cssText="position: absolute;top: -99px;display: block;width: 10px;height: 10px;",this.document_.body.appendChild(this.scrollBlockerNode_),this.scrollPort_.onScrollWheel=t,["mousedown","mouseup","mousemove","click","dblclick"].forEach(e=>{this.scrollBlockerNode_.addEventListener(e,t),this.cursorNode_.addEventListener(e,t),this.document_.addEventListener(e,t)}),this.cursorNode_.addEventListener("mousedown",()=>{setTimeout(this.focus.bind(this))}),this.setReverseVideo(!1),this.scrollPort_.focus(),this.scrollPort_.scheduleRedraw(),this.prompt=new it(this)},U.Terminal.prototype.syncCursorPosition_=function(){var e=this.scrollPort_.getTopRowIndex(),t=this.scrollPort_.getBottomRowIndex(e),r=this.scrollbackRows_.length+this.screen_.cursorPosition.row;let o=!1;if(this.accessibilityReader_.accessibilityEnabled){const e=this.screen_.cursorPosition.column;const t=Ue(this.getRowNode(this.screen_.cursorPosition.row));o=this.accessibilityReader_.hasUserGesture,this.accessibilityReader_.afterCursorChange(t,r,e)}if(r>t)this.setCssCursorPos({row:-1,col:-1});else{this.options_.cursorVisible&&"none"==this.cursorNode_.style.display&&(this.cursorNode_.style.display=""),this.setCssCursorPos({row:r-e+this.scrollPort_.visibleRowTopMargin,col:this.screen_.cursorPosition.column});var i=this.document_.getSelection();i&&(i.isCollapsed||o)&&this.screen_.syncSelectionCaret(i)}};var nt={row:-1,col:-1};U.Terminal.prototype.setCssCursorPos=function(e){nt.row===e.row&&nt.col===e.col||-1===nt.row&&-1===e.row||(nt.row!==e.row&&this.setCursorCssVar("cursor-offset-row",e.row+""),nt.col!==e.col&&this.setCursorCssVar("cursor-offset-col",e.col+""),this.blinkCursorPos=e,nt=e)},U.Terminal.prototype.setCursorCssVar=function(e,t,r="--hterm-"){this.cursorOverlayNode_.style.setProperty(`${r}${e}`,t)},U.Terminal.prototype.scheduleSyncCursorPosition_=function(){if(!this.timeouts_.syncCursor){var e=this;this.timeouts_.syncCursor=setTimeout((function(){requestAnimationFrame((function(){e.syncCursorPosition_(),e.timeouts_.syncCursor=0}))}),0)}},U.Terminal.prototype.scheduleRedraw_=function(){if(!this.timeouts_.redraw){var e=this;this.timeouts_.redraw=setTimeout((function(){e.timeouts_.redraw=0,e.scrollPort_.redraw_()}),0)}},U.Terminal.prototype.scheduleScrollDown_=function(){if(!this.timeouts_.scrollDown){var e=this;this.timeouts_.scrollDown=setTimeout((function(){e.timeouts_.scrollDown=0,e.scrollPort_.scrollToBottom()}),20)}},U.Terminal.prototype.renumberRows_=function(e,t,r){for(var o=r||this.screen_,i=this.scrollbackRows_.length,n=o.rowsArray,s=e;s<t;s++){var a=n[s];a.n=i+s,Ve(a)}},U.Terminal.prototype.appendRows_=function(e){var t=!1;this.scrollbackRows_.length>6e3&&(this.scrollbackRows_.splice(0,2e3),t=!0);for(var r=this.screen_.rowsArray.length,o=this.scrollbackRows_.length+r,i=0;i<e;i++){var n={key:Oe(),n:o+i,o:!1,v:0,nodes:[Ge("",0)]};this.screen_.setRow(n,r+i)}var s=this.screen_.rowsArray.length-this.screenSize.height;if(s>0){var a=this.screen_.shiftRows(s);Array.prototype.push.apply(this.scrollbackRows_,a),this.scrollPort_.isScrolledEnd&&this.scheduleScrollDown_()}t&&(this.scrollPort_.syncScrollHeight(),this.scheduleScrollDown_()),r>=this.screen_.rowsArray.length&&(r=this.screen_.rowsArray.length-1),this.setAbsoluteCursorPosition(r,0)},U.Terminal.prototype.moveRows_=function(e,t,r){var o,i,n=this.screen_.removeRows(e,t);this.screen_.insertRows(r,n),e<r?(o=e,i=r+t):(o=r,i=e+t),this.renumberRows_(o,i),this.scrollPort_.scheduleInvalidate()},U.Terminal.prototype.eraseToLeft=function(){var e=this.saveCursor();this.setCursorColumn(0);const t=e.column+1;this.screen_.overwriteString(K.f.getWhitespace(t),t),this.scrollPort_.renderRef.touchRow(this.screen_.cursorRow()),this.restoreCursor(e)},U.Terminal.prototype.eraseToRight=function(e){if(!this.screen_.cursorPosition.overflow){var t=this.screenSize.width-this.screen_.cursorPosition.column,r=e?Math.min(e,t):t,o=this.screen_.rowsArray[this.screen_.cursorPosition.row];if(this.screen_.textAttributes.background===this.screen_.textAttributes.DEFAULT_COLOR&&Ke(o)<=this.screen_.cursorPosition.column+r)return this.screen_.deleteChars(r),this.clearCursorOverflow(),void this.scrollPort_.renderRef.touchRow(o);var i=this.saveCursor();this.screen_.overwriteString(K.f.getWhitespace(r),r),this.scrollPort_.renderRef.touchRow(o),this.restoreCursor(i),this.clearCursorOverflow()}},U.Terminal.prototype.insertLines=function(e){var t=this.screen_.cursorPosition.row,r=this.getVTScrollBottom(),o=r-t-(e=Math.min(e,r-t))+1;o&&this.moveRows_(t,o,t+e);for(var i=e-1;i>=0;i--)this.setAbsoluteCursorPosition(t+i,0),this.screen_.clearCursorRow(),this.scrollPort_.renderRef.touchRow(this.screen_.cursorRow())},U.Terminal.prototype.deleteLines=function(e){var t=this.saveCursor(),r=t.row,o=this.getVTScrollBottom(),i=o-r+1,n=o-(e=Math.min(e,i))+1;e!=i&&this.moveRows_(r,e,n);for(var s=0;s<e;s++){this.setAbsoluteCursorPosition(n+s,0),this.screen_.clearCursorRow();var a=this.screen_.cursorRow();this.scrollPort_.renderRef.touchRow(a)}this.restoreCursor(t),this.clearCursorOverflow()},U.Terminal.prototype.insertSpace=function(e){var t=this.saveCursor(),r=K.f.getWhitespace(e||1);this.screen_.insertString(r,r.length),this.screen_.maybeClipCurrentRow();var o=this.screen_.cursorRow();this.scrollPort_.renderRef.touchRow(o),this.restoreCursor(t),this.clearCursorOverflow()},U.Terminal.prototype.deleteChars=function(e){var t=this.screen_.deleteChars(e);if(t&&!this.screen_.textAttributes.isDefault()){var r=this.saveCursor();this.setCursorColumn(this.screenSize.width-t),this.screen_.insertString(K.f.getWhitespace(t),t),this.restoreCursor(r)}var o=this.screen_.cursorRow();this.scrollPort_.renderRef.touchRow(o),this.clearCursorOverflow()},U.Terminal.prototype.eraseAbove=function(){var e=this.saveCursor();this.eraseToLeft();for(var t=0;t<e.row;t++){this.setAbsoluteCursorPosition(t,0),this.screen_.clearCursorRow();var r=this.screen_.cursorRow();Ve(r),this.scrollPort_.renderRef.touchRow(r)}this.restoreCursor(e),this.clearCursorOverflow()},U.Terminal.prototype.eraseLine=function(){var e=this.saveCursor();this.screen_.clearCursorRow(),this.restoreCursor(e),this.clearCursorOverflow(),this.scrollPort_.renderRef.touchRow(this.screen_.cursorRow())},U.Terminal.prototype.fill=function(e){var t=this.saveCursor();this.setAbsoluteCursorPosition(0,0);for(var r=0;r<this.screenSize.height;r++)for(var o=0;o<this.screenSize.width;o++)this.setAbsoluteCursorPosition(r,o),this.screen_.overwriteString(e,1);this.restoreCursor(t),this.scrollPort_.renderRef.touch()},U.Terminal.prototype.clearHome=function(e){var t=e||this.screen_,r=t.getHeight();if(0!==r){for(var o=0;o<r;o++){t.setCursorPosition(o,0),t.clearCursorRow();var i=this.screen_.cursorRow();this.scrollPort_.renderRef.touchRow(i)}t.setCursorPosition(0,0)}},U.Terminal.prototype.eraseBelow=function(){var e=this.saveCursor();this.eraseToRight();for(var t=this.screenSize.height-1,r=e.row+1;r<=t;r++){this.setAbsoluteCursorPosition(r,0),this.screen_.clearCursorRow();var o=this.screen_.cursorRow();this.scrollPort_.renderRef.touchRow(o)}this.restoreCursor(e),this.clearCursorOverflow()},U.Terminal.prototype.print=function(e,t=!0){this.scheduleSyncCursorPosition_(),t&&this.accessibilityReader_.announce(e);var r=0,o=K.wc.strWidth(e);for(0===o&&e&&(o=1);r<o;){this.options_.wraparound&&this.screen_.cursorPosition.overflow&&(this.screen_.commitLineOverflow(),this.newLine());var i,n=o-r,s=!1;this.screen_.cursorPosition.column+n>=this.screenSize.width&&(s=!0,n=this.screenSize.width-this.screen_.cursorPosition.column),s&&!this.options_.wraparound?(i=K.wc.substr(e,r,n-1)+K.wc.substr(e,o-1),n=o):i=K.wc.substr(e,r,n);for(var a=this.screen_.textAttributes,l=U.TextAttributes.splitWidecharString(i),c=l.length,u=0;u<c;u++){var h=l[u];a.wcNode=h.wcNode,a.asciiNode=h.asciiNode,this.options_.insertMode?this.screen_.insertString(h.str,h.wcStrWidth):this.screen_.overwriteString(h.str,h.wcStrWidth),a.wcNode=!1,a.asciiNode=!0}this.screen_.maybeClipCurrentRow(),r+=n,this.scrollPort_.renderRef.touchRow(this.screen_.cursorRow())}this.scrollOnOutput_&&this.scrollPort_.scrollRowToBottom(this.getRowCount())},U.Terminal.prototype.interpret=function(e){this.prompt.reset(),this.vt.interpret(e)},U.Terminal.prototype.setFontSize=function(e){e<=0&&(e=this.prefs_.get("font-size")),this.cursorOverlayNode_&&(this.cursorOverlayNode_.style.fontSize=e+"px"),this.scrollPort_.setFontSize(e),this.setCssVar("charsize-width",this.scrollPort_.characterSize.width+"px"),this.setCssVar("charsize-height",this.scrollPort_.characterSize.height+"px")},U.Terminal.prototype.syncFontFamily=function(){const e=this.prefs_.get("font-family");this.cursorOverlayNode_&&(this.cursorOverlayNode_.style.fontFamily=e),this.scrollPort_.setFontFamily(e,this.prefs_.get("font-smoothing")),this.syncBoldSafeState()},U.Terminal.prototype.displayImage=function(e){if(void 0!==e.uri&&(e.name||(e.name=""),e.inline)){const t=this.io.push();t.showOverlay(U.msg("LOADING_RESOURCE_START",[e.name],"Loading $1 ..."),null),t.onVTKeystroke=t.sendString=()=>{};const r=this.document_.createElement("img");r.src=e.uri,r.title=r.alt=e.name,this.document_.body.appendChild(r),r.onload=()=>{const o=(e,t,r)=>{if(!e||"auto"==e)return"";const o=e.match(/^([0-9]+)(px|%)?$/);return o?"%"==o[2]?t*parseInt(o[1])/100+"px":"px"==o[2]?e:`calc(${e} * var(${r}))`:""};r.style.width=o(e.width,this.document_.body.clientWidth,"--hterm-charsize-width"),r.style.height=o(e.height,this.document_.body.clientHeight,"--hterm-charsize-height");const i=Math.ceil(r.clientHeight/this.scrollPort_.characterSize.height);for(let e=0;e<i;++e)this.newLine();this.document_.body.removeChild(r);const n=this.getRowNode(this.scrollbackRows_.length+this.getCursorRow()-1);n.img={textAlign:e.align,padRows:i,objectFit:e.preserveAspectRatio?"scale-down":"fill",src:r.src,title:r.title,alt:r.alt,style:{positon:"absolute",bottom:"calc(0px - var(--hterm-charsize-height))"}},Ve(n),this.scrollPort_.renderRef.touchRow(n),t.hideOverlay(),t.pop()},r.onerror=o=>{this.document_.body.removeChild(r),t.showOverlay(U.msg("LOADING_RESOURCE_FAILED",[e.name],"Loading $1 failed ...")),t.pop()}}},U.Terminal.prototype.getRowsText=function(e,t){for(var r=[],o=e;o<t;o++){var i=this.getRowNode(o);r.push(Ue(i)),o<t-1&&!i.o&&r.push("\n")}return r.join("")},window.hterm=U,window.lib=K,window.KeystrokeVisualizer=q,window.installKB=function(e,t){const r=new B(e,t);t||document.body.append(r.element),r.focus(!0),window._onKB=r.onKB,window._kb=r}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNOb2RlLmpzIiwid2VicGFjazovLy8uL3NyYy9rYi9LZXlNYXAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2tiL1VJS2V5TW9kaWZpZXJGbGFncy50cyIsIndlYnBhY2s6Ly8vLi9zcmMva2IvQmluZGluZ3MudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2tiL0tleWJvYXJkLnRzIiwid2VicGFjazovLy8uL3NyYy9odGVybV9hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWRsaW5lL2tleXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlYWRsaW5lL3Zpc3VhbGl6ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1JTY3JlZW4vaHRlcm1fdnMucGF0Y2hlZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUlNjcmVlbi9STm9kZS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL1JTY3JlZW4vUlJvdy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL1JTY3JlZW4vUlJvd0xpc3QudHN4Iiwid2VicGFjazovLy8uL3NyYy9SU2NyZWVuL3Njcm9sbGVyL1dLU2Nyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1JTY3JlZW4vU2Nyb2xsUG9ydC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUlNjcmVlbi91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUlNjcmVlbi9UZXh0QXR0cmlidXRlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUlNjcmVlbi9TY3JlZW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1JTY3JlZW4vQWNjZXNzaWJpbGl0eVJlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVhZGxpbmUvcHJvbXB0LnRzIiwid2VicGFjazovLy8uL3NyYy9SU2NyZWVuL1Rlcm1pbmFsLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwidmFsaWRhdGVGb3JtYXQiLCJmb3JtYXQiLCJjb25kaXRpb24iLCJhIiwiYiIsImUiLCJmIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJhcmdzIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsIlR5cGVFcnJvciIsImFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwibWFwIiwiam9pbiIsInRlc3QzIiwic3BsaXQiLCJmb3JFYWNoIiwibGV0dGVyIiwia2V5cyIsInNob3VsZFVzZU5hdGl2ZSIsInRhcmdldCIsInNvdXJjZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImFyZyIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsImFhIiwiY2EiLCJ2IiwiZGEiLCJlYSIsImZhIiwiaGEiLCJBIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaWEiLCJnIiwiaCIsImsiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfY2F1Z2h0RXJyb3IiLCJBcnJheSIsInNsaWNlIiwiYXBwbHkiLCJCIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJrYSIsImxhIiwibWEiLCJuYSIsImluZGV4T2YiLCJvYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInFhIiwicmVnaXN0cmF0aW9uTmFtZSIsInJhIiwic2EiLCJkZXBlbmRlbmNpZXMiLCJ0YSIsInVhIiwidmEiLCJwbHVnaW5zIiwiZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJ3YSIsInhhIiwieWEiLCJ6YSIsInR5cGUiLCJjdXJyZW50VGFyZ2V0IiwiQWEiLCJpc0FycmF5IiwicHVzaCIsImNvbmNhdCIsIkJhIiwiQ2EiLCJEYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwiY29uc3RydWN0b3IiLCJyZWxlYXNlIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJzdGF0ZU5vZGUiLCJkaXNhYmxlZCIsIklhIiwiSmEiLCJLYSIsImluamVjdGlvbiIsImdldExpc3RlbmVyIiwicnVuRXZlbnRzSW5CYXRjaCIsInJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2giLCJMYSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsIkMiLCJNYSIsIk5hIiwicGFyZW50Tm9kZSIsInRhZyIsIk9hIiwiUGEiLCJRYSIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiRiIsInJldHVybiIsIlJhIiwiU2EiLCJkaXNwYXRjaENvbmZpZyIsIlRhIiwiX3RhcmdldEluc3QiLCJVYSIsIlZhIiwiWGEiLCJZYSIsIlphIiwiYWx0ZXJuYXRlIiwiJGEiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImFiIiwidG9Mb3dlckNhc2UiLCJiYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImNiIiwiZGIiLCJlYiIsImNhblVzZURPTSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwid2luZG93IiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwiZG9jdW1lbnRFbGVtZW50IiwiRyIsIl9yb290IiwiX3N0YXJ0VGV4dCIsIl9mYWxsYmFja1RleHQiLCJtYiIsIm5iIiwib2IiLCJwYiIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJkZWZhdWx0UHJldmVudGVkIiwiaXNUcnVzdGVkIiwiSCIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJyYiIsImV2ZW50UG9vbCIsInBvcCIsInNiIiwiZGVzdHJ1Y3RvciIsInFiIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXh0ZW5kIiwidGIiLCJkYXRhIiwidWIiLCJ2YiIsIndiIiwieGIiLCJkb2N1bWVudE1vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJDYiIsIkRiIiwia2V5Q29kZSIsIkViIiwiZGV0YWlsIiwiRmIiLCJJYiIsIndoaWNoIiwiR2IiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJIYiIsIkpiIiwiS2IiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50IiwiTGIiLCJNYiIsIk5iIiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiZW5xdWV1ZVN0YXRlUmVzdG9yZSIsIm5lZWRzU3RhdGVSZXN0b3JlIiwicmVzdG9yZVN0YXRlSWZOZWVkZWQiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwiWWIiLCJub2RlTmFtZSIsIlpiIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJub2RlVHlwZSIsIiRiIiwic2V0QXR0cmlidXRlIiwiYWMiLCJjYyIsIl92YWx1ZVRyYWNrZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXQiLCJjb25maWd1cmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiYmMiLCJkYyIsImNoZWNrZWQiLCJlYyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJIiwiZm9yIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsIm1jIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsIml0ZXJhdG9yIiwic2MiLCJ0YyIsImRpc3BsYXlOYW1lIiwicGVuZGluZ1Byb3BzIiwiaWQiLCIkJHR5cGVvZiIsInJlbmRlciIsInZjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJ3YyIsInhjIiwieWMiLCJKIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIksiLCJDYyIsIkRjIiwidG9VcHBlckNhc2UiLCJFYyIsIkFjIiwiaXNOYU4iLCJCYyIsInRlc3QiLCJ6YyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiRmMiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkdjIiwiSGMiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsInRhYkluZGV4IiwiTWMiLCJjaGFuZ2UiLCJOYyIsIk9jIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwiZGV0YWNoRXZlbnQiLCJWYyIsIldjIiwiYXR0YWNoRXZlbnQiLCJYYyIsIlljIiwiWmMiLCIkYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJhZCIsInZpZXciLCJiZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJjZCIsImdldE1vZGlmaWVyU3RhdGUiLCJkZCIsImVkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidG9FbGVtZW50IiwiZmQiLCJwb2ludGVySWQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiZ2QiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImhkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJlZmZlY3RUYWciLCJqZCIsImtkIiwiY2hpbGQiLCJzaWJsaW5nIiwiY3VycmVudCIsImxkIiwibmQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50Iiwib2QiLCJjbGlwYm9hcmREYXRhIiwicGQiLCJxZCIsImNoYXJDb2RlIiwicmQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5Iiwic2QiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwidGQiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsInVkIiwiZGF0YVRyYW5zZmVyIiwidmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwid2QiLCJ4ZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwieWQiLCJ6ZCIsIkFkIiwiQmQiLCJpc0ludGVyYWN0aXZlIiwiQ2QiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJEZCIsIkVkIiwiRmQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkdkIiwiSWQiLCJMIiwiSmQiLCJLZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJMZCIsIk1kIiwic2V0RW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiZmlyc3RDaGlsZCIsIlNkIiwidGV4dENvbnRlbnQiLCJub2RlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJUZCIsImNvbnRlbnRFZGl0YWJsZSIsIlVkIiwiVmQiLCJzZWxlY3QiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImFlIiwib25TZWxlY3QiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiYmUiLCJwZXJmb3JtYW5jZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwiamUiLCJrZSIsImxlIiwibWUiLCJuZSIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwib2UiLCJwZSIsInRpbWVvdXRUaW1lIiwic2NoZWR1bGVkQ2FsbGJhY2siLCJjYWxsYmFja0lkIiwic2hpZnQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJxZSIsInBvc3RNZXNzYWdlIiwidGltZW91dCIsInJlIiwic2UiLCJzZXRUaW1lb3V0IiwiSW5maW5pdHkiLCJjbGVhclRpbWVvdXQiLCJ1ZSIsImNoaWxkcmVuIiwiQ2hpbGRyZW4iLCJ0ZSIsInZlIiwib3B0aW9ucyIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwid2UiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwieGUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsInllIiwiemUiLCJBZSIsIkJlIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJHZSIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsIkhlIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiSWUiLCJKZSIsInRyaW0iLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsIktlIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwiTGUiLCJNZSIsImlzIiwiTmUiLCJPZSIsImJsdXIiLCJmb2N1cyIsIlBlIiwiY3JlYXRlRWxlbWVudE5TIiwiUWUiLCJjcmVhdGVUZXh0Tm9kZSIsIlJlIiwiX19odG1sIiwib25DbGljayIsIm9uY2xpY2siLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJkaWZmUHJvcGVydGllcyIsInVwZGF0ZVByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkVGV4dCIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiSlNPTiIsInN0cmluZ2lmeSIsImZvcm0iLCJYZSIsIlllIiwiWmUiLCJhdXRvRm9jdXMiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJTZXQiLCJmZiIsImdmIiwiaGYiLCJNIiwiTiIsImpmIiwiTyIsImtmIiwibGYiLCJtZiIsIm5mIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJvZiIsInBmIiwicWYiLCJyZiIsImdldENoaWxkQ29udGV4dCIsInNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJ0ZiIsInVmIiwiaW5kZXgiLCJyZWYiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImV4cGlyYXRpb25UaW1lIiwidmYiLCJ3ZiIsInByb3BzIiwiaXNSZWFjdENvbXBvbmVudCIsInhmIiwieWYiLCJ6ZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiQWYiLCJlYXJsaWVzdFBlbmRpbmdUaW1lIiwibGF0ZXN0UGVuZGluZ1RpbWUiLCJlYXJsaWVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0UGluZ2VkVGltZSIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsImZpbmlzaGVkV29yayIsImNvbnRleHQiLCJwZW5kaW5nQ29udGV4dCIsImh5ZHJhdGUiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsImZpcnN0QmF0Y2giLCJuZXh0U2NoZWR1bGVkUm9vdCIsIkJmIiwiQ2YiLCJEZiIsIkZmIiwiR2YiLCJIZiIsIklmIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJKZiIsIktmIiwicGF5bG9hZCIsImNhbGxiYWNrIiwibmV4dCIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJRZiIsInciLCJSZiIsIlNmIiwiVGYiLCJzdGFjayIsIlVmIiwiVmYiLCJXZiIsIlhmIiwiX2NvbnRleHQiLCJfY2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJ0YWdOYW1lIiwiZWciLCJmZyIsImhnIiwibGciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiZW5xdWV1ZVNldFN0YXRlIiwiaWciLCJqZyIsImtnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIm1nIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJuZyIsInN0YXRlIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwib2ciLCJyZWZzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJwZyIsInFnIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInJnIiwic2ciLCJNYXAiLCJQIiwia2MiLCJIZCIsInUiLCJ4IiwicSIsImRlbGV0ZSIsIkUiLCJ5IiwiZG9uZSIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRGciLCJRIiwiRWciLCJGZyIsIkdnIiwiUiIsIkhnIiwiSWciLCJLZyIsInVwZGF0ZXIiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJlbGVtZW50IiwiaGlkZGVuIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiSmciLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJMZyIsIlBnIiwiUWciLCJSZyIsIlNnIiwiVGciLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiVWciLCJWZyIsIldnIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJYZyIsIllnIiwiWmciLCJpbnNlcnRCZWZvcmUiLCIkZyIsImFoIiwiYmgiLCJjaCIsImNvbXBvbmVudERpZENhdGNoIiwiZGgiLCJhZGQiLCJjb21wb25lbnRTdGFjayIsImVoIiwiaGFzIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJqaCIsImtoIiwibGgiLCJTIiwibWgiLCJUIiwibmgiLCJvaCIsIlUiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJ2aCIsIndoIiwiWCIsInhoIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIlYiLCJHaCIsIkhoIiwiVyIsIlkiLCJJaCIsIkpoIiwiS2giLCJMaCIsIloiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiX29uQ29tcGxldGUiLCJYaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInJhbmdlQ291bnQiLCJXYSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJEIiwiamEiLCJoaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwieiIsIm1pbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZ2ciLCJsYyIsImJhIiwicmkiLCJzaSIsIk1nIiwiTmciLCJ0aSIsInVjIiwiT2ciLCJ1aSIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiRWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImdpIiwiamkiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJraSIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJsaSIsIl9pbnRlcm5hbFJvb3QiLCJtaSIsIm9pIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsIm5pIiwicGkiLCJpaSIsInRoZW4iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJxaSIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZpIiwiZGVmYXVsdCIsIndpIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZGVmYXVsdFByb3BzIiwicmVzdWx0Iiwia2V5UHJlZml4IiwiZnVuYyIsImNvdW50IiwiZXNjYXBlIiwidG9BcnJheSIsIm9ubHkiLCJjcmVhdGVSZWYiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9kZWZhdWx0VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl9jaGFuZ2VkQml0czIiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiZm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsInVuc3RhYmxlX0FzeW5jTW9kZSIsInVuc3RhYmxlX1Byb2ZpbGVyIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJkb2MiLCJib2R5Iiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwiaXNUZXh0Tm9kZSIsImNvbnRhaW5zTm9kZSIsIm91dGVyTm9kZSIsImlubmVyTm9kZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJpc05vZGUiLCJOb2RlIiwiQ0FOQ0VMIiwiREVGQVVMVCIsIlBBU1MiLCJTVFJJUCIsIktCQWN0aW9ucyIsIm9wIiwibWVzc2FnZSIsIndlYmtpdCIsIm1lc3NhZ2VIYW5kbGVycyIsIl9rYiIsIlNTMyIsIkVTQyIsIkNTSSIsIkRFTCIsImN0bCIsImNoYXJDb2RlQXQiLCJfdW5rbm93bktleURlZiIsImtleUNhcCIsIm5vcm1hbCIsImN0cmwiLCJhbHQiLCJLZXlNYXAiLCJrZXlib2FyZCIsIl9kZWZzIiwiX3JldmVyc2VEZWZzIiwiX29uQ3RybE51bSIsImRlZiIsInN1YnN0ciIsIl9vbkFsdE51bSIsIl9vblNlbCIsIkFycm93RG93biIsIkFycm93TGVmdCIsIkFycm93UmlnaHQiLCJBcnJvd1VwIiwiRXNjYXBlIiwiaiIsInNlbE9wIiwiY29weSIsImNvbW1hbmQiLCJkaXIiLCJncmFuIiwiX2tleWJvYXJkIiwicmVzZXQiLCJrZXlEZWYiLCJ3YXJuIiwiYWRkS2V5RGVmIiwicmVzb2x2ZSIsImFjdGlvbiIsIm1vZCIsImJzIiwic2wiLCJoYXNTZWxlY3Rpb24iLCJvbkN0cmxOdW0iLCJvbkFsdE51bSIsIlVJS2V5TW9kaWZpZXJBbHBoYVNoaWZ0IiwiVUlLZXlNb2RpZmllclNoaWZ0IiwiVUlLZXlNb2RpZmllckNvbnRyb2wiLCJVSUtleU1vZGlmaWVyQWx0ZXJuYXRlIiwiVUlLZXlNb2RpZmllckNvbW1hbmQiLCJVSUtpdEZsYWdzVG9PYmplY3QiLCJmbGFncyIsIkJpbmRpbmdzIiwiX21hcCIsImV4cGFuZEZuIiwiYmluZGluZyIsImZucyIsImNvZGUiLCJudW1JZCIsImZuIiwibW9kcyIsImV4cGFuZEJpbmRpbmciLCJleHBhbmRDdXJzb3IiLCJjdXJzb3IiLCJhcnJvd3MiLCJhcnJvdyIsImN1ciIsInJlcyIsInNvcnQiLCJkb3VibGVLZXlzIiwiaWRMZWZ0IiwiaWRSaWdodCIsImxvYyIsInNoaWZ0TG9jIiwiY29udHJvbExvYyIsIm9wdGlvbkxvYyIsImNvbW1hbmRMb2MiLCJyb3ciLCJpZHgiLCJyaWdodCIsImtleUlkcyIsImtleXNQYXRoIiwiaGV4X3RvX2FzY2lpIiwiaGV4Iiwic3RyIiwibGVuIiwicGFyc2VJbnQiLCJfYWN0aW9uIiwiX2hvbGRlcnMiLCJfbGVmdFNoaWZ0IiwiX2xlZnRDb250cm9sIiwiX2xlZnRPcHRpb24iLCJfbGVmdENvbW1hbmQiLCJfY2Fwc0xvY2tJRCIsIl9rZXlJZCIsIl9ibG9ja0V2ZW50IiwidGVybWluYWwiLCJfa2V5TWFwIiwiX2JpbmRpbmdzIiwiX2xhbmciLCJfbGFuZ1dpdGhEZWxldGVzIiwiX2lzSEtCIiwiX2xhc3RLZXlEb3duRXZlbnQiLCJfY2Fwc0xvY2tSZW1hcHBlZCIsIl9zaGlmdFJlbWFwcGVkIiwiX3JlbW92ZUFjY2VudHMiLCJfbWV0YVNlbmRzRXNjYXBlIiwiX2FsdFNlbmRzV2hhdCIsIl9pZ25vcmVBY2NlbnRzIiwiQWx0TGVmdCIsIkFsdFJpZ2h0IiwiX21vZHNNYXAiLCJTaGlmdExlZnQiLCJTaGlmdFJpZ2h0IiwiTWV0YUxlZnQiLCJNZXRhUmlnaHQiLCJDb250cm9sTGVmdCIsIkNvbnRyb2xSaWdodCIsIkNhcHNMb2NrIiwiX2Rvd25NYXAiLCJfdXBNYXAiLCJfbW9kcyIsIl91cCIsIl9kb3duIiwiY2FyZXQiLCJfdXBkYXRlVUlLaXRNb2RzSWZOZWVkZWQiLCJjYXBzS2V5IiwidG9VSUtpdEZsYWdzIiwiX2Rvd25LZXlzSWRzIiwiX29uS2V5RG93biIsImlzQ29tcG9zaW5nIiwiZXZlbnQiLCJrZXlJZCIsIm1hdGNoIiwiX2V4ZWNCaW5kaW5nIiwiZG93bk92ZXJyaWRlIiwiX21vZCIsImhhbmRsZWQiLCJfaGFuZGxlS2V5RG93bktleSIsIl9oYW5kbGVLZXlEb3duIiwiX29uQmVmb3JlSW5wdXQiLCJpbnB1dFR5cGUiLCJfb3V0cHV0IiwiX29uSW5wdXQiLCJfb25LZXlVcCIsInVwT3ZlcnJpZGUiLCJrZXlJbmZvIiwia2V5TWFwIiwic2l6ZSIsImtleURvd24iLCJpc0hLQiIsIl9wYXRjaEtleURvd24iLCJnZXRLZXlEZWYiLCJyZXNvbHZlZEFjdGlvblR5cGUiLCJnZXRBY3Rpb24iLCJzcmMiLCJvdXQiLCJub3JtYWxpemUiLCJ0bXAiLCJpbW9kIiwiYWN0aW9uU3RyIiwibG9nIiwiX29uSU1FIiwic2Nyb2xsUG9ydCIsIl90Iiwic2Nyb2xsUG9ydF8iLCJiYWNrZ3JvdW5kQ29sb3IiLCJsaWIiLCJjb2xvcnMiLCJzZXRBbHBoYSIsImdldEN1cnNvckNvbG9yIiwiZ2V0QmFja2dyb3VuZENvbG9yIiwic2NyZWVuQ29scyIsInNjcmVlblNpemUiLCJzY3JlZW5Sb3dzIiwic2NyZWVuXyIsImN1cnNvclBvc2l0aW9uIiwiY29sdW1uIiwic3RyV2lkdGgiLCJib3R0b20iLCJmbG9vciIsImNsZWFyIiwiX3N0YXRlUmVzZXQiLCJfY29uZmlnS2V5IiwiZG93biIsInVwIiwiaWdub3JlQWNjZW50cyIsIl9jb25maWciLCJjZmciLCJfcmVzZXQiLCJjYXBzTG9jayIsImNvbnRyb2wiLCJvcHRpb24iLCJzaG9ydGN1dCIsInNob3J0Y3V0cyIsIl9rZXlzRnJvbVNob3J0Y3V0IiwibW9kaWZpZXJzIiwiX3VwZGF0ZVJlbWFwcGluZ0ZsYWdzIiwiX29uVG9vbGJhck1vZHMiLCJfZXhlY1ByZXNzIiwic2tpcEJpbmRpbmciLCJwYXJ0cyIsInNhdmVkTW9kcyIsIm1vZEZsYWdzIiwib25LQiIsImNtZCIsIl9oYW5kbGVDYXBzTG9ja0Rvd24iLCJfaGFuZGxlR3VhcmQiLCJfaGFuZGxlTGFuZyIsImVsIiwiZ2V0RWxlbWVudEJ5SWQiLCJhcHBlbmQiLCJwb3NpdGlvbiIsIl9hIiwiY29sbGFwc2UiLCJvdmVycmlkZSIsImxhbmdBbmRLQiIsInZhcl9hcmdzIiwiZXgiLCJzdGFja0FycmF5IiwicGF0aCIsInJ0ZGVwIiwiYXJ5IiwicnVudGltZURlcGVuZGVuY2llc18iLCJwYXNzZWQiLCJzb3VyY2VMaXN0IiwibmFtZXMiLCJvYmoiLCJpbml0Q2FsbGJhY2tzXyIsIm9uSW5pdCIsIm9wdF9sb2dGdW5jdGlvbiIsImluaXROZXh0IiwicmVjIiwiYWxhcm0iLCJlbnN1cmVSdW50aW1lRGVwZW5kZW5jaWVzXyIsInBhZFN0YXJ0IiwidGFyZ2V0TGVuZ3RoIiwicGFkU3RyaW5nIiwicGFkRW5kIiwidmFsdWVzIiwiZW50cmllcyIsInJlZHVjZSIsIkZ1bmN0aW9uIiwiaXNFbnVtZXJhYmxlIiwiUmVmbGVjdCIsIm93bktleXMiLCJQcm9taXNlIiwiZmluYWxseSIsInNwZWNpZXNDb25zdHJ1Y3RvciIsImRlZmF1bHRDb25zdHJ1Y3RvciIsInNwZWNpZXMiLCJzaGltIiwib25GaW5hbGx5IiwicHJvbWlzZSIsIndyaXRhYmxlIiwiYXJyYXkiLCJhcnJheUJpZ0VuZGlhblRvVWludDMyIiwidWludDMyVG9BcnJheUJpZ0VuZGlhbiIsInVpbnQzMiIsImNvbmNhdFR5cGVkIiwiYXJyYXlzIiwicmVzdWx0TGVuZ3RoIiwicG9zIiwiY29tcGFyZSIsInJlXyIsImhleDE2IiwiaGV4MjQiLCJyZ2IiLCJSZWdFeHAiLCJyZ2JhIiwicmdieCIsIngxMXJnYiIsInJnYlRvWDExIiwic2NhbGUiLCJ6cGFkIiwieDExSGV4VG9DU1MiLCJzdGFydHNXaXRoIiwiYXJyYXlUb1JHQkEiLCJ4MTFUb0NTUyIsInNwbGljZSIsInJvdW5kIiwibmFtZVRvUkdCIiwiaGV4VG9SR0IiLCJjb252ZXJ0IiwicmdiVG9IZXgiLCJjcmFja1JHQiIsIm5vcm1hbGl6ZUNTUyIsImFscGhhIiwibWl4IiwidGludCIsInBlcmNlbnQiLCJhcnkxIiwiYXJ5MiIsImRpZmYiLCJjb2xvck5hbWVzIiwic3RvY2tDb2xvclBhbGV0dGUiLCJjb2xvclBhbGV0dGUiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhbnRpcXVld2hpdGUxIiwiYW50aXF1ZXdoaXRlMiIsImFudGlxdWV3aGl0ZTMiLCJhbnRpcXVld2hpdGU0IiwiYXF1YW1hcmluZSIsImFxdWFtYXJpbmUxIiwiYXF1YW1hcmluZTIiLCJhcXVhbWFyaW5lMyIsImFxdWFtYXJpbmU0IiwiYXp1cmUiLCJhenVyZTEiLCJhenVyZTIiLCJhenVyZTMiLCJhenVyZTQiLCJiZWlnZSIsImJpc3F1ZSIsImJpc3F1ZTEiLCJiaXNxdWUyIiwiYmlzcXVlMyIsImJpc3F1ZTQiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWUxIiwiYmx1ZTIiLCJibHVlMyIsImJsdWU0IiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnJvd24xIiwiYnJvd24yIiwiYnJvd24zIiwiYnJvd240IiwiYnVybHl3b29kIiwiYnVybHl3b29kMSIsImJ1cmx5d29vZDIiLCJidXJseXdvb2QzIiwiYnVybHl3b29kNCIsImNhZGV0Ymx1ZSIsImNhZGV0Ymx1ZTEiLCJjYWRldGJsdWUyIiwiY2FkZXRibHVlMyIsImNhZGV0Ymx1ZTQiLCJjaGFydHJldXNlIiwiY2hhcnRyZXVzZTEiLCJjaGFydHJldXNlMiIsImNoYXJ0cmV1c2UzIiwiY2hhcnRyZXVzZTQiLCJjaG9jb2xhdGUiLCJjaG9jb2xhdGUxIiwiY2hvY29sYXRlMiIsImNob2NvbGF0ZTMiLCJjaG9jb2xhdGU0IiwiY29yYWwiLCJjb3JhbDEiLCJjb3JhbDIiLCJjb3JhbDMiLCJjb3JhbDQiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY29ybnNpbGsxIiwiY29ybnNpbGsyIiwiY29ybnNpbGszIiwiY29ybnNpbGs0IiwiY3lhbiIsImN5YW4xIiwiY3lhbjIiLCJjeWFuMyIsImN5YW40IiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ29sZGVucm9kMSIsImRhcmtnb2xkZW5yb2QyIiwiZGFya2dvbGRlbnJvZDMiLCJkYXJrZ29sZGVucm9kNCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29saXZlZ3JlZW4xIiwiZGFya29saXZlZ3JlZW4yIiwiZGFya29saXZlZ3JlZW4zIiwiZGFya29saXZlZ3JlZW40IiwiZGFya29yYW5nZSIsImRhcmtvcmFuZ2UxIiwiZGFya29yYW5nZTIiLCJkYXJrb3JhbmdlMyIsImRhcmtvcmFuZ2U0IiwiZGFya29yY2hpZCIsImRhcmtvcmNoaWQxIiwiZGFya29yY2hpZDIiLCJkYXJrb3JjaGlkMyIsImRhcmtvcmNoaWQ0IiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2VhZ3JlZW4xIiwiZGFya3NlYWdyZWVuMiIsImRhcmtzZWFncmVlbjMiLCJkYXJrc2VhZ3JlZW40IiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmF5MSIsImRhcmtzbGF0ZWdyYXkyIiwiZGFya3NsYXRlZ3JheTMiLCJkYXJrc2xhdGVncmF5NCIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlYmlhbnJlZCIsImRlZXBwaW5rIiwiZGVlcHBpbmsxIiwiZGVlcHBpbmsyIiwiZGVlcHBpbmszIiwiZGVlcHBpbms0IiwiZGVlcHNreWJsdWUiLCJkZWVwc2t5Ymx1ZTEiLCJkZWVwc2t5Ymx1ZTIiLCJkZWVwc2t5Ymx1ZTMiLCJkZWVwc2t5Ymx1ZTQiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJkb2RnZXJibHVlMSIsImRvZGdlcmJsdWUyIiwiZG9kZ2VyYmx1ZTMiLCJkb2RnZXJibHVlNCIsImZpcmVicmljayIsImZpcmVicmljazEiLCJmaXJlYnJpY2syIiwiZmlyZWJyaWNrMyIsImZpcmVicmljazQiLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkMSIsImdvbGQyIiwiZ29sZDMiLCJnb2xkNCIsImdvbGRlbnJvZCIsImdvbGRlbnJvZDEiLCJnb2xkZW5yb2QyIiwiZ29sZGVucm9kMyIsImdvbGRlbnJvZDQiLCJncmF5IiwiZ3JheTAiLCJncmF5MSIsImdyYXkxMCIsImdyYXkxMDAiLCJncmF5MTEiLCJncmF5MTIiLCJncmF5MTMiLCJncmF5MTQiLCJncmF5MTUiLCJncmF5MTYiLCJncmF5MTciLCJncmF5MTgiLCJncmF5MTkiLCJncmF5MiIsImdyYXkyMCIsImdyYXkyMSIsImdyYXkyMiIsImdyYXkyMyIsImdyYXkyNCIsImdyYXkyNSIsImdyYXkyNiIsImdyYXkyNyIsImdyYXkyOCIsImdyYXkyOSIsImdyYXkzIiwiZ3JheTMwIiwiZ3JheTMxIiwiZ3JheTMyIiwiZ3JheTMzIiwiZ3JheTM0IiwiZ3JheTM1IiwiZ3JheTM2IiwiZ3JheTM3IiwiZ3JheTM4IiwiZ3JheTM5IiwiZ3JheTQiLCJncmF5NDAiLCJncmF5NDEiLCJncmF5NDIiLCJncmF5NDMiLCJncmF5NDQiLCJncmF5NDUiLCJncmF5NDYiLCJncmF5NDciLCJncmF5NDgiLCJncmF5NDkiLCJncmF5NSIsImdyYXk1MCIsImdyYXk1MSIsImdyYXk1MiIsImdyYXk1MyIsImdyYXk1NCIsImdyYXk1NSIsImdyYXk1NiIsImdyYXk1NyIsImdyYXk1OCIsImdyYXk1OSIsImdyYXk2IiwiZ3JheTYwIiwiZ3JheTYxIiwiZ3JheTYyIiwiZ3JheTYzIiwiZ3JheTY0IiwiZ3JheTY1IiwiZ3JheTY2IiwiZ3JheTY3IiwiZ3JheTY4IiwiZ3JheTY5IiwiZ3JheTciLCJncmF5NzAiLCJncmF5NzEiLCJncmF5NzIiLCJncmF5NzMiLCJncmF5NzQiLCJncmF5NzUiLCJncmF5NzYiLCJncmF5NzciLCJncmF5NzgiLCJncmF5NzkiLCJncmF5OCIsImdyYXk4MCIsImdyYXk4MSIsImdyYXk4MiIsImdyYXk4MyIsImdyYXk4NCIsImdyYXk4NSIsImdyYXk4NiIsImdyYXk4NyIsImdyYXk4OCIsImdyYXk4OSIsImdyYXk5IiwiZ3JheTkwIiwiZ3JheTkxIiwiZ3JheTkyIiwiZ3JheTkzIiwiZ3JheTk0IiwiZ3JheTk1IiwiZ3JheTk2IiwiZ3JheTk3IiwiZ3JheTk4IiwiZ3JheTk5IiwiZ3JlZW4iLCJncmVlbjEiLCJncmVlbjIiLCJncmVlbjMiLCJncmVlbjQiLCJncmVlbnllbGxvdyIsImdyZXkiLCJncmV5MCIsImdyZXkxIiwiZ3JleTEwIiwiZ3JleTEwMCIsImdyZXkxMSIsImdyZXkxMiIsImdyZXkxMyIsImdyZXkxNCIsImdyZXkxNSIsImdyZXkxNiIsImdyZXkxNyIsImdyZXkxOCIsImdyZXkxOSIsImdyZXkyIiwiZ3JleTIwIiwiZ3JleTIxIiwiZ3JleTIyIiwiZ3JleTIzIiwiZ3JleTI0IiwiZ3JleTI1IiwiZ3JleTI2IiwiZ3JleTI3IiwiZ3JleTI4IiwiZ3JleTI5IiwiZ3JleTMiLCJncmV5MzAiLCJncmV5MzEiLCJncmV5MzIiLCJncmV5MzMiLCJncmV5MzQiLCJncmV5MzUiLCJncmV5MzYiLCJncmV5MzciLCJncmV5MzgiLCJncmV5MzkiLCJncmV5NCIsImdyZXk0MCIsImdyZXk0MSIsImdyZXk0MiIsImdyZXk0MyIsImdyZXk0NCIsImdyZXk0NSIsImdyZXk0NiIsImdyZXk0NyIsImdyZXk0OCIsImdyZXk0OSIsImdyZXk1IiwiZ3JleTUwIiwiZ3JleTUxIiwiZ3JleTUyIiwiZ3JleTUzIiwiZ3JleTU0IiwiZ3JleTU1IiwiZ3JleTU2IiwiZ3JleTU3IiwiZ3JleTU4IiwiZ3JleTU5IiwiZ3JleTYiLCJncmV5NjAiLCJncmV5NjEiLCJncmV5NjIiLCJncmV5NjMiLCJncmV5NjQiLCJncmV5NjUiLCJncmV5NjYiLCJncmV5NjciLCJncmV5NjgiLCJncmV5NjkiLCJncmV5NyIsImdyZXk3MCIsImdyZXk3MSIsImdyZXk3MiIsImdyZXk3MyIsImdyZXk3NCIsImdyZXk3NSIsImdyZXk3NiIsImdyZXk3NyIsImdyZXk3OCIsImdyZXk3OSIsImdyZXk4IiwiZ3JleTgwIiwiZ3JleTgxIiwiZ3JleTgyIiwiZ3JleTgzIiwiZ3JleTg0IiwiZ3JleTg1IiwiZ3JleTg2IiwiZ3JleTg3IiwiZ3JleTg4IiwiZ3JleTg5IiwiZ3JleTkiLCJncmV5OTAiLCJncmV5OTEiLCJncmV5OTIiLCJncmV5OTMiLCJncmV5OTQiLCJncmV5OTUiLCJncmV5OTYiLCJncmV5OTciLCJncmV5OTgiLCJncmV5OTkiLCJob25leWRldyIsImhvbmV5ZGV3MSIsImhvbmV5ZGV3MiIsImhvbmV5ZGV3MyIsImhvbmV5ZGV3NCIsImhvdHBpbmsiLCJob3RwaW5rMSIsImhvdHBpbmsyIiwiaG90cGluazMiLCJob3RwaW5rNCIsImluZGlhbnJlZCIsImluZGlhbnJlZDEiLCJpbmRpYW5yZWQyIiwiaW5kaWFucmVkMyIsImluZGlhbnJlZDQiLCJpdm9yeSIsIml2b3J5MSIsIml2b3J5MiIsIml2b3J5MyIsIml2b3J5NCIsImtoYWtpIiwia2hha2kxIiwia2hha2kyIiwia2hha2kzIiwia2hha2k0IiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF2ZW5kZXJibHVzaDEiLCJsYXZlbmRlcmJsdXNoMiIsImxhdmVuZGVyYmx1c2gzIiwibGF2ZW5kZXJibHVzaDQiLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsZW1vbmNoaWZmb24xIiwibGVtb25jaGlmZm9uMiIsImxlbW9uY2hpZmZvbjMiLCJsZW1vbmNoaWZmb240IiwibGlnaHRibHVlIiwibGlnaHRibHVlMSIsImxpZ2h0Ymx1ZTIiLCJsaWdodGJsdWUzIiwibGlnaHRibHVlNCIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGN5YW4xIiwibGlnaHRjeWFuMiIsImxpZ2h0Y3lhbjMiLCJsaWdodGN5YW40IiwibGlnaHRnb2xkZW5yb2QiLCJsaWdodGdvbGRlbnJvZDEiLCJsaWdodGdvbGRlbnJvZDIiLCJsaWdodGdvbGRlbnJvZDMiLCJsaWdodGdvbGRlbnJvZDQiLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHBpbmsxIiwibGlnaHRwaW5rMiIsImxpZ2h0cGluazMiLCJsaWdodHBpbms0IiwibGlnaHRzYWxtb24iLCJsaWdodHNhbG1vbjEiLCJsaWdodHNhbG1vbjIiLCJsaWdodHNhbG1vbjMiLCJsaWdodHNhbG1vbjQiLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRza3libHVlMSIsImxpZ2h0c2t5Ymx1ZTIiLCJsaWdodHNreWJsdWUzIiwibGlnaHRza3libHVlNCIsImxpZ2h0c2xhdGVibHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHRzdGVlbGJsdWUxIiwibGlnaHRzdGVlbGJsdWUyIiwibGlnaHRzdGVlbGJsdWUzIiwibGlnaHRzdGVlbGJsdWU0IiwibGlnaHR5ZWxsb3ciLCJsaWdodHllbGxvdzEiLCJsaWdodHllbGxvdzIiLCJsaWdodHllbGxvdzMiLCJsaWdodHllbGxvdzQiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYWdlbnRhMSIsIm1hZ2VudGEyIiwibWFnZW50YTMiLCJtYWdlbnRhNCIsIm1hcm9vbiIsIm1hcm9vbjEiLCJtYXJvb24yIiwibWFyb29uMyIsIm1hcm9vbjQiLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bW9yY2hpZDEiLCJtZWRpdW1vcmNoaWQyIiwibWVkaXVtb3JjaGlkMyIsIm1lZGl1bW9yY2hpZDQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1wdXJwbGUxIiwibWVkaXVtcHVycGxlMiIsIm1lZGl1bXB1cnBsZTMiLCJtZWRpdW1wdXJwbGU0IiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1pc3R5cm9zZTEiLCJtaXN0eXJvc2UyIiwibWlzdHlyb3NlMyIsIm1pc3R5cm9zZTQiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2YWpvd2hpdGUxIiwibmF2YWpvd2hpdGUyIiwibmF2YWpvd2hpdGUzIiwibmF2YWpvd2hpdGU0IiwibmF2eSIsIm5hdnlibHVlIiwib2xkbGFjZSIsIm9saXZlZHJhYiIsIm9saXZlZHJhYjEiLCJvbGl2ZWRyYWIyIiwib2xpdmVkcmFiMyIsIm9saXZlZHJhYjQiLCJvcmFuZ2UiLCJvcmFuZ2UxIiwib3JhbmdlMiIsIm9yYW5nZTMiLCJvcmFuZ2U0Iiwib3JhbmdlcmVkIiwib3JhbmdlcmVkMSIsIm9yYW5nZXJlZDIiLCJvcmFuZ2VyZWQzIiwib3JhbmdlcmVkNCIsIm9yY2hpZCIsIm9yY2hpZDEiLCJvcmNoaWQyIiwib3JjaGlkMyIsIm9yY2hpZDQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZWdyZWVuMSIsInBhbGVncmVlbjIiLCJwYWxlZ3JlZW4zIiwicGFsZWdyZWVuNCIsInBhbGV0dXJxdW9pc2UiLCJwYWxldHVycXVvaXNlMSIsInBhbGV0dXJxdW9pc2UyIiwicGFsZXR1cnF1b2lzZTMiLCJwYWxldHVycXVvaXNlNCIsInBhbGV2aW9sZXRyZWQiLCJwYWxldmlvbGV0cmVkMSIsInBhbGV2aW9sZXRyZWQyIiwicGFsZXZpb2xldHJlZDMiLCJwYWxldmlvbGV0cmVkNCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZWFjaHB1ZmYxIiwicGVhY2hwdWZmMiIsInBlYWNocHVmZjMiLCJwZWFjaHB1ZmY0IiwicGVydSIsInBpbmsiLCJwaW5rMSIsInBpbmsyIiwicGluazMiLCJwaW5rNCIsInBsdW0iLCJwbHVtMSIsInBsdW0yIiwicGx1bTMiLCJwbHVtNCIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJwdXJwbGUxIiwicHVycGxlMiIsInB1cnBsZTMiLCJwdXJwbGU0IiwicmVkIiwicmVkMSIsInJlZDIiLCJyZWQzIiwicmVkNCIsInJvc3licm93biIsInJvc3licm93bjEiLCJyb3N5YnJvd24yIiwicm9zeWJyb3duMyIsInJvc3licm93bjQiLCJyb3lhbGJsdWUiLCJyb3lhbGJsdWUxIiwicm95YWxibHVlMiIsInJveWFsYmx1ZTMiLCJyb3lhbGJsdWU0Iiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYWxtb24xIiwic2FsbW9uMiIsInNhbG1vbjMiLCJzYWxtb240Iiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2VhZ3JlZW4xIiwic2VhZ3JlZW4yIiwic2VhZ3JlZW4zIiwic2VhZ3JlZW40Iiwic2Vhc2hlbGwiLCJzZWFzaGVsbDEiLCJzZWFzaGVsbDIiLCJzZWFzaGVsbDMiLCJzZWFzaGVsbDQiLCJzaWVubmEiLCJzaWVubmExIiwic2llbm5hMiIsInNpZW5uYTMiLCJzaWVubmE0Iiwic2t5Ymx1ZSIsInNreWJsdWUxIiwic2t5Ymx1ZTIiLCJza3libHVlMyIsInNreWJsdWU0Iiwic2xhdGVibHVlIiwic2xhdGVibHVlMSIsInNsYXRlYmx1ZTIiLCJzbGF0ZWJsdWUzIiwic2xhdGVibHVlNCIsInNsYXRlZ3JheSIsInNsYXRlZ3JheTEiLCJzbGF0ZWdyYXkyIiwic2xhdGVncmF5MyIsInNsYXRlZ3JheTQiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic25vdzEiLCJzbm93MiIsInNub3czIiwic25vdzQiLCJzcHJpbmdncmVlbiIsInNwcmluZ2dyZWVuMSIsInNwcmluZ2dyZWVuMiIsInNwcmluZ2dyZWVuMyIsInNwcmluZ2dyZWVuNCIsInN0ZWVsYmx1ZSIsInN0ZWVsYmx1ZTEiLCJzdGVlbGJsdWUyIiwic3RlZWxibHVlMyIsInN0ZWVsYmx1ZTQiLCJ0YW4iLCJ0YW4xIiwidGFuMiIsInRhbjMiLCJ0YW40IiwidGhpc3RsZSIsInRoaXN0bGUxIiwidGhpc3RsZTIiLCJ0aGlzdGxlMyIsInRoaXN0bGU0IiwidG9tYXRvIiwidG9tYXRvMSIsInRvbWF0bzIiLCJ0b21hdG8zIiwidG9tYXRvNCIsInR1cnF1b2lzZSIsInR1cnF1b2lzZTEiLCJ0dXJxdW9pc2UyIiwidHVycXVvaXNlMyIsInR1cnF1b2lzZTQiLCJ2aW9sZXQiLCJ2aW9sZXRyZWQiLCJ2aW9sZXRyZWQxIiwidmlvbGV0cmVkMiIsInZpb2xldHJlZDMiLCJ2aW9sZXRyZWQ0Iiwid2hlYXQiLCJ3aGVhdDEiLCJ3aGVhdDIiLCJ3aGVhdDMiLCJ3aGVhdDQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3cxIiwieWVsbG93MiIsInllbGxvdzMiLCJ5ZWxsb3c0IiwieWVsbG93Z3JlZW4iLCJjcmVhdGVFbnVtIiwicmVwbGFjZVZhcnMiLCJ2YXJzIiwidmFybmFtZSIsInJ2IiwiZnVuY3Rpb25zIiwiZW5jb2RlVVJJIiwiZXNjYXBlSFRNTCIsInBhcnNlUXVlcnkiLCJxdWVyeVN0cmluZyIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuZHNXaXRoIiwiZ2V0VVJMIiwiY2hyb21lU3VwcG9ydGVkIiwiY2hyb21lIiwicnVudGltZSIsImNsYW1wIiwibWF4IiwiZ2V0V2hpdGVzcGFjZSIsIndoaXRlc3BhY2UiLCJvcHRfbXMiLCJ3cmFwcGVyR2VuZXJhdG9yIiwibXMiLCJnZXRTdGFjayIsImlnbm9yZUZyYW1lcyIsInN0YWNrT2JqZWN0Iiwic21hcnRGbG9vckRpdmlkZSIsIm51bWVyYXRvciIsImRlbm9taW5hdG9yIiwiY2VpbGluZyIsImNlaWwiLCJyYW5kb21JbnQiLCJnZXRPcyIsImJyb3dzZXIiLCJnZXRQbGF0Zm9ybUluZm8iLCJpbmZvIiwib3MiLCJyZWplY3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmNsdWRlcyIsImdldENocm9tZU1pbGVzdG9uZSIsIk5hTiIsImxhc3RFcnJvciIsImRlZmF1bHRNc2ciLCJpMThuIiwiYnJvd3Nlcl8iLCJnZXRBY2NlcHRMYW5ndWFnZXMiLCJsYW5ndWFnZSIsImdldE1lc3NhZ2UiLCJtc2duYW1lIiwic3Vic3RpdHV0aW9ucyIsImZhbGxiYWNrIiwicmVwbGFjZVJlZmVyZW5jZXMiLCJtc2ciLCJNZXNzYWdlTWFuYWdlciIsImxhbmd1YWdlcyIsImxhbmd1YWdlc18iLCJ1bnNoaWZ0IiwibWVzc2FnZXMiLCJhZGRNZXNzYWdlcyIsImRlZnMiLCJwbGFjZWhvbGRlcnMiLCJjb250ZW50IiwiZmluZEFuZExvYWRNZXNzYWdlcyIsInBhdHRlcm4iLCJvbkNvbXBsZXRlIiwibG9hZGVkIiwiZmFpbGVkIiwib25MYW5ndWFnZUNvbXBsZXRlIiwidHJ5TmV4dExhbmd1YWdlIiwibG9hZE1lc3NhZ2VzIiwib25TdWNjZXNzIiwib3B0X29uRXJyb3IiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9ubG9hZCIsInBhcnNlIiwicmVzcG9uc2VUZXh0Iiwib25lcnJvciIsIm9wZW4iLCJzZW5kIiwib3B0X2FyZ3MiLCJvcHRfZGVmYXVsdCIsInByb2Nlc3NJMThuQXR0cmlidXRlcyIsImRvbSIsIm5vZGVzIiwicHJvY2Vzc0kxOG5BdHRyaWJ1dGUiLCJ0aHVuayIsImdldEF0dHJpYnV0ZSIsImF0dHIiLCJQcmVmZXJlbmNlTWFuYWdlciIsInN0b3JhZ2UiLCJvcHRfcHJlZml4Iiwic3RvcmFnZU9ic2VydmVyXyIsIm9uU3RvcmFnZUNoYW5nZV8iLCJpc0FjdGl2ZV8iLCJhY3RpdmF0ZSIsInRyYWNlIiwicHJlZml4IiwiaXNJbXBvcnRpbmdKc29uXyIsInByZWZSZWNvcmRzXyIsImdsb2JhbE9ic2VydmVyc18iLCJjaGlsZEZhY3Rvcmllc18iLCJjaGlsZExpc3RzXyIsIkRFRkFVTFRfVkFMVUUiLCJSZWNvcmQiLCJjdXJyZW50VmFsdWUiLCJvYnNlcnZlcnMiLCJhZGRPYnNlcnZlciIsIm9ic2VydmVyIiwicmVtb3ZlT2JzZXJ2ZXIiLCJkZWFjdGl2YXRlIiwicmVhZFN0b3JhZ2UiLCJvcHRfY2FsbGJhY2siLCJvbkNoaWxkQ29tcGxldGUiLCJnZXRJdGVtcyIsIml0ZW1zIiwicHJlZml4TGVuZ3RoIiwibmVlZFN5bmMiLCJzeW5jQ2hpbGRMaXN0IiwiZGVmaW5lUHJlZmVyZW5jZSIsIm9wdF9vbkNoYW5nZSIsInJlY29yZCIsImNoYW5nZURlZmF1bHQiLCJkZWZpbmVQcmVmZXJlbmNlcyIsImRlZmF1bHRzIiwiZGVmaW5lQ2hpbGRyZW4iLCJsaXN0TmFtZSIsImNoaWxkRmFjdG9yeSIsIm9uQ2hpbGRMaXN0Q2hhbmdlXyIsImFkZE9ic2VydmVycyIsImdsb2JhbCIsIm5vdGlmeUFsbCIsIm5vdGlmeUNoYW5nZV8iLCJjcmVhdGVDaGlsZCIsIm9wdF9oaW50Iiwib3B0X2lkIiwiaWRzIiwiY2hpbGRNYW5hZ2VyIiwicmVzZXRBbGwiLCJnZXRDaGlsZCIsImNoaWxkTGlzdCIsImRpZmZDaGlsZExpc3RzIiwiYWRkZWQiLCJyZW1vdmVkIiwiY29tbW9uIiwib25DaGlsZFN0b3JhZ2UiLCJjdXJyZW50SWRzIiwib2xkSWRzIiwibWFuYWdlckluZGV4IiwicmVtb3ZlSXRlbSIsImNoYW5nZWQiLCJyZW1vdmVJdGVtcyIsIm5ld1ZhbHVlIiwiY2hhbmdlRGVmYXVsdHMiLCJzYXZlVG9TdG9yYWdlIiwib2xkVmFsdWUiLCJzZXRJdGVtIiwiZXhwb3J0QXNKc29uIiwiY2hpbGRJZHMiLCJqc29uIiwiaW1wb3J0RnJvbUpzb24iLCJvcHRfb25Db21wbGV0ZSIsInBlbmRpbmdXcml0ZXMiLCJvbldyaXRlU3RvcmFnZSIsImNoaWxkUHJlZk1hbmFnZXIiLCJsYXN0SW5kZXhPZiIsInJlc291cmNlIiwicmVzb3VyY2VzXyIsIm9wdF9kZWZhdWx0VmFsdWUiLCJnZXREYXRhIiwiZ2V0RGF0YVVybCIsIlN0b3JhZ2UiLCJDaHJvbWUiLCJzdG9yYWdlXyIsIm9ic2VydmVyc18iLCJvbkNoYW5nZWQiLCJhZGRMaXN0ZW5lciIsIm9uQ2hhbmdlZF8iLCJjaGFuZ2VzIiwiYXJlYW5hbWUiLCJnZXRJdGVtIiwic2V0SXRlbXMiLCJyZW1vdmUiLCJMb2NhbCIsImxvY2FsU3RvcmFnZSIsIm9uU3RvcmFnZV8iLCJzdG9yYWdlQXJlYSIsInByZXZWYWx1ZSIsImN1clZhbHVlIiwiTWVtb3J5IiwiVGVzdE1hbmFnZXIiLCJvcHRfbG9nIiwiTG9nIiwiY3JlYXRlVGVzdFJ1biIsIm9wdF9jeCIsIlRlc3RSdW4iLCJvblRlc3RSdW5Db21wbGV0ZSIsInRlc3RSdW4iLCJ0ZXN0UHJlYW1ibGUiLCJjeCIsInRlc3RQb3N0YW1ibGUiLCJvcHRfY29uc29sZSIsInNhdmUiLCJwcmVmaXhfIiwicHJlZml4U3RhY2tfIiwiY29uc29sZV8iLCJsZXZlbCIsIm1zZ1ByZWZpeCIsIm9Mb2ciLCJncm91cCIsIm9Hcm91cCIsImxhYmVsIiwib0dyb3VwRW5kIiwiZ3JvdXBFbmQiLCJTdWl0ZSIsInN1aXRlTmFtZSIsImN0b3IiLCJ0ZXN0TWFuYWdlciIsInRlc3RNYW5hZ2VyXyIsInNldHVwIiwiYWRkVGVzdCIsImRpc2FibGVUZXN0IiwiZ2V0VGVzdCIsImdldFRlc3RMaXN0IiwidGVzdExpc3RfIiwidGVzdE1hcF8iLCJzdWJjbGFzc2VzIiwidGVzdE5hbWUiLCJ0ZXN0RnVuY3Rpb24iLCJUZXN0IiwiZnVsbE5hbWUiLCJzZXREZWZhdWx0cyIsInByZWFtYmxlIiwicG9zdGFtYmxlIiwic3VpdGVDbGFzcyIsInRlc3RGdW5jdGlvbl8iLCJydW4iLCJzdWl0ZSIsIlJlc3VsdCIsIlRlc3RDb21wbGV0ZSIsInByaW50bG4iLCJjb21wbGV0ZVRlc3RfIiwiRkFJTEVEIiwiZmFpbHVyZXMiLCJwYXNzZXMiLCJzdGFydERhdGUiLCJkdXJhdGlvbiIsImN1cnJlbnRSZXN1bHQiLCJtYXhGYWlsdXJlcyIsInBhbmljIiwidGVzdFF1ZXVlXyIsIkFMTF9URVNUUyIsInNlbGVjdFRlc3QiLCJzZWxlY3RTdWl0ZSIsIm9wdF9wYXR0ZXJuIiwic2VsZWN0Q291bnQiLCJ0ZXN0TGlzdCIsInNlbGVjdFBhdHRlcm4iLCJvblVuY2F1Z2h0RXhjZXB0aW9uXyIsImZpbGUiLCJsaW5lIiwiZXhwZWN0ZWRFcnJvck1lc3NhZ2VfIiwid2hlbiIsInN0YXR1cyIsIlBFTkRJTkciLCJvblRlc3RSdW5Db21wbGV0ZV8iLCJvcHRfc2tpcFRpbWVvdXQiLCJtc1RvU2Vjb25kc18iLCJzdW1tYXJpemUiLCJvblJlc3VsdENvbXBsZXRlIiwiY3R4IiwiUEFTU0VEIiwiY3VycmVudFN1aXRlIiwicnVuTmV4dFRlc3RfIiwib25SZXN1bHRSZUNvbXBsZXRlIiwibGF0ZVN0YXR1cyIsInRvRml4ZWQiLCJ0aW1lb3V0XyIsImV4cGVjdEVycm9yTWVzc2FnZSIsIm9uVGltZW91dF8iLCJyZXF1ZXN0VGltZSIsIm9wdF90aHJvdyIsImFzc2VydEVRIiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJvcHRfbmFtZSIsImZhaWwiLCJnZXRDYWxsZXJMb2NhdGlvbl8iLCJhc3NlcnQiLCJmcmFtZUluZGV4Iiwib3B0X21lc3NhZ2UiLCJwYXNzIiwiVVRGOERlY29kZXIiLCJieXRlc0xlZnQiLCJjb2RlUG9pbnQiLCJsb3dlckJvdW5kIiwiZGVjb2RlIiwicmV0IiwiZGVjb2RlVVRGOCIsInV0ZjgiLCJlbmNvZGVVVEY4IiwibnVsV2lkdGgiLCJjb250cm9sV2lkdGgiLCJyZWdhcmRDamtBbWJpZ3VvdXMiLCJjamtBbWJpZ3VvdXNXaWR0aCIsImNvbWJpbmluZyIsImFtYmlndW91cyIsInVuYW1iaWd1b3VzIiwiYmluYXJ5VGFibGVTZWFyY2hfIiwidWNzIiwidGFibGUiLCJtaWQiLCJpc1NwYWNlIiwiaXNDamtBbWJpZ3VvdXMiLCJjaGFyV2lkdGgiLCJjaGFyV2lkdGhSZWdhcmRBbWJpZ3VvdXMiLCJjaGFyV2lkdGhEaXNyZWdhcmRBbWJpZ3VvdXMiLCJjb2RlUG9pbnRBdCIsIm9wdF93aWR0aCIsImVuZEluZGV4Iiwic3RhcnRJbmRleCIsImh0ZXJtIiwicmVnaXN0ZXJJbml0IiwiaW5pdE9zIiwiaW5pdE1lc3NhZ2VNYW5hZ2VyIiwibWVzc2FnZU1hbmFnZXIiLCJjYXRjaCIsIm9uV2luZG93Iiwid2luZG93VHlwZSIsImRlZmF1bHRTdG9yYWdlIiwic3luYyIsImlzUGFja2FnZWRBcHAiLCJnZXRNYW5pZmVzdCIsIm1hbmlmZXN0IiwiYXBwIiwiYmFja2dyb3VuZCIsInRhYnMiLCJnZXRDdXJyZW50IiwidGFiIiwid2luZG93cyIsIndpbmRvd0lkIiwiZ2V0Q2xpZW50U2l6ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImdldENsaWVudFdpZHRoIiwiZ2V0Q2xpZW50SGVpZ2h0IiwiY29weVNlbGVjdGlvblRvQ2xpcGJvYXJkIiwiZXhlY0NvbW1hbmQiLCJmaXJlZm94RXhjZXB0aW9uIiwicGFzdGVGcm9tQ2xpcGJvYXJkIiwic3RyaW5nIiwibm90aWZ5IiwicGFyYW1zIiwiY3VyciIsImljb24iLCJ0aXRsZSIsImRlc2t0b3BOb3RpZmljYXRpb25UaXRsZSIsIk5vdGlmaWNhdGlvbiIsImNsb3NlIiwib3BlblVybCIsIm9wZW5UYWIiLCJTaXplIiwicmVzaXplIiwiY2xvbmUiLCJzZXRUbyIsInRoYXQiLCJlcXVhbHMiLCJSb3dDb2wiLCJvcHRfb3ZlcmZsb3ciLCJvdmVyZmxvdyIsIm1vdmUiLCJBY2Nlc3NpYmlsaXR5UmVhZGVyIiwiZGl2IiwiZG9jdW1lbnRfIiwibGl2ZVJlZ2lvbiIsImNzc1RleHQiLCJhY2Nlc3NpYmlsaXR5RW5hYmxlZCIsImxpdmVFbGVtZW50XyIsImFzc2VydGl2ZUxpdmVFbGVtZW50XyIsInF1ZXVlXyIsIm5leHRSZWFkVGltZXJfIiwiY3Vyc29ySXNDaGFuZ2luZ18iLCJjdXJzb3JDaGFuZ2VRdWV1ZV8iLCJsYXN0Q3Vyc29yUm93U3RyaW5nXyIsImxhc3RDdXJzb3JSb3dfIiwibGFzdEN1cnNvckNvbHVtbl8iLCJoYXNVc2VyR2VzdHVyZSIsIkRFTEFZIiwic2V0QWNjZXNzaWJpbGl0eUVuYWJsZWQiLCJlbmFibGVkIiwiZGVjb3JhdGUiLCJoYW5kbGVyIiwiYmVmb3JlQ3Vyc29yQ2hhbmdlIiwiY3Vyc29yUm93U3RyaW5nIiwiY3Vyc29yUm93IiwiY3Vyc29yQ29sdW1uIiwiYWZ0ZXJDdXJzb3JDaGFuZ2UiLCJhbm5vdW5jZUFjdGlvbl8iLCJhbm5vdW5jZSIsInBhZGRpbmciLCJhZGRUb0xpdmVSZWdpb25fIiwiYXNzZXJ0aXZlQW5ub3VuY2UiLCJuZXdMaW5lIiwiYWJzIiwiY3Vyc29yRGVsZXRlZCIsImxlbmd0aE9mQ3VycmVudFJvdyIsIm51bUNoYXJzRGVsZXRlZCIsImxlbmd0aE9mRW5kT2ZTdHJpbmciLCJkZWxldGVkIiwiQ29udGV4dE1lbnUiLCJlbGVtZW50XyIsIm1lbnVfIiwiU0VQQVJBVE9SIiwic2V0RG9jdW1lbnQiLCJyZWdlbmVyYXRlXyIsImhpZGUiLCJjbGFzc05hbWUiLCJpbm5lclRleHQiLCJzaG93IiwiZ2V0Rm9yZWdyb3VuZENvbG9yIiwiZm9udFNpemUiLCJnZXRGb250U2l6ZSIsImZvbnRGYW1pbHkiLCJnZXRGb250RmFtaWx5IiwiZG9jU2l6ZSIsImRpc3BsYXkiLCJlbGVTaXplIiwibWluWSIsIm1pblgiLCJGcmFtZSIsIm9wdF9vcHRpb25zIiwidGVybWluYWxfIiwiZGl2XyIsImlmcmFtZV8iLCJjb250YWluZXJfIiwibWVzc2FnZUNoYW5uZWxfIiwib25NZXNzYWdlXyIsInNlbmRUZXJtaW5hbEluZm9fIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJvbk1lc3NhZ2UiLCJvbkxvYWQiLCJvbkxvYWRfIiwiTWVzc2FnZUNoYW5uZWwiLCJjb250ZW50V2luZG93IiwiYXJndiIsIm1lc3NhZ2VQb3J0IiwicG9ydDIiLCJhY2NlcHRMYW5ndWFnZXMiLCJmb3JlZ3JvdW5kQ29sb3IiLCJjdXJzb3JDb2xvciIsImJhc2VVUkwiLCJvbkNsb3NlQ2xpY2tlZF8iLCJvbkNsb3NlIiwic2VsZiIsIm9wdCIsImRpdlNpemUiLCJjb250YWluZXIiLCJpZnJhbWUiLCJLZXlib2FyZCIsImtleWJvYXJkRWxlbWVudF8iLCJoYW5kbGVyc18iLCJvbkZvY3VzT3V0XyIsIm9uS2V5RG93bl8iLCJvbktleVByZXNzXyIsIm9uS2V5VXBfIiwib25UZXh0SW5wdXRfIiwiYmluZGluZ3MiLCJhbHRHck1vZGUiLCJzaGlmdEluc2VydFBhc3RlIiwiaG9tZUtleXNTY3JvbGwiLCJwYWdlS2V5c1Njcm9sbCIsImN0cmxQbHVzTWludXNaZXJvWm9vbSIsImN0cmxDQ29weSIsImN0cmxWUGFzdGUiLCJhcHBsaWNhdGlvbktleXBhZCIsImFwcGxpY2F0aW9uQ3Vyc29yIiwiYmFja3NwYWNlU2VuZHNCYWNrc3BhY2UiLCJjaGFyYWN0ZXJFbmNvZGluZyIsIm1ldGFTZW5kc0VzY2FwZSIsInBhc3NNZXRhViIsImFsdFNlbmRzV2hhdCIsImFsdElzTWV0YSIsImFsdEJhY2tzcGFjZUlzTWV0YUJhY2tzcGFjZSIsImFsdEtleVByZXNzZWQiLCJtZWRpYUtleXNBcmVGS2V5cyIsInByZXZpb3VzQWx0U2VuZHNXaGF0XyIsIktleUFjdGlvbnMiLCJlbmNvZGUiLCJ2dCIsImluc3RhbGxLZXlib2FyZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1bmluc3RhbGxLZXlib2FyZCIsIm9uVlRLZXlzdHJva2UiLCJwcmV2ZW50Q2hyb21lQXBwTm9uQ3RybFNoaWZ0RGVmYXVsdF8iLCJrZXlEZWZzIiwiaXNQcmludGFibGUiLCJtYXNrU2hpZnRLZXkiLCJnZXRCaW5kaW5nIiwiYmluZGluZ3NfIiwiYWRkQmluZGluZ18iLCJrZXlQYXR0ZXJuIiwibGlzdCIsIm1hdGNoS2V5UGF0dGVybiIsIktleVBhdHRlcm4iLCJzb3J0Q29tcGFyZSIsImFkZEJpbmRpbmciLCJzZXF1ZW5jZSIsIlBhcnNlciIsInBhcnNlS2V5U2VxdWVuY2UiLCJpc0NvbXBsZXRlIiwicGFyc2VLZXlBY3Rpb24iLCJhZGRCaW5kaW5ncyIsIm1hdGNoS2V5RG93biIsImFkZEtleURlZnMiLCJtZWQiLCJrZXljYXBTQyIsImtleWNhcEVQIiwia2V5Y2FwTVUiLCJvbktleUluc2VydF8iLCJvbktleUhvbWVfIiwiYWx0ZXkiLCJzY3JvbGxIb21lIiwib25LZXlFbmRfIiwic2Nyb2xsRW5kIiwib25LZXlQYWdlVXBfIiwic2Nyb2xsUGFnZVVwIiwib25LZXlEZWxfIiwib25LZXlQYWdlRG93bl8iLCJzY3JvbGxQYWdlRG93biIsIm9uS2V5QXJyb3dVcF8iLCJzY3JvbGxMaW5lVXAiLCJvbktleUFycm93RG93bl8iLCJzY3JvbGxMaW5lRG93biIsIm9uQ2xlYXJfIiwid2lwZUNvbnRlbnRzIiwib25GMTFfIiwib25DdHJsTnVtXyIsInBhc3NDdHJsTnVtYmVyIiwib25BbHROdW1fIiwicGFzc0FsdE51bWJlciIsIm9uTWV0YU51bV8iLCJwYXNzTWV0YU51bWJlciIsIm9uQ3RybENfIiwic2VsZWN0aW9uIiwiZ2V0RG9jdW1lbnQiLCJpc0NvbGxhcHNlZCIsImNsZWFyU2VsZWN0aW9uQWZ0ZXJDb3B5IiwiY29sbGFwc2VUb0VuZCIsIm9uQ3RybE5fIiwiaHJlZiIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIm9uQ3RybFZfIiwicGFzdGUiLCJvbk1ldGFOXyIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsIm9uTWV0YUNfIiwib25NZXRhVl8iLCJvblBsdXNNaW51c1plcm9fIiwiZ2V0Wm9vbUZhY3RvciIsImNhcCIsInNldEZvbnRTaXplIiwic3BlYyIsIndpbGRjYXJkQ291bnQiLCJtYXRjaF8iLCJleGFjdE1hdGNoIiwibW9kVmFsdWUiLCJPcHRpb25zIiwib3B0X2NvcHkiLCJ3cmFwYXJvdW5kIiwicmV2ZXJzZVdyYXBhcm91bmQiLCJvcmlnaW5Nb2RlIiwiYXV0b0NhcnJpYWdlUmV0dXJuIiwiY3Vyc29yVmlzaWJsZSIsImN1cnNvckJsaW5rIiwiaW5zZXJ0TW9kZSIsInJldmVyc2VWaWRlbyIsImJyYWNrZXRlZFBhc3RlIiwib3B0X3BvcyIsImlkZW50aWZpZXJzIiwibW9kaWZpZXJLZXlzIiwic2tpcFNwYWNlIiwidG9rZW4iLCJwYXJzZVRva2VuIiwidWNWYWx1ZSIsImtleUNvZGVzIiwiYWR2YW5jZSIsImFjdGlvbnMiLCJwZWVrU3RyaW5nIiwicGVla0lkZW50aWZpZXIiLCJwZWVrSW50ZWdlciIsInBhcnNlSWRlbnRpZmllciIsInBhcnNlU3RyaW5nIiwicGFyc2VJbnRlZ2VyIiwicGFyc2VQYXR0ZXJuIiwicXVvdGUiLCJsYXN0SW5kZXgiLCJleGVjIiwicGFyc2VFc2NhcGUiLCJvcHRfZXhwZWN0IiwiU0hJRlQiLCJDVFJMIiwiQ09OVFJPTCIsIkFMVCIsIk1FVEEiLCJFU0NBUEUiLCJGMSIsIkYyIiwiRjMiLCJGNCIsIkY1IiwiRjYiLCJGNyIsIkY4IiwiRjkiLCJGMTAiLCJGMTEiLCJGMTIiLCJPTkUiLCJUV08iLCJUSFJFRSIsIkZPVVIiLCJGSVZFIiwiU0lYIiwiU0VWRU4iLCJFSUdIVCIsIk5JTkUiLCJaRVJPIiwiQkFDS1NQQUNFIiwiQktTUCIsIkJTIiwiVEFCIiwiQ0FQU19MT0NLIiwiQ0FQU0xPQ0siLCJDQVBTIiwiRU5URVIiLCJFTlQiLCJSRVRVUk4iLCJSRVQiLCJTUEFDRSIsIlNQIiwiUFJJTlRfU0NSRUVOIiwiUFJUU0MiLCJTQ1JPTExfTE9DSyIsIlNDUkxLIiwiQlJFQUsiLCJCUksiLCJJTlNFUlQiLCJJTlMiLCJIT01FIiwiUEFHRV9VUCIsIlBHVVAiLCJERUxFVEUiLCJFTkQiLCJQQUdFX0RPV04iLCJQR0RPV04iLCJQR0ROIiwiVVAiLCJET1dOIiwiUklHSFQiLCJMRUZUIiwiTlVNTE9DSyIsIktQMCIsIktQMSIsIktQMiIsIktQMyIsIktQNCIsIktQNSIsIktQNiIsIktQNyIsIktQOCIsIktQOSIsIktQX1BMVVMiLCJLUF9BREQiLCJLUF9NSU5VUyIsIktQX1NVQlRSQUNUIiwiS1BfU1RBUiIsIktQX01VTFRJUExZIiwiS1BfRElWSURFIiwiS1BfREVDSU1BTCIsIktQX1BFUklPRCIsIk5BVklHQVRFX0JBQ0siLCJOQVZJR0FURV9GT1JXQVJEIiwiUkVMT0FEIiwiRlVMTF9TQ1JFRU4iLCJXSU5ET1dfT1ZFUlZJRVciLCJCUklHSFRORVNTX1VQIiwiQlJJR0hUTkVTU19ET1dOIiwic2Nyb2xsVG9Ub3AiLCJzY3JvbGxUb0JvdHRvbSIsImNsZWFyU2NyZWVuIiwiY2xlYXJIb21lIiwiY2xlYXJTY3JvbGxiYWNrIiwiY2xlYXJUZXJtaW5hbCIsImZ1bGxSZXNldCIsInNvZnRSZXNldCIsInByb2ZpbGVJZCIsImRlZmF1bHRQcmVmZXJlbmNlcyIsImVudHJ5IiwibGlzdFByb2ZpbGVzIiwicHJvZmlsZXMiLCJjYXRlZ29yaWVzIiwiQXBwZWFyYW5jZSIsIkNvcHlQYXN0ZSIsIlNvdW5kcyIsIlNjcm9sbGluZyIsIkVuY29kaW5nIiwiRXh0ZW5zaW9ucyIsIk1pc2NlbGxhbmVvdXMiLCJjYXRlZ29yeURlZmluaXRpb25zIiwiZGVmaW5lUHJlZl8iLCJjYXRlZ29yeSIsImhlbHAiLCJlbnZpcm9ubWVudCIsIk5DVVJTRVNfTk9fVVRGOF9BQ1MiLCJURVJNIiwiQ09MT1JURVJNIiwia2V5YmluZGluZ3MiLCJQdWJTdWIiLCJhZGRCZWhhdmlvciIsInB1YnN1YiIsInN1YnNjcmliZSIsInN1YmplY3QiLCJ1bnN1YnNjcmliZSIsInB1Ymxpc2giLCJvcHRfbGFzdENhbGxiYWNrIiwibm90aWZ5TGlzdCIsIlNjcmVlbiIsIm9wdF9jb2x1bW5Db3VudCIsInJvd3NBcnJheSIsImNvbHVtbkNvdW50XyIsInRleHRBdHRyaWJ1dGVzIiwiVGV4dEF0dHJpYnV0ZXMiLCJjdXJzb3JTdGF0ZV8iLCJDdXJzb3JTdGF0ZSIsImN1cnNvclJvd05vZGVfIiwiY3Vyc29yTm9kZV8iLCJjdXJzb3JPZmZzZXRfIiwid29yZEJyZWFrTWF0Y2hMZWZ0Iiwid29yZEJyZWFrTWF0Y2hSaWdodCIsIndvcmRCcmVha01hdGNoTWlkZGxlIiwiZ2V0U2l6ZSIsImdldEhlaWdodCIsImdldFdpZHRoIiwic2V0Q29sdW1uQ291bnQiLCJzZXRDdXJzb3JQb3NpdGlvbiIsInNoaWZ0Um93Iiwic2hpZnRSb3dzIiwidW5zaGlmdFJvdyIsInVuc2hpZnRSb3dzIiwicm93cyIsInBvcFJvdyIsInBvcFJvd3MiLCJwdXNoUm93IiwicHVzaFJvd3MiLCJpbnNlcnRSb3ciLCJpbnNlcnRSb3dzIiwicmVtb3ZlUm93IiwicmVtb3ZlUm93cyIsImludmFsaWRhdGVDdXJzb3JQb3NpdGlvbiIsImNsZWFyQ3Vyc29yUm93IiwiaXNEZWZhdWx0IiwiaW52ZXJzZSIsInN5bmNDb2xvcnMiLCJjcmVhdGVDb250YWluZXIiLCJjb21taXRMaW5lT3ZlcmZsb3ciLCJyb3dOb2RlIiwiY3VycmVudENvbHVtbiIsIm5vZGVXaWR0aCIsInN5bmNTZWxlY3Rpb25DYXJldCIsImZpcmVmb3hJZ25vcmVkRXhjZXB0aW9uIiwic3BsaXROb2RlXyIsImFmdGVyTm9kZSIsImNsb25lTm9kZSIsIm5vZGVTdWJzdHIiLCJtYXliZUNsaXBDdXJyZW50Um93IiwiaW5zZXJ0U3RyaW5nIiwid2N3aWR0aCIsImN1cnNvck5vZGUiLCJjdXJzb3JOb2RlVGV4dCIsInJldmVyc2VPZmZzZXQiLCJ3cyIsInVuZGVybGluZSIsInN0cmlrZXRocm91Z2giLCJ3Y05vZGUiLCJhc2NpaU5vZGUiLCJ0aWxlRGF0YSIsIlRFWFRfTk9ERSIsInRpbGVOb2RlIiwidGV4dERlY29yYXRpb24iLCJ0ZXh0RGVjb3JhdGlvblN0eWxlIiwidGV4dERlY29yYXRpb25MaW5lIiwid3NOb2RlIiwibWF0Y2hlc0NvbnRhaW5lciIsInByZXZpb3VzU2libGluZyIsIm5ld05vZGUiLCJvdmVyd3JpdGVTdHJpbmciLCJtYXhMZW5ndGgiLCJkZWxldGVDaGFycyIsImN1cnJlbnRDdXJzb3JDb2x1bW4iLCJzdGFydExlbmd0aCIsImVuZExlbmd0aCIsInNwYWNlTm9kZSIsIm5leHROb2RlIiwiZW1wdHlOb2RlIiwiZ2V0TGluZVN0YXJ0Um93XyIsImdldExpbmVUZXh0XyIsInJvd1RleHQiLCJnZXRYUm93QW5jZXN0b3JfIiwiZ2V0UG9zaXRpb25XaXRoT3ZlcmZsb3dfIiwiYW5jZXN0b3JSb3ciLCJnZXRQb3NpdGlvbldpdGhpblJvd18iLCJjaGlsZE5vZGVzIiwiY3VycmVudE5vZGUiLCJnZXROb2RlQW5kT2Zmc2V0V2l0aE92ZXJmbG93XyIsImdldE5vZGVBbmRPZmZzZXRXaXRoaW5Sb3dfIiwibm9kZVRleHRXaWR0aCIsInNldFJhbmdlXyIsInN0YXJ0Tm9kZUFuZE9mZnNldCIsImVuZE5vZGVBbmRPZmZzZXQiLCJleHBhbmRTZWxlY3Rpb25XaXRoV29yZEJyZWFrTWF0Y2hlc18iLCJsZWZ0TWF0Y2giLCJyaWdodE1hdGNoIiwiaW5zaWRlTWF0Y2giLCJnZXRSYW5nZUF0Iiwicm93RWxlbWVudCIsInN0YXJ0Q29udGFpbmVyIiwic3RhcnRQb3NpdGlvbiIsInN0YXJ0T2Zmc2V0IiwiZW5kUG9zaXRpb24iLCJlbmRDb250YWluZXIiLCJlbmRPZmZzZXQiLCJsaW5lVXBUb1JhbmdlIiwibGVmdFJlZ3VsYXJFeHByZXNzaW9uIiwiZXhwYW5kZWRTdGFydCIsImxpbmVGcm9tUmFuZ2UiLCJyaWdodFJlZ3VsYXJFeHByZXNzaW9uIiwiZm91bmQiLCJleHBhbmRlZEVuZCIsImV4cGFuZFNlbGVjdGlvbiIsImV4cGFuZFNlbGVjdGlvbkZvclVybCIsInNhdmVDdXJzb3JBbmRTdGF0ZSIsInJlc3RvcmVDdXJzb3JBbmRTdGF0ZSIsInJlc3RvcmUiLCJHTCIsIkdSIiwiRzAiLCJHMSIsIkcyIiwiRzMiLCJzYXZlQ3Vyc29yIiwicmVzdG9yZUN1cnNvciIsInRhdHRycyIsIlNjcm9sbFBvcnQiLCJyb3dQcm92aWRlciIsInJvd1Byb3ZpZGVyXyIsImNoYXJhY3RlclNpemUiLCJydWxlcl8iLCJTZWxlY3Rpb24iLCJjdXJyZW50Um93Tm9kZUNhY2hlXyIsInByZXZpb3VzUm93Tm9kZUNhY2hlXyIsImxhc3RTY3JlZW5XaWR0aF8iLCJsYXN0U2NyZWVuSGVpZ2h0XyIsInNlbGVjdGlvbkVuYWJsZWRfIiwibGFzdFJvd0NvdW50XyIsInNjcm9sbFdoZWVsTXVsdGlwbGllcl8iLCJsYXN0VG91Y2hfIiwiaXNTY3JvbGxlZEVuZCIsImN1cnJlbnRTY3JvbGxiYXJXaWR0aFB4IiwicGFzdGVPbkRyb3AiLCJ0aW1lb3V0c18iLCJERUJVR18iLCJzdGFydFJvdyIsImVuZFJvdyIsImlzTXVsdGlsaW5lIiwiZmluZEZpcnN0Q2hpbGQiLCJwYXJlbnQiLCJjaGlsZEFyeSIsImFuY2hvckZpcnN0IiwiYW5jaG9yUm93Iiwic3RhcnROb2RlIiwiZm9jdXNSb3ciLCJlbmROb2RlIiwiZm9jdXNGaXJzdCIsImFjY2Vzc2liaWxpdHlSZWFkZXJfIiwicm93SW5kZXgiLCJmaXJzdE5vZGUiLCJvblJlc2l6ZV8iLCJjb250ZW50RG9jdW1lbnQiLCJtZXRhQ2hhcnNldCIsImhlYWQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsInVzZXJDc3NMaW5rXyIsInVzZXJDc3NUZXh0XyIsIm9uU2Nyb2xsXyIsIm9uU2Nyb2xsV2hlZWxfIiwib25Ub3VjaF8iLCJvbkNvcHlfIiwib25QYXN0ZV8iLCJvbkRyYWdBbmREcm9wXyIsIm9uQm9keUtleURvd25fIiwic2Nyb2xsQnV0dG9uU3R5bGUiLCJzY3JvbGxVcEJ1dHRvbl8iLCJzY3JvbGxEb3duQnV0dG9uXyIsImFsbG93U2Nyb2xsQnV0dG9uc1RvRGlzcGxheV8iLCJzZWxlY3RlZEVsZW1lbnQiLCJwYXJlbnRFbGVtZW50Iiwicm93Tm9kZXNfIiwidG9wU2VsZWN0QmFnXyIsImJvdHRvbVNlbGVjdEJhZ18iLCJ0b3BGb2xkXyIsImJvdHRvbUZvbGRfIiwic2Nyb2xsQXJlYV8iLCJ4bWxucyIsInN2Z18iLCJwYXN0ZVRhcmdldF8iLCJoYW5kbGVQYXN0ZVRhcmdldFRleHRJbnB1dF8iLCJzZXRBY2Nlc3NpYmlsaXR5UmVhZGVyIiwiYWNjZXNzaWJpbGl0eVJlYWRlciIsImdldFRvcFJvd0luZGV4Iiwic2Nyb2xsUm93VG9Ub3AiLCJ2aXNpYmxlUm93Q291bnQiLCJhc3NlcnRpdmVBbm5vdW5jZV8iLCJzZXRGb250RmFtaWx5Iiwib3B0X3Ntb290aGluZyIsIndlYmtpdEZvbnRTbW9vdGhpbmciLCJzeW5jQ2hhcmFjdGVyU2l6ZSIsInNldFVzZXJDc3NVcmwiLCJzZXRVc2VyQ3NzVGV4dCIsInNldEZvcmVncm91bmRDb2xvciIsInNldEJhY2tncm91bmRDb2xvciIsInNldEJhY2tncm91bmRJbWFnZSIsImltYWdlIiwiYmFja2dyb3VuZEltYWdlIiwic2V0QmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kU2l6ZSIsInNldEJhY2tncm91bmRQb3NpdGlvbiIsImJhY2tncm91bmRQb3NpdGlvbiIsInNldEN0cmxWUGFzdGUiLCJzZXRQYXN0ZU9uRHJvcCIsImdldFNjcmVlblNpemUiLCJnZXRTY3JlZW5XaWR0aCIsImdldFNjcmVlbkhlaWdodCIsImdldFNjcmVlbk5vZGUiLCJyZXNldENhY2hlIiwic2V0Um93UHJvdmlkZXIiLCJzY2hlZHVsZVJlZHJhdyIsImludmFsaWRhdGUiLCJ0b3BSb3dJbmRleCIsImJvdHRvbVJvd0luZGV4IiwiZ2V0Qm90dG9tUm93SW5kZXgiLCJkcmF3VmlzaWJsZVJvd3NfIiwic2NoZWR1bGVJbnZhbGlkYXRlIiwicHgiLCJtZWFzdXJlQ2hhcmFjdGVyU2l6ZSIsIm9wdF93ZWlnaHQiLCJydWxlclNwYW5fIiwicnVsZXJCYXNlbGluZV8iLCJydWxlclNpemUiLCJiYXNlbGluZSIsIm9mZnNldFRvcCIsInpvb21GYWN0b3IiLCJjdXJyZW50U2NhbGUiLCJjbGllbnRXaWR0aCIsInN5bmNTY3JvbGxIZWlnaHQiLCJzeW5jUm93Tm9kZXNEaW1lbnNpb25zXyIsInNjcm9sbFJvd1RvQm90dG9tIiwiZ2V0Um93Q291bnQiLCJ0b3BSb3ciLCJib3R0b21Sb3ciLCJwZXJjZW50U2Nyb2xsZWQiLCJjdXJyZW50U2NyZWVuQ29udGVudCIsImZldGNoUm93Tm9kZV8iLCJ2aXNpYmxlUm93c0hlaWdodCIsInZpc2libGVSb3dUb3BNYXJnaW4iLCJ2aXNpYmxlUm93Qm90dG9tTWFyZ2luIiwibWFyZ2luQm90dG9tIiwidG9wRm9sZE9mZnNldCIsIm9mZnNldExlZnQiLCJyZWRyYXciLCJyZWRyYXdfIiwidXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGVfIiwic2V0QnV0dG9uIiwicmVzZXRTZWxlY3RCYWdzXyIsImRyYXdUb3BGb2xkXyIsImRyYXdCb3R0b21Gb2xkXyIsInJlbW92ZVVudGlsTm9kZSIsInRhcmdldE5vZGUiLCJkZWFkTm9kZSIsInNlbGVjdGlvblN0YXJ0Um93Iiwic2VsZWN0aW9uRW5kUm93IiwiYm90dG9tRm9sZCIsInRhcmdldERyYXdDb3VudCIsImRyYXdDb3VudCIsImNhY2hlUm93Tm9kZV8iLCJnZXRSb3dOb2RlIiwic2VsZWN0QWxsIiwiZmlyc3RSb3ciLCJsYXN0Um93IiwibGFzdFJvd0luZGV4IiwiZ2V0U2Nyb2xsTWF4XyIsInNjcm9sbE1heCIsIm9uU2Nyb2xsV2hlZWwiLCJkZWx0YSIsInNjcm9sbFdoZWVsRGVsdGEiLCJXaGVlbEV2ZW50IiwiRE9NX0RFTFRBX1BJWEVMIiwiRE9NX0RFTFRBX0xJTkUiLCJET01fREVMVEFfUEFHRSIsIm9uVG91Y2giLCJ0b3VjaCIsInNjcnViVG91Y2giLCJpZGVudGlmaWVyIiwib25Db3B5IiwiZW5kQmFja2ZpbGxJbmRleCIsInN0YXJ0QmFja2ZpbGxJbmRleCIsImdldFJvd3NUZXh0IiwidHlwZXMiLCJzZXRTY3JvbGxiYXJWaXNpYmxlIiwib3ZlcmZsb3dZIiwic2V0U2Nyb2xsV2hlZWxNb3ZlTXVsdGlwbGVyIiwibXVsdGlwbGllciIsIlRlcm1pbmFsIiwib3B0X3Byb2ZpbGVJZCIsInByb2ZpbGVJZF8iLCJwcmltYXJ5U2NyZWVuXyIsImFsdGVybmF0ZVNjcmVlbl8iLCJvblNjcm9sbHBvcnRGb2N1c18iLCJzY3JvbGxiYWNrUm93c18iLCJ0YWJTdG9wc18iLCJkZWZhdWx0VGFiU3RvcHMiLCJ2dFNjcm9sbFRvcF8iLCJ2dFNjcm9sbEJvdHRvbV8iLCJjdXJzb3JTaGFwZV8iLCJjdXJzb3JTaGFwZSIsIkJMT0NLIiwiY3Vyc29yQmxpbmtDeWNsZV8iLCJteU9uQ3Vyc29yQmxpbmtfIiwib25DdXJzb3JCbGlua18iLCJiYWNrZ3JvdW5kQ29sb3JfIiwiZm9yZWdyb3VuZENvbG9yXyIsInNjcm9sbE9uT3V0cHV0XyIsInNjcm9sbE9uS2V5c3Ryb2tlXyIsInNjcm9sbFdoZWVsQXJyb3dLZXlzXyIsImRlZmVhdE1vdXNlUmVwb3J0c18iLCJzZXRBdXRvbWF0aWNNb3VzZUhpZGluZyIsIm1vdXNlSGlkZURlbGF5XyIsImJlbGxBdWRpb18iLCJjb250ZXh0TWVudSIsImJlbGxOb3RpZmljYXRpb25MaXN0XyIsImRlc2t0b3BOb3RpZmljYXRpb25CZWxsXyIsInNhdmVkT3B0aW9uc18iLCJvcHRpb25zXyIsIlZUIiwiaW8iLCJJTyIsImVuYWJsZU1vdXNlRHJhZ1Njcm9sbCIsImNvcHlPblNlbGVjdCIsIm1vdXNlUmlnaHRDbGlja1Bhc3RlIiwibW91c2VQYXN0ZUJ1dHRvbiIsInVzZURlZmF1bHRXaW5kb3dDb3B5IiwicmVhbGl6ZVNpemVfIiwic2V0RGVmYXVsdFRhYlN0b3BzIiwiYWxsb3dJbWFnZXNJbmxpbmUiLCJyZXBvcnRGb2N1cyIsInNldFByb2ZpbGUiLCJvblRlcm1pbmFsUmVhZHkiLCJCRUFNIiwiVU5ERVJMSU5FIiwidGFiV2lkdGgiLCJwcmVmc18iLCJwZXJtaXNzaW9uIiwiY2hhcmFjdGVyTWFwcyIsInNldE92ZXJyaWRlcyIsInNldEN1cnNvckJsaW5rIiwic2V0Q3Vyc29yQ29sb3IiLCJyZXNldENvbG9yUGFsZXR0ZSIsImVuYWJsZThCaXRDb250cm9sIiwic3luY0JvbGRTYWZlU3RhdGUiLCJlbmFibGVCb2xkQXNCcmlnaHQiLCJzZXRUZXh0QmxpbmsiLCJlbmFibGVDbGlwYm9hcmRXcml0ZSIsImVuYWJsZURlYzEyIiwiZW5hYmxlQ3NpSjMiLCJzeW5jRm9udEZhbWlseSIsInN5bmNNb3VzZVBhc3RlQnV0dG9uIiwic2V0RW5jb2RpbmciLCJnZXRQcmVmcyIsInNldEJyYWNrZXRlZFBhc3RlIiwic2V0Q3NzVmFyIiwiZ2V0Q3NzVmFyIiwic2V0U2VsZWN0aW9uRW5hYmxlZCIsInJ1bkNvbW1hbmRDbGFzcyIsImNvbW1hbmRDbGFzcyIsImFyZ1N0cmluZyIsIm9uRXhpdCIsImlzUHJpbWFyeVNjcmVlbiIsImdldFByb3BlcnR5VmFsdWUiLCJlbmFibGVCb2xkIiwibm9ybWFsU2l6ZSIsImJvbGRTaXplIiwiaXNCb2xkU2FmZSIsInN5bmNNb3VzZVN0eWxlIiwibW91c2VSZXBvcnQiLCJNT1VTRV9SRVBPUlRfRElTQUJMRUQiLCJnZXRUZXh0QXR0cmlidXRlcyIsInNldFRleHRBdHRyaWJ1dGVzIiwic2V0V2luZG93VGl0bGUiLCJjbGVhckN1cnNvck92ZXJmbG93IiwiYm90aCIsInNldEN1cnNvclNoYXBlIiwic2hhcGUiLCJyZXN0eWxlQ3Vyc29yXyIsImdldEN1cnNvclNoYXBlIiwic2V0V2lkdGgiLCJzY2hlZHVsZVN5bmNDdXJzb3JQb3NpdGlvbl8iLCJzZXRIZWlnaHQiLCJyb3dDb3VudCIsInJlYWxpemVXaWR0aF8iLCJyZWFsaXplSGVpZ2h0XyIsIm9uVGVybWluYWxSZXNpemVfIiwiZGVsdGFDb2x1bW5zIiwiZGVsdGFSb3dzIiwiZ2V0Um93VGV4dCIsInNjcm9sbGJhY2tDb3VudCIsImFwcGVuZFJvd3NfIiwic2V0VlRTY3JvbGxSZWdpb24iLCJyZW51bWJlclJvd3NfIiwic3luY0N1cnNvclBvc2l0aW9uXyIsImNsZWFyQWxsVGFiU3RvcHMiLCJyZXNldFNjcmVlbiIsInNldEN1cnNvclZpc2libGUiLCJmb3J3YXJkVGFiU3RvcCIsInNldEN1cnNvckNvbHVtbiIsImJhY2t3YXJkVGFiU3RvcCIsInNldFRhYlN0b3AiLCJjbGVhclRhYlN0b3BBdEN1cnNvciIsIm9wdF9zdGFydCIsImludGVycHJldCIsImNoYXJzZXQiLCJjaGFyYWN0ZXJTZXQiLCJvbmNvbnRleHRtZW51Iiwib25Nb3VzZSIsIm9uTW91c2VfIiwic2NyZWVuTm9kZSIsIm9uS2V5Ym9hcmRBY3Rpdml0eV8iLCJvbkZvY3VzQ2hhbmdlXyIsInNjcm9sbEJsb2NrZXJOb2RlXyIsInNldFJldmVyc2VWaWRlbyIsInNjcmVlbkluZGV4IiwiZXh0cmFSb3dzIiwic2NoZWR1bGVTY3JvbGxEb3duXyIsInNldEFic29sdXRlQ3Vyc29yUG9zaXRpb24iLCJtb3ZlUm93c18iLCJmcm9tSW5kZXgiLCJ0b0luZGV4Iiwib3B0X3NjcmVlbiIsInByaW50IiwiZGlkT3ZlcmZsb3ciLCJ0b2tlbnMiLCJzcGxpdFdpZGVjaGFyU3RyaW5nIiwid2NTdHJXaWR0aCIsInNjcm9sbEJvdHRvbSIsImdldFZUU2Nyb2xsVG9wIiwiZ2V0VlRTY3JvbGxCb3R0b20iLCJkdWVUb092ZXJmbG93IiwiY3Vyc29yQXRFbmRPZlNjcmVlbiIsInZ0U2Nyb2xsVXAiLCJsaW5lRmVlZCIsImZvcm1GZWVkIiwicmV2ZXJzZUxpbmVGZWVkIiwiY3VycmVudFJvdyIsImluc2VydExpbmVzIiwic2V0QWJzb2x1dGVDdXJzb3JSb3ciLCJlcmFzZVRvTGVmdCIsImVyYXNlVG9SaWdodCIsIm9wdF9jb3VudCIsIm1heENvdW50IiwiREVGQVVMVF9DT0xPUiIsImVyYXNlTGluZSIsImVyYXNlQWJvdmUiLCJlcmFzZUJlbG93IiwiZmlsbCIsIm1vdmVDb3VudCIsImRlbGV0ZUxpbmVzIiwibW92ZVN0YXJ0IiwiaW5zZXJ0U3BhY2UiLCJ2dFNjcm9sbERvd24iLCJzZXRSZWxhdGl2ZUN1cnNvclBvc2l0aW9uIiwiZ2V0Q3Vyc29yQ29sdW1uIiwiZ2V0Q3Vyc29yUm93Iiwic2NoZWR1bGVSZWRyYXdfIiwic2Nyb2xsRG93biIsImN1cnNvclVwIiwiY3Vyc29yRG93biIsIm1pbkhlaWdodCIsIm1heEhlaWdodCIsImN1cnNvckxlZnQiLCJuZXdSb3ciLCJuZXdDb2x1bW4iLCJjdXJzb3JSaWdodCIsInJpbmdCZWxsIiwiYmVsbFNxdWVsY2hUaW1lb3V0XyIsInBsYXkiLCJiZWxsU2VxdWVsY2hUaW1lb3V0XyIsImhhc0ZvY3VzIiwiY2xvc2VCZWxsTm90aWZpY2F0aW9uc18iLCJzZXRPcmlnaW5Nb2RlIiwic2V0SW5zZXJ0TW9kZSIsInNldEF1dG9DYXJyaWFnZVJldHVybiIsInNldFdyYXBhcm91bmQiLCJzZXRSZXZlcnNlV3JhcGFyb3VuZCIsInNldEFsdGVybmF0ZU1vZGUiLCJjdXJzb3JSb3dJbmRleCIsImZvcmNlU3luY1NlbGVjdGlvbiIsImN1cnNvckNvbHVtbkluZGV4IiwiY3Vyc29yTGluZVRleHQiLCJib3JkZXJCb3R0b21TdHlsZSIsImJvcmRlckxlZnRTdHlsZSIsInN5bmNDdXJzb3IiLCJzaG93Wm9vbVdhcm5pbmdfIiwiem9vbVdhcm5pbmdOb2RlXyIsInpvb21XYXJuaW5nTWVzc2FnZSIsInNob3dPdmVybGF5Iiwib3B0X3RpbWVvdXQiLCJvdmVybGF5Tm9kZV8iLCJvdmVybGF5U2l6ZSIsIm92ZXJsYXlUaW1lb3V0XyIsImhpZGVPdmVybGF5IiwiY29weVN0cmluZ1RvQ2xpcGJvYXJkIiwibm90aWZ5Q29weU1lc3NhZ2UiLCJjb3B5U291cmNlIiwic2VsZWN0QWxsQ2hpbGRyZW4iLCJkaXNwbGF5SW1hZ2UiLCJvbkVycm9yIiwidXJpIiwic3BhbiIsImJvcmRlcldpZHRoIiwiYm9yZGVyU3R5bGUiLCJtYXJnaW5MZWZ0IiwiaW5saW5lIiwic2VuZFN0cmluZyIsIm9iamVjdEZpdCIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJtYXhXaWR0aCIsImNsaWVudEhlaWdodCIsInBhcnNlRGltIiwiZGltIiwibWF4RGltIiwiY3NzVmFyIiwicGFkUm93cyIsInRleHRBbGlnbiIsImFsaWduIiwiZG93bmxvYWQiLCJjbGljayIsImdldFNlbGVjdGlvblRleHQiLCJvcGVuU2VsZWN0ZWRVcmxfIiwibW91c2VIaWRlV2hpbGVUeXBpbmdfIiwicHJvY2Vzc2VkQnlUZXJtaW5hbEhhbmRsZXJfIiwicmVwb3J0TW91c2VFdmVudHMiLCJ0ZXJtaW5hbFJvdyIsInRlcm1pbmFsQ29sdW1uIiwiZW5nYWdlZCIsImRlbHRhVG9BcnJvd3MiLCJkaXN0YW5jZSIsImNoYXJTaXplIiwiYXJyb3dQb3MiLCJhcnJvd05lZyIsImNlbGxzIiwiZm9jdXNlZCIsImZpbHRlciIsImlzTmV3U2l6ZSIsInByZXZpb3VzSU9fIiwiYnVmZmVyZWRfIiwiY3JlYXRlRnJhbWUiLCJzZXRUZXJtaW5hbFByb2ZpbGUiLCJwcm9maWxlTmFtZSIsImtleWJvYXJkQ2FwdHVyZWRfIiwiZmx1c2giLCJvblRlcm1pbmFsUmVzaXplIiwid3JpdGVVVEY4Iiwid3JpdGVsblVURjgiLCJ3cml0ZVVURjE2Iiwid3JpdGVsblVURjE2IiwiZm9yZWdyb3VuZFNvdXJjZSIsIlNSQ19ERUZBVUxUIiwiYmFja2dyb3VuZFNvdXJjZSIsInVuZGVybGluZVNvdXJjZSIsImZvcmVncm91bmQiLCJ1bmRlcmxpbmVDb2xvciIsImRlZmF1bHRGb3JlZ3JvdW5kIiwiZGVmYXVsdEJhY2tncm91bmQiLCJib2xkIiwiZmFpbnQiLCJpdGFsaWMiLCJibGluayIsImludmlzaWJsZSIsInVyaUlkIiwicmVzZXRDb2xvciIsIm9wdF90ZXh0Q29udGVudCIsImNsYXNzZXMiLCJmb250U3R5bGUiLCJibGlua05vZGUiLCJ0ZXh0RGVjb3JhdGlvbkNvbG9yIiwiZ2V0RGVmYXVsdENvbG9yIiwiZGVmYXVsdENvbG9yIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiY29sb3JUb01ha2VGYWludCIsInN3cCIsImNvbnRhaW5lcnNNYXRjaCIsIm9iajEiLCJvYmoyIiwiY29udGFpbmVySXNEZWZhdWx0Iiwic3R5bGUxIiwic3R5bGUyIiwibm9kZVN1YnN0cmluZyIsIndjQ2hhcldpZHRoIiwiaW5jcmVtZW50Iiwib25UZXJtaW5hbE1vdXNlXyIsIm1vdXNlQ29vcmRpbmF0ZXMiLCJNT1VTRV9DT09SRElOQVRFU19YMTAiLCJsYXN0TW91c2VEcmFnUmVzcG9uc2VfIiwicGFyc2VTdGF0ZV8iLCJQYXJzZVN0YXRlIiwicGFyc2VVbmtub3duXyIsImxlYWRpbmdNb2RpZmllcl8iLCJ0cmFpbGluZ01vZGlmaWVyXyIsImFsbG93Q29sdW1uV2lkdGhDaGFuZ2VzXyIsIm9zY1RpbWVMaW1pdF8iLCJ1dGY4RGVjb2Rlcl8iLCJ3YXJuVW5pbXBsZW1lbnRlZCIsIkNoYXJhY3Rlck1hcHMiLCJnZXRNYXAiLCJjb2RpbmdTeXN0ZW1VdGY4XyIsImNvZGluZ1N5c3RlbUxvY2tlZF8iLCJjYzFQYXR0ZXJuXyIsInVwZGF0ZUVuY29kaW5nU3RhdGVfIiwiTU9VU0VfUkVQT1JUX1BSRVNTIiwiTU9VU0VfUkVQT1JUX0NMSUNLIiwiTU9VU0VfUkVQT1JUX0RSQUciLCJNT1VTRV9DT09SRElOQVRFU19VVEY4IiwiTU9VU0VfQ09PUkRJTkFURVNfU0dSIiwiZGVmYXVsdEZ1bmN0aW9uIiwib3B0X2J1ZiIsImJ1ZiIsInN1YmFyZ3MiLCJyZXNldFBhcnNlRnVuY3Rpb24iLCJyZXNldEJ1ZiIsInJlc2V0QXJndW1lbnRzIiwib3B0X2FyZ196ZXJvIiwiYXJnc3RyIiwiaWFyZyIsImFyZ251bSIsImFyZ0hhc1N1YmFyZ3MiLCJhcmdTZXRTdWJhcmdzIiwicGVla1JlbWFpbmluZ0J1ZiIsInBlZWtDaGFyIiwiY29uc3VtZUNoYXIiLCJyZXNwb25zZSIsImxpbWl0IiwiZW5jb2RpbmciLCJjYzEiLCJDQzEiLCJwYXJzZVN0YXRlIiwibmV4dENvbnRyb2wiLCJkaXNwYXRjaCIsInBhcnNlQ1NJXyIsImZpbmlzaFBhcnNpbmciLCJwYXJzZVVudGlsU3RyaW5nVGVybWluYXRvcl8iLCJidWZJbnNlcnRlZCIsIm5leHRUZXJtaW5hdG9yIiwidGVybWluYXRvciIsImZvdW5kVGVybWluYXRvciIsImFib3J0UmVhc29uIiwiaWdub3JlIiwic3VwcG9ydHNTdWJhcmdzIiwic2V0QU5TSU1vZGUiLCJzZXRERUNNb2RlIiwic2Nyb2xsT25PdXRwdXQiLCJzY3JvbGxPbktleXN0cm9rZSIsIk9TQyIsIlZUNTIiLCJwYXJzZUVTQyIsInBhcnNlT1NDIiwicGFpckNvdW50IiwicmVzcG9uc2VBcnJheSIsInBhaXJOdW1iZXIiLCJjb2xvckluZGV4IiwiY29sb3JWYWx1ZSIsImF0dHJzIiwiY29sb3JYMTEiLCJhdG9iIiwiZWxlIiwia3YiLCJxdWV1ZWQiLCJwYXJzZVNnckV4dGVuZGVkQ29sb3JzIiwidXNlZFN1YmFyZ3MiLCJza2lwQ291bnQiLCJ1YXJnIiwiQ2hhcmFjdGVyTWFwIiwiZGVzY3JpcHRpb24iLCJnbG1hcCIsImdsbWFwQmFzZV8iLCJzeW5jXyIsIm9wdF9nbG1hcCIsImdsbWFwXyIsImdscmVfIiwiZ2xjaGFycyIsIm1hcHNfIiwiRGVmYXVsdE1hcHMiLCJtYXBzQmFzZV8iLCJhZGRNYXAiLCJtYXBzIiwiXyIsIm1ldGFLZXlDb2RlUmVBbnl3aGVyZSIsIm1ldGFLZXlDb2RlUmUiLCJmdW5jdGlvbktleUNvZGVSZUFueXdoZXJlIiwiZnVuY3Rpb25LZXlDb2RlUmUiLCJlc2NhcGVDb2RlUmVBbnl3aGVyZSIsInByb2Nlc3NLZXlzIiwiX2lzTW91c2UiLCJidWZmZXIiLCJtb2RpZmllciIsIkRFRkFVTFRfT1BUSU9OUyIsImtleVN0cm9rZURlbGF5IiwibGluZ2VyRGVsYXkiLCJmYWRlRHVyYXRpb24iLCJiZXplbENvbG9yIiwidGV4dENvbG9yIiwiX2NvbnZlcnNpb25Db21tb24iLCJzcGFjZSIsImVudGVyIiwibGluZWZlZWQiLCJwYWdlZG93biIsInBhZ2V1cCIsImhvbWUiLCJiYWNrc3BhY2UiLCJpbml0aWFsaXplZCIsImN1cnJlbnRDaHVuayIsIl9vbktleSIsImtleVN0cm9rZVRpbWVvdXQiLCJwcmV2aW91c0NodW5rIiwicmVtb3ZlTm9kZSIsInF1ZXJ5U2VsZWN0b3IiLCJwb3NpdGlvbnMiLCJjbGVhblVwIiwiaW5qZWN0Q29tcG9uZW50cyIsIl9jb2RlUmVnZXgiLCJfX3ByaW50IiwiX1ZUTWFwcyIsIl9fdnQiLCJfX2J1ZmZRdWV1ZSIsIl9fY3VycmVudFBhcnNlU3RhdGUiLCJfX2J1c3kiLCJfX2RlZmVycmVkSW50ZXJwZXQiLCJfX2ludGVycHJldCIsInRpbWVCdWRnZXQiLCJfX2ZpbmlzaFBhcnNpbmciLCJfX3BhcnNlRVNDIiwiX19wYXJzZUluZGV4Q29sb3IiLCJibGlua1Byb21wdCIsInByb21wdCIsInByb21wdEI2NCIsInJlZnJlc2hDU1NQYWxldHRlIiwiY29sb3JBcmciLCJXQ19QUkVDQUxDVUxBVEVEX0NMQVNTRVMiLCJfX2ZjIiwiX19iYyIsIl9fdWMiLCJfX2IiLCJfX2kiLCJfX2JsaW5rIiwiX191IiwiX19zIiwiX191cyIsIl9fdXUiLCJzb2xpZCIsImRvdWJsZSIsIndhdnkiLCJkb3R0ZWQiLCJkYXNoZWQiLCJfZW1vamlSZWdleCIsInN1cGVyIiwiX3YiLCJ0eHQiLCJmY2kiLCJmY3MiLCJiY2kiLCJiY3MiLCJ1Y2kiLCJ3Y3ciLCJuZXh0UHJvcHMiLCJfZGlydHkiLCJlbGVtZW50cyIsIl9yZW5kZXJJbWFnZSIsImltYWdlRWxlbWVudCIsIl9yb3dzIiwiX3Jvd3NNYXAiLCJyb3dzTWFwIiwiX19uc0VuY29kZUNHU2l6ZSIsIldLU2Nyb2xsZXIiLCJfeCIsIl95IiwiX3ZpZXdXaWR0aCIsIl92aWV3SGVpZ2h0IiwiX2NvbnRlbnRXaWR0aCIsIl9jb250ZW50SGVpZ2h0IiwiX2NhbGxiYWNrIiwid2tTY3JvbGxlciIsInZpZXdXaWR0aCIsInZpZXdIZWlnaHQiLCJjb250ZW50V2lkdGgiLCJjb250ZW50SGVpZ2h0IiwibmVlZFRvUG9zdCIsIl9wb3N0TWVzc2FnZSIsInZpZXdTaXplIiwiY29udGVudFNpemUiLCJhbmltYXRlZCIsIl9fc2NyZWVuU2l6ZSIsIl9fcGFnZVlPZmZzZXQiLCJfX2ZpbmRSZWFjdENvbXBvbmVudCIsImZpYmVyTm9kZSIsIm9uX3RvdWNoc3RhcnRfIiwib25fdG91Y2htb3ZlXyIsIm9uX3RvdWNoZW5kXyIsIm9uX3RvdWNoY2FuY2VsXyIsIl9yZW5kZXJEb20iLCJyZW5kZXJSZWYiLCJzY3JvbGxlcl8iLCJzY3JvbGxpbmdYIiwic2V0RGltZW5zaW9ucyIsIl9fY3VycmVudFRyYW5zZm9ybSIsInRyYW5zZm9ybSIsImN1cnNvck92ZXJsYXlOb2RlXyIsIl9fcHJldkhlaWdodCIsIl9fZ2V0VGV4dFdpZHRoIiwiZm9udCIsImNhbnZhcyIsImdldENvbnRleHQiLCJtZXRyaWNzIiwibWVhc3VyZVRleHQiLCJmb250Qm91bmRpbmdCb3hBc2NlbnQiLCJmb250Qm91bmRpbmdCb3hEZXNjZW50Iiwic2V0Um93cyIsInNjcm9sbFRvIiwiZG9tTWV0aG9kIiwiZm9udFNpemVEZXRlY3Rpb25NZXRob2QiLCJfX25vZGVLZXkiLCJnZW5LZXkiLCJyb3dXaWR0aCIsIl9fY3NzU3R5bGVTaGVldCIsIl9fZGVmYXVsdEF0dHJzIiwiZnJlZXplIiwic2V0Tm9kZVRleHQiLCJzZXROb2RlQXR0cmlidXRlZFRleHQiLCJjcmVhdGVEZWZhdWx0Tm9kZSIsImNyZWF0ZU5vZGUiLCJjcmVhdGVBdHRyaWJ1dGVkTm9kZSIsIm5vZGVNYXRjaGVzQXR0cnMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIl9kZWJvdW5jZSIsIl9fZ2VuZXJhdGVBdHRyaWJ1dGVzU3R5bGVTaGVldCIsIl9ub25BU0NJSVJlZ2V4IiwiX19jaGFyQ2FjaGUiLCJfX2NoYXJXaWR0aCIsIl9faW5zZXJ0Tm9kZSIsInNlcGFyYXRvciIsImN1cnNvclJvd0lkeF8iLCJjdXJzb3JOb2RlSWR4XyIsIm5vZGVJZHgiLCJvdmVyd3JpdGVOb2RlIiwid2N3aWR0aExlZnQiLCJ3Y2RpZmYiLCJub2Rlc0NvdW50IiwiY3Vyc29yUm93Tm9kZSIsInN0YXJ0Tm9kZUlkeCIsInNwbGljZUNvdW50IiwiX19mbGF0dGVuTm9kZXMiLCJzcGxpY2VJZHgiLCJzcGxpY2VEZWxldGVDb3VudCIsInN0YXJ0V2lkdGgiLCJzZXRSb3ciLCJyb3dJZHgiLCJpbm5lcnRUZXh0IiwiX19mb3J3YXJkV29yZFJlZ2V4IiwiX19iYWNrd2FyZFdvcmRSZWdleCIsIl9faGlzdHJ5RGlzcGxheUhlaWdodCIsIl9jdXJzb3IiLCJfbGFzdFZhbHVlIiwiX2xhc3RQcm9tcHQiLCJfY2FsbCIsIl9saW5lcyIsIl90b3RhbCIsIl9mb3VuZCIsIl9yZXNwb25zZSIsIl9wcm9tcHQiLCJfdmFsdWUiLCJmaW5kIiwibnVtIiwiX3JlbmRlciIsIl9jYW5jZWxDYWxsIiwidGVybV9hcGlSZXF1ZXN0IiwiYmVmb3JlIiwiYWZ0ZXIiLCJsaW5lcyIsInRvdGFsIiwiY2FuY2VsIiwic2VhcmNoTW9kZSIsImZpbmRJbmRleCIsIl90ZXJtIiwiX2hpc3RvcnkiLCJ0ZXJtIiwic2NyZWVuV2lkdGgiLCJfc3RhcnRSb3ciLCJfc3RhcnRDb2wiLCJ2YWx1ZVdpZHRoIiwic2VhcmNoUHJvbXB0IiwiaGlzdG9yeUhlaWdodCIsIm1vcmVSb3dzIiwiX24iLCJfbGFzdEN1cnNvciIsIl9jaGVja1ZhbHVlIiwiX2NoZWNrQ3Vyc29yIiwiZE4iLCJfaGludCIsImludGVyT3AiLCJyZWFsQ3Vyc29yIiwicmVhbFZhbHVlIiwiY2FuZGlkYXRlIiwibGVmdFdpZHRoIiwiaGludCIsIl9oaW50UG9zIiwiX3NoZWxsIiwiX3NlY3VyZSIsIl9yb3ciLCJfY29tcGxldGUiLCJfaGlzdG9yeVNlYXJjaE1vZGUiLCJfY29tcGxldGVJZk5lZWRlZCIsIl9jb21wbGV0ZUJhY2tJZk5lZWRlZCIsIl9mb3J3YXJkV29yZCIsIl9iYWNrV29yZCIsIl9kZWxldGVCYWNrV29yZCIsIl9kZWxldGVGb3J3YXJkV29yZCIsIl91cHBlcmNhc2VGb3J3YXJkV29yZCIsIl9yZXNldEhpc3RvcnkiLCJfbW92ZUxlZnQiLCJfbW92ZVJpZ2h0IiwiX21vdmVVcCIsIl9tb3ZlRG93biIsIl9nZXRIaXN0b3J5IiwiX3NlYXJjaElmTmVlZGVkIiwiX2hpbnRJZk5lZWRlZCIsIl9nZXRDb21wbGV0ZSIsImNvbXBsZXRlIiwiX3ZhbHVlU3RhcnRDb2wiLCJwcmV2IiwidXBwZXJXb3JkIiwiaGludFdpZHRoIiwidHgiLCJ0eSIsImRyIiwiYjY0Iiwib3B0cyIsInNlY3VyZSIsInNoZWxsIiwib25Gb2N1c2VDaGFuZ2UiLCJpbWVfIiwic2V0Q3NzQ3Vyc29yUG9zIiwiX19wcmV2Q3Vyc29yUG9zIiwic2V0Q3Vyc29yQ3NzVmFyIiwiYmxpbmtDdXJzb3JQb3MiLCJuZWVkU2Nyb2xsU3luYyIsInRvdWNoUm93IiwicG9zaXRvbiIsIktleXN0cm9rZVZpc3VhbGl6ZXIiLCJpbnN0YWxsS0IiLCJfb25LQiJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFP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LFVBQ0EsVUFDQSxVQUNBLFVBR0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBRUEsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBRUEsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBRUEsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBRUEsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNB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U0FBVSxvQkFDVkMsVUFBVyxvQkFDWEMsVUFBVyxvQkFDWEMsVUFBVyxvQkFDWEMsVUFBVyxtQkFDWEMsWUFBYSxtQkFDYkMsYUFBYyxtQkFDZEMsYUFBYyxtQkFDZEMsYUFBYyxtQkFDZEMsYUFBYyxtQkFDZEMsUUFBUyxxQkFDVEMsUUFBUyxxQkFDVEMsV0FBWSxvQkFDWkMsWUFBYSxvQkFDYkMsWUFBYSxvQkFDYkMsWUFBYSxvQkFDYkMsWUFBYSxtQkFDYkMsVUFBVyxtQkFDWEMsV0FBWSxtQkFDWkMsV0FBWSxtQkFDWkMsV0FBWSxtQkFDWkMsV0FBWSxtQkFDWkMsWUFBYSxxQkFDYkMsWUFBYSxtQkFDYkMsVUFBVyxxQkFDWEMsV0FBWSxxQkFDWkMsS0FBTSxtQkFDTkMsTUFBTyxtQkFDUEMsTUFBTyxtQkFDUEMsTUFBTyxtQkFDUEMsTUFBTyxtQkFDUEMsVUFBVyxvQkFDWEMsV0FBWSxvQkFDWkMsV0FBWSxvQkFDWkMsV0FBWSxvQkFDWkMsV0FBWSxvQkFDWkMsS0FBTSxxQkFDTkMsTUFBTyxlQUNQQyxNQUFPLGVBQ1BDLE9BQVEsa0JBQ1JDLFFBQVMscUJBQ1RDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE1BQU8sZUFDUEMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsTUFBTyxlQUNQQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxNQUFPLGtCQUNQQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxNQUFPLGtCQUNQQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxNQUFPLGtCQUNQQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxNQUFPLGtCQUNQQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxNQUFPLGtCQUNQQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxNQUFPLGtCQUNQQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxPQUFRLHFCQUNSQyxNQUFPLGlCQUNQQyxPQUFRLGlCQUNSQyxPQUFRLGlCQUNSQyxPQUFRLGlCQUNSQyxPQUFRLGlCQUNSQyxZQUFhLG9CQUNiQyxLQUFNLHFCQUNOQyxNQUFPLGVBQ1BDLE1BQU8sZUFDUEMsT0FBUSxrQkFDUkMsUUFBUyxxQkFDVEMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsT0FBUSxrQkFDUkMsTUFBTyxlQUNQQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxPQUFRLGtCQUNSQyxNQUFPLGVBQ1BDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE9BQVEsa0JBQ1JDLE1BQU8sa0JBQ1BDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE1BQU8sa0JBQ1BDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE1BQU8sa0JBQ1BDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE1BQU8sa0JBQ1BDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE1BQU8sa0JBQ1BDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE1BQU8sa0JBQ1BDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLFNBQVUscUJBQ1ZDLFVBQVcscUJBQ1hDLFVBQVcscUJBQ1hDLFVBQVcscUJBQ1hDLFVBQVcscUJBQ1hDLFFBQVMscUJBQ1RDLFNBQVUscUJBQ1ZDLFNBQVUscUJBQ1ZDLFNBQVUsb0JBQ1ZDLFNBQVUsbUJBQ1ZDLFVBQVcsbUJBQ1hDLFdBQVkscUJBQ1pDLFdBQVksbUJBQ1pDLFdBQVksbUJBQ1pDLFdBQVksbUJBQ1pDLE1BQU8scUJBQ1BDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE1BQU8scUJBQ1BDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEscUJBQ1JDLE9BQVEsb0JBQ1JDLFNBQVUscUJBQ1ZDLGNBQWUscUJBQ2ZDLGVBQWdCLHFCQUNoQkMsZUFBZ0IscUJBQ2hCQyxlQUFnQixxQkFDaEJDLGVBQWdCLHFCQUNoQkMsVUFBVyxtQkFDWEMsYUFBYyxxQkFDZEMsY0FBZSxxQkFDZkMsY0FBZSxxQkFDZkMsY0FBZSxxQkFDZkMsY0FBZSxxQkFDZkMsVUFBVyxxQkFDWEMsV0FBWSxxQkFDWkMsV0FBWSxxQkFDWkMsV0FBWSxxQkFDWkMsV0FBWSxxQkFDWkMsV0FBWSxxQkFDWkMsVUFBVyxxQkFDWEMsV0FBWSxxQkFDWkMsV0FBWSxxQkFDWkMsV0FBWSxxQkFDWkMsV0FBWSxxQkFDWkMsZUFBZ0IscUJBQ2hCQyxnQkFBaUIscUJBQ2pCQyxnQkFBaUIscUJBQ2pCQyxnQkFBaUIscUJBQ2pCQyxnQkFBaUIsb0JBQ2pCQyxxQkFBc0IscUJBQ3RCQyxVQUFXLHFCQUNYQyxXQUFZLHFCQUNaQyxVQUFXLHFCQUNYQyxVQUFXLHFCQUNYQyxXQUFZLHFCQUNaQyxXQUFZLHFCQUNaQyxXQUFZLHFCQUNaQyxXQUFZLG9CQUNaQyxZQUFhLHFCQUNiQyxhQUFjLHFCQUNkQyxhQUFjLHFCQUNkQyxhQUFjLG9CQUNkQyxhQUFjLG1CQUNkQyxjQUFlLG9CQUNmQyxhQUFjLHFCQUNkQyxjQUFlLHFCQUNmQyxjQUFlLHFCQUNmQyxjQUFlLHFCQUNmQyxjQUFlLG9CQUNmQyxlQUFnQixxQkFDaEJDLGVBQWdCLHFCQUNoQkMsZUFBZ0IscUJBQ2hCQyxlQUFnQixxQkFDaEJDLGdCQUFpQixxQkFDakJDLGdCQUFpQixxQkFDakJDLGdCQUFpQixxQkFDakJDLGdCQUFpQixxQkFDakJDLFlBQWEscUJBQ2JDLGFBQWMscUJBQ2RDLGFBQWMscUJBQ2RDLGFBQWMscUJBQ2RDLGFBQWMscUJBQ2RDLFVBQVcsbUJBQ1hDLE1BQU8scUJBQ1BDLFFBQVMsbUJBQ1RDLFNBQVUsbUJBQ1ZDLFNBQVUsbUJBQ1ZDLFNBQVUsbUJBQ1ZDLFNBQVUsbUJBQ1ZDLE9BQVEsbUJBQ1JDLFFBQVMsb0JBQ1RDLFFBQVMsb0JBQ1RDLFFBQVMsb0JBQ1RDLFFBQVMsbUJBQ1RDLGlCQUFrQixxQkFDbEJDLFdBQVksaUJBQ1pDLGFBQWMsb0JBQ2RDLGNBQWUscUJBQ2ZDLGNBQWUsb0JBQ2ZDLGNBQWUsb0JBQ2ZDLGNBQWUsb0JBQ2ZDLGFBQWMscUJBQ2RDLGNBQWUscUJBQ2ZDLGNBQWUscUJBQ2ZDLGNBQWUscUJBQ2ZDLGNBQWUsbUJBQ2ZDLGVBQWdCLG9CQUNoQkMsZ0JBQWlCLHFCQUNqQkMsa0JBQW1CLG1CQUNuQkMsZ0JBQWlCLG9CQUNqQkMsZ0JBQWlCLG9CQUNqQkMsYUFBYyxtQkFDZEMsVUFBVyxxQkFDWEMsVUFBVyxxQkFDWEMsV0FBWSxxQkFDWkMsV0FBWSxxQkFDWkMsV0FBWSxxQkFDWkMsV0FBWSxxQkFDWkMsU0FBVSxxQkFDVkMsWUFBYSxxQkFDYkMsYUFBYyxxQkFDZEMsYUFBYyxxQkFDZEMsYUFBYyxxQkFDZEMsYUFBYyxvQkFDZEMsS0FBTSxpQkFDTkMsU0FBVSxpQkFDVkMsUUFBUyxxQkFDVEMsVUFBVyxvQkFDWEMsV0FBWSxvQkFDWkMsV0FBWSxvQkFDWkMsV0FBWSxvQkFDWkMsV0FBWSxvQkFDWkMsT0FBUSxtQkFDUkMsUUFBUyxtQkFDVEMsUUFBUyxtQkFDVEMsUUFBUyxtQkFDVEMsUUFBUyxrQkFDVEMsVUFBVyxrQkFDWEMsV0FBWSxrQkFDWkMsV0FBWSxrQkFDWkMsV0FBWSxrQkFDWkMsV0FBWSxrQkFDWkMsT0FBUSxxQkFDUkMsUUFBUyxxQkFDVEMsUUFBUyxxQkFDVEMsUUFBUyxxQkFDVEMsUUFBUyxvQkFDVEMsY0FBZSxxQkFDZkMsVUFBVyxxQkFDWEMsV0FBWSxxQkFDWkMsV0FBWSxxQkFDWkMsV0FBWSxxQkFDWkMsV0FBWSxtQkFDWkMsY0FBZSxxQkFDZkMsZUFBZ0IscUJBQ2hCQyxlQUFnQixxQkFDaEJDLGVBQWdCLHFCQUNoQkMsZUFBZ0IscUJBQ2hCQyxjQUFlLHFCQUNmQyxlQUFnQixxQkFDaEJDLGVBQWdCLHFCQUNoQkMsZUFBZ0IscUJBQ2hCQyxlQUFnQixtQkFDaEJDLFdBQVkscUJBQ1pDLFVBQVcscUJBQ1hDLFdBQVkscUJBQ1pDLFdBQVkscUJBQ1pDLFdBQVkscUJBQ1pDLFdBQVkscUJBQ1pDLEtBQU0sb0JBQ05DLEtBQU0scUJBQ05DLE1BQU8scUJBQ1BDLE1BQU8scUJBQ1BDLE1BQU8scUJBQ1BDLE1BQU8sb0JBQ1BDLEtBQU0scUJBQ05DLE1BQU8scUJBQ1BDLE1BQU8scUJBQ1BDLE1BQU8scUJBQ1BDLE1BQU8scUJBQ1BDLFdBQVkscUJBQ1pDLE9BQVEsb0JBQ1JDLFFBQVMsb0JBQ1RDLFFBQVMsb0JBQ1RDLFFBQVMsb0JBQ1RDLFFBQVMsbUJBQ1RDLElBQUssaUJBQ0xDLEtBQU0saUJBQ05DLEtBQU0saUJBQ05DLEtBQU0saUJBQ05DLEtBQU0saUJBQ05DLFVBQVcscUJBQ1hDLFdBQVkscUJBQ1pDLFdBQVkscUJBQ1pDLFdBQVkscUJBQ1pDLFdBQVkscUJBQ1pDLFVBQVcsb0JBQ1hDLFdBQVksb0JBQ1pDLFdBQVksb0JBQ1pDLFdBQVksbUJBQ1pDLFdBQVksbUJBQ1pDLFlBQWEsbUJBQ2JDLE9BQVEscUJBQ1JDLFFBQVMscUJBQ1RDLFFBQVMsb0JBQ1RDLFFBQVMsb0JBQ1RDLFFBQVMsbUJBQ1RDLFdBQVksb0JBQ1pDLFNBQVUsbUJBQ1ZDLFVBQVcsb0JBQ1hDLFVBQVcsb0JBQ1hDLFVBQVcsb0JBQ1hDLFVBQVcsbUJBQ1hDLFNBQVUscUJBQ1ZDLFVBQVcscUJBQ1hDLFVBQVcscUJBQ1hDLFVBQVcscUJBQ1hDLFVBQVcscUJBQ1hDLE9BQVEsbUJBQ1JDLFFBQVMsb0JBQ1RDLFFBQVMsb0JBQ1RDLFFBQVMsb0JBQ1RDLFFBQVMsbUJBQ1RDLFFBQVMscUJBQ1RDLFNBQVUscUJBQ1ZDLFNBQVUscUJBQ1ZDLFNBQVUscUJBQ1ZDLFNBQVUsb0JBQ1ZDLFVBQVcsb0JBQ1hDLFdBQVkscUJBQ1pDLFdBQVkscUJBQ1pDLFdBQVksb0JBQ1pDLFdBQVksbUJBQ1pDLFVBQVcscUJBQ1hDLFdBQVkscUJBQ1pDLFdBQVkscUJBQ1pDLFdBQVkscUJBQ1pDLFdBQVkscUJBQ1pDLFVBQVcscUJBQ1hDLEtBQU0scUJBQ05DLE1BQU8scUJBQ1BDLE1BQU8scUJBQ1BDLE1BQU8scUJBQ1BDLE1BQU8scUJBQ1BDLFlBQWEsbUJBQ2JDLGFBQWMsbUJBQ2RDLGFBQWMsbUJBQ2RDLGFBQWMsbUJBQ2RDLGFBQWMsa0JBQ2RDLFVBQVcsb0JBQ1hDLFdBQVksb0JBQ1pDLFdBQVksb0JBQ1pDLFdBQVksb0JBQ1pDLFdBQVksb0JBQ1pDLElBQUsscUJBQ0xDLEtBQU0sb0JBQ05DLEtBQU0sb0JBQ05DLEtBQU0sb0JBQ05DLEtBQU0sbUJBQ05DLFFBQVMscUJBQ1RDLFNBQVUscUJBQ1ZDLFNBQVUscUJBQ1ZDLFNBQVUscUJBQ1ZDLFNBQVUscUJBQ1ZDLE9BQVEsbUJBQ1JDLFFBQVMsbUJBQ1RDLFFBQVMsbUJBQ1RDLFFBQVMsbUJBQ1RDLFFBQVMsbUJBQ1RDLFVB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TUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsT0FDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsU0FLWixFQUFJMWlFLEdBQUcyaUUsVUFBWSxDQUNqQixDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLElBQVEsS0FDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsU0FDVixDQUFDLFFBQVUsVUFLYixFQUFJM2lFLEdBQUc0aUUsWUFBYyxDQUNuQixDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLEtBQVEsTUFDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVEsT0FDVCxDQUFDLE1BQVMsT0FDVixDQUFDLE1BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixDQUFDLE9BQVMsUUFDVixD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QVVzdEMsRUFBRyxJQUFRLE1BQU9BLEVBQUcsS0FBTSxLQUFTaEQsRUFBU0EsR0FHM0QsQ0FBQyxFQUFHLFFBQVMxTCxFQUFHLEtBQU1xTSxPQUFZVCxFQUFPRCxFQUFNRCxHQUMvQyxDQUFDLEdBQUksS0FBTUEsRUFBU2EsRUFBSSxLQUFNYixFQUFTQSxHQUN2QyxDQUFDLEdBQUksS0FBTUEsRUFBU2EsRUFBSSxLQUFNYixFQUFTQSxHQUN2QyxDQUFDLEdBQUksS0FBTUEsRUFBU2EsRUFBSSxLQUFNYixFQUFTQSxHQUN2QyxDQUFDLEdBQUksS0FBTUEsRUFBU2EsRUFBSSxLQUFNYixFQUFTQSxHQUN2QyxDQUFDLEdBQUksS0FBTUEsRUFBU2EsRUFBSSxLQUFNYixFQUFTQSxHQUN2QyxDQUFDLEdBQUksS0FBTUEsRUFBU2EsRUFBSSxLQUFNYixFQUFTQSxHQUN2QyxDQUFDLEdBQUksS0FBTUEsRUFBU2EsRUFBSSxLQUFNYixFQUFTQSxHQUN2QyxDQUFDLEdBQUksS0FBTUEsRUFBU2EsRUFBSSxLQUFNYixFQUFTQSxHQUN2QyxDQUFDLEdBQUksS0FBTUEsRUFBU2EsRUFBSSxLQUFNYixFQUFTQSxHQUN2QyxDQUFDLEdBQUksS0FBTUEsRUFBU2EsRUFBSSxLQUFNYixFQUFTQSxHQUN2QyxDQUFDLElBQUssS0FBTUEsRUFBU2EsRUFBSSxLQUFNYixFQUFTQSxHQUN4QyxDQUFDLElBQUssS0FBTUEsRUFBU2EsRUFBSSxLQUFNYixFQUFTQSxHQUN4QyxDQUFDLElBQUssTUFBT0EsRUFBU2EsRUFBSSxNQUFPYixFQUFTQSxHQUcxQyxDQUFDLEdBQUksU0FBVUMsRUFBTUEsRUFBTUEsRUFBTUQsR0FDakMsQ0FBQyxHQUFJLEtBQU1BLEVBQVNhLEVBQUksS0FBTWIsRUFBU0EsR0FDdkMsQ0FBQyxHQUFJLEtBQU1BLEVBQVNhLEVBQUksS0FBTWIsRUFBU0EsR0FDdkMsQ0FBQyxHQUFJLEtBQU1BLEVBQVNhLEVBQUksS0FBTWIsRUFBU0EsR0FDdkMsQ0FBQyxHQUFJLEtBQU1BLEVBQVNhLEVBQUksS0FBTWIsRUFB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RUosSUFBSyxPQUNEZ0IsRUFBSWhCLEtBQU8sS0FDWCxNQUNKLElBQUssT0FDRGdCLEVBQUloQixLQUFPLEtBQ1gsTUFDSixJQUFLLE9BQ0RnQixFQUFJaEIsS0FBTyxLQUNYLE1BQ0osSUFBSyxPQUNEZ0IsRUFBSWhCLEtBQU8sS0FDWCxNQUVKLElBQUssTUFDRGdCLEVBQUloQixLQUFPLEtBQ1gsTUFDSixJQUFLLE1BQ0RnQixFQUFJaEIsS0FBTyxLQUNYLE1BQ0osSUFBSyxNQUNEZ0IsRUFBSWhCLEtBQU8sS0FDWCxNQUNKLElBQUssTUFDRGdCLEVBQUloQixLQUFPLEtBQ1gsTUFDSixJQUFLLE1BSUwsSUFBSyxPQUNEZ0IsRUFBSWhCLEtBQU8sS0FDWCxNQUNKLElBQUssT0FDRGdCLEVBQUloQixLQUFPLEtBQ1gsTUFDSixJQUFLLE9BQ0RnQixFQUFJaEIsS0FBTyxLQUNYLE1BQ0osSUFBSyxPQUNEZ0IsRUFBSWhCLEtBQU8sS0FDWCxNQUNKLElBQUssT0FDRGdCLEVBQUloQixLQUFPLEtBQ1gsTUFDSixJQUFLLE9BQ0RnQixFQUFJaEIsS0FBTyxNQUNYLE1BQ0osSUFBSyxPQUNEZ0IsRUFBSWhCLEtBQU8sTUFDWCxNQUNKLElBQUssT0FDRGdCLEVBQUloQixLQUFPLE1BQ1gsTUFFSixJQUFLLEtBQ0RnQixFQUFJaEIsS0FBTyxLQUNYLE1BQ0osSUFBSyxLQUNEZ0IsRUFBSWhCLEtBQU8sT0FDWCxNQUNKLElBQUssS0FDRGdCLEVBQUloQixLQUFPLFFBQ1gsTUFDSixJQUFLLEtBQ0RnQixFQUFJaEIsS0FBTyxPQUNYLE1BQ0osSUFBSyxLQUNEZ0IsRUFBSWhCLEtBQU8sUUFDWCxNQUNKLElBQUssS0FDRGdCLEVBQUloQixLQUFPLE1BQ1gsTUFDSixJQUFLLEtBQ0RnQixFQUFJaEIsS0FBTyxPQUNYLE1BRUosSUFBSyxLQUNEZ0IsRUFBSWhCLEtBQU8sS0FDWCxNQUNKLElBQUssS0FDRGdCLEVBQUloQixLQUFPLE9BQ1gsTUFDSixJQUFLLEtBQ0RnQixFQUFJaEIsS0FBTyxRQUNYLE1BQ0osSUFB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NUYsU0FJZnFyRSxFQUFNK3JCLFNBQVN0bEcsVUFBVWdsRyxZQUFjLFNBQVU3Z0YsRUFBT0UsR0FFcEQsSUFEQSxJQUFJZ3pCLEVBQU0sR0FDRGo1QyxFQUFJK2xCLEVBQU8vbEIsRUFBSWltQixFQUFLam1CLElBQUssQ0FDOUIsSUFBSWtsQixFQUFPN2YsS0FBS2tnRyxXQUFXdmxHLEdBQzNCaTVDLEVBQUkvdkMsS0FBS3d3RixHQUFReDBFLElBQ2JsbEIsRUFBSWltQixFQUFNLElBQU1mLEVBQUt6a0IsR0FDckJ3NEMsRUFBSS92QyxLQUFLLE1BR2pCLE9BQU8rdkMsRUFBSWwxQyxLQUFLLEtDdm1CcEI2SixPQUFPdXRFLE1BQVFBLEVBQ2Z2dEUsT0FBTzhuQyxJQUFNLEVBQ2I5bkMsT0FBT21pSCxvQkFBc0IsRUFXN0JuaUgsT0FBT29pSCxVQVZQLFNBQW1CNytFLEVBQVVoVixHQUN6QixNQUFNNlAsRUFBVyxJQUFJLEVBQVNtRixFQUFVaFYsR0FDbkNBLEdBQ0QxdUIsU0FBU284QixLQUFLeU8sT0FBT3RNLEVBQVM3UCxTQUVsQzZQLEVBQVMzYyxPQUFNLEdBQ2Z6aEIsT0FBT3FpSCxNQUFRamtGLEVBQVMrTCxLQUN4Qm5xQyxPQUFPdTlCLElBQU1hIiwiZmlsZSI6Imh0ZXJtX2FsbC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5T2JqZWN0ID0ge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIE9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5T2JqZWN0OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNC4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxjYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIikscD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSx2PXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGRhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGVhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksZmE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxoYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBBKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsZD0wO2Q8YjtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YWEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1jYT92b2lkIDA6QShcIjIyN1wiKTtcbmZ1bmN0aW9uIGlhKGEsYixjLGQsZSxmLGcsaCxrKXt0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMTt0aGlzLl9jYXVnaHRFcnJvcj1udWxsO3ZhciBuPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLG4pfWNhdGNoKHIpe3RoaXMuX2NhdWdodEVycm9yPXIsdGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITB9fVxudmFyIEI9e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbnZva2VHdWFyZGVkQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe2lhLmFwcGx5KEIsYXJndW1lbnRzKX0saW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrKXtCLmludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoQi5oYXNDYXVnaHRFcnJvcigpKXt2YXIgbj1CLmNsZWFyQ2F1Z2h0RXJyb3IoKTtCLl9oYXNSZXRocm93RXJyb3J8fChCLl9oYXNSZXRocm93RXJyb3I9ITAsQi5fcmV0aHJvd0Vycm9yPW4pfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIGthLmFwcGx5KEIsYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gQi5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihCLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9XG5CLl9jYXVnaHRFcnJvcjtCLl9jYXVnaHRFcnJvcj1udWxsO0IuX2hhc0NhdWdodEVycm9yPSExO3JldHVybiBhfUEoXCIxOThcIil9fTtmdW5jdGlvbiBrYSgpe2lmKEIuX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9Qi5fcmV0aHJvd0Vycm9yO0IuX3JldGhyb3dFcnJvcj1udWxsO0IuX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIGxhPW51bGwsbWE9e307XG5mdW5jdGlvbiBuYSgpe2lmKGxhKWZvcih2YXIgYSBpbiBtYSl7dmFyIGI9bWFbYV0sYz1sYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkEoXCI5NlwiLGEpO2lmKCFvYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpBKFwiOTdcIixhKTtvYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3BhLmhhc093blByb3BlcnR5KGgpP0EoXCI5OVwiLGgpOnZvaWQgMDtwYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZxYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpBKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcWEoYSxiLGMpe3JhW2FdP0EoXCIxMDBcIixhKTp2b2lkIDA7cmFbYV09YjtzYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBvYT1bXSxwYT17fSxyYT17fSxzYT17fTtmdW5jdGlvbiB0YShhKXtsYT9BKFwiMTAxXCIpOnZvaWQgMDtsYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtuYSgpfWZ1bmN0aW9uIHVhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO21hLmhhc093blByb3BlcnR5KGMpJiZtYVtjXT09PWR8fChtYVtjXT9BKFwiMTAyXCIsYyk6dm9pZCAwLG1hW2NdPWQsYj0hMCl9YiYmbmEoKX1cbnZhciB2YT17cGx1Z2luczpvYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6cGEscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6cmEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczpzYSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp0YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6dWF9LHdhPW51bGwseGE9bnVsbCx5YT1udWxsO2Z1bmN0aW9uIHphKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9eWEoZCk7Qi5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIEFhKGEsYil7bnVsbD09Yj9BKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBCYShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgQ2E9bnVsbDtcbmZ1bmN0aW9uIERhKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKXphKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmemEoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gRWEoYSl7cmV0dXJuIERhKGEsITApfWZ1bmN0aW9uIEZhKGEpe3JldHVybiBEYShhLCExKX12YXIgR2E9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6dGEsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnVhfTtcbmZ1bmN0aW9uIEhhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9d2EoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/QShcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIElhKGEsYil7bnVsbCE9PWEmJihDYT1BYShDYSxhKSk7YT1DYTtDYT1udWxsO2EmJihiP0JhKGEsRWEpOkJhKGEsRmEpLENhP0EoXCI5NVwiKTp2b2lkIDAsQi5yZXRocm93Q2F1Z2h0RXJyb3IoKSl9ZnVuY3Rpb24gSmEoYSxiLGMsZCl7Zm9yKHZhciBlPW51bGwsZj0wO2Y8b2EubGVuZ3RoO2YrKyl7dmFyIGc9b2FbZl07ZyYmKGc9Zy5leHRyYWN0RXZlbnRzKGEsYixjLGQpKSYmKGU9QWEoZSxnKSl9SWEoZSwhMSl9dmFyIEthPXtpbmplY3Rpb246R2EsZ2V0TGlzdGVuZXI6SGEscnVuRXZlbnRzSW5CYXRjaDpJYSxydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOkphfSxMYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxDPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGEsTWE9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMYTtcbmZ1bmN0aW9uIE5hKGEpe2lmKGFbQ10pcmV0dXJuIGFbQ107Zm9yKDshYVtDXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0NdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gT2EoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO0EoXCIzM1wiKX1mdW5jdGlvbiBQYShhKXtyZXR1cm4gYVtNYV18fG51bGx9dmFyIFFhPXtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbQ109YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6TmEsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbQ107cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpPYSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOlBhLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW01hXT1ifX07XG5mdW5jdGlvbiBGKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gUmEoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT1GKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfWZ1bmN0aW9uIFNhKGEsYixjKXtpZihiPUhhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9QWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9QWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmUmEoYS5fdGFyZ2V0SW5zdCxTYSxhKX1cbmZ1bmN0aW9uIFVhKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0YoYik6bnVsbDtSYShiLFNhLGEpfX1mdW5jdGlvbiBWYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1IYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9QWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9QWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFhhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmVmEoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIFlhKGEpe0JhKGEsVGEpfVxuZnVuY3Rpb24gWmEoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGc9MCxoPWU7aDtoPUYoaCkpZysrO2g9MDtmb3IodmFyIGs9ZjtrO2s9RihrKSloKys7Zm9yKDswPGctaDspZT1GKGUpLGctLTtmb3IoOzA8aC1nOylmPUYoZiksaC0tO2Zvcig7Zy0tOyl7aWYoZT09PWZ8fGU9PT1mLmFsdGVybmF0ZSlicmVhayBhO2U9RihlKTtmPUYoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2c9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2UucHVzaChjKTtjPUYoYyl9Zm9yKGM9W107ZCYmZCE9PWY7KXtnPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09ZilicmVhaztjLnB1c2goZCk7ZD1GKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspVmEoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspVmEoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIgJGE9e2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6WWEsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6ZnVuY3Rpb24oYSl7QmEoYSxVYSl9LGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczpaYSxhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXtCYShhLFhhKX19O2Z1bmN0aW9uIGFiKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgYmI9e2FuaW1hdGlvbmVuZDphYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjphYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OmFiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOmFiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sY2I9e30sZGI9e307bS5jYW5Vc2VET00mJihkYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBiYi5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBiYi5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBiYi5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBiYi50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZWIoYSl7aWYoY2JbYV0pcmV0dXJuIGNiW2FdO2lmKCFiYlthXSlyZXR1cm4gYTt2YXIgYj1iYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBkYilyZXR1cm4gY2JbYV09YltjXTtyZXR1cm4gYX12YXIgZmI9ZWIoXCJhbmltYXRpb25lbmRcIiksZ2I9ZWIoXCJhbmltYXRpb25pdGVyYXRpb25cIiksaGI9ZWIoXCJhbmltYXRpb25zdGFydFwiKSxpYj1lYihcInRyYW5zaXRpb25lbmRcIiksamI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGtiPW51bGw7XG5mdW5jdGlvbiBsYigpeyFrYiYmbS5jYW5Vc2VET00mJihrYj1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpO3JldHVybiBrYn12YXIgRz17X3Jvb3Q6bnVsbCxfc3RhcnRUZXh0Om51bGwsX2ZhbGxiYWNrVGV4dDpudWxsfTtmdW5jdGlvbiBtYigpe2lmKEcuX2ZhbGxiYWNrVGV4dClyZXR1cm4gRy5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9Ry5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPW5iKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtHLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gRy5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIG5iKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gRy5fcm9vdD9HLl9yb290LnZhbHVlOkcuX3Jvb3RbbGIoKV19XG52YXIgb2I9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxwYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6di50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIEgoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP3YudGhhdFJldHVybnNUcnVlOnYudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXYudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbnAoSC5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD12LnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD12LnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD12LnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OnYudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxvYi5sZW5ndGg7YSsrKXRoaXNbb2JbYV1dPW51bGx9fSk7SC5JbnRlcmZhY2U9cGI7SC5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7cChlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9cCh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtxYihjKTtyZXR1cm4gY307cWIoSCk7XG5mdW5jdGlvbiByYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBzYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6QShcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gcWIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9cmI7YS5yZWxlYXNlPXNifXZhciB0Yj1ILmV4dGVuZCh7ZGF0YTpudWxsfSksdWI9SC5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPVs5LDEzLDI3LDMyXSx3Yj1tLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cseGI9bnVsbDttLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoeGI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB5Yj1tLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXhiLHpiPW0uY2FuVXNlRE9NJiYoIXdifHx4YiYmODx4YiYmMTE+PXhiKSxBYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxCYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxDYj0hMTtcbmZ1bmN0aW9uIERiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09dmIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBFYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBGYj0hMTtmdW5jdGlvbiBHYihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gRWIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0NiPSEwO3JldHVybiBBYjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1BYiYmQ2I/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gSGIoYSxiKXtpZihGYilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhd2ImJkRiKGEsYik/KGE9bWIoKSxHLl9yb290PW51bGwsRy5fc3RhcnRUZXh0PW51bGwsRy5fZmFsbGJhY2tUZXh0PW51bGwsRmI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHpiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIEliPXtldmVudFR5cGVzOkJiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZih3YiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPUJiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPUJiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT1CYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgRmI/RGIoYSxjKSYmKGU9QmIuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1CYi5jb21wb3NpdGlvblN0YXJ0KTtlPyh6YiYmKEZifHxlIT09QmIuY29tcG9zaXRpb25TdGFydD9lPT09QmIuY29tcG9zaXRpb25FbmQmJkZiJiYoZj1tYigpKTooRy5fcm9vdD1kLEcuX3N0YXJ0VGV4dD1uYigpLEZiPSEwKSksZT10Yi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9XG5mOihmPUViKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxZYShlKSxmPWUpOmY9bnVsbDsoYT15Yj9HYihhLGMpOkhiKGEsYykpPyhiPXViLmdldFBvb2xlZChCYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsWWEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sSmI9bnVsbCxLYj17aW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDpmdW5jdGlvbihhKXtKYj1hfX0sTGI9bnVsbCxNYj1udWxsO2Z1bmN0aW9uIE5iKGEpe2lmKGE9eGEoYSkpe0piJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgSmIucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZT92b2lkIDA6QShcIjE5NFwiKTt2YXIgYj13YShhLnN0YXRlTm9kZSk7SmIucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIE9iKGEpe0xiP01iP01iLnB1c2goYSk6TWI9W2FdOkxiPWF9XG5mdW5jdGlvbiBQYigpe3JldHVybiBudWxsIT09TGJ8fG51bGwhPT1NYn1mdW5jdGlvbiBRYigpe2lmKExiKXt2YXIgYT1MYixiPU1iO01iPUxiPW51bGw7TmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKU5iKGJbYV0pfX12YXIgUmI9e2luamVjdGlvbjpLYixlbnF1ZXVlU3RhdGVSZXN0b3JlOk9iLG5lZWRzU3RhdGVSZXN0b3JlOlBiLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOlFifTtmdW5jdGlvbiBTYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIFRiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIFViKCl7fXZhciBWYj0hMTtmdW5jdGlvbiBXYihhLGIpe2lmKFZiKXJldHVybiBhKGIpO1ZiPSEwO3RyeXtyZXR1cm4gU2IoYSxiKX1maW5hbGx5e1ZiPSExLFBiKCkmJihVYigpLFFiKCkpfX1cbnZhciBYYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBZYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVhiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBaYihhKXthPWEudGFyZ2V0fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfVxuZnVuY3Rpb24gJGIoYSxiKXtpZighbS5jYW5Vc2VET018fGImJiEoXCJhZGRFdmVudExpc3RlbmVyXCJpbiBkb2N1bWVudCkpcmV0dXJuITE7YT1cIm9uXCIrYTtiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBhYyhhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YWMoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIGNjKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1iYyhhKSl9ZnVuY3Rpb24gZGMoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPWFjKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9XG52YXIgZWM9Y2EuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIsST1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGZjPUk/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZ2M9ST9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGhjPUk/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGljPUk/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGpjPUk/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LG1jPUk/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LG5jPUk/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsb2M9ST9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxwYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixxYz1JP1N5bWJvbC5mb3IoXCJyZWFjdC50aW1lb3V0XCIpOlxuNjAxMTMscmM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIHNjKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1yYyYmYVtyY118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHRjKGEpe3ZhciBiPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gYjtzd2l0Y2goYil7Y2FzZSBvYzpyZXR1cm5cIkFzeW5jTW9kZVwiO2Nhc2UgbmM6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBoYzpyZXR1cm5cIlJlYWN0RnJhZ21lbnRcIjtjYXNlIGdjOnJldHVyblwiUmVhY3RQb3J0YWxcIjtjYXNlIGpjOnJldHVyblwiUHJvZmlsZXIoXCIrYS5wZW5kaW5nUHJvcHMuaWQrXCIpXCI7Y2FzZSBtYzpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGljOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgcWM6cmV0dXJuXCJUaW1lb3V0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yilzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBwYzpyZXR1cm4gYT1iLnJlbmRlci5kaXNwbGF5TmFtZXx8Yi5yZW5kZXIubmFtZXx8XCJcIixcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrXG5hK1wiKVwiOlwiRm9yd2FyZFJlZlwifXJldHVybiBudWxsfWZ1bmN0aW9uIHZjKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDE6Y2FzZSAyOmNhc2UgNTp2YXIgYz1hLl9kZWJ1Z093bmVyLGQ9YS5fZGVidWdTb3VyY2U7dmFyIGU9dGMoYSk7dmFyIGY9bnVsbDtjJiYoZj10YyhjKSk7Yz1kO2U9XCJcXG4gICAgaW4gXCIrKGV8fFwiVW5rbm93blwiKSsoYz9cIiAoYXQgXCIrYy5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLFwiXCIpK1wiOlwiK2MubGluZU51bWJlcitcIilcIjpmP1wiIChjcmVhdGVkIGJ5IFwiK2YrXCIpXCI6XCJcIik7YnJlYWsgYTtkZWZhdWx0OmU9XCJcIn1iKz1lO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgd2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLHhjPXt9LHljPXt9O2Z1bmN0aW9uIHpjKGEpe2lmKHljLmhhc093blByb3BlcnR5KGEpKXJldHVybiEwO2lmKHhjLmhhc093blByb3BlcnR5KGEpKXJldHVybiExO2lmKHdjLnRlc3QoYSkpcmV0dXJuIHljW2FdPSEwO3hjW2FdPSEwO3JldHVybiExfVxuZnVuY3Rpb24gQWMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gQmMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8QWMoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1cbmZ1bmN0aW9uIEooYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBLPXt9O1wiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDAsITEsYSxudWxsKX0pO1xuW1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0tbYl09bmV3IEooYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSwyLCExLGEsbnVsbCl9KTtcblwiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSwzLCEwLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDQsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDYsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgQ2M9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBEYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShDYyxcbkRjKTtLW2JdPW5ldyBKKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShDYyxEYyk7S1tiXT1uZXcgSihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShDYyxEYyk7S1tiXT1uZXcgSihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO0sudGFiSW5kZXg9bmV3IEooXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24gRWMoYSxiLGMsZCl7dmFyIGU9Sy5oYXNPd25Qcm9wZXJ0eShiKT9LW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoQmMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP3pjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiBGYyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gcCh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gR2MoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9SGMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBJYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJkVjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBKYyhhLGIpe0ljKGEsYik7dmFyIGM9SGMoYi52YWx1ZSk7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2IuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9LYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZLYyhhLGIudHlwZSxIYyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIExjKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKVwiXCI9PT1hLnZhbHVlJiYoYS52YWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpLGEuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtiPWEubmFtZTtcIlwiIT09YiYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWImJihhLm5hbWU9Yil9ZnVuY3Rpb24gS2MoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfVxuZnVuY3Rpb24gSGMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fXZhciBNYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBOYyhhLGIsYyl7YT1ILmdldFBvb2xlZChNYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO09iKGMpO1lhKGEpO3JldHVybiBhfXZhciBPYz1udWxsLFBjPW51bGw7ZnVuY3Rpb24gUWMoYSl7SWEoYSwhMSl9ZnVuY3Rpb24gUmMoYSl7dmFyIGI9T2EoYSk7aWYoZGMoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiBTYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBUYz0hMTttLmNhblVzZURPTSYmKFRjPSRiKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIFVjKCl7T2MmJihPYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixWYyksUGM9T2M9bnVsbCl9ZnVuY3Rpb24gVmMoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJlJjKFBjKSYmKGE9TmMoUGMsYSxaYihhKSksV2IoUWMsYSkpfWZ1bmN0aW9uIFdjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhVYygpLE9jPWIsUGM9YyxPYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixWYykpOlwiYmx1clwiPT09YSYmVWMoKX1mdW5jdGlvbiBYYyhhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBSYyhQYyl9XG5mdW5jdGlvbiBZYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIFJjKGIpfWZ1bmN0aW9uIFpjKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIFJjKGIpfVxudmFyICRjPXtldmVudFR5cGVzOk1jLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6VGMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP09hKGIpOndpbmRvdyxmPXZvaWQgMCxnPXZvaWQgMCxoPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09aHx8XCJpbnB1dFwiPT09aCYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1TYzpZYihlKT9UYz9mPVpjOihmPVhjLGc9V2MpOihoPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1oLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPVljKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBOYyhmLGMsZCk7ZyYmZyhhLGUsYik7XCJibHVyXCI9PT1hJiZudWxsIT1iJiYoYT1iLl93cmFwcGVyU3RhdGV8fGUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmS2MoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sYWQ9SC5leHRlbmQoe3ZpZXc6bnVsbCxcbmRldGFpbDpudWxsfSksYmQ9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIGNkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9YmRbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBkZCgpe3JldHVybiBjZH1cbnZhciBlZD1hZC5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZGQsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9fSksZmQ9ZWQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxnZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxcbm1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0saGQ9e2V2ZW50VHlwZXM6Z2QsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxcbmUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9OYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGg9dm9pZCAwLGs9dm9pZCAwLG49dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9ZWQsaD1nZC5tb3VzZUxlYXZlLGs9Z2QubW91c2VFbnRlcixuPVwibW91c2VcIjtlbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPWZkLGg9Z2QucG9pbnRlckxlYXZlLGs9Z2QucG9pbnRlckVudGVyLG49XCJwb2ludGVyXCI7YT1udWxsPT1mP2U6T2EoZik7ZT1udWxsPT1iP2U6T2EoYik7aD1nLmdldFBvb2xlZChoLGYsYyxkKTtoLnR5cGU9bitcImxlYXZlXCI7aC50YXJnZXQ9YTtoLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGssYixjLGQpO2MudHlwZT1uK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1hO1phKGgsXG5jLGYsYik7cmV0dXJuW2gsY119fTtmdW5jdGlvbiBpZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBqZChhKXsyIT09aWQoYSk/QShcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBrZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1pZChhKSwzPT09Yj9BKFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBqZChlKSxhO2lmKGc9PT1kKXJldHVybiBqZChlKSxiO2c9Zy5zaWJsaW5nfUEoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDpBKFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/QShcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP0EoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gbGQoYSl7YT1rZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG1kKGEpe2E9a2QoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgbmQ9SC5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLG9kPUguZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSkscGQ9YWQuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtcbmZ1bmN0aW9uIHFkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHJkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxzZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sdGQ9YWQuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXJkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPXFkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9zZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZGQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/cWQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/cWQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSx1ZD1lZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdmQ9YWQuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZGR9KSx3ZD1ILmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx4ZD1lZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHlkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW2ZiLFwiYW5pbWF0aW9uRW5kXCJdLFtnYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbaGIsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFtpYixcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLHpkPXt9LEFkPXt9O2Z1bmN0aW9uIEJkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07emRbYV09YjtBZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxbXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sXG5bXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7QmQoYSwhMCl9KTt5ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe0JkKGEsITEpfSk7XG52YXIgQ2Q9e2V2ZW50VHlwZXM6emQsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9QWRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPUFkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09cWQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXRkO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1wZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPWVkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG51ZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXZkO2JyZWFrO2Nhc2UgZmI6Y2FzZSBnYjpjYXNlIGhiOmE9bmQ7YnJlYWs7Y2FzZSBpYjphPXdkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPWFkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9eGQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1vZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPWZkO2JyZWFrO2RlZmF1bHQ6YT1IfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7WWEoYik7cmV0dXJuIGJ9fSxEZD1DZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG5FZD1bXTtmdW5jdGlvbiBGZChhKXt2YXIgYj1hLnRhcmdldEluc3Q7ZG97aWYoIWIpe2EuYW5jZXN0b3JzLnB1c2goYik7YnJlYWt9dmFyIGM7Zm9yKGM9YjtjLnJldHVybjspYz1jLnJldHVybjtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPU5hKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sSmEoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LFpiKGEubmF0aXZlRXZlbnQpKX12YXIgR2Q9ITA7ZnVuY3Rpb24gSWQoYSl7R2Q9ISFhfWZ1bmN0aW9uIEwoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRGQoYSk/SmQ6S2QpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1cbmZ1bmN0aW9uIExkKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KERkKGEpP0pkOktkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gSmQoYSxiKXtUYihLZCxhLGIpfWZ1bmN0aW9uIEtkKGEsYil7aWYoR2Qpe3ZhciBjPVpiKGIpO2M9TmEoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1pZChjKXx8KGM9bnVsbCk7aWYoRWQubGVuZ3RoKXt2YXIgZD1FZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtXYihGZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPkVkLmxlbmd0aCYmRWQucHVzaChhKX19fVxudmFyIE1kPXtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gR2R9LHNldEVuYWJsZWQ6SWQsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIEdkfSx0cmFwQnViYmxlZEV2ZW50OkwsdHJhcENhcHR1cmVkRXZlbnQ6TGQsZGlzcGF0Y2hFdmVudDpLZH0sTmQ9e30sT2Q9MCxQZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7ZnVuY3Rpb24gUWQoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsUGQpfHwoYVtQZF09T2QrKyxOZFthW1BkXV09e30pO3JldHVybiBOZFthW1BkXV19ZnVuY3Rpb24gUmQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gU2QoYSxiKXt2YXIgYz1SZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1SZChjKX19ZnVuY3Rpb24gVGQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmXCJ0ZXh0XCI9PT1hLnR5cGV8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFVkPW0uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsVmQ9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxXZD1udWxsLFhkPW51bGwsWWQ9bnVsbCxaZD0hMTtcbmZ1bmN0aW9uICRkKGEsYil7aWYoWmR8fG51bGw9PVdkfHxXZCE9PWRhKCkpcmV0dXJuIG51bGw7dmFyIGM9V2Q7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmVGQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OndpbmRvdy5nZXRTZWxlY3Rpb24/KGM9d2luZG93LmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pOmM9dm9pZCAwO3JldHVybiBZZCYmZWEoWWQsYyk/bnVsbDooWWQ9YyxhPUguZ2V0UG9vbGVkKFZkLnNlbGVjdCxYZCxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PVdkLFlhKGEpLGEpfVxudmFyIGFlPXtldmVudFR5cGVzOlZkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPVFkKGUpO2Y9c2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoaCl8fCFlW2hdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9PYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKFliKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKVdkPWUsWGQ9YixZZD1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6WWQ9WGQ9V2Q9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6WmQ9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpyZXR1cm4gWmQ9ITEsJGQoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoVWQpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiAkZChjLGQpfXJldHVybiBudWxsfX07R2EuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIFRhcEV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt3YT1RYS5nZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlO3hhPVFhLmdldEluc3RhbmNlRnJvbU5vZGU7eWE9UWEuZ2V0Tm9kZUZyb21JbnN0YW5jZTtHYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOkNkLEVudGVyTGVhdmVFdmVudFBsdWdpbjpoZCxDaGFuZ2VFdmVudFBsdWdpbjokYyxTZWxlY3RFdmVudFBsdWdpbjphZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOklifSk7dmFyIGJlPXZvaWQgMDtcbmJlPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3c/ZnVuY3Rpb24oKXtyZXR1cm4gcGVyZm9ybWFuY2Uubm93KCl9OmZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCl9O3ZhciBjZT12b2lkIDAsZGU9dm9pZCAwO1xuaWYobS5jYW5Vc2VET00pe3ZhciBlZT1bXSxmZT0wLGdlPXt9LGhlPS0xLGllPSExLGplPSExLGtlPTAsbGU9MzMsbWU9MzMsbmU9e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPWtlLWJlKCk7cmV0dXJuIDA8YT9hOjB9fSxvZT1mdW5jdGlvbihhLGIpe2lmKGdlW2JdKXRyeXthKG5lKX1maW5hbGx5e2RlbGV0ZSBnZVtiXX19LHBlPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXtpZihhLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09cGUmJihpZT0hMSwwIT09ZWUubGVuZ3RoKSl7aWYoMCE9PWVlLmxlbmd0aCYmKGE9YmUoKSwhKC0xPT09aGV8fGhlPmEpKSl7aGU9LTE7bmUuZGlkVGltZW91dD0hMDtmb3IodmFyIGI9MCxjPWVlLmxlbmd0aDtiPGM7YisrKXt2YXIgZD1lZVtiXSxlPWQudGltZW91dFRpbWU7LTEhPT1cbmUmJmU8PWE/b2UoZC5zY2hlZHVsZWRDYWxsYmFjayxkLmNhbGxiYWNrSWQpOi0xIT09ZSYmKC0xPT09aGV8fGU8aGUpJiYoaGU9ZSl9fWZvcihhPWJlKCk7MDxrZS1hJiYwPGVlLmxlbmd0aDspYT1lZS5zaGlmdCgpLG5lLmRpZFRpbWVvdXQ9ITEsb2UoYS5zY2hlZHVsZWRDYWxsYmFjayxhLmNhbGxiYWNrSWQpLGE9YmUoKTswPGVlLmxlbmd0aCYmIWplJiYoamU9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKHFlKSl9fSwhMSk7dmFyIHFlPWZ1bmN0aW9uKGEpe2plPSExO3ZhciBiPWEta2UrbWU7YjxtZSYmbGU8bWU/KDg+YiYmKGI9OCksbWU9YjxsZT9sZTpiKTpsZT1iO2tlPWErbWU7aWV8fChpZT0hMCx3aW5kb3cucG9zdE1lc3NhZ2UocGUsXCIqXCIpKX07Y2U9ZnVuY3Rpb24oYSxiKXt2YXIgYz0tMTtudWxsIT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCYmKGM9YmUoKStiLnRpbWVvdXQpO2lmKC0xPT09aGV8fC0xIT09YyYmYzxoZSloZT1jO2ZlKys7Yj1mZTtlZS5wdXNoKHtzY2hlZHVsZWRDYWxsYmFjazphLFxuY2FsbGJhY2tJZDpiLHRpbWVvdXRUaW1lOmN9KTtnZVtiXT0hMDtqZXx8KGplPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShxZSkpO3JldHVybiBifTtkZT1mdW5jdGlvbihhKXtkZWxldGUgZ2VbYV19fWVsc2V7dmFyIHJlPTAsc2U9e307Y2U9ZnVuY3Rpb24oYSl7dmFyIGI9cmUrKyxjPXNldFRpbWVvdXQoZnVuY3Rpb24oKXthKHt0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIEluZmluaXR5fSxkaWRUaW1lb3V0OiExfSl9KTtzZVtiXT1jO3JldHVybiBifTtkZT1mdW5jdGlvbihhKXt2YXIgYj1zZVthXTtkZWxldGUgc2VbYV07Y2xlYXJUaW1lb3V0KGIpfX1mdW5jdGlvbiB0ZShhKXt2YXIgYj1cIlwiO2NhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsPT1hfHxcInN0cmluZ1wiIT09dHlwZW9mIGEmJlwibnVtYmVyXCIhPT10eXBlb2YgYXx8KGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiB1ZShhLGIpe2E9cCh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPXRlKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiB2ZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrYztiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gd2UoYSxiKXt2YXIgYz1iLnZhbHVlO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOm51bGwhPWM/YzpiLmRlZmF1bHRWYWx1ZSx3YXNNdWx0aXBsZTohIWIubXVsdGlwbGV9fWZ1bmN0aW9uIHhlKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9BKFwiOTFcIik6dm9pZCAwO3JldHVybiBwKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIHllKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/QShcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOkEoXCI5M1wiKSxiPWJbMF0pLGM9XCJcIitiKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6XCJcIitjfX1cbmZ1bmN0aW9uIHplKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9Yi5kZWZhdWx0VmFsdWUpfWZ1bmN0aW9uIEFlKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBCZT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBDZShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIERlKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9DZShiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBFZT12b2lkIDAsRmU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09QmUuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7RWU9RWV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7RWUuaW5uZXJIVE1MPVwiPHN2Zz5cIitiK1wiPC9zdmc+XCI7Zm9yKGI9RWUuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gR2UoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBIZT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLFxuc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxJZT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoSGUpLmZvckVhY2goZnVuY3Rpb24oYSl7SWUuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtIZVtiXT1IZVthXX0pfSk7XG5mdW5jdGlvbiBKZShhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIik7dmFyIGU9Yzt2YXIgZj1iW2NdO2U9bnVsbD09Znx8XCJib29sZWFuXCI9PT10eXBlb2YgZnx8XCJcIj09PWY/XCJcIjpkfHxcIm51bWJlclwiIT09dHlwZW9mIGZ8fDA9PT1mfHxIZS5oYXNPd25Qcm9wZXJ0eShlKSYmSGVbZV0/KFwiXCIrZikudHJpbSgpOmYrXCJweFwiO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgS2U9cCh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIExlKGEsYixjKXtiJiYoS2VbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0EoXCIxMzdcIixhLGMoKSk6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj9BKFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOkEoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP0EoXCI2MlwiLGMoKSk6dm9pZCAwKX1cbmZ1bmN0aW9uIE1lKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgTmU9di50aGF0UmV0dXJucyhcIlwiKTtcbmZ1bmN0aW9uIE9lKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPVFkKGEpO2I9c2FbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07aWYoIWMuaGFzT3duUHJvcGVydHkoZSl8fCFjW2VdKXtzd2l0Y2goZSl7Y2FzZSBcInNjcm9sbFwiOkxkKFwic2Nyb2xsXCIsYSk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpMZChcImZvY3VzXCIsYSk7TGQoXCJibHVyXCIsYSk7Yy5ibHVyPSEwO2MuZm9jdXM9ITA7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOiRiKGUsITApJiZMZChlLGEpO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1qYi5pbmRleE9mKGUpJiZMKGUsYSl9Y1tlXT0hMH19fVxuZnVuY3Rpb24gUGUoYSxiLGMsZCl7Yz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtkPT09QmUuaHRtbCYmKGQ9Q2UoYSkpO2Q9PT1CZS5odG1sP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gUWUoYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gUmUoYSxiLGMsZCl7dmFyIGU9TWUoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpMKFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGY9MDtmPGpiLmxlbmd0aDtmKyspTChqYltmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkwoXCJlcnJvclwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpMKFwiZXJyb3JcIixhKTtMKFwibG9hZFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZm9ybVwiOkwoXCJyZXNldFwiLGEpO0woXCJzdWJtaXRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpMKFwidG9nZ2xlXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkdjKGEsYyk7Zj1GYyhhLGMpO0woXCJpbnZhbGlkXCIsYSk7T2UoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPXVlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOndlKGEsYyk7Zj1wKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1xuTChcImludmFsaWRcIixhKTtPZShkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eWUoYSxjKTtmPXhlKGEsYyk7TChcImludmFsaWRcIixhKTtPZShkLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpmPWN9TGUoYixmLE5lKTt2YXIgZz1mLGg7Zm9yKGggaW4gZylpZihnLmhhc093blByb3BlcnR5KGgpKXt2YXIgaz1nW2hdO1wic3R5bGVcIj09PWg/SmUoYSxrLE5lKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJkZlKGEsaykpOlwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1ifHxcIlwiIT09aykmJkdlKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZHZShhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKHJhLmhhc093blByb3BlcnR5KGgpP251bGwhPWsmJk9lKGQsXG5oKTpudWxsIT1rJiZFYyhhLGgsayxlKSl9c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmNjKGEpO0xjKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2MoYSk7QWUoYSxjKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9Yy52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLGMudmFsdWUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtiPWMudmFsdWU7bnVsbCE9Yj92ZShhLCEhYy5tdWx0aXBsZSxiLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmdmUoYSwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGEub25jbGljaz12KX19XG5mdW5jdGlvbiBTZShhLGIsYyxkLGUpe3ZhciBmPW51bGw7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmM9RmMoYSxjKTtkPUZjKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Yz11ZShhLGMpO2Q9dWUoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjPXAoe30sYyx7dmFsdWU6dm9pZCAwfSk7ZD1wKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Yz14ZShhLGMpO2Q9eGUoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGMub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz12KX1MZShiLGQsTmUpO2I9YT12b2lkIDA7dmFyIGc9bnVsbDtmb3IoYSBpbiBjKWlmKCFkLmhhc093blByb3BlcnR5KGEpJiZjLmhhc093blByb3BlcnR5KGEpJiZudWxsIT1jW2FdKWlmKFwic3R5bGVcIj09PWEpe3ZhciBoPWNbYV07Zm9yKGIgaW4gaCloLmhhc093blByb3BlcnR5KGIpJiYoZ3x8XG4oZz17fSksZ1tiXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YSYmXCJjaGlsZHJlblwiIT09YSYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiZcImF1dG9Gb2N1c1wiIT09YSYmKHJhLmhhc093blByb3BlcnR5KGEpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChhLG51bGwpKTtmb3IoYSBpbiBkKXt2YXIgaz1kW2FdO2g9bnVsbCE9Yz9jW2FdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGEpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWEpaWYoaCl7Zm9yKGIgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShiKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShiKXx8KGd8fChnPXt9KSxnW2JdPVwiXCIpO2ZvcihiIGluIGspay5oYXNPd25Qcm9wZXJ0eShiKSYmaFtiXSE9PWtbYl0mJihnfHwoZz17fSksZ1tiXT1rW2JdKX1lbHNlIGd8fChmfHwoZj1bXSksZi5wdXNoKGEsZykpLFxuZz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1hPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09YT9oPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJihyYS5oYXNPd25Qcm9wZXJ0eShhKT8obnVsbCE9ayYmT2UoZSxhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChhLGspKX1nJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsZyk7cmV0dXJuIGZ9XG5mdW5jdGlvbiBUZShhLGIsYyxkLGUpe1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZJYyhhLGUpO01lKGMsZCk7ZD1NZShjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGc9YltmXSxoPWJbZisxXTtcInN0eWxlXCI9PT1nP0plKGEsaCxOZSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9GZShhLGgpOlwiY2hpbGRyZW5cIj09PWc/R2UoYSxoKTpFYyhhLGcsaCxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6SmMoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp6ZShhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlPXZvaWQgMCxiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP3ZlKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9cbnZlKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLCEwKTp2ZShhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19XG5mdW5jdGlvbiBVZShhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkwoXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGQ9MDtkPGpiLmxlbmd0aDtkKyspTChqYltkXSxhKTticmVhaztjYXNlIFwic291cmNlXCI6TChcImVycm9yXCIsYSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6TChcImVycm9yXCIsYSk7TChcImxvYWRcIixhKTticmVhaztjYXNlIFwiZm9ybVwiOkwoXCJyZXNldFwiLGEpO0woXCJzdWJtaXRcIixhKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkwoXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpHYyhhLGMpO0woXCJpbnZhbGlkXCIsYSk7T2UoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp3ZShhLGMpO0woXCJpbnZhbGlkXCIsYSk7T2UoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnllKGEsYyksTChcImludmFsaWRcIixhKSxPZShlLFwib25DaGFuZ2VcIil9TGUoYixcbmMsTmUpO2Q9bnVsbDtmb3IodmFyIGYgaW4gYylpZihjLmhhc093blByb3BlcnR5KGYpKXt2YXIgZz1jW2ZdO1wiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBnP2EudGV4dENvbnRlbnQhPT1nJiYoZD1bXCJjaGlsZHJlblwiLGddKTpcIm51bWJlclwiPT09dHlwZW9mIGcmJmEudGV4dENvbnRlbnQhPT1cIlwiK2cmJihkPVtcImNoaWxkcmVuXCIsXCJcIitnXSk6cmEuaGFzT3duUHJvcGVydHkoZikmJm51bGwhPWcmJk9lKGUsZil9c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmNjKGEpO0xjKGEsYyk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2MoYSk7QWUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGMub25DbGljayYmKGEub25jbGljaz12KX1yZXR1cm4gZH1mdW5jdGlvbiBWZShhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgV2U9e2NyZWF0ZUVsZW1lbnQ6UGUsY3JlYXRlVGV4dE5vZGU6UWUsc2V0SW5pdGlhbFByb3BlcnRpZXM6UmUsZGlmZlByb3BlcnRpZXM6U2UsdXBkYXRlUHJvcGVydGllczpUZSxkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzOlVlLGRpZmZIeWRyYXRlZFRleHQ6VmUsd2FybkZvclVubWF0Y2hlZFRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0OmZ1bmN0aW9uKCl7fSxyZXN0b3JlQ29udHJvbGxlZFN0YXRlOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6SmMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtcbmM9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9UGEoZCk7ZT92b2lkIDA6QShcIjkwXCIpO2RjKGQpO0pjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjp6ZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmdmUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fX0sWGU9bnVsbCxZZT1udWxsO2Z1bmN0aW9uIFplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uICRlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwic3RyaW5nXCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIGFmPWJlLGJmPWNlLGNmPWRlO2Z1bmN0aW9uIGRmKGEpe2ZvcihhPWEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZWYoYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfW5ldyBTZXQ7dmFyIGZmPVtdLGdmPS0xO2Z1bmN0aW9uIGhmKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gTShhKXswPmdmfHwoYS5jdXJyZW50PWZmW2dmXSxmZltnZl09bnVsbCxnZi0tKX1mdW5jdGlvbiBOKGEsYil7Z2YrKztmZltnZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBqZj1oZihoYSksTz1oZighMSksa2Y9aGE7ZnVuY3Rpb24gbGYoYSl7cmV0dXJuIG1mKGEpP2tmOmpmLmN1cnJlbnR9XG5mdW5jdGlvbiBuZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIGhhO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIG1mKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jaGlsZENvbnRleHRUeXBlc31mdW5jdGlvbiBvZihhKXttZihhKSYmKE0oTyxhKSxNKGpmLGEpKX1mdW5jdGlvbiBwZihhKXtNKE8sYSk7TShqZixhKX1cbmZ1bmN0aW9uIHFmKGEsYixjKXtqZi5jdXJyZW50IT09aGE/QShcIjE2OFwiKTp2b2lkIDA7TihqZixiLGEpO04oTyxjLGEpfWZ1bmN0aW9uIHJmKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGUsZD1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBiO2M9Yy5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gYyllIGluIGQ/dm9pZCAwOkEoXCIxMDhcIix0YyhhKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIHAoe30sYixjKX1mdW5jdGlvbiBzZihhKXtpZighbWYoYSkpcmV0dXJuITE7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxoYTtrZj1qZi5jdXJyZW50O04oamYsYixhKTtOKE8sTy5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gdGYoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtjP3ZvaWQgMDpBKFwiMTY5XCIpO2lmKGIpe3ZhciBkPXJmKGEsa2YpO2MuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9ZDtNKE8sYSk7TShqZixhKTtOKGpmLGQsYSl9ZWxzZSBNKE8sYSk7TihPLGIsYSl9XG5mdW5jdGlvbiB1ZihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuZnVuY3Rpb24gdmYoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyB1ZihhLnRhZyxiLGEua2V5LGEubW9kZSksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLnBlbmRpbmdQcm9wcz1iLGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmV4cGlyYXRpb25UaW1lPWM7ZC5jaGlsZD1hLmNoaWxkO2QubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7ZC5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7ZC5zaWJsaW5nPWEuc2libGluZztkLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiB3ZihhLGIsYyl7dmFyIGQ9YS50eXBlLGU9YS5rZXk7YT1hLnByb3BzO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXZhciBmPWQucHJvdG90eXBlJiZkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PzI6MDtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgZClmPTU7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBoYzpyZXR1cm4geGYoYS5jaGlsZHJlbixiLGMsZSk7Y2FzZSBvYzpmPTExO2J8PTM7YnJlYWs7Y2FzZSBpYzpmPTExO2J8PTI7YnJlYWs7Y2FzZSBqYzpyZXR1cm4gZD1uZXcgdWYoMTUsYSxlLGJ8NCksZC50eXBlPWpjLGQuZXhwaXJhdGlvblRpbWU9YyxkO2Nhc2UgcWM6Zj0xNjtifD0yO2JyZWFrO2RlZmF1bHQ6YTp7c3dpdGNoKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQ/ZC4kJHR5cGVvZjpudWxsKXtjYXNlIG1jOmY9MTM7YnJlYWsgYTtjYXNlIG5jOmY9MTI7YnJlYWsgYTtjYXNlIHBjOmY9MTQ7YnJlYWsgYTtkZWZhdWx0OkEoXCIxMzBcIixudWxsPT1kP1xuZDp0eXBlb2YgZCxcIlwiKX1mPXZvaWQgMH19Yj1uZXcgdWYoZixhLGUsYik7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIHhmKGEsYixjLGQpe2E9bmV3IHVmKDEwLGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24geWYoYSxiLGMpe2E9bmV3IHVmKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiB6ZihhLGIsYyl7Yj1uZXcgdWYoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBBZihhLGIsYyl7Yj1uZXcgdWYoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwsZWFybGllc3RQZW5kaW5nVGltZTowLGxhdGVzdFBlbmRpbmdUaW1lOjAsZWFybGllc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFBpbmdlZFRpbWU6MCxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMscmVtYWluaW5nRXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07cmV0dXJuIGIuc3RhdGVOb2RlPWF9dmFyIEJmPW51bGwsQ2Y9bnVsbDtmdW5jdGlvbiBEZihhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fVxuZnVuY3Rpb24gRWYoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7QmY9RGYoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO0NmPURmKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9ZnVuY3Rpb24gRmYoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEJmJiZCZihhKX1mdW5jdGlvbiBHZihhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQ2YmJkNmKGEpfXZhciBIZj0hMTtcbmZ1bmN0aW9uIElmKGEpe3JldHVybntleHBpcmF0aW9uVGltZTowLGJhc2VTdGF0ZTphLGZpcnN0VXBkYXRlOm51bGwsbGFzdFVwZGF0ZTpudWxsLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fWZ1bmN0aW9uIEpmKGEpe3JldHVybntleHBpcmF0aW9uVGltZTphLmV4cGlyYXRpb25UaW1lLGJhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gS2YoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gTGYoYSxiLGMpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yik7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+YylhLmV4cGlyYXRpb25UaW1lPWN9XG5mdW5jdGlvbiBNZihhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7aWYobnVsbD09PWQpe3ZhciBlPWEudXBkYXRlUXVldWU7dmFyIGY9bnVsbDtudWxsPT09ZSYmKGU9YS51cGRhdGVRdWV1ZT1JZihhLm1lbW9pemVkU3RhdGUpKX1lbHNlIGU9YS51cGRhdGVRdWV1ZSxmPWQudXBkYXRlUXVldWUsbnVsbD09PWU/bnVsbD09PWY/KGU9YS51cGRhdGVRdWV1ZT1JZihhLm1lbW9pemVkU3RhdGUpLGY9ZC51cGRhdGVRdWV1ZT1JZihkLm1lbW9pemVkU3RhdGUpKTplPWEudXBkYXRlUXVldWU9SmYoZik6bnVsbD09PWYmJihmPWQudXBkYXRlUXVldWU9SmYoZSkpO251bGw9PT1mfHxlPT09Zj9MZihlLGIsYyk6bnVsbD09PWUubGFzdFVwZGF0ZXx8bnVsbD09PWYubGFzdFVwZGF0ZT8oTGYoZSxiLGMpLExmKGYsYixjKSk6KExmKGUsYixjKSxmLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBOZihhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtkPW51bGw9PT1kP2EudXBkYXRlUXVldWU9SWYoYS5tZW1vaXplZFN0YXRlKTpPZihhLGQpO251bGw9PT1kLmxhc3RDYXB0dXJlZFVwZGF0ZT9kLmZpcnN0Q2FwdHVyZWRVcGRhdGU9ZC5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooZC5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGQubGFzdENhcHR1cmVkVXBkYXRlPWIpO2lmKDA9PT1kLmV4cGlyYXRpb25UaW1lfHxkLmV4cGlyYXRpb25UaW1lPmMpZC5leHBpcmF0aW9uVGltZT1jfWZ1bmN0aW9uIE9mKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPUpmKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFBmKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgMTpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgMzphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXw2NDtjYXNlIDA6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIHAoe30sZCxlKTtjYXNlIDI6SGY9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiBRZihhLGIsYyxkLGUpe0hmPSExO2lmKCEoMD09PWIuZXhwaXJhdGlvblRpbWV8fGIuZXhwaXJhdGlvblRpbWU+ZSkpe2I9T2YoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxrPWIuZmlyc3RVcGRhdGUsbj1mO251bGwhPT1rOyl7dmFyIHI9ay5leHBpcmF0aW9uVGltZTtpZihyPmUpe2lmKG51bGw9PT1nJiYoZz1rLGY9biksMD09PWh8fGg+ciloPXJ9ZWxzZSBuPVBmKGEsYixrLG4sYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWs6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0RWZmZWN0PWspKTtrPWsubmV4dH1yPW51bGw7Zm9yKGs9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1rOyl7dmFyIHc9ay5leHBpcmF0aW9uVGltZTtpZih3PmUpe2lmKG51bGw9PT1yJiYocj1rLG51bGw9PT1cbmcmJihmPW4pKSwwPT09aHx8aD53KWg9d31lbHNlIG49UGYoYSxiLGssbixjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9azooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdENhcHR1cmVkRWZmZWN0PWspKTtrPWsubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09cj9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PXImJihmPW4pO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1yO2IuZXhwaXJhdGlvblRpbWU9aDthLm1lbW9pemVkU3RhdGU9bn19XG5mdW5jdGlvbiBSZihhLGIpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBhP0EoXCIxOTFcIixhKTp2b2lkIDA7YS5jYWxsKGIpfVxuZnVuY3Rpb24gU2YoYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO2E9Yi5maXJzdEVmZmVjdDtmb3IoYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtudWxsIT09YTspe3ZhciBkPWEuY2FsbGJhY2s7bnVsbCE9PWQmJihhLmNhbGxiYWNrPW51bGwsUmYoZCxjKSk7YT1hLm5leHRFZmZlY3R9YT1iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q7Zm9yKGIuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsO251bGwhPT1hOyliPWEuY2FsbGJhY2ssbnVsbCE9PWImJihhLmNhbGxiYWNrPW51bGwsUmYoYixjKSksYT1hLm5leHRFZmZlY3R9XG5mdW5jdGlvbiBUZihhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnZjKGIpfX12YXIgVWY9aGYobnVsbCksVmY9aGYobnVsbCksV2Y9aGYoMCk7ZnVuY3Rpb24gWGYoYSl7dmFyIGI9YS50eXBlLl9jb250ZXh0O04oV2YsYi5fY2hhbmdlZEJpdHMsYSk7TihWZixiLl9jdXJyZW50VmFsdWUsYSk7TihVZixhLGEpO2IuX2N1cnJlbnRWYWx1ZT1hLnBlbmRpbmdQcm9wcy52YWx1ZTtiLl9jaGFuZ2VkQml0cz1hLnN0YXRlTm9kZX1mdW5jdGlvbiBZZihhKXt2YXIgYj1XZi5jdXJyZW50LGM9VmYuY3VycmVudDtNKFVmLGEpO00oVmYsYSk7TShXZixhKTthPWEudHlwZS5fY29udGV4dDthLl9jdXJyZW50VmFsdWU9YzthLl9jaGFuZ2VkQml0cz1ifXZhciBaZj17fSwkZj1oZihaZiksYWc9aGYoWmYpLGJnPWhmKFpmKTtmdW5jdGlvbiBjZyhhKXthPT09WmY/QShcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9XG5mdW5jdGlvbiBkZyhhLGIpe04oYmcsYixhKTtOKGFnLGEsYSk7TigkZixaZixhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpEZShudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9RGUoYixjKX1NKCRmLGEpO04oJGYsYixhKX1mdW5jdGlvbiBlZyhhKXtNKCRmLGEpO00oYWcsYSk7TShiZyxhKX1mdW5jdGlvbiBmZyhhKXthZy5jdXJyZW50PT09YSYmKE0oJGYsYSksTShhZyxhKSl9ZnVuY3Rpb24gaGcoYSxiLGMpe3ZhciBkPWEubWVtb2l6ZWRTdGF0ZTtiPWIoYyxkKTtkPW51bGw9PT1ifHx2b2lkIDA9PT1iP2Q6cCh7fSxkLGIpO2EubWVtb2l6ZWRTdGF0ZT1kO2E9YS51cGRhdGVRdWV1ZTtudWxsIT09YSYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihhLmJhc2VTdGF0ZT1kKX1cbnZhciBsZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWlkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWlnKCk7ZD1qZyhkLGEpO3ZhciBlPUtmKGQpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtNZihhLGUsZCk7a2coYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9aWcoKTtkPWpnKGQsYSk7dmFyIGU9S2YoZCk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7TWYoYSxlLGQpO2tnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPWlnKCk7Yz1qZyhjLGEpO3ZhciBkPUtmKGMpO2QudGFnPTI7dm9pZCAwIT09XG5iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7TWYoYSxkLGMpO2tnKGEsYyl9fTtmdW5jdGlvbiBtZyhhLGIsYyxkLGUsZil7dmFyIGc9YS5zdGF0ZU5vZGU7YT1hLnR5cGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2cuc2hvdWxkQ29tcG9uZW50VXBkYXRlKGMsZSxmKTphLnByb3RvdHlwZSYmYS5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWVhKGIsYyl8fCFlYShkLGUpOiEwfVxuZnVuY3Rpb24gbmcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJmxnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gb2coYSxiKXt2YXIgYz1hLnR5cGUsZD1hLnN0YXRlTm9kZSxlPWEucGVuZGluZ1Byb3BzLGY9bGYoYSk7ZC5wcm9wcz1lO2Quc3RhdGU9YS5tZW1vaXplZFN0YXRlO2QucmVmcz1oYTtkLmNvbnRleHQ9bmYoYSxmKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJihRZihhLGYsZSxkLGIpLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihoZyhhLGYsZSksZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudHx8KGM9ZC5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnQmJlxuZC5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxjIT09ZC5zdGF0ZSYmbGcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShkLGQuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoUWYoYSxmLGUsZCxiKSxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBwZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gcWcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMiE9PWMudGFnP0EoXCIxMTBcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOkEoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM9PT1oYT9kLnJlZnM9e306ZC5yZWZzO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP0EoXCIxNDhcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDpBKFwiMjU0XCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiByZyhhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmQShcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gc2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT12ZihhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXlmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi50eXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPXFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD13ZihjLGEubW9kZSxkKTtkLnJlZj1xZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBuKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbnpmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHIoYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8MTAhPT1iLnRhZylyZXR1cm4gYj14ZihjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gdyhhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9eWYoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgZmM6cmV0dXJuIGM9d2YoYixhLm1vZGUsYyksYy5yZWY9cWcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIGdjOnJldHVybiBiPXpmKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihwZyhiKXx8c2MoYikpcmV0dXJuIGI9eGYoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1cbmEsYjtyZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIFAoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgZmM6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1oYz9yKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgZ2M6cmV0dXJuIGMua2V5PT09ZT9uKGEsYixjLGQpOm51bGx9aWYocGcoYyl8fHNjKGMpKXJldHVybiBudWxsIT09ZT9udWxsOnIoYSxiLGMsZCxudWxsKTtyZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIGtjKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO1xuaWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgZmM6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWhjP3IoYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIGdjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxuKGIsYSxkLGUpfWlmKHBnKGQpfHxzYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxyKGIsYSxkLGUsbnVsbCk7cmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBIZChlLGcsaCxrKXtmb3IodmFyIHU9bnVsbCx4PW51bGwsdD1nLHE9Zz0wLG49bnVsbDtudWxsIT09dCYmcTxoLmxlbmd0aDtxKyspe3QuaW5kZXg+cT8obj10LHQ9bnVsbCk6bj10LnNpYmxpbmc7dmFyIGw9UChlLHQsaFtxXSxrKTtpZihudWxsPT09bCl7bnVsbD09PXQmJih0PW4pO2JyZWFrfWEmJnQmJm51bGw9PT1sLmFsdGVybmF0ZSYmYihlLFxudCk7Zz1mKGwsZyxxKTtudWxsPT09eD91PWw6eC5zaWJsaW5nPWw7eD1sO3Q9bn1pZihxPT09aC5sZW5ndGgpcmV0dXJuIGMoZSx0KSx1O2lmKG51bGw9PT10KXtmb3IoO3E8aC5sZW5ndGg7cSsrKWlmKHQ9dyhlLGhbcV0saykpZz1mKHQsZyxxKSxudWxsPT09eD91PXQ6eC5zaWJsaW5nPXQseD10O3JldHVybiB1fWZvcih0PWQoZSx0KTtxPGgubGVuZ3RoO3ErKylpZihuPWtjKHQsZSxxLGhbcV0saykpYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09bi5rZXk/cTpuLmtleSksZz1mKG4sZyxxKSxudWxsPT09eD91PW46eC5zaWJsaW5nPW4seD1uO2EmJnQuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHV9ZnVuY3Rpb24gRShlLGcsaCxrKXt2YXIgdD1zYyhoKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgdD9BKFwiMTUwXCIpOnZvaWQgMDtoPXQuY2FsbChoKTtudWxsPT1oP0EoXCIxNTFcIik6dm9pZCAwO2Zvcih2YXIgdT10PW51bGwsbj1nLHg9XG5nPTAseT1udWxsLGw9aC5uZXh0KCk7bnVsbCE9PW4mJiFsLmRvbmU7eCsrLGw9aC5uZXh0KCkpe24uaW5kZXg+eD8oeT1uLG49bnVsbCk6eT1uLnNpYmxpbmc7dmFyIHI9UChlLG4sbC52YWx1ZSxrKTtpZihudWxsPT09cil7bnx8KG49eSk7YnJlYWt9YSYmbiYmbnVsbD09PXIuYWx0ZXJuYXRlJiZiKGUsbik7Zz1mKHIsZyx4KTtudWxsPT09dT90PXI6dS5zaWJsaW5nPXI7dT1yO249eX1pZihsLmRvbmUpcmV0dXJuIGMoZSxuKSx0O2lmKG51bGw9PT1uKXtmb3IoOyFsLmRvbmU7eCsrLGw9aC5uZXh0KCkpbD13KGUsbC52YWx1ZSxrKSxudWxsIT09bCYmKGc9ZihsLGcseCksbnVsbD09PXU/dD1sOnUuc2libGluZz1sLHU9bCk7cmV0dXJuIHR9Zm9yKG49ZChlLG4pOyFsLmRvbmU7eCsrLGw9aC5uZXh0KCkpbD1rYyhuLGUseCxsLnZhbHVlLGspLG51bGwhPT1sJiYoYSYmbnVsbCE9PWwuYWx0ZXJuYXRlJiZuLmRlbGV0ZShudWxsPT09bC5rZXk/eDpsLmtleSksZz1mKGwsZyx4KSxudWxsPT09XG51P3Q9bDp1LnNpYmxpbmc9bCx1PWwpO2EmJm4uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHR9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWhjJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYoaylzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBmYzphOnt2YXIgbj1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1uKWlmKDEwPT09ay50YWc/Zi50eXBlPT09aGM6ay50eXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnR5cGU9PT1oYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsaCk7ZC5yZWY9cWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09aGM/KGQ9eGYoZi5wcm9wcy5jaGlsZHJlbixcbmEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9d2YoZixhLm1vZGUsaCksaC5yZWY9cWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIGdjOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9emYoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49XG5hLGE9ZCk6KGMoYSxkKSxkPXlmKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKHBnKGYpKXJldHVybiBIZChhLGQsZixoKTtpZihzYyhmKSlyZXR1cm4gRShhLGQsZixoKTtrJiZyZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZilzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDE6aD1hLnR5cGUsQShcIjE1MlwiLGguZGlzcGxheU5hbWV8fGgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIHRnPXNnKCEwKSx1Zz1zZyghMSksdmc9bnVsbCx3Zz1udWxsLHhnPSExO2Z1bmN0aW9uIHlnKGEsYil7dmFyIGM9bmV3IHVmKDUsbnVsbCxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfVxuZnVuY3Rpb24gemcoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gQWcoYSl7aWYoeGcpe3ZhciBiPXdnO2lmKGIpe3ZhciBjPWI7aWYoIXpnKGEsYikpe2I9ZGYoYyk7aWYoIWJ8fCF6ZyhhLGIpKXthLmVmZmVjdFRhZ3w9Mjt4Zz0hMTt2Zz1hO3JldHVybn15Zyh2ZyxjKX12Zz1hO3dnPWVmKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIseGc9ITEsdmc9YX19XG5mdW5jdGlvbiBCZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWc7KWE9YS5yZXR1cm47dmc9YX1mdW5jdGlvbiBDZyhhKXtpZihhIT09dmcpcmV0dXJuITE7aWYoIXhnKXJldHVybiBCZyhhKSx4Zz0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmISRlKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj13ZztiOyl5ZyhhLGIpLGI9ZGYoYik7QmcoYSk7d2c9dmc/ZGYoYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gRGcoKXt3Zz12Zz1udWxsO3hnPSExfWZ1bmN0aW9uIFEoYSxiLGMpe0VnKGEsYixjLGIuZXhwaXJhdGlvblRpbWUpfWZ1bmN0aW9uIEVnKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/dWcoYixudWxsLGMsZCk6dGcoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBGZyhhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIEdnKGEsYixjLGQsZSl7RmcoYSxiKTt2YXIgZj0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighYyYmIWYpcmV0dXJuIGQmJnRmKGIsITEpLFIoYSxiKTtjPWIuc3RhdGVOb2RlO2VjLmN1cnJlbnQ9Yjt2YXIgZz1mP251bGw6Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtmJiYoRWcoYSxiLG51bGwsZSksYi5jaGlsZD1udWxsKTtFZyhhLGIsZyxlKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZ0ZihiLCEwKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIEhnKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/cWYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmcWYoYSxiLmNvbnRleHQsITEpO2RnKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIElnKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7bnVsbCE9PWUmJihlLnJldHVybj1hKTtmb3IoO251bGwhPT1lOyl7c3dpdGNoKGUudGFnKXtjYXNlIDEyOnZhciBmPWUuc3RhdGVOb2RlfDA7aWYoZS50eXBlPT09YiYmMCE9PShmJmMpKXtmb3IoZj1lO251bGwhPT1mOyl7dmFyIGc9Zi5hbHRlcm5hdGU7aWYoMD09PWYuZXhwaXJhdGlvblRpbWV8fGYuZXhwaXJhdGlvblRpbWU+ZClmLmV4cGlyYXRpb25UaW1lPWQsbnVsbCE9PWcmJigwPT09Zy5leHBpcmF0aW9uVGltZXx8Zy5leHBpcmF0aW9uVGltZT5kKSYmKGcuZXhwaXJhdGlvblRpbWU9ZCk7ZWxzZSBpZihudWxsIT09ZyYmKDA9PT1nLmV4cGlyYXRpb25UaW1lfHxnLmV4cGlyYXRpb25UaW1lPmQpKWcuZXhwaXJhdGlvblRpbWU9ZDtlbHNlIGJyZWFrO2Y9Zi5yZXR1cm59Zj1udWxsfWVsc2UgZj1lLmNoaWxkO2JyZWFrO2Nhc2UgMTM6Zj1lLnR5cGU9PT1hLnR5cGU/bnVsbDplLmNoaWxkO2JyZWFrO2RlZmF1bHQ6Zj1cbmUuY2hpbGR9aWYobnVsbCE9PWYpZi5yZXR1cm49ZTtlbHNlIGZvcihmPWU7bnVsbCE9PWY7KXtpZihmPT09YSl7Zj1udWxsO2JyZWFrfWU9Zi5zaWJsaW5nO2lmKG51bGwhPT1lKXtlLnJldHVybj1mLnJldHVybjtmPWU7YnJlYWt9Zj1mLnJldHVybn1lPWZ9fVxuZnVuY3Rpb24gSmcoYSxiLGMpe3ZhciBkPWIudHlwZS5fY29udGV4dCxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFByb3BzLGc9ITA7aWYoTy5jdXJyZW50KWc9ITE7ZWxzZSBpZihmPT09ZSlyZXR1cm4gYi5zdGF0ZU5vZGU9MCxYZihiKSxSKGEsYik7dmFyIGg9ZS52YWx1ZTtiLm1lbW9pemVkUHJvcHM9ZTtpZihudWxsPT09ZiloPTEwNzM3NDE4MjM7ZWxzZSBpZihmLnZhbHVlPT09ZS52YWx1ZSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJmcpcmV0dXJuIGIuc3RhdGVOb2RlPTAsWGYoYiksUihhLGIpO2g9MH1lbHNle3ZhciBrPWYudmFsdWU7aWYoaz09PWgmJigwIT09a3x8MS9rPT09MS9oKXx8ayE9PWsmJmghPT1oKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmZylyZXR1cm4gYi5zdGF0ZU5vZGU9MCxYZihiKSxSKGEsYik7aD0wfWVsc2UgaWYoaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoayxcbmgpOjEwNzM3NDE4MjMsaHw9MCwwPT09aCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJmcpcmV0dXJuIGIuc3RhdGVOb2RlPTAsWGYoYiksUihhLGIpfWVsc2UgSWcoYixkLGgsYyl9Yi5zdGF0ZU5vZGU9aDtYZihiKTtRKGEsYixlLmNoaWxkcmVuKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBSKGEsYil7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP0EoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7dmFyIGM9dmYoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9dmYoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gS2coYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOkhnKGIpO2JyZWFrO2Nhc2UgMjpzZihiKTticmVhaztjYXNlIDQ6ZGcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEzOlhmKGIpfXJldHVybiBudWxsfXN3aXRjaChiLnRhZyl7Y2FzZSAwOm51bGwhPT1hP0EoXCIxNTVcIik6dm9pZCAwO3ZhciBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bGYoYik7Zj1uZihiLGYpO2Q9ZChlLGYpO2IuZWZmZWN0VGFnfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlciYmdm9pZCAwPT09ZC4kJHR5cGVvZj8oZj1iLnR5cGUsYi50YWc9MixiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWQuc3RhdGUmJnZvaWQgMCE9PWQuc3RhdGU/ZC5zdGF0ZTpudWxsLGY9Zi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZiYmaGcoYixmLGUpLGU9c2YoYiksZC51cGRhdGVyPWxnLGIuc3RhdGVOb2RlPWQsZC5fcmVhY3RJbnRlcm5hbEZpYmVyPWIsb2coYixjKSxhPUdnKGEsYiwhMCxlLGMpKTooYi50YWc9MSxRKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpO3JldHVybiBhO2Nhc2UgMTpyZXR1cm4gZT1iLnR5cGUsYz1iLnBlbmRpbmdQcm9wcyxPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KGQ9bGYoYiksZD1uZihiLGQpLGU9ZShjLGQpLGIuZWZmZWN0VGFnfD0xLFEoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDI6ZT1zZihiKTtpZihudWxsPT09YSlpZihudWxsPT09Yi5zdGF0ZU5vZGUpe3ZhciBnPWIucGVuZGluZ1Byb3BzLGg9Yi50eXBlO2Q9bGYoYik7dmFyIGs9Mj09PWIudGFnJiZudWxsIT1iLnR5cGUuY29udGV4dFR5cGVzO2Y9az9uZihiLGQpOmhhO2c9bmV3IGgoZyxmKTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PVxuZy5zdGF0ZSYmdm9pZCAwIT09Zy5zdGF0ZT9nLnN0YXRlOm51bGw7Zy51cGRhdGVyPWxnO2Iuc3RhdGVOb2RlPWc7Zy5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7ayYmKGs9Yi5zdGF0ZU5vZGUsay5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWQsay5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtvZyhiLGMpO2Q9ITB9ZWxzZXtoPWIudHlwZTtkPWIuc3RhdGVOb2RlO2s9Yi5tZW1vaXplZFByb3BzO2Y9Yi5wZW5kaW5nUHJvcHM7ZC5wcm9wcz1rO3ZhciBuPWQuY29udGV4dDtnPWxmKGIpO2c9bmYoYixnKTt2YXIgcj1oLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsoaD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oayE9PWZ8fG4hPT1nKSYmbmcoYixkLGYsZyk7SGY9ITE7dmFyIHc9Yi5tZW1vaXplZFN0YXRlO249ZC5zdGF0ZT13O3ZhciBQPWIudXBkYXRlUXVldWU7bnVsbCE9PVAmJihRZihiLFAsZixkLGMpLG49Yi5tZW1vaXplZFN0YXRlKTtrIT09Znx8dyE9PW58fE8uY3VycmVudHx8SGY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiByJiYoaGcoYixyLGYpLG49Yi5tZW1vaXplZFN0YXRlKSwoaz1IZnx8bWcoYixrLGYsdyxuLGcpKT8oaHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50JiZkLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmXG4oYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWYsYi5tZW1vaXplZFN0YXRlPW4pLGQucHJvcHM9ZixkLnN0YXRlPW4sZC5jb250ZXh0PWcsZD1rKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBoPWIudHlwZSxkPWIuc3RhdGVOb2RlLGY9Yi5tZW1vaXplZFByb3BzLGs9Yi5wZW5kaW5nUHJvcHMsZC5wcm9wcz1mLG49ZC5jb250ZXh0LGc9bGYoYiksZz1uZihiLGcpLHI9aC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJ8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGYhPT1rfHxuIT09ZykmJm5nKGIsZCxrLGcpLEhmPSExLG49Yi5tZW1vaXplZFN0YXRlLHc9ZC5zdGF0ZT1uLFA9Yi51cGRhdGVRdWV1ZSxudWxsIT09UCYmKFFmKGIsUCxrLGQsYyksdz1iLm1lbW9pemVkU3RhdGUpLGYhPT1rfHxuIT09d3x8Ty5jdXJyZW50fHxIZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHImJihoZyhiLHIsayksdz1iLm1lbW9pemVkU3RhdGUpLChyPUhmfHxtZyhiLGYsayxuLHcsZykpPyhofHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVcGRhdGUmJmQuY29tcG9uZW50V2lsbFVwZGF0ZShrLHcsZyksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoayx3LGcpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRVcGRhdGUmJlxuKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50RGlkVXBkYXRlfHxmPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxmPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWssYi5tZW1vaXplZFN0YXRlPXcpLGQucHJvcHM9ayxkLnN0YXRlPXcsZC5jb250ZXh0PWcsZD1yKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50RGlkVXBkYXRlfHxmPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcbmY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gR2coYSxiLGQsZSxjKTtjYXNlIDM6SGcoYik7ZT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1lKWlmKGQ9Yi5tZW1vaXplZFN0YXRlLGQ9bnVsbCE9PWQ/ZC5lbGVtZW50Om51bGwsUWYoYixlLGIucGVuZGluZ1Byb3BzLG51bGwsYyksZT1iLm1lbW9pemVkU3RhdGUuZWxlbWVudCxlPT09ZClEZygpLGE9UihhLGIpO2Vsc2V7ZD1iLnN0YXRlTm9kZTtpZihkPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZkLmh5ZHJhdGUpd2c9ZWYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksdmc9YixkPXhnPSEwO2Q/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9dWcoYixudWxsLGUsYykpOihEZygpLFEoYSxiLGUpKTthPWIuY2hpbGR9ZWxzZSBEZygpLGE9UihhLGIpO3JldHVybiBhO2Nhc2UgNTphOntjZyhiZy5jdXJyZW50KTtlPWNnKCRmLmN1cnJlbnQpO2Q9RGUoZSxcbmIudHlwZSk7ZSE9PWQmJihOKGFnLGIsYiksTigkZixkLGIpKTtudWxsPT09YSYmQWcoYik7ZT1iLnR5cGU7az1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO2lmKCFPLmN1cnJlbnQmJms9PT1kKXtpZihrPWIubW9kZSYxJiYhIWQuaGlkZGVuKWIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztpZigha3x8MTA3Mzc0MTgyMyE9PWMpe2E9UihhLGIpO2JyZWFrIGF9fWs9ZC5jaGlsZHJlbjskZShlLGQpP2s9bnVsbDpmJiYkZShlLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTtGZyhhLGIpOzEwNzM3NDE4MjMhPT1jJiZiLm1vZGUmMSYmZC5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxiLm1lbW9pemVkUHJvcHM9ZCxhPW51bGwpOihRKGEsYixrKSxiLm1lbW9pemVkUHJvcHM9ZCxhPWIuY2hpbGQpfXJldHVybiBhO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkFnKGIpLGIubWVtb2l6ZWRQcm9wcz1iLnBlbmRpbmdQcm9wcyxcbm51bGw7Y2FzZSAxNjpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGRnKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZT1iLnBlbmRpbmdQcm9wcyxPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWU/KG51bGw9PT1hP2IuY2hpbGQ9dGcoYixudWxsLGUsYyk6UShhLGIsZSksYi5tZW1vaXplZFByb3BzPWUsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLnJlbmRlcixjPWIucGVuZGluZ1Byb3BzLGQ9Yi5yZWYsTy5jdXJyZW50fHxiLm1lbW9pemVkUHJvcHMhPT1jfHxkIT09KG51bGwhPT1hP2EucmVmOm51bGwpPyhlPWUoYyxkKSxRKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxMDpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KFEoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDExOnJldHVybiBjPVxuYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sTy5jdXJyZW50fHxudWxsIT09YyYmYi5tZW1vaXplZFByb3BzIT09Yz8oUShhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTU6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMsYi5tZW1vaXplZFByb3BzPT09Yz9hPVIoYSxiKTooUShhLGIsYy5jaGlsZHJlbiksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKSxhO2Nhc2UgMTM6cmV0dXJuIEpnKGEsYixjKTtjYXNlIDEyOmE6aWYoZD1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxrPWIubWVtb2l6ZWRQcm9wcyxlPWQuX2N1cnJlbnRWYWx1ZSxnPWQuX2NoYW5nZWRCaXRzLE8uY3VycmVudHx8MCE9PWd8fGshPT1mKXtiLm1lbW9pemVkUHJvcHM9ZjtoPWYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzO2lmKHZvaWQgMD09PWh8fG51bGw9PT1oKWg9MTA3Mzc0MTgyMztiLnN0YXRlTm9kZT1oO2lmKDAhPT0oZyZoKSlJZyhiLGQsZyxjKTtlbHNlIGlmKGs9PT1mKXthPVxuUihhLGIpO2JyZWFrIGF9Yz1mLmNoaWxkcmVuO2M9YyhlKTtiLmVmZmVjdFRhZ3w9MTtRKGEsYixjKTthPWIuY2hpbGR9ZWxzZSBhPVIoYSxiKTtyZXR1cm4gYTtkZWZhdWx0OkEoXCIxNTZcIil9fWZ1bmN0aW9uIExnKGEpe2EuZWZmZWN0VGFnfD00fXZhciBQZz12b2lkIDAsUWc9dm9pZCAwLFJnPXZvaWQgMDtQZz1mdW5jdGlvbigpe307UWc9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPWMpJiZMZyhiKX07Umc9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJkxnKGIpfTtcbmZ1bmN0aW9uIFNnKGEsYil7dmFyIGM9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIG51bGw7Y2FzZSAyOnJldHVybiBvZihiKSxudWxsO2Nhc2UgMzplZyhiKTtwZihiKTt2YXIgZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpQ2coYiksYi5lZmZlY3RUYWcmPS0zO1BnKGIpO3JldHVybiBudWxsO2Nhc2UgNTpmZyhiKTtkPWNnKGJnLmN1cnJlbnQpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPWIuc3RhdGVOb2RlLGg9Y2coJGYuY3VycmVudCk7Zz1TZShnLGUsZixjLGQpO1FnKGEsYixnLGUsZixjLGQsaCk7YS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2V7aWYoIWMpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9cbkEoXCIxNjZcIik6dm9pZCAwLG51bGw7YT1jZygkZi5jdXJyZW50KTtpZihDZyhiKSljPWIuc3RhdGVOb2RlLGU9Yi50eXBlLGY9Yi5tZW1vaXplZFByb3BzLGNbQ109YixjW01hXT1mLGQ9VWUoYyxlLGYsYSxkKSxiLnVwZGF0ZVF1ZXVlPWQsbnVsbCE9PWQmJkxnKGIpO2Vsc2V7YT1QZShlLGMsZCxhKTthW0NdPWI7YVtNYV09YzthOmZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXtpZig1PT09Zi50YWd8fDY9PT1mLnRhZylhLmFwcGVuZENoaWxkKGYuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1mLnRhZyYmbnVsbCE9PWYuY2hpbGQpe2YuY2hpbGQucmV0dXJuPWY7Zj1mLmNoaWxkO2NvbnRpbnVlfWlmKGY9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWYuc2libGluZzspe2lmKG51bGw9PT1mLnJldHVybnx8Zi5yZXR1cm49PT1iKWJyZWFrIGE7Zj1mLnJldHVybn1mLnNpYmxpbmcucmV0dXJuPWYucmV0dXJuO2Y9Zi5zaWJsaW5nfVJlKGEsZSxjLGQpO1plKGUsYykmJkxnKGIpO2Iuc3RhdGVOb2RlPVxuYX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpUmcoYSxiLGEubWVtb2l6ZWRQcm9wcyxjKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYylyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0EoXCIxNjZcIik6dm9pZCAwLG51bGw7ZD1jZyhiZy5jdXJyZW50KTtjZygkZi5jdXJyZW50KTtDZyhiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW0NdPWIsVmUoZCxjKSYmTGcoYikpOihkPVFlKGMsZCksZFtDXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxNjpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgMTE6cmV0dXJuIG51bGw7Y2FzZSAxNTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGVnKGIpLFBnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gWWYoYiksbnVsbDtjYXNlIDEyOnJldHVybiBudWxsO2Nhc2UgMDpBKFwiMTY3XCIpO1xuZGVmYXVsdDpBKFwiMTU2XCIpfX1mdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWIuc291cmNlO251bGw9PT1iLnN0YWNrJiZudWxsIT09YyYmdmMoYyk7bnVsbCE9PWMmJnRjKGMpO2I9Yi52YWx1ZTtudWxsIT09YSYmMj09PWEudGFnJiZ0YyhhKTt0cnl7YiYmYi5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGIpfWNhdGNoKGQpe2QmJmQuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihkKX19ZnVuY3Rpb24gVWcoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7VmcoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gV2coYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEdmJiZHZihhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpVZyhhKTt2YXIgYj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe1ZnKGEsYyl9YnJlYWs7Y2FzZSA1OlVnKGEpO2JyZWFrO2Nhc2UgNDpYZyhhKX19ZnVuY3Rpb24gWWcoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBaZyhhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihZZyhiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59QShcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OkEoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihHZShiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8WWcoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZylpZihjKWlmKGQpe3ZhciBmPWIsZz1lLnN0YXRlTm9kZSxoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShlLnN0YXRlTm9kZSxjKTtlbHNlIGQ/KGY9YixnPWUuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxmKTpmLmFwcGVuZENoaWxkKGcpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PVxuZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBYZyhhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz9BKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYoV2coZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnP2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpXZyhiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuO2I9Yi5yZXR1cm47ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319XG5mdW5jdGlvbiAkZyhhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmKGNbTWFdPWQsVGUoYyxmLGUsYSxkKSl9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT9BKFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDE1OmJyZWFrO2Nhc2UgMTY6YnJlYWs7ZGVmYXVsdDpBKFwiMTYzXCIpfX1mdW5jdGlvbiBhaChhLGIsYyl7Yz1LZihjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtiaChkKTtUZyhhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIGNoKGEsYixjKXtjPUtmKGMpO2MudGFnPTM7dmFyIGQ9YS5zdGF0ZU5vZGU7bnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe251bGw9PT1kaD9kaD1uZXcgU2V0KFt0aGlzXSk6ZGguYWRkKHRoaXMpO3ZhciBjPWIudmFsdWUsZD1iLnN0YWNrO1RnKGEsYik7dGhpcy5jb21wb25lbnREaWRDYXRjaChjLHtjb21wb25lbnRTdGFjazpudWxsIT09ZD9kOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gZWgoYSxiLGMsZCxlLGYpe2MuZWZmZWN0VGFnfD01MTI7Yy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbDtkPVRmKGQsYyk7YT1iO2Rve3N3aXRjaChhLnRhZyl7Y2FzZSAzOmEuZWZmZWN0VGFnfD0xMDI0O2Q9YWgoYSxkLGYpO05mKGEsZCxmKTtyZXR1cm47Y2FzZSAyOmlmKGI9ZCxjPWEuc3RhdGVOb2RlLDA9PT0oYS5lZmZlY3RUYWcmNjQpJiZudWxsIT09YyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09ZGh8fCFkaC5oYXMoYykpKXthLmVmZmVjdFRhZ3w9MTAyNDtkPWNoKGEsYixmKTtOZihhLGQsZik7cmV0dXJufX1hPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKX1cbmZ1bmN0aW9uIGZoKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOm9mKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIGVnKGEpLHBmKGEpLGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA1OnJldHVybiBmZyhhKSxudWxsO2Nhc2UgMTY6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA0OnJldHVybiBlZyhhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIFlmKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIGdoPWFmKCksaGg9MixpaD1naCxqaD0wLGtoPTAsbGg9ITEsUz1udWxsLG1oPW51bGwsVD0wLG5oPS0xLG9oPSExLFU9bnVsbCxwaD0hMSxxaD0hMSxkaD1udWxsO1xuZnVuY3Rpb24gcmgoKXtpZihudWxsIT09Uylmb3IodmFyIGE9Uy5yZXR1cm47bnVsbCE9PWE7KXt2YXIgYj1hO3N3aXRjaChiLnRhZyl7Y2FzZSAyOm9mKGIpO2JyZWFrO2Nhc2UgMzplZyhiKTtwZihiKTticmVhaztjYXNlIDU6ZmcoYik7YnJlYWs7Y2FzZSA0OmVnKGIpO2JyZWFrO2Nhc2UgMTM6WWYoYil9YT1hLnJldHVybn1taD1udWxsO1Q9MDtuaD0tMTtvaD0hMTtTPW51bGw7cWg9ITF9XG5mdW5jdGlvbiBzaChhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyY1MTIpKXtiPVNnKGIsYSxUKTt2YXIgZT1hO2lmKDEwNzM3NDE4MjM9PT1UfHwxMDczNzQxODIzIT09ZS5leHBpcmF0aW9uVGltZSl7dmFyIGY9MDtzd2l0Y2goZS50YWcpe2Nhc2UgMzpjYXNlIDI6dmFyIGc9ZS51cGRhdGVRdWV1ZTtudWxsIT09ZyYmKGY9Zy5leHBpcmF0aW9uVGltZSl9Zm9yKGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9Zy5leHBpcmF0aW9uVGltZSksZz1nLnNpYmxpbmc7ZS5leHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjUxMikmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmXG4obnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7cWg9ITA7YnJlYWt9fWVsc2V7YT1maChhLG9oLFQpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9NTExLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD01MTIpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHRoKGEpe3ZhciBiPUtnKGEuYWx0ZXJuYXRlLGEsVCk7bnVsbD09PWImJihiPXNoKGEpKTtlYy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiB1aChhLGIsYyl7bGg/QShcIjI0M1wiKTp2b2lkIDA7bGg9ITA7aWYoYiE9PVR8fGEhPT1taHx8bnVsbD09PVMpcmgoKSxtaD1hLFQ9YixuaD0tMSxTPXZmKG1oLmN1cnJlbnQsbnVsbCxUKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBkPSExO29oPSFjfHxUPD1oaDtkb3t0cnl7aWYoYylmb3IoO251bGwhPT1TJiYhdmgoKTspUz10aChTKTtlbHNlIGZvcig7bnVsbCE9PVM7KVM9dGgoUyl9Y2F0Y2goZil7aWYobnVsbD09PVMpZD0hMCxiaChmKTtlbHNle251bGw9PT1TP0EoXCIyNzFcIik6dm9pZCAwO2M9Uzt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSl7ZD0hMDtiaChmKTticmVha31laChhLGUsYyxmLG9oLFQsaWgpO1M9c2goYyl9fWJyZWFrfXdoaWxlKDEpO2xoPSExO2lmKGQpcmV0dXJuIG51bGw7aWYobnVsbD09PVMpe2lmKHFoKXJldHVybiBhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1iLGEuY3VycmVudC5hbHRlcm5hdGU7b2g/QShcIjI2MlwiKTpcbnZvaWQgMDswPD1uaCYmc2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBiPWEuY3VycmVudC5leHBpcmF0aW9uVGltZTswIT09YiYmKDA9PT1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lfHxhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPGIpJiZ3aChhLGIpfSxuaCk7eGgoYS5jdXJyZW50LmV4cGlyYXRpb25UaW1lKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZnKGEsYil7dmFyIGM7YTp7bGgmJiFwaD9BKFwiMjYzXCIpOnZvaWQgMDtmb3IoYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAyOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1kaHx8IWRoLmhhcyhkKSkpe2E9VGYoYixhKTthPWNoKGMsYSwxKTtNZihjLGEsMSk7a2coYywxKTtjPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgMzphPVRmKGIsYSk7YT1haChjLGEsMSk7TWYoYyxhLDEpO2tnKGMsMSk7Yz12b2lkIDA7YnJlYWsgYX1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9VGYoYixhKSxjPWFoKGEsYywxKSxNZihhLGMsMSksa2coYSwxKSk7Yz12b2lkIDB9cmV0dXJuIGN9XG5mdW5jdGlvbiB5aCgpe3ZhciBhPTIrMjUqKCgoaWcoKS0yKzUwMCkvMjV8MCkrMSk7YTw9amgmJihhPWpoKzEpO3JldHVybiBqaD1hfWZ1bmN0aW9uIGpnKGEsYil7YT0wIT09a2g/a2g6bGg/cGg/MTpUOmIubW9kZSYxP3poPzIrMTAqKCgoYS0yKzE1KS8xMHwwKSsxKToyKzI1KigoKGEtMis1MDApLzI1fDApKzEpOjE7emgmJigwPT09QWh8fGE+QWgpJiYoQWg9YSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBrZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iKWEuZXhwaXJhdGlvblRpbWU9YjtudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmIpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWEucmV0dXJuKWlmKDM9PT1hLnRhZyl7dmFyIGM9YS5zdGF0ZU5vZGU7IWxoJiYwIT09VCYmYjxUJiZyaCgpO3ZhciBkPWMuY3VycmVudC5leHBpcmF0aW9uVGltZTtsaCYmIXBoJiZtaD09PWN8fHdoKGMsZCk7Qmg+Q2gmJkEoXCIxODVcIil9ZWxzZSBicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBpZygpe2loPWFmKCktZ2g7cmV0dXJuIGhoPShpaC8xMHwwKSsyfVxuZnVuY3Rpb24gRGgoYSl7dmFyIGI9a2g7a2g9MisyNSooKChpZygpLTIrNTAwKS8yNXwwKSsxKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e2toPWJ9fWZ1bmN0aW9uIEVoKGEsYixjLGQsZSl7dmFyIGY9a2g7a2g9MTt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtraD1mfX12YXIgRmg9bnVsbCxWPW51bGwsR2g9MCxIaD0tMSxXPSExLFg9bnVsbCxZPTAsQWg9MCxJaD0hMSxKaD0hMSxLaD1udWxsLExoPW51bGwsWj0hMSxNaD0hMSx6aD0hMSxOaD1udWxsLENoPTFFMyxCaD0wLE9oPTE7ZnVuY3Rpb24gUGgoYSl7aWYoMCE9PUdoKXtpZihhPkdoKXJldHVybjtjZihIaCl9dmFyIGI9YWYoKS1naDtHaD1hO0hoPWJmKFFoLHt0aW1lb3V0OjEwKihhLTIpLWJ9KX1cbmZ1bmN0aW9uIHdoKGEsYil7aWYobnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3QpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iLG51bGw9PT1WPyhGaD1WPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooVj1WLm5leHRTY2hlZHVsZWRSb290PWEsVi5uZXh0U2NoZWR1bGVkUm9vdD1GaCk7ZWxzZXt2YXIgYz1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1jfHxiPGMpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifVd8fChaP01oJiYoWD1hLFk9MSxSaChhLDEsITEpKToxPT09Yj9TaCgpOlBoKGIpKX1cbmZ1bmN0aW9uIFRoKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVYpZm9yKHZhciBjPVYsZD1GaDtudWxsIT09ZDspe3ZhciBlPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Vj9BKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7Rmg9Vj1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09RmgpRmg9ZT1kLm5leHRTY2hlZHVsZWRSb290LFYubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09Vil7Vj1jO1YubmV4dFNjaGVkdWxlZFJvb3Q9Rmg7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtpZigwPT09YXx8ZTxhKWE9ZSxiPWQ7aWYoZD09PVYpYnJlYWs7XG5jPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1jPVg7bnVsbCE9PWMmJmM9PT1iJiYxPT09YT9CaCsrOkJoPTA7WD1iO1k9YX1mdW5jdGlvbiBRaChhKXtVaCgwLCEwLGEpfWZ1bmN0aW9uIFNoKCl7VWgoMSwhMSxudWxsKX1mdW5jdGlvbiBVaChhLGIsYyl7TGg9YztUaCgpO2lmKGIpZm9yKDtudWxsIT09WCYmMCE9PVkmJigwPT09YXx8YT49WSkmJighSWh8fGlnKCk+PVkpOylpZygpLFJoKFgsWSwhSWgpLFRoKCk7ZWxzZSBmb3IoO251bGwhPT1YJiYwIT09WSYmKDA9PT1hfHxhPj1ZKTspUmgoWCxZLCExKSxUaCgpO251bGwhPT1MaCYmKEdoPTAsSGg9LTEpOzAhPT1ZJiZQaChZKTtMaD1udWxsO0loPSExO1ZoKCl9ZnVuY3Rpb24gV2goYSxiKXtXP0EoXCIyNTNcIik6dm9pZCAwO1g9YTtZPWI7UmgoYSxiLCExKTtTaCgpO1ZoKCl9XG5mdW5jdGlvbiBWaCgpe0JoPTA7aWYobnVsbCE9PU5oKXt2YXIgYT1OaDtOaD1udWxsO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2goZCl7Smh8fChKaD0hMCxLaD1kKX19fWlmKEpoKXRocm93IGE9S2gsS2g9bnVsbCxKaD0hMSxhO31mdW5jdGlvbiBSaChhLGIsYyl7Vz9BKFwiMjQ1XCIpOnZvaWQgMDtXPSEwO2M/KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/WGgoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9dWgoYSxiLCEwKSxudWxsIT09YyYmKHZoKCk/YS5maW5pc2hlZFdvcms9YzpYaChhLGMsYikpKSk6KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/WGgoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9dWgoYSxiLCExKSxudWxsIT09YyYmWGgoYSxjLGIpKSk7Vz0hMX1cbmZ1bmN0aW9uIFhoKGEsYixjKXt2YXIgZD1hLmZpcnN0QmF0Y2g7aWYobnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1jJiYobnVsbD09PU5oP05oPVtkXTpOaC5wdXNoKGQpLGQuX2RlZmVyKSl7YS5maW5pc2hlZFdvcms9YjthLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPTA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7cGg9bGg9ITA7Yz1iLnN0YXRlTm9kZTtjLmN1cnJlbnQ9PT1iP0EoXCIxNzdcIik6dm9pZCAwO2Q9Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWQ/QShcIjI2MVwiKTp2b2lkIDA7Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDtpZygpO2VjLmN1cnJlbnQ9bnVsbDtpZigxPGIuZWZmZWN0VGFnKWlmKG51bGwhPT1iLmxhc3RFZmZlY3Qpe2IubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI7dmFyIGU9Yi5maXJzdEVmZmVjdH1lbHNlIGU9YjtlbHNlIGU9Yi5maXJzdEVmZmVjdDtYZT1HZDt2YXIgZj1kYSgpO2lmKFRkKGYpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpblxuZil2YXIgZz17c3RhcnQ6Zi5zZWxlY3Rpb25TdGFydCxlbmQ6Zi5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7dmFyIGg9d2luZG93LmdldFNlbGVjdGlvbiYmd2luZG93LmdldFNlbGVjdGlvbigpO2lmKGgmJjAhPT1oLnJhbmdlQ291bnQpe2c9aC5hbmNob3JOb2RlO3ZhciBrPWguYW5jaG9yT2Zmc2V0LG49aC5mb2N1c05vZGU7aD1oLmZvY3VzT2Zmc2V0O3RyeXtnLm5vZGVUeXBlLG4ubm9kZVR5cGV9Y2F0Y2goV2Epe2c9bnVsbDticmVhayBhfXZhciByPTAsdz0tMSxQPS0xLGtjPTAsSGQ9MCxFPWYsdD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHg7Oyl7RSE9PWd8fDAhPT1rJiYzIT09RS5ub2RlVHlwZXx8KHc9citrKTtFIT09bnx8MCE9PWgmJjMhPT1FLm5vZGVUeXBlfHwoUD1yK2gpOzM9PT1FLm5vZGVUeXBlJiYocis9RS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHg9RS5maXJzdENoaWxkKSlicmVhazt0PUU7RT14fWZvcig7Oyl7aWYoRT09PWYpYnJlYWsgYjt0PT09ZyYmXG4rK2tjPT09ayYmKHc9cik7dD09PW4mJisrSGQ9PT1oJiYoUD1yKTtpZihudWxsIT09KHg9RS5uZXh0U2libGluZykpYnJlYWs7RT10O3Q9RS5wYXJlbnROb2RlfUU9eH1nPS0xPT09d3x8LTE9PT1QP251bGw6e3N0YXJ0OncsZW5kOlB9fWVsc2UgZz1udWxsfWc9Z3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgZz1udWxsO1llPXtmb2N1c2VkRWxlbTpmLHNlbGVjdGlvblJhbmdlOmd9O0lkKCExKTtmb3IoVT1lO251bGwhPT1VOyl7Zj0hMTtnPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09VTspe2lmKFUuZWZmZWN0VGFnJjI1Nil7dmFyIHU9VS5hbHRlcm5hdGU7az1VO3N3aXRjaChrLnRhZyl7Y2FzZSAyOmlmKGsuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PXUpe3ZhciB5PXUubWVtb2l6ZWRQcm9wcyxEPXUubWVtb2l6ZWRTdGF0ZSxqYT1rLnN0YXRlTm9kZTtqYS5wcm9wcz1rLm1lbW9pemVkUHJvcHM7amEuc3RhdGU9ay5tZW1vaXplZFN0YXRlO3ZhciBoaT1qYS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSh5LFxuRCk7amEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9aGl9YnJlYWs7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6QShcIjE2M1wiKX19VT1VLm5leHRFZmZlY3R9fWNhdGNoKFdhKXtmPSEwLGc9V2F9ZiYmKG51bGw9PT1VP0EoXCIxNzhcIik6dm9pZCAwLFZnKFUsZyksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfWZvcihVPWU7bnVsbCE9PVU7KXt1PSExO3k9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1VOyl7dmFyIHE9VS5lZmZlY3RUYWc7cSYxNiYmR2UoVS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciB6PVUuYWx0ZXJuYXRlO2lmKG51bGwhPT16KXt2YXIgbD16LnJlZjtudWxsIT09bCYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBsP2wobnVsbCk6bC5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxNCl7Y2FzZSAyOlpnKFUpO1UuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6WmcoVSk7VS5lZmZlY3RUYWcmPS0zOyRnKFUuYWx0ZXJuYXRlLFxuVSk7YnJlYWs7Y2FzZSA0OiRnKFUuYWx0ZXJuYXRlLFUpO2JyZWFrO2Nhc2UgODpEPVUsWGcoRCksRC5yZXR1cm49bnVsbCxELmNoaWxkPW51bGwsRC5hbHRlcm5hdGUmJihELmFsdGVybmF0ZS5jaGlsZD1udWxsLEQuYWx0ZXJuYXRlLnJldHVybj1udWxsKX1VPVUubmV4dEVmZmVjdH19Y2F0Y2goV2Epe3U9ITAseT1XYX11JiYobnVsbD09PVU/QShcIjE3OFwiKTp2b2lkIDAsVmcoVSx5KSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9bD1ZZTt6PWRhKCk7cT1sLmZvY3VzZWRFbGVtO3U9bC5zZWxlY3Rpb25SYW5nZTtpZih6IT09cSYmZmEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtUZChxKSYmKHo9dS5zdGFydCxsPXUuZW5kLHZvaWQgMD09PWwmJihsPXopLFwic2VsZWN0aW9uU3RhcnRcImluIHE/KHEuc2VsZWN0aW9uU3RhcnQ9eixxLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihsLHEudmFsdWUubGVuZ3RoKSk6d2luZG93LmdldFNlbGVjdGlvbiYmKHo9d2luZG93LmdldFNlbGVjdGlvbigpLFxueT1xW2xiKCldLmxlbmd0aCxsPU1hdGgubWluKHUuc3RhcnQseSksdT12b2lkIDA9PT11LmVuZD9sOk1hdGgubWluKHUuZW5kLHkpLCF6LmV4dGVuZCYmbD51JiYoeT11LHU9bCxsPXkpLHk9U2QocSxsKSxEPVNkKHEsdSkseSYmRCYmKDEhPT16LnJhbmdlQ291bnR8fHouYW5jaG9yTm9kZSE9PXkubm9kZXx8ei5hbmNob3JPZmZzZXQhPT15Lm9mZnNldHx8ei5mb2N1c05vZGUhPT1ELm5vZGV8fHouZm9jdXNPZmZzZXQhPT1ELm9mZnNldCkmJihqYT1kb2N1bWVudC5jcmVhdGVSYW5nZSgpLGphLnNldFN0YXJ0KHkubm9kZSx5Lm9mZnNldCksei5yZW1vdmVBbGxSYW5nZXMoKSxsPnU/KHouYWRkUmFuZ2UoamEpLHouZXh0ZW5kKEQubm9kZSxELm9mZnNldCkpOihqYS5zZXRFbmQoRC5ub2RlLEQub2Zmc2V0KSx6LmFkZFJhbmdlKGphKSkpKSk7ej1bXTtmb3IobD1xO2w9bC5wYXJlbnROb2RlOykxPT09bC5ub2RlVHlwZSYmei5wdXNoKHtlbGVtZW50OmwsbGVmdDpsLnNjcm9sbExlZnQsXG50b3A6bC5zY3JvbGxUb3B9KTtxLmZvY3VzKCk7Zm9yKHE9MDtxPHoubGVuZ3RoO3ErKylsPXpbcV0sbC5lbGVtZW50LnNjcm9sbExlZnQ9bC5sZWZ0LGwuZWxlbWVudC5zY3JvbGxUb3A9bC50b3B9WWU9bnVsbDtJZChYZSk7WGU9bnVsbDtjLmN1cnJlbnQ9Yjtmb3IoVT1lO251bGwhPT1VOyl7ZT0hMTtxPXZvaWQgMDt0cnl7Zm9yKHo9ZDtudWxsIT09VTspe3ZhciBnZz1VLmVmZmVjdFRhZztpZihnZyYzNil7dmFyIGxjPVUuYWx0ZXJuYXRlO2w9VTt1PXo7c3dpdGNoKGwudGFnKXtjYXNlIDI6dmFyIGJhPWwuc3RhdGVOb2RlO2lmKGwuZWZmZWN0VGFnJjQpaWYobnVsbD09PWxjKWJhLnByb3BzPWwubWVtb2l6ZWRQcm9wcyxiYS5zdGF0ZT1sLm1lbW9pemVkU3RhdGUsYmEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciByaT1sYy5tZW1vaXplZFByb3BzLHNpPWxjLm1lbW9pemVkU3RhdGU7YmEucHJvcHM9bC5tZW1vaXplZFByb3BzO2JhLnN0YXRlPWwubWVtb2l6ZWRTdGF0ZTtcbmJhLmNvbXBvbmVudERpZFVwZGF0ZShyaSxzaSxiYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIE1nPWwudXBkYXRlUXVldWU7bnVsbCE9PU1nJiYoYmEucHJvcHM9bC5tZW1vaXplZFByb3BzLGJhLnN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxTZihsLE1nLGJhLHUpKTticmVhaztjYXNlIDM6dmFyIE5nPWwudXBkYXRlUXVldWU7aWYobnVsbCE9PU5nKXt5PW51bGw7aWYobnVsbCE9PWwuY2hpbGQpc3dpdGNoKGwuY2hpbGQudGFnKXtjYXNlIDU6eT1sLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDI6eT1sLmNoaWxkLnN0YXRlTm9kZX1TZihsLE5nLHksdSl9YnJlYWs7Y2FzZSA1OnZhciB0aT1sLnN0YXRlTm9kZTtudWxsPT09bGMmJmwuZWZmZWN0VGFnJjQmJlplKGwudHlwZSxsLm1lbW9pemVkUHJvcHMpJiZ0aS5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxNTpicmVhaztjYXNlIDE2OmJyZWFrO2RlZmF1bHQ6QShcIjE2M1wiKX19aWYoZ2cmXG4xMjgpe2w9dm9pZCAwO3ZhciB1Yz1VLnJlZjtpZihudWxsIT09dWMpe3ZhciBPZz1VLnN0YXRlTm9kZTtzd2l0Y2goVS50YWcpe2Nhc2UgNTpsPU9nO2JyZWFrO2RlZmF1bHQ6bD1PZ31cImZ1bmN0aW9uXCI9PT10eXBlb2YgdWM/dWMobCk6dWMuY3VycmVudD1sfX12YXIgdWk9VS5uZXh0RWZmZWN0O1UubmV4dEVmZmVjdD1udWxsO1U9dWl9fWNhdGNoKFdhKXtlPSEwLHE9V2F9ZSYmKG51bGw9PT1VP0EoXCIxNzhcIik6dm9pZCAwLFZnKFUscSksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfWxoPXBoPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBGZiYmRmYoYi5zdGF0ZU5vZGUpO2I9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYoZGg9bnVsbCk7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifWZ1bmN0aW9uIHZoKCl7cmV0dXJuIG51bGw9PT1MaHx8TGgudGltZVJlbWFpbmluZygpPk9oPyExOkloPSEwfVxuZnVuY3Rpb24gYmgoYSl7bnVsbD09PVg/QShcIjI0NlwiKTp2b2lkIDA7WC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO0pofHwoSmg9ITAsS2g9YSl9ZnVuY3Rpb24geGgoYSl7bnVsbD09PVg/QShcIjI0NlwiKTp2b2lkIDA7WC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1hfWZ1bmN0aW9uIFloKGEsYil7dmFyIGM9WjtaPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhaPWMpfHxXfHxTaCgpfX1mdW5jdGlvbiBaaChhLGIpe2lmKFomJiFNaCl7TWg9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7TWg9ITF9fXJldHVybiBhKGIpfWZ1bmN0aW9uICRoKGEsYil7Vz9BKFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiBFaChhLGIpfWZpbmFsbHl7Wj1jLFNoKCl9fWZ1bmN0aW9uIGFpKGEpe3ZhciBiPVo7Wj0hMDt0cnl7RWgoYSl9ZmluYWxseXsoWj1iKXx8V3x8VWgoMSwhMSxudWxsKX19XG5mdW5jdGlvbiBiaShhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDtpZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZztiOnsyPT09aWQoYykmJjI9PT1jLnRhZz92b2lkIDA6QShcIjE3MFwiKTtmb3IoZz1jOzMhPT1nLnRhZzspe2lmKG1mKGcpKXtnPWcuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9KGc9Zy5yZXR1cm4pP3ZvaWQgMDpBKFwiMTcxXCIpfWc9Zy5zdGF0ZU5vZGUuY29udGV4dH1jPW1mKGMpP3JmKGMsZyk6Z31lbHNlIGM9aGE7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9S2YoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO01mKGYsZSxkKTtrZyhmLGQpO3JldHVybiBkfVxuZnVuY3Rpb24gY2koYSl7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/QShcIjE4OFwiKTpBKFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPWxkKGIpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfWZ1bmN0aW9uIGRpKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPWlnKCk7ZT1qZyhmLGUpO3JldHVybiBiaShhLGIsYyxlLGQpfWZ1bmN0aW9uIGVpKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBmaShhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBFZihwKHt9LGEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9bGQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9XG52YXIgZ2k9e3VwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWU6YmksY3JlYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gQWYoYSxiLGMpfSx1cGRhdGVDb250YWluZXI6ZGksZmx1c2hSb290OldoLHJlcXVlc3RXb3JrOndoLGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246eWgsYmF0Y2hlZFVwZGF0ZXM6WWgsdW5iYXRjaGVkVXBkYXRlczpaaCxkZWZlcnJlZFVwZGF0ZXM6RGgsc3luY1VwZGF0ZXM6RWgsaW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKGEsYixjKXtpZih6aClyZXR1cm4gYShiLGMpO1p8fFd8fDA9PT1BaHx8KFVoKEFoLCExLG51bGwpLEFoPTApO3ZhciBkPXpoLGU9WjtaPXpoPSEwO3RyeXtyZXR1cm4gYShiLGMpfWZpbmFsbHl7emg9ZCwoWj1lKXx8V3x8U2goKX19LGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKCl7V3x8MD09PUFofHwoVWgoQWgsITEsbnVsbCksQWg9MCl9LGZsdXNoQ29udHJvbGxlZDphaSxmbHVzaFN5bmM6JGgsXG5nZXRQdWJsaWNSb290SW5zdGFuY2U6ZWksZmluZEhvc3RJbnN0YW5jZTpjaSxmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFsczpmdW5jdGlvbihhKXthPW1kKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxpbmplY3RJbnRvRGV2VG9vbHM6Zml9O2Z1bmN0aW9uIGlpKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6Z2Msa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319S2IuaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudChXZSk7XG5mdW5jdGlvbiBqaShhKXt0aGlzLl9leHBpcmF0aW9uVGltZT15aCgpO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9amkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6QShcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IGtpO2JpKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtqaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5qaS5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6QShcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD9BKFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO1doKGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O2ppLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBraSgpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfWtpLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5raS5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9BKFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtmdW5jdGlvbiBsaShhLGIsYyl7dGhpcy5faW50ZXJuYWxSb290PUFmKGEsYixjKX1saS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IGtpO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTtkaShhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xubGkucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IGtpO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtkaShudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O2xpLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBraTtjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7ZGkoYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcbmxpLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBqaSh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIG1pKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1TYj1naS5iYXRjaGVkVXBkYXRlcztUYj1naS5pbnRlcmFjdGl2ZVVwZGF0ZXM7VWI9Z2kuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM7XG5mdW5jdGlvbiBuaShhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IGxpKGEsITEsYil9XG5mdW5jdGlvbiBvaShhLGIsYyxkLGUpe21pKGMpP3ZvaWQgMDpBKFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9ZWkoZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1uaShjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1laShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19WmgoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIGVpKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBwaShhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO21pKGIpP3ZvaWQgMDpBKFwiMjAwXCIpO3JldHVybiBpaShhLGIsbnVsbCxjKX1cbnZhciBxaT17Y3JlYXRlUG9ydGFsOnBpLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP251bGw6MT09PWEubm9kZVR5cGU/YTpjaShhKX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG9pKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBvaShudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP0EoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIG9pKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe21pKGEpP3ZvaWQgMDpBKFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWmgoZnVuY3Rpb24oKXtvaShudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBwaS5hcHBseSh2b2lkIDAsXG5hcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpZaCx1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXM6RGgsZmx1c2hTeW5jOiRoLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDphaSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRQbHVnaW5IdWI6S2EsRXZlbnRQbHVnaW5SZWdpc3RyeTp2YSxFdmVudFByb3BhZ2F0b3JzOiRhLFJlYWN0Q29udHJvbGxlZENvbXBvbmVudDpSYixSZWFjdERPTUNvbXBvbmVudFRyZWU6UWEsUmVhY3RET01FdmVudExpc3RlbmVyOk1kfSx1bnN0YWJsZV9jcmVhdGVSb290OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBsaShhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX19O2ZpKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpOYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjQuMFwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO1xudmFyIHZpPXtkZWZhdWx0OnFpfSx3aT12aSYmcWl8fHZpO21vZHVsZS5leHBvcnRzPXdpLmRlZmF1bHQ/d2kuZGVmYXVsdDp3aTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNC4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaz1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIikscD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIikscT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsdD1yP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHU9cj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHY9cj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdz1yP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx4PXI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHk9cj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksej1yP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLEE9cj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxCPVxucj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTI7ciYmU3ltYm9sLmZvcihcInJlYWN0LnRpbWVvdXRcIik7dmFyIEM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxlPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTA7YzxiO2MrKyllKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtuKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZSl9XG52YXIgRT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX07ZnVuY3Rpb24gRihhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxFfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0QoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtGLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBHKCl7fVxuRy5wcm90b3R5cGU9Ri5wcm90b3R5cGU7ZnVuY3Rpb24gSChhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxFfXZhciBJPUgucHJvdG90eXBlPW5ldyBHO0kuY29uc3RydWN0b3I9SDtrKEksRi5wcm90b3R5cGUpO0kuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBjPXZvaWQgMCxkPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBsPUFycmF5KGYpLG09MDttPGY7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXR9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZSxjKXtpZihQLmxlbmd0aCl7dmFyIGQ9UC5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWU7ZC5jb250ZXh0PWM7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmUsY29udGV4dDpjLGNvdW50OjB9fWZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsZSxjKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgdDpjYXNlIHU6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtkPWFbaF07dmFyIGY9YitUKGQsaCk7Zys9UyhkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/Zj1udWxsOihmPUMmJmFbQ118fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksXG5oPTA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1QoZCxoKyspLGcrPVMoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EsRChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBWKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1coYSxjLGUscS50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoTihhKSYmKGI9ZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIikrZSxhPXskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn0pLGMucHVzaChhKSl9ZnVuY3Rpb24gVyhhLGIsZSxjLGQpe3ZhciBnPVwiXCI7bnVsbCE9ZSYmKGc9KFwiXCIrZSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKTtiPVEoYixnLGMsZCk7bnVsbD09YXx8UyhhLFwiXCIsVixiKTtSKGIpfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VyhhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixlKTtudWxsPT1hfHxTKGEsXCJcIixVLGIpO1IoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIscS50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VyhhLGIsbnVsbCxxLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe04oYSk/dm9pZCAwOkQoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkYsUHVyZUNvbXBvbmVudDpILGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp6LFxuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2RlZmF1bHRWYWx1ZTphLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF9jaGFuZ2VkQml0czowLF9jaGFuZ2VkQml0czI6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnksX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QixyZW5kZXI6YX19LEZyYWdtZW50OnYsU3RyaWN0TW9kZTp3LHVuc3RhYmxlX0FzeW5jTW9kZTpBLHVuc3RhYmxlX1Byb2ZpbGVyOngsY3JlYXRlRWxlbWVudDpNLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7bnVsbD09PWF8fHZvaWQgMD09PWE/RChcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZD1rKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUouY3VycmVudCk7dm9pZCAwIT09XG5iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YylkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuNC4wXCIsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudE93bmVyOkosXG5hc3NpZ246a319LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdD9aLmRlZmF1bHQ6WjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIvLyBzb21lIHVzZWZ1bCByZWZzXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvdWlldmVudHMtY29kZS8ja2V5LWZ1bmN0aW9uLXNlY3Rpb25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaHJvbWl1bS9odGVybS9ibG9iL21hc3Rlci9kb2MvQ29udHJvbFNlcXVlbmNlcy5tZFxuY29uc3QgQ0FOQ0VMID0gU3ltYm9sKCdDQU5DRUwnKTtcbmNvbnN0IERFRkFVTFQgPSBTeW1ib2woJ0RFRkFVTFQnKTtcbmNvbnN0IFBBU1MgPSBTeW1ib2woJ1BBU1MnKTtcbmNvbnN0IFNUUklQID0gU3ltYm9sKCdTVFJJUCcpO1xuZXhwb3J0IGNvbnN0IEtCQWN0aW9ucyA9IHtcbiAgICBDQU5DRUwsXG4gICAgREVGQVVMVCxcbiAgICBQQVNTLFxuICAgIFNUUklQLFxufTtcbmV4cG9ydCBmdW5jdGlvbiBvcChvcCwgYXJncykge1xuICAgIGxldCBtZXNzYWdlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhcmdzKSwgeyBvcCB9KTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgd2luZG93LndlYmtpdC5tZXNzYWdlSGFuZGxlcnMuX2tiLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xufVxuY29uc3QgU1MzID0gJ1xceDFiTyc7IC8vIFNpbmdsZS1TaGlmdCBUaHJlZVxuZXhwb3J0IGNvbnN0IEVTQyA9ICdcXHgxYic7IC8vIEVzY2FwZVxuZXhwb3J0IGNvbnN0IENTSSA9ICdcXHgxYlsnOyAvLyBDb21tYW5kIFN0YXJ0IEluaWRpY2F0b3JcbmV4cG9ydCBjb25zdCBERUwgPSAnXFx4N2YnOyAvLyBEZWxldGVcbmNvbnN0IGN0bCA9IChjaCkgPT4gU3RyaW5nLmZyb21DaGFyQ29kZShjaC5jaGFyQ29kZUF0KDApIC0gNjQpO1xuY29uc3QgX3Vua25vd25LZXlEZWYgPSB7XG4gICAga2V5Q29kZTogMCxcbiAgICBrZXlDYXA6ICdbVW5pZGVudGlmaWVkXScsXG4gICAgbm9ybWFsOiBQQVNTLFxuICAgIGN0cmw6IFBBU1MsXG4gICAgYWx0OiBQQVNTLFxuICAgIG1ldGE6IFBBU1MsXG59O1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgS2V5TWFwIHtcbiAgICBjb25zdHJ1Y3RvcihrZXlib2FyZCkge1xuICAgICAgICB0aGlzLl9kZWZzID0ge307XG4gICAgICAgIHRoaXMuX3JldmVyc2VEZWZzID0ge307XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICB0aGlzLl9vbkN0cmxOdW0gPSAoZSwgZGVmKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGRlZi5rZXlDYXAuc3Vic3RyKDAsIDEpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnMSc6IHJldHVybiAnMSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnMic6IHJldHVybiBjdGwoJ0AnKTtcbiAgICAgICAgICAgICAgICBjYXNlICczJzogcmV0dXJuIGN0bCgnWycpO1xuICAgICAgICAgICAgICAgIGNhc2UgJzQnOiByZXR1cm4gY3RsKCdcXFxcJyk7XG4gICAgICAgICAgICAgICAgY2FzZSAnNSc6IHJldHVybiBjdGwoJ10nKTtcbiAgICAgICAgICAgICAgICBjYXNlICc2JzogcmV0dXJuIGN0bCgnXicpO1xuICAgICAgICAgICAgICAgIGNhc2UgJzcnOiByZXR1cm4gY3RsKCdfJyk7XG4gICAgICAgICAgICAgICAgY2FzZSAnOCc6IHJldHVybiBERUw7XG4gICAgICAgICAgICAgICAgY2FzZSAnOSc6IHJldHVybiAnOSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIFBBU1M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX29uQWx0TnVtID0gKGUsIGRlZikgPT4gREVGQVVMVDtcbiAgICAgICAgdGhpcy5fb25TZWwgPSAoZSwgZGVmKSA9PiB7XG4gICAgICAgICAgICBsZXQgeyBBcnJvd0Rvd24sIEFycm93TGVmdCwgQXJyb3dSaWdodCwgQXJyb3dVcCwgRXNjYXBlLCBcbiAgICAgICAgICAgIC8vIC0tIHZpbVxuICAgICAgICAgICAgaCwgaiwgaywgbCwgbywgXG4gICAgICAgICAgICAvLyAtLSBlbWFjc1xuICAgICAgICAgICAgYiwgZiwgbiwgcCwgdywgeCwgeSwgfSA9IHRoaXMuX3JldmVyc2VEZWZzO1xuICAgICAgICAgICAgY29uc3Qgc2VsT3AgPSAoYXJnKSA9PiBvcCgnc2VsZWN0aW9uJywgYXJnKTtcbiAgICAgICAgICAgIGNvbnN0IHdvcmQgPSAnd29yZCc7XG4gICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXIgPSAnY2hhcmFjdGVyJztcbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSAnbGVmdCc7XG4gICAgICAgICAgICBjb25zdCByaWdodCA9ICdyaWdodCc7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gJ2xpbmUnO1xuICAgICAgICAgICAgY29uc3QgY29weSA9IHsgY29tbWFuZDogJ2NvcHknIH07XG4gICAgICAgICAgICBpZiAoZGVmID09PSBBcnJvd0xlZnQgfHwgZGVmID09PSBoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGdyYW4gPSBlLnNoaWZ0ID8gd29yZCA6IGNoYXJhY3RlcjtcbiAgICAgICAgICAgICAgICBzZWxPcCh7IGRpcjogbGVmdCwgZ3JhbiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZiA9PT0gQXJyb3dSaWdodCB8fCBkZWYgPT09IGwpIHtcbiAgICAgICAgICAgICAgICBsZXQgZ3JhbiA9IGUuc2hpZnQgPyB3b3JkIDogY2hhcmFjdGVyO1xuICAgICAgICAgICAgICAgIHNlbE9wKHsgZGlyOiByaWdodCwgZ3JhbiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZiA9PT0gQXJyb3dVcCB8fCBkZWYgPT09IGspIHtcbiAgICAgICAgICAgICAgICBzZWxPcCh7IGRpcjogbGVmdCwgZ3JhbjogbGluZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZiA9PT0gQXJyb3dEb3duIHx8IGRlZiA9PT0gaikge1xuICAgICAgICAgICAgICAgIHNlbE9wKHsgZGlyOiByaWdodCwgZ3JhbjogbGluZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZiA9PT0gbyB8fCBkZWYgPT09IHgpIHtcbiAgICAgICAgICAgICAgICBzZWxPcCh7IGNvbW1hbmQ6ICdjaGFuZ2UnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGVmID09PSBuICYmIGUuY3RybCkge1xuICAgICAgICAgICAgICAgIHNlbE9wKHsgZGlyOiByaWdodCwgZ3JhbjogbGluZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZiA9PT0gcCkge1xuICAgICAgICAgICAgICAgIGlmIChlLmN0cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsT3AoeyBkaXI6IGxlZnQsIGdyYW46IGxpbmUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFlLnNoaWZ0ICYmICFlLmFsdCAmJiAhZS5tZXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbE9wKHsgY29tbWFuZDogJ3Bhc3RlJyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkZWYgPT09IGIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbE9wKHsgZGlyOiBsZWZ0LCBncmFuOiBjaGFyYWN0ZXIgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGUuYWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbE9wKHsgZGlyOiBsZWZ0LCBncmFuOiB3b3JkIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gPz8/XG4gICAgICAgICAgICAgICAgICAgIHNlbE9wKHsgZGlyOiBsZWZ0LCBncmFuOiB3b3JkIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZiA9PT0gdykge1xuICAgICAgICAgICAgICAgIGlmIChlLmFsdCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxPcChjb3B5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbE9wKHsgZGlyOiByaWdodCwgZ3Jhbjogd29yZCB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkZWYgPT09IGYpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbE9wKHsgZGlyOiByaWdodCwgZ3JhbjogY2hhcmFjdGVyIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlLmFsdCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxPcCh7IGRpcjogcmlnaHQsIGdyYW46IHdvcmQgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGVmID09PSB5KSB7XG4gICAgICAgICAgICAgICAgc2VsT3AoY29weSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkZWYgPT09IEVzY2FwZSkge1xuICAgICAgICAgICAgICAgIHNlbE9wKHsgY29tbWFuZDogJ2NhbmNlbCcgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gQ0FOQ0VMO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9rZXlib2FyZCA9IGtleWJvYXJkO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuICAgIGdldEtleURlZihrZXlDb2RlKSB7XG4gICAgICAgIHZhciBrZXlEZWYgPSB0aGlzLl9kZWZzW2tleUNvZGVdO1xuICAgICAgICBpZiAoa2V5RGVmKSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5RGVmO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoaXMga2V5IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgcmVnaXN0ZXJlZCwgZmFsbCBiYWNrIHRvIHRoZSB1bmtub3duXG4gICAgICAgIC8vIGtleSBtYXBwaW5nIChrZXlDb2RlID09IDApLCBhbmQgdGhlbiBhdXRvbWF0aWNhbGx5IHJlZ2lzdGVyIGl0IHRvIGF2b2lkXG4gICAgICAgIC8vIGFueSBmdXJ0aGVyIHdhcm5pbmdzIGhlcmUuXG4gICAgICAgIGNvbnNvbGUud2FybihgTm8gZGVmaW5pdGlvbiBmb3IgKGtleUNvZGUgJHtrZXlDb2RlfSlgKTtcbiAgICAgICAga2V5RGVmID0gX3Vua25vd25LZXlEZWY7XG4gICAgICAgIHRoaXMuYWRkS2V5RGVmKGtleUNvZGUsIGtleURlZik7XG4gICAgICAgIHJldHVybiBrZXlEZWY7XG4gICAgfVxuICAgIGFkZEtleURlZihrZXlDb2RlLCBkZWYpIHtcbiAgICAgICAgaWYgKGtleUNvZGUgaW4gdGhpcy5fZGVmcykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdEdXAga2V5Q29kZTogJywga2V5Q29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGVmc1trZXlDb2RlXSA9IGRlZjtcbiAgICAgICAgLy9kZWYua2V5Q2FwWzBdXG4gICAgICAgIGxldCBub25QcmludGFibGUgPSAvXlxcW1xcdytcXF0kLy50ZXN0KGRlZi5rZXlDYXApO1xuICAgICAgICBpZiAobm9uUHJpbnRhYmxlKSB7XG4gICAgICAgICAgICBsZXQga2V5ID0gZGVmLmtleUNhcC5yZXBsYWNlKC9cXFcvZywgJycpO1xuICAgICAgICAgICAgdGhpcy5fcmV2ZXJzZURlZnNba2V5XSA9IGRlZjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBsZXR0ZXIgPSBkZWYua2V5Q2FwWzBdO1xuICAgICAgICAgICAgdGhpcy5fcmV2ZXJzZURlZnNbbGV0dGVyXSA9IGRlZjtcbiAgICAgICAgICAgIGlmICgvMC05Ly50ZXN0KGxldHRlcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXZlcnNlRGVmc1snRGlnaXQnICsgbGV0dGVyXSA9IGRlZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKC9bYS16XS8udGVzdChsZXR0ZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmV2ZXJzZURlZnNbJ0tleScgKyBsZXR0ZXIudG9VcHBlckNhc2UoKV0gPSBkZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX2RlZnMgPSB7fTtcbiAgICAgICAgY29uc3QgcmVzb2x2ZSA9IChhY3Rpb24sIGUsIGspID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uLmNhbGwodGhpcywgZSwgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBtb2QgPSAoYSwgYikgPT4gKGUsIGspID0+IHtcbiAgICAgICAgICAgIGxldCBhY3Rpb24gPSAhKGUuc2hpZnQgfHwgZS5jdHJsIHx8IGUuYWx0IHx8IGUubWV0YSkgPyBhIDogYjtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGFjdGlvbiwgZSwgayk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNoID0gKGEsIGIpID0+IChlLCBrKSA9PiB7XG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gIWUuc2hpZnQgPyBhIDogYjtcbiAgICAgICAgICAgIGUuc2hpZnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGFjdGlvbiwgZSwgayk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGJzID0gKGEsIGIpID0+IGE7XG4gICAgICAgIGNvbnN0IGFsdCA9IChhLCBiKSA9PiAoZSwgaykgPT4ge1xuICAgICAgICAgICAgbGV0IGFjdGlvbiA9IGUuYWx0ID8gYSA6IGI7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShhY3Rpb24sIGUsIGspO1xuICAgICAgICB9O1xuICAgICAgICAvL2NvbnN0IGFrID0gKGE6IEtleUFjdGlvblR5cGUsIGI6IEtleUFjdGlvblR5cGUpID0+IGE7XG4gICAgICAgIGNvbnN0IGFjID0gKGEsIGIpID0+IChlLCBrKSA9PiB7XG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gKGUuc2hpZnQgfHwgZS5jdHJsIHx8IGUuYWx0IHx8IGUubWV0YSkgPyBhIDogYjtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGFjdGlvbiwgZSwgayk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGlmIGluIHNlbGVjdGlvbiBtb2RlLCB0aGF0IGhhbmRsZSB3aXRoIHRoaXMuX29uU2VsXG4gICAgICAgIGNvbnN0IHNsID0gKGEpID0+IChlLCBrKSA9PiB7XG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gdGhpcy5fa2V5Ym9hcmQuaGFzU2VsZWN0aW9uID8gdGhpcy5fb25TZWwgOiBhO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoYWN0aW9uLCBlLCBrKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgYWRkID0gKGRlZikgPT4gdGhpcy5hZGRLZXlEZWYoZGVmLmtleUNvZGUsIGRlZik7XG4gICAgICAgIC8vYWRkKHsga2V5Q29kZTogMCwga2V5Q2FwOiAnW1VOS05PV05dJywgbm9ybWFsOiBQQVNTLCBjdHJsOiBQQVNTLCBhbHQ6IFBBU1MsIG1ldGE6IFBBU1MgfSk7XG4gICAgICAgIGFkZChfdW5rbm93bktleURlZik7XG4gICAgICAgIC8vIGZpcnN0IHJvd1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAyNywga2V5Q2FwOiAnW0VzY2FwZV0nLCBub3JtYWw6IHNsKEVTQyksIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTEyLCBrZXlDYXA6ICdbRjFdJywgbm9ybWFsOiBtb2QoU1MzICsgJ1AnLCBDU0kgKyAnUCcpLCBjdHJsOiBERUZBVUxULCBhbHQ6IENTSSArICcyM34nLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMTMsIGtleUNhcDogJ1tGMl0nLCBub3JtYWw6IG1vZChTUzMgKyAnUScsIENTSSArICdRJyksIGN0cmw6IERFRkFVTFQsIGFsdDogQ1NJICsgJzI0ficsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDExNCwga2V5Q2FwOiAnW0YzXScsIG5vcm1hbDogbW9kKFNTMyArICdSJywgQ1NJICsgJ1InKSwgY3RybDogREVGQVVMVCwgYWx0OiBDU0kgKyAnMjV+JywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTE1LCBrZXlDYXA6ICdbRjRdJywgbm9ybWFsOiBtb2QoU1MzICsgJ1MnLCBDU0kgKyAnUycpLCBjdHJsOiBERUZBVUxULCBhbHQ6IENTSSArICcyNn4nLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMTYsIGtleUNhcDogJ1tGNV0nLCBub3JtYWw6IENTSSArICcxNX4nLCBjdHJsOiBERUZBVUxULCBhbHQ6IENTSSArICcyOH4nLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMTcsIGtleUNhcDogJ1tGNl0nLCBub3JtYWw6IENTSSArICcxN34nLCBjdHJsOiBERUZBVUxULCBhbHQ6IENTSSArICcyOX4nLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMTgsIGtleUNhcDogJ1tGN10nLCBub3JtYWw6IENTSSArICcxOH4nLCBjdHJsOiBERUZBVUxULCBhbHQ6IENTSSArICczMX4nLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMTksIGtleUNhcDogJ1tGOF0nLCBub3JtYWw6IENTSSArICcxOX4nLCBjdHJsOiBERUZBVUxULCBhbHQ6IENTSSArICczMn4nLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMjAsIGtleUNhcDogJ1tGOV0nLCBub3JtYWw6IENTSSArICcyMH4nLCBjdHJsOiBERUZBVUxULCBhbHQ6IENTSSArICczM34nLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMjEsIGtleUNhcDogJ1tGMTBdJywgbm9ybWFsOiBDU0kgKyAnMjF+JywgY3RybDogREVGQVVMVCwgYWx0OiBDU0kgKyAnMzR+JywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTIyLCBrZXlDYXA6ICdbRjExXScsIG5vcm1hbDogQ1NJICsgJzIzficsIGN0cmw6IERFRkFVTFQsIGFsdDogQ1NJICsgJzQyficsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDEyMywga2V5Q2FwOiAnW0YxMl0nLCBub3JtYWw6IENTSSArICcyNH4nLCBjdHJsOiBERUZBVUxULCBhbHQ6IENTSSArICc0M34nLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBjb25zdCBvbkN0cmxOdW0gPSB0aGlzLl9vbkN0cmxOdW07XG4gICAgICAgIGNvbnN0IG9uQWx0TnVtID0gdGhpcy5fb25BbHROdW07XG4gICAgICAgIC8vIHNlY29uZCByb3dcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTkyLCBrZXlDYXA6ICdgficsIG5vcm1hbDogREVGQVVMVCwgY3RybDogc2goY3RsKCdAJyksIGN0bCgnXicpKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA0OSwga2V5Q2FwOiAnMSEnLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IG9uQ3RybE51bSwgYWx0OiBvbkFsdE51bSwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNTAsIGtleUNhcDogJzJAJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBvbkN0cmxOdW0sIGFsdDogb25BbHROdW0sIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDUxLCBrZXlDYXA6ICczIycsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25DdHJsTnVtLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA1Miwga2V5Q2FwOiAnNCQnLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IG9uQ3RybE51bSwgYWx0OiBvbkFsdE51bSwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNTMsIGtleUNhcDogJzUlJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBvbkN0cmxOdW0sIGFsdDogb25BbHROdW0sIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDU0LCBrZXlDYXA6ICc2XicsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25DdHJsTnVtLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA1NSwga2V5Q2FwOiAnNyYnLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IG9uQ3RybE51bSwgYWx0OiBvbkFsdE51bSwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNTYsIGtleUNhcDogJzgqJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBvbkN0cmxOdW0sIGFsdDogb25BbHROdW0sIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDU3LCBrZXlDYXA6ICc5KCcsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25DdHJsTnVtLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA0OCwga2V5Q2FwOiAnMCknLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IERFRkFVTFQsIGFsdDogb25BbHROdW0sIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDE4OSwga2V5Q2FwOiAnLV8nLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IGN0bCgnXycpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDE4Nywga2V5Q2FwOiAnPSsnLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogOCwga2V5Q2FwOiAnW0JhY2tzcGFjZV0nLCBub3JtYWw6IGJzKERFTCwgJ1xcYicpLCBjdHJsOiBicygnXFxiJywgREVMKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICAvLyB0aGlyZCByb3dcbiAgICAgICAgYWRkKHsga2V5Q29kZTogOSwga2V5Q2FwOiAnW1RhYl0nLCBub3JtYWw6IHNoKCdcXHQnLCBDU0kgKyAnWicpLCBjdHJsOiBTVFJJUCwgYWx0OiBTVFJJUCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogODEsIGtleUNhcDogJ3FRJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ1EnKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA4Nywga2V5Q2FwOiAnd1cnLCBub3JtYWw6IHNsKERFRkFVTFQpLCBjdHJsOiBjdGwoJ1cnKSwgYWx0OiBzbChERUZBVUxUKSwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNjksIGtleUNhcDogJ2VFJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ0UnKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA4Miwga2V5Q2FwOiAnclInLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IGN0bCgnUicpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDg0LCBrZXlDYXA6ICd0VCcsIG5vcm1hbDogREVGQVVMVCwgY3RybDogY3RsKCdUJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogODksIGtleUNhcDogJ3lZJywgbm9ybWFsOiBzbChERUZBVUxUKSwgY3RybDogY3RsKCdZJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogODUsIGtleUNhcDogJ3VVJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ1UnKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA3Mywga2V5Q2FwOiAnaUknLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IGN0bCgnSScpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDc5LCBrZXlDYXA6ICdvTycsIG5vcm1hbDogc2woREVGQVVMVCksIGN0cmw6IGN0bCgnTycpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDgwLCBrZXlDYXA6ICdwUCcsIG5vcm1hbDogc2woREVGQVVMVCksIGN0cmw6IHNsKGN0bCgnUCcpKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAyMTksIGtleUNhcDogJ1t7Jywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ1snKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAyMjEsIGtleUNhcDogJ119Jywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ10nKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAyMjAsIGtleUNhcDogJ1xcXFx8Jywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ1xcXFwnKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICAvLyBmb3VydGggcm93XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDIwLCBrZXlDYXA6ICdbQ2Fwc0xvY2tdJywgbm9ybWFsOiBQQVNTLCBjdHJsOiBQQVNTLCBhbHQ6IFBBU1MsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDY1LCBrZXlDYXA6ICdhQScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogY3RsKCdBJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogODMsIGtleUNhcDogJ3NTJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ1MnKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA2OCwga2V5Q2FwOiAnZEQnLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IGN0bCgnRCcpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDcwLCBrZXlDYXA6ICdmRicsIG5vcm1hbDogREVGQVVMVCwgY3RybDogc2woY3RsKCdGJykpLCBhbHQ6IHNsKERFRkFVTFQpLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA3MSwga2V5Q2FwOiAnZ0cnLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IGN0bCgnRycpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDcyLCBrZXlDYXA6ICdoSCcsIG5vcm1hbDogc2woREVGQVVMVCksIGN0cmw6IGN0bCgnSCcpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDc0LCBrZXlDYXA6ICdqSicsIG5vcm1hbDogc2woREVGQVVMVCksIGN0cmw6IGN0bCgnSicpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDc1LCBrZXlDYXA6ICdrSycsIG5vcm1hbDogc2woREVGQVVMVCksIGN0cmw6IGN0bCgnSycpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDc2LCBrZXlDYXA6ICdsTCcsIG5vcm1hbDogc2woREVGQVVMVCksIGN0cmw6IGN0bCgnTCcpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDE4Niwga2V5Q2FwOiAnOzonLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IFNUUklQLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDIyMiwga2V5Q2FwOiAnXFwnXCInLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IFNUUklQLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDEzLCBrZXlDYXA6ICdbRW50ZXJdJywgbm9ybWFsOiAnXFxyJywgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICAvLyBmaWZ0aCByb3dcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTYsIGtleUNhcDogJ1tTaGlmdF0nLCBub3JtYWw6IFBBU1MsIGN0cmw6IFBBU1MsIGFsdDogUEFTUywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogOTAsIGtleUNhcDogJ3paJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ1onKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA4OCwga2V5Q2FwOiAneFgnLCBub3JtYWw6IHNsKERFRkFVTFQpLCBjdHJsOiBzbChjdGwoJ1gnKSksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNjcsIGtleUNhcDogJ2NDJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ0MnKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA4Niwga2V5Q2FwOiAndlYnLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IGN0bCgnVicpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDY2LCBrZXlDYXA6ICdiQicsIG5vcm1hbDogc2woREVGQVVMVCksIGN0cmw6IHNsKGN0bCgnQicpKSwgYWx0OiBzbChERUZBVUxUKSwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNzgsIGtleUNhcDogJ25OJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBzbChjdGwoJ04nKSksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNzcsIGtleUNhcDogJ21NJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ00nKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxODgsIGtleUNhcDogJyw8Jywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBhbHQoU1RSSVAsIFBBU1MpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDE5MCwga2V5Q2FwOiAnLj4nLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IGFsdChTVFJJUCwgUEFTUyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTkxLCBrZXlDYXA6ICcvPycsIG5vcm1hbDogREVGQVVMVCwgY3RybDogc2goY3RsKCdfJyksIGN0bCgnPycpKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICAvLyBzaXh0aCByb3dcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTcsIGtleUNhcDogJ1tDb250cm9sXScsIG5vcm1hbDogUEFTUywgY3RybDogUEFTUywgYWx0OiBQQVNTLCBtZXRhOiBQQVNTIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxOCwga2V5Q2FwOiAnW0FsdF0nLCBub3JtYWw6IFBBU1MsIGN0cmw6IFBBU1MsIGFsdDogUEFTUywgbWV0YTogUEFTUyB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogOTEsIGtleUNhcDogJ1tNZXRhXScsIG5vcm1hbDogUEFTUywgY3RybDogUEFTUywgYWx0OiBQQVNTLCBtZXRhOiBQQVNTIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAzMiwga2V5Q2FwOiAnICcsIG5vcm1hbDogREVGQVVMVCwgY3RybDogY3RsKCdAJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogOTMsIGtleUNhcDogJ1tNZXRhXScsIG5vcm1hbDogUEFTUywgY3RybDogUEFTUywgYWx0OiBQQVNTLCBtZXRhOiBQQVNTIH0pO1xuICAgICAgICAvLyB0aGVzZSB0aGluZ3MuXG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDQyLCBrZXlDYXA6ICdbUFJUU0NSXScsIG5vcm1hbDogUEFTUywgY3RybDogUEFTUywgYWx0OiBQQVNTLCBtZXRhOiBQQVNTIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxNDUsIGtleUNhcDogJ1tTQ1JMS10nLCBub3JtYWw6IFBBU1MsIGN0cmw6IFBBU1MsIGFsdDogUEFTUywgbWV0YTogUEFTUyB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTksIGtleUNhcDogJ1tCUkVBS10nLCBub3JtYWw6IFBBU1MsIGN0cmw6IFBBU1MsIGFsdDogUEFTUywgbWV0YTogUEFTUyB9KTtcbiAgICAgICAgLy8gYmxvY2sgb2Ygc2l4IGtleXMgYWJvdmUgdGhlIGFycm93c1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA0NSwga2V5Q2FwOiAnW0luc2VydF0nLCBub3JtYWw6IENTSSArICcyficsIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMzYsIGtleUNhcDogJ1tIb21lXScsIG5vcm1hbDogRVNDICsgJ09IJywgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAzMywga2V5Q2FwOiAnW1BhZ2VVcF0nLCBub3JtYWw6IENTSSArICc1ficsIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNDYsIGtleUNhcDogJ1tERUxdJywgbm9ybWFsOiBDU0kgKyAnM34nLCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDM1LCBrZXlDYXA6ICdbRW5kXScsIG5vcm1hbDogRVNDICsgJ09GJywgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAzNCwga2V5Q2FwOiAnW1BhZ2VEb3duXScsIG5vcm1hbDogQ1NJICsgJzZ+JywgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICAvLyBhcnJvdyBrZXlzXG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDM4LCBrZXlDYXA6ICdbQXJyb3dVcF0nLCBub3JtYWw6IHNsKGFjKENTSSArICdBJywgU1MzICsgJ0EnKSksIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNDAsIGtleUNhcDogJ1tBcnJvd0Rvd25dJywgbm9ybWFsOiBzbChhYyhDU0kgKyAnQicsIFNTMyArICdCJykpLCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDM5LCBrZXlDYXA6ICdbQXJyb3dSaWdodF0nLCBub3JtYWw6IHNsKGFjKENTSSArICdDJywgU1MzICsgJ0MnKSksIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMzcsIGtleUNhcDogJ1tBcnJvd0xlZnRdJywgbm9ybWFsOiBzbChhYyhDU0kgKyAnRCcsIFNTMyArICdEJykpLCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDE0NCwga2V5Q2FwOiAnW051bUxvY2tdJywgbm9ybWFsOiBQQVNTLCBjdHJsOiBQQVNTLCBhbHQ6IFBBU1MsIG1ldGE6IFBBU1MgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDEyLCBrZXlDYXA6ICdbQ2xlYXJdJywgbm9ybWFsOiBQQVNTLCBjdHJsOiBQQVNTLCBhbHQ6IFBBU1MsIG1ldGE6IFBBU1MgfSk7XG4gICAgICAgIC8vIGtleXBhZCB3aXRoIG51bWxvY2tcbiAgICAgICAgYWRkKHsga2V5Q29kZTogOTYsIGtleUNhcDogJ1tOdW1wYWQwXScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA5Nywga2V5Q2FwOiAnW051bXBhZDFdJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDk4LCBrZXlDYXA6ICdbTnVtcGFkMl0nLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogOTksIGtleUNhcDogJ1tOdW1wYWQzXScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDAsIGtleUNhcDogJ1tOdW1wYWQ0XScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDEsIGtleUNhcDogJ1tOdW1wYWQ1XScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDIsIGtleUNhcDogJ1tOdW1wYWQ2XScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDMsIGtleUNhcDogJ1tOdW1wYWQ3XScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDQsIGtleUNhcDogJ1tOdW1wYWQ4XScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDUsIGtleUNhcDogJ1tOdW1wYWQ5XScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDcsIGtleUNhcDogJ1tOdW1wYWRBZGRdJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDEwOSwga2V5Q2FwOiAnW051bXBhZFN1YnRyYWN0XScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDYsIGtleUNhcDogJ1tOdW1wYWRNdWx0aXBseV0nLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTExLCBrZXlDYXA6ICdbTnVtcGFkRGl2aWRlXScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMTAsIGtleUNhcDogJ1tOdW1wYWREaWNpbWFsXScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRGVmc1snQmFja3FvdXRlJ10gPSB0aGlzLl9kZWZzWzE5Ml07XG4gICAgICAgIHRoaXMuX3JldmVyc2VEZWZzWydCcmFja2V0TGVmdCddID0gdGhpcy5fZGVmc1syMjldO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRGVmc1snQnJhY2tldFJpZ2h0J10gPSB0aGlzLl9kZWZzWzIyMV07XG4gICAgICAgIHRoaXMuX3JldmVyc2VEZWZzWydTbGFzaCddID0gdGhpcy5fZGVmc1sxOTFdO1xuICAgICAgICB0aGlzLl9yZXZlcnNlRGVmc1snU3BhY2UnXSA9IHRoaXMuX2RlZnNbMzJdO1xuICAgIH1cbiAgICBrZXlDb2RlKGNoKSB7XG4gICAgICAgIGxldCBkZWYgPSB0aGlzLl9yZXZlcnNlRGVmc1tjaF07XG4gICAgICAgIGlmIChkZWYpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWYua2V5Q29kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAga2V5KGtleUNvZGUpIHtcbiAgICAgICAgbGV0IGRlZiA9IHRoaXMuX2RlZnNba2V5Q29kZV07XG4gICAgICAgIGlmICghZGVmKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGtleUNhcCA9IGRlZi5rZXlDYXA7XG4gICAgICAgIGxldCBub25QcmludGFibGUgPSAvXlxcW1xcdytcXF0kLy50ZXN0KGtleUNhcCk7XG4gICAgICAgIGlmIChub25QcmludGFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiBrZXlDYXAuc3Vic3RyKDEsIGtleUNhcC5sZW5ndGggLSAyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5Q2FwLnN1YnN0cigwLCAxKTtcbiAgICB9XG59XG4iLCJjb25zdCBVSUtleU1vZGlmaWVyQWxwaGFTaGlmdCA9IDEgPDwgMTY7IC8vIFRoaXMgYml0IGluZGljYXRlcyBDYXBzTG9ja1xuY29uc3QgVUlLZXlNb2RpZmllclNoaWZ0ID0gMSA8PCAxNztcbmNvbnN0IFVJS2V5TW9kaWZpZXJDb250cm9sID0gMSA8PCAxODtcbmNvbnN0IFVJS2V5TW9kaWZpZXJBbHRlcm5hdGUgPSAxIDw8IDE5O1xuY29uc3QgVUlLZXlNb2RpZmllckNvbW1hbmQgPSAxIDw8IDIwO1xuY29uc3QgVUlLZXlNb2RpZmllck51bWVyaWNQYWQgPSAxIDw8IDIxO1xuZXhwb3J0IGZ1bmN0aW9uIHRvVUlLaXRGbGFncyhlLCBjYXBzS2V5ID0gdHJ1ZSkge1xuICAgIGxldCByZXMgPSAwO1xuICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgIHJlcyB8PSBVSUtleU1vZGlmaWVyU2hpZnQ7XG4gICAgfVxuICAgIGlmIChlLmN0cmxLZXkpIHtcbiAgICAgICAgcmVzIHw9IFVJS2V5TW9kaWZpZXJDb250cm9sO1xuICAgIH1cbiAgICBpZiAoZS5hbHRLZXkpIHtcbiAgICAgICAgcmVzIHw9IFVJS2V5TW9kaWZpZXJBbHRlcm5hdGU7XG4gICAgfVxuICAgIGlmIChlLm1ldGFLZXkpIHtcbiAgICAgICAgcmVzIHw9IFVJS2V5TW9kaWZpZXJDb21tYW5kO1xuICAgIH1cbiAgICBpZiAoY2Fwc0tleSkge1xuICAgICAgICByZXMgfD0gVUlLZXlNb2RpZmllckFscGhhU2hpZnQ7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnQgZnVuY3Rpb24gVUlLaXRGbGFnc1RvT2JqZWN0KGZsYWdzKSB7XG4gICAgdmFyIHNoaWZ0ID0gKGZsYWdzICYgVUlLZXlNb2RpZmllclNoaWZ0KSA9PSBVSUtleU1vZGlmaWVyU2hpZnQ7XG4gICAgdmFyIGFsdCA9IChmbGFncyAmIFVJS2V5TW9kaWZpZXJBbHRlcm5hdGUpID09IFVJS2V5TW9kaWZpZXJBbHRlcm5hdGU7XG4gICAgdmFyIGN0cmwgPSAoZmxhZ3MgJiBVSUtleU1vZGlmaWVyQ29udHJvbCkgPT0gVUlLZXlNb2RpZmllckNvbnRyb2w7XG4gICAgdmFyIG1ldGEgPSAoZmxhZ3MgJiBVSUtleU1vZGlmaWVyQ29tbWFuZCkgPT0gVUlLZXlNb2RpZmllckNvbW1hbmQ7XG4gICAgcmV0dXJuIHsgc2hpZnQsIGFsdCwgY3RybCwgbWV0YSB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmluZGluZ3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9tYXAgPSB7fTtcbiAgICAgICAgdGhpcy5leHBhbmRGbiA9IChiaW5kaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAoYmluZGluZy5rZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBmbnMgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiAxMjEsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ0YxMCcsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdGMTAnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJzEyMTowJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5Q29kZTogMTEyLFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdGMScsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdGMScsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnMTEyOjAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiAxMTMsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ0YyJyxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ0YyJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICcxMTM6MCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleUNvZGU6IDExNCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnRjMnLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAnRjMnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJzExNDowJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5Q29kZTogMTE1LFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdGNCcsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdGNCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnMTE1OjAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiAxMTYsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ0Y1JyxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ0Y1JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICcxMTY6MCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleUNvZGU6IDExNyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnRjYnLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAnRjYnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJzExNzowJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5Q29kZTogMTE4LFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdGNycsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdGNycsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnMTE4OjAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiAxMTksXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ0Y4JyxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ0Y4JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICcxMTk6MCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleUNvZGU6IDEyMCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnRjknLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAnRjknLFxuICAgICAgICAgICAgICAgICAgICBpZDogJzEyMDowJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGxldCBrZXlzID0gYmluZGluZy5rZXlzLnNsaWNlKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgbnVtSWQgPSBpICsgNDggKyAnOjAnO1xuICAgICAgICAgICAgICAgIGxldCBmbiA9IGZuc1tpXTtcbiAgICAgICAgICAgICAgICBiaW5kaW5nLmtleXMgPSBrZXlzLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgYmluZGluZy5rZXlzLnB1c2gobnVtSWQpO1xuICAgICAgICAgICAgICAgIGJpbmRpbmcuYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncHJlc3MnLFxuICAgICAgICAgICAgICAgICAgICBrZXk6IGZuLFxuICAgICAgICAgICAgICAgICAgICBtb2RzOiAwLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5leHBhbmRCaW5kaW5nKGJpbmRpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmV4cGFuZEN1cnNvciA9IChiaW5kaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAoYmluZGluZy5rZXlzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGN1cnNvciA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleUNvZGU6IDM2LFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdIT01FJyxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ0hPTUUnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJzM2OjAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiAzMyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnUEdVUCcsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdQR1VQJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICczMzowJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5Q29kZTogMzUsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ0VORCcsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdFTkQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJzM1OjAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiAzNCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnUEdET1dOJyxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ1BHRE9XTicsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnMzQ6MCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBsZXQgbGVmdCA9ICczNzowJztcbiAgICAgICAgICAgIGxldCB1cCA9ICczODowJztcbiAgICAgICAgICAgIGxldCByaWdodCA9ICczOTowJztcbiAgICAgICAgICAgIGxldCBkb3duID0gJzQwOjAnO1xuICAgICAgICAgICAgbGV0IGFycm93cyA9IFtsZWZ0LCB1cCwgcmlnaHQsIGRvd25dO1xuICAgICAgICAgICAgbGV0IGtleXMgPSBiaW5kaW5nLmtleXMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFycm93ID0gYXJyb3dzW2ldO1xuICAgICAgICAgICAgICAgIGxldCBjdXIgPSBjdXJzb3JbaV07XG4gICAgICAgICAgICAgICAgYmluZGluZy5rZXlzID0ga2V5cy5zbGljZSgpO1xuICAgICAgICAgICAgICAgIGJpbmRpbmcua2V5cy5wdXNoKGFycm93KTtcbiAgICAgICAgICAgICAgICBiaW5kaW5nLmFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3ByZXNzJyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBjdXIsXG4gICAgICAgICAgICAgICAgICAgIG1vZHM6IDAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmV4cGFuZEJpbmRpbmcoYmluZGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZXhwYW5kQmluZGluZyA9IChiaW5kaW5nKSA9PiB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IGJpbmRpbmcua2V5cy5tYXAoayA9PiBrLnNwbGl0KCctJylbMF0pO1xuICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzID0gW2tleXMuc29ydCgpXTtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIGNvbnN0IHNoaWZ0ID0ge1xuICAgICAgICAgICAgICAgIGlkTGVmdDogJzE2OjEnLFxuICAgICAgICAgICAgICAgIGlkUmlnaHQ6ICcxNjoyJyxcbiAgICAgICAgICAgICAgICBsb2M6IGJpbmRpbmcuc2hpZnRMb2MsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgY29udHJvbCA9IHtcbiAgICAgICAgICAgICAgICBpZExlZnQ6ICcxNzoxJyxcbiAgICAgICAgICAgICAgICBpZFJpZ2h0OiAnMTc6MicsXG4gICAgICAgICAgICAgICAgbG9jOiBiaW5kaW5nLmNvbnRyb2xMb2MsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0ge1xuICAgICAgICAgICAgICAgIGlkTGVmdDogJzE4OjEnLFxuICAgICAgICAgICAgICAgIGlkUmlnaHQ6ICcxODoyJyxcbiAgICAgICAgICAgICAgICBsb2M6IGJpbmRpbmcub3B0aW9uTG9jLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICAgICAgaWRMZWZ0OiAnOTE6MScsXG4gICAgICAgICAgICAgICAgaWRSaWdodDogJzkzOjAnLFxuICAgICAgICAgICAgICAgIGxvYzogYmluZGluZy5jb21tYW5kTG9jLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBkb3VibGVLZXlzID0gW3NoaWZ0LCBjb250cm9sLCBvcHRpb24sIGNvbW1hbmRdO1xuICAgICAgICAgICAgZm9yIChsZXQgayBvZiBkb3VibGVLZXlzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSByZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IHJlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlkeCA9IHJvdy5pbmRleE9mKGsuaWRMZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA9IHJvdy5pbmRleE9mKGsuaWRSaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChrLmxvYyA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dbaWR4XSA9IGsuaWRMZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGsubG9jID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1tpZHhdID0gay5pZFJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcm93W2lkeF0gPSBrLmlkTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJpZ2h0ID0gcm93LnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0W2lkeF0gPSBrLmlkUmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHJpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCByb3cgb2YgcmVzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHIgPSByb3cuc29ydCgpLmpvaW4oJzonKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXBbcl0gPSBiaW5kaW5nLmFjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IHt9O1xuICAgIH1cbiAgICBtYXRjaChrZXlJZHMpIHtcbiAgICAgICAgbGV0IGtleXNQYXRoID0ga2V5SWRzLnNvcnQoKS5qb2luKCc6Jyk7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXBba2V5c1BhdGhdO1xuICAgIH1cbn1cbiIsImltcG9ydCBLZXlNYXAsIHsgQ1NJLCBERUwsIEVTQywgS0JBY3Rpb25zLCBvcCwgfSBmcm9tICcuL0tleU1hcCc7XG5pbXBvcnQgeyB0b1VJS2l0RmxhZ3MsIFVJS2l0RmxhZ3NUb09iamVjdCB9IGZyb20gJy4vVUlLZXlNb2RpZmllckZsYWdzJztcbmltcG9ydCBCaW5kaW5ncyBmcm9tICcuL0JpbmRpbmdzJztcbmNvbnN0IENBTkNFTCA9IEtCQWN0aW9ucy5DQU5DRUw7XG5jb25zdCBERUZBVUxUID0gS0JBY3Rpb25zLkRFRkFVTFQ7XG5jb25zdCBQQVNTID0gS0JBY3Rpb25zLlBBU1M7XG5jb25zdCBTVFJJUCA9IEtCQWN0aW9ucy5TVFJJUDtcbmZ1bmN0aW9uIGhleF90b19hc2NpaShoZXgpIHtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgbGV0IGxlbiA9IGhleC5sZW5ndGg7XG4gICAgZm9yIChsZXQgbiA9IDA7IG4gPCBsZW47IG4gKz0gMikge1xuICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChoZXguc3Vic3RyKG4sIDIpLCAxNikpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuZnVuY3Rpb24gX2FjdGlvbihhY3Rpb24pIHtcbiAgICBpZiAoYWN0aW9uICE9PSAnZXNjYXBlJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2V5Q29kZTogMjcsXG4gICAgICAgIGNvZGU6ICdbRXNjYXBlXScsXG4gICAgICAgIGtleTogJ1tFc2NhcGVdJyxcbiAgICB9O1xufVxuY29uc3QgX2hvbGRlcnMgPSBuZXcgU2V0KFtcbiAgICAnMjA6MCcsXG4gICAgJzE2OjEnLFxuICAgICcxNjoyJyxcbiAgICAnMTc6MScsXG4gICAgJzE3OjInLFxuICAgICcxODoxJyxcbiAgICAnMTg6MicsXG4gICAgJzkxOjEnLFxuICAgICc5MToyJyxcbiAgICAnOTM6MCcsXG5dKTtcbmNvbnN0IF9sZWZ0U2hpZnQgPSAnMTY6MSc7XG5jb25zdCBfbGVmdENvbnRyb2wgPSAnMTc6MSc7XG5jb25zdCBfbGVmdE9wdGlvbiA9ICcxODoxJztcbmNvbnN0IF9sZWZ0Q29tbWFuZCA9ICc5MToxJztcbmNvbnN0IF9jYXBzTG9ja0lEID0gJzIwOjAnO1xuLy8gV2UgdHJhY2sga2V5IGJ5IGtleUNvZGUsIGNvZGUsIGxvY2F0aW9uIGFuZCBrZXlcbmZ1bmN0aW9uIF9rZXlJZChlKSB7XG4gICAgbGV0IGtleUNvZGUgPSBlLmtleUNvZGUgPT09IDIyOSA/IDAgOiBlLmtleUNvZGU7XG4gICAgbGV0IGxvYyA9IGUubG9jYXRpb247XG4gICAgaWYgKGtleUNvZGUpIHtcbiAgICAgICAgLy8gd2UgY2FuIGlkZW50aXRmeSB3aXRoIHBhaXIga2V5Q29kZSBhbmQgbG9jXG4gICAgICAgIHJldHVybiBgJHtrZXlDb2RlfToke2xvY31gO1xuICAgIH1cbiAgICBsZXQga2V5ID0gKGUua2V5IHx8ICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBgJHtrZXlDb2RlfToke2xvY306JHtrZXl9YDtcbn1cbmZ1bmN0aW9uIF9yZW1vdmVBY2NlbnRzKHN0cikge1xuICAgIGxldCByZXMgPSBzdHIubm9ybWFsaXplKCdORkQnKS5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCAnJyk7XG4gICAgbGV0IHRtcCA9IHJlcy5yZXBsYWNlKC9eW1xcdTAyYzZcXHUwMGE4XFx1MDBiNFxcdTAyZGNcXHUwMDYwXS8sICcnKTtcbiAgICBpZiAodG1wKSB7XG4gICAgICAgIHJlcyA9IHRtcDtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIF9ibG9ja0V2ZW50KGUpIHtcbiAgICBpZiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gX3BhdGNoS2V5RG93bihrZXlEb3duLCBrZXlNYXAsIGlzSEtCLCBlKSB7XG4gICAgaWYgKCFlKSB7XG4gICAgICAgIHJldHVybiBrZXlEb3duO1xuICAgIH1cbiAgICAvLyBpT1MgcmVwb3J0cyBpbmNvcnJlY3Qga2V5Q29kZSBmb3IgaCxpLGMsbSBhbmQgWyB3aXRoIENvbnRyb2wga2V5IHByZXNzZWRcbiAgICBpZiAoZS5jdHJsS2V5KSB7XG4gICAgICAgIGxldCBjaCA9IGUua2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGxldCBrYyA9IGUua2V5Q29kZTtcbiAgICAgICAgaWYgKChrYyA9PT0gOCAmJiBjaCA9PT0gJ2gnKSB8fFxuICAgICAgICAgICAgKGtjID09PSA5ICYmIGNoID09PSAnaScpIHx8XG4gICAgICAgICAgICAoa2MgPT09IDEzICYmIGNoID09PSAnYycpIHx8XG4gICAgICAgICAgICAoa2MgPT09IDEzICYmIGNoID09PSAnbScpIHx8XG4gICAgICAgICAgICAoa2MgPT09IDI3ICYmIGNoID09PSAnWycpKSB7XG4gICAgICAgICAgICBrZXlEb3duLmtleUNvZGUgPSBrZXlNYXAua2V5Q29kZShjaCkgfHwga2V5RG93bi5rZXlDb2RlO1xuICAgICAgICAgICAgcmV0dXJuIGtleURvd247XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGMgPSBlLmNvZGU7XG4gICAgICAgIGlmICgoa2MgPT09IDggJiYgYyA9PT0gJ0tleUgnKSB8fFxuICAgICAgICAgICAgKGtjID09PSA5ICYmIGMgPT09ICdLZXlJJykgfHxcbiAgICAgICAgICAgIChrYyA9PT0gMTMgJiYgYyA9PT0gJ0tleUMnKSB8fFxuICAgICAgICAgICAgKGtjID09PSAxMyAmJiBjID09PSAnS2V5TScpIHx8XG4gICAgICAgICAgICAoa2MgPT09IDI3ICYmIGMgPT09ICdCcmFja2V0TGVmdCcpKSB7XG4gICAgICAgICAgICBrZXlEb3duLmtleUNvZGUgPSBrZXlNYXAua2V5Q29kZShjKSB8fCBrZXlEb3duLmtleUNvZGU7XG4gICAgICAgICAgICByZXR1cm4ga2V5RG93bjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBTb2Z0d2FyZSBLQjogd2UgbmVlZCBoYW5kbGUgc2hpZnQgcmlnaHRcbiAgICBpZiAoIWlzSEtCKSB7XG4gICAgICAgIGxldCBjaCA9IGUua2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICgvXlt+IUAjJCVeJiooKV8re318OlwiPD4/XSQvLnRlc3QoY2gpIHx8XG4gICAgICAgICAgICAoL15cXHckLy50ZXN0KGNoKSAmJiBjaCAhPT0gZS5rZXkpKSB7XG4gICAgICAgICAgICBrZXlEb3duLnNoaWZ0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5RG93bjtcbiAgICB9XG4gICAgcmV0dXJuIGtleURvd247XG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLZXlib2FyZCB7XG4gICAgY29uc3RydWN0b3IodGVybWluYWwsIGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fa2V5TWFwID0gbmV3IEtleU1hcCh0aGlzKTtcbiAgICAgICAgdGhpcy5fYmluZGluZ3MgPSBuZXcgQmluZGluZ3MoKTtcbiAgICAgICAgdGhpcy5fbGFuZyA9ICdlbic7XG4gICAgICAgIHRoaXMuX2xhbmdXaXRoRGVsZXRlcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc0hLQiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmhhc1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9sYXN0S2V5RG93bkV2ZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2Fwc0xvY2tSZW1hcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zaGlmdFJlbWFwcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3JlbW92ZUFjY2VudHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbWV0YVNlbmRzRXNjYXBlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fYWx0U2VuZHNXaGF0ID0gJ2VzY2FwZSc7XG4gICAgICAgIHRoaXMuX2lnbm9yZUFjY2VudHMgPSB7XG4gICAgICAgICAgICBBbHRMZWZ0OiB0cnVlLFxuICAgICAgICAgICAgQWx0UmlnaHQ6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX21vZHNNYXAgPSB7XG4gICAgICAgICAgICBTaGlmdExlZnQ6ICdTaGlmdCcsXG4gICAgICAgICAgICBTaGlmdFJpZ2h0OiAnU2hpZnQnLFxuICAgICAgICAgICAgQWx0TGVmdDogJ0VzY2FwZScsXG4gICAgICAgICAgICBBbHRSaWdodDogJ0VzY2FwZScsXG4gICAgICAgICAgICBNZXRhTGVmdDogJ01ldGEnLFxuICAgICAgICAgICAgTWV0YVJpZ2h0OiAnTWV0YScsXG4gICAgICAgICAgICBDb250cm9sTGVmdDogJ0NvbnRyb2wnLFxuICAgICAgICAgICAgQ29udHJvbFJpZ2h0OiAnQ29udHJvbCcsXG4gICAgICAgICAgICBDYXBzTG9jazogJycsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2Rvd25NYXAgPSB7fTtcbiAgICAgICAgdGhpcy5fdXBNYXAgPSB7fTtcbiAgICAgICAgdGhpcy5fbW9kcyA9IHtcbiAgICAgICAgICAgIFNoaWZ0OiBuZXcgU2V0KCksXG4gICAgICAgICAgICBBbHQ6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIE1ldGE6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIENvbnRyb2w6IG5ldyBTZXQoKSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fdXAgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8vIGN1c3RvbSBzaG9ydGN1dHMgdHJhY2tlclxuICAgICAgICB0aGlzLl9kb3duID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLmNhcmV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVVJS2l0TW9kc0lmTmVlZGVkID0gKGUpID0+IHtcbiAgICAgICAgICAgIGxldCBjb2RlID0gZS5jb2RlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NhcHNMb2NrUmVtYXBwZWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgbW9kcztcbiAgICAgICAgICAgICAgICBpZiAoZS50eXBlID09ICdrZXl1cCcgJiYgY29kZSA9PSAnQ2Fwc0xvY2snKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kcyA9IHRvVUlLaXRGbGFncyhlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3AoJ21vZHMnLCB7IG1vZHM6IG1vZHMgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29kZSA9PSAnQWx0TGVmdCcgfHwgY29kZSA9PSAnQWx0UmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lnbm9yZUFjY2VudHNbY29kZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PSAna2V5ZG93bicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wKCdndWFyZC1pbWUtb24nLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcCgnZ3VhcmQtaW1lLW9mZicsIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYmxvY2tFdmVudChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2Rvd25LZXlzSWRzID0gKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHJlcyA9IEFycmF5LmZyb20odGhpcy5fZG93bik7XG4gICAgICAgICAgICBpZiAodGhpcy5fbW9kcy5NZXRhLmhhcygndGItbWV0YScpICYmIHJlcy5pbmRleE9mKF9sZWZ0Q29tbWFuZCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXMucHVzaChfbGVmdENvbW1hbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX21vZHMuQ29udHJvbC5oYXMoJ3RiLWN0cmwnKSAmJiByZXMuaW5kZXhPZihfbGVmdENvbnRyb2wpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goX2xlZnRDb250cm9sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9tb2RzLkFsdC5oYXMoJ3RiLWFsdCcpICYmIHJlcy5pbmRleE9mKF9sZWZ0T3B0aW9uKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKF9sZWZ0T3B0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9tb2RzLlNoaWZ0LmhhcygndGItc2hpZnQnKSAmJiByZXMuaW5kZXhPZihfbGVmdFNoaWZ0KSA9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKF9sZWZ0U2hpZnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb25LZXlEb3duID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChlLmlzQ29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdEtleURvd25FdmVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGV2ZW50ID0gZTtcbiAgICAgICAgICAgIC8vIGlPUyBzZW5kcyAyMjkgc29tZXRpbWVzIGZvciByZXBlYXRlZCBldmVudHNcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDIyOSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0S2V5RG93bkV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gdGhpcy5fbGFzdEtleURvd25FdmVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRlYWRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RLZXlEb3duRXZlbnQgPSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGtleUlkID0gX2tleUlkKGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuX2Rvd24uYWRkKGtleUlkKTtcbiAgICAgICAgICAgIGxldCBiaW5kaW5nID0gdGhpcy5fYmluZGluZ3MubWF0Y2godGhpcy5fZG93bktleXNJZHMoKSk7XG4gICAgICAgICAgICBpZiAoIV9ob2xkZXJzLmhhcyhrZXlJZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kb3duLmRlbGV0ZShrZXlJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmluZGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWNCaW5kaW5nKGJpbmRpbmcsIGUpO1xuICAgICAgICAgICAgICAgIF9ibG9ja0V2ZW50KGUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBkb3duT3ZlcnJpZGUgPSB0aGlzLl9kb3duTWFwW2tleUlkXTtcbiAgICAgICAgICAgIGxldCBtb2QgPSB0aGlzLl9tb2QodGhpcy5fbW9kc01hcFtldmVudC5jb2RlXSk7XG4gICAgICAgICAgICBsZXQgaGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGRvd25PdmVycmlkZSkge1xuICAgICAgICAgICAgICAgIGlmIChtb2QpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZCA9ICF0aGlzLl9tb2RzW21vZF0uaGFzKGtleUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFoYW5kbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUtleURvd25LZXkoZG93bk92ZXJyaWRlLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZHNbbW9kXS5hZGQoa2V5SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHVwT3ZlcnJpZGUgPSB0aGlzLl91cE1hcFtrZXlJZF07XG4gICAgICAgICAgICBpZiAodXBPdmVycmlkZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwLmFkZChrZXlJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVVSUtpdE1vZHNJZk5lZWRlZChldmVudCk7XG4gICAgICAgICAgICBpZiAoIWhhbmRsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVLZXlEb3duKGV2ZW50LmtleUNvZGUsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9vbkJlZm9yZUlucHV0ID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sYW5nID09PSAnZGljdGF0aW9uJykge1xuICAgICAgICAgICAgICAgIG9wKCd2b2ljZScsIHsgZGF0YTogZS5kYXRhIHx8ICcnIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlLmlucHV0VHlwZSA9PT0gJ2luc2VydFRleHQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0KGUuZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xhbmdXaXRoRGVsZXRlcyAmJiBlLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5lbGVtZW50LnZhbHVlID0gZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAvLyBsZXQgbGVuID0gZS5kYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5lbGVtZW50LnNlbGVjdGlvblN0YXJ0ID0gbGVuO1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLmVsZW1lbnQuc2VsZWN0aW9uRW5kID0gbGVuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlLmlucHV0VHlwZSA9PT0gJ2RlbGV0ZUNvbnRlbnRCYWNrd2FyZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vdXRwdXQoREVMKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9ibG9ja0V2ZW50KGUpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBwcmV2ZW50IHNpbXBsZSBpbnB1dCBmb3IgSU1FIG1vZGUgKGxpa2UgMSwgMiwgMyBrZXlzKVxuICAgICAgICB0aGlzLl9vbklucHV0ID0gKGUpID0+IF9ibG9ja0V2ZW50KGUpO1xuICAgICAgICB0aGlzLl9vbktleVVwID0gKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RLZXlEb3duRXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgbGV0IGtleUlkID0gX2tleUlkKGUpO1xuICAgICAgICAgICAgdGhpcy5fZG93bi5kZWxldGUoa2V5SWQpO1xuICAgICAgICAgICAgbGV0IG1vZCA9IHRoaXMuX21vZCh0aGlzLl9tb2RzTWFwW2UuY29kZV0pO1xuICAgICAgICAgICAgaWYgKG1vZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZHNbbW9kXS5kZWxldGUoa2V5SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVUlLaXRNb2RzSWZOZWVkZWQoZSk7XG4gICAgICAgICAgICBsZXQgdXBPdmVycmlkZSA9IHRoaXMuX3VwTWFwW2tleUlkXTtcbiAgICAgICAgICAgIGlmICh1cE92ZXJyaWRlICYmIHRoaXMuX3VwLmhhcyhrZXlJZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVLZXlEb3duS2V5KHVwT3ZlcnJpZGUsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2Jsb2NrRXZlbnQoZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2hhbmRsZUtleURvd24gPSAoa2V5Q29kZSwgZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGtleUluZm8gPSB7XG4gICAgICAgICAgICAgICAga2V5Q29kZSxcbiAgICAgICAgICAgICAgICBrZXk6ICcnLFxuICAgICAgICAgICAgICAgIGNvZGU6ICdVbmlkZW50aWZpZWQnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAga2V5SW5mby5jb2RlID0gZS5jb2RlO1xuICAgICAgICAgICAgICAgIGtleUluZm8ua2V5ID0gZS5rZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVLZXlEb3duS2V5KGtleUluZm8sIGUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9oYW5kbGVLZXlEb3duS2V5ID0gKGtleUluZm8sIGUpID0+IHtcbiAgICAgICAgICAgIGxldCBrZXlNYXAgPSB0aGlzLl9rZXlNYXA7XG4gICAgICAgICAgICBsZXQgYWx0ID0gdGhpcy5fbW9kcy5BbHQuc2l6ZSA+IDA7XG4gICAgICAgICAgICBsZXQgY3RybCA9IHRoaXMuX21vZHMuQ29udHJvbC5zaXplID4gMDtcbiAgICAgICAgICAgIGxldCBtZXRhID0gdGhpcy5fbW9kcy5NZXRhLnNpemUgPiAwO1xuICAgICAgICAgICAgbGV0IHNoaWZ0ID0gdGhpcy5fbW9kcy5TaGlmdC5zaXplID4gMDtcbiAgICAgICAgICAgIGxldCBjb2RlID0ga2V5SW5mby5jb2RlO1xuICAgICAgICAgICAgbGV0IGtleSA9IGtleUluZm8ua2V5O1xuICAgICAgICAgICAgbGV0IGtleUNvZGUgPSBrZXlJbmZvLmtleUNvZGU7XG4gICAgICAgICAgICBsZXQga2V5RG93biA9IF9wYXRjaEtleURvd24oeyBrZXksIGNvZGUsIGtleUNvZGUsIGFsdCwgY3RybCwgbWV0YSwgc2hpZnQgfSwgdGhpcy5fa2V5TWFwLCB0aGlzLl9pc0hLQiwgZSk7XG4gICAgICAgICAgICBsZXQga2V5RGVmID0ga2V5TWFwLmdldEtleURlZihrZXlEb3duLmtleUNvZGUpO1xuICAgICAgICAgICAgdmFyIHJlc29sdmVkQWN0aW9uVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRBY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgICAgIHJlc29sdmVkQWN0aW9uVHlwZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IGtleURlZltuYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IGFjdGlvbi5jYWxsKGtleU1hcCwga2V5RG93biwga2V5RGVmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gREVGQVVMVCAmJiBuYW1lICE9PSAnbm9ybWFsJykge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBnZXRBY3Rpb24oJ25vcm1hbCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGFjdGlvbjtcbiAgICAgICAgICAgIGlmIChjdHJsKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gZ2V0QWN0aW9uKCdjdHJsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhbHQpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSBnZXRBY3Rpb24oJ2FsdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWV0YSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbiA9IGdldEFjdGlvbignbWV0YScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gZ2V0QWN0aW9uKCdub3JtYWwnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9sYW5nV2l0aERlbGV0ZXMgJiYga2V5RGVmLmtleUNhcCA9PT0gJ1tCYWNrc3BhY2VdJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5oYXNTZWxlY3Rpb24gJiZcbiAgICAgICAgICAgICAgICAoYWN0aW9uID09PSBQQVNTIHx8IChhY3Rpb24gPT09IERFRkFVTFQgJiYgIShjdHJsIHx8IGFsdCB8fCBtZXRhKSkpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBrZXkgaXMgc3VwcG9zZWQgdG8gYmUgaGFuZGxlZCBieSB0aGUgYnJvd3Nlciwgb3IgaXQgaXMgYW5cbiAgICAgICAgICAgICAgICAvLyB1bm1vZGlmaWVkIGtleSB3aXRoIHRoZSBkZWZhdWx0IGFjdGlvbiwgdGhlbiBleGl0IHRoaXMgZXZlbnQgaGFuZGxlci5cbiAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIGFuIHVubW9kaWZpZWQga2V5LCBpdCdsbCBiZSBoYW5kbGVkIGluIG9uS2V5UHJlc3Mgd2hlcmUgd2VcbiAgICAgICAgICAgICAgICAvLyBjYW4gdGVsbCBmb3Igc3VyZSB3aGljaCBBU0NJSSBjb2RlIHRvIGluc2VydC5cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgYmxvY2sgbmVlZHMgdG8gY29tZSBiZWZvcmUgdGhlIFNUUklQIHRlc3QsIG90aGVyd2lzZSB3ZSdsbCBzdHJpcFxuICAgICAgICAgICAgICAgIC8vIHRoZSBtb2RpZmllciBhbmQgdGhpbmsgaXQncyBvayB0byBsZXQgdGhlIGJyb3dzZXIgaGFuZGxlIHRoZSBrZXlwcmVzcy5cbiAgICAgICAgICAgICAgICAvLyBUaGUgYnJvd3NlciB3b24ndCBrbm93IHdlJ3JlIHRyeWluZyB0byBpZ25vcmUgdGhlIG1vZGlmaWVycyBhbmQgbWlnaHRcbiAgICAgICAgICAgICAgICAvLyBwZXJmb3JtIHNvbWUgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgICAgICAgICAgLy8gIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSBQQVNTICYmICFrZXlJbmZvLnNyYykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBub25QcmludGFibGUgPSAvXlxcW1xcdytcXF0kLy50ZXN0KGtleURlZi5rZXlDYXApO1xuICAgICAgICAgICAgICAgIGlmIChub25QcmludGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFrZXlJbmZvLnNyYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQWNjZW50cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2xhbmdXaXRoRGVsZXRlcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBwYXNzIHRvIGJyb3dzZXIgYWxsIHByaW50YWJsZXNcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzSEtCKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNvbWUgc29mdHdhcmUgS0JzIGRvZXNuJ3QgcmVwb3J0IHNoaWZ0IHByZXNzZXMgKEdCb2FyZCBmb3IgaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX291dHB1dChrZXkpO1xuICAgICAgICAgICAgICAgICAgICBfYmxvY2tFdmVudChlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBtYXkgYmUgcmVtb3ZlIGFjY2VudHMgb25seSBhZnRlciBvcHRpb25zIGtleSBpcyBwcmVzc2VkLlxuICAgICAgICAgICAgICAgIGxldCBvdXQgPSB0aGlzLl9yZW1vdmVBY2NlbnRzID8gX3JlbW92ZUFjY2VudHMoa2V5KSA6IGtleTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVBY2NlbnRzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NhcHNMb2NrUmVtYXBwZWQgfHwgdGhpcy5fc2hpZnRSZW1hcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vdXRwdXQoc2hpZnQgPyBvdXQudG9VcHBlckNhc2UoKSA6IG91dC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX291dHB1dChvdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfYmxvY2tFdmVudChlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVBY2NlbnRzID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoYWN0aW9uID09PSBTVFJJUCkge1xuICAgICAgICAgICAgICAgIGFsdCA9IGN0cmwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSBrZXlEZWYubm9ybWFsO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gYWN0aW9uLmNhbGwoa2V5TWFwLCBrZXlEb3duLCBrZXlEZWYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSBERUZBVUxUICYmIGtleURlZi5rZXlDYXAubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IGtleURlZi5rZXlDYXAuc3Vic3RyKHNoaWZ0ID8gMSA6IDAsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9ibG9ja0V2ZW50KGUpO1xuICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gQ0FOQ0VMIHx8IHRoaXMuaGFzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFjdGlvbiAhPT0gREVGQVVMVCAmJiB0eXBlb2YgYWN0aW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJbnZhbGlkIGFjdGlvbjogJyArIEpTT04uc3RyaW5naWZ5KGFjdGlvbikpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN0cmlwIHRoZSBtb2RpZmllciB0aGF0IGlzIGFzc29jaWF0ZWQgd2l0aCB0aGUgYWN0aW9uLCBzaW5jZSB3ZSBhc3N1bWUgdGhhdFxuICAgICAgICAgICAgLy8gbW9kaWZpZXIgaGFzIGFscmVhZHkgYmVlbiBhY2NvdW50ZWQgZm9yIGluIHRoZSBhY3Rpb24uXG4gICAgICAgICAgICBpZiAocmVzb2x2ZWRBY3Rpb25UeXBlID09PSAnY3RybCcpIHtcbiAgICAgICAgICAgICAgICBjdHJsID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyZXNvbHZlZEFjdGlvblR5cGUgPT09ICdhbHQnKSB7XG4gICAgICAgICAgICAgICAgYWx0ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyZXNvbHZlZEFjdGlvblR5cGUgPT09ICdtZXRhJykge1xuICAgICAgICAgICAgICAgIG1ldGEgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoaWZ0ID0ga2V5RG93bi5zaGlmdDtcbiAgICAgICAgICAgIGlmICgoYWx0IHx8IGN0cmwgfHwgc2hpZnQgfHwgbWV0YSkgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgIGFjdGlvbi5zdWJzdHIoMCwgMikgPT09IENTSSkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBhY3Rpb24gaXMgYW4gZXNjYXBlIHNlcXVlbmNlIHRoYXQgYW5kIGl0IHdhcyB0cmlnZ2VyZWQgaW4gdGhlXG4gICAgICAgICAgICAgICAgLy8gcHJlc2VuY2Ugb2YgYSBrZXlib2FyZCBtb2RpZmllciwgd2UgbWF5IG5lZWQgdG8gYWx0ZXIgdGhlIGFjdGlvbiB0b1xuICAgICAgICAgICAgICAgIC8vIGluY2x1ZGUgdGhlIG1vZGlmaWVyIGJlZm9yZSBzZW5kaW5nIGl0LlxuICAgICAgICAgICAgICAgIC8vIFRoZSBtYXRoIGlzIGZ1bmt5IGJ1dCBhbGlnbnMgdy94dGVybS5cbiAgICAgICAgICAgICAgICBsZXQgaW1vZCA9IDE7XG4gICAgICAgICAgICAgICAgaWYgKHNoaWZ0KVxuICAgICAgICAgICAgICAgICAgICBpbW9kICs9IDE7XG4gICAgICAgICAgICAgICAgaWYgKGFsdClcbiAgICAgICAgICAgICAgICAgICAgaW1vZCArPSAyO1xuICAgICAgICAgICAgICAgIGlmIChjdHJsKVxuICAgICAgICAgICAgICAgICAgICBpbW9kICs9IDQ7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGEpXG4gICAgICAgICAgICAgICAgICAgIGltb2QgKz0gODtcbiAgICAgICAgICAgICAgICBsZXQgbW9kID0gJzsnICsgaW1vZDtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNvbWUgb2YgdGhlIENTSSBzZXF1ZW5jZXMgaGF2ZSB6ZXJvIHBhcmFtZXRlcnMgdW5sZXNzIG1vZGlmaWVkLlxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBDU0kgKyAnMScgKyBtb2QgKyBhY3Rpb24uc3Vic3RyKDIsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJzIGFsd2F5cyBoYXZlIGF0IGxlYXN0IG9uZSBwYXJhbWV0ZXIuXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uc3Vic3RyKDAsIGFjdGlvbi5sZW5ndGggLSAxKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uc3Vic3RyKGFjdGlvbi5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSBERUZBVUxUKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IGtleURlZi5rZXlDYXAuc3Vic3RyKHNoaWZ0ID8gMSA6IDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3RybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVuc2hpZnRlZCA9IGtleURlZi5rZXlDYXAuc3Vic3RyKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvZGUgPSB1bnNoaWZ0ZWQuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlID49IDY0ICYmIGNvZGUgPD0gOTUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUgLSA2NCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGFjdGlvblN0ciA9IGFjdGlvbi50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGlmIChhbHQgJiYgdGhpcy5fYWx0U2VuZHNXaGF0ID09ICc4LWJpdCcgJiYgYWN0aW9uU3RyLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2RlID0gYWN0aW9uU3RyLmNoYXJDb2RlQXQoMCkgKyAxMjg7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFdlIHJlc3BlY3QgYWx0L21ldGFTZW5kc0VzY2FwZSBldmVuIGlmIHRoZSBrZXltYXAgYWN0aW9uIHdhcyBhIGxpdGVyYWxcbiAgICAgICAgICAgICAgICAvLyBzdHJpbmcuICBPdGhlcndpc2UsIGV2ZXJ5IG92ZXJyaWRkZW4gYWx0L21ldGEgYWN0aW9uIHdvdWxkIGhhdmUgdG9cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBhbHQvbWV0YVNlbmRzRXNjYXBlLlxuICAgICAgICAgICAgICAgIGlmICgoYWx0ICYmIHRoaXMuX2FsdFNlbmRzV2hhdCA9PSAnZXNjYXBlJykgfHxcbiAgICAgICAgICAgICAgICAgICAgKG1ldGEgJiYgdGhpcy5fbWV0YVNlbmRzRXNjYXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBFU0MgKyBhY3Rpb25TdHI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vdXRwdXQoYWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignYWN0aW9uIGlzIG5vdCBhIHN0cmluZycsIGFjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX29uSU1FID0gKGUpID0+IHtcbiAgICAgICAgICAgIGxldCB0eXBlID0gZS50eXBlO1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBlLmRhdGEgfHwgJyc7XG4gICAgICAgICAgICBvcCgnaW1lJywgeyB0eXBlLCBkYXRhIH0pO1xuICAgICAgICAgICAgdmFyIHNjcm9sbFBvcnQgPSB0aGlzLl90LnNjcm9sbFBvcnRfO1xuICAgICAgICAgICAgbGV0IGNhcmV0ID0gdGhpcy5jYXJldDtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGNhcmV0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGxpYi5jb2xvcnMuc2V0QWxwaGEodC5nZXRDdXJzb3JDb2xvcigpLCAxKTtcbiAgICAgICAgICAgIGNhcmV0LnN0eWxlLmNvbG9yID0gc2Nyb2xsUG9ydC5nZXRCYWNrZ3JvdW5kQ29sb3IoKTtcbiAgICAgICAgICAgIGNvbnN0IHNjcmVlbkNvbHMgPSB0aGlzLl90LnNjcmVlblNpemUud2lkdGg7XG4gICAgICAgICAgICBjb25zdCBzY3JlZW5Sb3dzID0gdGhpcy5fdC5zY3JlZW5TaXplLmhlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IGNvbCA9IHRoaXMuX3Quc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5jb2x1bW47XG4gICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLl90LnNjcmVlbl8uY3Vyc29yUG9zaXRpb24ucm93O1xuICAgICAgICAgICAgLy8gdGhpcy5jYXJldC5zdHlsZS5sZWZ0ID0gYGNhbGModmFyKC0taHRlcm0tY2hhcnNpemUtd2lkdGgpICogJHtjb2x9KWBcbiAgICAgICAgICAgIC8vIHRoaXMuY2FyZXQuc3R5bGUudG9wID0gYGNhbGModmFyKC0taHRlcm0tY2hhcnNpemUtaGVpZ2h0KSAqICR7cm93fSlgXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gbGliLndjLnN0cldpZHRoKGRhdGEpO1xuICAgICAgICAgICAgY2FyZXQuc3R5bGUuYm90dG9tID0gJ2F1dG8nO1xuICAgICAgICAgICAgY2FyZXQuc3R5bGUudG9wID0gJ2F1dG8nO1xuICAgICAgICAgICAgaWYgKGxlbmd0aCA+PSBzY3JlZW5Db2xzKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgYXJlIHdpZGVyIHRoYW4gdGhlIHNjcmVlblxuICAgICAgICAgICAgICAgIGNhcmV0LnN0eWxlLmxlZnQgPSAnMHB4JztcbiAgICAgICAgICAgICAgICBjYXJldC5zdHlsZS5yaWdodCA9ICcwcHgnO1xuICAgICAgICAgICAgICAgIGlmIChyb3cgPCBzY3JlZW5Sb3dzICogMC44KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmV0LnN0eWxlLnRvcCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBgY2FsYyh2YXIoLS1odGVybS1jaGFyc2l6ZS1oZWlnaHQpICogJHtyb3cgKyAxfSlgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZXQuc3R5bGUudG9wID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGBjYWxjKHZhcigtLWh0ZXJtLWNoYXJzaXplLWhlaWdodCkgKiAke3JvdyAtIE1hdGguZmxvb3IobGVuZ3RoIC8gKHNjcmVlbkNvbHMgKyAxKSkgLSAxfSlgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbCArIGxlbmd0aCA8PSBzY3JlZW5Db2xzKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgYXJlIGlubGluZWRcbiAgICAgICAgICAgICAgICBjYXJldC5zdHlsZS5sZWZ0ID1cbiAgICAgICAgICAgICAgICAgICAgYGNhbGModmFyKC0taHRlcm0tY2hhcnNpemUtd2lkdGgpICogJHtjb2x9KWA7XG4gICAgICAgICAgICAgICAgY2FyZXQuc3R5bGUudG9wID1cbiAgICAgICAgICAgICAgICAgICAgYGNhbGModmFyKC0taHRlcm0tY2hhcnNpemUtaGVpZ2h0KSAqICR7cm93fSlgO1xuICAgICAgICAgICAgICAgIGNhcmV0LnN0eWxlLnJpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocm93ID09IDApIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBhcmUgYXQgdGhlIGVuZCBvZiBsaW5lIGJ1dCBuZWVkIG1vcmUgc3BhY2UgYXQgdGhlIGJvdHRvbVxuICAgICAgICAgICAgICAgIGNhcmV0LnN0eWxlLnRvcCA9XG4gICAgICAgICAgICAgICAgICAgIGBjYWxjKHZhcigtLWh0ZXJtLWNoYXJzaXplLWhlaWdodCkgKiAke3JvdyArIDF9KWA7XG4gICAgICAgICAgICAgICAgY2FyZXQuc3R5bGUubGVmdCA9ICdhdXRvJztcbiAgICAgICAgICAgICAgICBjYXJldC5zdHlsZS5yaWdodCA9ICcwcHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgYXJlIGF0IHRoZSBlbmQgb2YgbGluZSBidXQgbmVlZCBtb3JlIHNwYWNlIGF0IHRoZSB0b3BcbiAgICAgICAgICAgICAgICBjYXJldC5zdHlsZS50b3AgPVxuICAgICAgICAgICAgICAgICAgICBgY2FsYyh2YXIoLS1odGVybS1jaGFyc2l6ZS1oZWlnaHQpICogJHtyb3cgLSAxfWA7XG4gICAgICAgICAgICAgICAgY2FyZXQuc3R5bGUubGVmdCA9ICdhdXRvJztcbiAgICAgICAgICAgICAgICBjYXJldC5zdHlsZS5yaWdodCA9ICcwcHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ2NvbXBvc2l0aW9uZW5kJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX291dHB1dChkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb3V0cHV0ID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3VwLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLmNhcmV0LmlubmVySFRNTCA9ICcmIzgyODg7JztcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgb3AoJ291dCcsIHsgZGF0YSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc3RhdGVSZXNldCA9IChoYXNTZWxlY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2Rvd24uY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMuX3VwLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLl9tb2RzID0ge1xuICAgICAgICAgICAgICAgIFNoaWZ0OiBuZXcgU2V0KCksXG4gICAgICAgICAgICAgICAgQWx0OiBuZXcgU2V0KCksXG4gICAgICAgICAgICAgICAgTWV0YTogbmV3IFNldCgpLFxuICAgICAgICAgICAgICAgIENvbnRyb2w6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNhcmV0LmlubmVySFRNTCA9ICcmIzgyODg7JztcbiAgICAgICAgICAgIHRoaXMuaGFzU2VsZWN0aW9uID0gaGFzU2VsZWN0aW9uO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9jb25maWdLZXkgPSAoa2V5KSA9PiB7XG4gICAgICAgICAgICBsZXQgY29kZSA9IGtleS5jb2RlO1xuICAgICAgICAgICAgbGV0IGRvd24gPSBfYWN0aW9uKGtleS5kb3duKTtcbiAgICAgICAgICAgIGlmIChkb3duKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZG93bk1hcFtjb2RlLmlkXSA9IGRvd247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbW9kID0gdGhpcy5fbW9kKGtleS5tb2QpO1xuICAgICAgICAgICAgaWYgKG1vZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZHNNYXBbY29kZS5jb2RlXSA9IGtleS5tb2Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdXAgPSBfYWN0aW9uKGtleS51cCk7XG4gICAgICAgICAgICBpZiAodXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cE1hcFtjb2RlLmlkXSA9IHVwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvZGUuY29kZSA9PT0gJ0FsdFJpZ2h0JyB8fCBjb2RlLmNvZGUgPT09ICdBbHRMZWZ0Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lnbm9yZUFjY2VudHNbY29kZS5jb2RlXSA9XG4gICAgICAgICAgICAgICAgICAgIGtleS5pZ25vcmVBY2NlbnRzICYmICghIW1vZCB8fCAhIXVwIHx8ICEhZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IChjZmcpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLl9iaW5kaW5ncy5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnS2V5KGNmZy5jYXBzTG9jayk7XG4gICAgICAgICAgICB0aGlzLl9jb25maWdLZXkoY2ZnLmNvbW1hbmQubGVmdCk7XG4gICAgICAgICAgICB0aGlzLl9jb25maWdLZXkoY2ZnLmNvbW1hbmQucmlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnS2V5KGNmZy5jb250cm9sLmxlZnQpO1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnS2V5KGNmZy5jb250cm9sLnJpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZ0tleShjZmcub3B0aW9uLmxlZnQpO1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnS2V5KGNmZy5vcHRpb24ucmlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnS2V5KGNmZy5zaGlmdC5sZWZ0KTtcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZ0tleShjZmcuc2hpZnQucmlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fYmluZGluZ3MuZXhwYW5kRm4oY2ZnLmZuKTtcbiAgICAgICAgICAgIHRoaXMuX2JpbmRpbmdzLmV4cGFuZEN1cnNvcihjZmcuY3Vyc29yKTtcbiAgICAgICAgICAgIGZvciAobGV0IHNob3J0Y3V0IG9mIGNmZy5zaG9ydGN1dHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgYmluZGluZyA9IHtcbiAgICAgICAgICAgICAgICAgICAga2V5czogdGhpcy5fa2V5c0Zyb21TaG9ydGN1dChzaG9ydGN1dC5pbnB1dCwgc2hvcnRjdXQubW9kaWZpZXJzKSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBzaG9ydGN1dC5hY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIHNoaWZ0TG9jOiAwLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sTG9jOiAwLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25Mb2M6IDAsXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmRMb2M6IDAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLl9iaW5kaW5ncy5leHBhbmRCaW5kaW5nKGJpbmRpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUmVtYXBwaW5nRmxhZ3MoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb25Ub29sYmFyTW9kcyA9ICh2YWwpID0+IHtcbiAgICAgICAgICAgIGxldCBmbGFncyA9IFVJS2l0RmxhZ3NUb09iamVjdCh2YWwpO1xuICAgICAgICAgICAgaWYgKGZsYWdzLmFsdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZHMuQWx0LmFkZCgndGItYWx0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RzLkFsdC5kZWxldGUoJ3RiLWFsdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZsYWdzLmN0cmwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RzLkNvbnRyb2wuYWRkKCd0Yi1jdHJsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RzLkNvbnRyb2wuZGVsZXRlKCd0Yi1jdHJsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmxhZ3Muc2hpZnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RzLlNoaWZ0LmFkZCgndGItc2hpZnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZHMuU2hpZnQuZGVsZXRlKCd0Yi1zaGlmdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZsYWdzLm1ldGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RzLk1ldGEuYWRkKCd0Yi1tZXRhJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RzLk1ldGEuZGVsZXRlKCd0Yi1tZXRhJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2V4ZWNQcmVzcyA9IChzdHIsIGUsIHNraXBCaW5kaW5nKSA9PiB7XG4gICAgICAgICAgICBsZXQgcGFydHMgPSBzdHIuc3BsaXQoLzovZyk7XG4gICAgICAgICAgICBsZXQgc2F2ZWRNb2RzID0gdGhpcy5fbW9kcztcbiAgICAgICAgICAgIHRoaXMuX21vZHMgPSB7XG4gICAgICAgICAgICAgICAgU2hpZnQ6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgICAgICBBbHQ6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgICAgICBNZXRhOiBuZXcgU2V0KCksXG4gICAgICAgICAgICAgICAgQ29udHJvbDogbmV3IFNldCgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxldCBtb2RGbGFncyA9IHBhcnNlSW50KHBhcnRzWzBdLCAxMCk7XG4gICAgICAgICAgICBsZXQgbW9kcyA9IFVJS2l0RmxhZ3NUb09iamVjdChtb2RGbGFncyk7XG4gICAgICAgICAgICBpZiAobW9kcy5zaGlmdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZHMuU2hpZnQuYWRkKCd0Yi1zaGlmdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vZHMuY3RybCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZHMuQ29udHJvbC5hZGQoJ3RiLWN0cmwnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb2RzLmFsdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZHMuQWx0LmFkZCgndGItYWx0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kcy5tZXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kcy5NZXRhLmFkZCgndGItbWV0YScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGtleUNvZGUgPSBwYXJzZUludChwYXJ0c1sxXSwgMTApO1xuICAgICAgICAgICAgbGV0IGtleSA9IHBhcnRzWzNdID09ICcnID8gJzonIDogcGFydHNbM10gfHwgdGhpcy5fa2V5TWFwLmtleShrZXlDb2RlKSB8fCAnJztcbiAgICAgICAgICAgIGxldCBrZXlJbmZvID0ge1xuICAgICAgICAgICAgICAgIGtleUNvZGUsXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIGNvZGU6ICcnLFxuICAgICAgICAgICAgICAgIHNyYzogJ3Rvb2xiYXInLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghc2tpcEJpbmRpbmcgJiYgbW9kRmxhZ3MgPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGtleUlkID0ga2V5SW5mby5rZXlDb2RlICsgJzonICsgcGFydHNbMl0gKyAoa2V5Q29kZSA9PSAwID8gJzonICsga2V5IDogJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rvd24uYWRkKGtleUlkKTtcbiAgICAgICAgICAgICAgICBsZXQgYmluZGluZyA9IHRoaXMuX2JpbmRpbmdzLm1hdGNoKHRoaXMuX2Rvd25LZXlzSWRzKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rvd24uZGVsZXRlKGtleUlkKTtcbiAgICAgICAgICAgICAgICBpZiAoYmluZGluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9leGVjQmluZGluZyhiaW5kaW5nLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9kcyA9IHNhdmVkTW9kcztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUtleURvd25LZXkoa2V5SW5mbywgZSk7XG4gICAgICAgICAgICB0aGlzLl9tb2RzID0gc2F2ZWRNb2RzO1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQWNjZW50cyA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25LQiA9IChjbWQsIGFyZykgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChjbWQpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdtb2RzLWRvd24nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVDYXBzTG9ja0Rvd24odHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vZHMtdXAnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVDYXBzTG9ja0Rvd24oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdndWFyZC11cCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUd1YXJkKHRydWUsIGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2d1YXJkLWRvd24nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVHdWFyZChmYWxzZSwgYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2VsZWN0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYXNTZWxlY3Rpb24gPSBhcmc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xhbmcnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVMYW5nKGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xiYXItbW9kcyc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uVG9vbGJhck1vZHMoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndG9vbGJhci1wcmVzcyc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWNQcmVzcyhhcmcsIG51bGwsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncHJlc3MnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9leGVjUHJlc3MoYXJnLCBudWxsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RhdGUtcmVzZXQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVJlc2V0KGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ZvY3VzJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1cyhhcmcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoZXgnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vdXRwdXQoaGV4X3RvX2FzY2lpKGFyZykpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVBY2NlbnRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29uZmlnJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29uZmlnKGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl90ID0gdGVybWluYWw7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGxldCBpbnB1dCA9IHRoaXMuZWxlbWVudDtcbiAgICAgICAgdGhpcy5jYXJldC5pbm5lckhUTUwgPSAnJiM4Mjg4Oyc7XG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaHRlcm06cm93LW5vZGVzXCIpO1xuICAgICAgICBlbCA9PT0gbnVsbCB8fCBlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZWwuYXBwZW5kKHRoaXMuY2FyZXQpO1xuICAgICAgICB0aGlzLmNhcmV0LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICB0aGlzLmNhcmV0LnN0eWxlLnpJbmRleCA9ICcxMDAwJztcbiAgICAgICAgLy8gdGhpcy5jYXJldC5zdHlsZS5sZWZ0ID0gXCIyMHB4XCI7XG4gICAgICAgIC8vIHRoaXMuY2FyZXQuc3R5bGUudG9wID0gXCIyMHB4XCI7XG4gICAgICAgIC8vIGlucHV0LmFwcGVuZENoaWxkKHRoaXMuX2NhcmV0KTtcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdhdXRvY29tcGxldGUnLCAnb2ZmJyk7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnc3BlbGxjaGVjaycsICdmYWxzZScpO1xuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2F1dG9jb3JyZWN0JywgJ29mZicpO1xuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2F1dG9jYXBpdGFsaXplJywgJ25vbmUnKTtcbiAgICAgICAgLy8gaW5wdXQuc2V0QXR0cmlidXRlKCdhdXRvZm9jdXMnLCAndHJ1ZScpO1xuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsICdwbGFpbnRleHQtb25seScpO1xuICAgICAgICAvLyBrZWVwIG9uZSBzcGFjZSwgc28gZGVsZXRlIGFsd2F5cyByZXBlYXRzIG9uIHNvZnR3YXJlIGtiXG4gICAgICAgIC8vIGlucHV0LnZhbHVlID0gJyAnO1xuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duKTtcbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9vbktleVVwKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9vbktleVVwKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0JywgdGhpcy5fb25JTUUpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9udXBkYXRlJywgdGhpcy5fb25JTUUpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgdGhpcy5fb25JTUUpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZWlucHV0JywgdGhpcy5fb25CZWZvcmVJbnB1dCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9vbklucHV0KTtcbiAgICAgICAgdGhpcy5fdXBkYXRlUmVtYXBwaW5nRmxhZ3MoKTtcbiAgICB9XG4gICAgX3VwZGF0ZVJlbWFwcGluZ0ZsYWdzKCkge1xuICAgICAgICB0aGlzLl9jYXBzTG9ja1JlbWFwcGVkID1cbiAgICAgICAgICAgIHRoaXMuX21vZHNNYXBbJ0NhcHNMb2NrJ10gIT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIHRoaXMuX2Rvd25NYXBbX2NhcHNMb2NrSURdICE9IG51bGwgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl91cE1hcFtfY2Fwc0xvY2tJRF0gIT0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2hpZnRSZW1hcHBlZCA9XG4gICAgICAgICAgICAodGhpcy5fbW9kc01hcFsnU2hpZnRMZWZ0J10gIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX21vZHNNYXBbJ1NoaWZ0TGVmdCddICE9PSAnU2hpZnQnKSB8fFxuICAgICAgICAgICAgICAgICh0aGlzLl9tb2RzTWFwWydTaGlmdFJpZ2h0J10gIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb2RzTWFwWydTaGlmdFJpZ2h0J10gIT09ICdTaGlmdCcpO1xuICAgIH1cbiAgICBfbW9kKG1vZCkge1xuICAgICAgICBzd2l0Y2ggKG1vZCkge1xuICAgICAgICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgICAgICAgICB0aGlzLl9hbHRTZW5kc1doYXQgPSAnZXNjYXBlJztcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0FsdCc7XG4gICAgICAgICAgICBjYXNlICc4LWJpdCc6XG4gICAgICAgICAgICAgICAgdGhpcy5fYWx0U2VuZHNXaGF0ID0gJzgtYml0JztcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0FsdCc7XG4gICAgICAgICAgICBjYXNlICdTaGlmdCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdTaGlmdCc7XG4gICAgICAgICAgICBjYXNlICdDb250cm9sJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0NvbnRyb2wnO1xuICAgICAgICAgICAgY2FzZSAnTWV0YSc6XG4gICAgICAgICAgICAgICAgdGhpcy5fbWV0YVNlbmRzRXNjYXBlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdNZXRhJztcbiAgICAgICAgICAgIGNhc2UgJ01ldGEtRXNjYXBlJzpcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXRhU2VuZHNFc2NhcGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiAnTWV0YSc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvY3VzKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIChfYSA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbGxhcHNlKHRoaXMuY2FyZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmJsdXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaGFuZGxlQ2Fwc0xvY2tEb3duKGRvd24pIHtcbiAgICAgICAgbGV0IG1vZCA9IHRoaXMuX21vZHNNYXBbJ0NhcHNMb2NrJ107XG4gICAgICAgIGlmIChkb3duKSB7XG4gICAgICAgICAgICB0aGlzLl9kb3duLmFkZChfY2Fwc0xvY2tJRCk7XG4gICAgICAgICAgICBsZXQgb3ZlcnJpZGUgPSB0aGlzLl9kb3duTWFwW19jYXBzTG9ja0lEXTtcbiAgICAgICAgICAgIGlmIChvdmVycmlkZSAmJiAhKG1vZCAmJiB0aGlzLl9tb2RzW21vZF0uaGFzKF9jYXBzTG9ja0lEKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVLZXlEb3duS2V5KG92ZXJyaWRlLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb2QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RzW21vZF0uYWRkKF9jYXBzTG9ja0lEKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB1cE92ZXJyaWRlID0gdGhpcy5fdXBNYXBbX2NhcHNMb2NrSURdO1xuICAgICAgICAgICAgaWYgKHVwT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cC5hZGQoX2NhcHNMb2NrSUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Rvd24uZGVsZXRlKF9jYXBzTG9ja0lEKTtcbiAgICAgICAgbW9kICYmIHRoaXMuX21vZHNbbW9kXS5kZWxldGUoX2NhcHNMb2NrSUQpO1xuICAgICAgICBsZXQgdXBPdmVycmlkZSA9IHRoaXMuX3VwTWFwW19jYXBzTG9ja0lEXTtcbiAgICAgICAgaWYgKHVwT3ZlcnJpZGUgJiYgdGhpcy5fdXAuaGFzKF9jYXBzTG9ja0lEKSkge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlS2V5RG93bktleSh1cE92ZXJyaWRlLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBLZXlib2FyZCBsYW5ndWFnZSBjaGFuZ2VcbiAgICBfaGFuZGxlTGFuZyhsYW5nQW5kS0IpIHtcbiAgICAgICAgbGV0IHBhcnRzID0gbGFuZ0FuZEtCLnNwbGl0KCc6Jyk7XG4gICAgICAgIHRoaXMuX2xhbmcgPSBwYXJ0c1swXTtcbiAgICAgICAgdGhpcy5faXNIS0IgPSBwYXJ0c1sxXSA9PT0gJ2h3JztcbiAgICAgICAgdGhpcy5fbGFuZ1dpdGhEZWxldGVzID0gdGhpcy5fbGFuZyA9PT0gJ2tvLUtSJztcbiAgICAgICAgdGhpcy5fc3RhdGVSZXNldCh0aGlzLmhhc1NlbGVjdGlvbik7XG4gICAgICAgIGlmICh0aGlzLl9sYW5nICE9PSAnZGljdGF0aW9uJykge1xuICAgICAgICAgICAgb3AoJ3ZvaWNlJywgeyBkYXRhOiAnJyB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaGFuZGxlR3VhcmQodXAsIGNoYXIpIHtcbiAgICAgICAgLy8gdGhpcy5lbGVtZW50LnZhbHVlID0gJyAnO1xuICAgICAgICBsZXQga2V5Q29kZSA9IHRoaXMuX2tleU1hcC5rZXlDb2RlKGNoYXIpO1xuICAgICAgICBsZXQga2V5SWQgPSBgJHtrZXlDb2RlfTowYDtcbiAgICAgICAgaWYgKHVwKSB7XG4gICAgICAgICAgICB0aGlzLl9kb3duLmRlbGV0ZShrZXlJZCk7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVBY2NlbnRzID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kb3duLmFkZChrZXlJZCk7XG4gICAgICAgIHRoaXMuX2hhbmRsZUtleURvd24oa2V5Q29kZSwgbnVsbCk7XG4gICAgfVxuICAgIF9yZXNldCgpIHtcbiAgICAgICAgdGhpcy5oYXNTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlQWNjZW50cyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9tb2RzTWFwID0ge307XG4gICAgICAgIHRoaXMuX2Rvd25NYXAgPSB7fTtcbiAgICAgICAgdGhpcy5fdXBNYXAgPSB7fTtcbiAgICAgICAgdGhpcy5fdXAuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fZG93bi5jbGVhcigpO1xuICAgICAgICB0aGlzLl9tb2RzID0ge1xuICAgICAgICAgICAgU2hpZnQ6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIEFsdDogbmV3IFNldCgpLFxuICAgICAgICAgICAgTWV0YTogbmV3IFNldCgpLFxuICAgICAgICAgICAgQ29udHJvbDogbmV3IFNldCgpLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9pZ25vcmVBY2NlbnRzID0ge1xuICAgICAgICAgICAgQWx0TGVmdDogdHJ1ZSxcbiAgICAgICAgICAgIEFsdFJpZ2h0OiB0cnVlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBfa2V5c0Zyb21TaG9ydGN1dChpbnB1dCwgbW9kcykge1xuICAgICAgICB2YXIgcmVzID0gW107XG4gICAgICAgIGxldCBtID0gVUlLaXRGbGFnc1RvT2JqZWN0KG1vZHMpO1xuICAgICAgICBpZiAobS5zaGlmdCkge1xuICAgICAgICAgICAgcmVzLnB1c2goX2xlZnRTaGlmdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG0uYWx0KSB7XG4gICAgICAgICAgICByZXMucHVzaChfbGVmdE9wdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG0uY3RybCkge1xuICAgICAgICAgICAgcmVzLnB1c2goX2xlZnRDb250cm9sKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobS5tZXRhKSB7XG4gICAgICAgICAgICByZXMucHVzaChfbGVmdENvbW1hbmQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb2RlID0gdGhpcy5fa2V5TWFwLmtleUNvZGUoaW5wdXQpO1xuICAgICAgICBpZiAoY29kZSkge1xuICAgICAgICAgICAgcmVzLnB1c2goY29kZSArICc6MCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzLnB1c2goJzA6MC0nICsgaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIF9leGVjQmluZGluZyhhY3Rpb24sIGUpIHtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnY29tbWFuZCc6XG4gICAgICAgICAgICAgICAgb3AoJ2NvbW1hbmQnLCB7IGNvbW1hbmQ6IGFjdGlvbi52YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3ByZXNzJzpcbiAgICAgICAgICAgICAgICB0aGlzLl9leGVjUHJlc3MoYCR7YWN0aW9uLm1vZHN9OiR7YWN0aW9uLmtleS5pZH1gLCBlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0KGhleF90b19hc2NpaShhY3Rpb24udmFsdWUpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVBY2NlbnRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIFRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IGxpYmRvdC9iaW4vY29uY2F0LnNoLlxuLy8gSXQgaGFzIGJlZW4gbWFya2VkIHJlYWQtb25seSBmb3IgeW91ciBzYWZldHkuICBSYXRoZXIgdGhhblxuLy8gZWRpdCBpdCBkaXJlY3RseSwgcGxlYXNlIG1vZGlmeSBvbmUgb2YgdGhlc2Ugc291cmNlIGZpbGVzLlxuLy9cbi8vIGxpYmRvdC9qcy9saWIuanNcbi8vIGxpYmRvdC9qcy9saWJfcG9seWZpbGwuanNcbi8vIGxpYmRvdC9qcy9saWJfYXJyYXkuanNcbi8vIGxpYmRvdC9qcy9saWJfY29sb3JzLmpzXG4vLyBsaWJkb3QvanMvbGliX2YuanNcbi8vIGxpYmRvdC9qcy9saWJfaTE4bi5qc1xuLy8gbGliZG90L2pzL2xpYl9tZXNzYWdlX21hbmFnZXIuanNcbi8vIGxpYmRvdC9qcy9saWJfcHJlZmVyZW5jZV9tYW5hZ2VyLmpzXG4vLyBsaWJkb3QvanMvbGliX3Jlc291cmNlLmpzXG4vLyBsaWJkb3QvanMvbGliX3N0b3JhZ2UuanNcbi8vIGxpYmRvdC9qcy9saWJfc3RvcmFnZV9jaHJvbWUuanNcbi8vIGxpYmRvdC9qcy9saWJfc3RvcmFnZV9sb2NhbC5qc1xuLy8gbGliZG90L2pzL2xpYl9zdG9yYWdlX21lbW9yeS5qc1xuLy8gbGliZG90L2pzL2xpYl90ZXN0X21hbmFnZXIuanNcbi8vIGxpYmRvdC9qcy9saWJfdXRmOC5qc1xuLy8gbGliZG90L3RoaXJkX3BhcnR5L3djd2lkdGgvbGliX3djLmpzXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gU09VUkNFIEZJTEU6IGxpYmRvdC9qcy9saWIuanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmlmICh0eXBlb2YgbGliICE9ICd1bmRlZmluZWQnKVxuICB0aHJvdyBuZXcgRXJyb3IoJ0dsb2JhbCBcImxpYlwiIG9iamVjdCBhbHJlYWR5IGV4aXN0cy4nKTtcblxuZXhwb3J0IHZhciBsaWIgPSB7fTtcblxuLyogZ2xvYmFsIGJyb3dzZXIgKi9cbi8qIGdsb2JhbCBjaHJvbWUgKi9cblxuLyoqXG4gKiBNYXAgb2YgXCJkZXBlbmRlbmN5XCIgdG8gW1wic291cmNlXCIsIC4uLl0uXG4gKlxuICogRWFjaCBkZXBlbmRlbmN5IGlzIGEgb2JqZWN0IG5hbWUsIGxpa2UgXCJsaWIuZnNcIiwgXCJzb3VyY2VcIiBpcyB0aGUgdXJsIHRoYXRcbiAqIGRlcGVuZHMgb24gdGhlIG9iamVjdC5cbiAqL1xubGliLnJ1bnRpbWVEZXBlbmRlbmNpZXNfID0ge307XG5cbi8qKlxuICogTGlzdCBvZiBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGludm9rZWQgZHVyaW5nIGxpYnJhcnkgaW5pdGlhbGl6YXRpb24uXG4gKlxuICogRWFjaCBlbGVtZW50IGluIHRoZSBpbml0Q2FsbGJhY2tzXyBhcnJheSBpcyBpdHNlbGYgYSB0d28tZWxlbWVudCBhcnJheS5cbiAqIEVsZW1lbnQgMCBpcyBhIHNob3J0IHN0cmluZyBkZXNjcmliaW5nIHRoZSBvd25lciBvZiB0aGUgaW5pdCByb3V0aW5lLCB1c2VmdWxcbiAqIGZvciBkZWJ1Z2dpbmcuICBFbGVtZW50IDEgaXMgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICovXG5saWIuaW5pdENhbGxiYWNrc18gPSBbXTtcblxuLyoqXG4gKiBSZWNvcmRzIGEgcnVudGltZSBkZXBlbmRlbmN5LlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIGV4cHJlc3MgYSBydW4tdGltZSBkZXBlbmRlbmN5IGF0XG4gKiBjb21waWxlIHRpbWUuICBJdCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgYSBmdWxsLWZsZWRnZWQgbGlicmFyeSBzeXN0ZW0gb3JcbiAqIGRlcGVuZGVuY3kgdHJhY2tlci4gIEl0J3MganVzdCB0aGVyZSB0byBtYWtlIGl0IHBvc3NpYmxlIHRvIGRlYnVnIHRoZVxuICogZGVwcyB3aXRob3V0IHJ1bm5pbmcgYWxsIHRoZSBjb2RlLlxuICpcbiAqIE9iamVjdCBuYW1lcyBhcmUgc3BlY2lmaWVkIGFzIHN0cmluZ3MuICBGb3IgZXhhbXBsZS4uLlxuICpcbiAqICAgICBsaWIucnRkZXAoJ2xpYi5jb2xvcnMnLCAnbGliLlByZWZlcmVuY2VNYW5hZ2VyJyk7XG4gKlxuICogT2JqZWN0IG5hbWVzIG5lZWQgbm90IGJlIHJvb3RlZCBieSAnbGliJy4gIFlvdSBtYXkgdXNlIHRoaXMgdG8gZGVjbGFyZSBhXG4gKiBkZXBlbmRlbmN5IG9uIGFueSBvYmplY3QuXG4gKlxuICogVGhlIGNsaWVudCBwcm9ncmFtIG1heSBjYWxsIGxpYi5lbnN1cmVSdW50aW1lRGVwZW5kZW5jaWVzKCkgYXQgc3RhcnR1cCBpblxuICogb3JkZXIgdG8gZW5zdXJlIHRoYXQgYWxsIHJ1bnRpbWUgZGVwZW5kZW5jaWVzIGhhdmUgYmVlbiBtZXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhcl9hcmdzIE9uZSBvciBtb3JlIG9iamVjdHMgc3BlY2lmaWVkIGFzIHN0cmluZ3MuXG4gKi9cbmxpYi5ydGRlcCA9IGZ1bmN0aW9uKHZhcl9hcmdzKSB7XG4gIHZhciBzb3VyY2U7XG5cbiAgdHJ5IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICB2YXIgc3RhY2tBcnJheSA9IGV4LnN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAvLyBJbiBTYWZhcmksIHRoZSByZXN1bHRpbmcgc3RhY2tBcnJheSB3aWxsIG9ubHkgaGF2ZSAyIGVsZW1lbnRzIGFuZCB0aGVcbiAgICAvLyBpbmRpdmlkdWFsIHN0cmluZ3MgYXJlIGZvcm1hdHRlZCBkaWZmZXJlbnRseS5cbiAgICBpZiAoc3RhY2tBcnJheS5sZW5ndGggPj0gMykge1xuICAgICAgc291cmNlID0gc3RhY2tBcnJheVsyXS5yZXBsYWNlKC9eXFxzKmF0XFxzKy8sICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc291cmNlID0gc3RhY2tBcnJheVsxXS5yZXBsYWNlKC9eXFxzKmdsb2JhbCBjb2RlQC8sICcnKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwYXRoID0gYXJndW1lbnRzW2ldO1xuICAgIGlmIChwYXRoIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGxpYi5ydGRlcC5hcHBseShsaWIsIHBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJ5ID0gdGhpcy5ydW50aW1lRGVwZW5kZW5jaWVzX1twYXRoXTtcbiAgICAgIGlmICghYXJ5KSBhcnkgPSB0aGlzLnJ1bnRpbWVEZXBlbmRlbmNpZXNfW3BhdGhdID0gW107XG4gICAgICBhcnkucHVzaChzb3VyY2UpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgYWxsIHJ1bnRpbWUgZGVwZW5kZW5jaWVzIGFyZSBtZXQsIG9yIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gKlxuICogRXZlcnkgdW5tZXQgcnVudGltZSBkZXBlbmRlbmN5IHdpbGwgYmUgbG9nZ2VkIHRvIHRoZSBKUyBjb25zb2xlLiAgSWYgYXRcbiAqIGxlYXN0IG9uZSBkZXBlbmRlbmN5IGlzIHVubWV0IHRoaXMgd2lsbCByYWlzZSBhbiBleGNlcHRpb24uXG4gKi9cbmxpYi5lbnN1cmVSdW50aW1lRGVwZW5kZW5jaWVzXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGFzc2VkID0gdHJ1ZTtcblxuICBmb3IgKHZhciBwYXRoIGluIGxpYi5ydW50aW1lRGVwZW5kZW5jaWVzXykge1xuICAgIHZhciBzb3VyY2VMaXN0ID0gbGliLnJ1bnRpbWVEZXBlbmRlbmNpZXNfW3BhdGhdO1xuICAgIHZhciBuYW1lcyA9IHBhdGguc3BsaXQoJy4nKTtcblxuICAgIC8vIEluIGEgZG9jdW1lbnQgY29udGV4dCAnd2luZG93JyBpcyB0aGUgZ2xvYmFsIG9iamVjdC4gIEluIGEgd29ya2VyIGl0J3NcbiAgICAvLyBjYWxsZWQgJ3NlbGYnLlxuICAgIHZhciBvYmogPSB3aW5kb3cgLyogfHwgc2VsZiAqLztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIShuYW1lc1tpXSBpbiBvYmopKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignTWlzc2luZyBcIicgKyBwYXRoICsgJ1wiIGlzIG5lZWRlZCBieScsIHNvdXJjZUxpc3QpO1xuICAgICAgICBwYXNzZWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIG9iaiA9IG9ialtuYW1lc1tpXV07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFwYXNzZWQpIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHJ1bnRpbWUgZGVwZW5kZW5jeSBjaGVjaycpO1xufTtcblxuLyoqXG4gKiBSZWdpc3RlciBhbiBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi5cbiAqXG4gKiBUaGUgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb25zIGFyZSBpbnZva2VkIGluIHJlZ2lzdHJhdGlvbiBvcmRlciB3aGVuXG4gKiBsaWIuaW5pdCgpIGlzIGludm9rZWQuICBFYWNoIGZ1bmN0aW9uIHdpbGwgcmVjZWl2ZSBhIHNpbmdsZSBwYXJhbWV0ZXIsIHdoaWNoXG4gKiBpcyBhIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQgd2hlbiBpdCBjb21wbGV0ZXMgaXRzIHBhcnQgb2YgdGhlIGluaXRpYWxpemF0aW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgc2hvcnQgZGVzY3JpcHRpdmUgbmFtZSBvZiB0aGUgaW5pdCByb3V0aW5lIHVzZWZ1bCBmb3JcbiAqICAgICBkZWJ1Z2dpbmcuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGZ1bmN0aW9uKX0gY2FsbGJhY2sgVGhlIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyLlxuICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBjYWxsYmFjayBwYXJhbWV0ZXIuXG4gKi9cbmxpYi5yZWdpc3RlckluaXQgPSBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xuICBsaWIuaW5pdENhbGxiYWNrc18ucHVzaChbbmFtZSwgY2FsbGJhY2tdKTtcbiAgcmV0dXJuIGNhbGxiYWNrO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBsaWJyYXJ5LlxuICpcbiAqIFRoaXMgd2lsbCBlbnN1cmUgdGhhdCBhbGwgcmVnaXN0ZXJlZCBydW50aW1lIGRlcGVuZGVuY2llcyBhcmUgbWV0LCBhbmRcbiAqIGludm9rZSBhbnkgcmVnaXN0ZXJlZCBpbml0aWFsaXphdGlvbiBmdW5jdGlvbnMuXG4gKlxuICogSW5pdGlhbGl6YXRpb24gaXMgYXN5bmNocm9ub3VzLiAgVGhlIGxpYnJhcnkgaXMgbm90IHJlYWR5IGZvciB1c2UgdW50aWxcbiAqIHRoZSBvbkluaXQgZnVuY3Rpb24gaXMgaW52b2tlZC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IG9uSW5pdCBUaGUgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gaW5pdGlhbGl6YXRpb24gaXNcbiAqICAgICBjb21wbGV0ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKil9IG9wdF9sb2dGdW5jdGlvbiBBbiBvcHRpb25hbCBmdW5jdGlvbiB0byBzZW5kXG4gKiAgICAgaW5pdGlhbGl6YXRpb24gcmVsYXRlZCBsb2cgbWVzc2FnZXMgdG8uXG4gKi9cbmxpYi5pbml0ID0gZnVuY3Rpb24ob25Jbml0LCBvcHRfbG9nRnVuY3Rpb24pIHtcbiAgdmFyIGFyeSA9IGxpYi5pbml0Q2FsbGJhY2tzXztcblxuICB2YXIgaW5pdE5leHQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoYXJ5Lmxlbmd0aCkge1xuICAgICAgdmFyIHJlYyA9IGFyeS5zaGlmdCgpO1xuICAgICAgaWYgKG9wdF9sb2dGdW5jdGlvbikgb3B0X2xvZ0Z1bmN0aW9uKCdpbml0OiAnICsgcmVjWzBdKTtcbiAgICAgIHJlY1sxXShsaWIuZi5hbGFybShpbml0TmV4dCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbkluaXQoKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBvbkluaXQgIT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3Npbmcgb3IgaW52YWxpZCBhcmd1bWVudDogb25Jbml0Jyk7XG5cbiAgbGliLmVuc3VyZVJ1bnRpbWVEZXBlbmRlbmNpZXNfKCk7XG5cbiAgc2V0VGltZW91dChpbml0TmV4dCwgMCk7XG59O1xuLy8gU09VUkNFIEZJTEU6IGxpYmRvdC9qcy9saWJfcG9seWZpbGwuanNcbi8vIENvcHlyaWdodCAyMDE3IFRoZSBDaHJvbWl1bSBPUyBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFBvbHlmaWxscyBmb3IgRVMyMDE2KyBmZWF0dXJlcyB3ZSB3YW50IHRvIHVzZS5cbiAqL1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvcGFkU3RhcnRcbmlmICghU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydCkge1xuICBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0ID0gZnVuY3Rpb24odGFyZ2V0TGVuZ3RoLCBwYWRTdHJpbmcpIHtcbiAgICAvLyBJZiB0aGUgc3RyaW5nIGlzIGFscmVhZHkgbG9uZyBlbm91Z2gsIG5vdGhpbmcgdG8gZG8hXG4gICAgdGFyZ2V0TGVuZ3RoIC09IHRoaXMubGVuZ3RoO1xuICAgIGlmICh0YXJnZXRMZW5ndGggPD0gMCkgcmV0dXJuIFN0cmluZyh0aGlzKTtcblxuICAgIGlmIChwYWRTdHJpbmcgPT09IHVuZGVmaW5lZCkgcGFkU3RyaW5nID0gJyAnO1xuXG4gICAgLy8gSW4gY2FzZSB0aGUgcGFkIGlzIG11bHRpcGxlIGNoYXJzIGxvbmcuXG4gICAgaWYgKHRhcmdldExlbmd0aCA+IHBhZFN0cmluZy5sZW5ndGgpXG4gICAgICBwYWRTdHJpbmcgPSBwYWRTdHJpbmcucmVwZWF0KHRhcmdldExlbmd0aCAvIHBhZFN0cmluZy5sZW5ndGggKyAxKTtcblxuICAgIHJldHVybiBwYWRTdHJpbmcuc2xpY2UoMCwgdGFyZ2V0TGVuZ3RoKSArIFN0cmluZyh0aGlzKTtcbiAgfTtcbn1cblxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3BhZEVuZFxuaWYgKCFTdHJpbmcucHJvdG90eXBlLnBhZEVuZCkge1xuICBTdHJpbmcucHJvdG90eXBlLnBhZEVuZCA9IGZ1bmN0aW9uKHRhcmdldExlbmd0aCwgcGFkU3RyaW5nKSB7XG4gICAgLy8gSWYgdGhlIHN0cmluZyBpcyBhbHJlYWR5IGxvbmcgZW5vdWdoLCBub3RoaW5nIHRvIGRvIVxuICAgIHRhcmdldExlbmd0aCAtPSB0aGlzLmxlbmd0aDtcbiAgICBpZiAodGFyZ2V0TGVuZ3RoIDw9IDApIHJldHVybiBTdHJpbmcodGhpcyk7XG5cbiAgICBpZiAocGFkU3RyaW5nID09PSB1bmRlZmluZWQpIHBhZFN0cmluZyA9ICcgJztcblxuICAgIC8vIEluIGNhc2UgdGhlIHBhZCBpcyBtdWx0aXBsZSBjaGFycyBsb25nLlxuICAgIGlmICh0YXJnZXRMZW5ndGggPiBwYWRTdHJpbmcubGVuZ3RoKVxuICAgICAgcGFkU3RyaW5nID0gcGFkU3RyaW5nLnJlcGVhdCh0YXJnZXRMZW5ndGggLyBwYWRTdHJpbmcubGVuZ3RoICsgMSk7XG5cbiAgICByZXR1cm4gU3RyaW5nKHRoaXMpICsgcGFkU3RyaW5nLnNsaWNlKDAsIHRhcmdldExlbmd0aCk7XG4gIH07XG59XG5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9vYmplY3RzL09iamVjdC92YWx1ZXNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllcy9ibG9iL21hc3Rlci9wb2x5ZmlsbC5qc1xuaWYgKCFPYmplY3QudmFsdWVzIHx8ICFPYmplY3QuZW50cmllcykge1xuICBjb25zdCByZWR1Y2UgPSBGdW5jdGlvbi5iaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgQXJyYXkucHJvdG90eXBlLnJlZHVjZSk7XG4gIGNvbnN0IGlzRW51bWVyYWJsZSA9IEZ1bmN0aW9uLmJpbmQuY2FsbChcbiAgICBGdW5jdGlvbi5jYWxsLFxuICAgIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICk7XG4gIGNvbnN0IGNvbmNhdCA9IEZ1bmN0aW9uLmJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBBcnJheS5wcm90b3R5cGUuY29uY2F0KTtcblxuICBpZiAoIU9iamVjdC52YWx1ZXMpIHtcbiAgICBPYmplY3QudmFsdWVzID0gZnVuY3Rpb24gdmFsdWVzKE8pIHtcbiAgICAgIHJldHVybiByZWR1Y2UoXG4gICAgICAgIFJlZmxlY3Qub3duS2V5cyhPKSxcbiAgICAgICAgKHYsIGspID0+XG4gICAgICAgICAgY29uY2F0KHYsIHR5cGVvZiBrID09PSAnc3RyaW5nJyAmJiBpc0VudW1lcmFibGUoTywgaykgPyBbT1trXV0gOiBbXSksXG4gICAgICAgIFtdLFxuICAgICAgKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFPYmplY3QuZW50cmllcykge1xuICAgIE9iamVjdC5lbnRyaWVzID0gZnVuY3Rpb24gZW50cmllcyhPKSB7XG4gICAgICByZXR1cm4gcmVkdWNlKFxuICAgICAgICBSZWZsZWN0Lm93bktleXMoTyksXG4gICAgICAgIChlLCBrKSA9PlxuICAgICAgICAgIGNvbmNhdChcbiAgICAgICAgICAgIGUsXG4gICAgICAgICAgICB0eXBlb2YgayA9PT0gJ3N0cmluZycgJiYgaXNFbnVtZXJhYmxlKE8sIGspID8gW1trLCBPW2tdXV0gOiBbXSxcbiAgICAgICAgICApLFxuICAgICAgICBbXSxcbiAgICAgICk7XG4gICAgfTtcbiAgfVxufVxuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9Qcm9taXNlL2ZpbmFsbHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseS9ibG9iL21hc3Rlci9wb2x5ZmlsbC5qc1xuaWYgKHR5cGVvZiBQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5ICE9PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnN0IHNwZWNpZXNDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghTyB8fCAodHlwZW9mIE8gIT09ICdvYmplY3QnICYmIHR5cGVvZiBPICE9PSAnZnVuY3Rpb24nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG4gICAgfVxuICAgIGNvbnN0IEMgPSBPLmNvbnN0cnVjdG9yO1xuICAgIGlmICh0eXBlb2YgQyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0Q29uc3RydWN0b3I7XG4gICAgfVxuICAgIGlmICghQyB8fCAodHlwZW9mIEMgIT09ICdvYmplY3QnICYmIHR5cGVvZiBDICE9PSAnZnVuY3Rpb24nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTy5jb25zdHJ1Y3RvciBpcyBub3QgYW4gT2JqZWN0Jyk7XG4gICAgfVxuICAgIGNvbnN0IFMgPVxuICAgICAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnNwZWNpZXMgPT09ICdzeW1ib2wnXG4gICAgICAgID8gQ1tTeW1ib2wuc3BlY2llc11cbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgaWYgKFMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRDb25zdHJ1Y3RvcjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBTID09PSAnZnVuY3Rpb24nICYmIFMucHJvdG90eXBlKSB7XG4gICAgICByZXR1cm4gUztcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm8gY29uc3RydWN0b3IgZm91bmQnKTtcbiAgfTtcblxuICBjb25zdCBzaGltID0ge1xuICAgIGZpbmFsbHkob25GaW5hbGx5KSB7XG4gICAgICBjb25zdCBwcm9taXNlID0gdGhpcztcbiAgICAgIGlmICh0eXBlb2YgcHJvbWlzZSAhPT0gJ29iamVjdCcgfHwgcHJvbWlzZSA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInRoaXNcIiB2YWx1ZSBpcyBub3QgYW4gT2JqZWN0Jyk7XG4gICAgICB9XG4gICAgICBjb25zdCBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHByb21pc2UsIFByb21pc2UpO1xuICAgICAgaWYgKHR5cGVvZiBvbkZpbmFsbHkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucHJvdG90eXBlLnRoZW4uY2FsbChwcm9taXNlLCBvbkZpbmFsbHksIG9uRmluYWxseSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5wcm90b3R5cGUudGhlbi5jYWxsKFxuICAgICAgICBwcm9taXNlLFxuICAgICAgICB4ID0+IG5ldyBDKHJlc29sdmUgPT4gcmVzb2x2ZShvbkZpbmFsbHkoKSkpLnRoZW4oKCkgPT4geCksXG4gICAgICAgIGUgPT5cbiAgICAgICAgICBuZXcgQyhyZXNvbHZlID0+IHJlc29sdmUob25GaW5hbGx5KCkpKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0sXG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm9taXNlLnByb3RvdHlwZSwgJ2ZpbmFsbHknLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBzaGltLmZpbmFsbHksXG4gIH0pO1xufVxuLy8gU09VUkNFIEZJTEU6IGxpYmRvdC9qcy9saWJfYXJyYXkuanNcbi8vIENvcHlyaWdodCAyMDE3IFRoZSBDaHJvbWl1bSBPUyBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEhlbHBlciBmdW5jdGlvbnMgZm9yICh0eXBlZCkgYXJyYXlzLlxuICovXG5cbmxpYi5hcnJheSA9IHt9O1xuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgb2YgZm91ciB1bnNpZ25lZCBieXRlcyBpbnRvIGFuIHVuc2lnbmVkIDMyLWJpdCBpbnRlZ2VyIChiaWdcbiAqIGVuZGlhbikuXG4gKlxuICogQHBhcmFtIHshQXJyYXkuPCFudW1iZXI+fSBhcnJheVxuICogQHJldHVybnMgeyFudW1iZXJ9XG4gKi9cbmxpYi5hcnJheS5hcnJheUJpZ0VuZGlhblRvVWludDMyID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgY29uc3QgbWF5YmVTaWduZWQgPVxuICAgIChhcnJheVswXSA8PCAyNCkgfCAoYXJyYXlbMV0gPDwgMTYpIHwgKGFycmF5WzJdIDw8IDgpIHwgKGFycmF5WzNdIDw8IDApO1xuICAvLyBJbnRlcnByZXQgdGhlIHJlc3VsdCBvZiB0aGUgYml0IG9wZXJhdGlvbnMgYXMgYW4gdW5zaWduZWQgaW50ZWdlci5cbiAgcmV0dXJuIG1heWJlU2lnbmVkID4+PiAwO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIHVuc2lnbmVkIDMyLWJpdCBpbnRlZ2VyIGludG8gYW4gYXJyYXkgb2YgZm91ciB1bnNpZ25lZCBieXRlcyAoYmlnXG4gKiBlbmRpYW4pLlxuICpcbiAqIEBwYXJhbSB7IW51bWJlcn0gdWludDMyXG4gKiBAcmV0dXJucyB7IUFycmF5LjwhbnVtYmVyPn1cbiAqL1xubGliLmFycmF5LnVpbnQzMlRvQXJyYXlCaWdFbmRpYW4gPSBmdW5jdGlvbih1aW50MzIpIHtcbiAgcmV0dXJuIFtcbiAgICAodWludDMyID4+PiAyNCkgJiAweGZmLFxuICAgICh1aW50MzIgPj4+IDE2KSAmIDB4ZmYsXG4gICAgKHVpbnQzMiA+Pj4gOCkgJiAweGZmLFxuICAgICh1aW50MzIgPj4+IDApICYgMHhmZixcbiAgXTtcbn07XG5cbi8qKlxuICogQ29uY2F0ZW5hdGUgYW4gYXJiaXRyYXJ5IG51bWJlciBvZiB0eXBlZCBhcnJheXMgb2YgdGhlIHNhbWUgdHlwZSBpbnRvIGEgbmV3XG4gKiB0eXBlZCBhcnJheSBvZiB0aGlzIHR5cGUuXG4gKlxuICogQHRlbXBsYXRlIFRZUEVEX0FSUkFZXG4gKiBAcGFyYW0gey4uLiFUWVBFRF9BUlJBWX0gYXJyYXlzXG4gKiBAcmV0dXJucyB7IVRZUEVEX0FSUkFZfVxuICovXG5saWIuYXJyYXkuY29uY2F0VHlwZWQgPSBmdW5jdGlvbiguLi5hcnJheXMpIHtcbiAgbGV0IHJlc3VsdExlbmd0aCA9IDA7XG4gIGZvciAoY29uc3QgYXJyYXkgb2YgYXJyYXlzKSB7XG4gICAgcmVzdWx0TGVuZ3RoICs9IGFycmF5Lmxlbmd0aDtcbiAgfVxuICBjb25zdCByZXN1bHQgPSBuZXcgYXJyYXlzWzBdLmNvbnN0cnVjdG9yKHJlc3VsdExlbmd0aCk7XG4gIGxldCBwb3MgPSAwO1xuICBmb3IgKGNvbnN0IGFycmF5IG9mIGFycmF5cykge1xuICAgIHJlc3VsdC5zZXQoYXJyYXksIHBvcyk7XG4gICAgcG9zICs9IGFycmF5Lmxlbmd0aDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBDb21wYXJlIHR3byBhcnJheS1saWtlIG9iamVjdHMgZW50cnl3aXNlLlxuICpcbiAqIEB0ZW1wbGF0ZSBBUlJBWV9MSUtFXG4gKiBAcGFyYW0gez9BUlJBWV9MSUtFfSBhXG4gKiBAcGFyYW0gez9BUlJBWV9MSUtFfSBiXG4gKiBAcmV0dXJucyB7IWJvb2xlYW59IHRydWUgaWYgYm90aCBhcnJheXMgYXJlIG51bGwgb3IgdGhleSBhZ3JlZSBlbnRyeXdpc2U7XG4gKiAgICAgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5saWIuYXJyYXkuY29tcGFyZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgaWYgKGEgPT09IG51bGwgfHwgYiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBhID09PSBudWxsICYmIGIgPT09IG51bGw7XG4gIH1cblxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuLy8gU09VUkNFIEZJTEU6IGxpYmRvdC9qcy9saWJfY29sb3JzLmpzXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTIgVGhlIENocm9taXVtIE9TIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4vLyBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuXG4vKipcbiAqIE5hbWVzcGFjZSBmb3IgY29sb3IgdXRpbGl0aWVzLlxuICovXG5saWIuY29sb3JzID0ge307XG5cbi8qKlxuICogRmlyc3QsIHNvbWUgY2FubmVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMgd2UncmUgZ29pbmcgdG8gdXNlIGluIHRoaXMgZmlsZS5cbiAqXG4gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCUkFDRSBZT1VSU0VMRlxuICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLH5+fn4uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHw+Xzwgfn5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzYC0tLSctLy5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzOjo6OjpcXHZcXFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPW89Ojo6OjpcXCxcXFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgOjo6OjpcXCwsXFxcbiAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIFRIRSBSRUdVTEFSIEVYUFJFU1NJT05TXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUkUgQ09NSU5HLlxuICpcbiAqIFRoZXJlJ3Mgbm8gd2F5IHRvIGJyZWFrIGxvbmcgUkUgbGl0ZXJhbHMgaW4gSmF2YVNjcmlwdC4gIEZpeCB0aGF0IHdoeSBkb24ndFxuICogeW91PyAgT2gsIGFuZCBhbHNvIHRoZXJlJ3Mgbm8gd2F5IHRvIHdyaXRlIGEgc3RyaW5nIHRoYXQgZG9lc24ndCBpbnRlcnByZXRcbiAqIGVzY2FwZXMuXG4gKlxuICogSW5zdGVhZCwgd2Ugc3Rvb3AgdG8gdGhpcyAucmVwbGFjZSgpIHRyaWNrLlxuICovXG5saWIuY29sb3JzLnJlXyA9IHtcbiAgLy8gQ1NTIGhleCBjb2xvciwgI1JHQi5cbiAgaGV4MTY6IC8jKFthLWYwLTldKShbYS1mMC05XSkoW2EtZjAtOV0pL2ksXG5cbiAgLy8gQ1NTIGhleCBjb2xvciwgI1JSR0dCQi5cbiAgaGV4MjQ6IC8jKFthLWYwLTldezJ9KShbYS1mMC05XXsyfSkoW2EtZjAtOV17Mn0pL2ksXG5cbiAgLy8gQ1NTIHJnYiBjb2xvciwgcmdiKHJycixnZ2csYmJiKS5cbiAgcmdiOiBuZXcgUmVnRXhwKFxuICAgIChcbiAgICAgICdeL3MqcmdiL3MqLygvcyooL2R7MSwzfSkvcyosL3MqKC9kezEsM30pL3MqLCcgKyAnL3MqKC9kezEsM30pL3MqLykvcyokJ1xuICAgICkucmVwbGFjZSgvXFwvL2csICdcXFxcJyksXG4gICAgJ2knLFxuICApLFxuXG4gIC8vIENTUyByZ2IgY29sb3IsIHJnYihycnIsZ2dnLGJiYixhYWEpLlxuICByZ2JhOiBuZXcgUmVnRXhwKFxuICAgIChcbiAgICAgICdeL3MqcmdiYS9zKicgK1xuICAgICAgJy8oL3MqKC9kezEsM30pL3MqLC9zKigvZHsxLDN9KS9zKiwvcyooL2R7MSwzfSkvcyonICtcbiAgICAgICcoPzosL3MqKC9kKyg/Oi8uL2QrKT8pL3MqKS8pL3MqJCdcbiAgICApLnJlcGxhY2UoL1xcLy9nLCAnXFxcXCcpLFxuICAgICdpJyxcbiAgKSxcblxuICAvLyBFaXRoZXIgUkdCIG9yIFJHQkEuXG4gIHJnYng6IG5ldyBSZWdFeHAoXG4gICAgKFxuICAgICAgJ14vcypyZ2JhPy9zKicgK1xuICAgICAgJy8oL3MqKC9kezEsM30pL3MqLC9zKigvZHsxLDN9KS9zKiwvcyooL2R7MSwzfSkvcyonICtcbiAgICAgICcoPzosL3MqKC9kKyg/Oi8uL2QrKT8pL3MqKT8vKS9zKiQnXG4gICAgKS5yZXBsYWNlKC9cXC8vZywgJ1xcXFwnKSxcbiAgICAnaScsXG4gICksXG5cbiAgLy8gQW4gWDExIFwicmdiOmRkZGQvZGRkZC9kZGRkXCIgdmFsdWUuXG4gIHgxMXJnYjogL15cXHMqcmdiOihbYS1mMC05XXsxLDR9KVxcLyhbYS1mMC05XXsxLDR9KVxcLyhbYS1mMC05XXsxLDR9KVxccyokL2ksXG5cbiAgLy8gRW5nbGlzaCBjb2xvciBuYW1lLlxuICBuYW1lOiAvW2Etel1bYS16MC05XFxzXSsvLFxufTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgQ1NTIHJnYihkZGQsZGRkLGRkZCkgY29sb3IgdmFsdWUgaW50byBhbiBYMTEgY29sb3IgdmFsdWUuXG4gKlxuICogT3RoZXIgQ1NTIGNvbG9yIHZhbHVlcyBhcmUgaWdub3JlZCB0byBlbnN1cmUgc2FuaXRhcnkgZGF0YSBoYW5kbGluZy5cbiAqXG4gKiBFYWNoICdkZGQnIGNvbXBvbmVudCBpcyBhIG9uZSBieXRlIHZhbHVlIHNwZWNpZmllZCBpbiBkZWNpbWFsLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgQ1NTIGNvbG9yIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBYMTEgY29sb3IgdmFsdWUgb3IgbnVsbCBpZiB0aGUgdmFsdWUgY291bGQgbm90IGJlXG4gKiAgICAgY29udmVydGVkLlxuICovXG5saWIuY29sb3JzLnJnYlRvWDExID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgZnVuY3Rpb24gc2NhbGUodikge1xuICAgIHYgPSAoTWF0aC5taW4odiwgMjU1KSAqIDI1NykudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiBsaWIuZi56cGFkKHYsIDQpO1xuICB9XG5cbiAgdmFyIGFyeSA9IHZhbHVlLm1hdGNoKGxpYi5jb2xvcnMucmVfLnJnYngpO1xuICBpZiAoIWFyeSkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuICdyZ2I6JyArIHNjYWxlKGFyeVsxXSkgKyAnLycgKyBzY2FsZShhcnlbMl0pICsgJy8nICsgc2NhbGUoYXJ5WzNdKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBhIGxlZ2FjeSBYMTEgY29sb3ZlciB2YWx1ZSBpbnRvIGFuIENTUyByZ2IoLi4uKSBjb2xvciB2YWx1ZS5cbiAqXG4gKiBUaGV5IHRha2UgdGhlIGZvcm06XG4gKiAxMiBiaXQ6ICNSR0IgICAgICAgICAgLT4gI1IwMDBHMDAwQjAwMFxuICogMjQgYml0OiAjUlJHR0JCICAgICAgIC0+ICNSUjAwR0cwMEJCMDBcbiAqIDM2IGJpdDogI1JSUkdHR0JCQiAgICAtPiAjUlJSMEdHRzBCQkIwXG4gKiA0OCBiaXQ6ICNSUlJSR0dHR0JCQkJcbiAqIFRoZXNlIGFyZSB0aGUgbW9zdCBzaWduaWZpY2FudCBiaXRzLlxuICpcbiAqIFRydW5jYXRlIHZhbHVlcyBiYWNrIGRvd24gdG8gMjQgYml0IHNpbmNlIHRoYXQncyBhbGwgQ1NTIHN1cHBvcnRzLlxuICovXG5saWIuY29sb3JzLngxMUhleFRvQ1NTID0gZnVuY3Rpb24odikge1xuICBpZiAoIXYuc3RhcnRzV2l0aCgnIycpKSByZXR1cm4gbnVsbDtcbiAgLy8gU3RyaXAgdGhlIGxlYWRpbmcgIyBvZmYuXG4gIHYgPSB2LnN1YnN0cigxKTtcblxuICAvLyBSZWplY3QgdW5rbm93biBzaXplcy5cbiAgaWYgKFszLCA2LCA5LCAxMl0uaW5kZXhPZih2Lmxlbmd0aCkgPT0gLTEpIHJldHVybiBudWxsO1xuXG4gIC8vIFJlamVjdCBub24taGV4IHZhbHVlcy5cbiAgaWYgKHYubWF0Y2goL1teYS1mMC05XS9pKSkgcmV0dXJuIG51bGw7XG5cbiAgLy8gU3BsaXQgdGhlIGNvbG9ycyBvdXQuXG4gIHZhciBzaXplID0gdi5sZW5ndGggLyAzO1xuICB2YXIgciA9IHYuc3Vic3RyKDAsIHNpemUpO1xuICB2YXIgZyA9IHYuc3Vic3RyKHNpemUsIHNpemUpO1xuICB2YXIgYiA9IHYuc3Vic3RyKHNpemUgKyBzaXplLCBzaXplKTtcblxuICAvLyBOb3JtYWxpemUgdG8gMTYgYml0cy5cbiAgZnVuY3Rpb24gbm9ybTE2KHYpIHtcbiAgICB2ID0gcGFyc2VJbnQodiwgMTYpO1xuICAgIHJldHVybiBzaXplID09IDJcbiAgICAgID8gdiAvLyAxNiBiaXRcbiAgICAgIDogc2l6ZSA9PSAxXG4gICAgICAgID8gdiA8PCA0IC8vIDggYml0XG4gICAgICAgIDogdiA+PiAoNCAqIChzaXplIC0gMikpOyAvLyAyNCBvciAzMiBiaXRcbiAgfVxuICByZXR1cm4gbGliLmNvbG9ycy5hcnJheVRvUkdCQShbciwgZywgYl0ubWFwKG5vcm0xNikpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIFgxMSBjb2xvciB2YWx1ZSBpbnRvIGFuIENTUyByZ2IoLi4uKSBjb2xvciB2YWx1ZS5cbiAqXG4gKiBUaGUgWDExIHZhbHVlIG1heSBiZSBhbiBYMTEgY29sb3IgbmFtZSwgb3IgYW4gUkdCIHZhbHVlIG9mIHRoZSBmb3JtXG4gKiByZ2I6aGhoaC9oaGhoL2hoaGguICBJZiBhIGNvbXBvbmVudCB2YWx1ZSBpcyBsZXNzIHRoYW4gNCBkaWdpdHMgaXQgaXNcbiAqIHBhZGRlZCBvdXQgdG8gNCwgdGhlbiBzY2FsZWQgZG93biB0byBmaXQgaW4gYSBzaW5nbGUgYnl0ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIFgxMSBjb2xvciB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgQ1NTIGNvbG9yIHZhbHVlIG9yIG51bGwgaWYgdGhlIHZhbHVlIGNvdWxkIG5vdCBiZVxuICogICAgIGNvbnZlcnRlZC5cbiAqL1xubGliLmNvbG9ycy54MTFUb0NTUyA9IGZ1bmN0aW9uKHYpIHtcbiAgZnVuY3Rpb24gc2NhbGUodikge1xuICAgIC8vIFBhZCBvdXQgdmFsdWVzIHdpdGggbGVzcyB0aGFuIGZvdXIgZGlnaXRzLiAgVGhpcyBwYWRkaW5nIChwcm9iYWJseSlcbiAgICAvLyBtYXRjaGVzIHh0ZXJtLiAgSXQncyBkaWZmaWN1bHQgdG8gc2F5IGZvciBzdXJlIHNpbmNlIHh0ZXJtIHNlZW1zIHRvXG4gICAgLy8gYXJyaXZlIGF0IGEgcGFkZGVkIHZhbHVlIGFuZCB0aGVuIHBlcmZvcm0gc29tZSBjb21iaW5hdGlvbiBvZlxuICAgIC8vIGdhbW1hIGNvcnJlY3Rpb24sIGNvbG9yIHNwYWNlIHRyYW5zZm9ybWF0aW9uLCBhbmQgcXVhbnRpemF0aW9uLlxuXG4gICAgaWYgKHYubGVuZ3RoID09IDEpIHtcbiAgICAgIC8vIFNpbmdsZSBkaWdpdHMgcGFkIG91dCB0byBmb3VyIGJ5IHJlcGVhdGluZyB0aGUgY2hhcmFjdGVyLiAgXCJmXCIgYmVjb21lc1xuICAgICAgLy8gXCJmZmZmXCIuICBTY2FsaW5nIGRvd24gYSBoZXggdmFsdWUgb2YgdGhpcyBwYXR0ZXJuIGJ5IDI1NyBpcyB0aGUgc2FtZVxuICAgICAgLy8gYXMgY3V0dGluZyBvZmYgb25lIGJ5dGUuICBXZSBza2lwIHRoZSBtaWRkbGUgc3RlcCBhbmQganVzdCBkb3VibGVcbiAgICAgIC8vIHRoZSBjaGFyYWN0ZXIuXG4gICAgICByZXR1cm4gcGFyc2VJbnQodiArIHYsIDE2KTtcbiAgICB9XG5cbiAgICBpZiAodi5sZW5ndGggPT0gMikge1xuICAgICAgLy8gU2ltaWxhciBkZWFsIGhlcmUuICBYMTEgcGFkcyB0d28gZGlnaXQgdmFsdWVzIGJ5IHJlcGVhdGluZyB0aGVcbiAgICAgIC8vIGJ5dGUgKG9yIHNjYWxlIHVwIGJ5IDI1NykuICBTaW5jZSB3ZSdyZSBnb2luZyB0byBzY2FsZSBpdCBiYWNrXG4gICAgICAvLyBkb3duIGFueXdheSwgd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBvcmlnaW5hbCB2YWx1ZS5cbiAgICAgIHJldHVybiBwYXJzZUludCh2LCAxNik7XG4gICAgfVxuXG4gICAgaWYgKHYubGVuZ3RoID09IDMpIHtcbiAgICAgIC8vIFRocmVlIGRpZ2l0IHZhbHVlcyBzZWVtIHRvIGJlIHBhZGRlZCBieSByZXBlYXRpbmcgdGhlIGZpbmFsIGRpZ2l0LlxuICAgICAgLy8gZS5nLiAxMGYgYmVjb21lcyAxMGZmLlxuICAgICAgdiA9IHYgKyB2LnN1YnN0cigyKTtcbiAgICB9XG5cbiAgICAvLyBTY2FsZSBkb3duIHRoZSAyIGJ5dGUgdmFsdWUuXG4gICAgcmV0dXJuIE1hdGgucm91bmQocGFyc2VJbnQodiwgMTYpIC8gMjU3KTtcbiAgfVxuXG4gIHZhciBhcnkgPSB2Lm1hdGNoKGxpYi5jb2xvcnMucmVfLngxMXJnYik7XG4gIGlmICghYXJ5KSB7XG4gICAgLy8gSGFuZGxlIHRoZSBsZWdhY3kgZm9ybWF0LlxuICAgIGlmICh2LnN0YXJ0c1dpdGgoJyMnKSkgcmV0dXJuIGxpYi5jb2xvcnMueDExSGV4VG9DU1Modik7XG4gICAgZWxzZSByZXR1cm4gbGliLmNvbG9ycy5uYW1lVG9SR0Iodik7XG4gIH1cblxuICBhcnkuc3BsaWNlKDAsIDEpO1xuICByZXR1cm4gbGliLmNvbG9ycy5hcnJheVRvUkdCQShhcnkubWFwKHNjYWxlKSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIG9uZSBvciBtb3JlIENTUyAnI1JSR0dCQicgY29sb3IgdmFsdWVzIGludG8gdGhlaXIgcmdiKC4uLilcbiAqIGZvcm0uXG4gKlxuICogQXJyYXlzIGFyZSBjb252ZXJ0ZWQgaW4gcGxhY2UuIElmIGEgdmFsdWUgY2Fubm90IGJlIGNvbnZlcnRlZCwgaXQgaXNcbiAqIHJlcGxhY2VkIHdpdGggbnVsbC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheS48c3RyaW5nPn0gQSBzaW5nbGUgUkdCIHZhbHVlIG9yIGFycmF5IG9mIFJHQiB2YWx1ZXMgdG9cbiAqICAgICBjb252ZXJ0LlxuICogQHJldHVybiB7c3RyaW5nfEFycmF5LjxzdHJpbmc+fSBUaGUgY29udmVydGVkIHZhbHVlIG9yIHZhbHVlcy5cbiAqL1xubGliLmNvbG9ycy5oZXhUb1JHQiA9IGZ1bmN0aW9uKGFyZykge1xuICB2YXIgaGV4MTYgPSBsaWIuY29sb3JzLnJlXy5oZXgxNjtcbiAgdmFyIGhleDI0ID0gbGliLmNvbG9ycy5yZV8uaGV4MjQ7XG5cbiAgZnVuY3Rpb24gY29udmVydChoZXgpIHtcbiAgICBpZiAoaGV4Lmxlbmd0aCA9PSA0KSB7XG4gICAgICBoZXggPSBoZXgucmVwbGFjZShoZXgxNiwgZnVuY3Rpb24oaCwgciwgZywgYikge1xuICAgICAgICByZXR1cm4gJyMnICsgciArIHIgKyBnICsgZyArIGIgKyBiO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBhcnkgPSBoZXgubWF0Y2goaGV4MjQpO1xuICAgIGlmICghYXJ5KSByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiAoXG4gICAgICAncmdiKCcgK1xuICAgICAgcGFyc2VJbnQoYXJ5WzFdLCAxNikgK1xuICAgICAgJywgJyArXG4gICAgICBwYXJzZUludChhcnlbMl0sIDE2KSArXG4gICAgICAnLCAnICtcbiAgICAgIHBhcnNlSW50KGFyeVszXSwgMTYpICtcbiAgICAgICcpJ1xuICAgICk7XG4gIH1cblxuICBpZiAoYXJnIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnW2ldID0gY29udmVydChhcmdbaV0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhcmcgPSBjb252ZXJ0KGFyZyk7XG4gIH1cblxuICByZXR1cm4gYXJnO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBvbmUgb3IgbW9yZSBDU1MgcmdiKC4uLikgZm9ybXMgaW50byB0aGVpciAnI1JSR0dCQicgY29sb3IgdmFsdWVzLlxuICpcbiAqIElmIGdpdmVuIGFuIHJnYmEoLi4uKSBmb3JtLCB0aGUgYWxwaGEgZmllbGQgaXMgdGhyb3duIGF3YXkuXG4gKlxuICogQXJyYXlzIGFyZSBjb252ZXJ0ZWQgaW4gcGxhY2UuIElmIGEgdmFsdWUgY2Fubm90IGJlIGNvbnZlcnRlZCwgaXQgaXNcbiAqIHJlcGxhY2VkIHdpdGggbnVsbC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheS48c3RyaW5nPn0gQSBzaW5nbGUgcmdiKC4uLikgdmFsdWUgb3IgYXJyYXkgb2YgcmdiKC4uLilcbiAqICAgICB2YWx1ZXMgdG8gY29udmVydC5cbiAqIEByZXR1cm4ge3N0cmluZ3xBcnJheS48c3RyaW5nPn0gVGhlIGNvbnZlcnRlZCB2YWx1ZSBvciB2YWx1ZXMuXG4gKi9cbmxpYi5jb2xvcnMucmdiVG9IZXggPSBmdW5jdGlvbihhcmcpIHtcbiAgZnVuY3Rpb24gY29udmVydChyZ2IpIHtcbiAgICB2YXIgYXJ5ID0gbGliLmNvbG9ycy5jcmFja1JHQihyZ2IpO1xuICAgIGlmICghYXJ5KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gKFxuICAgICAgJyMnICtcbiAgICAgIGxpYi5mLnpwYWQoXG4gICAgICAgIChcbiAgICAgICAgICAocGFyc2VJbnQoYXJ5WzBdKSA8PCAxNikgfFxuICAgICAgICAgIChwYXJzZUludChhcnlbMV0pIDw8IDgpIHxcbiAgICAgICAgICAocGFyc2VJbnQoYXJ5WzJdKSA8PCAwKVxuICAgICAgICApLnRvU3RyaW5nKDE2KSxcbiAgICAgICAgNixcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgaWYgKGFyZyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ1tpXSA9IGNvbnZlcnQoYXJnW2ldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYXJnID0gY29udmVydChhcmcpO1xuICB9XG5cbiAgcmV0dXJuIGFyZztcbn07XG5cbi8qKlxuICogVGFrZSBhbnkgdmFsaWQgY3NzIGNvbG9yIGRlZmluaXRpb24gYW5kIHR1cm4gaXQgaW50byBhbiByZ2Igb3IgcmdiYSB2YWx1ZS5cbiAqXG4gKiBSZXR1cm5zIG51bGwgaWYgdGhlIHZhbHVlIGNvdWxkIG5vdCBiZSBub3JtYWxpemVkLlxuICovXG5saWIuY29sb3JzLm5vcm1hbGl6ZUNTUyA9IGZ1bmN0aW9uKGRlZikge1xuICBpZiAoZGVmLnN0YXJ0c1dpdGgoJyMnKSkgcmV0dXJuIGxpYi5jb2xvcnMuaGV4VG9SR0IoZGVmKTtcblxuICBpZiAobGliLmNvbG9ycy5yZV8ucmdieC50ZXN0KGRlZikpIHJldHVybiBkZWY7XG5cbiAgcmV0dXJuIGxpYi5jb2xvcnMubmFtZVRvUkdCKGRlZik7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSAzIG9yIDQgZWxlbWVudCBhcnJheSBpbnRvIGFuIHJnYmEoLi4uKSBzdHJpbmcuXG4gKi9cbmxpYi5jb2xvcnMuYXJyYXlUb1JHQkEgPSBmdW5jdGlvbihhcnkpIHtcbiAgdmFyIGFscGhhID0gYXJ5Lmxlbmd0aCA+IDMgPyBhcnlbM10gOiAxO1xuICByZXR1cm4gJ3JnYmEoJyArIGFyeVswXSArICcsICcgKyBhcnlbMV0gKyAnLCAnICsgYXJ5WzJdICsgJywgJyArIGFscGhhICsgJyknO1xufTtcblxuLyoqXG4gKiBPdmVyd3JpdGUgdGhlIGFscGhhIGNoYW5uZWwgb2YgYW4gcmdiL3JnYmEgY29sb3IuXG4gKi9cbmxpYi5jb2xvcnMuc2V0QWxwaGEgPSBmdW5jdGlvbihyZ2IsIGFscGhhKSB7XG4gIHZhciBhcnkgPSBsaWIuY29sb3JzLmNyYWNrUkdCKHJnYik7XG4gIGFyeVszXSA9IGFscGhhO1xuICByZXR1cm4gbGliLmNvbG9ycy5hcnJheVRvUkdCQShhcnkpO1xufTtcblxuLyoqXG4gKiBNaXggYSBwZXJjZW50YWdlIG9mIGEgdGludCBjb2xvciBpbnRvIGEgYmFzZSBjb2xvci5cbiAqL1xubGliLmNvbG9ycy5taXggPSBmdW5jdGlvbihiYXNlLCB0aW50LCBwZXJjZW50KSB7XG4gIHZhciBhcnkxID0gbGliLmNvbG9ycy5jcmFja1JHQihiYXNlKTtcbiAgdmFyIGFyeTIgPSBsaWIuY29sb3JzLmNyYWNrUkdCKHRpbnQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgdmFyIGRpZmYgPSBhcnkyW2ldIC0gYXJ5MVtpXTtcbiAgICBhcnkxW2ldID0gTWF0aC5yb3VuZChwYXJzZUludChhcnkxW2ldKSArIGRpZmYgKiBwZXJjZW50KTtcbiAgfVxuXG4gIHJldHVybiBsaWIuY29sb3JzLmFycmF5VG9SR0JBKGFyeTEpO1xufTtcblxuLyoqXG4gKiBTcGxpdCBhbiByZ2IvcmdiYSBjb2xvciBpbnRvIGFuIGFycmF5IG9mIGl0cyBjb21wb25lbnRzLlxuICpcbiAqIE9uIHN1Y2Nlc3MsIGEgNCBlbGVtZW50IGFycmF5IHdpbGwgYmUgcmV0dXJuZWQuICBGb3IgcmdiIHZhbHVlcywgdGhlIGFscGhhXG4gKiB3aWxsIGJlIHNldCB0byAxLlxuICovXG5saWIuY29sb3JzLmNyYWNrUkdCID0gZnVuY3Rpb24oY29sb3IpIHtcbiAgaWYgKGNvbG9yLnN0YXJ0c1dpdGgoJ3JnYmEnKSkge1xuICAgIHZhciBhcnkgPSBjb2xvci5tYXRjaChsaWIuY29sb3JzLnJlXy5yZ2JhKTtcbiAgICBpZiAoYXJ5KSB7XG4gICAgICBhcnkuc2hpZnQoKTtcbiAgICAgIHJldHVybiBhcnk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBhcnkgPSBjb2xvci5tYXRjaChsaWIuY29sb3JzLnJlXy5yZ2IpO1xuICAgIGlmIChhcnkpIHtcbiAgICAgIGFyeS5zaGlmdCgpO1xuICAgICAgYXJ5LnB1c2goJzEnKTtcbiAgICAgIHJldHVybiBhcnk7XG4gICAgfVxuICB9XG5cbiAgY29uc29sZS5lcnJvcihcIkNvdWxkbid0IGNyYWNrOiBcIiArIGNvbG9yKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYW4gWDExIGNvbG9yIG5hbWUgaW50byBhIENTUyByZ2IoLi4uKSB2YWx1ZS5cbiAqXG4gKiBOYW1lcyBhcmUgc3RyaXBwZWQgb2Ygc3BhY2VzIGFuZCBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlLiAgSWYgdGhlIG5hbWUgaXNcbiAqIHVua25vd24sIG51bGwgaXMgcmV0dXJuZWQuXG4gKlxuICogVGhpcyBsaXN0IG9mIGNvbG9yIG5hbWUgdG8gUkdCIG1hcHBpbmcgaXMgZGVyaXZlZCBmcm9tIHRoZSBzdG9jayBYMTFcbiAqIHJnYi50eHQgZmlsZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgY29sb3IgbmFtZSB0byBjb252ZXJ0LlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgY29ycmVzcG9uZGluZyBDU1MgcmdiKC4uLikgdmFsdWUuXG4gKi9cbmxpYi5jb2xvcnMubmFtZVRvUkdCID0gZnVuY3Rpb24obmFtZSkge1xuICBpZiAobmFtZSBpbiBsaWIuY29sb3JzLmNvbG9yTmFtZXMpIHJldHVybiBsaWIuY29sb3JzLmNvbG9yTmFtZXNbbmFtZV07XG5cbiAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgaWYgKG5hbWUgaW4gbGliLmNvbG9ycy5jb2xvck5hbWVzKSByZXR1cm4gbGliLmNvbG9ycy5jb2xvck5hbWVzW25hbWVdO1xuXG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1xccysvZywgJycpO1xuICBpZiAobmFtZSBpbiBsaWIuY29sb3JzLmNvbG9yTmFtZXMpIHJldHVybiBsaWIuY29sb3JzLmNvbG9yTmFtZXNbbmFtZV07XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIFRoZSBzdG9jayBjb2xvciBwYWxldHRlLlxuICovXG5saWIuY29sb3JzLnN0b2NrQ29sb3JQYWxldHRlID0gbGliLmNvbG9ycy5oZXhUb1JHQihbXG4gIC8vIFRoZSBcIkFOU0kgMTZcIi4uLlxuICAnIzAwMDAwMCcsXG4gICcjQ0MwMDAwJyxcbiAgJyM0RTlBMDYnLFxuICAnI0M0QTAwMCcsXG4gICcjMzQ2NUE0JyxcbiAgJyM3NTUwN0InLFxuICAnIzA2OTg5QScsXG4gICcjRDNEN0NGJyxcbiAgJyM1NTU3NTMnLFxuICAnI0VGMjkyOScsXG4gICcjMDBCQTEzJyxcbiAgJyNGQ0U5NEYnLFxuICAnIzcyOUZDRicsXG4gICcjRjIwMENCJyxcbiAgJyMwMEI1QkQnLFxuICAnI0VFRUVFQycsXG5cbiAgLy8gVGhlIDZ4NiBjb2xvciBjdWJlcy4uLlxuICAnIzAwMDAwMCcsXG4gICcjMDAwMDVGJyxcbiAgJyMwMDAwODcnLFxuICAnIzAwMDBBRicsXG4gICcjMDAwMEQ3JyxcbiAgJyMwMDAwRkYnLFxuICAnIzAwNUYwMCcsXG4gICcjMDA1RjVGJyxcbiAgJyMwMDVGODcnLFxuICAnIzAwNUZBRicsXG4gICcjMDA1RkQ3JyxcbiAgJyMwMDVGRkYnLFxuICAnIzAwODcwMCcsXG4gICcjMDA4NzVGJyxcbiAgJyMwMDg3ODcnLFxuICAnIzAwODdBRicsXG4gICcjMDA4N0Q3JyxcbiAgJyMwMDg3RkYnLFxuICAnIzAwQUYwMCcsXG4gICcjMDBBRjVGJyxcbiAgJyMwMEFGODcnLFxuICAnIzAwQUZBRicsXG4gICcjMDBBRkQ3JyxcbiAgJyMwMEFGRkYnLFxuICAnIzAwRDcwMCcsXG4gICcjMDBENzVGJyxcbiAgJyMwMEQ3ODcnLFxuICAnIzAwRDdBRicsXG4gICcjMDBEN0Q3JyxcbiAgJyMwMEQ3RkYnLFxuICAnIzAwRkYwMCcsXG4gICcjMDBGRjVGJyxcbiAgJyMwMEZGODcnLFxuICAnIzAwRkZBRicsXG4gICcjMDBGRkQ3JyxcbiAgJyMwMEZGRkYnLFxuXG4gICcjNUYwMDAwJyxcbiAgJyM1RjAwNUYnLFxuICAnIzVGMDA4NycsXG4gICcjNUYwMEFGJyxcbiAgJyM1RjAwRDcnLFxuICAnIzVGMDBGRicsXG4gICcjNUY1RjAwJyxcbiAgJyM1RjVGNUYnLFxuICAnIzVGNUY4NycsXG4gICcjNUY1RkFGJyxcbiAgJyM1RjVGRDcnLFxuICAnIzVGNUZGRicsXG4gICcjNUY4NzAwJyxcbiAgJyM1Rjg3NUYnLFxuICAnIzVGODc4NycsXG4gICcjNUY4N0FGJyxcbiAgJyM1Rjg3RDcnLFxuICAnIzVGODdGRicsXG4gICcjNUZBRjAwJyxcbiAgJyM1RkFGNUYnLFxuICAnIzVGQUY4NycsXG4gICcjNUZBRkFGJyxcbiAgJyM1RkFGRDcnLFxuICAnIzVGQUZGRicsXG4gICcjNUZENzAwJyxcbiAgJyM1RkQ3NUYnLFxuICAnIzVGRDc4NycsXG4gICcjNUZEN0FGJyxcbiAgJyM1RkQ3RDcnLFxuICAnIzVGRDdGRicsXG4gICcjNUZGRjAwJyxcbiAgJyM1RkZGNUYnLFxuICAnIzVGRkY4NycsXG4gICcjNUZGRkFGJyxcbiAgJyM1RkZGRDcnLFxuICAnIzVGRkZGRicsXG5cbiAgJyM4NzAwMDAnLFxuICAnIzg3MDA1RicsXG4gICcjODcwMDg3JyxcbiAgJyM4NzAwQUYnLFxuICAnIzg3MDBENycsXG4gICcjODcwMEZGJyxcbiAgJyM4NzVGMDAnLFxuICAnIzg3NUY1RicsXG4gICcjODc1Rjg3JyxcbiAgJyM4NzVGQUYnLFxuICAnIzg3NUZENycsXG4gICcjODc1RkZGJyxcbiAgJyM4Nzg3MDAnLFxuICAnIzg3ODc1RicsXG4gICcjODc4Nzg3JyxcbiAgJyM4Nzg3QUYnLFxuICAnIzg3ODdENycsXG4gICcjODc4N0ZGJyxcbiAgJyM4N0FGMDAnLFxuICAnIzg3QUY1RicsXG4gICcjODdBRjg3JyxcbiAgJyM4N0FGQUYnLFxuICAnIzg3QUZENycsXG4gICcjODdBRkZGJyxcbiAgJyM4N0Q3MDAnLFxuICAnIzg3RDc1RicsXG4gICcjODdENzg3JyxcbiAgJyM4N0Q3QUYnLFxuICAnIzg3RDdENycsXG4gICcjODdEN0ZGJyxcbiAgJyM4N0ZGMDAnLFxuICAnIzg3RkY1RicsXG4gICcjODdGRjg3JyxcbiAgJyM4N0ZGQUYnLFxuICAnIzg3RkZENycsXG4gICcjODdGRkZGJyxcblxuICAnI0FGMDAwMCcsXG4gICcjQUYwMDVGJyxcbiAgJyNBRjAwODcnLFxuICAnI0FGMDBBRicsXG4gICcjQUYwMEQ3JyxcbiAgJyNBRjAwRkYnLFxuICAnI0FGNUYwMCcsXG4gICcjQUY1RjVGJyxcbiAgJyNBRjVGODcnLFxuICAnI0FGNUZBRicsXG4gICcjQUY1RkQ3JyxcbiAgJyNBRjVGRkYnLFxuICAnI0FGODcwMCcsXG4gICcjQUY4NzVGJyxcbiAgJyNBRjg3ODcnLFxuICAnI0FGODdBRicsXG4gICcjQUY4N0Q3JyxcbiAgJyNBRjg3RkYnLFxuICAnI0FGQUYwMCcsXG4gICcjQUZBRjVGJyxcbiAgJyNBRkFGODcnLFxuICAnI0FGQUZBRicsXG4gICcjQUZBRkQ3JyxcbiAgJyNBRkFGRkYnLFxuICAnI0FGRDcwMCcsXG4gICcjQUZENzVGJyxcbiAgJyNBRkQ3ODcnLFxuICAnI0FGRDdBRicsXG4gICcjQUZEN0Q3JyxcbiAgJyNBRkQ3RkYnLFxuICAnI0FGRkYwMCcsXG4gICcjQUZGRjVGJyxcbiAgJyNBRkZGODcnLFxuICAnI0FGRkZBRicsXG4gICcjQUZGRkQ3JyxcbiAgJyNBRkZGRkYnLFxuXG4gICcjRDcwMDAwJyxcbiAgJyNENzAwNUYnLFxuICAnI0Q3MDA4NycsXG4gICcjRDcwMEFGJyxcbiAgJyNENzAwRDcnLFxuICAnI0Q3MDBGRicsXG4gICcjRDc1RjAwJyxcbiAgJyNENzVGNUYnLFxuICAnI0Q3NUY4NycsXG4gICcjRDc1RkFGJyxcbiAgJyNENzVGRDcnLFxuICAnI0Q3NUZGRicsXG4gICcjRDc4NzAwJyxcbiAgJyNENzg3NUYnLFxuICAnI0Q3ODc4NycsXG4gICcjRDc4N0FGJyxcbiAgJyNENzg3RDcnLFxuICAnI0Q3ODdGRicsXG4gICcjRDdBRjAwJyxcbiAgJyNEN0FGNUYnLFxuICAnI0Q3QUY4NycsXG4gICcjRDdBRkFGJyxcbiAgJyNEN0FGRDcnLFxuICAnI0Q3QUZGRicsXG4gICcjRDdENzAwJyxcbiAgJyNEN0Q3NUYnLFxuICAnI0Q3RDc4NycsXG4gICcjRDdEN0FGJyxcbiAgJyNEN0Q3RDcnLFxuICAnI0Q3RDdGRicsXG4gICcjRDdGRjAwJyxcbiAgJyNEN0ZGNUYnLFxuICAnI0Q3RkY4NycsXG4gICcjRDdGRkFGJyxcbiAgJyNEN0ZGRDcnLFxuICAnI0Q3RkZGRicsXG5cbiAgJyNGRjAwMDAnLFxuICAnI0ZGMDA1RicsXG4gICcjRkYwMDg3JyxcbiAgJyNGRjAwQUYnLFxuICAnI0ZGMDBENycsXG4gICcjRkYwMEZGJyxcbiAgJyNGRjVGMDAnLFxuICAnI0ZGNUY1RicsXG4gICcjRkY1Rjg3JyxcbiAgJyNGRjVGQUYnLFxuICAnI0ZGNUZENycsXG4gICcjRkY1RkZGJyxcbiAgJyNGRjg3MDAnLFxuICAnI0ZGODc1RicsXG4gICcjRkY4Nzg3JyxcbiAgJyNGRjg3QUYnLFxuICAnI0ZGODdENycsXG4gICcjRkY4N0ZGJyxcbiAgJyNGRkFGMDAnLFxuICAnI0ZGQUY1RicsXG4gICcjRkZBRjg3JyxcbiAgJyNGRkFGQUYnLFxuICAnI0ZGQUZENycsXG4gICcjRkZBRkZGJyxcbiAgJyNGRkQ3MDAnLFxuICAnI0ZGRDc1RicsXG4gICcjRkZENzg3JyxcbiAgJyNGRkQ3QUYnLFxuICAnI0ZGRDdENycsXG4gICcjRkZEN0ZGJyxcbiAgJyNGRkZGMDAnLFxuICAnI0ZGRkY1RicsXG4gICcjRkZGRjg3JyxcbiAgJyNGRkZGQUYnLFxuICAnI0ZGRkZENycsXG4gICcjRkZGRkZGJyxcblxuICAvLyBUaGUgZ3JleXNjYWxlIHJhbXAuLi5cbiAgJyMwODA4MDgnLFxuICAnIzEyMTIxMicsXG4gICcjMUMxQzFDJyxcbiAgJyMyNjI2MjYnLFxuICAnIzMwMzAzMCcsXG4gICcjM0EzQTNBJyxcbiAgJyM0NDQ0NDQnLFxuICAnIzRFNEU0RScsXG4gICcjNTg1ODU4JyxcbiAgJyM2MjYyNjInLFxuICAnIzZDNkM2QycsXG4gICcjNzY3Njc2JyxcbiAgJyM4MDgwODAnLFxuICAnIzhBOEE4QScsXG4gICcjOTQ5NDk0JyxcbiAgJyM5RTlFOUUnLFxuICAnI0E4QThBOCcsXG4gICcjQjJCMkIyJyxcbiAgJyNCQ0JDQkMnLFxuICAnI0M2QzZDNicsXG4gICcjRDBEMEQwJyxcbiAgJyNEQURBREEnLFxuICAnI0U0RTRFNCcsXG4gICcjRUVFRUVFJyxcbl0pO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50IGNvbG9yIHBhbGV0dGUsIHBvc3NpYmx5IHdpdGggdXNlciBjaGFuZ2VzLlxuICovXG5saWIuY29sb3JzLmNvbG9yUGFsZXR0ZSA9IGxpYi5jb2xvcnMuc3RvY2tDb2xvclBhbGV0dGU7XG5cbi8qKlxuICogTmFtZWQgY29sb3JzIGFjY29yZGluZyB0byB0aGUgc3RvY2sgWDExIHJnYi50eHQgZmlsZS5cbiAqL1xubGliLmNvbG9ycy5jb2xvck5hbWVzID0ge1xuICBhbGljZWJsdWU6ICdyZ2IoMjQwLCAyNDgsIDI1NSknLFxuICBhbnRpcXVld2hpdGU6ICdyZ2IoMjUwLCAyMzUsIDIxNSknLFxuICBhbnRpcXVld2hpdGUxOiAncmdiKDI1NSwgMjM5LCAyMTkpJyxcbiAgYW50aXF1ZXdoaXRlMjogJ3JnYigyMzgsIDIyMywgMjA0KScsXG4gIGFudGlxdWV3aGl0ZTM6ICdyZ2IoMjA1LCAxOTIsIDE3NiknLFxuICBhbnRpcXVld2hpdGU0OiAncmdiKDEzOSwgMTMxLCAxMjApJyxcbiAgYXF1YW1hcmluZTogJ3JnYigxMjcsIDI1NSwgMjEyKScsXG4gIGFxdWFtYXJpbmUxOiAncmdiKDEyNywgMjU1LCAyMTIpJyxcbiAgYXF1YW1hcmluZTI6ICdyZ2IoMTE4LCAyMzgsIDE5OCknLFxuICBhcXVhbWFyaW5lMzogJ3JnYigxMDIsIDIwNSwgMTcwKScsXG4gIGFxdWFtYXJpbmU0OiAncmdiKDY5LCAxMzksIDExNiknLFxuICBhenVyZTogJ3JnYigyNDAsIDI1NSwgMjU1KScsXG4gIGF6dXJlMTogJ3JnYigyNDAsIDI1NSwgMjU1KScsXG4gIGF6dXJlMjogJ3JnYigyMjQsIDIzOCwgMjM4KScsXG4gIGF6dXJlMzogJ3JnYigxOTMsIDIwNSwgMjA1KScsXG4gIGF6dXJlNDogJ3JnYigxMzEsIDEzOSwgMTM5KScsXG4gIGJlaWdlOiAncmdiKDI0NSwgMjQ1LCAyMjApJyxcbiAgYmlzcXVlOiAncmdiKDI1NSwgMjI4LCAxOTYpJyxcbiAgYmlzcXVlMTogJ3JnYigyNTUsIDIyOCwgMTk2KScsXG4gIGJpc3F1ZTI6ICdyZ2IoMjM4LCAyMTMsIDE4MyknLFxuICBiaXNxdWUzOiAncmdiKDIwNSwgMTgzLCAxNTgpJyxcbiAgYmlzcXVlNDogJ3JnYigxMzksIDEyNSwgMTA3KScsXG4gIGJsYWNrOiAncmdiKDAsIDAsIDApJyxcbiAgYmxhbmNoZWRhbG1vbmQ6ICdyZ2IoMjU1LCAyMzUsIDIwNSknLFxuICBibHVlOiAncmdiKDAsIDAsIDI1NSknLFxuICBibHVlMTogJ3JnYigwLCAwLCAyNTUpJyxcbiAgYmx1ZTI6ICdyZ2IoMCwgMCwgMjM4KScsXG4gIGJsdWUzOiAncmdiKDAsIDAsIDIwNSknLFxuICBibHVlNDogJ3JnYigwLCAwLCAxMzkpJyxcbiAgYmx1ZXZpb2xldDogJ3JnYigxMzgsIDQzLCAyMjYpJyxcbiAgYnJvd246ICdyZ2IoMTY1LCA0MiwgNDIpJyxcbiAgYnJvd24xOiAncmdiKDI1NSwgNjQsIDY0KScsXG4gIGJyb3duMjogJ3JnYigyMzgsIDU5LCA1OSknLFxuICBicm93bjM6ICdyZ2IoMjA1LCA1MSwgNTEpJyxcbiAgYnJvd240OiAncmdiKDEzOSwgMzUsIDM1KScsXG4gIGJ1cmx5d29vZDogJ3JnYigyMjIsIDE4NCwgMTM1KScsXG4gIGJ1cmx5d29vZDE6ICdyZ2IoMjU1LCAyMTEsIDE1NSknLFxuICBidXJseXdvb2QyOiAncmdiKDIzOCwgMTk3LCAxNDUpJyxcbiAgYnVybHl3b29kMzogJ3JnYigyMDUsIDE3MCwgMTI1KScsXG4gIGJ1cmx5d29vZDQ6ICdyZ2IoMTM5LCAxMTUsIDg1KScsXG4gIGNhZGV0Ymx1ZTogJ3JnYig5NSwgMTU4LCAxNjApJyxcbiAgY2FkZXRibHVlMTogJ3JnYigxNTIsIDI0NSwgMjU1KScsXG4gIGNhZGV0Ymx1ZTI6ICdyZ2IoMTQyLCAyMjksIDIzOCknLFxuICBjYWRldGJsdWUzOiAncmdiKDEyMiwgMTk3LCAyMDUpJyxcbiAgY2FkZXRibHVlNDogJ3JnYig4MywgMTM0LCAxMzkpJyxcbiAgY2hhcnRyZXVzZTogJ3JnYigxMjcsIDI1NSwgMCknLFxuICBjaGFydHJldXNlMTogJ3JnYigxMjcsIDI1NSwgMCknLFxuICBjaGFydHJldXNlMjogJ3JnYigxMTgsIDIzOCwgMCknLFxuICBjaGFydHJldXNlMzogJ3JnYigxMDIsIDIwNSwgMCknLFxuICBjaGFydHJldXNlNDogJ3JnYig2OSwgMTM5LCAwKScsXG4gIGNob2NvbGF0ZTogJ3JnYigyMTAsIDEwNSwgMzApJyxcbiAgY2hvY29sYXRlMTogJ3JnYigyNTUsIDEyNywgMzYpJyxcbiAgY2hvY29sYXRlMjogJ3JnYigyMzgsIDExOCwgMzMpJyxcbiAgY2hvY29sYXRlMzogJ3JnYigyMDUsIDEwMiwgMjkpJyxcbiAgY2hvY29sYXRlNDogJ3JnYigxMzksIDY5LCAxOSknLFxuICBjb3JhbDogJ3JnYigyNTUsIDEyNywgODApJyxcbiAgY29yYWwxOiAncmdiKDI1NSwgMTE0LCA4NiknLFxuICBjb3JhbDI6ICdyZ2IoMjM4LCAxMDYsIDgwKScsXG4gIGNvcmFsMzogJ3JnYigyMDUsIDkxLCA2OSknLFxuICBjb3JhbDQ6ICdyZ2IoMTM5LCA2MiwgNDcpJyxcbiAgY29ybmZsb3dlcmJsdWU6ICdyZ2IoMTAwLCAxNDksIDIzNyknLFxuICBjb3Juc2lsazogJ3JnYigyNTUsIDI0OCwgMjIwKScsXG4gIGNvcm5zaWxrMTogJ3JnYigyNTUsIDI0OCwgMjIwKScsXG4gIGNvcm5zaWxrMjogJ3JnYigyMzgsIDIzMiwgMjA1KScsXG4gIGNvcm5zaWxrMzogJ3JnYigyMDUsIDIwMCwgMTc3KScsXG4gIGNvcm5zaWxrNDogJ3JnYigxMzksIDEzNiwgMTIwKScsXG4gIGN5YW46ICdyZ2IoMCwgMjU1LCAyNTUpJyxcbiAgY3lhbjE6ICdyZ2IoMCwgMjU1LCAyNTUpJyxcbiAgY3lhbjI6ICdyZ2IoMCwgMjM4LCAyMzgpJyxcbiAgY3lhbjM6ICdyZ2IoMCwgMjA1LCAyMDUpJyxcbiAgY3lhbjQ6ICdyZ2IoMCwgMTM5LCAxMzkpJyxcbiAgZGFya2JsdWU6ICdyZ2IoMCwgMCwgMTM5KScsXG4gIGRhcmtjeWFuOiAncmdiKDAsIDEzOSwgMTM5KScsXG4gIGRhcmtnb2xkZW5yb2Q6ICdyZ2IoMTg0LCAxMzQsIDExKScsXG4gIGRhcmtnb2xkZW5yb2QxOiAncmdiKDI1NSwgMTg1LCAxNSknLFxuICBkYXJrZ29sZGVucm9kMjogJ3JnYigyMzgsIDE3MywgMTQpJyxcbiAgZGFya2dvbGRlbnJvZDM6ICdyZ2IoMjA1LCAxNDksIDEyKScsXG4gIGRhcmtnb2xkZW5yb2Q0OiAncmdiKDEzOSwgMTAxLCA4KScsXG4gIGRhcmtncmF5OiAncmdiKDE2OSwgMTY5LCAxNjkpJyxcbiAgZGFya2dyZWVuOiAncmdiKDAsIDEwMCwgMCknLFxuICBkYXJrZ3JleTogJ3JnYigxNjksIDE2OSwgMTY5KScsXG4gIGRhcmtraGFraTogJ3JnYigxODksIDE4MywgMTA3KScsXG4gIGRhcmttYWdlbnRhOiAncmdiKDEzOSwgMCwgMTM5KScsXG4gIGRhcmtvbGl2ZWdyZWVuOiAncmdiKDg1LCAxMDcsIDQ3KScsXG4gIGRhcmtvbGl2ZWdyZWVuMTogJ3JnYigyMDIsIDI1NSwgMTEyKScsXG4gIGRhcmtvbGl2ZWdyZWVuMjogJ3JnYigxODgsIDIzOCwgMTA0KScsXG4gIGRhcmtvbGl2ZWdyZWVuMzogJ3JnYigxNjIsIDIwNSwgOTApJyxcbiAgZGFya29saXZlZ3JlZW40OiAncmdiKDExMCwgMTM5LCA2MSknLFxuICBkYXJrb3JhbmdlOiAncmdiKDI1NSwgMTQwLCAwKScsXG4gIGRhcmtvcmFuZ2UxOiAncmdiKDI1NSwgMTI3LCAwKScsXG4gIGRhcmtvcmFuZ2UyOiAncmdiKDIzOCwgMTE4LCAwKScsXG4gIGRhcmtvcmFuZ2UzOiAncmdiKDIwNSwgMTAyLCAwKScsXG4gIGRhcmtvcmFuZ2U0OiAncmdiKDEzOSwgNjksIDApJyxcbiAgZGFya29yY2hpZDogJ3JnYigxNTMsIDUwLCAyMDQpJyxcbiAgZGFya29yY2hpZDE6ICdyZ2IoMTkxLCA2MiwgMjU1KScsXG4gIGRhcmtvcmNoaWQyOiAncmdiKDE3OCwgNTgsIDIzOCknLFxuICBkYXJrb3JjaGlkMzogJ3JnYigxNTQsIDUwLCAyMDUpJyxcbiAgZGFya29yY2hpZDQ6ICdyZ2IoMTA0LCAzNCwgMTM5KScsXG4gIGRhcmtyZWQ6ICdyZ2IoMTM5LCAwLCAwKScsXG4gIGRhcmtzYWxtb246ICdyZ2IoMjMzLCAxNTAsIDEyMiknLFxuICBkYXJrc2VhZ3JlZW46ICdyZ2IoMTQzLCAxODgsIDE0MyknLFxuICBkYXJrc2VhZ3JlZW4xOiAncmdiKDE5MywgMjU1LCAxOTMpJyxcbiAgZGFya3NlYWdyZWVuMjogJ3JnYigxODAsIDIzOCwgMTgwKScsXG4gIGRhcmtzZWFncmVlbjM6ICdyZ2IoMTU1LCAyMDUsIDE1NSknLFxuICBkYXJrc2VhZ3JlZW40OiAncmdiKDEwNSwgMTM5LCAxMDUpJyxcbiAgZGFya3NsYXRlYmx1ZTogJ3JnYig3MiwgNjEsIDEzOSknLFxuICBkYXJrc2xhdGVncmF5OiAncmdiKDQ3LCA3OSwgNzkpJyxcbiAgZGFya3NsYXRlZ3JheTE6ICdyZ2IoMTUxLCAyNTUsIDI1NSknLFxuICBkYXJrc2xhdGVncmF5MjogJ3JnYigxNDEsIDIzOCwgMjM4KScsXG4gIGRhcmtzbGF0ZWdyYXkzOiAncmdiKDEyMSwgMjA1LCAyMDUpJyxcbiAgZGFya3NsYXRlZ3JheTQ6ICdyZ2IoODIsIDEzOSwgMTM5KScsXG4gIGRhcmtzbGF0ZWdyZXk6ICdyZ2IoNDcsIDc5LCA3OSknLFxuICBkYXJrdHVycXVvaXNlOiAncmdiKDAsIDIwNiwgMjA5KScsXG4gIGRhcmt2aW9sZXQ6ICdyZ2IoMTQ4LCAwLCAyMTEpJyxcbiAgZGViaWFucmVkOiAncmdiKDIxNSwgNywgODEpJyxcbiAgZGVlcHBpbms6ICdyZ2IoMjU1LCAyMCwgMTQ3KScsXG4gIGRlZXBwaW5rMTogJ3JnYigyNTUsIDIwLCAxNDcpJyxcbiAgZGVlcHBpbmsyOiAncmdiKDIzOCwgMTgsIDEzNyknLFxuICBkZWVwcGluazM6ICdyZ2IoMjA1LCAxNiwgMTE4KScsXG4gIGRlZXBwaW5rNDogJ3JnYigxMzksIDEwLCA4MCknLFxuICBkZWVwc2t5Ymx1ZTogJ3JnYigwLCAxOTEsIDI1NSknLFxuICBkZWVwc2t5Ymx1ZTE6ICdyZ2IoMCwgMTkxLCAyNTUpJyxcbiAgZGVlcHNreWJsdWUyOiAncmdiKDAsIDE3OCwgMjM4KScsXG4gIGRlZXBza3libHVlMzogJ3JnYigwLCAxNTQsIDIwNSknLFxuICBkZWVwc2t5Ymx1ZTQ6ICdyZ2IoMCwgMTA0LCAxMzkpJyxcbiAgZGltZ3JheTogJ3JnYigxMDUsIDEwNSwgMTA1KScsXG4gIGRpbWdyZXk6ICdyZ2IoMTA1LCAxMDUsIDEwNSknLFxuICBkb2RnZXJibHVlOiAncmdiKDMwLCAxNDQsIDI1NSknLFxuICBkb2RnZXJibHVlMTogJ3JnYigzMCwgMTQ0LCAyNTUpJyxcbiAgZG9kZ2VyYmx1ZTI6ICdyZ2IoMjgsIDEzNCwgMjM4KScsXG4gIGRvZGdlcmJsdWUzOiAncmdiKDI0LCAxMTYsIDIwNSknLFxuICBkb2RnZXJibHVlNDogJ3JnYigxNiwgNzgsIDEzOSknLFxuICBmaXJlYnJpY2s6ICdyZ2IoMTc4LCAzNCwgMzQpJyxcbiAgZmlyZWJyaWNrMTogJ3JnYigyNTUsIDQ4LCA0OCknLFxuICBmaXJlYnJpY2syOiAncmdiKDIzOCwgNDQsIDQ0KScsXG4gIGZpcmVicmljazM6ICdyZ2IoMjA1LCAzOCwgMzgpJyxcbiAgZmlyZWJyaWNrNDogJ3JnYigxMzksIDI2LCAyNiknLFxuICBmbG9yYWx3aGl0ZTogJ3JnYigyNTUsIDI1MCwgMjQwKScsXG4gIGZvcmVzdGdyZWVuOiAncmdiKDM0LCAxMzksIDM0KScsXG4gIGdhaW5zYm9ybzogJ3JnYigyMjAsIDIyMCwgMjIwKScsXG4gIGdob3N0d2hpdGU6ICdyZ2IoMjQ4LCAyNDgsIDI1NSknLFxuICBnb2xkOiAncmdiKDI1NSwgMjE1LCAwKScsXG4gIGdvbGQxOiAncmdiKDI1NSwgMjE1LCAwKScsXG4gIGdvbGQyOiAncmdiKDIzOCwgMjAxLCAwKScsXG4gIGdvbGQzOiAncmdiKDIwNSwgMTczLCAwKScsXG4gIGdvbGQ0OiAncmdiKDEzOSwgMTE3LCAwKScsXG4gIGdvbGRlbnJvZDogJ3JnYigyMTgsIDE2NSwgMzIpJyxcbiAgZ29sZGVucm9kMTogJ3JnYigyNTUsIDE5MywgMzcpJyxcbiAgZ29sZGVucm9kMjogJ3JnYigyMzgsIDE4MCwgMzQpJyxcbiAgZ29sZGVucm9kMzogJ3JnYigyMDUsIDE1NSwgMjkpJyxcbiAgZ29sZGVucm9kNDogJ3JnYigxMzksIDEwNSwgMjApJyxcbiAgZ3JheTogJ3JnYigxOTAsIDE5MCwgMTkwKScsXG4gIGdyYXkwOiAncmdiKDAsIDAsIDApJyxcbiAgZ3JheTE6ICdyZ2IoMywgMywgMyknLFxuICBncmF5MTA6ICdyZ2IoMjYsIDI2LCAyNiknLFxuICBncmF5MTAwOiAncmdiKDI1NSwgMjU1LCAyNTUpJyxcbiAgZ3JheTExOiAncmdiKDI4LCAyOCwgMjgpJyxcbiAgZ3JheTEyOiAncmdiKDMxLCAzMSwgMzEpJyxcbiAgZ3JheTEzOiAncmdiKDMzLCAzMywgMzMpJyxcbiAgZ3JheTE0OiAncmdiKDM2LCAzNiwgMzYpJyxcbiAgZ3JheTE1OiAncmdiKDM4LCAzOCwgMzgpJyxcbiAgZ3JheTE2OiAncmdiKDQxLCA0MSwgNDEpJyxcbiAgZ3JheTE3OiAncmdiKDQzLCA0MywgNDMpJyxcbiAgZ3JheTE4OiAncmdiKDQ2LCA0NiwgNDYpJyxcbiAgZ3JheTE5OiAncmdiKDQ4LCA0OCwgNDgpJyxcbiAgZ3JheTI6ICdyZ2IoNSwgNSwgNSknLFxuICBncmF5MjA6ICdyZ2IoNTEsIDUxLCA1MSknLFxuICBncmF5MjE6ICdyZ2IoNTQsIDU0LCA1NCknLFxuICBncmF5MjI6ICdyZ2IoNTYsIDU2LCA1NiknLFxuICBncmF5MjM6ICdyZ2IoNTksIDU5LCA1OSknLFxuICBncmF5MjQ6ICdyZ2IoNjEsIDYxLCA2MSknLFxuICBncmF5MjU6ICdyZ2IoNjQsIDY0LCA2NCknLFxuICBncmF5MjY6ICdyZ2IoNjYsIDY2LCA2NiknLFxuICBncmF5Mjc6ICdyZ2IoNjksIDY5LCA2OSknLFxuICBncmF5Mjg6ICdyZ2IoNzEsIDcxLCA3MSknLFxuICBncmF5Mjk6ICdyZ2IoNzQsIDc0LCA3NCknLFxuICBncmF5MzogJ3JnYig4LCA4LCA4KScsXG4gIGdyYXkzMDogJ3JnYig3NywgNzcsIDc3KScsXG4gIGdyYXkzMTogJ3JnYig3OSwgNzksIDc5KScsXG4gIGdyYXkzMjogJ3JnYig4MiwgODIsIDgyKScsXG4gIGdyYXkzMzogJ3JnYig4NCwgODQsIDg0KScsXG4gIGdyYXkzNDogJ3JnYig4NywgODcsIDg3KScsXG4gIGdyYXkzNTogJ3JnYig4OSwgODksIDg5KScsXG4gIGdyYXkzNjogJ3JnYig5MiwgOTIsIDkyKScsXG4gIGdyYXkzNzogJ3JnYig5NCwgOTQsIDk0KScsXG4gIGdyYXkzODogJ3JnYig5NywgOTcsIDk3KScsXG4gIGdyYXkzOTogJ3JnYig5OSwgOTksIDk5KScsXG4gIGdyYXk0OiAncmdiKDEwLCAxMCwgMTApJyxcbiAgZ3JheTQwOiAncmdiKDEwMiwgMTAyLCAxMDIpJyxcbiAgZ3JheTQxOiAncmdiKDEwNSwgMTA1LCAxMDUpJyxcbiAgZ3JheTQyOiAncmdiKDEwNywgMTA3LCAxMDcpJyxcbiAgZ3JheTQzOiAncmdiKDExMCwgMTEwLCAxMTApJyxcbiAgZ3JheTQ0OiAncmdiKDExMiwgMTEyLCAxMTIpJyxcbiAgZ3JheTQ1OiAncmdiKDExNSwgMTE1LCAxMTUpJyxcbiAgZ3JheTQ2OiAncmdiKDExNywgMTE3LCAxMTcpJyxcbiAgZ3JheTQ3OiAncmdiKDEyMCwgMTIwLCAxMjApJyxcbiAgZ3JheTQ4OiAncmdiKDEyMiwgMTIyLCAxMjIpJyxcbiAgZ3JheTQ5OiAncmdiKDEyNSwgMTI1LCAxMjUpJyxcbiAgZ3JheTU6ICdyZ2IoMTMsIDEzLCAxMyknLFxuICBncmF5NTA6ICdyZ2IoMTI3LCAxMjcsIDEyNyknLFxuICBncmF5NTE6ICdyZ2IoMTMwLCAxMzAsIDEzMCknLFxuICBncmF5NTI6ICdyZ2IoMTMzLCAxMzMsIDEzMyknLFxuICBncmF5NTM6ICdyZ2IoMTM1LCAxMzUsIDEzNSknLFxuICBncmF5NTQ6ICdyZ2IoMTM4LCAxMzgsIDEzOCknLFxuICBncmF5NTU6ICdyZ2IoMTQwLCAxNDAsIDE0MCknLFxuICBncmF5NTY6ICdyZ2IoMTQzLCAxNDMsIDE0MyknLFxuICBncmF5NTc6ICdyZ2IoMTQ1LCAxNDUsIDE0NSknLFxuICBncmF5NTg6ICdyZ2IoMTQ4LCAxNDgsIDE0OCknLFxuICBncmF5NTk6ICdyZ2IoMTUwLCAxNTAsIDE1MCknLFxuICBncmF5NjogJ3JnYigxNSwgMTUsIDE1KScsXG4gIGdyYXk2MDogJ3JnYigxNTMsIDE1MywgMTUzKScsXG4gIGdyYXk2MTogJ3JnYigxNTYsIDE1NiwgMTU2KScsXG4gIGdyYXk2MjogJ3JnYigxNTgsIDE1OCwgMTU4KScsXG4gIGdyYXk2MzogJ3JnYigxNjEsIDE2MSwgMTYxKScsXG4gIGdyYXk2NDogJ3JnYigxNjMsIDE2MywgMTYzKScsXG4gIGdyYXk2NTogJ3JnYigxNjYsIDE2NiwgMTY2KScsXG4gIGdyYXk2NjogJ3JnYigxNjgsIDE2OCwgMTY4KScsXG4gIGdyYXk2NzogJ3JnYigxNzEsIDE3MSwgMTcxKScsXG4gIGdyYXk2ODogJ3JnYigxNzMsIDE3MywgMTczKScsXG4gIGdyYXk2OTogJ3JnYigxNzYsIDE3NiwgMTc2KScsXG4gIGdyYXk3OiAncmdiKDE4LCAxOCwgMTgpJyxcbiAgZ3JheTcwOiAncmdiKDE3OSwgMTc5LCAxNzkpJyxcbiAgZ3JheTcxOiAncmdiKDE4MSwgMTgxLCAxODEpJyxcbiAgZ3JheTcyOiAncmdiKDE4NCwgMTg0LCAxODQpJyxcbiAgZ3JheTczOiAncmdiKDE4NiwgMTg2LCAxODYpJyxcbiAgZ3JheTc0OiAncmdiKDE4OSwgMTg5LCAxODkpJyxcbiAgZ3JheTc1OiAncmdiKDE5MSwgMTkxLCAxOTEpJyxcbiAgZ3JheTc2OiAncmdiKDE5NCwgMTk0LCAxOTQpJyxcbiAgZ3JheTc3OiAncmdiKDE5NiwgMTk2LCAxOTYpJyxcbiAgZ3JheTc4OiAncmdiKDE5OSwgMTk5LCAxOTkpJyxcbiAgZ3JheTc5OiAncmdiKDIwMSwgMjAxLCAyMDEpJyxcbiAgZ3JheTg6ICdyZ2IoMjAsIDIwLCAyMCknLFxuICBncmF5ODA6ICdyZ2IoMjA0LCAyMDQsIDIwNCknLFxuICBncmF5ODE6ICdyZ2IoMjA3LCAyMDcsIDIwNyknLFxuICBncmF5ODI6ICdyZ2IoMjA5LCAyMDksIDIwOSknLFxuICBncmF5ODM6ICdyZ2IoMjEyLCAyMTIsIDIxMiknLFxuICBncmF5ODQ6ICdyZ2IoMjE0LCAyMTQsIDIxNCknLFxuICBncmF5ODU6ICdyZ2IoMjE3LCAyMTcsIDIxNyknLFxuICBncmF5ODY6ICdyZ2IoMjE5LCAyMTksIDIxOSknLFxuICBncmF5ODc6ICdyZ2IoMjIyLCAyMjIsIDIyMiknLFxuICBncmF5ODg6ICdyZ2IoMjI0LCAyMjQsIDIyNCknLFxuICBncmF5ODk6ICdyZ2IoMjI3LCAyMjcsIDIyNyknLFxuICBncmF5OTogJ3JnYigyMywgMjMsIDIzKScsXG4gIGdyYXk5MDogJ3JnYigyMjksIDIyOSwgMjI5KScsXG4gIGdyYXk5MTogJ3JnYigyMzIsIDIzMiwgMjMyKScsXG4gIGdyYXk5MjogJ3JnYigyMzUsIDIzNSwgMjM1KScsXG4gIGdyYXk5MzogJ3JnYigyMzcsIDIzNywgMjM3KScsXG4gIGdyYXk5NDogJ3JnYigyNDAsIDI0MCwgMjQwKScsXG4gIGdyYXk5NTogJ3JnYigyNDIsIDI0MiwgMjQyKScsXG4gIGdyYXk5NjogJ3JnYigyNDUsIDI0NSwgMjQ1KScsXG4gIGdyYXk5NzogJ3JnYigyNDcsIDI0NywgMjQ3KScsXG4gIGdyYXk5ODogJ3JnYigyNTAsIDI1MCwgMjUwKScsXG4gIGdyYXk5OTogJ3JnYigyNTIsIDI1MiwgMjUyKScsXG4gIGdyZWVuOiAncmdiKDAsIDI1NSwgMCknLFxuICBncmVlbjE6ICdyZ2IoMCwgMjU1LCAwKScsXG4gIGdyZWVuMjogJ3JnYigwLCAyMzgsIDApJyxcbiAgZ3JlZW4zOiAncmdiKDAsIDIwNSwgMCknLFxuICBncmVlbjQ6ICdyZ2IoMCwgMTM5LCAwKScsXG4gIGdyZWVueWVsbG93OiAncmdiKDE3MywgMjU1LCA0NyknLFxuICBncmV5OiAncmdiKDE5MCwgMTkwLCAxOTApJyxcbiAgZ3JleTA6ICdyZ2IoMCwgMCwgMCknLFxuICBncmV5MTogJ3JnYigzLCAzLCAzKScsXG4gIGdyZXkxMDogJ3JnYigyNiwgMjYsIDI2KScsXG4gIGdyZXkxMDA6ICdyZ2IoMjU1LCAyNTUsIDI1NSknLFxuICBncmV5MTE6ICdyZ2IoMjgsIDI4LCAyOCknLFxuICBncmV5MTI6ICdyZ2IoMzEsIDMxLCAzMSknLFxuICBncmV5MTM6ICdyZ2IoMzMsIDMzLCAzMyknLFxuICBncmV5MTQ6ICdyZ2IoMzYsIDM2LCAzNiknLFxuICBncmV5MTU6ICdyZ2IoMzgsIDM4LCAzOCknLFxuICBncmV5MTY6ICdyZ2IoNDEsIDQxLCA0MSknLFxuICBncmV5MTc6ICdyZ2IoNDMsIDQzLCA0MyknLFxuICBncmV5MTg6ICdyZ2IoNDYsIDQ2LCA0NiknLFxuICBncmV5MTk6ICdyZ2IoNDgsIDQ4LCA0OCknLFxuICBncmV5MjogJ3JnYig1LCA1LCA1KScsXG4gIGdyZXkyMDogJ3JnYig1MSwgNTEsIDUxKScsXG4gIGdyZXkyMTogJ3JnYig1NCwgNTQsIDU0KScsXG4gIGdyZXkyMjogJ3JnYig1NiwgNTYsIDU2KScsXG4gIGdyZXkyMzogJ3JnYig1OSwgNTksIDU5KScsXG4gIGdyZXkyNDogJ3JnYig2MSwgNjEsIDYxKScsXG4gIGdyZXkyNTogJ3JnYig2NCwgNjQsIDY0KScsXG4gIGdyZXkyNjogJ3JnYig2NiwgNjYsIDY2KScsXG4gIGdyZXkyNzogJ3JnYig2OSwgNjksIDY5KScsXG4gIGdyZXkyODogJ3JnYig3MSwgNzEsIDcxKScsXG4gIGdyZXkyOTogJ3JnYig3NCwgNzQsIDc0KScsXG4gIGdyZXkzOiAncmdiKDgsIDgsIDgpJyxcbiAgZ3JleTMwOiAncmdiKDc3LCA3NywgNzcpJyxcbiAgZ3JleTMxOiAncmdiKDc5LCA3OSwgNzkpJyxcbiAgZ3JleTMyOiAncmdiKDgyLCA4MiwgODIpJyxcbiAgZ3JleTMzOiAncmdiKDg0LCA4NCwgODQpJyxcbiAgZ3JleTM0OiAncmdiKDg3LCA4NywgODcpJyxcbiAgZ3JleTM1OiAncmdiKDg5LCA4OSwgODkpJyxcbiAgZ3JleTM2OiAncmdiKDkyLCA5MiwgOTIpJyxcbiAgZ3JleTM3OiAncmdiKDk0LCA5NCwgOTQpJyxcbiAgZ3JleTM4OiAncmdiKDk3LCA5NywgOTcpJyxcbiAgZ3JleTM5OiAncmdiKDk5LCA5OSwgOTkpJyxcbiAgZ3JleTQ6ICdyZ2IoMTAsIDEwLCAxMCknLFxuICBncmV5NDA6ICdyZ2IoMTAyLCAxMDIsIDEwMiknLFxuICBncmV5NDE6ICdyZ2IoMTA1LCAxMDUsIDEwNSknLFxuICBncmV5NDI6ICdyZ2IoMTA3LCAxMDcsIDEwNyknLFxuICBncmV5NDM6ICdyZ2IoMTEwLCAxMTAsIDExMCknLFxuICBncmV5NDQ6ICdyZ2IoMTEyLCAxMTIsIDExMiknLFxuICBncmV5NDU6ICdyZ2IoMTE1LCAxMTUsIDExNSknLFxuICBncmV5NDY6ICdyZ2IoMTE3LCAxMTcsIDExNyknLFxuICBncmV5NDc6ICdyZ2IoMTIwLCAxMjAsIDEyMCknLFxuICBncmV5NDg6ICdyZ2IoMTIyLCAxMjIsIDEyMiknLFxuICBncmV5NDk6ICdyZ2IoMTI1LCAxMjUsIDEyNSknLFxuICBncmV5NTogJ3JnYigxMywgMTMsIDEzKScsXG4gIGdyZXk1MDogJ3JnYigxMjcsIDEyNywgMTI3KScsXG4gIGdyZXk1MTogJ3JnYigxMzAsIDEzMCwgMTMwKScsXG4gIGdyZXk1MjogJ3JnYigxMzMsIDEzMywgMTMzKScsXG4gIGdyZXk1MzogJ3JnYigxMzUsIDEzNSwgMTM1KScsXG4gIGdyZXk1NDogJ3JnYigxMzgsIDEzOCwgMTM4KScsXG4gIGdyZXk1NTogJ3JnYigxNDAsIDE0MCwgMTQwKScsXG4gIGdyZXk1NjogJ3JnYigxNDMsIDE0MywgMTQzKScsXG4gIGdyZXk1NzogJ3JnYigxNDUsIDE0NSwgMTQ1KScsXG4gIGdyZXk1ODogJ3JnYigxNDgsIDE0OCwgMTQ4KScsXG4gIGdyZXk1OTogJ3JnYigxNTAsIDE1MCwgMTUwKScsXG4gIGdyZXk2OiAncmdiKDE1LCAxNSwgMTUpJyxcbiAgZ3JleTYwOiAncmdiKDE1MywgMTUzLCAxNTMpJyxcbiAgZ3JleTYxOiAncmdiKDE1NiwgMTU2LCAxNTYpJyxcbiAgZ3JleTYyOiAncmdiKDE1OCwgMTU4LCAxNTgpJyxcbiAgZ3JleTYzOiAncmdiKDE2MSwgMTYxLCAxNjEpJyxcbiAgZ3JleTY0OiAncmdiKDE2MywgMTYzLCAxNjMpJyxcbiAgZ3JleTY1OiAncmdiKDE2NiwgMTY2LCAxNjYpJyxcbiAgZ3JleTY2OiAncmdiKDE2OCwgMTY4LCAxNjgpJyxcbiAgZ3JleTY3OiAncmdiKDE3MSwgMTcxLCAxNzEpJyxcbiAgZ3JleTY4OiAncmdiKDE3MywgMTczLCAxNzMpJyxcbiAgZ3JleTY5OiAncmdiKDE3NiwgMTc2LCAxNzYpJyxcbiAgZ3JleTc6ICdyZ2IoMTgsIDE4LCAxOCknLFxuICBncmV5NzA6ICdyZ2IoMTc5LCAxNzksIDE3OSknLFxuICBncmV5NzE6ICdyZ2IoMTgxLCAxODEsIDE4MSknLFxuICBncmV5NzI6ICdyZ2IoMTg0LCAxODQsIDE4NCknLFxuICBncmV5NzM6ICdyZ2IoMTg2LCAxODYsIDE4NiknLFxuICBncmV5NzQ6ICdyZ2IoMTg5LCAxODksIDE4OSknLFxuICBncmV5NzU6ICdyZ2IoMTkxLCAxOTEsIDE5MSknLFxuICBncmV5NzY6ICdyZ2IoMTk0LCAxOTQsIDE5NCknLFxuICBncmV5Nzc6ICdyZ2IoMTk2LCAxOTYsIDE5NiknLFxuICBncmV5Nzg6ICdyZ2IoMTk5LCAxOTksIDE5OSknLFxuICBncmV5Nzk6ICdyZ2IoMjAxLCAyMDEsIDIwMSknLFxuICBncmV5ODogJ3JnYigyMCwgMjAsIDIwKScsXG4gIGdyZXk4MDogJ3JnYigyMDQsIDIwNCwgMjA0KScsXG4gIGdyZXk4MTogJ3JnYigyMDcsIDIwNywgMjA3KScsXG4gIGdyZXk4MjogJ3JnYigyMDksIDIwOSwgMjA5KScsXG4gIGdyZXk4MzogJ3JnYigyMTIsIDIxMiwgMjEyKScsXG4gIGdyZXk4NDogJ3JnYigyMTQsIDIxNCwgMjE0KScsXG4gIGdyZXk4NTogJ3JnYigyMTcsIDIxNywgMjE3KScsXG4gIGdyZXk4NjogJ3JnYigyMTksIDIxOSwgMjE5KScsXG4gIGdyZXk4NzogJ3JnYigyMjIsIDIyMiwgMjIyKScsXG4gIGdyZXk4ODogJ3JnYigyMjQsIDIyNCwgMjI0KScsXG4gIGdyZXk4OTogJ3JnYigyMjcsIDIyNywgMjI3KScsXG4gIGdyZXk5OiAncmdiKDIzLCAyMywgMjMpJyxcbiAgZ3JleTkwOiAncmdiKDIyOSwgMjI5LCAyMjkpJyxcbiAgZ3JleTkxOiAncmdiKDIzMiwgMjMyLCAyMzIpJyxcbiAgZ3JleTkyOiAncmdiKDIzNSwgMjM1LCAyMzUpJyxcbiAgZ3JleTkzOiAncmdiKDIzNywgMjM3LCAyMzcpJyxcbiAgZ3JleTk0OiAncmdiKDI0MCwgMjQwLCAyNDApJyxcbiAgZ3JleTk1OiAncmdiKDI0MiwgMjQyLCAyNDIpJyxcbiAgZ3JleTk2OiAncmdiKDI0NSwgMjQ1LCAyNDUpJyxcbiAgZ3JleTk3OiAncmdiKDI0NywgMjQ3LCAyNDcpJyxcbiAgZ3JleTk4OiAncmdiKDI1MCwgMjUwLCAyNTApJyxcbiAgZ3JleTk5OiAncmdiKDI1MiwgMjUyLCAyNTIpJyxcbiAgaG9uZXlkZXc6ICdyZ2IoMjQwLCAyNTUsIDI0MCknLFxuICBob25leWRldzE6ICdyZ2IoMjQwLCAyNTUsIDI0MCknLFxuICBob25leWRldzI6ICdyZ2IoMjI0LCAyMzgsIDIyNCknLFxuICBob25leWRldzM6ICdyZ2IoMTkzLCAyMDUsIDE5MyknLFxuICBob25leWRldzQ6ICdyZ2IoMTMxLCAxMzksIDEzMSknLFxuICBob3RwaW5rOiAncmdiKDI1NSwgMTA1LCAxODApJyxcbiAgaG90cGluazE6ICdyZ2IoMjU1LCAxMTAsIDE4MCknLFxuICBob3RwaW5rMjogJ3JnYigyMzgsIDEwNiwgMTY3KScsXG4gIGhvdHBpbmszOiAncmdiKDIwNSwgOTYsIDE0NCknLFxuICBob3RwaW5rNDogJ3JnYigxMzksIDU4LCA5OCknLFxuICBpbmRpYW5yZWQ6ICdyZ2IoMjA1LCA5MiwgOTIpJyxcbiAgaW5kaWFucmVkMTogJ3JnYigyNTUsIDEwNiwgMTA2KScsXG4gIGluZGlhbnJlZDI6ICdyZ2IoMjM4LCA5OSwgOTkpJyxcbiAgaW5kaWFucmVkMzogJ3JnYigyMDUsIDg1LCA4NSknLFxuICBpbmRpYW5yZWQ0OiAncmdiKDEzOSwgNTgsIDU4KScsXG4gIGl2b3J5OiAncmdiKDI1NSwgMjU1LCAyNDApJyxcbiAgaXZvcnkxOiAncmdiKDI1NSwgMjU1LCAyNDApJyxcbiAgaXZvcnkyOiAncmdiKDIzOCwgMjM4LCAyMjQpJyxcbiAgaXZvcnkzOiAncmdiKDIwNSwgMjA1LCAxOTMpJyxcbiAgaXZvcnk0OiAncmdiKDEzOSwgMTM5LCAxMzEpJyxcbiAga2hha2k6ICdyZ2IoMjQwLCAyMzAsIDE0MCknLFxuICBraGFraTE6ICdyZ2IoMjU1LCAyNDYsIDE0MyknLFxuICBraGFraTI6ICdyZ2IoMjM4LCAyMzAsIDEzMyknLFxuICBraGFraTM6ICdyZ2IoMjA1LCAxOTgsIDExNSknLFxuICBraGFraTQ6ICdyZ2IoMTM5LCAxMzQsIDc4KScsXG4gIGxhdmVuZGVyOiAncmdiKDIzMCwgMjMwLCAyNTApJyxcbiAgbGF2ZW5kZXJibHVzaDogJ3JnYigyNTUsIDI0MCwgMjQ1KScsXG4gIGxhdmVuZGVyYmx1c2gxOiAncmdiKDI1NSwgMjQwLCAyNDUpJyxcbiAgbGF2ZW5kZXJibHVzaDI6ICdyZ2IoMjM4LCAyMjQsIDIyOSknLFxuICBsYXZlbmRlcmJsdXNoMzogJ3JnYigyMDUsIDE5MywgMTk3KScsXG4gIGxhdmVuZGVyYmx1c2g0OiAncmdiKDEzOSwgMTMxLCAxMzQpJyxcbiAgbGF3bmdyZWVuOiAncmdiKDEyNCwgMjUyLCAwKScsXG4gIGxlbW9uY2hpZmZvbjogJ3JnYigyNTUsIDI1MCwgMjA1KScsXG4gIGxlbW9uY2hpZmZvbjE6ICdyZ2IoMjU1LCAyNTAsIDIwNSknLFxuICBsZW1vbmNoaWZmb24yOiAncmdiKDIzOCwgMjMzLCAxOTEpJyxcbiAgbGVtb25jaGlmZm9uMzogJ3JnYigyMDUsIDIwMSwgMTY1KScsXG4gIGxlbW9uY2hpZmZvbjQ6ICdyZ2IoMTM5LCAxMzcsIDExMiknLFxuICBsaWdodGJsdWU6ICdyZ2IoMTczLCAyMTYsIDIzMCknLFxuICBsaWdodGJsdWUxOiAncmdiKDE5MSwgMjM5LCAyNTUpJyxcbiAgbGlnaHRibHVlMjogJ3JnYigxNzgsIDIyMywgMjM4KScsXG4gIGxpZ2h0Ymx1ZTM6ICdyZ2IoMTU0LCAxOTIsIDIwNSknLFxuICBsaWdodGJsdWU0OiAncmdiKDEwNCwgMTMxLCAxMzkpJyxcbiAgbGlnaHRjb3JhbDogJ3JnYigyNDAsIDEyOCwgMTI4KScsXG4gIGxpZ2h0Y3lhbjogJ3JnYigyMjQsIDI1NSwgMjU1KScsXG4gIGxpZ2h0Y3lhbjE6ICdyZ2IoMjI0LCAyNTUsIDI1NSknLFxuICBsaWdodGN5YW4yOiAncmdiKDIwOSwgMjM4LCAyMzgpJyxcbiAgbGlnaHRjeWFuMzogJ3JnYigxODAsIDIwNSwgMjA1KScsXG4gIGxpZ2h0Y3lhbjQ6ICdyZ2IoMTIyLCAxMzksIDEzOSknLFxuICBsaWdodGdvbGRlbnJvZDogJ3JnYigyMzgsIDIyMSwgMTMwKScsXG4gIGxpZ2h0Z29sZGVucm9kMTogJ3JnYigyNTUsIDIzNiwgMTM5KScsXG4gIGxpZ2h0Z29sZGVucm9kMjogJ3JnYigyMzgsIDIyMCwgMTMwKScsXG4gIGxpZ2h0Z29sZGVucm9kMzogJ3JnYigyMDUsIDE5MCwgMTEyKScsXG4gIGxpZ2h0Z29sZGVucm9kNDogJ3JnYigxMzksIDEyOSwgNzYpJyxcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6ICdyZ2IoMjUwLCAyNTAsIDIxMCknLFxuICBsaWdodGdyYXk6ICdyZ2IoMjExLCAyMTEsIDIxMSknLFxuICBsaWdodGdyZWVuOiAncmdiKDE0NCwgMjM4LCAxNDQpJyxcbiAgbGlnaHRncmV5OiAncmdiKDIxMSwgMjExLCAyMTEpJyxcbiAgbGlnaHRwaW5rOiAncmdiKDI1NSwgMTgyLCAxOTMpJyxcbiAgbGlnaHRwaW5rMTogJ3JnYigyNTUsIDE3NCwgMTg1KScsXG4gIGxpZ2h0cGluazI6ICdyZ2IoMjM4LCAxNjIsIDE3MyknLFxuICBsaWdodHBpbmszOiAncmdiKDIwNSwgMTQwLCAxNDkpJyxcbiAgbGlnaHRwaW5rNDogJ3JnYigxMzksIDk1LCAxMDEpJyxcbiAgbGlnaHRzYWxtb246ICdyZ2IoMjU1LCAxNjAsIDEyMiknLFxuICBsaWdodHNhbG1vbjE6ICdyZ2IoMjU1LCAxNjAsIDEyMiknLFxuICBsaWdodHNhbG1vbjI6ICdyZ2IoMjM4LCAxNDksIDExNCknLFxuICBsaWdodHNhbG1vbjM6ICdyZ2IoMjA1LCAxMjksIDk4KScsXG4gIGxpZ2h0c2FsbW9uNDogJ3JnYigxMzksIDg3LCA2NiknLFxuICBsaWdodHNlYWdyZWVuOiAncmdiKDMyLCAxNzgsIDE3MCknLFxuICBsaWdodHNreWJsdWU6ICdyZ2IoMTM1LCAyMDYsIDI1MCknLFxuICBsaWdodHNreWJsdWUxOiAncmdiKDE3NiwgMjI2LCAyNTUpJyxcbiAgbGlnaHRza3libHVlMjogJ3JnYigxNjQsIDIxMSwgMjM4KScsXG4gIGxpZ2h0c2t5Ymx1ZTM6ICdyZ2IoMTQxLCAxODIsIDIwNSknLFxuICBsaWdodHNreWJsdWU0OiAncmdiKDk2LCAxMjMsIDEzOSknLFxuICBsaWdodHNsYXRlYmx1ZTogJ3JnYigxMzIsIDExMiwgMjU1KScsXG4gIGxpZ2h0c2xhdGVncmF5OiAncmdiKDExOSwgMTM2LCAxNTMpJyxcbiAgbGlnaHRzbGF0ZWdyZXk6ICdyZ2IoMTE5LCAxMzYsIDE1MyknLFxuICBsaWdodHN0ZWVsYmx1ZTogJ3JnYigxNzYsIDE5NiwgMjIyKScsXG4gIGxpZ2h0c3RlZWxibHVlMTogJ3JnYigyMDIsIDIyNSwgMjU1KScsXG4gIGxpZ2h0c3RlZWxibHVlMjogJ3JnYigxODgsIDIxMCwgMjM4KScsXG4gIGxpZ2h0c3RlZWxibHVlMzogJ3JnYigxNjIsIDE4MSwgMjA1KScsXG4gIGxpZ2h0c3RlZWxibHVlNDogJ3JnYigxMTAsIDEyMywgMTM5KScsXG4gIGxpZ2h0eWVsbG93OiAncmdiKDI1NSwgMjU1LCAyMjQpJyxcbiAgbGlnaHR5ZWxsb3cxOiAncmdiKDI1NSwgMjU1LCAyMjQpJyxcbiAgbGlnaHR5ZWxsb3cyOiAncmdiKDIzOCwgMjM4LCAyMDkpJyxcbiAgbGlnaHR5ZWxsb3czOiAncmdiKDIwNSwgMjA1LCAxODApJyxcbiAgbGlnaHR5ZWxsb3c0OiAncmdiKDEzOSwgMTM5LCAxMjIpJyxcbiAgbGltZWdyZWVuOiAncmdiKDUwLCAyMDUsIDUwKScsXG4gIGxpbmVuOiAncmdiKDI1MCwgMjQwLCAyMzApJyxcbiAgbWFnZW50YTogJ3JnYigyNTUsIDAsIDI1NSknLFxuICBtYWdlbnRhMTogJ3JnYigyNTUsIDAsIDI1NSknLFxuICBtYWdlbnRhMjogJ3JnYigyMzgsIDAsIDIzOCknLFxuICBtYWdlbnRhMzogJ3JnYigyMDUsIDAsIDIwNSknLFxuICBtYWdlbnRhNDogJ3JnYigxMzksIDAsIDEzOSknLFxuICBtYXJvb246ICdyZ2IoMTc2LCA0OCwgOTYpJyxcbiAgbWFyb29uMTogJ3JnYigyNTUsIDUyLCAxNzkpJyxcbiAgbWFyb29uMjogJ3JnYigyMzgsIDQ4LCAxNjcpJyxcbiAgbWFyb29uMzogJ3JnYigyMDUsIDQxLCAxNDQpJyxcbiAgbWFyb29uNDogJ3JnYigxMzksIDI4LCA5OCknLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAncmdiKDEwMiwgMjA1LCAxNzApJyxcbiAgbWVkaXVtYmx1ZTogJ3JnYigwLCAwLCAyMDUpJyxcbiAgbWVkaXVtb3JjaGlkOiAncmdiKDE4NiwgODUsIDIxMSknLFxuICBtZWRpdW1vcmNoaWQxOiAncmdiKDIyNCwgMTAyLCAyNTUpJyxcbiAgbWVkaXVtb3JjaGlkMjogJ3JnYigyMDksIDk1LCAyMzgpJyxcbiAgbWVkaXVtb3JjaGlkMzogJ3JnYigxODAsIDgyLCAyMDUpJyxcbiAgbWVkaXVtb3JjaGlkNDogJ3JnYigxMjIsIDU1LCAxMzkpJyxcbiAgbWVkaXVtcHVycGxlOiAncmdiKDE0NywgMTEyLCAyMTkpJyxcbiAgbWVkaXVtcHVycGxlMTogJ3JnYigxNzEsIDEzMCwgMjU1KScsXG4gIG1lZGl1bXB1cnBsZTI6ICdyZ2IoMTU5LCAxMjEsIDIzOCknLFxuICBtZWRpdW1wdXJwbGUzOiAncmdiKDEzNywgMTA0LCAyMDUpJyxcbiAgbWVkaXVtcHVycGxlNDogJ3JnYig5MywgNzEsIDEzOSknLFxuICBtZWRpdW1zZWFncmVlbjogJ3JnYig2MCwgMTc5LCAxMTMpJyxcbiAgbWVkaXVtc2xhdGVibHVlOiAncmdiKDEyMywgMTA0LCAyMzgpJyxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46ICdyZ2IoMCwgMjUwLCAxNTQpJyxcbiAgbWVkaXVtdHVycXVvaXNlOiAncmdiKDcyLCAyMDksIDIwNCknLFxuICBtZWRpdW12aW9sZXRyZWQ6ICdyZ2IoMTk5LCAyMSwgMTMzKScsXG4gIG1pZG5pZ2h0Ymx1ZTogJ3JnYigyNSwgMjUsIDExMiknLFxuICBtaW50Y3JlYW06ICdyZ2IoMjQ1LCAyNTUsIDI1MCknLFxuICBtaXN0eXJvc2U6ICdyZ2IoMjU1LCAyMjgsIDIyNSknLFxuICBtaXN0eXJvc2UxOiAncmdiKDI1NSwgMjI4LCAyMjUpJyxcbiAgbWlzdHlyb3NlMjogJ3JnYigyMzgsIDIxMywgMjEwKScsXG4gIG1pc3R5cm9zZTM6ICdyZ2IoMjA1LCAxODMsIDE4MSknLFxuICBtaXN0eXJvc2U0OiAncmdiKDEzOSwgMTI1LCAxMjMpJyxcbiAgbW9jY2FzaW46ICdyZ2IoMjU1LCAyMjgsIDE4MSknLFxuICBuYXZham93aGl0ZTogJ3JnYigyNTUsIDIyMiwgMTczKScsXG4gIG5hdmFqb3doaXRlMTogJ3JnYigyNTUsIDIyMiwgMTczKScsXG4gIG5hdmFqb3doaXRlMjogJ3JnYigyMzgsIDIwNywgMTYxKScsXG4gIG5hdmFqb3doaXRlMzogJ3JnYigyMDUsIDE3OSwgMTM5KScsXG4gIG5hdmFqb3doaXRlNDogJ3JnYigxMzksIDEyMSwgOTQpJyxcbiAgbmF2eTogJ3JnYigwLCAwLCAxMjgpJyxcbiAgbmF2eWJsdWU6ICdyZ2IoMCwgMCwgMTI4KScsXG4gIG9sZGxhY2U6ICdyZ2IoMjUzLCAyNDUsIDIzMCknLFxuICBvbGl2ZWRyYWI6ICdyZ2IoMTA3LCAxNDIsIDM1KScsXG4gIG9saXZlZHJhYjE6ICdyZ2IoMTkyLCAyNTUsIDYyKScsXG4gIG9saXZlZHJhYjI6ICdyZ2IoMTc5LCAyMzgsIDU4KScsXG4gIG9saXZlZHJhYjM6ICdyZ2IoMTU0LCAyMDUsIDUwKScsXG4gIG9saXZlZHJhYjQ6ICdyZ2IoMTA1LCAxMzksIDM0KScsXG4gIG9yYW5nZTogJ3JnYigyNTUsIDE2NSwgMCknLFxuICBvcmFuZ2UxOiAncmdiKDI1NSwgMTY1LCAwKScsXG4gIG9yYW5nZTI6ICdyZ2IoMjM4LCAxNTQsIDApJyxcbiAgb3JhbmdlMzogJ3JnYigyMDUsIDEzMywgMCknLFxuICBvcmFuZ2U0OiAncmdiKDEzOSwgOTAsIDApJyxcbiAgb3JhbmdlcmVkOiAncmdiKDI1NSwgNjksIDApJyxcbiAgb3JhbmdlcmVkMTogJ3JnYigyNTUsIDY5LCAwKScsXG4gIG9yYW5nZXJlZDI6ICdyZ2IoMjM4LCA2NCwgMCknLFxuICBvcmFuZ2VyZWQzOiAncmdiKDIwNSwgNTUsIDApJyxcbiAgb3JhbmdlcmVkNDogJ3JnYigxMzksIDM3LCAwKScsXG4gIG9yY2hpZDogJ3JnYigyMTgsIDExMiwgMjE0KScsXG4gIG9yY2hpZDE6ICdyZ2IoMjU1LCAxMzEsIDI1MCknLFxuICBvcmNoaWQyOiAncmdiKDIzOCwgMTIyLCAyMzMpJyxcbiAgb3JjaGlkMzogJ3JnYigyMDUsIDEwNSwgMjAxKScsXG4gIG9yY2hpZDQ6ICdyZ2IoMTM5LCA3MSwgMTM3KScsXG4gIHBhbGVnb2xkZW5yb2Q6ICdyZ2IoMjM4LCAyMzIsIDE3MCknLFxuICBwYWxlZ3JlZW46ICdyZ2IoMTUyLCAyNTEsIDE1MiknLFxuICBwYWxlZ3JlZW4xOiAncmdiKDE1NCwgMjU1LCAxNTQpJyxcbiAgcGFsZWdyZWVuMjogJ3JnYigxNDQsIDIzOCwgMTQ0KScsXG4gIHBhbGVncmVlbjM6ICdyZ2IoMTI0LCAyMDUsIDEyNCknLFxuICBwYWxlZ3JlZW40OiAncmdiKDg0LCAxMzksIDg0KScsXG4gIHBhbGV0dXJxdW9pc2U6ICdyZ2IoMTc1LCAyMzgsIDIzOCknLFxuICBwYWxldHVycXVvaXNlMTogJ3JnYigxODcsIDI1NSwgMjU1KScsXG4gIHBhbGV0dXJxdW9pc2UyOiAncmdiKDE3NCwgMjM4LCAyMzgpJyxcbiAgcGFsZXR1cnF1b2lzZTM6ICdyZ2IoMTUwLCAyMDUsIDIwNSknLFxuICBwYWxldHVycXVvaXNlNDogJ3JnYigxMDIsIDEzOSwgMTM5KScsXG4gIHBhbGV2aW9sZXRyZWQ6ICdyZ2IoMjE5LCAxMTIsIDE0NyknLFxuICBwYWxldmlvbGV0cmVkMTogJ3JnYigyNTUsIDEzMCwgMTcxKScsXG4gIHBhbGV2aW9sZXRyZWQyOiAncmdiKDIzOCwgMTIxLCAxNTkpJyxcbiAgcGFsZXZpb2xldHJlZDM6ICdyZ2IoMjA1LCAxMDQsIDEzNyknLFxuICBwYWxldmlvbGV0cmVkNDogJ3JnYigxMzksIDcxLCA5MyknLFxuICBwYXBheWF3aGlwOiAncmdiKDI1NSwgMjM5LCAyMTMpJyxcbiAgcGVhY2hwdWZmOiAncmdiKDI1NSwgMjE4LCAxODUpJyxcbiAgcGVhY2hwdWZmMTogJ3JnYigyNTUsIDIxOCwgMTg1KScsXG4gIHBlYWNocHVmZjI6ICdyZ2IoMjM4LCAyMDMsIDE3MyknLFxuICBwZWFjaHB1ZmYzOiAncmdiKDIwNSwgMTc1LCAxNDkpJyxcbiAgcGVhY2hwdWZmNDogJ3JnYigxMzksIDExOSwgMTAxKScsXG4gIHBlcnU6ICdyZ2IoMjA1LCAxMzMsIDYzKScsXG4gIHBpbms6ICdyZ2IoMjU1LCAxOTIsIDIwMyknLFxuICBwaW5rMTogJ3JnYigyNTUsIDE4MSwgMTk3KScsXG4gIHBpbmsyOiAncmdiKDIzOCwgMTY5LCAxODQpJyxcbiAgcGluazM6ICdyZ2IoMjA1LCAxNDUsIDE1OCknLFxuICBwaW5rNDogJ3JnYigxMzksIDk5LCAxMDgpJyxcbiAgcGx1bTogJ3JnYigyMjEsIDE2MCwgMjIxKScsXG4gIHBsdW0xOiAncmdiKDI1NSwgMTg3LCAyNTUpJyxcbiAgcGx1bTI6ICdyZ2IoMjM4LCAxNzQsIDIzOCknLFxuICBwbHVtMzogJ3JnYigyMDUsIDE1MCwgMjA1KScsXG4gIHBsdW00OiAncmdiKDEzOSwgMTAyLCAxMzkpJyxcbiAgcG93ZGVyYmx1ZTogJ3JnYigxNzYsIDIyNCwgMjMwKScsXG4gIHB1cnBsZTogJ3JnYigxNjAsIDMyLCAyNDApJyxcbiAgcHVycGxlMTogJ3JnYigxNTUsIDQ4LCAyNTUpJyxcbiAgcHVycGxlMjogJ3JnYigxNDUsIDQ0LCAyMzgpJyxcbiAgcHVycGxlMzogJ3JnYigxMjUsIDM4LCAyMDUpJyxcbiAgcHVycGxlNDogJ3JnYig4NSwgMjYsIDEzOSknLFxuICByZWQ6ICdyZ2IoMjU1LCAwLCAwKScsXG4gIHJlZDE6ICdyZ2IoMjU1LCAwLCAwKScsXG4gIHJlZDI6ICdyZ2IoMjM4LCAwLCAwKScsXG4gIHJlZDM6ICdyZ2IoMjA1LCAwLCAwKScsXG4gIHJlZDQ6ICdyZ2IoMTM5LCAwLCAwKScsXG4gIHJvc3licm93bjogJ3JnYigxODgsIDE0MywgMTQzKScsXG4gIHJvc3licm93bjE6ICdyZ2IoMjU1LCAxOTMsIDE5MyknLFxuICByb3N5YnJvd24yOiAncmdiKDIzOCwgMTgwLCAxODApJyxcbiAgcm9zeWJyb3duMzogJ3JnYigyMDUsIDE1NSwgMTU1KScsXG4gIHJvc3licm93bjQ6ICdyZ2IoMTM5LCAxMDUsIDEwNSknLFxuICByb3lhbGJsdWU6ICdyZ2IoNjUsIDEwNSwgMjI1KScsXG4gIHJveWFsYmx1ZTE6ICdyZ2IoNzIsIDExOCwgMjU1KScsXG4gIHJveWFsYmx1ZTI6ICdyZ2IoNjcsIDExMCwgMjM4KScsXG4gIHJveWFsYmx1ZTM6ICdyZ2IoNTgsIDk1LCAyMDUpJyxcbiAgcm95YWxibHVlNDogJ3JnYigzOSwgNjQsIDEzOSknLFxuICBzYWRkbGVicm93bjogJ3JnYigxMzksIDY5LCAxOSknLFxuICBzYWxtb246ICdyZ2IoMjUwLCAxMjgsIDExNCknLFxuICBzYWxtb24xOiAncmdiKDI1NSwgMTQwLCAxMDUpJyxcbiAgc2FsbW9uMjogJ3JnYigyMzgsIDEzMCwgOTgpJyxcbiAgc2FsbW9uMzogJ3JnYigyMDUsIDExMiwgODQpJyxcbiAgc2FsbW9uNDogJ3JnYigxMzksIDc2LCA1NyknLFxuICBzYW5keWJyb3duOiAncmdiKDI0NCwgMTY0LCA5NiknLFxuICBzZWFncmVlbjogJ3JnYig0NiwgMTM5LCA4NyknLFxuICBzZWFncmVlbjE6ICdyZ2IoODQsIDI1NSwgMTU5KScsXG4gIHNlYWdyZWVuMjogJ3JnYig3OCwgMjM4LCAxNDgpJyxcbiAgc2VhZ3JlZW4zOiAncmdiKDY3LCAyMDUsIDEyOCknLFxuICBzZWFncmVlbjQ6ICdyZ2IoNDYsIDEzOSwgODcpJyxcbiAgc2Vhc2hlbGw6ICdyZ2IoMjU1LCAyNDUsIDIzOCknLFxuICBzZWFzaGVsbDE6ICdyZ2IoMjU1LCAyNDUsIDIzOCknLFxuICBzZWFzaGVsbDI6ICdyZ2IoMjM4LCAyMjksIDIyMiknLFxuICBzZWFzaGVsbDM6ICdyZ2IoMjA1LCAxOTcsIDE5MSknLFxuICBzZWFzaGVsbDQ6ICdyZ2IoMTM5LCAxMzQsIDEzMCknLFxuICBzaWVubmE6ICdyZ2IoMTYwLCA4MiwgNDUpJyxcbiAgc2llbm5hMTogJ3JnYigyNTUsIDEzMCwgNzEpJyxcbiAgc2llbm5hMjogJ3JnYigyMzgsIDEyMSwgNjYpJyxcbiAgc2llbm5hMzogJ3JnYigyMDUsIDEwNCwgNTcpJyxcbiAgc2llbm5hNDogJ3JnYigxMzksIDcxLCAzOCknLFxuICBza3libHVlOiAncmdiKDEzNSwgMjA2LCAyMzUpJyxcbiAgc2t5Ymx1ZTE6ICdyZ2IoMTM1LCAyMDYsIDI1NSknLFxuICBza3libHVlMjogJ3JnYigxMjYsIDE5MiwgMjM4KScsXG4gIHNreWJsdWUzOiAncmdiKDEwOCwgMTY2LCAyMDUpJyxcbiAgc2t5Ymx1ZTQ6ICdyZ2IoNzQsIDExMiwgMTM5KScsXG4gIHNsYXRlYmx1ZTogJ3JnYigxMDYsIDkwLCAyMDUpJyxcbiAgc2xhdGVibHVlMTogJ3JnYigxMzEsIDExMSwgMjU1KScsXG4gIHNsYXRlYmx1ZTI6ICdyZ2IoMTIyLCAxMDMsIDIzOCknLFxuICBzbGF0ZWJsdWUzOiAncmdiKDEwNSwgODksIDIwNSknLFxuICBzbGF0ZWJsdWU0OiAncmdiKDcxLCA2MCwgMTM5KScsXG4gIHNsYXRlZ3JheTogJ3JnYigxMTIsIDEyOCwgMTQ0KScsXG4gIHNsYXRlZ3JheTE6ICdyZ2IoMTk4LCAyMjYsIDI1NSknLFxuICBzbGF0ZWdyYXkyOiAncmdiKDE4NSwgMjExLCAyMzgpJyxcbiAgc2xhdGVncmF5MzogJ3JnYigxNTksIDE4MiwgMjA1KScsXG4gIHNsYXRlZ3JheTQ6ICdyZ2IoMTA4LCAxMjMsIDEzOSknLFxuICBzbGF0ZWdyZXk6ICdyZ2IoMTEyLCAxMjgsIDE0NCknLFxuICBzbm93OiAncmdiKDI1NSwgMjUwLCAyNTApJyxcbiAgc25vdzE6ICdyZ2IoMjU1LCAyNTAsIDI1MCknLFxuICBzbm93MjogJ3JnYigyMzgsIDIzMywgMjMzKScsXG4gIHNub3czOiAncmdiKDIwNSwgMjAxLCAyMDEpJyxcbiAgc25vdzQ6ICdyZ2IoMTM5LCAxMzcsIDEzNyknLFxuICBzcHJpbmdncmVlbjogJ3JnYigwLCAyNTUsIDEyNyknLFxuICBzcHJpbmdncmVlbjE6ICdyZ2IoMCwgMjU1LCAxMjcpJyxcbiAgc3ByaW5nZ3JlZW4yOiAncmdiKDAsIDIzOCwgMTE4KScsXG4gIHNwcmluZ2dyZWVuMzogJ3JnYigwLCAyMDUsIDEwMiknLFxuICBzcHJpbmdncmVlbjQ6ICdyZ2IoMCwgMTM5LCA2OSknLFxuICBzdGVlbGJsdWU6ICdyZ2IoNzAsIDEzMCwgMTgwKScsXG4gIHN0ZWVsYmx1ZTE6ICdyZ2IoOTksIDE4NCwgMjU1KScsXG4gIHN0ZWVsYmx1ZTI6ICdyZ2IoOTIsIDE3MiwgMjM4KScsXG4gIHN0ZWVsYmx1ZTM6ICdyZ2IoNzksIDE0OCwgMjA1KScsXG4gIHN0ZWVsYmx1ZTQ6ICdyZ2IoNTQsIDEwMCwgMTM5KScsXG4gIHRhbjogJ3JnYigyMTAsIDE4MCwgMTQwKScsXG4gIHRhbjE6ICdyZ2IoMjU1LCAxNjUsIDc5KScsXG4gIHRhbjI6ICdyZ2IoMjM4LCAxNTQsIDczKScsXG4gIHRhbjM6ICdyZ2IoMjA1LCAxMzMsIDYzKScsXG4gIHRhbjQ6ICdyZ2IoMTM5LCA5MCwgNDMpJyxcbiAgdGhpc3RsZTogJ3JnYigyMTYsIDE5MSwgMjE2KScsXG4gIHRoaXN0bGUxOiAncmdiKDI1NSwgMjI1LCAyNTUpJyxcbiAgdGhpc3RsZTI6ICdyZ2IoMjM4LCAyMTAsIDIzOCknLFxuICB0aGlzdGxlMzogJ3JnYigyMDUsIDE4MSwgMjA1KScsXG4gIHRoaXN0bGU0OiAncmdiKDEzOSwgMTIzLCAxMzkpJyxcbiAgdG9tYXRvOiAncmdiKDI1NSwgOTksIDcxKScsXG4gIHRvbWF0bzE6ICdyZ2IoMjU1LCA5OSwgNzEpJyxcbiAgdG9tYXRvMjogJ3JnYigyMzgsIDkyLCA2NiknLFxuICB0b21hdG8zOiAncmdiKDIwNSwgNzksIDU3KScsXG4gIHRvbWF0bzQ6ICdyZ2IoMTM5LCA1NCwgMzgpJyxcbiAgdHVycXVvaXNlOiAncmdiKDY0LCAyMjQsIDIwOCknLFxuICB0dXJxdW9pc2UxOiAncmdiKDAsIDI0NSwgMjU1KScsXG4gIHR1cnF1b2lzZTI6ICdyZ2IoMCwgMjI5LCAyMzgpJyxcbiAgdHVycXVvaXNlMzogJ3JnYigwLCAxOTcsIDIwNSknLFxuICB0dXJxdW9pc2U0OiAncmdiKDAsIDEzNCwgMTM5KScsXG4gIHZpb2xldDogJ3JnYigyMzgsIDEzMCwgMjM4KScsXG4gIHZpb2xldHJlZDogJ3JnYigyMDgsIDMyLCAxNDQpJyxcbiAgdmlvbGV0cmVkMTogJ3JnYigyNTUsIDYyLCAxNTApJyxcbiAgdmlvbGV0cmVkMjogJ3JnYigyMzgsIDU4LCAxNDApJyxcbiAgdmlvbGV0cmVkMzogJ3JnYigyMDUsIDUwLCAxMjApJyxcbiAgdmlvbGV0cmVkNDogJ3JnYigxMzksIDM0LCA4MiknLFxuICB3aGVhdDogJ3JnYigyNDUsIDIyMiwgMTc5KScsXG4gIHdoZWF0MTogJ3JnYigyNTUsIDIzMSwgMTg2KScsXG4gIHdoZWF0MjogJ3JnYigyMzgsIDIxNiwgMTc0KScsXG4gIHdoZWF0MzogJ3JnYigyMDUsIDE4NiwgMTUwKScsXG4gIHdoZWF0NDogJ3JnYigxMzksIDEyNiwgMTAyKScsXG4gIHdoaXRlOiAncmdiKDI1NSwgMjU1LCAyNTUpJyxcbiAgd2hpdGVzbW9rZTogJ3JnYigyNDUsIDI0NSwgMjQ1KScsXG4gIHllbGxvdzogJ3JnYigyNTUsIDI1NSwgMCknLFxuICB5ZWxsb3cxOiAncmdiKDI1NSwgMjU1LCAwKScsXG4gIHllbGxvdzI6ICdyZ2IoMjM4LCAyMzgsIDApJyxcbiAgeWVsbG93MzogJ3JnYigyMDUsIDIwNSwgMCknLFxuICB5ZWxsb3c0OiAncmdiKDEzOSwgMTM5LCAwKScsXG4gIHllbGxvd2dyZWVuOiAncmdiKDE1NCwgMjA1LCA1MCknLFxufTtcbi8vIFNPVVJDRSBGSUxFOiBsaWJkb3QvanMvbGliX2YuanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbi8qKlxuICogR3JhYiBiYWcgb2YgdXRpbGl0eSBmdW5jdGlvbnMuXG4gKi9cbmxpYi5mID0ge307XG5cbi8qKlxuICogQ3JlYXRlIGEgdW5pcXVlIGVudW0gdmFsdWUuXG4gKlxuICogQHN1cHByZXNzIHtsaW50Q2hlY2tzfVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBodW1hbiBmcmllbmRseSBuYW1lIGZvciBkZWJ1Z2dpbmcuXG4gKiBAcmV0dXJuIHtPYmplY3R9IEEgdW5pcXVlIGVudW0gdGhhdCB3b24ndCBjb21wYXJlIGVxdWFsIHRvIGFueXRoaW5nIGVsc2UuXG4gKi9cbmxpYi5mLmNyZWF0ZUVudW0gPSBmdW5jdGlvbihuYW1lKSB7XG4gIC8vIFdlIHVzZSBhIFN0cmluZyBvYmplY3QgYXMgbm90aGluZyBlbHNlIHNob3VsZCBiZSB1c2luZyB0aGVtIC0tIHdlIHdhbnQgdG9cbiAgLy8gdXNlIHN0cmluZyBwcmltaXRpdmVzIG5vcm1hbGx5LiAgQnV0IGRlYnVnZ2VycyB3aWxsIGluY2x1ZGUgb3VyIG5hbWUuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctd3JhcHBlcnNcbiAgcmV0dXJuIG5ldyBTdHJpbmcobmFtZSk7XG59O1xuXG4vKipcbiAqIFJlcGxhY2UgdmFyaWFibGUgcmVmZXJlbmNlcyBpbiBhIHN0cmluZy5cbiAqXG4gKiBWYXJpYWJsZXMgYXJlIG9mIHRoZSBmb3JtICVGVU5DVElPTihWQVJOQU1FKS4gIEZVTkNUSU9OIGlzIGFuIG9wdGlvbmFsXG4gKiBlc2NhcGUgZnVuY3Rpb24gdG8gYXBwbHkgdG8gdGhlIHZhbHVlLlxuICpcbiAqIEZvciBleGFtcGxlXG4gKiAgIGxpYi5mLnJlcGxhY2VWYXJzKFwiJShncmVldGluZyksICVlbmNvZGVVUklDb21wb25lbnQobmFtZSlcIixcbiAqICAgICAgICAgICAgICAgICAgICAgeyBncmVldGluZzogXCJIZWxsb1wiLFxuICogICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiR29vZ2xlK1wiIH0pO1xuICpcbiAqIFdpbGwgcmVzdWx0IGluIFwiSGVsbG8sIEdvb2dsZSUyQlwiLlxuICovXG5saWIuZi5yZXBsYWNlVmFycyA9IGZ1bmN0aW9uKHN0ciwgdmFycykge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyUoW2Etel0qKVxcKChbXlxcKV0rKVxcKS9naSwgZnVuY3Rpb24obWF0Y2gsIGZuLCB2YXJuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiB2YXJzW3Zhcm5hbWVdID09ICd1bmRlZmluZWQnKVxuICAgICAgdGhyb3cgJ1Vua25vd24gdmFyaWFibGU6ICcgKyB2YXJuYW1lO1xuXG4gICAgdmFyIHJ2ID0gdmFyc1t2YXJuYW1lXTtcblxuICAgIGlmIChmbiBpbiBsaWIuZi5yZXBsYWNlVmFycy5mdW5jdGlvbnMpIHtcbiAgICAgIHJ2ID0gbGliLmYucmVwbGFjZVZhcnMuZnVuY3Rpb25zW2ZuXShydik7XG4gICAgfSBlbHNlIGlmIChmbikge1xuICAgICAgdGhyb3cgJ1Vua25vd24gZXNjYXBlIGZ1bmN0aW9uOiAnICsgZm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ2O1xuICB9KTtcbn07XG5cbi8qKlxuICogRnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCByZXBsYWNlVmFycy5cbiAqXG4gKiBDbGllbnRzIGNhbiBhZGQgdG8gdGhpcyBsaXN0IHRvIGV4dGVuZCBsaWIuZi5yZXBsYWNlVmFycygpLlxuICovXG5saWIuZi5yZXBsYWNlVmFycy5mdW5jdGlvbnMgPSB7XG4gIGVuY29kZVVSSTogZW5jb2RlVVJJLFxuICBlbmNvZGVVUklDb21wb25lbnQ6IGVuY29kZVVSSUNvbXBvbmVudCxcbiAgZXNjYXBlSFRNTDogZnVuY3Rpb24oc3RyKSB7XG4gICAgdmFyIG1hcCA9IHtcbiAgICAgICc8JzogJyZsdDsnLFxuICAgICAgJz4nOiAnJmd0OycsXG4gICAgICAnJic6ICcmYW1wOycsXG4gICAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICAgIFwiJ1wiOiAnJiMzOTsnLFxuICAgIH07XG5cbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1s8PiZcXFwiXFwnXS9nLCBtID0+IG1hcFttXSk7XG4gIH0sXG59O1xuXG4vKipcbiAqIFBhcnNlIGEgcXVlcnkgc3RyaW5nIGludG8gYSBoYXNoLlxuICpcbiAqIFRoaXMgdGFrZXMgYSB1cmwgcXVlcnkgc3RyaW5nIGluIHRoZSBmb3JtICduYW1lMT12YWx1ZSZuYW1lMj12YWx1ZScgYW5kXG4gKiBjb252ZXJ0cyBpdCBpbnRvIGFuIG9iamVjdCBvZiB0aGUgZm9ybSB7IG5hbWUxOiAndmFsdWUnLCBuYW1lMjogJ3ZhbHVlJyB9LlxuICogSWYgYSBnaXZlbiBuYW1lIGFwcGVhcnMgbXVsdGlwbGUgdGltZXMgaW4gdGhlIHF1ZXJ5IHN0cmluZywgb25seSB0aGVcbiAqIGxhc3QgdmFsdWUgd2lsbCBhcHBlYXIgaW4gdGhlIHJlc3VsdC4gIElmIHRoZSBuYW1lIGVuZHMgd2l0aCBbXSwgaXQgaXNcbiAqIHR1cm5lZCBpbnRvIGFuIGFycmF5LlxuICpcbiAqIE5hbWVzIGFuZCB2YWx1ZXMgYXJlIHBhc3NlZCB0aHJvdWdoIGRlY29kZVVSSUNvbXBvbmVudCBiZWZvcmUgYmVpbmcgYWRkZWRcbiAqIHRvIHRoZSByZXN1bHQgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVN0cmluZyBUaGUgc3RyaW5nIHRvIHBhcnNlLiAgSWYgaXQgc3RhcnRzIHdpdGggYVxuICogICAgIGxlYWRpbmcgJz8nLCB0aGUgJz8nIHdpbGwgYmUgaWdub3JlZC5cbiAqL1xubGliLmYucGFyc2VRdWVyeSA9IGZ1bmN0aW9uKHF1ZXJ5U3RyaW5nKSB7XG4gIGlmIChxdWVyeVN0cmluZy5zdGFydHNXaXRoKCc/JykpIHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmcuc3Vic3RyKDEpO1xuXG4gIHZhciBydiA9IHt9O1xuXG4gIHZhciBwYWlycyA9IHF1ZXJ5U3RyaW5nLnNwbGl0KCcmJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG4gICAgbGV0IGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKTtcbiAgICBsZXQgdmFsID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuXG4gICAgaWYgKGtleS5lbmRzV2l0aCgnW10nKSkge1xuICAgICAgLy8gSXQncyBhbiBhcnJheS5cbiAgICAgIGtleSA9IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAvLyBUaGUga2V5IGRvZXNuJ3QgZXhpc3QsIG9yIHdhc24ndCBhbiBhcnJheSBiZWZvcmUuXG4gICAgICBpZiAoIShydltrZXldIGluc3RhbmNlb2YgQXJyYXkpKSBydltrZXldID0gW107XG4gICAgICBydltrZXldLnB1c2godmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSXQncyBhIHBsYWluIHN0cmluZy5cbiAgICAgIHJ2W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJ2O1xufTtcblxubGliLmYuZ2V0VVJMID0gZnVuY3Rpb24ocGF0aCkge1xuICBpZiAobGliLmYuZ2V0VVJMLmNocm9tZVN1cHBvcnRlZCgpKSByZXR1cm4gY2hyb21lLnJ1bnRpbWUuZ2V0VVJMKHBhdGgpO1xuXG4gIHJldHVybiBwYXRoO1xufTtcblxubGliLmYuZ2V0VVJMLmNocm9tZVN1cHBvcnRlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gd2luZG93LmNocm9tZSAmJiBjaHJvbWUucnVudGltZSAmJiBjaHJvbWUucnVudGltZS5nZXRVUkw7XG59O1xuXG4vKipcbiAqIENsYW1wIGEgZ2l2ZW4gaW50ZWdlciB0byBhIHNwZWNpZmllZCByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IHYgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWQuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IG1pbiBUaGUgbWluaW11bSBhY2NlcHRhYmxlIHZhbHVlLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBtYXggVGhlIG1heGltdW0gYWNjZXB0YWJsZSB2YWx1ZS5cbiAqL1xubGliLmYuY2xhbXAgPSBmdW5jdGlvbih2LCBtaW4sIG1heCkge1xuICBpZiAodiA8IG1pbikgcmV0dXJuIG1pbjtcbiAgaWYgKHYgPiBtYXgpIHJldHVybiBtYXg7XG4gIHJldHVybiB2O1xufTtcblxuLyoqXG4gKiBMZWZ0IHBhZCBhIG51bWJlciB0byBhIGdpdmVuIGxlbmd0aCB3aXRoIGxlYWRpbmcgemVyb3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8aW50ZWdlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcGFkLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBsZW5ndGggVGhlIGRlc2lyZWQgbGVuZ3RoLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgcGFkZGVkIG51bWJlciBhcyBhIHN0cmluZy5cbiAqL1xubGliLmYuenBhZCA9IGZ1bmN0aW9uKG51bWJlciwgbGVuZ3RoKSB7XG4gIHJldHVybiBTdHJpbmcobnVtYmVyKS5wYWRTdGFydChsZW5ndGgsICcwJyk7XG59O1xuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyBjb250YWluaW5nIGEgZ2l2ZW4gbnVtYmVyIG9mIHNwYWNlIGNoYXJhY3RlcnMuXG4gKlxuICogVGhpcyBtZXRob2QgbWFpbnRhaW5zIGEgc3RhdGljIGNhY2hlIG9mIHRoZSBsYXJnZXN0IGFtb3VudCBvZiB3aGl0ZXNwYWNlXG4gKiBldmVyIHJlcXVlc3RlZC4gIEl0IHNob3VsZG4ndCBiZSB1c2VkIHRvIGdlbmVyYXRlIGFuIGluc2FuZWx5IGh1Z2UgYW1vdW50IG9mXG4gKiB3aGl0ZXNwYWNlLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gbGVuZ3RoIFRoZSBkZXNpcmVkIGFtb3VudCBvZiB3aGl0ZXNwYWNlLlxuICogQHBhcmFtIHtzdHJpbmd9IEEgc3RyaW5nIG9mIHNwYWNlcyBvZiB0aGUgcmVxdWVzdGVkIGxlbmd0aC5cbiAqL1xubGliLmYuZ2V0V2hpdGVzcGFjZSA9IGZ1bmN0aW9uKGxlbmd0aCkge1xuICBpZiAobGVuZ3RoIDw9IDApIHJldHVybiAnJztcblxuICB2YXIgZiA9IHRoaXMuZ2V0V2hpdGVzcGFjZTtcbiAgaWYgKCFmLndoaXRlc3BhY2UpIGYud2hpdGVzcGFjZSA9ICcgICAgICAgICAgJztcblxuICB3aGlsZSAobGVuZ3RoID4gZi53aGl0ZXNwYWNlLmxlbmd0aCkge1xuICAgIGYud2hpdGVzcGFjZSArPSBmLndoaXRlc3BhY2U7XG4gIH1cblxuICByZXR1cm4gZi53aGl0ZXNwYWNlLnN1YnN0cigwLCBsZW5ndGgpO1xufTtcblxuLyoqXG4gKiBFbnN1cmUgdGhhdCBhIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoaW4gYSBjZXJ0YWluIHRpbWUgbGltaXQuXG4gKlxuICogU2ltcGxlIHVzYWdlIGxvb2tzIGxpa2UgdGhpcy4uLlxuICpcbiAqICBsaWIucmVnaXN0ZXJJbml0KGxpYi5mLmFsYXJtKG9uSW5pdCkpO1xuICpcbiAqIFRoaXMgd2lsbCBsb2cgYSB3YXJuaW5nIHRvIHRoZSBjb25zb2xlIGlmIG9uSW5pdCgpIGlzIG5vdCBpbnZva2VkIHdpdGhpblxuICogNSBzZWNvbmRzLlxuICpcbiAqIElmIHlvdSdyZSBwZXJmb3JtaW5nIHNvbWUgb3BlcmF0aW9uIHRoYXQgbWF5IHRha2UgbG9uZ2VyIHRoYW4gNSBzZWNvbmRzIHlvdVxuICogY2FuIHBhc3MgYSBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMgYXMgdGhlIG9wdGlvbmFsIHNlY29uZCBwYXJhbWV0ZXIuXG4gKlxuICogSWYgeW91IHBhc3MgYSBzdHJpbmcgaWRlbnRpZmllciBpbnN0ZWFkIG9mIGEgY2FsbGJhY2sgZnVuY3Rpb24sIHlvdSdsbCBnZXQgYVxuICogd3JhcHBlciBnZW5lcmF0b3IgcmF0aGVyIHRoYW4gYSBzaW5nbGUgd3JhcHBlci4gIEVhY2ggY2FsbCB0byB0aGVcbiAqIGdlbmVyYXRvciB3aWxsIHJldHVybiBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgY2FsbGJhY2sgd2lyZWQgdG9cbiAqIGEgc2hhcmVkIHRpbWVvdXQuICBUaGlzIGlzIGZvciBjYXNlcyB3aGVyZSB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCBhdCBsZWFzdFxuICogb25lIG9mIGEgc2V0IG9mIGNhbGxiYWNrcyBpcyBpbnZva2VkIGJlZm9yZSBhIHRpbWVvdXQgZXhwaXJlcy5cbiAqXG4gKiAgIHZhciBhbGFybSA9IGxpYi5mLmFsYXJtKCdmZXRjaCBvYmplY3QnKTtcbiAqICAgbGliLmZvby5mZXRjaE9iamVjdChhbGFybShvblN1Y2Nlc3MpLCBhbGFybShvbkZhaWx1cmUpKTtcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCopfSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gd3JhcCBpbiBhbiBhbGFybS5cbiAqIEBwYXJhbSB7aW50fSBvcHRfbXMgT3B0aW9uYWwgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSByYWlzaW5nXG4gKiAgICAgYW4gYWxhcm0uICBEZWZhdWx0IGlzIDUwMDAgKDUgc2Vjb25kcykuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gSWYgY2FsbGJhY2sgaXMgYSBmdW5jdGlvbiB0aGVuIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBiZVxuICogICAgIHRoZSB3cmFwcGVkIGNhbGxiYWNrLiAgSWYgY2FsbGJhY2sgaXMgYSBzdHJpbmcgdGhlbiB0aGUgcmV0dXJuIHZhbHVlIHdpbGxcbiAqICAgICBiZSBhIGZ1bmN0aW9uIHRoYXQgZ2VuZXJhdGVzIG5ldyB3cmFwcGVkIGNhbGxiYWNrcy5cbiAqL1xubGliLmYuYWxhcm0gPSBmdW5jdGlvbihjYWxsYmFjaywgb3B0X21zKSB7XG4gIHZhciBtcyA9IG9wdF9tcyB8fCA1ICogMTAwMDtcbiAgdmFyIHN0YWNrID0gbGliLmYuZ2V0U3RhY2soMSk7XG5cbiAgcmV0dXJuIChmdW5jdGlvbigpIHtcbiAgICAvLyBUaGlzIG91dGVyIGZ1bmN0aW9uIGlzIGNhbGxlZCBpbW1lZGlhdGVseS4gIEl0J3MgaGVyZSB0byBjYXB0dXJlIGEgbmV3XG4gICAgLy8gc2NvcGUgZm9yIHRoZSB0aW1lb3V0IHZhcmlhYmxlLlxuXG4gICAgLy8gVGhlICd0aW1lb3V0JyB2YXJpYWJsZSBpcyBzaGFyZWQgYnkgdGhpcyB0aW1lb3V0IGZ1bmN0aW9uLCBhbmQgdGhlXG4gICAgLy8gY2FsbGJhY2sgd3JhcHBlci5cbiAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbmFtZSA9IHR5cGVvZiBjYWxsYmFjayA9PSAnc3RyaW5nJyA/IG5hbWUgOiBjYWxsYmFjay5uYW1lO1xuICAgICAgbmFtZSA9IG5hbWUgPyAnOiAnICsgbmFtZSA6ICcnO1xuICAgICAgY29uc29sZS53YXJuKCdsaWIuZi5hbGFybTogdGltZW91dCBleHBpcmVkOiAnICsgbXMgLyAxMDAwICsgJ3MnICsgbmFtZSk7XG4gICAgICBjb25zb2xlLmxvZyhzdGFjayk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9LCBtcyk7XG5cbiAgICB2YXIgd3JhcHBlckdlbmVyYXRvciA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09ICdzdHJpbmcnKSByZXR1cm4gd3JhcHBlckdlbmVyYXRvcjtcblxuICAgIHJldHVybiB3cmFwcGVyR2VuZXJhdG9yKGNhbGxiYWNrKTtcbiAgfSkoKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgYWZ0ZXIgc2tpcHBpbmcgYSBnaXZlbiBudW1iZXIgb2YgZnJhbWVzLlxuICpcbiAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIHRvIGJlIHVzZWQgZm9yIGRlYnVnZ2luZyBvbmx5LiAgSXQgcmV0dXJucyBhblxuICogT2JqZWN0IGluc3RlYWQgb2YgYW4gQXJyYXksIGJlY2F1c2UgdGhlIGNvbnNvbGUgc3RyaW5naWZpZXMgYXJyYXlzIGJ5XG4gKiBkZWZhdWx0IGFuZCB0aGF0J3Mgbm90IHdoYXQgd2Ugd2FudC5cbiAqXG4gKiBBIHR5cGljYWwgY2FsbCBtaWdodCBsb29rIGxpa2UuLi5cbiAqXG4gKiAgICBjb25zb2xlLmxvZygnU29tZXRoaW5nIHdpY2tlZCB0aGlzIHdheSBjYW1lJywgbGliLmYuZ2V0U3RhY2soKSk7XG4gKiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBOb3RpY2UgdGhlIGNvbW1hIF5cbiAqXG4gKiBUaGlzIHdvdWxkIHByaW50IHRoZSBtZXNzYWdlIHRvIHRoZSBqcyBjb25zb2xlLCBmb2xsb3dlZCBieSBhbiBvYmplY3RcbiAqIHdoaWNoIGNhbiBiZSBjbGlja2VkIHRvIHJldmVhbCB0aGUgc3RhY2suXG4gKlxuICogQHBhcmFtIHtudW1iZXI9fSBpZ25vcmVGcmFtZXMgSG93IG1hbnkgaW5uZXIgc3RhY2sgZnJhbWVzIHRvIGlnbm9yZS4gIFRoZVxuICogICAgIGlubmVybW9zdCAnZ2V0U3RhY2snIGNhbGwgaXMgYWx3YXlzIGlnbm9yZWQuXG4gKiBAcGFyYW0ge251bWJlcj19IGNvdW50IEhvdyBtYW55IGZyYW1lcyB0byByZXR1cm4uXG4gKi9cbmxpYi5mLmdldFN0YWNrID0gZnVuY3Rpb24oaWdub3JlRnJhbWVzID0gMCwgY291bnQgPSB1bmRlZmluZWQpIHtcbiAgY29uc3Qgc3RhY2tBcnJheSA9IG5ldyBFcnJvcigpLnN0YWNrLnNwbGl0KCdcXG4nKTtcblxuICAvLyBBbHdheXMgaWdub3JlIHRoZSBFcnJvcigpIG9iamVjdCBhbmQgZ2V0U3RhY2sgY2FsbCBpdHNlbGYuXG4gIC8vIFswXSA9ICdFcnJvcidcbiAgLy8gWzFdID0gJyAgICBhdCBPYmplY3QubGliLmYuZ2V0U3RhY2sgKGZpbGU6Ly8vLi4uL2xpYl9mLmpzOjI2NzoyMyknXG4gIGlnbm9yZUZyYW1lcyArPSAyO1xuXG4gIGNvbnN0IG1heCA9IHN0YWNrQXJyYXkubGVuZ3RoIC0gaWdub3JlRnJhbWVzO1xuICBpZiAoY291bnQgPT09IHVuZGVmaW5lZCkgY291bnQgPSBtYXg7XG4gIGVsc2UgY291bnQgPSBsaWIuZi5jbGFtcChjb3VudCwgMCwgbWF4KTtcblxuICAvLyBSZW1vdmUgdGhlIGxlYWRpbmcgc3BhY2VzIGFuZCBcImF0XCIgZnJvbSBlYWNoIGxpbmU6XG4gIC8vICcgICAgYXQgd2luZG93Lm9ubG9hZCAoZmlsZTovLy8uLi4vbGliX3Rlc3QuanM6MTE6MTgpJ1xuICBjb25zdCBzdGFja09iamVjdCA9IG5ldyBBcnJheSgpO1xuICBmb3IgKGxldCBpID0gaWdub3JlRnJhbWVzOyBpIDwgY291bnQgKyBpZ25vcmVGcmFtZXM7ICsraSlcbiAgICBzdGFja09iamVjdC5wdXNoKHN0YWNrQXJyYXlbaV0ucmVwbGFjZSgvXlxccyphdFxccysvLCAnJykpO1xuXG4gIHJldHVybiBzdGFja09iamVjdDtcbn07XG5cbi8qKlxuICogRGl2aWRlcyB0aGUgdHdvIG51bWJlcnMgYW5kIGZsb29ycyB0aGUgcmVzdWx0cywgdW5sZXNzIHRoZSByZW1haW5kZXIgaXMgbGVzc1xuICogdGhhbiBhbiBpbmNyZWRpYmx5IHNtYWxsIHZhbHVlLCBpbiB3aGljaCBjYXNlIGl0IHJldHVybnMgdGhlIGNlaWxpbmcuXG4gKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHRoZSBudW1iZXIgYXJlIHRydW5jYXRlZCBhcHByb3hpbWF0aW9ucyBvZiBsb25nZXJcbiAqIHZhbHVlcywgYW5kIHNvIGRvaW5nIGRpdmlzaW9uIHdpdGggdGhlc2UgbnVtYmVycyB5aWVsZHMgYSByZXN1bHQgaW5jcmVkaWJseVxuICogY2xvc2UgdG8gYSB3aG9sZSBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG51bWVyYXRvclxuICogQHBhcmFtIHtudW1iZXJ9IGRlbm9taW5hdG9yXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmxpYi5mLnNtYXJ0Rmxvb3JEaXZpZGUgPSBmdW5jdGlvbihudW1lcmF0b3IsIGRlbm9taW5hdG9yKSB7XG4gIHZhciB2YWwgPSBudW1lcmF0b3IgLyBkZW5vbWluYXRvcjtcbiAgdmFyIGNlaWxpbmcgPSBNYXRoLmNlaWwodmFsKTtcbiAgaWYgKGNlaWxpbmcgLSB2YWwgPCAwLjAwMDEpIHtcbiAgICByZXR1cm4gY2VpbGluZztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih2YWwpO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCBhIHJhbmRvbSBpbnRlZ2VyIGluIGEgcmFuZ2UgKGluY2x1c2l2ZSkuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbG93ZXN0IGludGVnZXIgaW4gdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgaGlnaGVzdCBpbnRlZ2VyIGluIHRoZSByYW5nZS5cbiAqIEByZXR1cm4ge251bWJlcn0gQSByYW5kb20gbnVtYmVyIGJldHdlZW4gbWluICYgbWF4LlxuICovXG5saWIuZi5yYW5kb21JbnQgPSBmdW5jdGlvbihtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IE9TLlxuICpcbiAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBjb25zdGFudCBpblxuICogICAgIHJ1bnRpbWUuUGxhdGZvcm1Pcy5cbiAqL1xubGliLmYuZ2V0T3MgPSBmdW5jdGlvbigpIHtcbiAgLy8gVHJ5IHRoZSBicm93ZXIgZXh0ZW5zaW9ucyBBUEkuXG4gIGlmICh3aW5kb3cuYnJvd3NlciAmJiBicm93c2VyLnJ1bnRpbWUgJiYgYnJvd3Nlci5ydW50aW1lLmdldFBsYXRmb3JtSW5mbylcbiAgICByZXR1cm4gYnJvd3Nlci5ydW50aW1lLmdldFBsYXRmb3JtSW5mbygpLnRoZW4oaW5mbyA9PiBpbmZvLm9zKTtcblxuICAvLyBVc2UgdGhlIG5hdGl2ZSBDaHJvbWUgQVBJIGlmIGF2YWlsYWJsZS5cbiAgaWYgKHdpbmRvdy5jaHJvbWUgJiYgY2hyb21lLnJ1bnRpbWUgJiYgY2hyb21lLnJ1bnRpbWUuZ2V0UGxhdGZvcm1JbmZvKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgICBjaHJvbWUucnVudGltZS5nZXRQbGF0Zm9ybUluZm8oaW5mbyA9PiByZXNvbHZlKGluZm8ub3MpKSxcbiAgICApO1xuICB9XG5cbiAgLy8gRmFsbGJhY2sgbG9naWMuICBDYXB0dXJlIHRoZSBtYWpvciBPUydzLiAgVGhlIHJlc3Qgc2hvdWxkIHN1cHBvcnQgdGhlXG4gIC8vIGJyb3dzZXIgQVBJIGFib3ZlLlxuICBpZiAod2luZG93Lm5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50KSB7XG4gICAgY29uc3QgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIGlmICh1YS5pbmNsdWRlcygnTWFjIE9TIFgnKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgnbWFjJyk7XG4gICAgZWxzZSBpZiAodWEuaW5jbHVkZXMoJ0NyT1MnKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgnY3JvcycpO1xuICAgIGVsc2UgaWYgKHVhLmluY2x1ZGVzKCdMaW51eCcpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCdsaW51eCcpO1xuICAgIGVsc2UgaWYgKHVhLmluY2x1ZGVzKCdBbmRyb2lkJykpIHJldHVybiBQcm9taXNlLnJlc29sdmUoJ2FuZHJvaWQnKTtcbiAgICBlbHNlIGlmICh1YS5pbmNsdWRlcygnV2luZG93cycpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCd3aW5kb3dzJyk7XG4gIH1cblxuICAvLyBTdGlsbCBoZXJlPyAgTm8gaWRlYS5cbiAgcmV0dXJuIFByb21pc2UucmVqZWN0KG51bGwpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgQ2hyb21lIG1pbGVzdG9uZSB2ZXJzaW9uLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG1pbGVzdG9uZSBudW1iZXIgaWYgd2UncmUgcnVubmluZyBvbiBDaHJvbWUsIGVsc2UgTmFOLlxuICovXG5saWIuZi5nZXRDaHJvbWVNaWxlc3RvbmUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCkge1xuICAgIGNvbnN0IGFyeSA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1xcc0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChhcnkpIHJldHVybiBwYXJzZUludChhcnlbMV0pO1xuICB9XG5cbiAgLy8gUmV0dXJuaW5nIE5hTiB3aWxsIG1ha2UgYWxsIG51bWJlciBjb21wYXJpc29ucyBmYWlsLlxuICByZXR1cm4gTmFOO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxhc3RFcnJvciBzdHJpbmcgaW4gdGhlIGJyb3dzZXIuXG4gKlxuICogVGhpcyBvYmplY3QgbWlnaHQgbGl2ZSBpbiBkaWZmZXJlbnQgbG9jYXRpb25zLCBhbmQgaXQgaXNuJ3QgYWx3YXlzIGRlZmluZWRcbiAqIChpZiB0aGVyZSBoYXNuJ3QgYmVlbiBhIFwibGFzdCBlcnJvclwiKS4gIFdyYXAgYWxsIHRoYXQgdWdsaW5lc3MgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGRlZmF1bHRNc2cgVGhlIGRlZmF1bHQgbWVzc2FnZSBpZiBubyBlcnJvciBpcyBmb3VuZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGxhc3QgZXJyb3IgbWVzc2FnZSBmcm9tIHRoZSBicm93c2VyLlxuICovXG5saWIuZi5sYXN0RXJyb3IgPSBmdW5jdGlvbihkZWZhdWx0TXNnID0gbnVsbCkge1xuICBsZXQgbGFzdEVycm9yO1xuICBpZiAod2luZG93LmJyb3dzZXIgJiYgYnJvd3Nlci5ydW50aW1lKSBsYXN0RXJyb3IgPSBicm93c2VyLnJ1bnRpbWUubGFzdEVycm9yO1xuICBlbHNlIGlmICh3aW5kb3cuY2hyb21lICYmIGNocm9tZS5ydW50aW1lKVxuICAgIGxhc3RFcnJvciA9IGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcjtcblxuICBpZiAobGFzdEVycm9yICYmIGxhc3RFcnJvci5tZXNzYWdlKSByZXR1cm4gbGFzdEVycm9yLm1lc3NhZ2U7XG4gIGVsc2UgcmV0dXJuIGRlZmF1bHRNc2c7XG59O1xuLy8gU09VUkNFIEZJTEU6IGxpYmRvdC9qcy9saWJfaTE4bi5qc1xuLy8gQ29weXJpZ2h0IDIwMTggVGhlIENocm9taXVtIE9TIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4vLyBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuXG4vKipcbiAqIFdyYXBwZXJzIG92ZXIgdGhlIGJyb3dzZXIgaTE4biBoZWxwZXJzLlxuICpcbiAqIEFyZ3VhYmx5IHNvbWUgb2YgdGhlc2UgZnVuY3Rpb25zIHNob3VsZCBiZSBsMTBuLCBidXQgb2ggd2VsbC5cbiAqL1xubGliLmkxOG4gPSB7fTtcblxuLyoqXG4gKiBDb252ZW5pZW5jZSBzaG9ydGN1dCB0byB0aGUgYnJvd3NlciBpMThuIG9iamVjdC5cbiAqL1xubGliLmkxOG4uYnJvd3Nlcl8gPVxuICB3aW5kb3cuYnJvd3NlciAmJiBicm93c2VyLmkxOG5cbiAgICA/IGJyb3dzZXIuaTE4blxuICAgIDogd2luZG93LmNocm9tZSAmJiBjaHJvbWUuaTE4blxuICAgICAgPyBjaHJvbWUuaTE4blxuICAgICAgOiBudWxsO1xuXG4vKipcbiAqIEdldCB0aGUgbGlzdCBvZiBhY2NlcHRlZCBVSSBsYW5ndWFnZXMuXG4gKlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvQWRkLW9ucy9XZWJFeHRlbnNpb25zL0FQSS9pMThuL2dldEFjY2VwdExhbmd1YWdlc1xuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oQXJyYXkpfSBjYWxsYmFjayBGdW5jdGlvbiB0byBpbnZva2Ugd2l0aCB0aGUgcmVzdWx0cy4gIFRoZVxuICogICAgIHBhcmFtZXRlciBpcyBhIGxpc3Qgb2YgbG9jYWxlIG5hbWVzLlxuICovXG5saWIuaTE4bi5nZXRBY2NlcHRMYW5ndWFnZXMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICBpZiAobGliLmkxOG4uYnJvd3Nlcl8pIHtcbiAgICBsaWIuaTE4bi5icm93c2VyXy5nZXRBY2NlcHRMYW5ndWFnZXMoY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBjYWxsYmFjayhbbmF2aWdhdG9yLmxhbmd1YWdlLnJlcGxhY2UoLy0vZywgJ18nKV0pO1xuICAgIH0sIDApO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCBhIG1lc3NhZ2UgYnkgbmFtZSwgb3B0aW9uYWxseSByZXBsYWNpbmcgYXJndW1lbnRzIHRvby5cbiAqXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9BZGQtb25zL1dlYkV4dGVuc2lvbnMvQVBJL2kxOG4vZ2V0TWVzc2FnZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtc2duYW1lIFRoZSBpZCBmb3IgdGhpcyBsb2NhbGl6ZWQgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmdbXT19IHN1YnN0aXR1dGlvbnMgQW55IHJlcGxhY2VtZW50cyBpbiB0aGUgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmc9fSBmYWxsYmFjayBUcmFuc2xhdGlvbiBpZiB0aGUgbWVzc2FnZSB3YXNuJ3QgZm91bmQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB0cmFuc2xhdGVkIG1lc3NhZ2UuXG4gKi9cbmxpYi5pMThuLmdldE1lc3NhZ2UgPSBmdW5jdGlvbihtc2duYW1lLCBzdWJzdGl0dXRpb25zID0gW10sIGZhbGxiYWNrID0gJycpIHtcbiAgLy8gRmlyc3QgbGV0IHRoZSBuYXRpdmUgYnJvd3NlciBBUElzIGhhbmRsZSBldmVyeXRoaW5nIGZvciB1cy5cbiAgaWYgKGxpYi5pMThuLmJyb3dzZXJfKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGxpYi5pMThuLmJyb3dzZXJfLmdldE1lc3NhZ2UobXNnbmFtZSwgc3Vic3RpdHV0aW9ucyk7XG4gICAgaWYgKG1lc3NhZ2UpIHJldHVybiBtZXNzYWdlO1xuICB9XG5cbiAgLy8gRG8gb3VyIGJlc3QgdG8gZ2V0IHNvbWV0aGluZyByZWFzb25hYmxlLlxuICByZXR1cm4gbGliLmkxOG4ucmVwbGFjZVJlZmVyZW5jZXMoZmFsbGJhY2ssIHN1YnN0aXR1dGlvbnMpO1xufTtcblxuLyoqXG4gKiBSZXBsYWNlICQxLi4uJG4gcmVmZXJlbmNlcyB3aXRoIHRoZSBlbGVtZW50cyBvZiB0aGUgYXJncyBhcnJheS5cbiAqXG4gKiBUaGlzIGxhcmdlbHkgYmVoYXZlcyBsaWtlIENocm9tZSdzIGdldE1lc3NhZ2UgaGVscGVyLiAgVGhlICQjIHJlZmVyZW5jZXMgYXJlXG4gKiBhbHdheXMgcmVwbGFjZWQvcmVtb3ZlZCByZWdhcmRsZXNzIG9mIHRoZSBzcGVjaWZpZWQgc3Vic3RpdHV0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbXNnIFN0cmluZyBjb250YWluaW5nIHRoZSBtZXNzYWdlIGFuZCBhcmd1bWVudCByZWZlcmVuY2VzLlxuICogQHBhcmFtIHtzdHJpbmdbXT19IGFyZ3MgQXJyYXkgY29udGFpbmluZyB0aGUgYXJndW1lbnQgdmFsdWVzLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgbWVzc2FnZSB3aXRoIHJlcGxhY2VtZW50cyBleHBhbmRlZC5cbiAqL1xubGliLmkxOG4ucmVwbGFjZVJlZmVyZW5jZXMgPSBmdW5jdGlvbihtc2csIGFyZ3MgPSBbXSkge1xuICAvLyBUaGUgQ2hyb21lIEFQSSBhbGxvd3MgYSBzaW5nbGUgc3Vic3RpdHV0aW9uIGFzIGEgc3RyaW5nIHJhdGhlciB0aGFuIGFycmF5LlxuICBpZiAoYXJncyA9PT0gbnVsbCkge1xuICAgIGFyZ3MgPSBbXTtcbiAgfVxuICBpZiAoIShhcmdzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgYXJncyA9IFthcmdzXTtcbiAgfVxuXG4gIHJldHVybiBtc2cucmVwbGFjZSgvXFwkKFxcZCspL2csIChtLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBpbmRleCA8PSBhcmdzLmxlbmd0aCA/IGFyZ3NbaW5kZXggLSAxXSA6ICcnO1xuICB9KTtcbn07XG4vLyBTT1VSQ0UgRklMRTogbGliZG90L2pzL2xpYl9tZXNzYWdlX21hbmFnZXIuanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbi8qKlxuICogTWVzc2FnZU1hbmFnZXIgY2xhc3MgaGFuZGxlcyBpbnRlcm5hdGlvbmFsaXplZCBzdHJpbmdzLlxuICpcbiAqIE5vdGU6IGNocm9tZS5pMThuIGlzbid0IHN1ZmZpY2llbnQgYmVjYXVzZS4uLlxuICogICAgIDEuIFRoZXJlJ3MgYSBidWcgaW4gY2hyb21lIHRoYXQgbWFrZXMgaXQgdW5hdmFpbGFibGUgaW4gaWZyYW1lczpcbiAqICAgICAgICBodHRwczovL2NyYnVnLmNvbS8xMzAyMDBcbiAqICAgICAyLiBUaGUgY2xpZW50IGNvZGUgbWF5IG5vdCBiZSBwYWNrYWdlZCBpbiBhIENocm9tZSBleHRlbnNpb24uXG4gKiAgICAgMy4gVGhlIGNsaWVudCBjb2RlIG1heSBiZSBwYXJ0IG9mIGEgbGlicmFyeSBwYWNrYWdlZCBpbiBhIHRoaXJkLXBhcnR5XG4gKiAgICAgICAgQ2hyb21lIGV4dGVuc2lvbi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBsYW5ndWFnZXMgTGlzdCBvZiBsYW5ndWFnZXMgdG8gbG9hZCwgaW4gdGhlIG9yZGVyIHRoZXlcbiAqICAgICBzaG91bGQgYmUgbG9hZGVkLiAgTmV3ZXIgbWVzc2FnZXMgcmVwbGFjZSBvbGRlciBvbmVzLiAgJ2VuJyBpc1xuICogICAgIGF1dG9tYXRpY2FsbHkgYWRkZWQgYXMgdGhlIGZpcnN0IGxhbmd1YWdlIGlmIGl0IGlzIG5vdCBhbHJlYWR5IHByZXNlbnQuXG4gKi9cbmxpYi5NZXNzYWdlTWFuYWdlciA9IGZ1bmN0aW9uKGxhbmd1YWdlcykge1xuICB0aGlzLmxhbmd1YWdlc18gPSBsYW5ndWFnZXMubWFwKGVsID0+IGVsLnJlcGxhY2UoLy0vZywgJ18nKSk7XG5cbiAgaWYgKHRoaXMubGFuZ3VhZ2VzXy5pbmRleE9mKCdlbicpID09IC0xKSB0aGlzLmxhbmd1YWdlc18udW5zaGlmdCgnZW4nKTtcblxuICB0aGlzLm1lc3NhZ2VzID0ge307XG59O1xuXG4vKipcbiAqIEFkZCBtZXNzYWdlIGRlZmluaXRpb25zIHRvIHRoZSBtZXNzYWdlIG1hbmFnZXIuXG4gKlxuICogVGhpcyB0YWtlcyBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgZm9ybWF0IG9mIGEgQ2hyb21lIG1lc3NhZ2VzLmpzb24gZmlsZS4gIFNlZVxuICogPGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9pMThuLW1lc3NhZ2VzPi5cbiAqL1xubGliLk1lc3NhZ2VNYW5hZ2VyLnByb3RvdHlwZS5hZGRNZXNzYWdlcyA9IGZ1bmN0aW9uKGRlZnMpIHtcbiAgZm9yICh2YXIga2V5IGluIGRlZnMpIHtcbiAgICB2YXIgZGVmID0gZGVmc1trZXldO1xuXG4gICAgaWYgKCFkZWYucGxhY2Vob2xkZXJzKSB7XG4gICAgICB0aGlzLm1lc3NhZ2VzW2tleV0gPSBkZWYubWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVwbGFjZSBcIiROQU1FJFwiIHBsYWNlaG9sZGVycyB3aXRoIFwiJDFcIiwgZXRjLlxuICAgICAgdGhpcy5tZXNzYWdlc1trZXldID0gZGVmLm1lc3NhZ2UucmVwbGFjZShcbiAgICAgICAgL1xcJChbYS16XVteXFxzXFwkXSspXFwkL2dpLFxuICAgICAgICBmdW5jdGlvbihtLCBuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZnNba2V5XS5wbGFjZWhvbGRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXS5jb250ZW50O1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogTG9hZCB0aGUgZmlyc3QgYXZhaWxhYmxlIGxhbmd1YWdlIG1lc3NhZ2UgYnVuZGxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuIEEgdXJsIHBhdHRlcm4gY29udGFpbmluZyBhIFwiJDFcIiB3aGVyZSB0aGUgbG9jYWxlXG4gKiAgICAgbmFtZSBzaG91bGQgZ28uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEFycmF5LEFycmF5KX0gb25Db21wbGV0ZSBGdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBsb2FkaW5nXG4gKiAgICAgaXMgY29tcGxldGUuICBUaGUgdHdvIGFycmF5cyBhcmUgdGhlIGxpc3Qgb2Ygc3VjY2Vzc2Z1bCBhbmQgZmFpbGVkXG4gKiAgICAgbG9jYWxlIG5hbWVzLiAgSWYgdGhlIGZpcnN0IHBhcmFtZXRlciBpcyBsZW5ndGggMCwgbm8gbG9jYWxlcyB3ZXJlXG4gKiAgICAgbG9hZGVkLlxuICovXG5saWIuTWVzc2FnZU1hbmFnZXIucHJvdG90eXBlLmZpbmRBbmRMb2FkTWVzc2FnZXMgPSBmdW5jdGlvbihcbiAgcGF0dGVybixcbiAgb25Db21wbGV0ZSxcbikge1xuICB2YXIgbGFuZ3VhZ2VzID0gdGhpcy5sYW5ndWFnZXNfLmNvbmNhdCgpO1xuICB2YXIgbG9hZGVkID0gW107XG4gIHZhciBmYWlsZWQgPSBbXTtcblxuICBmdW5jdGlvbiBvbkxhbmd1YWdlQ29tcGxldGUoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUpIHtcbiAgICAgIGxvYWRlZCA9IGxhbmd1YWdlcy5zaGlmdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmYWlsZWQgPSBsYW5ndWFnZXMuc2hpZnQoKTtcbiAgICB9XG5cbiAgICBpZiAobGFuZ3VhZ2VzLmxlbmd0aCkge1xuICAgICAgdHJ5TmV4dExhbmd1YWdlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uQ29tcGxldGUobG9hZGVkLCBmYWlsZWQpO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0cnlOZXh0TGFuZ3VhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmxvYWRNZXNzYWdlcyhcbiAgICAgIHRoaXMucmVwbGFjZVJlZmVyZW5jZXMocGF0dGVybiwgbGFuZ3VhZ2VzKSxcbiAgICAgIG9uTGFuZ3VhZ2VDb21wbGV0ZS5iaW5kKHRoaXMsIHRydWUpLFxuICAgICAgb25MYW5ndWFnZUNvbXBsZXRlLmJpbmQodGhpcywgZmFsc2UpLFxuICAgICk7XG4gIH0uYmluZCh0aGlzKTtcblxuICB0cnlOZXh0TGFuZ3VhZ2UoKTtcbn07XG5cbi8qKlxuICogTG9hZCBtZXNzYWdlcyBmcm9tIGEgbWVzc2FnZXMuanNvbiBmaWxlLlxuICovXG5saWIuTWVzc2FnZU1hbmFnZXIucHJvdG90eXBlLmxvYWRNZXNzYWdlcyA9IGZ1bmN0aW9uKFxuICB1cmwsXG4gIG9uU3VjY2VzcyxcbiAgb3B0X29uRXJyb3IsXG4pIHtcbiAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gIHhoci5vbmxvYWQgPSAoKSA9PiB7XG4gICAgdGhpcy5hZGRNZXNzYWdlcyhKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpKTtcbiAgICBvblN1Y2Nlc3MoKTtcbiAgfTtcbiAgaWYgKG9wdF9vbkVycm9yKSB4aHIub25lcnJvciA9ICgpID0+IG9wdF9vbkVycm9yKHhocik7XG5cbiAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gIHhoci5zZW5kKCk7XG59O1xuXG4vKipcbiAqIFBlci1pbnN0YW5jZSBjb3B5IG9mIHJlcGxhY2VSZWZlcmVuY2VzLlxuICovXG5saWIuTWVzc2FnZU1hbmFnZXIucHJvdG90eXBlLnJlcGxhY2VSZWZlcmVuY2VzID0gbGliLmkxOG4ucmVwbGFjZVJlZmVyZW5jZXM7XG5cbi8qKlxuICogR2V0IGEgbWVzc2FnZSBieSBuYW1lLCBvcHRpb25hbGx5IHJlcGxhY2luZyBhcmd1bWVudHMgdG9vLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtc2duYW1lIFN0cmluZyBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBtZXNzYWdlIHRvIGdldC5cbiAqIEBwYXJhbSB7QXJyYXl9IG9wdF9hcmdzIE9wdGlvbmFsIGFycmF5IGNvbnRhaW5pbmcgdGhlIGFyZ3VtZW50IHZhbHVlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRfZGVmYXVsdCBPcHRpb25hbCB2YWx1ZSB0byByZXR1cm4gaWYgdGhlIG1zZ25hbWUgaXMgbm90XG4gKiAgICAgZm91bmQuICBSZXR1cm5zIHRoZSBtZXNzYWdlIG5hbWUgYnkgZGVmYXVsdC5cbiAqL1xubGliLk1lc3NhZ2VNYW5hZ2VyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihtc2duYW1lLCBvcHRfYXJncywgb3B0X2RlZmF1bHQpIHtcbiAgLy8gRmlyc3QgdHJ5IHRoZSBpbnRlZ3JhdGVkIGJyb3dzZXIgZ2V0TWVzc2FnZS4gIFdlIHByZWZlciB0aGF0IG92ZXIgYW55XG4gIC8vIHJlZ2lzdGVyZWQgbWVzc2FnZXMgYXMgb25seSB0aGUgYnJvd3NlciBzdXBwb3J0cyB0cmFuc2xhdGlvbnMuXG4gIGxldCBtZXNzYWdlID0gbGliLmkxOG4uZ2V0TWVzc2FnZShtc2duYW1lLCBvcHRfYXJncyk7XG4gIGlmIChtZXNzYWdlKSByZXR1cm4gbWVzc2FnZTtcblxuICAvLyBMb29rIGl0IHVwIGluIHRoZSByZWdpc3RlcmVkIGNhY2hlIG5leHQuXG4gIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VzW21zZ25hbWVdO1xuICBpZiAoIW1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLndhcm4oJ1Vua25vd24gbWVzc2FnZTogJyArIG1zZ25hbWUpO1xuICAgIG1lc3NhZ2UgPSBvcHRfZGVmYXVsdCA9PT0gdW5kZWZpbmVkID8gbXNnbmFtZSA6IG9wdF9kZWZhdWx0O1xuICAgIC8vIFJlZ2lzdGVyIHRoZSBtZXNzYWdlIHdpdGggdGhlIGRlZmF1bHQgdG8gYXZvaWQgbXVsdGlwbGUgd2FybmluZ3MuXG4gICAgdGhpcy5tZXNzYWdlc1ttc2duYW1lXSA9IG1lc3NhZ2U7XG4gIH1cblxuICByZXR1cm4gdGhpcy5yZXBsYWNlUmVmZXJlbmNlcyhtZXNzYWdlLCBvcHRfYXJncyk7XG59O1xuXG4vKipcbiAqIFByb2Nlc3MgYWxsIG9mIHRoZSBcImkxOG5cIiBodG1sIGF0dHJpYnV0ZXMgZm91bmQgaW4gYSBnaXZlbiBkb20gZnJhZ21lbnQuXG4gKlxuICogVGhlIHJlYWwgd29yayBoYXBwZW5zIGluIHByb2Nlc3NJMThuQXR0cmlidXRlLlxuICovXG5saWIuTWVzc2FnZU1hbmFnZXIucHJvdG90eXBlLnByb2Nlc3NJMThuQXR0cmlidXRlcyA9IGZ1bmN0aW9uKGRvbSkge1xuICB2YXIgbm9kZXMgPSBkb20ucXVlcnlTZWxlY3RvckFsbCgnW2kxOG5dJyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykgdGhpcy5wcm9jZXNzSTE4bkF0dHJpYnV0ZShub2Rlc1tpXSk7XG59O1xuXG4vKipcbiAqIFByb2Nlc3MgdGhlIFwiaTE4blwiIGF0dHJpYnV0ZSBpbiB0aGUgc3BlY2lmaWVkIG5vZGUuXG4gKlxuICogVGhlIGkxOG4gYXR0cmlidXRlIHNob3VsZCBjb250YWluIGEgSlNPTiBvYmplY3QuICBUaGUga2V5cyBhcmUgdGFrZW4gdG9cbiAqIGJlIGF0dHJpYnV0ZSBuYW1lcywgYW5kIHRoZSB2YWx1ZXMgYXJlIG1lc3NhZ2UgbmFtZXMuXG4gKlxuICogSWYgdGhlIEpTT04gb2JqZWN0IGhhcyBhIFwiX1wiICh1bmRlcnNjb3JlKSBrZXksIGl0cyB2YWx1ZSBpcyB1c2VkIGFzIHRoZVxuICogdGV4dENvbnRlbnQgb2YgdGhlIGVsZW1lbnQuXG4gKlxuICogTWVzc2FnZSBuYW1lcyBjYW4gcmVmZXIgdG8gb3RoZXIgYXR0cmlidXRlcyBvbiB0aGUgc2FtZSBlbGVtZW50IHdpdGggYnlcbiAqIHByZWZpeGluZyB3aXRoIGEgZG9sbGFyIHNpZ24uICBGb3IgZXhhbXBsZS4uLlxuICpcbiAqICAgPGJ1dHRvbiBpZD0nc2VuZC1idXR0b24nXG4gKiAgICAgICAgICAgaTE4bj0ne1wiYXJpYS1sYWJlbFwiOiBcIiRpZFwiLCBcIl9cIjogXCJTRU5EX0JVVFRPTl9MQUJFTFwifSdcbiAqICAgICAgICAgICA+PC9idXR0b24+XG4gKlxuICogVGhlIGFyaWEtbGFiZWwgbWVzc2FnZSBuYW1lIHdpbGwgYmUgY29tcHV0ZWQgYXMgXCJTRU5EX0JVVFRPTl9BUklBX0xBQkVMXCIuXG4gKiBOb3RpY2UgdGhhdCB0aGUgXCJpZFwiIGF0dHJpYnV0ZSB3YXMgYXBwZW5kZWQgdG8gdGhlIHRhcmdldCBhdHRyaWJ1dGUsIGFuZFxuICogdGhlIHJlc3VsdCBjb252ZXJ0ZWQgdG8gVVBQRVJfQU5EX1VOREVSIHN0eWxlLlxuICovXG5saWIuTWVzc2FnZU1hbmFnZXIucHJvdG90eXBlLnByb2Nlc3NJMThuQXR0cmlidXRlID0gZnVuY3Rpb24obm9kZSkge1xuICAvLyBDb252ZXJ0IHRoZSBcImxvd2VyLWFuZC1kYXNoZXNcIiBhdHRyaWJ1dGUgbmFtZXMgaW50b1xuICAvLyBcIlVQUEVSX0FORF9VTkRFUlwiIHN0eWxlLlxuICBjb25zdCB0aHVuayA9IHN0ciA9PiBzdHIucmVwbGFjZSgvLS9nLCAnXycpLnRvVXBwZXJDYXNlKCk7XG5cbiAgdmFyIGkxOG4gPSBub2RlLmdldEF0dHJpYnV0ZSgnaTE4bicpO1xuICBpZiAoIWkxOG4pIHJldHVybjtcblxuICB0cnkge1xuICAgIGkxOG4gPSBKU09OLnBhcnNlKGkxOG4pO1xuICB9IGNhdGNoIChleCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJDYW4ndCBwYXJzZSBcIiArIG5vZGUudGFnTmFtZSArICcjJyArIG5vZGUuaWQgKyAnOiAnICsgaTE4bik7XG4gICAgdGhyb3cgZXg7XG4gIH1cblxuICAvLyBMb2FkIGFsbCB0aGUgbWVzc2FnZXMgc3BlY2lmaWVkIGluIHRoZSBpMThuIGF0dHJpYnV0ZXMuXG4gIGZvciAodmFyIGtleSBpbiBpMThuKSB7XG4gICAgLy8gVGhlIG5vZGUgYXR0cmlidXRlIHdlJ2xsIGJlIHNldHRpbmcuXG4gICAgdmFyIGF0dHIgPSBrZXk7XG5cbiAgICB2YXIgbXNnbmFtZSA9IGkxOG5ba2V5XTtcbiAgICAvLyBGb3IgXCI9Zm9vXCIsIHJlLXVzZSB0aGUgcmVmZXJlbmNlZCBtZXNzYWdlIG5hbWUuXG4gICAgaWYgKG1zZ25hbWUuc3RhcnRzV2l0aCgnPScpKSB7XG4gICAgICBrZXkgPSBtc2duYW1lLnN1YnN0cigxKTtcbiAgICAgIG1zZ25hbWUgPSBpMThuW2tleV07XG4gICAgfVxuXG4gICAgLy8gRm9yIFwiJGZvb1wiLCBjYWxjdWxhdGUgdGhlIG1lc3NhZ2UgbmFtZS5cbiAgICBpZiAobXNnbmFtZS5zdGFydHNXaXRoKCckJykpXG4gICAgICBtc2duYW1lID0gdGh1bmsobm9kZS5nZXRBdHRyaWJ1dGUobXNnbmFtZS5zdWJzdHIoMSkpICsgJ18nICsga2V5KTtcblxuICAgIC8vIEZpbmFsbHkgbG9hZCB0aGUgbWVzc2FnZS5cbiAgICB2YXIgbXNnID0gdGhpcy5nZXQobXNnbmFtZSk7XG4gICAgaWYgKGF0dHIgPT0gJ18nKSBub2RlLnRleHRDb250ZW50ID0gbXNnO1xuICAgIGVsc2Ugbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ciwgbXNnKTtcbiAgfVxufTtcbi8vIFNPVVJDRSBGSUxFOiBsaWJkb3QvanMvbGliX3ByZWZlcmVuY2VfbWFuYWdlci5qc1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBPUyBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmb3IgbGliLlByZWZlcmVuY2VNYW5hZ2VyIG9iamVjdHMuXG4gKlxuICogVGhlc2Ugb2JqZWN0cyBkZWFsIHdpdGggcGVyc2lzdGluZyBjaGFuZ2VzIHRvIHN0YWJsZSBzdG9yYWdlIGFuZCBub3RpZnlpbmdcbiAqIGNvbnN1bWVycyB3aGVuIHByZWZlcmVuY2VzIGNoYW5nZS5cbiAqXG4gKiBJdCBpcyBpbnRlbmRlZCB0aGF0IHRoZSBiYWNraW5nIHN0b3JlIGNvdWxkIGJlIHNvbWV0aGluZyBvdGhlciB0aGFuIEhUTUw1XG4gKiBzdG9yYWdlLCBidXQgdGhlcmUgYXJlbid0IGFueSB1c2UgY2FzZXMgYXQgdGhlIG1vbWVudC4gIEluIHRoZSBmdXR1cmUgdGhlcmVcbiAqIG1heSBiZSBhIGNocm9tZSBhcGkgdG8gc3RvcmUgc3luYy1hYmxlIG5hbWUvdmFsdWUgcGFpcnMsIGFuZCB3ZSdkIHdhbnRcbiAqIHRoYXQuXG4gKlxuICogQHBhcmFtIHtsaWIuU3RvcmFnZS4qfSBzdG9yYWdlIFRoZSBzdG9yYWdlIG9iamVjdCB0byB1c2UgYXMgYSBiYWNraW5nXG4gKiAgICAgc3RvcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0X3ByZWZpeCBUaGUgb3B0aW9uYWwgcHJlZml4IHRvIGJlIHVzZWQgZm9yIGFsbCBwcmVmZXJlbmNlXG4gKiAgICAgbmFtZXMuICBUaGUgJy8nIGNoYXJhY3RlciBzaG91bGQgYmUgdXNlZCB0byBzZXBhcmF0ZSBsZXZlbHMgb2YgaGllcmFyY2h5LFxuICogICAgIGlmIHlvdSdyZSBnb2luZyB0byBoYXZlIHRoYXQga2luZCBvZiB0aGluZy4gIElmIHByb3ZpZGVkLCB0aGUgcHJlZml4XG4gKiAgICAgc2hvdWxkIHN0YXJ0IHdpdGggYSAnLycuICBJZiBub3QgcHJvdmlkZWQsIGl0IGRlZmF1bHRzIHRvICcvJy5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyID0gZnVuY3Rpb24oc3RvcmFnZSwgb3B0X3ByZWZpeCkge1xuICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuICB0aGlzLnN0b3JhZ2VPYnNlcnZlcl8gPSB0aGlzLm9uU3RvcmFnZUNoYW5nZV8uYmluZCh0aGlzKTtcblxuICB0aGlzLmlzQWN0aXZlXyA9IGZhbHNlO1xuICB0aGlzLmFjdGl2YXRlKCk7XG5cbiAgdGhpcy50cmFjZSA9IGZhbHNlO1xuXG4gIHZhciBwcmVmaXggPSBvcHRfcHJlZml4IHx8ICcvJztcbiAgaWYgKCFwcmVmaXguZW5kc1dpdGgoJy8nKSkgcHJlZml4ICs9ICcvJztcblxuICB0aGlzLnByZWZpeCA9IHByZWZpeDtcblxuICAvLyBJbnRlcm5hbCBzdGF0ZSBmb3Igd2hlbiB3ZSdyZSBkb2luZyBhIGJ1bGsgaW1wb3J0IGZyb20gSlNPTiBhbmQgd2Ugd2FudFxuICAvLyB0byBlbGlkZSByZWR1bmRhbnQgc3RvcmFnZSB3cml0ZXMgKGZvciBxdW90YSByZWFzb25zKS5cbiAgdGhpcy5pc0ltcG9ydGluZ0pzb25fID0gZmFsc2U7XG5cbiAgdGhpcy5wcmVmUmVjb3Jkc18gPSB7fTtcbiAgdGhpcy5nbG9iYWxPYnNlcnZlcnNfID0gW107XG5cbiAgdGhpcy5jaGlsZEZhY3Rvcmllc18gPSB7fTtcblxuICAvLyBNYXAgb2YgbGlzdC1uYW1lIHRvIHttYXAgb2YgY2hpbGQgcHJlZiBtYW5hZ2Vyc31cbiAgLy8gQXMgaW4uLi5cbiAgLy9cbiAgLy8gIHRoaXMuY2hpbGRMaXN0c18gPSB7XG4gIC8vICAgICdwcm9maWxlLWlkcyc6IHtcbiAgLy8gICAgICAnb25lJzogUHJlZmVyZW5jZU1hbmFnZXIsXG4gIC8vICAgICAgJ3R3byc6IFByZWZlcmVuY2VNYW5hZ2VyLFxuICAvLyAgICAgIC4uLlxuICAvLyAgICB9LFxuICAvL1xuICAvLyAgICAnZnJvYi1pZHMnOiB7XG4gIC8vICAgICAgLi4uXG4gIC8vICAgIH1cbiAgLy8gIH1cbiAgdGhpcy5jaGlsZExpc3RzXyA9IHt9O1xufTtcblxuLyoqXG4gKiBVc2VkIGludGVybmFsbHkgdG8gaW5kaWNhdGUgdGhhdCB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgcHJlZmVyZW5jZSBzaG91bGRcbiAqIGJlIHRha2VuIGZyb20gdGhlIGRlZmF1bHQgdmFsdWUgZGVmaW5lZCB3aXRoIHRoZSBwcmVmZXJlbmNlLlxuICpcbiAqIEVxdWFsaXR5IHRlc3RzIGFnYWluc3QgdGhpcyB2YWx1ZSBNVVNUIHVzZSAnPT09JyBvciAnIT09JyB0byBiZSBhY2N1cmF0ZS5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLnByb3RvdHlwZS5ERUZBVUxUX1ZBTFVFID0gbGliLmYuY3JlYXRlRW51bSgnREVGQVVMVCcpO1xuXG4vKipcbiAqIEFuIGluZGl2aWR1YWwgcHJlZmVyZW5jZS5cbiAqXG4gKiBUaGVzZSBvYmplY3RzIGFyZSBtYW5hZ2VkIGJ5IHRoZSBQcmVmZXJlbmNlTWFuYWdlciwgeW91IHNob3VsZG4ndCBuZWVkIHRvXG4gKiBoYW5kbGUgdGhlbSBkaXJlY3RseS5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLlJlY29yZCA9IGZ1bmN0aW9uKG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgdGhpcy5jdXJyZW50VmFsdWUgPSB0aGlzLkRFRkFVTFRfVkFMVUU7XG4gIHRoaXMub2JzZXJ2ZXJzID0gW107XG59O1xuXG4vKipcbiAqIEEgbG9jYWwgY29weSBvZiB0aGUgREVGQVVMVF9WQUxVRSBjb25zdGFudCB0byBtYWtlIGl0IGxlc3MgdmVyYm9zZS5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLlJlY29yZC5wcm90b3R5cGUuREVGQVVMVF9WQUxVRSA9XG4gIGxpYi5QcmVmZXJlbmNlTWFuYWdlci5wcm90b3R5cGUuREVGQVVMVF9WQUxVRTtcblxuLyoqXG4gKiBSZWdpc3RlciBhIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiB0aGlzIHByZWZlcmVuY2UgY2hhbmdlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlLCBzdHJpbmcsIGxpYi5QcmVmZXJlbmNlTWFuYWdlcn0gb2JzZXJ2ZXIgVGhlIGZ1bmN0aW9uXG4gKiAgICAgdG8gaW52b2tlLiAgSXQgd2lsbCByZWNlaXZlIHRoZSBuZXcgdmFsdWUsIHRoZSBuYW1lIG9mIHRoZSBwcmVmZXJlbmNlLFxuICogICAgIGFuZCBhIHJlZmVyZW5jZSB0byB0aGUgUHJlZmVyZW5jZU1hbmFnZXIgYXMgcGFyYW1ldGVycy5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLlJlY29yZC5wcm90b3R5cGUuYWRkT2JzZXJ2ZXIgPSBmdW5jdGlvbihvYnNlcnZlcikge1xuICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbn07XG5cbi8qKlxuICogVW5yZWdpc3RlciBhbiBvYnNlcnZlciBjYWxsYmFjay5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvYnNlcnZlciBBIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBjYWxsYmFjay5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLlJlY29yZC5wcm90b3R5cGUucmVtb3ZlT2JzZXJ2ZXIgPSBmdW5jdGlvbihvYnNlcnZlcikge1xuICB2YXIgaSA9IHRoaXMub2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpO1xuICBpZiAoaSA+PSAwKSB0aGlzLm9ic2VydmVycy5zcGxpY2UoaSwgMSk7XG59O1xuXG4vKipcbiAqIEZldGNoIHRoZSB2YWx1ZSBvZiB0aGlzIHByZWZlcmVuY2UuXG4gKi9cbmxpYi5QcmVmZXJlbmNlTWFuYWdlci5SZWNvcmQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5jdXJyZW50VmFsdWUgPT09IHRoaXMuREVGQVVMVF9WQUxVRSkge1xuICAgIGlmICgvXihzdHJpbmd8bnVtYmVyKSQvLnRlc3QodHlwZW9mIHRoaXMuZGVmYXVsdFZhbHVlKSlcbiAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRWYWx1ZTtcblxuICAgIGlmICh0eXBlb2YgdGhpcy5kZWZhdWx0VmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgIC8vIFdlIHdhbnQgdG8gcmV0dXJuIGEgQ09QWSBvZiB0aGUgZGVmYXVsdCB2YWx1ZSBzbyB0aGF0IHVzZXJzIGNhblxuICAgICAgLy8gbW9kaWZ5IHRoZSBhcnJheSBvciBvYmplY3Qgd2l0aG91dCBjaGFuZ2luZyB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZGVmYXVsdFZhbHVlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VycmVudFZhbHVlO1xufTtcblxuLyoqXG4gKiBTdG9wIHRoaXMgcHJlZmVyZW5jZSBtYW5hZ2VyIGZyb20gdHJhY2tpbmcgc3RvcmFnZSBjaGFuZ2VzLlxuICpcbiAqIENhbGwgdGhpcyBpZiB5b3UncmUgZ29pbmcgdG8gc3dhcCBvdXQgb25lIHByZWZlcmVuY2UgbWFuYWdlciBmb3IgYW5vdGhlciBzb1xuICogdGhhdCB5b3UgZG9uJ3QgZ2V0IG5vdGlmaWVkIGFib3V0IGlycmVsZXZhbnQgY2hhbmdlcy5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLnByb3RvdHlwZS5kZWFjdGl2YXRlID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5pc0FjdGl2ZV8pIHRocm93IG5ldyBFcnJvcignTm90IGFjdGl2YXRlZCcpO1xuXG4gIHRoaXMuaXNBY3RpdmVfID0gZmFsc2U7XG4gIHRoaXMuc3RvcmFnZS5yZW1vdmVPYnNlcnZlcih0aGlzLnN0b3JhZ2VPYnNlcnZlcl8pO1xufTtcblxuLyoqXG4gKiBTdGFydCB0cmFja2luZyBzdG9yYWdlIGNoYW5nZXMuXG4gKlxuICogSWYgeW91IHByZXZpb3VzbHkgZGVhY3RpdmF0ZWQgdGhpcyBwcmVmZXJlbmNlIG1hbmFnZXIsIHlvdSBjYW4gcmVhY3RpdmF0ZSBpdFxuICogd2l0aCB0aGlzIG1ldGhvZC4gIFlvdSBkb24ndCBuZWVkIHRvIGNhbGwgdGhpcyBhdCBpbml0aWFsaXphdGlvbiB0aW1lLCBhc1xuICogaXQncyBhdXRvbWF0aWNhbGx5IGNhbGxlZCBhcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3Rvci5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5pc0FjdGl2ZV8pIHRocm93IG5ldyBFcnJvcignQWxyZWFkeSBhY3RpdmF0ZWQnKTtcblxuICB0aGlzLmlzQWN0aXZlXyA9IHRydWU7XG4gIHRoaXMuc3RvcmFnZS5hZGRPYnNlcnZlcih0aGlzLnN0b3JhZ2VPYnNlcnZlcl8pO1xufTtcblxuLyoqXG4gKiBSZWFkIHRoZSBiYWNraW5nIHN0b3JhZ2UgZm9yIHRoZXNlIHByZWZlcmVuY2VzLlxuICpcbiAqIFlvdSBzaG91bGQgZG8gdGhpcyBvbmNlIGF0IGluaXRpYWxpemF0aW9uIHRpbWUgdG8gcHJpbWUgdGhlIGxvY2FsIGNhY2hlXG4gKiBvZiBwcmVmZXJlbmNlIHZhbHVlcy4gIFRoZSBwcmVmZXJlbmNlIG1hbmFnZXIgd2lsbCBtb25pdG9yIHRoZSBiYWNraW5nXG4gKiBzdG9yYWdlIGZvciBjaGFuZ2VzLCBzbyB5b3Ugc2hvdWxkIG5vdCBuZWVkIHRvIGNhbGwgdGhpcyBtb3JlIHRoYW4gb25jZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJlY3Vyc2l2ZWx5IHJlYWRzIHN0b3JhZ2UgZm9yIGFsbCBjaGlsZCBwcmVmZXJlbmNlIG1hbmFnZXJzIGFzXG4gKiB3ZWxsLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYXN5bmNocm9ub3VzLCBpZiB5b3UgbmVlZCB0byByZWFkIHByZWZlcmVuY2UgdmFsdWVzLCB5b3VcbiAqICptdXN0KiB3YWl0IGZvciB0aGUgY2FsbGJhY2suXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlIHJlYWRcbiAqICAgICBoYXMgY29tcGxldGVkLlxuICovXG5saWIuUHJlZmVyZW5jZU1hbmFnZXIucHJvdG90eXBlLnJlYWRTdG9yYWdlID0gZnVuY3Rpb24ob3B0X2NhbGxiYWNrKSB7XG4gIHZhciBwZW5kaW5nQ2hpbGRyZW4gPSAwO1xuXG4gIGZ1bmN0aW9uIG9uQ2hpbGRDb21wbGV0ZSgpIHtcbiAgICBpZiAoLS1wZW5kaW5nQ2hpbGRyZW4gPT0gMCAmJiBvcHRfY2FsbGJhY2spIG9wdF9jYWxsYmFjaygpO1xuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLnByZWZSZWNvcmRzXykubWFwKGVsID0+IHRoaXMucHJlZml4ICsgZWwpO1xuXG4gIGlmICh0aGlzLnRyYWNlKSBjb25zb2xlLmxvZygnUHJlZmVyZW5jZXMgcmVhZDogJyArIHRoaXMucHJlZml4KTtcblxuICB0aGlzLnN0b3JhZ2UuZ2V0SXRlbXMoXG4gICAga2V5cyxcbiAgICBmdW5jdGlvbihpdGVtcykge1xuICAgICAgdmFyIHByZWZpeExlbmd0aCA9IHRoaXMucHJlZml4Lmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIga2V5IGluIGl0ZW1zKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zW2tleV07XG4gICAgICAgIHZhciBuYW1lID0ga2V5LnN1YnN0cihwcmVmaXhMZW5ndGgpO1xuICAgICAgICB2YXIgbmVlZFN5bmMgPVxuICAgICAgICAgIG5hbWUgaW4gdGhpcy5jaGlsZExpc3RzXyAmJlxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHZhbHVlKSAhPVxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5wcmVmUmVjb3Jkc19bbmFtZV0uY3VycmVudFZhbHVlKTtcblxuICAgICAgICB0aGlzLnByZWZSZWNvcmRzX1tuYW1lXS5jdXJyZW50VmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAobmVlZFN5bmMpIHtcbiAgICAgICAgICBwZW5kaW5nQ2hpbGRyZW4rKztcbiAgICAgICAgICB0aGlzLnN5bmNDaGlsZExpc3QobmFtZSwgb25DaGlsZENvbXBsZXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGVuZGluZ0NoaWxkcmVuID09IDAgJiYgb3B0X2NhbGxiYWNrKSBzZXRUaW1lb3V0KG9wdF9jYWxsYmFjayk7XG4gICAgfS5iaW5kKHRoaXMpLFxuICApO1xufTtcblxuLyoqXG4gKiBEZWZpbmUgYSBwcmVmZXJlbmNlLlxuICpcbiAqIFRoaXMgcmVnaXN0ZXJzIGEgbmFtZSwgZGVmYXVsdCB2YWx1ZSwgYW5kIG9uQ2hhbmdlIGhhbmRsZXIgZm9yIGEgcHJlZmVyZW5jZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJlZmVyZW5jZS4gIFRoaXMgd2lsbCBiZSBwcmVmaXhlZCBieVxuICogICAgIHRoZSBwcmVmaXggb2YgdGhpcyBQcmVmZXJlbmNlTWFuYWdlciBiZWZvcmUgd3JpdHRlbiB0byBsb2NhbCBzdG9yYWdlLlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfGJvb2xlYW58T2JqZWN0fEFycmF5fG51bGx9IHZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlIG9mXG4gKiAgICAgdGhpcyBwcmVmZXJlbmNlLiAgQW55dGhpbmcgdGhhdCBjYW4gYmUgcmVwcmVzZW50ZWQgaW4gSlNPTiBpcyBhIHZhbGlkXG4gKiAgICAgZGVmYXVsdCB2YWx1ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWUsIHN0cmluZywgbGliLlByZWZlcmVuY2VNYW5hZ2VyfSBvcHRfb2JzZXJ2ZXIgQVxuICogICAgIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSBwcmVmZXJlbmNlIGNoYW5nZXMuICBJdCB3aWxsIHJlY2VpdmUgdGhlIG5ld1xuICogICAgIHZhbHVlLCB0aGUgbmFtZSBvZiB0aGUgcHJlZmVyZW5jZSwgYW5kIGEgcmVmZXJlbmNlIHRvIHRoZVxuICogICAgIFByZWZlcmVuY2VNYW5hZ2VyIGFzIHBhcmFtZXRlcnMuXG4gKi9cbmxpYi5QcmVmZXJlbmNlTWFuYWdlci5wcm90b3R5cGUuZGVmaW5lUHJlZmVyZW5jZSA9IGZ1bmN0aW9uKFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgb3B0X29uQ2hhbmdlLFxuKSB7XG4gIHZhciByZWNvcmQgPSB0aGlzLnByZWZSZWNvcmRzX1tuYW1lXTtcbiAgaWYgKHJlY29yZCkge1xuICAgIHRoaXMuY2hhbmdlRGVmYXVsdChuYW1lLCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVjb3JkID0gdGhpcy5wcmVmUmVjb3Jkc19bbmFtZV0gPSBuZXcgbGliLlByZWZlcmVuY2VNYW5hZ2VyLlJlY29yZChcbiAgICAgIG5hbWUsXG4gICAgICB2YWx1ZSxcbiAgICApO1xuICB9XG5cbiAgaWYgKG9wdF9vbkNoYW5nZSkgcmVjb3JkLmFkZE9ic2VydmVyKG9wdF9vbkNoYW5nZSk7XG59O1xuXG4vKipcbiAqIERlZmluZSBtdWx0aXBsZSBwcmVmZXJlbmNlcyB3aXRoIGEgc2luZ2xlIGZ1bmN0aW9uIGNhbGwuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGVmYXVsdHMgQW4gYXJyYXkgb2YgMy1lbGVtZW50IGFycmF5cy4gIEVhY2ggdGhyZWUgZWxlbWVudFxuICogICAgIGFycmF5IHNob3VsZCBjb250YWluIHRoZSBba2V5LCB2YWx1ZSwgb25DaGFuZ2VdIHBhcmFtZXRlcnMgZm9yIGFcbiAqICAgICBwcmVmZXJlbmNlLlxuICovXG5saWIuUHJlZmVyZW5jZU1hbmFnZXIucHJvdG90eXBlLmRlZmluZVByZWZlcmVuY2VzID0gZnVuY3Rpb24oZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWZhdWx0cy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuZGVmaW5lUHJlZmVyZW5jZShkZWZhdWx0c1tpXVswXSwgZGVmYXVsdHNbaV1bMV0sIGRlZmF1bHRzW2ldWzJdKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZWZpbmUgYW4gb3JkZXJlZCBsaXN0IG9mIGNoaWxkIHByZWZlcmVuY2VzLlxuICpcbiAqIENoaWxkIHByZWZlcmVuY2VzIGFyZSBkaWZmZXJlbnQgZnJvbSBqdXN0IHN0b3JpbmcgYW4gYXJyYXkgb2YgSlNPTiBvYmplY3RzXG4gKiBpbiB0aGF0IGVhY2ggY2hpbGQgaXMgYW4gaW5zdGFuY2Ugb2YgYSBwcmVmZXJlbmNlIG1hbmFnZXIuICBUaGlzIG1lYW5zIHlvdVxuICogY2FuIG9ic2VydmUgY2hhbmdlcyB0byBpbmRpdmlkdWFsIGNoaWxkIHByZWZlcmVuY2VzLCBhbmQgZ2V0IHNvbWUgdmFsaWRhdGlvblxuICogdGhhdCB5b3UncmUgbm90IHJlYWRpbmcgb3Igd3JpdGluZyB0byBhbiB1bmRlZmluZWQgY2hpbGQgcHJlZmVyZW5jZSB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbGlzdE5hbWUgQSBuYW1lIGZvciB0aGUgbGlzdCBvZiBjaGlsZHJlbi4gIFRoaXMgbXVzdCBiZVxuICogICAgIHVuaXF1ZSBpbiB0aGlzIHByZWZlcmVuY2UgbWFuYWdlci4gIFRoZSBsaXN0TmFtZSB3aWxsIGJlY29tZSBhXG4gKiAgICAgcHJlZmVyZW5jZSBvbiB0aGlzIFByZWZlcmVuY2VNYW5hZ2VyIHVzZWQgdG8gc3RvcmUgdGhlIG9yZGVyZWQgbGlzdCBvZlxuICogICAgIGNoaWxkIGlkcy4gIEl0IGlzIGFsc28gdXNlZCBpbiBnZXQvYWRkL3JlbW92ZSBvcGVyYXRpb25zIHRvIGlkZW50aWZ5IHRoZVxuICogICAgIGxpc3Qgb2YgY2hpbGRyZW4gdG8gb3BlcmF0ZSBvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNoaWxkRmFjdG9yeSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGdlbmVyYXRlXG4gKiAgICAgaW5zdGFuY2VzIG9mIHRoZXNlIGNoaWxkcmVuLiAgVGhlIGZhY3RvcnkgZnVuY3Rpb24gd2lsbCByZWNlaXZlIHRoZVxuICogICAgIHBhcmVudCBsaWIuUHJlZmVyZW5jZU1hbmFnZXIgb2JqZWN0IGFuZCBhIHVuaXF1ZSBpZCBmb3IgdGhlIG5ldyBjaGlsZFxuICogICAgIHByZWZlcmVuY2VzLlxuICovXG5saWIuUHJlZmVyZW5jZU1hbmFnZXIucHJvdG90eXBlLmRlZmluZUNoaWxkcmVuID0gZnVuY3Rpb24oXG4gIGxpc3ROYW1lLFxuICBjaGlsZEZhY3RvcnksXG4pIHtcbiAgLy8gRGVmaW5lIGEgcHJlZmVyZW5jZSB0byBob2xkIHRoZSBvcmRlcmVkIGxpc3Qgb2YgY2hpbGQgaWRzLlxuICB0aGlzLmRlZmluZVByZWZlcmVuY2UoXG4gICAgbGlzdE5hbWUsXG4gICAgW10sXG4gICAgdGhpcy5vbkNoaWxkTGlzdENoYW5nZV8uYmluZCh0aGlzLCBsaXN0TmFtZSksXG4gICk7XG4gIHRoaXMuY2hpbGRGYWN0b3JpZXNfW2xpc3ROYW1lXSA9IGNoaWxkRmFjdG9yeTtcbiAgdGhpcy5jaGlsZExpc3RzX1tsaXN0TmFtZV0gPSB7fTtcbn07XG5cbi8qKlxuICogUmVnaXN0ZXIgdG8gb2JzZXJ2ZSBwcmVmZXJlbmNlIGNoYW5nZXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZ2xvYmFsIEEgY2FsbGJhY2sgdGhhdCB3aWxsIGhhcHBlbiBmb3IgZXZlcnkgcHJlZmVyZW5jZS5cbiAqICAgICBQYXNzIG51bGwgaWYgeW91IGRvbid0IG5lZWQgb25lLlxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBBIG1hcCBvZiBwcmVmZXJlbmNlIHNwZWNpZmljIGNhbGxiYWNrcy4gIFBhc3MgbnVsbCBpZlxuICogICAgIHlvdSBkb24ndCBuZWVkIGFueS5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLnByb3RvdHlwZS5hZGRPYnNlcnZlcnMgPSBmdW5jdGlvbihnbG9iYWwsIG1hcCkge1xuICBpZiAoZ2xvYmFsICYmIHR5cGVvZiBnbG9iYWwgIT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGFyYW06IGdsb2JhbHMnKTtcblxuICBpZiAoZ2xvYmFsKSB0aGlzLmdsb2JhbE9ic2VydmVyc18ucHVzaChnbG9iYWwpO1xuXG4gIGlmICghbWFwKSByZXR1cm47XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBtYXApIHtcbiAgICBpZiAoIShuYW1lIGluIHRoaXMucHJlZlJlY29yZHNfKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmVmZXJlbmNlOiAnICsgbmFtZSk7XG5cbiAgICB0aGlzLnByZWZSZWNvcmRzX1tuYW1lXS5hZGRPYnNlcnZlcihtYXBbbmFtZV0pO1xuICB9XG59O1xuXG4vKipcbiAqIERpc3BhdGNoIHRoZSBjaGFuZ2Ugb2JzZXJ2ZXJzIGZvciBhbGwga25vd24gcHJlZmVyZW5jZXMuXG4gKlxuICogSXQgbWF5IGJlIHVzZWZ1bCB0byBjYWxsIHRoaXMgYWZ0ZXIgcmVhZFN0b3JhZ2UgY29tcGxldGVzLCBpbiBvcmRlciB0b1xuICogZ2V0IGFwcGxpY2F0aW9uIHN0YXRlIGluIHN5bmMgd2l0aCB1c2VyIHByZWZlcmVuY2VzLlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWQgaWYgeW91J3ZlIGNoYW5nZWQgYSBwcmVmZXJlbmNlIG1hbmFnZXIgb3V0IGZyb20gdW5kZXJcbiAqIGEgbGl2ZSBvYmplY3QsIGZvciBleGFtcGxlIHdoZW4gc3dpdGNoaW5nIHRvIGEgZGlmZmVyZW50IHByZWZpeC5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLnByb3RvdHlwZS5ub3RpZnlBbGwgPSBmdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLnByZWZSZWNvcmRzXykge1xuICAgIHRoaXMubm90aWZ5Q2hhbmdlXyhuYW1lKTtcbiAgfVxufTtcblxuLyoqXG4gKiBOb3RpZnkgdGhlIGNoYW5nZSBvYnNlcnZlcnMgZm9yIGEgZ2l2ZW4gcHJlZmVyZW5jZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJlZmVyZW5jZSB0aGF0IGNoYW5nZWQuXG4gKi9cbmxpYi5QcmVmZXJlbmNlTWFuYWdlci5wcm90b3R5cGUubm90aWZ5Q2hhbmdlXyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHJlY29yZCA9IHRoaXMucHJlZlJlY29yZHNfW25hbWVdO1xuICBpZiAoIXJlY29yZCkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByZWZlcmVuY2U6ICcgKyBuYW1lKTtcblxuICB2YXIgY3VycmVudFZhbHVlID0gcmVjb3JkLmdldCgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5nbG9iYWxPYnNlcnZlcnNfLmxlbmd0aDsgaSsrKVxuICAgIHRoaXMuZ2xvYmFsT2JzZXJ2ZXJzX1tpXShuYW1lLCBjdXJyZW50VmFsdWUpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVjb3JkLm9ic2VydmVycy5sZW5ndGg7IGkrKykge1xuICAgIHJlY29yZC5vYnNlcnZlcnNbaV0oY3VycmVudFZhbHVlLCBuYW1lLCB0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgY2hpbGQgUHJlZmVyZW5jZU1hbmFnZXIgZm9yIHRoZSBnaXZlbiBjaGlsZCBsaXN0LlxuICpcbiAqIFRoZSBvcHRpb25hbCBoaW50IHBhcmFtZXRlciBpcyBhbiBvcGFxdWUgcHJlZml4IGFkZGVkIHRvIHRoZSBhdXRvLWdlbmVyYXRlZFxuICogdW5pcXVlIGlkIGZvciB0aGlzIGNoaWxkLiAgWW91ciBjaGlsZCBmYWN0b3J5IGNhbiBwYXJzZSBvdXQgdGhlIHByZWZpeFxuICogYW5kIHVzZSBpdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbGlzdE5hbWUgVGhlIGNoaWxkIGxpc3QgdG8gY3JlYXRlIHRoZSBuZXcgaW5zdGFuY2UgZnJvbS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRfaGludCBPcHRpb25hbCBoaW50IHRvIGluY2x1ZGUgaW4gdGhlIGNoaWxkIGlkLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdF9pZCBPcHRpb25hbCBpZCB0byBvdmVycmlkZSB0aGUgZ2VuZXJhdGVkIGlkLlxuICovXG5saWIuUHJlZmVyZW5jZU1hbmFnZXIucHJvdG90eXBlLmNyZWF0ZUNoaWxkID0gZnVuY3Rpb24oXG4gIGxpc3ROYW1lLFxuICBvcHRfaGludCxcbiAgb3B0X2lkLFxuKSB7XG4gIHZhciBpZHMgPSB0aGlzLmdldChsaXN0TmFtZSk7XG4gIHZhciBpZDtcblxuICBpZiAob3B0X2lkKSB7XG4gICAgaWQgPSBvcHRfaWQ7XG4gICAgaWYgKGlkcy5pbmRleE9mKGlkKSAhPSAtMSlcbiAgICAgIHRocm93IG5ldyBFcnJvcignRHVwbGljYXRlIGNoaWxkOiAnICsgbGlzdE5hbWUgKyAnOiAnICsgaWQpO1xuICB9IGVsc2Uge1xuICAgIC8vIFBpY2sgYSByYW5kb20sIHVuaXF1ZSA0LWRpZ2l0IGhleCBpZGVudGlmaWVyIGZvciB0aGUgbmV3IHByb2ZpbGUuXG4gICAgd2hpbGUgKCFpZCB8fCBpZHMuaW5kZXhPZihpZCkgIT0gLTEpIHtcbiAgICAgIGlkID0gbGliLmYucmFuZG9tSW50KDEsIDB4ZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgaWQgPSBsaWIuZi56cGFkKGlkLCA0KTtcbiAgICAgIGlmIChvcHRfaGludCkgaWQgPSBvcHRfaGludCArICc6JyArIGlkO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjaGlsZE1hbmFnZXIgPSB0aGlzLmNoaWxkRmFjdG9yaWVzX1tsaXN0TmFtZV0odGhpcywgaWQpO1xuICBjaGlsZE1hbmFnZXIudHJhY2UgPSB0aGlzLnRyYWNlO1xuICBjaGlsZE1hbmFnZXIucmVzZXRBbGwoKTtcblxuICB0aGlzLmNoaWxkTGlzdHNfW2xpc3ROYW1lXVtpZF0gPSBjaGlsZE1hbmFnZXI7XG5cbiAgaWRzLnB1c2goaWQpO1xuICB0aGlzLnNldChsaXN0TmFtZSwgaWRzLCB1bmRlZmluZWQsICF0aGlzLmlzSW1wb3J0aW5nSnNvbl8pO1xuXG4gIHJldHVybiBjaGlsZE1hbmFnZXI7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIGNoaWxkIHByZWZlcmVuY2VzIGluc3RhbmNlLlxuICpcbiAqIFJlbW92ZXMgYSBjaGlsZCBwcmVmZXJlbmNlIG1hbmFnZXIgYW5kIGNsZWFycyBhbnkgcHJlZmVyZW5jZXMgc3RvcmVkIGluIGl0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBsaXN0TmFtZSBUaGUgbmFtZSBvZiB0aGUgY2hpbGQgbGlzdCBjb250YWluaW5nIHRoZSBjaGlsZCB0b1xuICogICAgIHJlbW92ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgY2hpbGQgSUQuXG4gKi9cbmxpYi5QcmVmZXJlbmNlTWFuYWdlci5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbihsaXN0TmFtZSwgaWQpIHtcbiAgdmFyIHByZWZzID0gdGhpcy5nZXRDaGlsZChsaXN0TmFtZSwgaWQpO1xuICBwcmVmcy5yZXNldEFsbCgpO1xuXG4gIHZhciBpZHMgPSB0aGlzLmdldChsaXN0TmFtZSk7XG4gIHZhciBpID0gaWRzLmluZGV4T2YoaWQpO1xuICBpZiAoaSAhPSAtMSkge1xuICAgIGlkcy5zcGxpY2UoaSwgMSk7XG4gICAgdGhpcy5zZXQobGlzdE5hbWUsIGlkcywgdW5kZWZpbmVkLCAhdGhpcy5pc0ltcG9ydGluZ0pzb25fKTtcbiAgfVxuXG4gIGRlbGV0ZSB0aGlzLmNoaWxkTGlzdHNfW2xpc3ROYW1lXVtpZF07XG59O1xuXG4vKipcbiAqIFJldHVybiBhIGNoaWxkIFByZWZlcmVuY2VNYW5hZ2VyIGluc3RhbmNlIGZvciBhIGdpdmVuIGlkLlxuICpcbiAqIElmIHRoZSBjaGlsZCBsaXN0IG9yIGNoaWxkIGlkIGlzIG5vdCBrbm93biB0aGlzIHdpbGwgcmV0dXJuIHRoZSBzcGVjaWZpZWRcbiAqIGRlZmF1bHQgdmFsdWUgb3IgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIG5vIGRlZmF1bHQgdmFsdWUgaXMgcHJvdmlkZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGxpc3ROYW1lIFRoZSBjaGlsZCBsaXN0IHRvIGxvb2sgaW4uXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGNoaWxkIElELlxuICogQHBhcmFtIHsqfSBvcHRfZGVmYXVsdCBUaGUgb3B0aW9uYWwgZGVmYXVsdCB2YWx1ZSB0byByZXR1cm4gaWYgdGhlIGNoaWxkXG4gKiAgICAgaXMgbm90IGZvdW5kLlxuICovXG5saWIuUHJlZmVyZW5jZU1hbmFnZXIucHJvdG90eXBlLmdldENoaWxkID0gZnVuY3Rpb24obGlzdE5hbWUsIGlkLCBvcHRfZGVmYXVsdCkge1xuICBpZiAoIShsaXN0TmFtZSBpbiB0aGlzLmNoaWxkTGlzdHNfKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY2hpbGQgbGlzdDogJyArIGxpc3ROYW1lKTtcblxuICB2YXIgY2hpbGRMaXN0ID0gdGhpcy5jaGlsZExpc3RzX1tsaXN0TmFtZV07XG4gIGlmICghKGlkIGluIGNoaWxkTGlzdCkpIHtcbiAgICBpZiAodHlwZW9mIG9wdF9kZWZhdWx0ID09ICd1bmRlZmluZWQnKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIFwiJyArIGxpc3ROYW1lICsgJ1wiIGNoaWxkOiAnICsgaWQpO1xuXG4gICAgcmV0dXJuIG9wdF9kZWZhdWx0O1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTGlzdFtpZF07XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBsaXN0cyBvZiBjaGlsZCBpZHMuXG4gKlxuICogR2l2ZW4gdHdvIGFycmF5cyBvZiBjaGlsZCBpZHMsIHRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gYW4gb2JqZWN0XG4gKiB3aXRoIFwiYWRkZWRcIiwgXCJyZW1vdmVkXCIsIGFuZCBcImNvbW1vblwiIHByb3BlcnRpZXMuICBFYWNoIHByb3BlcnR5IGlzXG4gKiBhIG1hcCBvZiBjaGlsZC1pZCB0byBgdHJ1ZWAuICBGb3IgZXhhbXBsZSwgZ2l2ZW4uLi5cbiAqXG4gKiAgICBhID0gWydjaGlsZC14JywgJ2NoaWxkLXknXVxuICogICAgYiA9IFsnY2hpbGQteSddXG4gKlxuICogICAgZGlmZkNoaWxkTGlzdHMoYSwgYikgPT5cbiAqICAgICAgeyBhZGRlZDogeyAnY2hpbGQteCc6IHRydWUgfSwgcmVtb3ZlZDoge30sIGNvbW1vbjogeyAnY2hpbGQteSc6IHRydWUgfSB9XG4gKlxuICogVGhlIGFkZGVkL3JlbW92ZWQgcHJvcGVydGllcyBhc3N1bWUgdGhhdCBgYWAgaXMgdGhlIGN1cnJlbnQgbGlzdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5W3N0cmluZ119IGEgVGhlIG1vc3QgcmVjZW50IGxpc3Qgb2YgY2hpbGQgaWRzLlxuICogQHBhcmFtIHtBcnJheVtzdHJpbmddfSBiIEFuIG9sZGVyIGxpc3Qgb2YgY2hpbGQgaWRzLlxuICogQHJldHVybiB7T2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhZGRlZC9yZW1vdmVkL2NvbW1vbiBwcm9wZXJ0aWVzLlxuICovXG5saWIuUHJlZmVyZW5jZU1hbmFnZXIuZGlmZkNoaWxkTGlzdHMgPSBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBydiA9IHtcbiAgICBhZGRlZDoge30sXG4gICAgcmVtb3ZlZDoge30sXG4gICAgY29tbW9uOiB7fSxcbiAgfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYi5pbmRleE9mKGFbaV0pICE9IC0xKSB7XG4gICAgICBydi5jb21tb25bYVtpXV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBydi5hZGRlZFthW2ldXSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGJbaV0gaW4gcnYuYWRkZWQgfHwgYltpXSBpbiBydi5jb21tb24pIGNvbnRpbnVlO1xuXG4gICAgcnYucmVtb3ZlZFtiW2ldXSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gcnY7XG59O1xuXG4vKipcbiAqIFN5bmNocm9uaXplIGEgbGlzdCBvZiBjaGlsZCBQcmVmZXJlbmNlTWFuYWdlcnMgaW5zdGFuY2VzIHdpdGggdGhlIGN1cnJlbnRcbiAqIGxpc3Qgc3RvcmVkIGluIHByZWZzLlxuICpcbiAqIFRoaXMgd2lsbCBpbnN0YW50aWF0ZSBhbnkgbWlzc2luZyBtYW5hZ2VycyBhbmQgcmVhZCBjdXJyZW50IHByZWZlcmVuY2UgdmFsdWVzXG4gKiBmcm9tIHN0b3JhZ2UuICBBbnkgYWN0aXZlIG1hbmFnZXJzIHRoYXQgbm8gbG9uZ2VyIGFwcGVhciBpbiBwcmVmZXJlbmNlcyB3aWxsXG4gKiBiZSBkZWxldGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBsaXN0TmFtZSBUaGUgY2hpbGQgbGlzdCB0byBzeW5jaHJvbml6ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gb3B0X2NhbGxiYWNrIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSBzeW5jXG4gKiAgICAgaXMgY29tcGxldGUuXG4gKi9cbmxpYi5QcmVmZXJlbmNlTWFuYWdlci5wcm90b3R5cGUuc3luY0NoaWxkTGlzdCA9IGZ1bmN0aW9uKFxuICBsaXN0TmFtZSxcbiAgb3B0X2NhbGxiYWNrLFxuKSB7XG4gIHZhciBwZW5kaW5nQ2hpbGRyZW4gPSAwO1xuICBmdW5jdGlvbiBvbkNoaWxkU3RvcmFnZSgpIHtcbiAgICBpZiAoLS1wZW5kaW5nQ2hpbGRyZW4gPT0gMCAmJiBvcHRfY2FsbGJhY2spIG9wdF9jYWxsYmFjaygpO1xuICB9XG5cbiAgLy8gVGhlIGxpc3Qgb2YgY2hpbGQgaWRzIHRoYXQgd2UgKnNob3VsZCogaGF2ZSBhIG1hbmFnZXIgZm9yLlxuICB2YXIgY3VycmVudElkcyA9IHRoaXMuZ2V0KGxpc3ROYW1lKTtcblxuICAvLyBUaGUga25vd24gbWFuYWdlcnMgYXQgdGhlIHN0YXJ0IG9mIHRoZSBzeW5jLiAgQW55IG1hbmFnZXIgc3RpbGwgaW4gdGhpc1xuICAvLyBsaXN0IGF0IHRoZSBlbmQgc2hvdWxkIGJlIGRpc2NhcmRlZC5cbiAgdmFyIG9sZElkcyA9IE9iamVjdC5rZXlzKHRoaXMuY2hpbGRMaXN0c19bbGlzdE5hbWVdKTtcblxuICB2YXIgcnYgPSBsaWIuUHJlZmVyZW5jZU1hbmFnZXIuZGlmZkNoaWxkTGlzdHMoY3VycmVudElkcywgb2xkSWRzKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnRJZHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaWQgPSBjdXJyZW50SWRzW2ldO1xuXG4gICAgdmFyIG1hbmFnZXJJbmRleCA9IG9sZElkcy5pbmRleE9mKGlkKTtcbiAgICBpZiAobWFuYWdlckluZGV4ID49IDApIG9sZElkcy5zcGxpY2UobWFuYWdlckluZGV4LCAxKTtcblxuICAgIGlmICghdGhpcy5jaGlsZExpc3RzX1tsaXN0TmFtZV1baWRdKSB7XG4gICAgICB2YXIgY2hpbGRNYW5hZ2VyID0gdGhpcy5jaGlsZEZhY3Rvcmllc19bbGlzdE5hbWVdKHRoaXMsIGlkKTtcbiAgICAgIGlmICghY2hpbGRNYW5hZ2VyKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignVW5hYmxlIHRvIHJlc3RvcmUgY2hpbGQ6ICcgKyBsaXN0TmFtZSArICc6ICcgKyBpZCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjaGlsZE1hbmFnZXIudHJhY2UgPSB0aGlzLnRyYWNlO1xuICAgICAgdGhpcy5jaGlsZExpc3RzX1tsaXN0TmFtZV1baWRdID0gY2hpbGRNYW5hZ2VyO1xuICAgICAgcGVuZGluZ0NoaWxkcmVuKys7XG4gICAgICBjaGlsZE1hbmFnZXIucmVhZFN0b3JhZ2Uob25DaGlsZFN0b3JhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgb2xkSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVsZXRlIHRoaXMuY2hpbGRMaXN0c19bbGlzdE5hbWVdW29sZElkc1tpXV07XG4gIH1cblxuICBpZiAoIXBlbmRpbmdDaGlsZHJlbiAmJiBvcHRfY2FsbGJhY2spIHNldFRpbWVvdXQob3B0X2NhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogUmVzZXQgYSBwcmVmZXJlbmNlIHRvIGl0cyBkZWZhdWx0IHN0YXRlLlxuICpcbiAqIFRoaXMgd2lsbCBkaXNwYXRjaCB0aGUgb25DaGFuZ2UgaGFuZGxlciBpZiB0aGUgcHJlZmVyZW5jZSB2YWx1ZSBhY3R1YWxseVxuICogY2hhbmdlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgcHJlZmVyZW5jZSB0byByZXNldC5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHJlY29yZCA9IHRoaXMucHJlZlJlY29yZHNfW25hbWVdO1xuICBpZiAoIXJlY29yZCkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByZWZlcmVuY2U6ICcgKyBuYW1lKTtcblxuICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLnByZWZpeCArIG5hbWUpO1xuXG4gIGlmIChyZWNvcmQuY3VycmVudFZhbHVlICE9PSB0aGlzLkRFRkFVTFRfVkFMVUUpIHtcbiAgICByZWNvcmQuY3VycmVudFZhbHVlID0gdGhpcy5ERUZBVUxUX1ZBTFVFO1xuICAgIHRoaXMubm90aWZ5Q2hhbmdlXyhuYW1lKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXNldCBhbGwgcHJlZmVyZW5jZXMgYmFjayB0byB0aGVpciBkZWZhdWx0IHN0YXRlLlxuICovXG5saWIuUHJlZmVyZW5jZU1hbmFnZXIucHJvdG90eXBlLnJlc2V0QWxsID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjaGFuZ2VkID0gW107XG5cbiAgZm9yICh2YXIgbGlzdE5hbWUgaW4gdGhpcy5jaGlsZExpc3RzXykge1xuICAgIHZhciBjaGlsZExpc3QgPSB0aGlzLmNoaWxkTGlzdHNfW2xpc3ROYW1lXTtcbiAgICBmb3IgKHZhciBpZCBpbiBjaGlsZExpc3QpIHtcbiAgICAgIGNoaWxkTGlzdFtpZF0ucmVzZXRBbGwoKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBuYW1lIGluIHRoaXMucHJlZlJlY29yZHNfKSB7XG4gICAgaWYgKHRoaXMucHJlZlJlY29yZHNfW25hbWVdLmN1cnJlbnRWYWx1ZSAhPT0gdGhpcy5ERUZBVUxUX1ZBTFVFKSB7XG4gICAgICB0aGlzLnByZWZSZWNvcmRzX1tuYW1lXS5jdXJyZW50VmFsdWUgPSB0aGlzLkRFRkFVTFRfVkFMVUU7XG4gICAgICBjaGFuZ2VkLnB1c2gobmFtZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLnByZWZSZWNvcmRzXykubWFwKFxuICAgIGZ1bmN0aW9uKGVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmVmaXggKyBlbDtcbiAgICB9LmJpbmQodGhpcyksXG4gICk7XG5cbiAgdGhpcy5zdG9yYWdlLnJlbW92ZUl0ZW1zKGtleXMpO1xuXG4gIGNoYW5nZWQuZm9yRWFjaCh0aGlzLm5vdGlmeUNoYW5nZV8uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIHR3byB2YWx1ZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWQgbm90LWVxdWFsLlxuICpcbiAqIElmIGJvdGggdmFsdWVzIGFyZSB0aGUgc2FtZSBzY2FsYXIgdHlwZSBhbmQgY29tcGFyZSBlcXVhbCB0aGlzIGZ1bmN0aW9uXG4gKiByZXR1cm5zIGZhbHNlIChubyBkaWZmZXJlbmNlKSwgb3RoZXJ3aXNlIHJldHVybiB0cnVlLlxuICpcbiAqIFRoaXMgaXMgdXNlZCBpbiBwbGFjZXMgd2hlcmUgd2Ugd2FudCB0byBjaGVjayBpZiBhIHByZWZlcmVuY2UgaGFzIGNoYW5nZWQuXG4gKiBSYXRoZXIgdGhhbiB0YWtlIHRoZSB0aW1lIHRvIGNvbXBhcmUgY29tcGxleCB2YWx1ZXMgd2UganVzdCBjb25zaWRlciB0aGVtXG4gKiB0byBhbHdheXMgYmUgZGlmZmVyZW50LlxuICpcbiAqIEBwYXJhbSB7Kn0gYSBBIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IGIgQSB2YWx1ZSB0byBjb21wYXJlLlxuICovXG5saWIuUHJlZmVyZW5jZU1hbmFnZXIucHJvdG90eXBlLmRpZmYgPSBmdW5jdGlvbihhLCBiKSB7XG4gIC8vIElmIHRoZSB0eXBlcyBhcmUgZGlmZmVyZW50LCBvciB0aGUgdHlwZSBpcyBub3QgYSBzaW1wbGUgcHJpbWl0aXZlIG9uZS5cbiAgaWYgKFxuICAgIHR5cGVvZiBhICE9PSB0eXBlb2YgYiB8fFxuICAgICEvXih1bmRlZmluZWR8Ym9vbGVhbnxudW1iZXJ8c3RyaW5nKSQvLnRlc3QodHlwZW9mIGEpXG4gICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGEgIT09IGI7XG59O1xuXG4vKipcbiAqIENoYW5nZSB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByZWZlcmVuY2UuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgd2hlbiBzdWJjbGFzc2luZyBwcmVmZXJlbmNlIG1hbmFnZXJzLlxuICpcbiAqIFRoZSBmdW5jdGlvbiBkb2VzIG5vdCBhbHRlciB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgcHJlZmVyZW5jZSwgdW5sZXNzXG4gKiBpdCBoYXMgdGhlIG9sZCBkZWZhdWx0IHZhbHVlLiAgV2hlbiB0aGF0IGhhcHBlbnMsIHRoZSBjaGFuZ2Ugb2JzZXJ2ZXJzXG4gKiB3aWxsIGJlIG5vdGlmaWVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgdG8gY2hhbmdlLlxuICogQHBhcmFtIHsqfSBuZXdWYWx1ZSBUaGUgbmV3IGRlZmF1bHQgdmFsdWUgZm9yIHRoZSBwcmVmZXJlbmNlLlxuICovXG5saWIuUHJlZmVyZW5jZU1hbmFnZXIucHJvdG90eXBlLmNoYW5nZURlZmF1bHQgPSBmdW5jdGlvbihuYW1lLCBuZXdWYWx1ZSkge1xuICB2YXIgcmVjb3JkID0gdGhpcy5wcmVmUmVjb3Jkc19bbmFtZV07XG4gIGlmICghcmVjb3JkKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJlZmVyZW5jZTogJyArIG5hbWUpO1xuXG4gIGlmICghdGhpcy5kaWZmKHJlY29yZC5kZWZhdWx0VmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgIC8vIERlZmF1bHQgdmFsdWUgaGFzbid0IGNoYW5nZWQuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHJlY29yZC5jdXJyZW50VmFsdWUgIT09IHRoaXMuREVGQVVMVF9WQUxVRSkge1xuICAgIC8vIFRoaXMgcHJlZiBoYXMgYSBzcGVjaWZpYyB2YWx1ZSwganVzdCBjaGFuZ2UgdGhlIGRlZmF1bHQgYW5kIHdlJ3JlIGRvbmUuXG4gICAgcmVjb3JkLmRlZmF1bHRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJlY29yZC5kZWZhdWx0VmFsdWUgPSBuZXdWYWx1ZTtcblxuICB0aGlzLm5vdGlmeUNoYW5nZV8obmFtZSk7XG59O1xuXG4vKipcbiAqIENoYW5nZSB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBtdWx0aXBsZSBwcmVmZXJlbmNlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIEEgbWFwIG9mIG5hbWUgLT4gdmFsdWUgcGFpcnMgc3BlY2lmeWluZyB0aGUgbmV3IGRlZmF1bHRcbiAqICAgICB2YWx1ZXMuXG4gKi9cbmxpYi5QcmVmZXJlbmNlTWFuYWdlci5wcm90b3R5cGUuY2hhbmdlRGVmYXVsdHMgPSBmdW5jdGlvbihtYXApIHtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkge1xuICAgIHRoaXMuY2hhbmdlRGVmYXVsdChrZXksIG1hcFtrZXldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgYSBwcmVmZXJlbmNlIHRvIGEgc3BlY2lmaWMgdmFsdWUuXG4gKlxuICogVGhpcyB3aWxsIGRpc3BhdGNoIHRoZSBvbkNoYW5nZSBoYW5kbGVyIGlmIHRoZSBwcmVmZXJlbmNlIHZhbHVlIGFjdHVhbGx5XG4gKiBjaGFuZ2VzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBwcmVmZXJlbmNlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gbmV3VmFsdWUgVGhlIHZhbHVlIHRvIHNldC4gIEFueXRoaW5nIHRoYXQgY2FuIGJlIHJlcHJlc2VudGVkIGluXG4gKiAgICAgSlNPTiBpcyBhIHZhbGlkIHZhbHVlLlxuICogQHBhcmFtIHtmdW5jdGlvbigpPX0gb25Db21wbGV0ZSBDYWxsYmFjayB3aGVuIHRoZSBzZXQgY2FsbCBjb21wbGV0ZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBzYXZlVG9TdG9yYWdlIFdoZXRoZXIgdG8gY29tbWl0IHRoZSBjaGFuZ2UgdG8gdGhlIGJhY2tpbmdcbiAqICAgICBzdG9yYWdlIG9yIG9ubHkgdGhlIGluLW1lbW9yeSByZWNvcmQgY29weS5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihcbiAgbmFtZSxcbiAgbmV3VmFsdWUsXG4gIG9uQ29tcGxldGUgPSB1bmRlZmluZWQsXG4gIHNhdmVUb1N0b3JhZ2UgPSB0cnVlLFxuKSB7XG4gIHZhciByZWNvcmQgPSB0aGlzLnByZWZSZWNvcmRzX1tuYW1lXTtcbiAgaWYgKCFyZWNvcmQpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmVmZXJlbmNlOiAnICsgbmFtZSk7XG5cbiAgdmFyIG9sZFZhbHVlID0gcmVjb3JkLmdldCgpO1xuXG4gIGlmICghdGhpcy5kaWZmKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHJldHVybjtcblxuICBpZiAodGhpcy5kaWZmKHJlY29yZC5kZWZhdWx0VmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgIHJlY29yZC5jdXJyZW50VmFsdWUgPSBuZXdWYWx1ZTtcbiAgICBpZiAoc2F2ZVRvU3RvcmFnZSlcbiAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKHRoaXMucHJlZml4ICsgbmFtZSwgbmV3VmFsdWUsIG9uQ29tcGxldGUpO1xuICB9IGVsc2Uge1xuICAgIHJlY29yZC5jdXJyZW50VmFsdWUgPSB0aGlzLkRFRkFVTFRfVkFMVUU7XG4gICAgaWYgKHNhdmVUb1N0b3JhZ2UpIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMucHJlZml4ICsgbmFtZSwgb25Db21wbGV0ZSk7XG4gIH1cblxuICAvLyBXZSBuZWVkIHRvIG1hbnVhbGx5IHNlbmQgb3V0IHRoZSBub3RpZmljYXRpb24gb24gdGhpcyBpbnN0YW5jZS4gIElmIHdlXG4gIC8vIFRoZSBzdG9yYWdlIGV2ZW50IHdvbid0IGZpcmUgYSBub3RpZmljYXRpb24gYmVjYXVzZSB3ZSd2ZSBhbHJlYWR5IGNoYW5nZWRcbiAgLy8gdGhlIGN1cnJlbnRWYWx1ZSwgc28gaXQgd29uJ3Qgc2VlIGEgZGlmZmVyZW5jZS4gIElmIHdlIGRlbGF5ZWQgY2hhbmdpbmdcbiAgLy8gY3VycmVudFZhbHVlIHVudGlsIHRoZSBzdG9yYWdlIGV2ZW50LCBhIHByZWYgcmVhZCBpbW1lZGlhdGVseSBhZnRlciBhIHdyaXRlXG4gIC8vIHdvdWxkIHJldHVybiB0aGUgcHJldmlvdXMgdmFsdWUuXG4gIC8vXG4gIC8vIFRoZSBub3RpZmljYXRpb24gaXMgaW4gYSB0aW1lb3V0IHNvIGNsaWVudHMgZG9uJ3QgYWNjaWRlbnRhbGx5IGRlcGVuZCBvblxuICAvLyBhIHN5bmNocm9ub3VzIG5vdGlmaWNhdGlvbi5cbiAgc2V0VGltZW91dCh0aGlzLm5vdGlmeUNoYW5nZV8uYmluZCh0aGlzLCBuYW1lKSwgMCk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYSBwcmVmZXJlbmNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHByZWZlcmVuY2UgdG8gZ2V0LlxuICovXG5saWIuUHJlZmVyZW5jZU1hbmFnZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHJlY29yZCA9IHRoaXMucHJlZlJlY29yZHNfW25hbWVdO1xuICBpZiAoIXJlY29yZCkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByZWZlcmVuY2U6ICcgKyBuYW1lKTtcblxuICByZXR1cm4gcmVjb3JkLmdldCgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gYWxsIG5vbi1kZWZhdWx0IHByZWZlcmVuY2VzIGFzIGEgSlNPTiBvYmplY3QuXG4gKlxuICogVGhpcyBpbmNsdWRlcyBhbnkgbmVzdGVkIHByZWZlcmVuY2UgbWFuYWdlcnMgYXMgd2VsbC5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLnByb3RvdHlwZS5leHBvcnRBc0pzb24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJ2ID0ge307XG5cbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLnByZWZSZWNvcmRzXykge1xuICAgIGlmIChuYW1lIGluIHRoaXMuY2hpbGRMaXN0c18pIHtcbiAgICAgIHJ2W25hbWVdID0gW107XG4gICAgICB2YXIgY2hpbGRJZHMgPSB0aGlzLmdldChuYW1lKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGlkID0gY2hpbGRJZHNbaV07XG4gICAgICAgIHJ2W25hbWVdLnB1c2goeyBpZDogaWQsIGpzb246IHRoaXMuZ2V0Q2hpbGQobmFtZSwgaWQpLmV4cG9ydEFzSnNvbigpIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmVjb3JkID0gdGhpcy5wcmVmUmVjb3Jkc19bbmFtZV07XG4gICAgICBpZiAocmVjb3JkLmN1cnJlbnRWYWx1ZSAhPSB0aGlzLkRFRkFVTFRfVkFMVUUpXG4gICAgICAgIHJ2W25hbWVdID0gcmVjb3JkLmN1cnJlbnRWYWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcnY7XG59O1xuXG4vKipcbiAqIEltcG9ydCBhIEpTT04gYmxvYiBvZiBwcmVmZXJlbmNlcyBwcmV2aW91c2x5IGdlbmVyYXRlZCB3aXRoIGV4cG9ydEFzSnNvbi5cbiAqXG4gKiBUaGlzIHdpbGwgY3JlYXRlIG5lc3RlZCBwcmVmZXJlbmNlIG1hbmFnZXJzIGFzIHdlbGwuXG4gKi9cbmxpYi5QcmVmZXJlbmNlTWFuYWdlci5wcm90b3R5cGUuaW1wb3J0RnJvbUpzb24gPSBmdW5jdGlvbihcbiAganNvbixcbiAgb3B0X29uQ29tcGxldGUsXG4pIHtcbiAgdGhpcy5pc0ltcG9ydGluZ0pzb25fID0gdHJ1ZTtcblxuICBsZXQgcGVuZGluZ1dyaXRlcyA9IDA7XG4gIGNvbnN0IG9uV3JpdGVTdG9yYWdlID0gKCkgPT4ge1xuICAgIGlmICgtLXBlbmRpbmdXcml0ZXMgPCAxKSB7XG4gICAgICBpZiAob3B0X29uQ29tcGxldGUpIG9wdF9vbkNvbXBsZXRlKCk7XG5cbiAgICAgIC8vIFdlJ3ZlIGRlbGF5ZWQgdXBkYXRlcyB0byB0aGUgY2hpbGQgYXJyYXlzLCBzbyBmbHVzaCB0aGVtIG5vdy5cbiAgICAgIGZvciAobGV0IG5hbWUgaW4ganNvbilcbiAgICAgICAgaWYgKG5hbWUgaW4gdGhpcy5jaGlsZExpc3RzXykgdGhpcy5zZXQobmFtZSwgdGhpcy5nZXQobmFtZSkpO1xuXG4gICAgICB0aGlzLmlzSW1wb3J0aW5nSnNvbl8gPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBqc29uKSB7XG4gICAgaWYgKG5hbWUgaW4gdGhpcy5jaGlsZExpc3RzXykge1xuICAgICAgdmFyIGNoaWxkTGlzdCA9IGpzb25bbmFtZV07XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgaWQgPSBjaGlsZExpc3RbaV0uaWQ7XG5cbiAgICAgICAgdmFyIGNoaWxkUHJlZk1hbmFnZXIgPSB0aGlzLmNoaWxkTGlzdHNfW25hbWVdW2lkXTtcbiAgICAgICAgaWYgKCFjaGlsZFByZWZNYW5hZ2VyKVxuICAgICAgICAgIGNoaWxkUHJlZk1hbmFnZXIgPSB0aGlzLmNyZWF0ZUNoaWxkKG5hbWUsIG51bGwsIGlkKTtcblxuICAgICAgICBjaGlsZFByZWZNYW5hZ2VyLmltcG9ydEZyb21Kc29uKGNoaWxkTGlzdFtpXS5qc29uLCBvbldyaXRlU3RvcmFnZSk7XG4gICAgICAgIHBlbmRpbmdXcml0ZXMrKztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIHNldCBpcyBzeW5jaHJvbm91cy5cbiAgICAgIHRoaXMuc2V0KG5hbWUsIGpzb25bbmFtZV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHdlIGRpZG4ndCB1cGRhdGUgYW55IGNoaWxkcmVuLCBubyBhc3luYyB3b3JrIGhhcyBiZWVuIHF1ZXVlZCwgc28gbWFrZVxuICAvLyB0aGUgY29tcGxldGlvbiBjYWxsYmFjayBkaXJlY3RseS5cbiAgaWYgKHBlbmRpbmdXcml0ZXMgPT0gMCAmJiBvcHRfb25Db21wbGV0ZSkgb3B0X29uQ29tcGxldGUoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gb25lIG9mIHRoZSBjaGlsZCBsaXN0IHByZWZlcmVuY2VzIGNoYW5nZXMuXG4gKi9cbmxpYi5QcmVmZXJlbmNlTWFuYWdlci5wcm90b3R5cGUub25DaGlsZExpc3RDaGFuZ2VfID0gZnVuY3Rpb24obGlzdE5hbWUpIHtcbiAgdGhpcy5zeW5jQ2hpbGRMaXN0KGxpc3ROYW1lKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gYSBrZXkgaW4gdGhlIHN0b3JhZ2UgY2hhbmdlcy5cbiAqL1xubGliLlByZWZlcmVuY2VNYW5hZ2VyLnByb3RvdHlwZS5vblN0b3JhZ2VDaGFuZ2VfID0gZnVuY3Rpb24obWFwKSB7XG4gIGZvciAodmFyIGtleSBpbiBtYXApIHtcbiAgICBpZiAodGhpcy5wcmVmaXgpIHtcbiAgICAgIGlmIChrZXkubGFzdEluZGV4T2YodGhpcy5wcmVmaXgsIDApICE9IDApIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBuYW1lID0ga2V5LnN1YnN0cih0aGlzLnByZWZpeC5sZW5ndGgpO1xuXG4gICAgaWYgKCEobmFtZSBpbiB0aGlzLnByZWZSZWNvcmRzXykpIHtcbiAgICAgIC8vIFNvbWV0aW1lcyB3ZSdsbCBnZXQgbm90aWZpZWQgYWJvdXQgcHJlZnMgdGhhdCBhcmUgbm8gbG9uZ2VyIGRlZmluZWQuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdGhpcy5wcmVmUmVjb3Jkc19bbmFtZV07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBtYXBba2V5XS5uZXdWYWx1ZTtcbiAgICB2YXIgY3VycmVudFZhbHVlID0gcmVjb3JkLmN1cnJlbnRWYWx1ZTtcbiAgICBpZiAoY3VycmVudFZhbHVlID09PSByZWNvcmQuREVGQVVMVF9WQUxVRSkgY3VycmVudFZhbHVlID0gdm9pZCAwO1xuXG4gICAgaWYgKHRoaXMuZGlmZihjdXJyZW50VmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PSAndW5kZWZpbmVkJyB8fCBuZXdWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZWNvcmQuY3VycmVudFZhbHVlID0gcmVjb3JkLkRFRkFVTFRfVkFMVUU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWNvcmQuY3VycmVudFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubm90aWZ5Q2hhbmdlXyhuYW1lKTtcbiAgICB9XG4gIH1cbn07XG4vLyBTT1VSQ0UgRklMRTogbGliZG90L2pzL2xpYl9yZXNvdXJjZS5qc1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBPUyBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxuLyoqXG4gKiBTdG9yYWdlIGZvciBjYW5uZWQgcmVzb3VyY2VzLlxuICpcbiAqIFRoZXNlIGFyZSB1c3VhbGx5IG5vbi1KYXZhU2NyaXB0IHRoaW5ncyB0aGF0IGFyZSBjb2xsZWN0ZWQgZHVyaW5nIGEgYnVpbGRcbiAqIHN0ZXAgYW5kIGNvbnZlcnRlZCBpbnRvIGEgc2VyaWVzIG9mICdsaWIucmVzb3VyY2UuYWRkKC4uLiknIGNhbGxzLiAgU2VlXG4gKiB0aGUgXCJAcmVzb3VyY2VcIiBkaXJlY3RpdmUgZnJvbSBsaWJkb3QvYmluL2NvbmNhdCBmb3IgdGhlIGNhbm9uaWNhbCB1c2VcbiAqIGNhc2UuXG4gKlxuICogVGhpcyBpcyBnbG9iYWwgc3RvcmFnZSwgc28geW91IHNob3VsZCBwcmVmaXggeW91ciByZXNvdXJjZSBuYW1lcyB0byBhdm9pZFxuICogY29sbGlzaW9ucy5cbiAqL1xubGliLnJlc291cmNlID0ge1xuICByZXNvdXJjZXNfOiB7fSxcbn07XG5cbi8qKlxuICogQWRkIGEgcmVzb3VyY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBuYW1lIGZvciB0aGUgcmVzb3VyY2UuICBZb3Ugc2hvdWxkIHByZWZpeCB0aGlzIHRvXG4gKiAgIGF2b2lkIGNvbGxpc2lvbnMgd2l0aCByZXNvdXJjZXMgZnJvbSBhIHNoYXJlZCBsaWJyYXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgQSBtaW1lIHR5cGUgZm9yIHRoZSByZXNvdXJjZSwgb3IgXCJyYXdcIiBpZiBub3RcbiAqICAgYXBwbGljYWJsZS5cbiAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgdmFsdWUgb2YgdGhlIHJlc291cmNlLlxuICovXG5saWIucmVzb3VyY2UuYWRkID0gZnVuY3Rpb24obmFtZSwgdHlwZSwgZGF0YSkge1xuICBsaWIucmVzb3VyY2UucmVzb3VyY2VzX1tuYW1lXSA9IHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgZGF0YTogZGF0YSxcbiAgfTtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgYSByZXNvdXJjZSByZWNvcmQuXG4gKlxuICogVGhlIHJlc291cmNlIGRhdGEgaXMgc3RvcmVkIG9uIHRoZSBcImRhdGFcIiBwcm9wZXJ0eSBvZiB0aGUgcmV0dXJuZWQgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSByZXNvdXJjZSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IG9wdF9kZWZhdWx0VmFsdWUgVGhlIG9wdGlvbmFsIHZhbHVlIHRvIHJldHVybiBpZiB0aGUgcmVzb3VyY2UgaXNcbiAqICAgbm90IGRlZmluZWQuXG4gKiBAcmV0dXJuIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIFwidHlwZVwiLCBcIm5hbWVcIiwgYW5kIFwiZGF0YVwiIHByb3BlcnRpZXMuXG4gKi9cbmxpYi5yZXNvdXJjZS5nZXQgPSBmdW5jdGlvbihuYW1lLCBvcHRfZGVmYXVsdFZhbHVlKSB7XG4gIGlmICghKG5hbWUgaW4gbGliLnJlc291cmNlLnJlc291cmNlc18pKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRfZGVmYXVsdFZhbHVlID09ICd1bmRlZmluZWQnKVxuICAgICAgdGhyb3cgJ1Vua25vd24gcmVzb3VyY2U6ICcgKyBuYW1lO1xuXG4gICAgcmV0dXJuIG9wdF9kZWZhdWx0VmFsdWU7XG4gIH1cblxuICByZXR1cm4gbGliLnJlc291cmNlLnJlc291cmNlc19bbmFtZV07XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIHJlc291cmNlIGRhdGEuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHJlc291cmNlIHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gb3B0X2RlZmF1bHRWYWx1ZSBUaGUgb3B0aW9uYWwgdmFsdWUgdG8gcmV0dXJuIGlmIHRoZSByZXNvdXJjZSBpc1xuICogICBub3QgZGVmaW5lZC5cbiAqIEByZXR1cm4geyp9IFRoZSByZXNvdXJjZSBkYXRhLlxuICovXG5saWIucmVzb3VyY2UuZ2V0RGF0YSA9IGZ1bmN0aW9uKG5hbWUsIG9wdF9kZWZhdWx0VmFsdWUpIHtcbiAgaWYgKCEobmFtZSBpbiBsaWIucmVzb3VyY2UucmVzb3VyY2VzXykpIHtcbiAgICBpZiAodHlwZW9mIG9wdF9kZWZhdWx0VmFsdWUgPT0gJ3VuZGVmaW5lZCcpXG4gICAgICB0aHJvdyAnVW5rbm93biByZXNvdXJjZTogJyArIG5hbWU7XG5cbiAgICByZXR1cm4gb3B0X2RlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBsaWIucmVzb3VyY2UucmVzb3VyY2VzX1tuYW1lXS5kYXRhO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZSByZXNvdXJjZSBhcyBhIGRhdGE6IHVybC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcmVzb3VyY2UgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBvcHRfZGVmYXVsdFZhbHVlIFRoZSBvcHRpb25hbCB2YWx1ZSB0byByZXR1cm4gaWYgdGhlIHJlc291cmNlIGlzXG4gKiAgIG5vdCBkZWZpbmVkLlxuICogQHJldHVybiB7Kn0gQSBkYXRhOiB1cmwgZW5jb2RlZCB2ZXJzaW9uIG9mIHRoZSByZXNvdXJjZS5cbiAqL1xubGliLnJlc291cmNlLmdldERhdGFVcmwgPSBmdW5jdGlvbihuYW1lLCBvcHRfZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXNvdXJjZSA9IGxpYi5yZXNvdXJjZS5nZXQobmFtZSwgb3B0X2RlZmF1bHRWYWx1ZSk7XG4gIHJldHVybiAnZGF0YTonICsgcmVzb3VyY2UudHlwZSArICcsJyArIHJlc291cmNlLmRhdGE7XG59O1xuLy8gU09VUkNFIEZJTEU6IGxpYmRvdC9qcy9saWJfc3RvcmFnZS5qc1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBPUyBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxuLyoqXG4gKiBOYW1lc3BhY2UgZm9yIGltcGxlbWVudGF0aW9ucyBvZiBwZXJzaXN0ZW50LCBwb3NzaWJseSBjbG91ZC1iYWNrZWRcbiAqIHN0b3JhZ2UuXG4gKi9cbmxpYi5TdG9yYWdlID0gbmV3IE9iamVjdCgpO1xuLy8gU09VUkNFIEZJTEU6IGxpYmRvdC9qcy9saWJfc3RvcmFnZV9jaHJvbWUuanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbi8qKlxuICogY2hyb21lLnN0b3JhZ2UgYmFzZWQgY2xhc3Mgd2l0aCBhbiBhc3luYyBpbnRlcmZhY2UgdGhhdCBpcyBpbnRlcmNoYW5nZWFibGVcbiAqIHdpdGggb3RoZXIgbGliLlN0b3JhZ2UuKiBpbXBsZW1lbnRhdGlvbnMuXG4gKi9cbmxpYi5TdG9yYWdlLkNocm9tZSA9IGZ1bmN0aW9uKHN0b3JhZ2UpIHtcbiAgdGhpcy5zdG9yYWdlXyA9IHN0b3JhZ2U7XG4gIHRoaXMub2JzZXJ2ZXJzXyA9IFtdO1xuXG4gIGNocm9tZS5zdG9yYWdlLm9uQ2hhbmdlZC5hZGRMaXN0ZW5lcih0aGlzLm9uQ2hhbmdlZF8uYmluZCh0aGlzKSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCBieSB0aGUgc3RvcmFnZSBpbXBsZW1lbnRhdGlvbiB3aGVuIHRoZSBzdG9yYWdlIGlzIG1vZGlmaWVkLlxuICovXG5saWIuU3RvcmFnZS5DaHJvbWUucHJvdG90eXBlLm9uQ2hhbmdlZF8gPSBmdW5jdGlvbihjaGFuZ2VzLCBhcmVhbmFtZSkge1xuICBpZiAoY2hyb21lLnN0b3JhZ2VbYXJlYW5hbWVdICE9IHRoaXMuc3RvcmFnZV8pIHJldHVybjtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub2JzZXJ2ZXJzXy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMub2JzZXJ2ZXJzX1tpXShjaGFuZ2VzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZWdpc3RlciBhIGZ1bmN0aW9uIHRvIG9ic2VydmUgc3RvcmFnZSBjaGFuZ2VzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24obWFwKX0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSBzdG9yYWdlXG4gKiAgICAgY2hhbmdlcy5cbiAqL1xubGliLlN0b3JhZ2UuQ2hyb21lLnByb3RvdHlwZS5hZGRPYnNlcnZlciA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHRoaXMub2JzZXJ2ZXJzXy5wdXNoKGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogVW5yZWdpc3RlciBhIGNoYW5nZSBvYnNlcnZlci5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvYnNlcnZlciBBIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBjYWxsYmFjay5cbiAqL1xubGliLlN0b3JhZ2UuQ2hyb21lLnByb3RvdHlwZS5yZW1vdmVPYnNlcnZlciA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBpID0gdGhpcy5vYnNlcnZlcnNfLmluZGV4T2YoY2FsbGJhY2spO1xuICBpZiAoaSAhPSAtMSkgdGhpcy5vYnNlcnZlcnNfLnNwbGljZShpLCAxKTtcbn07XG5cbi8qKlxuICogRGVsZXRlIGV2ZXJ5dGhpbmcgaW4gdGhpcyBzdG9yYWdlLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24obWFwKX0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSBkZWxldGVcbiAqICAgICBoYXMgY29tcGxldGVkLlxuICovXG5saWIuU3RvcmFnZS5DaHJvbWUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24ob3B0X2NhbGxiYWNrKSB7XG4gIHRoaXMuc3RvcmFnZV8uY2xlYXIoKTtcblxuICBpZiAob3B0X2NhbGxiYWNrKSBzZXRUaW1lb3V0KG9wdF9jYWxsYmFjaywgMCk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgY3VycmVudCB2YWx1ZSBvZiBhIHN0b3JhZ2UgaXRlbS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgdG8gbG9vayB1cC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWUpIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGUgdmFsdWUgaGFzXG4gKiAgICAgYmVlbiByZXRyaWV2ZWQuXG4gKi9cbmxpYi5TdG9yYWdlLkNocm9tZS5wcm90b3R5cGUuZ2V0SXRlbSA9IGZ1bmN0aW9uKGtleSwgY2FsbGJhY2spIHtcbiAgdGhpcy5zdG9yYWdlXy5nZXQoa2V5LCBjYWxsYmFjayk7XG59O1xuLyoqXG4gKiBGZXRjaCB0aGUgdmFsdWVzIG9mIG11bHRpcGxlIHN0b3JhZ2UgaXRlbXMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0ga2V5cyBUaGUga2V5cyB0byBsb29rIHVwLlxuICogQHBhcmFtIHtmdW5jdGlvbihtYXApIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGUgdmFsdWVzIGhhdmVcbiAqICAgICBiZWVuIHJldHJpZXZlZC5cbiAqL1xuXG5saWIuU3RvcmFnZS5DaHJvbWUucHJvdG90eXBlLmdldEl0ZW1zID0gZnVuY3Rpb24oa2V5cywgY2FsbGJhY2spIHtcbiAgdGhpcy5zdG9yYWdlXy5nZXQoa2V5cywgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBTZXQgYSB2YWx1ZSBpbiBzdG9yYWdlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBmb3IgdGhlIHZhbHVlIHRvIGJlIHN0b3JlZC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIHN0b3JlZC4gIEFueXRoaW5nIHRoYXQgY2FuIGJlIHNlcmlhbGl6ZWRcbiAqICAgICB3aXRoIEpTT04gaXMgYWNjZXB0YWJsZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gb3B0X2NhbGxiYWNrIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZVxuICogICAgIHNldCBpcyBjb21wbGV0ZS4gIFlvdSBkb24ndCBoYXZlIHRvIHdhaXQgZm9yIHRoZSBzZXQgdG8gY29tcGxldGUgaW4gb3JkZXJcbiAqICAgICB0byByZWFkIHRoZSB2YWx1ZSwgc2luY2UgdGhlIGxvY2FsIGNhY2hlIGlzIHVwZGF0ZWQgc3luY2hyb25vdXNseS5cbiAqL1xubGliLlN0b3JhZ2UuQ2hyb21lLnByb3RvdHlwZS5zZXRJdGVtID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSwgb3B0X2NhbGxiYWNrKSB7XG4gIGNvbnN0IG9uQ29tcGxldGUgPSAoKSA9PiB7XG4gICAgY29uc3QgZXJyID0gbGliLmYubGFzdEVycm9yKCk7XG4gICAgaWYgKGVycikge1xuICAgICAgLy8gRG9lc24ndCBzZWVtIHRvIGJlIGFueSBiZXR0ZXIgd2F5IG9mIGhhbmRsaW5nIHRoaXMuXG4gICAgICAvLyBodHRwczovL2NyYnVnLmNvbS83NjQ3NTlcbiAgICAgIGlmIChlcnIuaW5kZXhPZignTUFYX1dSSVRFX09QRVJBVElPTlMnKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYFdpbGwgcmV0cnkgc2F2ZSBvZiAke2tleX0gYWZ0ZXIgZXhjZWVkaW5nIHF1b3RhOiAke2Vycn1gKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnNldEl0ZW0oa2V5LCB2YWx1ZSwgb25Db21wbGV0ZSksIDEwMDApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBVbmtub3duIHJ1bnRpbWUgZXJyb3I6ICR7ZXJyfWApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRfY2FsbGJhY2spIG9wdF9jYWxsYmFjaygpO1xuICB9O1xuXG4gIHZhciBvYmogPSB7fTtcbiAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgdGhpcy5zdG9yYWdlXy5zZXQob2JqLCBvbkNvbXBsZXRlKTtcbn07XG5cbi8qKlxuICogU2V0IG11bHRpcGxlIHZhbHVlcyBpbiBzdG9yYWdlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgQSBtYXAgb2Yga2V5L3ZhbHVlcyB0byBzZXQgaW4gc3RvcmFnZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gb3B0X2NhbGxiYWNrIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZVxuICogICAgIHNldCBpcyBjb21wbGV0ZS4gIFlvdSBkb24ndCBoYXZlIHRvIHdhaXQgZm9yIHRoZSBzZXQgdG8gY29tcGxldGUgaW4gb3JkZXJcbiAqICAgICB0byByZWFkIHRoZSB2YWx1ZSwgc2luY2UgdGhlIGxvY2FsIGNhY2hlIGlzIHVwZGF0ZWQgc3luY2hyb25vdXNseS5cbiAqL1xubGliLlN0b3JhZ2UuQ2hyb21lLnByb3RvdHlwZS5zZXRJdGVtcyA9IGZ1bmN0aW9uKG9iaiwgb3B0X2NhbGxiYWNrKSB7XG4gIHRoaXMuc3RvcmFnZV8uc2V0KG9iaiwgb3B0X2NhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBzdG9yYWdlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSB0byBiZSByZW1vdmVkLlxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlXG4gKiAgICAgcmVtb3ZlIGlzIGNvbXBsZXRlLiAgWW91IGRvbid0IGhhdmUgdG8gd2FpdCBmb3IgdGhlIHNldCB0byBjb21wbGV0ZSBpblxuICogICAgIG9yZGVyIHRvIHJlYWQgdGhlIHZhbHVlLCBzaW5jZSB0aGUgbG9jYWwgY2FjaGUgaXMgdXBkYXRlZCBzeW5jaHJvbm91c2x5LlxuICovXG5saWIuU3RvcmFnZS5DaHJvbWUucHJvdG90eXBlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbihrZXksIG9wdF9jYWxsYmFjaykge1xuICB0aGlzLnN0b3JhZ2VfLnJlbW92ZShrZXksIG9wdF9jYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBtdWx0aXBsZSBpdGVtcyBmcm9tIHN0b3JhZ2UuXG4gKlxuICogQHBhcmFtIHtBcnJheX0ga2V5cyBUaGUga2V5cyB0byBiZSByZW1vdmVkLlxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlXG4gKiAgICAgcmVtb3ZlIGlzIGNvbXBsZXRlLiAgWW91IGRvbid0IGhhdmUgdG8gd2FpdCBmb3IgdGhlIHNldCB0byBjb21wbGV0ZSBpblxuICogICAgIG9yZGVyIHRvIHJlYWQgdGhlIHZhbHVlLCBzaW5jZSB0aGUgbG9jYWwgY2FjaGUgaXMgdXBkYXRlZCBzeW5jaHJvbm91c2x5LlxuICovXG5saWIuU3RvcmFnZS5DaHJvbWUucHJvdG90eXBlLnJlbW92ZUl0ZW1zID0gZnVuY3Rpb24oa2V5cywgb3B0X2NhbGxiYWNrKSB7XG4gIHRoaXMuc3RvcmFnZV8ucmVtb3ZlKGtleXMsIG9wdF9jYWxsYmFjayk7XG59O1xuLy8gU09VUkNFIEZJTEU6IGxpYmRvdC9qcy9saWJfc3RvcmFnZV9sb2NhbC5qc1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBPUyBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxuLyoqXG4gKiB3aW5kb3cubG9jYWxTdG9yYWdlIGJhc2VkIGNsYXNzIHdpdGggYW4gYXN5bmMgaW50ZXJmYWNlIHRoYXQgaXNcbiAqIGludGVyY2hhbmdlYWJsZSB3aXRoIG90aGVyIGxpYi5TdG9yYWdlLiogaW1wbGVtZW50YXRpb25zLlxuICovXG5saWIuU3RvcmFnZS5Mb2NhbCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9ic2VydmVyc18gPSBbXTtcbiAgdGhpcy5zdG9yYWdlXyA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgdGhpcy5vblN0b3JhZ2VfLmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgYnkgdGhlIHN0b3JhZ2UgaW1wbGVtZW50YXRpb24gd2hlbiB0aGUgc3RvcmFnZSBpcyBtb2RpZmllZC5cbiAqL1xubGliLlN0b3JhZ2UuTG9jYWwucHJvdG90eXBlLm9uU3RvcmFnZV8gPSBmdW5jdGlvbihlKSB7XG4gIGlmIChlLnN0b3JhZ2VBcmVhICE9IHRoaXMuc3RvcmFnZV8pIHJldHVybjtcblxuICAvLyBKUyB0aHJvd3MgYW4gZXhjZXB0aW9uIGlmIEpTT04ucGFyc2UgaXMgZ2l2ZW4gYW4gZW1wdHkgc3RyaW5nLiBTbyBoZXJlIHdlXG4gIC8vIG9ubHkgcGFyc2UgaWYgdGhlIHZhbHVlIGlzIHRydXRoeS4gVGhpcyBtZWFuIHRoZSBlbXB0eSBzdHJpbmcsIHVuZGVmaW5lZFxuICAvLyBhbmQgbnVsbCB3aWxsIG5vdCBiZSBwYXJzZWQuXG4gIHZhciBwcmV2VmFsdWUgPSBlLm9sZFZhbHVlID8gSlNPTi5wYXJzZShlLm9sZFZhbHVlKSA6IGUub2xkVmFsdWU7XG4gIHZhciBjdXJWYWx1ZSA9IGUubmV3VmFsdWUgPyBKU09OLnBhcnNlKGUubmV3VmFsdWUpIDogZS5uZXdWYWx1ZTtcbiAgdmFyIG8gPSB7fTtcbiAgb1tlLmtleV0gPSB7XG4gICAgb2xkVmFsdWU6IHByZXZWYWx1ZSxcbiAgICBuZXdWYWx1ZTogY3VyVmFsdWUsXG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9ic2VydmVyc18ubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLm9ic2VydmVyc19baV0obyk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVnaXN0ZXIgYSBmdW5jdGlvbiB0byBvYnNlcnZlIHN0b3JhZ2UgY2hhbmdlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG1hcCl9IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGUgc3RvcmFnZVxuICogICAgIGNoYW5nZXMuXG4gKi9cbmxpYi5TdG9yYWdlLkxvY2FsLnByb3RvdHlwZS5hZGRPYnNlcnZlciA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHRoaXMub2JzZXJ2ZXJzXy5wdXNoKGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogVW5yZWdpc3RlciBhIGNoYW5nZSBvYnNlcnZlci5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvYnNlcnZlciBBIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBjYWxsYmFjay5cbiAqL1xubGliLlN0b3JhZ2UuTG9jYWwucHJvdG90eXBlLnJlbW92ZU9ic2VydmVyID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIGkgPSB0aGlzLm9ic2VydmVyc18uaW5kZXhPZihjYWxsYmFjayk7XG4gIGlmIChpICE9IC0xKSB0aGlzLm9ic2VydmVyc18uc3BsaWNlKGksIDEpO1xufTtcblxuLyoqXG4gKiBEZWxldGUgZXZlcnl0aGluZyBpbiB0aGlzIHN0b3JhZ2UuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihtYXApfSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlIGRlbGV0ZVxuICogICAgIGhhcyBjb21wbGV0ZWQuXG4gKi9cbmxpYi5TdG9yYWdlLkxvY2FsLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKG9wdF9jYWxsYmFjaykge1xuICB0aGlzLnN0b3JhZ2VfLmNsZWFyKCk7XG5cbiAgaWYgKG9wdF9jYWxsYmFjaykgc2V0VGltZW91dChvcHRfY2FsbGJhY2ssIDApO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGN1cnJlbnQgdmFsdWUgb2YgYSBzdG9yYWdlIGl0ZW0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IHRvIGxvb2sgdXAuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlKSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlIHZhbHVlIGhhc1xuICogICAgIGJlZW4gcmV0cmlldmVkLlxuICovXG5saWIuU3RvcmFnZS5Mb2NhbC5wcm90b3R5cGUuZ2V0SXRlbSA9IGZ1bmN0aW9uKGtleSwgY2FsbGJhY2spIHtcbiAgdmFyIHZhbHVlID0gdGhpcy5zdG9yYWdlXy5nZXRJdGVtKGtleSk7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHRyeSB7XG4gICAgICB2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElmIHdlIGNhbid0IHBhcnNlIHRoZSB2YWx1ZSwganVzdCByZXR1cm4gaXQgdW5wYXJzZWQuXG4gICAgfVxuICB9XG5cbiAgc2V0VGltZW91dChjYWxsYmFjay5iaW5kKG51bGwsIHZhbHVlKSwgMCk7XG59O1xuXG4vKipcbiAqIEZldGNoIHRoZSB2YWx1ZXMgb2YgbXVsdGlwbGUgc3RvcmFnZSBpdGVtcy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBrZXlzIFRoZSBrZXlzIHRvIGxvb2sgdXAuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG1hcCkgY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSB2YWx1ZXMgaGF2ZVxuICogICAgIGJlZW4gcmV0cmlldmVkLlxuICovXG5saWIuU3RvcmFnZS5Mb2NhbC5wcm90b3R5cGUuZ2V0SXRlbXMgPSBmdW5jdGlvbihrZXlzLCBjYWxsYmFjaykge1xuICB2YXIgcnYgPSB7fTtcblxuICBmb3IgKHZhciBpID0ga2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuc3RvcmFnZV8uZ2V0SXRlbShrZXkpO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJ2W2tleV0gPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gSWYgd2UgY2FuJ3QgcGFyc2UgdGhlIHZhbHVlLCBqdXN0IHJldHVybiBpdCB1bnBhcnNlZC5cbiAgICAgICAgcnZba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cblxuICBzZXRUaW1lb3V0KGNhbGxiYWNrLmJpbmQobnVsbCwgcnYpLCAwKTtcbn07XG5cbi8qKlxuICogU2V0IGEgdmFsdWUgaW4gc3RvcmFnZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgZm9yIHRoZSB2YWx1ZSB0byBiZSBzdG9yZWQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBzdG9yZWQuICBBbnl0aGluZyB0aGF0IGNhbiBiZSBzZXJpYWxpemVkXG4gKiAgICAgd2l0aCBKU09OIGlzIGFjY2VwdGFibGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IG9wdF9jYWxsYmFjayBPcHRpb25hbCBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGVcbiAqICAgICBzZXQgaXMgY29tcGxldGUuICBZb3UgZG9uJ3QgaGF2ZSB0byB3YWl0IGZvciB0aGUgc2V0IHRvIGNvbXBsZXRlIGluIG9yZGVyXG4gKiAgICAgdG8gcmVhZCB0aGUgdmFsdWUsIHNpbmNlIHRoZSBsb2NhbCBjYWNoZSBpcyB1cGRhdGVkIHN5bmNocm9ub3VzbHkuXG4gKi9cbmxpYi5TdG9yYWdlLkxvY2FsLnByb3RvdHlwZS5zZXRJdGVtID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSwgb3B0X2NhbGxiYWNrKSB7XG4gIHRoaXMuc3RvcmFnZV8uc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG5cbiAgaWYgKG9wdF9jYWxsYmFjaykgc2V0VGltZW91dChvcHRfY2FsbGJhY2ssIDApO1xufTtcblxuLyoqXG4gKiBTZXQgbXVsdGlwbGUgdmFsdWVzIGluIHN0b3JhZ2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBBIG1hcCBvZiBrZXkvdmFsdWVzIHRvIHNldCBpbiBzdG9yYWdlLlxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlXG4gKiAgICAgc2V0IGlzIGNvbXBsZXRlLiAgWW91IGRvbid0IGhhdmUgdG8gd2FpdCBmb3IgdGhlIHNldCB0byBjb21wbGV0ZSBpbiBvcmRlclxuICogICAgIHRvIHJlYWQgdGhlIHZhbHVlLCBzaW5jZSB0aGUgbG9jYWwgY2FjaGUgaXMgdXBkYXRlZCBzeW5jaHJvbm91c2x5LlxuICovXG5saWIuU3RvcmFnZS5Mb2NhbC5wcm90b3R5cGUuc2V0SXRlbXMgPSBmdW5jdGlvbihvYmosIG9wdF9jYWxsYmFjaykge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgdGhpcy5zdG9yYWdlXy5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkob2JqW2tleV0pKTtcbiAgfVxuXG4gIGlmIChvcHRfY2FsbGJhY2spIHNldFRpbWVvdXQob3B0X2NhbGxiYWNrLCAwKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBzdG9yYWdlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSB0byBiZSByZW1vdmVkLlxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlXG4gKiAgICAgcmVtb3ZlIGlzIGNvbXBsZXRlLiAgWW91IGRvbid0IGhhdmUgdG8gd2FpdCBmb3IgdGhlIHNldCB0byBjb21wbGV0ZSBpblxuICogICAgIG9yZGVyIHRvIHJlYWQgdGhlIHZhbHVlLCBzaW5jZSB0aGUgbG9jYWwgY2FjaGUgaXMgdXBkYXRlZCBzeW5jaHJvbm91c2x5LlxuICovXG5saWIuU3RvcmFnZS5Mb2NhbC5wcm90b3R5cGUucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uKGtleSwgb3B0X2NhbGxiYWNrKSB7XG4gIHRoaXMuc3RvcmFnZV8ucmVtb3ZlSXRlbShrZXkpO1xuXG4gIGlmIChvcHRfY2FsbGJhY2spIHNldFRpbWVvdXQob3B0X2NhbGxiYWNrLCAwKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIG11bHRpcGxlIGl0ZW1zIGZyb20gc3RvcmFnZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBrZXlzIFRoZSBrZXlzIHRvIGJlIHJlbW92ZWQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IG9wdF9jYWxsYmFjayBPcHRpb25hbCBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGVcbiAqICAgICByZW1vdmUgaXMgY29tcGxldGUuICBZb3UgZG9uJ3QgaGF2ZSB0byB3YWl0IGZvciB0aGUgc2V0IHRvIGNvbXBsZXRlIGluXG4gKiAgICAgb3JkZXIgdG8gcmVhZCB0aGUgdmFsdWUsIHNpbmNlIHRoZSBsb2NhbCBjYWNoZSBpcyB1cGRhdGVkIHN5bmNocm9ub3VzbHkuXG4gKi9cbmxpYi5TdG9yYWdlLkxvY2FsLnByb3RvdHlwZS5yZW1vdmVJdGVtcyA9IGZ1bmN0aW9uKGFyeSwgb3B0X2NhbGxiYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5zdG9yYWdlXy5yZW1vdmVJdGVtKGFyeVtpXSk7XG4gIH1cblxuICBpZiAob3B0X2NhbGxiYWNrKSBzZXRUaW1lb3V0KG9wdF9jYWxsYmFjaywgMCk7XG59O1xuLy8gU09VUkNFIEZJTEU6IGxpYmRvdC9qcy9saWJfc3RvcmFnZV9tZW1vcnkuanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbi8qKlxuICogSW4tbWVtb3J5IHN0b3JhZ2UgY2xhc3Mgd2l0aCBhbiBhc3luYyBpbnRlcmZhY2UgdGhhdCBpcyBpbnRlcmNoYW5nZWFibGUgd2l0aFxuICogb3RoZXIgbGliLlN0b3JhZ2UuKiBpbXBsZW1lbnRhdGlvbnMuXG4gKi9cbmxpYi5TdG9yYWdlLk1lbW9yeSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9ic2VydmVyc18gPSBbXTtcbiAgdGhpcy5zdG9yYWdlXyA9IHt9O1xufTtcblxuLyoqXG4gKiBSZWdpc3RlciBhIGZ1bmN0aW9uIHRvIG9ic2VydmUgc3RvcmFnZSBjaGFuZ2VzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24obWFwKX0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSBzdG9yYWdlXG4gKiAgICAgY2hhbmdlcy5cbiAqL1xubGliLlN0b3JhZ2UuTWVtb3J5LnByb3RvdHlwZS5hZGRPYnNlcnZlciA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHRoaXMub2JzZXJ2ZXJzXy5wdXNoKGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogVW5yZWdpc3RlciBhIGNoYW5nZSBvYnNlcnZlci5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvYnNlcnZlciBBIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBjYWxsYmFjay5cbiAqL1xubGliLlN0b3JhZ2UuTWVtb3J5LnByb3RvdHlwZS5yZW1vdmVPYnNlcnZlciA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBpID0gdGhpcy5vYnNlcnZlcnNfLmluZGV4T2YoY2FsbGJhY2spO1xuICBpZiAoaSAhPSAtMSkgdGhpcy5vYnNlcnZlcnNfLnNwbGljZShpLCAxKTtcbn07XG5cbi8qKlxuICogRGVsZXRlIGV2ZXJ5dGhpbmcgaW4gdGhpcyBzdG9yYWdlLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24obWFwKX0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSBkZWxldGVcbiAqICAgICBoYXMgY29tcGxldGVkLlxuICovXG5saWIuU3RvcmFnZS5NZW1vcnkucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24ob3B0X2NhbGxiYWNrKSB7XG4gIHZhciBlID0ge307XG4gIGZvciAodmFyIGtleSBpbiB0aGlzLnN0b3JhZ2VfKSB7XG4gICAgZVtrZXldID0geyBvbGRWYWx1ZTogdGhpcy5zdG9yYWdlX1trZXldLCBuZXdWYWx1ZTogdm9pZCAwIH07XG4gIH1cblxuICB0aGlzLnN0b3JhZ2VfID0ge307XG5cbiAgc2V0VGltZW91dChcbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vYnNlcnZlcnNfLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzX1tpXShlKTtcbiAgICAgIH1cbiAgICB9LmJpbmQodGhpcyksXG4gICAgMCxcbiAgKTtcblxuICBpZiAob3B0X2NhbGxiYWNrKSBzZXRUaW1lb3V0KG9wdF9jYWxsYmFjaywgMCk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgY3VycmVudCB2YWx1ZSBvZiBhIHN0b3JhZ2UgaXRlbS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgdG8gbG9vayB1cC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWUpIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGUgdmFsdWUgaGFzXG4gKiAgICAgYmVlbiByZXRyaWV2ZWQuXG4gKi9cbmxpYi5TdG9yYWdlLk1lbW9yeS5wcm90b3R5cGUuZ2V0SXRlbSA9IGZ1bmN0aW9uKGtleSwgY2FsbGJhY2spIHtcbiAgdmFyIHZhbHVlID0gdGhpcy5zdG9yYWdlX1trZXldO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICB0cnkge1xuICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB3ZSBjYW4ndCBwYXJzZSB0aGUgdmFsdWUsIGp1c3QgcmV0dXJuIGl0IHVucGFyc2VkLlxuICAgIH1cbiAgfVxuXG4gIHNldFRpbWVvdXQoY2FsbGJhY2suYmluZChudWxsLCB2YWx1ZSksIDApO1xufTtcblxuLyoqXG4gKiBGZXRjaCB0aGUgdmFsdWVzIG9mIG11bHRpcGxlIHN0b3JhZ2UgaXRlbXMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0ga2V5cyBUaGUga2V5cyB0byBsb29rIHVwLlxuICogQHBhcmFtIHtmdW5jdGlvbihtYXApIGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGUgdmFsdWVzIGhhdmVcbiAqICAgICBiZWVuIHJldHJpZXZlZC5cbiAqL1xubGliLlN0b3JhZ2UuTWVtb3J5LnByb3RvdHlwZS5nZXRJdGVtcyA9IGZ1bmN0aW9uKGtleXMsIGNhbGxiYWNrKSB7XG4gIHZhciBydiA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSBrZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIHZhbHVlID0gdGhpcy5zdG9yYWdlX1trZXldO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJ2W2tleV0gPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gSWYgd2UgY2FuJ3QgcGFyc2UgdGhlIHZhbHVlLCBqdXN0IHJldHVybiBpdCB1bnBhcnNlZC5cbiAgICAgICAgcnZba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cblxuICBzZXRUaW1lb3V0KGNhbGxiYWNrLmJpbmQobnVsbCwgcnYpLCAwKTtcbn07XG5cbi8qKlxuICogU2V0IGEgdmFsdWUgaW4gc3RvcmFnZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgZm9yIHRoZSB2YWx1ZSB0byBiZSBzdG9yZWQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBzdG9yZWQuICBBbnl0aGluZyB0aGF0IGNhbiBiZSBzZXJpYWxpemVkXG4gKiAgICAgd2l0aCBKU09OIGlzIGFjY2VwdGFibGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IG9wdF9jYWxsYmFjayBPcHRpb25hbCBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGVcbiAqICAgICBzZXQgaXMgY29tcGxldGUuICBZb3UgZG9uJ3QgaGF2ZSB0byB3YWl0IGZvciB0aGUgc2V0IHRvIGNvbXBsZXRlIGluIG9yZGVyXG4gKiAgICAgdG8gcmVhZCB0aGUgdmFsdWUsIHNpbmNlIHRoZSBsb2NhbCBjYWNoZSBpcyB1cGRhdGVkIHN5bmNocm9ub3VzbHkuXG4gKi9cbmxpYi5TdG9yYWdlLk1lbW9yeS5wcm90b3R5cGUuc2V0SXRlbSA9IGZ1bmN0aW9uKGtleSwgdmFsdWUsIG9wdF9jYWxsYmFjaykge1xuICB2YXIgb2xkVmFsdWUgPSB0aGlzLnN0b3JhZ2VfW2tleV07XG4gIHRoaXMuc3RvcmFnZV9ba2V5XSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblxuICB2YXIgZSA9IHt9O1xuICBlW2tleV0gPSB7IG9sZFZhbHVlOiBvbGRWYWx1ZSwgbmV3VmFsdWU6IHZhbHVlIH07XG5cbiAgc2V0VGltZW91dChcbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vYnNlcnZlcnNfLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzX1tpXShlKTtcbiAgICAgIH1cbiAgICB9LmJpbmQodGhpcyksXG4gICAgMCxcbiAgKTtcblxuICBpZiAob3B0X2NhbGxiYWNrKSBzZXRUaW1lb3V0KG9wdF9jYWxsYmFjaywgMCk7XG59O1xuXG4vKipcbiAqIFNldCBtdWx0aXBsZSB2YWx1ZXMgaW4gc3RvcmFnZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIEEgbWFwIG9mIGtleS92YWx1ZXMgdG8gc2V0IGluIHN0b3JhZ2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IG9wdF9jYWxsYmFjayBPcHRpb25hbCBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGVcbiAqICAgICBzZXQgaXMgY29tcGxldGUuICBZb3UgZG9uJ3QgaGF2ZSB0byB3YWl0IGZvciB0aGUgc2V0IHRvIGNvbXBsZXRlIGluIG9yZGVyXG4gKiAgICAgdG8gcmVhZCB0aGUgdmFsdWUsIHNpbmNlIHRoZSBsb2NhbCBjYWNoZSBpcyB1cGRhdGVkIHN5bmNocm9ub3VzbHkuXG4gKi9cbmxpYi5TdG9yYWdlLk1lbW9yeS5wcm90b3R5cGUuc2V0SXRlbXMgPSBmdW5jdGlvbihvYmosIG9wdF9jYWxsYmFjaykge1xuICB2YXIgZSA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBlW2tleV0gPSB7IG9sZFZhbHVlOiB0aGlzLnN0b3JhZ2VfW2tleV0sIG5ld1ZhbHVlOiBvYmpba2V5XSB9O1xuICAgIHRoaXMuc3RvcmFnZV9ba2V5XSA9IEpTT04uc3RyaW5naWZ5KG9ialtrZXldKTtcbiAgfVxuXG4gIHNldFRpbWVvdXQoXG4gICAgZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub2JzZXJ2ZXJzXy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLm9ic2VydmVyc19baV0oZSk7XG4gICAgICB9XG4gICAgfS5iaW5kKHRoaXMpLFxuICApO1xuXG4gIGlmIChvcHRfY2FsbGJhY2spIHNldFRpbWVvdXQob3B0X2NhbGxiYWNrLCAwKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBzdG9yYWdlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSB0byBiZSByZW1vdmVkLlxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlXG4gKiAgICAgcmVtb3ZlIGlzIGNvbXBsZXRlLiAgWW91IGRvbid0IGhhdmUgdG8gd2FpdCBmb3IgdGhlIHNldCB0byBjb21wbGV0ZSBpblxuICogICAgIG9yZGVyIHRvIHJlYWQgdGhlIHZhbHVlLCBzaW5jZSB0aGUgbG9jYWwgY2FjaGUgaXMgdXBkYXRlZCBzeW5jaHJvbm91c2x5LlxuICovXG5saWIuU3RvcmFnZS5NZW1vcnkucHJvdG90eXBlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbihrZXksIG9wdF9jYWxsYmFjaykge1xuICBkZWxldGUgdGhpcy5zdG9yYWdlX1trZXldO1xuXG4gIGlmIChvcHRfY2FsbGJhY2spIHNldFRpbWVvdXQob3B0X2NhbGxiYWNrLCAwKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIG11bHRpcGxlIGl0ZW1zIGZyb20gc3RvcmFnZS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBrZXlzIFRoZSBrZXlzIHRvIGJlIHJlbW92ZWQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IG9wdF9jYWxsYmFjayBPcHRpb25hbCBmdW5jdGlvbiB0byBpbnZva2Ugd2hlbiB0aGVcbiAqICAgICByZW1vdmUgaXMgY29tcGxldGUuICBZb3UgZG9uJ3QgaGF2ZSB0byB3YWl0IGZvciB0aGUgc2V0IHRvIGNvbXBsZXRlIGluXG4gKiAgICAgb3JkZXIgdG8gcmVhZCB0aGUgdmFsdWUsIHNpbmNlIHRoZSBsb2NhbCBjYWNoZSBpcyB1cGRhdGVkIHN5bmNocm9ub3VzbHkuXG4gKi9cbmxpYi5TdG9yYWdlLk1lbW9yeS5wcm90b3R5cGUucmVtb3ZlSXRlbXMgPSBmdW5jdGlvbihhcnksIG9wdF9jYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkrKykge1xuICAgIGRlbGV0ZSB0aGlzLnN0b3JhZ2VfW2FyeVtpXV07XG4gIH1cblxuICBpZiAob3B0X2NhbGxiYWNrKSBzZXRUaW1lb3V0KG9wdF9jYWxsYmFjaywgMCk7XG59O1xuLy8gU09VUkNFIEZJTEU6IGxpYmRvdC9qcy9saWJfdGVzdF9tYW5hZ2VyLmpzXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTIgVGhlIENocm9taXVtIE9TIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4vLyBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgSmF2YVNjcmlwdCB1bml0IHRlc3RpbmcgZnJhbWV3b3JrIGZvciBzeW5jaHJvbm91cyBhbmRcbiAqICAgICBhc3luY2hyb25vdXMgdGVzdHMuXG4gKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBsaWIuVGVzdE1hbmFnZXIgYW5kIHJlbGF0ZWQgY2xhc3Nlcy4gIEF0IHRoZSBtb21lbnRcbiAqIGl0J3MgYWxsIGNvbGxlY3RlZCBpbiBhIHNpbmdsZSBmaWxlIHNpbmNlIGl0J3MgcmVhc29uYWJseSBzbWFsbFxuICogKD1+MWsgbGluZXMpLCBhbmQgaXQncyBhIGxvdCBlYXNpZXIgdG8gaW5jbHVkZSBvbmUgZmlsZSBpbnRvIHlvdXIgdGVzdFxuICogaGFybmVzcyB0aGFuIGl0IGlzIHRvIGluY2x1ZGUgc2V2ZW4uXG4gKlxuICogVGhlIGZvbGxvd2luZyBjbGFzc2VzIGFyZSBkZWZpbmVkLi4uXG4gKlxuICogICBsaWIuVGVzdE1hbmFnZXIgLSBUaGUgcm9vdCBjbGFzcyBhbmQgZW50cnlwb2ludCBmb3IgY3JlYXRpbmcgdGVzdCBydW5zLlxuICogICBsaWIuVGVzdE1hbmFnZXIuTG9nIC0gTG9nZ2luZyBzZXJ2aWNlLlxuICogICBsaWIuVGVzdE1hbmFnZXIuU3VpdGUgLSBBIGNvbGxlY3Rpb24gb2YgdGVzdHMuXG4gKiAgIGxpYi5UZXN0TWFuYWdlci5UZXN0IC0gQSBzaW5nbGUgdGVzdC5cbiAqICAgbGliLlRlc3RNYW5hZ2VyLlRlc3RSdW4gLSBNYW5hZ2VzIHRoZSBleGVjdXRpb24gb2YgYSBzZXQgb2YgdGVzdHMuXG4gKiAgIGxpYi5UZXN0TWFuYWdlci5SZXN1bHQgLSBBIHNpbmdsZSB0ZXN0IHJlc3VsdC5cbiAqL1xuXG4vKipcbiAqIFJvb3Qgb2JqZWN0IGluIHRoZSB1bml0IHRlc3QgaGllcmFyY2h5LCBhbmQga2VlcGVyIG9mIHRoZSBsb2cgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7bGliLlRlc3RNYW5hZ2VyLkxvZ30gb3B0X2xvZyBPcHRpb25hbCBsaWIuVGVzdE1hbmFnZXIuTG9nIG9iamVjdC5cbiAqICAgICBMb2dzIHRvIHRoZSBKYXZhU2NyaXB0IGNvbnNvbGUgaWYgb21pdHRlZC5cbiAqL1xubGliLlRlc3RNYW5hZ2VyID0gZnVuY3Rpb24ob3B0X2xvZykge1xuICB0aGlzLmxvZyA9IG9wdF9sb2cgfHwgbmV3IGxpYi5UZXN0TWFuYWdlci5Mb2coKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHRlc3QgcnVuIG9iamVjdCBmb3IgdGhpcyB0ZXN0IG1hbmFnZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdF9jeCBBbiBvYmplY3QgdG8gYmUgcGFzc2VkIHRvIHRlc3Qgc3VpdGUgc2V0dXAoKSxcbiAqICAgICBwcmVhbWJsZSgpLCBhbmQgdGVzdCBjYXNlcyBkdXJpbmcgdGhpcyB0ZXN0IHJ1bi4gIFRoaXMgb2JqZWN0IGlzIG9wYXF1ZVxuICogICAgIHRvIGxpYi5UZXN0TWFuYWdlci4qIGNvZGUuICBJdCdzIGVudGlyZWx5IHVwIHRvIHRoZSB0ZXN0IHN1aXRlIHdoYXQgaXQnc1xuICogICAgIHVzZWQgZm9yLlxuICovXG5saWIuVGVzdE1hbmFnZXIucHJvdG90eXBlLmNyZWF0ZVRlc3RSdW4gPSBmdW5jdGlvbihvcHRfY3gpIHtcbiAgcmV0dXJuIG5ldyBsaWIuVGVzdE1hbmFnZXIuVGVzdFJ1bih0aGlzLCBvcHRfY3gpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBhIHRlc3QgcnVuIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRlc3QgbWFuYWdlciBjb21wbGV0ZXMuXG4gKlxuICogQ2xpZW50cyBtYXkgb3ZlcnJpZGUgdGhpcyB0byBjYWxsIGFuIGFwcHJvcHJpYXRlIGZ1bmN0aW9uLlxuICovXG5saWIuVGVzdE1hbmFnZXIucHJvdG90eXBlLm9uVGVzdFJ1bkNvbXBsZXRlID0gZnVuY3Rpb24odGVzdFJ1bikge307XG5cbi8qKlxuICogQ2FsbGVkIGJlZm9yZSBhIHRlc3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdGVzdCBtYW5hZ2VyIGlzIHJ1bi5cbiAqXG4gKiBAcGFyYW0ge2xpYi5UZXN0TWFuYWdlci5SZXN1bHR9IHJlc3VsdCBUaGUgcmVzdWx0IG9iamVjdCBmb3IgdGhlIHVwY29taW5nXG4gKiAgICAgdGVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjeCBUaGUgY29udGV4dCBvYmplY3QgZm9yIGEgdGVzdCBydW4uXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5wcm90b3R5cGUudGVzdFByZWFtYmxlID0gZnVuY3Rpb24ocmVzdWx0LCBjeCkge307XG5cbi8qKlxuICogQ2FsbGVkIGFmdGVyIGEgdGVzdCBhc3NvY2lhdGVkIHdpdGggdGhpcyB0ZXN0IG1hbmFnZXIgZmluaXNoZXMuXG4gKlxuICogQHBhcmFtIHtsaWIuVGVzdE1hbmFnZXIuUmVzdWx0fSByZXN1bHQgVGhlIHJlc3VsdCBvYmplY3QgZm9yIHRoZSBmaW5pc2hlZFxuICogICAgIHRlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gY3ggVGhlIGNvbnRleHQgb2JqZWN0IGZvciBhIHRlc3QgcnVuLlxuICovXG5saWIuVGVzdE1hbmFnZXIucHJvdG90eXBlLnRlc3RQb3N0YW1ibGUgPSBmdW5jdGlvbihyZXN1bHQsIGN4KSB7fTtcblxuLyoqXG4gKiBEZXN0aW5hdGlvbiBmb3IgdGVzdCBjYXNlIG91dHB1dC5cbiAqXG4gKiBUaHcgQVBJIHdpbGwgYmUgdGhlIHNhbWUgYXMgdGhlIGNvbnNvbGUgb2JqZWN0LiAgZS5nLiBXZSBzdXBwb3J0IGluZm8oKSxcbiAqIHdhcm4oKSwgZXJyb3IoKSwgZXRjLi4uIGp1c3QgbGlrZSBjb25zb2xlLmluZm8oKSwgZXRjLi4uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdF9jb25zb2xlIFRoZSBjb25zb2xlIG9iamVjdCB0byByb3V0ZSBhbGwgbG9nZ2luZyB0aHJvdWdoLlxuICogICAgIFNob3VsZCBwcm92aWRlIHNhb21lIEFQSSBhcyB0aGUgc3RhbmRhcmQgY29uc29sZSBBUEkuXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5Mb2cgPSBmdW5jdGlvbihvcHRfY29uc29sZSA9IGNvbnNvbGUpIHtcbiAgdGhpcy5zYXZlID0gZmFsc2U7XG4gIHRoaXMuZGF0YSA9ICcnO1xuICB0aGlzLnByZWZpeF8gPSAnJztcbiAgdGhpcy5wcmVmaXhTdGFja18gPSAwO1xuXG4gIC8vIENhcHR1cmUgYWxsIHRoZSBjb25zb2xlIGVudHJ5IHBvaW50cyBpbiBjYXNlIGNvZGUgYXQgcnVudGltZSBjYWxscyB0aGVzZVxuICAvLyBkaXJlY3RseS4gIFdlIHdhbnQgdG8gYmUgYWJsZSB0byBzdGlsbCBzZWUgdGhpbmdzLlxuICAvLyBXZSBhbHNvIGV4cG9zZSB0aGUgZGlyZWN0IEFQSSB0byBvdXIgY2FsbGVycyAoZS5nLiB3ZSBwcm92aWRlIHdhcm4oKSkuXG4gIHRoaXMuY29uc29sZV8gPSBvcHRfY29uc29sZTtcbiAgWydsb2cnLCAnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJ10uZm9yRWFjaChsZXZlbCA9PiB7XG4gICAgbGV0IG1zZ1ByZWZpeCA9ICcnO1xuICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgIGNhc2UgJ2RlYnVnJzpcbiAgICAgIGNhc2UgJ3dhcm4nOlxuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICBtc2dQcmVmaXggPSBsZXZlbC50b1VwcGVyQ2FzZSgpICsgJzogJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uc3Qgb0xvZyA9IHRoaXMuY29uc29sZV9bbGV2ZWxdO1xuICAgIHRoaXNbbGV2ZWxdID0gdGhpcy5jb25zb2xlX1tsZXZlbF0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgaWYgKHRoaXMuc2F2ZSlcbiAgICAgICAgdGhpcy5kYXRhICs9IHRoaXMucHJlZml4XyArIG1zZ1ByZWZpeCArIGFyZ3Muam9pbignICcpICsgJ1xcbic7XG4gICAgICBvTG9nLmFwcGx5KHRoaXMuY29uc29sZV8sIGFyZ3MpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIFdyYXAvYmluZCB0aGUgZ3JvdXAgZnVuY3Rpb25zLlxuICBbJ2dyb3VwJywgJ2dyb3VwQ29sbGFwc2VkJ10uZm9yRWFjaChncm91cCA9PiB7XG4gICAgY29uc3Qgb0dyb3VwID0gdGhpcy5jb25zb2xlX1tncm91cF07XG4gICAgdGhpc1tncm91cF0gPSB0aGlzLmNvbnNvbGVfW2dyb3VwXSA9IChsYWJlbCA9ICcnKSA9PiB7XG4gICAgICBvR3JvdXAobGFiZWwpO1xuICAgICAgaWYgKHRoaXMuc2F2ZSkgdGhpcy5kYXRhICs9IHRoaXMucHJlZml4XyArIGxhYmVsICsgJ1xcbic7XG4gICAgICB0aGlzLnByZWZpeF8gPSAnICAnLnJlcGVhdCgrK3RoaXMucHJlZml4U3RhY2tfKTtcbiAgICB9O1xuICB9KTtcblxuICBjb25zdCBvR3JvdXBFbmQgPSB0aGlzLmNvbnNvbGVfLmdyb3VwRW5kO1xuICB0aGlzLmdyb3VwRW5kID0gdGhpcy5jb25zb2xlXy5ncm91cEVuZCA9ICgpID0+IHtcbiAgICBvR3JvdXBFbmQoKTtcbiAgICBpZiAodGhpcy5wcmVmaXhTdGFja18pIHRoaXMucHJlZml4XyA9ICcgICcucmVwZWF0KC0tdGhpcy5wcmVmaXhTdGFja18pO1xuICB9O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgd2lsbCBpbmhlcml0IGZyb21cbiAqIGxpYi5UZXN0TWFuYWdlci5TdWl0ZS5cbiAqXG4gKiBVc2UgdGhpcyBmdW5jdGlvbiB0byBjcmVhdGUgYSBuZXcgdGVzdCBzdWl0ZSBzdWJjbGFzcy4gIEl0IHdpbGwgcmV0dXJuIGFcbiAqIHByb3Blcmx5IGluaXRpYWxpemVkIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgc3ViY2xhc3MuICBZb3UgY2FuIHRoZW5cbiAqIG92ZXJyaWRlIHRoZSBzZXR1cCgpIGFuZCBwcmVhbWJsZSgpIG1ldGhvZHMgaWYgbmVjZXNzYXJ5IGFuZCBhZGQgdGVzdCBjYXNlc1xuICogdG8gdGhlIHN1YmNsYXNzLlxuICpcbiAqICAgdmFyIE15VGVzdHMgPSBuZXcgbGliLlRlc3RNYW5hZ2VyLlN1aXRlKCdNeVRlc3RzJyk7XG4gKlxuICogICBNeVRlc3RzLnByb3RvdHlwZS5zZXR1cCA9IGZ1bmN0aW9uKGN4KSB7XG4gKiAgICAgLy8gU2V0cyB0aGlzLnNpemUgdG8gY3guc2l6ZSBpZiBpdCBleGlzdHMsIG9yIHRoZSBkZWZhdWx0IHZhbHVlIG9mIDEwXG4gKiAgICAgLy8gaWYgbm90LlxuICogICAgIHRoaXMuc2V0RGVmYXVsdChjeCwge3NpemU6IDEwfSk7XG4gKiAgIH07XG4gKlxuICogICBNeVRlc3RzLnByb3RvdHlwZS5wcmVhbWJsZSA9IGZ1bmN0aW9uKHJlc3VsdCwgY3gpIHtcbiAqICAgICAvLyBTb21lIHRlc3RzIChldmVuIHN1Y2Nlc3NmdWwgb25lcykgbWF5IHNpZGUtZWZmZWN0IHRoaXMgbGlzdCwgc29cbiAqICAgICAvLyByZWNyZWF0ZSBpdCBiZWZvcmUgZXZlcnkgdGVzdC5cbiAqICAgICB0aGlzLmxpc3QgPSBbXTtcbiAqICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2l6ZTsgaSsrKSB7XG4gKiAgICAgICB0aGlzLmxpc3RbaV0gPSBpO1xuICogICAgIH1cbiAqICAgfTtcbiAqXG4gKiAgIC8vIEJhc2ljIHN5bmNocm9ub3VzIHRlc3QgY2FzZS5cbiAqICAgTXlUZXN0cy5hZGRUZXN0KCdwb3AtbGVuZ3RoJywgZnVuY3Rpb24ocmVzdWx0LCBjeCkge1xuICogICAgICAgdGhpcy5saXN0LnBvcCgpO1xuICpcbiAqICAgICAgIC8vIElmIHRoaXMgYXNzZXJ0aW9uIGZhaWxzLCB0aGUgdGVzdGNhc2Ugd2lsbCBzdG9wIGhlcmUuXG4gKiAgICAgICByZXN1bHQuYXNzZXJ0RVEodGhpcy5saXN0Lmxlbmd0aCwgdGhpcy5zaXplIC0gMSk7XG4gKlxuICogICAgICAgLy8gQSB0ZXN0IG11c3QgaW5kaWNhdGUgaXQgaGFzIHBhc3NlZCBieSBjYWxsaW5nIHRoaXMgbWV0aG9kLlxuICogICAgICAgcmVzdWx0LnBhc3MoKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgIC8vIFNhbXBsZSBhc3luY2hyb25vdXMgdGVzdCBjYXNlLlxuICogICBNeVRlc3RzLmFkZFRlc3QoJ2FzeW5jLXBvcC1sZW5ndGgnLCBmdW5jdGlvbihyZXN1bHQsIGN4KSB7XG4gKiAgICAgICB2YXIgY2FsbGJhY2sgPSAoKSA9PiB7XG4gKiAgICAgICAgICAgcmVzdWx0LmFzc2VydEVRKHRoaXMubGlzdC5sZW5ndGgsIHRoaXMuc2l6ZSAtIDEpO1xuICogICAgICAgICAgIHJlc3VsdC5wYXNzKCk7XG4gKiAgICAgICB9O1xuICpcbiAqICAgICAgIC8vIFdhaXQgMTAwbXMgdG8gY2hlY2sgdGhlIGFycmF5IGxlbmd0aCBmb3IgdGhlIHNha2Ugb2YgdGhpcyBleGFtcGxlLlxuICogICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgMTAwKTtcbiAqXG4gKiAgICAgICB0aGlzLmxpc3QucG9wKCk7XG4gKlxuICogICAgICAgLy8gSW5kaWNhdGUgdGhhdCB0aGlzIHRlc3QgbmVlZHMgYW5vdGhlciAyMDBtcyB0byBjb21wbGV0ZS5cbiAqICAgICAgIC8vIElmIHRoZSB0ZXN0IGRvZXMgbm90IHJlcG9ydCBwYXNzL2ZhaWwgYnkgdGhlbiwgaXQgaXMgY29uc2lkZXJlZCB0b1xuICogICAgICAgLy8gaGF2ZSB0aW1lZCBvdXQuXG4gKiAgICAgICByZXN1bHQucmVxdWVzdFRpbWUoMjAwKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgIC4uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdWl0ZU5hbWUgVGhlIG5hbWUgb2YgdGhlIHRlc3Qgc3VpdGUuXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5TdWl0ZSA9IGZ1bmN0aW9uKHN1aXRlTmFtZSkge1xuICBmdW5jdGlvbiBjdG9yKHRlc3RNYW5hZ2VyLCBjeCkge1xuICAgIHRoaXMudGVzdE1hbmFnZXJfID0gdGVzdE1hbmFnZXI7XG4gICAgdGhpcy5zdWl0ZU5hbWUgPSBzdWl0ZU5hbWU7XG5cbiAgICB0aGlzLnNldHVwKGN4KTtcbiAgfVxuXG4gIGN0b3Iuc3VpdGVOYW1lID0gc3VpdGVOYW1lO1xuICBjdG9yLmFkZFRlc3QgPSBsaWIuVGVzdE1hbmFnZXIuU3VpdGUuYWRkVGVzdDtcbiAgY3Rvci5kaXNhYmxlVGVzdCA9IGxpYi5UZXN0TWFuYWdlci5TdWl0ZS5kaXNhYmxlVGVzdDtcbiAgY3Rvci5nZXRUZXN0ID0gbGliLlRlc3RNYW5hZ2VyLlN1aXRlLmdldFRlc3Q7XG4gIGN0b3IuZ2V0VGVzdExpc3QgPSBsaWIuVGVzdE1hbmFnZXIuU3VpdGUuZ2V0VGVzdExpc3Q7XG4gIGN0b3IudGVzdExpc3RfID0gW107XG4gIGN0b3IudGVzdE1hcF8gPSB7fTtcbiAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGxpYi5UZXN0TWFuYWdlci5TdWl0ZS5wcm90b3R5cGUpO1xuICBjdG9yLmNvbnN0cnVjdG9yID0gbGliLlRlc3RNYW5hZ2VyLlN1aXRlO1xuXG4gIGxpYi5UZXN0TWFuYWdlci5TdWl0ZS5zdWJjbGFzc2VzLnB1c2goY3Rvcik7XG5cbiAgcmV0dXJuIGN0b3I7XG59O1xuXG4vKipcbiAqIExpc3Qgb2YgbGliLlRlc3RNYW5hZ2VyLlN1aXRlIHN1YmNsYXNzZXMsIGluIHRoZSBvcmRlciB0aGV5IHdlcmUgZGVmaW5lZC5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlN1aXRlLnN1YmNsYXNzZXMgPSBbXTtcblxuLyoqXG4gKiBBZGQgYSB0ZXN0IHRvIGEgbGliLlRlc3RNYW5hZ2VyLlN1aXRlLlxuICpcbiAqIFRoaXMgbWV0aG9kIGlzIGNvcGllZCB0byBuZXcgc3ViY2xhc3NlcyB3aGVuIHRoZXkgYXJlIGNyZWF0ZWQuXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5TdWl0ZS5hZGRUZXN0ID0gZnVuY3Rpb24odGVzdE5hbWUsIHRlc3RGdW5jdGlvbikge1xuICBpZiAodGVzdE5hbWUgaW4gdGhpcy50ZXN0TWFwXykgdGhyb3cgJ0R1cGxpY2F0ZSB0ZXN0IG5hbWU6ICcgKyB0ZXN0TmFtZTtcblxuICB2YXIgdGVzdCA9IG5ldyBsaWIuVGVzdE1hbmFnZXIuVGVzdCh0aGlzLCB0ZXN0TmFtZSwgdGVzdEZ1bmN0aW9uKTtcbiAgdGhpcy50ZXN0TWFwX1t0ZXN0TmFtZV0gPSB0ZXN0O1xuICB0aGlzLnRlc3RMaXN0Xy5wdXNoKHRlc3QpO1xufTtcblxuLyoqXG4gKiBEZWZpbmVzIGEgZGlzYWJsZWQgdGVzdC5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlN1aXRlLmRpc2FibGVUZXN0ID0gZnVuY3Rpb24odGVzdE5hbWUsIHRlc3RGdW5jdGlvbikge1xuICBpZiAodGVzdE5hbWUgaW4gdGhpcy50ZXN0TWFwXykgdGhyb3cgJ0R1cGxpY2F0ZSB0ZXN0IG5hbWU6ICcgKyB0ZXN0TmFtZTtcblxuICB2YXIgdGVzdCA9IG5ldyBsaWIuVGVzdE1hbmFnZXIuVGVzdCh0aGlzLCB0ZXN0TmFtZSwgdGVzdEZ1bmN0aW9uKTtcbiAgY29uc29sZS5sb2coJ0Rpc2FibGVkIHRlc3Q6ICcgKyB0ZXN0LmZ1bGxOYW1lKTtcbn07XG5cbi8qKlxuICogR2V0IGEgbGliLlRlc3RNYW5hZ2VyLlRlc3QgaW5zdGFuY2UgYnkgbmFtZS5cbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBjb3BpZWQgdG8gbmV3IHN1YmNsYXNzZXMgd2hlbiB0aGV5IGFyZSBjcmVhdGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXN0TmFtZSBUaGUgbmFtZSBvZiB0aGUgZGVzaXJlZCB0ZXN0LlxuICogQHJldHVybiB7bGliLlRlc3RNYW5hZ2VyLlRlc3R9IFRoZSByZXF1ZXN0ZWQgdGVzdCwgb3IgdW5kZWZpbmVkIGlmIGl0IHdhcyBub3RcbiAqICAgICBmb3VuZC5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlN1aXRlLmdldFRlc3QgPSBmdW5jdGlvbih0ZXN0TmFtZSkge1xuICByZXR1cm4gdGhpcy50ZXN0TWFwX1t0ZXN0TmFtZV07XG59O1xuXG4vKipcbiAqIEdldCBhbiBhcnJheSBvZiBsaWIuVGVzdE1hbmFnZXIuVGVzdHMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgU3VpdGUuXG4gKlxuICogVGhpcyBtZXRob2QgaXMgY29waWVkIHRvIG5ldyBzdWJjbGFzc2VzIHdoZW4gdGhleSBhcmUgY3JlYXRlZC5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlN1aXRlLmdldFRlc3RMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnRlc3RMaXN0Xztcbn07XG5cbi8qKlxuICogU2V0IHByb3BlcnRpZXMgb24gYSB0ZXN0IHN1aXRlIGluc3RhbmNlLCBwdWxsaW5nIHRoZSBwcm9wZXJ0eSB2YWx1ZSBmcm9tXG4gKiB0aGUgY29udGV4dCBpZiBpdCBleGlzdHMgYW5kIGZyb20gdGhlIGRlZmF1bHRzIGRpY3Rpb25hcnkgaWYgbm90LlxuICpcbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiB5b3VyIHRlc3Qgc3VpdGUncyBzZXR1cCgpIG1ldGhvZCB0b1xuICogZGVmaW5lIHBhcmFtZXRlcnMgZm9yIHRoZSB0ZXN0IHN1aXRlIHdoaWNoIG1heSBiZSBvdmVycmlkZGVuIHRocm91Z2ggdGhlXG4gKiBjb250ZXh0IG9iamVjdC4gIEZvciBleGFtcGxlLi4uXG4gKlxuICogICBNeVN1aXRlLnByb3RvdHlwZS5zZXR1cCA9IGZ1bmN0aW9uKGN4KSB7XG4gKiAgICAgdGhpcy5zZXREZWZhdWx0cyhjeCwge3NpemU6IDEwfSk7XG4gKiAgIH07XG4gKlxuICogSWYgdGhlIGNvbnRleHQgb2JqZWN0IGhhcyBhICdzaXplJyBwcm9wZXJ0eSB0aGVuIHRoaXMuc2l6ZSB3aWxsIGJlIHNldCB0b1xuICogdGhlIHZhbHVlIG9mIGN4LnNpemUsIG90aGVyd2lzZSB0aGlzLnNpemUgd2lsbCBnZXQgYSBkZWZhdWx0IHZhbHVlIG9mIDEwLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjeCBUaGUgY29udGV4dCBvYmplY3QgZm9yIGEgdGVzdCBydW4uXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdHMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgbmFtZS92YWx1ZSBwYWlycyB0byBzZXQgb25cbiAqICAgICB0aGlzIHRlc3Qgc3VpdGUgaW5zdGFuY2UuICBUaGUgdmFsdWUgbGlzdGVkIGhlcmUgd2lsbCBiZSB1c2VkIGlmIHRoZVxuICogICAgIG5hbWUgaXMgbm90IGRlZmluZWQgb24gdGhlIGNvbnRleHQgb2JqZWN0LlxuICovXG5saWIuVGVzdE1hbmFnZXIuU3VpdGUucHJvdG90eXBlLnNldERlZmF1bHRzID0gZnVuY3Rpb24oY3gsIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIGsgaW4gZGVmYXVsdHMpIHtcbiAgICB0aGlzW2tdID0gayBpbiBjeCA/IGN4W2tdIDogZGVmYXVsdHNba107XG4gIH1cbn07XG5cbi8qKlxuICogU3ViY2xhc3NhYmxlIG1ldGhvZCBjYWxsZWQgdG8gc2V0IHVwIHRoZSB0ZXN0IHN1aXRlLlxuICpcbiAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHRoaXMgbWV0aG9kIGlzIGEgbm8tb3AuICBJZiB5b3VyIHRlc3Qgc3VpdGVcbiAqIHJlcXVpcmVzIHNvbWUga2luZCBvZiBzdWl0ZS13aWRlIHNldHVwLCB0aGlzIGlzIHRoZSBwbGFjZSB0byBkbyBpdC5cbiAqXG4gKiBJdCdzIGZpbmUgdG8gc3RvcmUgc3RhdGUgb24gdGhlIHRlc3Qgc3VpdGUgaW5zdGFuY2UsIHRoYXQgc3RhdGUgd2lsbCBiZVxuICogYWNjZXNzaWJsZSB0byBhbGwgdGVzdHMgaW4gdGhlIHN1aXRlLiAgSWYgYW55IHRlc3QgY2FzZSBmYWlscywgdGhlIGVudGlyZVxuICogdGVzdCBzdWl0ZSBvYmplY3Qgd2lsbCBiZSBkaXNjYXJkZWQgYW5kIGEgbmV3IG9uZSB3aWxsIGJlIGNyZWF0ZWQgZm9yXG4gKiB0aGUgcmVtYWluaW5nIHRlc3RzLlxuICpcbiAqIEFueSBzaWRlIGVmZmVjdHMgb3V0c2lkZSBvZiB0aGlzIHRlc3Qgc3VpdGUgaW5zdGFuY2UgbXVzdCBiZSBpZGVtcG90ZW50LlxuICogRm9yIGV4YW1wbGUsIGlmIHlvdSdyZSBhZGRpbmcgRE9NIG5vZGVzIHRvIGEgZG9jdW1lbnQsIG1ha2Ugc3VyZSB0byBmaXJzdFxuICogdGVzdCB0aGF0IHRoZXkncmUgbm90IGFscmVhZHkgdGhlcmUuICBJZiB0aGV5IGFyZSwgcmVtb3ZlIHRoZW0gcmF0aGVyIHRoYW5cbiAqIHJldXNlIHRoZW0uICBZb3Ugc2hvdWxkIG5vdCBjb3VudCBvbiB0aGVpciBzdGF0ZSwgc2luY2UgdGhleSB3ZXJlIHByb2JhYmx5XG4gKiBsZWZ0IGJlaGluZCBieSBhIGZhaWxlZCB0ZXN0Y2FzZS5cbiAqXG4gKiBBbnkgZXhjZXB0aW9uIGhlcmUgd2lsbCBhYm9ydCB0aGUgcmVtYWluZGVyIG9mIHRoZSB0ZXN0IHJ1bi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY3ggVGhlIGNvbnRleHQgb2JqZWN0IGZvciBhIHRlc3QgcnVuLlxuICovXG5saWIuVGVzdE1hbmFnZXIuU3VpdGUucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24oY3gpIHt9O1xuXG4vKipcbiAqIFN1YmNsYXNzYWJsZSBtZXRob2QgY2FsbGVkIHRvIGRvIHByZS10ZXN0IHNldCB1cC5cbiAqXG4gKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIG1ldGhvZCBpcyBhIG5vLW9wLiAgSWYgeW91ciB0ZXN0IHN1aXRlXG4gKiByZXF1aXJlcyBzb21lIGtpbmQgb2YgcHJlLXRlc3Qgc2V0dXAsIHRoaXMgaXMgdGhlIHBsYWNlIHRvIGRvIGl0LlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gYXZvaWQgYSBidW5jaCBvZiBib2lsZXJwbGF0ZSBzZXR1cC90ZWFyZG93biBjb2RlIGluXG4gKiB0aGlzIHN1aXRlJ3MgdGVzdGNhc2VzLlxuICpcbiAqIEFueSBleGNlcHRpb24gaGVyZSB3aWxsIGFib3J0IHRoZSByZW1haW5kZXIgb2YgdGhlIHRlc3QgcnVuLlxuICpcbiAqIEBwYXJhbSB7bGliLlRlc3RNYW5hZ2VyLlJlc3VsdH0gcmVzdWx0IFRoZSByZXN1bHQgb2JqZWN0IGZvciB0aGUgdXBjb21pbmdcbiAqICAgICB0ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IGN4IFRoZSBjb250ZXh0IG9iamVjdCBmb3IgYSB0ZXN0IHJ1bi5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlN1aXRlLnByb3RvdHlwZS5wcmVhbWJsZSA9IGZ1bmN0aW9uKHJlc3VsdCwgY3gpIHt9O1xuXG4vKipcbiAqIFN1YmNsYXNzYWJsZSBtZXRob2QgY2FsbGVkIHRvIGRvIHBvc3QtdGVzdCB0ZWFyLWRvd24uXG4gKlxuICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgaXMgYSBuby1vcC4gIElmIHlvdXIgdGVzdCBzdWl0ZVxuICogcmVxdWlyZXMgc29tZSBraW5kIG9mIHByZS10ZXN0IHNldHVwLCB0aGlzIGlzIHRoZSBwbGFjZSB0byBkbyBpdC5cbiAqXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGF2b2lkIGEgYnVuY2ggb2YgYm9pbGVycGxhdGUgc2V0dXAvdGVhcmRvd24gY29kZSBpblxuICogdGhpcyBzdWl0ZSdzIHRlc3RjYXNlcy5cbiAqXG4gKiBBbnkgZXhjZXB0aW9uIGhlcmUgd2lsbCBhYm9ydCB0aGUgcmVtYWluZGVyIG9mIHRoZSB0ZXN0IHJ1bi5cbiAqXG4gKiBAcGFyYW0ge2xpYi5UZXN0TWFuYWdlci5SZXN1bHR9IHJlc3VsdCBUaGUgcmVzdWx0IG9iamVjdCBmb3IgdGhlIGZpbmlzaGVkXG4gKiAgICAgdGVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjeCBUaGUgY29udGV4dCBvYmplY3QgZm9yIGEgdGVzdCBydW4uXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5TdWl0ZS5wcm90b3R5cGUucG9zdGFtYmxlID0gZnVuY3Rpb24ocmVzdWx0LCBjeCkge307XG5cbi8qKlxuICogT2JqZWN0IHJlcHJlc2VudGluZyBhIHNpbmdsZSB0ZXN0IGluIGEgdGVzdCBzdWl0ZS5cbiAqXG4gKiBUaGVzZSBhcmUgY3JlYXRlZCBhcyBwYXJ0IG9mIHRoZSBsaWIuVGVzdE1hbmFnZXIuU3VpdGUuYWRkVGVzdCgpIG1ldGhvZC5cbiAqIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSB0byBjb25zdHJ1Y3Qgb25lIGJ5IGhhbmQuXG4gKlxuICogQHBhcmFtIHtsaWIuVGVzdE1hbmFnZXIuU3VpdGV9IHN1aXRlQ2xhc3MgVGhlIHRlc3Qgc3VpdGUgY2xhc3MgY29udGFpbmluZ1xuICogICAgIHRoaXMgdGVzdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXN0TmFtZSBUaGUgbG9jYWwgbmFtZSBvZiB0aGlzIHRlc3QgY2FzZSwgbm90IGluY2x1ZGluZyB0aGVcbiAqICAgICB0ZXN0IHN1aXRlIG5hbWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGxpYi5UZXN0TWFuYWdlci5SZXN1bHQsIE9iamVjdCl9IHRlc3RGdW5jdGlvbiBUaGUgZnVuY3Rpb25cbiAqICAgICB0byBpbnZva2UgZm9yIHRoaXMgdGVzdCBjYXNlLiAgVGhpcyBpcyBwYXNzZWQgYSBSZXN1bHQgaW5zdGFuY2UgYW5kIHRoZVxuICogICAgIGNvbnRleHQgb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGUgdGVzdCBydW4uXG4gKlxuICovXG5saWIuVGVzdE1hbmFnZXIuVGVzdCA9IGZ1bmN0aW9uKHN1aXRlQ2xhc3MsIHRlc3ROYW1lLCB0ZXN0RnVuY3Rpb24pIHtcbiAgLyoqXG4gICAqIFRoZSB0ZXN0IHN1aXRlIGNsYXNzIGNvbnRhaW5pbmcgdGhpcyBmdW5jdGlvbi5cbiAgICovXG4gIHRoaXMuc3VpdGVDbGFzcyA9IHN1aXRlQ2xhc3M7XG5cbiAgLyoqXG4gICAqIFRoZSBsb2NhbCBuYW1lIG9mIHRoaXMgdGVzdCwgbm90IGluY2x1ZGluZyB0aGUgdGVzdCBzdWl0ZSBuYW1lLlxuICAgKi9cbiAgdGhpcy50ZXN0TmFtZSA9IHRlc3ROYW1lO1xuXG4gIC8qKlxuICAgKiBUaGUgZ2xvYmFsIG5hbWUgb2YgdGhpcyB0ZXN0LCBpbmNsdWRpbmcgdGhlIHRlc3Qgc3VpdGUgbmFtZS5cbiAgICovXG4gIHRoaXMuZnVsbE5hbWUgPSBzdWl0ZUNsYXNzLnN1aXRlTmFtZSArICdbJyArIHRlc3ROYW1lICsgJ10nO1xuXG4gIC8vIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciB0aGlzIHRlc3QuXG4gIHRoaXMudGVzdEZ1bmN0aW9uXyA9IHRlc3RGdW5jdGlvbjtcbn07XG5cbi8qKlxuICogRXhlY3V0ZSB0aGlzIHRlc3QuXG4gKlxuICogVGhpcyBpcyBjYWxsZWQgYnkgYSBsaWIuVGVzdE1hbmFnZXIuUmVzdWx0IGluc3RhbmNlLCBhcyBwYXJ0IG9mIGFcbiAqIGxpYi5UZXN0TWFuYWdlci5UZXN0UnVuLiAgWW91IHNob3VsZCBub3QgY2FsbCBpdCBieSBoYW5kLlxuICpcbiAqIEBwYXJhbSB7bGliLlRlc3RNYW5hZ2VyLlJlc3VsdH0gcmVzdWx0IFRoZSByZXN1bHQgb2JqZWN0IGZvciB0aGUgdGVzdC5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlRlc3QucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKHJlc3VsdCkge1xuICB0cnkge1xuICAgIC8vIFRlc3RzIGFyZSBhcHBsaWVkIHRvIHRoZSBwYXJlbnQgbGliLlRlc3RNYW5hZ2VyLlN1aXRlIHN1YmNsYXNzLlxuICAgIHRoaXMudGVzdEZ1bmN0aW9uXy5hcHBseShyZXN1bHQuc3VpdGUsIFtyZXN1bHQsIHJlc3VsdC50ZXN0UnVuLmN4XSk7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgaWYgKGV4IGluc3RhbmNlb2YgbGliLlRlc3RNYW5hZ2VyLlJlc3VsdC5UZXN0Q29tcGxldGUpIHJldHVybjtcblxuICAgIHJlc3VsdC5wcmludGxuKCdUZXN0IHJhaXNlZCBhbiBleGNlcHRpb246ICcgKyBleCk7XG5cbiAgICBpZiAoZXguc3RhY2spIHtcbiAgICAgIGlmIChleC5zdGFjayBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJlc3VsdC5wcmludGxuKGV4LnN0YWNrLmpvaW4oJ1xcbicpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5wcmludGxuKGV4LnN0YWNrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXN1bHQuY29tcGxldGVUZXN0XyhyZXN1bHQuRkFJTEVELCBmYWxzZSk7XG4gIH1cbn07XG5cbi8qKlxuICogVXNlZCB0byBjaG9vc2UgYSBzZXQgb2YgdGVzdHMgYW5kIHJ1biB0aGVtLlxuICpcbiAqIEl0J3Mgc2xpZ2h0bHkgbW9yZSBjb252ZW5pZW50IHRvIGNvbnN0cnVjdCBvbmUgb2YgdGhlc2UgZnJvbVxuICogbGliLlRlc3RNYW5hZ2VyLnByb3RvdHlwZS5jcmVhdGVUZXN0UnVuKCkuXG4gKlxuICogQHBhcmFtIHtsaWIuVGVzdE1hbmFnZXJ9IHRlc3RNYW5hZ2VyIFRoZSB0ZXN0TWFuYWdlciBhc3NvY2lhdGVkIHdpdGggdGhpc1xuICogICAgIFRlc3RSdW4uXG4gKiBAcGFyYW0ge09iamVjdH0gY3ggQSBjb250ZXh0IHRvIGJlIHBhc3NlZCBpbnRvIHRoZSB0ZXN0cy4gIFRoaXMgY2FuIGJlIHVzZWRcbiAqICAgICB0byBzZXQgcGFyYW1ldGVycyBmb3IgdGhlIHRlc3Qgc3VpdGUgb3IgaW5kaXZpZHVhbCB0ZXN0IGNhc2VzLlxuICovXG5saWIuVGVzdE1hbmFnZXIuVGVzdFJ1biA9IGZ1bmN0aW9uKHRlc3RNYW5hZ2VyLCBjeCkge1xuICAvKipcbiAgICogVGhlIGFzc29jaWF0ZWQgbGliLlRlc3RNYW5hZ2VyIGluc3RhbmNlLlxuICAgKi9cbiAgdGhpcy50ZXN0TWFuYWdlciA9IHRlc3RNYW5hZ2VyO1xuXG4gIC8qKlxuICAgKiBTaG9ydGN1dCB0byB0aGUgbGliLlRlc3RNYW5hZ2VyJ3MgbG9nLlxuICAgKi9cbiAgdGhpcy5sb2cgPSB0ZXN0TWFuYWdlci5sb2c7XG5cbiAgLyoqXG4gICAqIFRoZSB0ZXN0IHJ1biBjb250ZXh0LiAgSXQncyBlbnRpcmVseSB1cCB0byB0aGUgdGVzdCBzdWl0ZSBhbmQgdGVzdCBjYXNlc1xuICAgKiBob3cgdGhpcyBpcyB1c2VkLiAgSXQgaXMgb3BhcXVlIHRvIGxpYi5UZXN0TWFuYWdlci4qIGNsYXNzZXMuXG4gICAqL1xuICB0aGlzLmN4ID0gY3ggfHwge307XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIHRlc3QgY2FzZXMgdGhhdCBlbmNvdW50ZXJlZCBmYWlsdXJlcy5cbiAgICovXG4gIHRoaXMuZmFpbHVyZXMgPSBbXTtcblxuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgdGVzdCBjYXNlcyB0aGF0IHBhc3NlZC5cbiAgICovXG4gIHRoaXMucGFzc2VzID0gW107XG5cbiAgLyoqXG4gICAqIFRoZSB0aW1lIHRoZSB0ZXN0IHJ1biBzdGFydGVkLCBvciBudWxsIGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgeWV0LlxuICAgKi9cbiAgdGhpcy5zdGFydERhdGUgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgdGhhdCB0aGUgdGVzdCBydW4gdG9vayB0byBjb21wbGV0ZSwgb3IgbnVsbCBpZlxuICAgKiBpdCBoYXNuJ3QgY29tcGxldGVkIHlldC5cbiAgICovXG4gIHRoaXMuZHVyYXRpb24gPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbW9zdCByZWNlbnQgcmVzdWx0IG9iamVjdCwgb3IgbnVsbCBpZiB0aGUgdGVzdCBydW4gaGFzbid0IHN0YXJ0ZWRcbiAgICogeWV0LiAgSW4gb3JkZXIgdG8gZGV0ZWN0IGxhdGUgZmFpbHVyZXMsIHRoaXMgaXMgbm90IGNsZWFyZWQgd2hlbiB0aGUgdGVzdFxuICAgKiBjb21wbGV0ZXMuXG4gICAqL1xuICB0aGlzLmN1cnJlbnRSZXN1bHQgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgbWF4aW11bSBmYWlsdXJlcy4gIFRoZSB0ZXN0IHJ1biB3aWxsIHN0b3Agd2hlbiB0aGlzIG51bWJlciBpc1xuICAgKiByZWFjaGVkLiAgSWYgMCBvciBvbWl0dGVkLCB0aGUgZW50aXJlIHNldCBvZiBzZWxlY3RlZCB0ZXN0cyBpcyBydW4sIGV2ZW5cbiAgICogaWYgc29tZSBmYWlsLlxuICAgKi9cbiAgdGhpcy5tYXhGYWlsdXJlcyA9IDA7XG5cbiAgLyoqXG4gICAqIFRydWUgaWYgdGhpcyB0ZXN0IHJ1biBlbmRlZCBlYXJseSBiZWNhdXNlIG9mIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uLlxuICAgKi9cbiAgdGhpcy5wYW5pYyA9IGZhbHNlO1xuXG4gIC8vIExpc3Qgb2YgcGVuZGluZyB0ZXN0IGNhc2VzLlxuICB0aGlzLnRlc3RRdWV1ZV8gPSBbXTtcbn07XG5cbi8qKlxuICogVGhpcyB2YWx1ZSBjYW4gYmUgcGFzc2VkIHRvIHNlbGVjdCgpIHRvIGluZGljYXRlIHRoYXQgYWxsIHRlc3RzIHNob3VsZFxuICogYmUgc2VsZWN0ZWQuXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5UZXN0UnVuLnByb3RvdHlwZS5BTExfVEVTVFMgPSBsaWIuZi5jcmVhdGVFbnVtKCc8YWxsLXRlc3RzPicpO1xuXG4vKipcbiAqIEFkZCBhIHNpbmdsZSB0ZXN0IHRvIHRoZSB0ZXN0IHJ1bi5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlRlc3RSdW4ucHJvdG90eXBlLnNlbGVjdFRlc3QgPSBmdW5jdGlvbih0ZXN0KSB7XG4gIHRoaXMudGVzdFF1ZXVlXy5wdXNoKHRlc3QpO1xufTtcblxubGliLlRlc3RNYW5hZ2VyLlRlc3RSdW4ucHJvdG90eXBlLnNlbGVjdFN1aXRlID0gZnVuY3Rpb24oXG4gIHN1aXRlQ2xhc3MsXG4gIG9wdF9wYXR0ZXJuLFxuKSB7XG4gIHZhciBwYXR0ZXJuID0gb3B0X3BhdHRlcm4gfHwgdGhpcy5BTExfVEVTVFM7XG4gIHZhciBzZWxlY3RDb3VudCA9IDA7XG4gIHZhciB0ZXN0TGlzdCA9IHN1aXRlQ2xhc3MuZ2V0VGVzdExpc3QoKTtcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IHRlc3RMaXN0Lmxlbmd0aDsgaisrKSB7XG4gICAgdmFyIHRlc3QgPSB0ZXN0TGlzdFtqXTtcbiAgICAvLyBOb3RlIHRoYXQgd2UncmUgdXNpbmcgXCIhPT1cIiByYXRoZXIgdGhhbiBcIiE9XCIgc28gdGhhdCB3ZSdyZSBtYXRjaGluZ1xuICAgIC8vIHRoZSBBTExfVEVTVFMgU3RyaW5nIG9iamVjdCwgcmF0aGVyIHRoYW4gdGhlIGNvbnRlbnRzIG9mIHRoZSBzdHJpbmcuXG4gICAgaWYgKHBhdHRlcm4gIT09IHRoaXMuQUxMX1RFU1RTKSB7XG4gICAgICBpZiAocGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICBpZiAoIXBhdHRlcm4udGVzdCh0ZXN0LnRlc3ROYW1lKSkgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKHRlc3QudGVzdE5hbWUgIT0gcGF0dGVybikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjdFRlc3QodGVzdCk7XG4gICAgc2VsZWN0Q291bnQrKztcbiAgfVxuXG4gIHJldHVybiBzZWxlY3RDb3VudDtcbn07XG5cbi8qKlxuICogU2VsZWN0cyBvbmUgb3IgbW9yZSB0ZXN0cyB0byBnYXRoZXIgcmVzdWx0cyBmb3IuXG4gKlxuICogU2VsZWN0aW5nIHRoZSBzYW1lIHRlc3QgbW9yZSB0aGFuIG9uY2UgaXMgYWxsb3dlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB9IHBhdHRlcm4gUGF0dGVybiB1c2VkIHRvIHNlbGVjdCB0ZXN0cy5cbiAqICAgICBJZiBUZXN0UnVuLnByb3RvdHlwZS5BTExfVEVTVFMsIGFsbCB0ZXN0cyBhcmUgc2VsZWN0ZWQuXG4gKiAgICAgSWYgYSBzdHJpbmcsIG9ubHkgdGhlIHRlc3QgdGhhdCBleGFjdGx5IG1hdGNoZXMgaXMgc2VsZWN0ZWQuXG4gKiAgICAgSWYgYSBSZWdFeHAsIG9ubHkgdGVzdHMgbWF0Y2hpbmcgdGhlIFJlZ0V4cCBhcmUgYWRkZWQuXG4gKlxuICogQHJldHVybiB7aW50fSBUaGUgbnVtYmVyIG9mIGFkZGl0aW9uYWwgdGVzdHMgdGhhdCBoYXZlIGJlZW4gc2VsZWN0ZWQgaW50b1xuICogICAgIHRoaXMgVGVzdFJ1bi5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlRlc3RSdW4ucHJvdG90eXBlLnNlbGVjdFBhdHRlcm4gPSBmdW5jdGlvbihwYXR0ZXJuKSB7XG4gIHZhciBzZWxlY3RDb3VudCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaWIuVGVzdE1hbmFnZXIuU3VpdGUuc3ViY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgIHNlbGVjdENvdW50ICs9IHRoaXMuc2VsZWN0U3VpdGUoXG4gICAgICBsaWIuVGVzdE1hbmFnZXIuU3VpdGUuc3ViY2xhc3Nlc1tpXSxcbiAgICAgIHBhdHRlcm4sXG4gICAgKTtcbiAgfVxuXG4gIGlmICghc2VsZWN0Q291bnQpIHtcbiAgICB0aGlzLmxvZy53YXJuKCdObyB0ZXN0cyBtYXRjaGVkIHNlbGVjdGlvbiBjcml0ZXJpYTogJyArIHBhdHRlcm4pO1xuICB9XG5cbiAgcmV0dXJuIHNlbGVjdENvdW50O1xufTtcblxuLyoqXG4gKiBIb29rZWQgdXAgdG8gd2luZG93Lm9uZXJyb3IgZHVyaW5nIGEgdGVzdCBydW4gaW4gb3JkZXIgdG8gY2F0Y2ggZXhjZXB0aW9uc1xuICogdGhhdCB3b3VsZCBvdGhlcndpc2UgZ28gdW5jYXVnaHQuXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5UZXN0UnVuLnByb3RvdHlwZS5vblVuY2F1Z2h0RXhjZXB0aW9uXyA9IGZ1bmN0aW9uKFxuICBtZXNzYWdlLFxuICBmaWxlLFxuICBsaW5lLFxuKSB7XG4gIGlmIChcbiAgICBtZXNzYWdlLmluZGV4T2YoJ1VuY2F1Z2h0IGxpYi5UZXN0TWFuYWdlci5SZXN1bHQuVGVzdENvbXBsZXRlJykgPT0gMCB8fFxuICAgIG1lc3NhZ2UuaW5kZXhPZignc3RhdHVzOiBwYXNzZWQnKSAhPSAtMVxuICApIHtcbiAgICAvLyBUaGlzIGlzIGEgcmVzdWx0LnBhc3MoKSBvciByZXN1bHQuZmFpbCgpIGNhbGwgZnJvbSBhIGNhbGxiYWNrLiAgV2UncmVcbiAgICAvLyBhbHJlYWR5IGdvaW5nIHRvIGRlYWwgd2l0aCBpdCBhcyBwYXJ0IG9mIHRoZSBjb21wbGV0ZVRlc3RfKCkgY2FsbFxuICAgIC8vIHRoYXQgcmFpc2VkIGl0LiAgV2UgY2FuIHNhZmVseSBzcXVlbGNoIHRoaXMgZXJyb3IgbWVzc2FnZS5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICghdGhpcy5jdXJyZW50UmVzdWx0KSByZXR1cm47XG5cbiAgaWYgKG1lc3NhZ2UgPT0gJ1VuY2F1Z2h0ICcgKyB0aGlzLmN1cnJlbnRSZXN1bHQuZXhwZWN0ZWRFcnJvck1lc3NhZ2VfKSB7XG4gICAgLy8gVGVzdCBjYXNlcyBtYXkgbmVlZCB0byByYWlzZSBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uIGFzIHBhcnQgb2YgdGhlIHRlc3QuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHdoZW4gPSAnZHVyaW5nJztcblxuICBpZiAodGhpcy5jdXJyZW50UmVzdWx0LnN0YXR1cyAhPSB0aGlzLmN1cnJlbnRSZXN1bHQuUEVORElORykgd2hlbiA9ICdhZnRlcic7XG5cbiAgdGhpcy5sb2cuZXJyb3IoXG4gICAgJ1VuY2F1Z2h0IGV4Y2VwdGlvbiAnICtcbiAgICAgIHdoZW4gK1xuICAgICAgJyB0ZXN0IGNhc2U6ICcgK1xuICAgICAgdGhpcy5jdXJyZW50UmVzdWx0LnRlc3QuZnVsbE5hbWUsXG4gICk7XG4gIHRoaXMubG9nLmVycm9yKG1lc3NhZ2UgKyAnLCAnICsgZmlsZSArICc6JyArIGxpbmUpO1xuXG4gIHRoaXMuY3VycmVudFJlc3VsdC5jb21wbGV0ZVRlc3RfKHRoaXMuY3VycmVudFJlc3VsdC5GQUlMRUQsIGZhbHNlKTtcblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIENhbGxlZCB0byB3aGVuIHRoaXMgdGVzdCBydW4gaGFzIGNvbXBsZXRlZC5cbiAqXG4gKiBUaGlzIG1ldGhvZCB0eXBpY2FsbHkgcmUtcnVucyBpdHNlbGYgYXN5bmNocm9ub3VzbHksIGluIG9yZGVyIHRvIGxldCB0aGVcbiAqIERPTSBzdGFiaWxpemUgYW5kIHNob3J0LXRlcm0gdGltZW91dHMgdG8gY29tcGxldGUgYmVmb3JlIGRlY2xhcmluZyB0aGVcbiAqIHRlc3QgcnVuIGNvbXBsZXRlLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X3NraXBUaW1lb3V0IElmIHRydWUsIHRoZSB0aW1lb3V0IGlzIHNraXBwZWQgYW5kIHRoZVxuICogICAgIHRlc3QgcnVuIGlzIGNvbXBsZXRlZCBpbW1lZGlhdGVseS4gIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCBmcm9tIHdpdGhpblxuICogICAgIHRoaXMgZnVuY3Rpb24uXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5UZXN0UnVuLnByb3RvdHlwZS5vblRlc3RSdW5Db21wbGV0ZV8gPSBmdW5jdGlvbihcbiAgb3B0X3NraXBUaW1lb3V0LFxuKSB7XG4gIGlmICghb3B0X3NraXBUaW1lb3V0KSB7XG4gICAgLy8gVGhlIGZpbmFsIHRlc3QgbWF5IGhhdmUgbGVmdCBhIGxpbmdlcmluZyBzZXRUaW1lb3V0KC4uLiwgMCksIG9yIG1heWJlXG4gICAgLy8gcG9rZWQgYXQgdGhlIERPTSBpbiBhIHdheSB0aGF0IHdpbGwgdHJpZ2dlciBhIGV2ZW50IHRvIGZpcmUgYXQgdGhlIGVuZFxuICAgIC8vIG9mIHRoaXMgc3RhY2ssIHNvIHdlIGdpdmUgdGhpbmdzIGEgY2hhbmNlIHRvIHNldHRsZSBkb3duIGJlZm9yZSBvdXJcbiAgICAvLyBmaW5hbCBjbGVhbnVwLi4uXG4gICAgc2V0VGltZW91dCh0aGlzLm9uVGVzdFJ1bkNvbXBsZXRlXy5iaW5kKHRoaXMpLCAwLCB0cnVlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmR1cmF0aW9uID0gbmV3IERhdGUoKSAtIHRoaXMuc3RhcnREYXRlO1xuXG4gIHRoaXMubG9nLmdyb3VwRW5kKCk7XG4gIHRoaXMubG9nLmluZm8oXG4gICAgdGhpcy5wYXNzZXMubGVuZ3RoICtcbiAgICAgICcgcGFzc2VkLCAnICtcbiAgICAgIHRoaXMuZmFpbHVyZXMubGVuZ3RoICtcbiAgICAgICcgZmFpbGVkLCAnICtcbiAgICAgIHRoaXMubXNUb1NlY29uZHNfKHRoaXMuZHVyYXRpb24pLFxuICApO1xuXG4gIHRoaXMuc3VtbWFyaXplKCk7XG5cbiAgd2luZG93Lm9uZXJyb3IgPSBudWxsO1xuXG4gIHRoaXMudGVzdE1hbmFnZXIub25UZXN0UnVuQ29tcGxldGUodGhpcyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCBieSB0aGUgbGliLlRlc3RNYW5hZ2VyLlJlc3VsdCBvYmplY3Qgd2hlbiBhIHRlc3QgY29tcGxldGVzLlxuICpcbiAqIEBwYXJhbSB7bGliLlRlc3RNYW5hZ2VyLlJlc3VsdH0gcmVzdWx0IFRoZSByZXN1bHQgb2JqZWN0IHdoaWNoIGhhcyBqdXN0XG4gKiAgICAgY29tcGxldGVkLlxuICovXG5saWIuVGVzdE1hbmFnZXIuVGVzdFJ1bi5wcm90b3R5cGUub25SZXN1bHRDb21wbGV0ZSA9IGZ1bmN0aW9uKHJlc3VsdCkge1xuICB0cnkge1xuICAgIHRoaXMudGVzdE1hbmFnZXIudGVzdFBvc3RhbWJsZShyZXN1bHQsIHRoaXMuY3gpO1xuICAgIHJlc3VsdC5zdWl0ZS5wb3N0YW1ibGUocmVzdWx0LCB0aGlzLmN0eCk7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgdGhpcy5sb2cuZXJyb3IoXG4gICAgICAnVW5leHBlY3RlZCBleGNlcHRpb24gaW4gcG9zdGFtYmxlOiAnICsgKGV4LnN0YWNrID8gZXguc3RhY2sgOiBleCksXG4gICAgKTtcbiAgICB0aGlzLnBhbmljID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChyZXN1bHQuc3RhdHVzICE9IHJlc3VsdC5QQVNTRUQpIHRoaXMubG9nLmVycm9yKHJlc3VsdC5zdGF0dXMpO1xuICBlbHNlIGlmIChyZXN1bHQuZHVyYXRpb24gPiA1MDApXG4gICAgdGhpcy5sb2cud2FybignU2xvdyB0ZXN0IHRvb2sgJyArIHRoaXMubXNUb1NlY29uZHNfKHJlc3VsdC5kdXJhdGlvbikpO1xuICB0aGlzLmxvZy5ncm91cEVuZCgpO1xuXG4gIGlmIChyZXN1bHQuc3RhdHVzID09IHJlc3VsdC5GQUlMRUQpIHtcbiAgICB0aGlzLmZhaWx1cmVzLnB1c2gocmVzdWx0KTtcbiAgICB0aGlzLmN1cnJlbnRTdWl0ZSA9IG51bGw7XG4gIH0gZWxzZSBpZiAocmVzdWx0LnN0YXR1cyA9PSByZXN1bHQuUEFTU0VEKSB7XG4gICAgdGhpcy5wYXNzZXMucHVzaChyZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubG9nLmVycm9yKFxuICAgICAgJ1Vua25vd24gcmVzdWx0IHN0YXR1czogJyArIHJlc3VsdC50ZXN0LmZ1bGxOYW1lICsgJzogJyArIHJlc3VsdC5zdGF0dXMsXG4gICAgKTtcbiAgICB0aGlzLnBhbmljID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnJ1bk5leHRUZXN0XygpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgYnkgdGhlIGxpYi5UZXN0TWFuYWdlci5SZXN1bHQgb2JqZWN0IHdoZW4gYSB0ZXN0IHdoaWNoIGhhcyBhbHJlYWR5XG4gKiBjb21wbGV0ZWQgcmVwb3J0cyBhbm90aGVyIGNvbXBsZXRpb24uXG4gKlxuICogVGhpcyBpcyB1c3VhbGx5IGluZGljYXRpdmUgb2YgYSBidWdneSB0ZXN0Y2FzZS4gIEl0IGlzIHByb2JhYmx5IHJlcG9ydGluZyBhXG4gKiByZXN1bHQgb24gZXhpdCBhbmQgdGhlbiBhZ2FpbiBmcm9tIGFuIGFzeW5jaHJvbm91cyBjYWxsYmFjay5cbiAqXG4gKiBJdCBtYXkgYWxzbyBiZSB0aGUgY2FzZSB0aGF0IHRoZSBsYXN0IGFjdCBvZiB0aGUgdGVzdGNhc2UgY2F1c2VzIGEgRE9NIGNoYW5nZVxuICogd2hpY2ggdHJpZ2dlcnMgc29tZSBldmVudCB0byBydW4gYWZ0ZXIgdGhlIHRlc3QgcmV0dXJucy4gIElmIHRoZSBldmVudFxuICogaGFuZGxlciByZXBvcnRzIGEgZmFpbHVyZSBvciByYWlzZXMgYW4gdW5jYXVnaHQgZXhjZXB0aW9uLCB0aGUgdGVzdCB3aWxsXG4gKiBmYWlsIGV2ZW4gdGhvdWdoIGl0IGhhcyBhbHJlYWR5IGNvbXBsZXRlZC5cbiAqXG4gKiBJbiBhbnkgY2FzZSwgcmUtY29tcGxldGluZyBhIHRlc3QgQUxXQVlTIG1vdmVzIGl0IGludG8gdGhlIGZhaWx1cmUgcGlsZS5cbiAqXG4gKiBAcGFyYW0ge2xpYi5UZXN0TWFuYWdlci5SZXN1bHR9IHJlc3VsdCBUaGUgcmVzdWx0IG9iamVjdCB3aGljaCBoYXMganVzdFxuICogICAgIGNvbXBsZXRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBsYXRlU3RhdHVzIFRoZSBzdGF0dXMgdGhhdCB0aGUgdGVzdCBhdHRlbXB0ZWQgdG8gcmVjb3JkIHRoaXNcbiAqICAgICB0aW1lIGFyb3VuZC5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlRlc3RSdW4ucHJvdG90eXBlLm9uUmVzdWx0UmVDb21wbGV0ZSA9IGZ1bmN0aW9uKFxuICByZXN1bHQsXG4gIGxhdGVTdGF0dXMsXG4pIHtcbiAgdGhpcy5sb2cuZXJyb3IoXG4gICAgJ0xhdGUgY29tcGxldGUgZm9yIHRlc3Q6ICcgKyByZXN1bHQudGVzdC5mdWxsTmFtZSArICc6ICcgKyBsYXRlU3RhdHVzLFxuICApO1xuXG4gIC8vIENvbnNpZGVyIGFueSBsYXRlIGNvbXBsZXRpb24gYSBmYWlsdXJlLCBldmVuIGlmIGl0J3MgYSBkb3VibGUtcGFzcywgc2luY2VcbiAgLy8gaXQncyBhIG1pc3VzZSBvZiB0aGUgdGVzdGluZyBBUEkuXG4gIHZhciBpbmRleCA9IHRoaXMucGFzc2VzLmluZGV4T2YocmVzdWx0KTtcbiAgaWYgKGluZGV4ID49IDApIHtcbiAgICB0aGlzLnBhc3Nlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHRoaXMuZmFpbHVyZXMucHVzaChyZXN1bHQpO1xuICB9XG59O1xuXG4vKipcbiAqIFJ1biB0aGUgbmV4dCB0ZXN0IGluIHRoZSBxdWV1ZS5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlRlc3RSdW4ucHJvdG90eXBlLnJ1bk5leHRUZXN0XyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5wYW5pYyB8fCAhdGhpcy50ZXN0UXVldWVfLmxlbmd0aCkge1xuICAgIHRoaXMub25UZXN0UnVuQ29tcGxldGVfKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMubWF4RmFpbHVyZXMgJiYgdGhpcy5mYWlsdXJlcy5sZW5ndGggPj0gdGhpcy5tYXhGYWlsdXJlcykge1xuICAgIHRoaXMubG9nLmVycm9yKCdNYXhpbXVtIGZhaWx1cmUgY291bnQgcmVhY2hlZCwgYWJvcnRpbmcgdGVzdCBydW4uJyk7XG4gICAgdGhpcy5vblRlc3RSdW5Db21wbGV0ZV8oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBQZWVrIGF0IHRoZSB0b3AgdGVzdCBmaXJzdC4gIFdlIHJlbW92ZSBpdCBsYXRlciBqdXN0IGJlZm9yZSBpdCdzIGFib3V0XG4gIC8vIHRvIHJ1biwgc28gdGhhdCB3ZSBkb24ndCBkaXN0dXJiIHRoZSBpbmNvbXBsZXRlIHRlc3QgY291bnQgaW4gdGhlXG4gIC8vIGV2ZW50IHRoYXQgd2UgZmFpbCBiZWZvcmUgcnVubmluZyBpdC5cbiAgdmFyIHRlc3QgPSB0aGlzLnRlc3RRdWV1ZV9bMF07XG4gIHZhciBzdWl0ZSA9IHRoaXMuY3VycmVudFJlc3VsdCA/IHRoaXMuY3VycmVudFJlc3VsdC5zdWl0ZSA6IG51bGw7XG5cbiAgdHJ5IHtcbiAgICBpZiAoIXN1aXRlIHx8ICEoc3VpdGUgaW5zdGFuY2VvZiB0ZXN0LnN1aXRlQ2xhc3MpKSB7XG4gICAgICBpZiAoc3VpdGUpIHRoaXMubG9nLmdyb3VwRW5kKCk7XG4gICAgICB0aGlzLmxvZy5ncm91cCh0ZXN0LnN1aXRlQ2xhc3Muc3VpdGVOYW1lKTtcbiAgICAgIHN1aXRlID0gbmV3IHRlc3Quc3VpdGVDbGFzcyh0aGlzLnRlc3RNYW5hZ2VyLCB0aGlzLmN4KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgLy8gSWYgdGVzdCBzdWl0ZSBzZXR1cCBmYWlscyB3ZSdyZSBub3QgZXZlbiBnb2luZyB0byB0cnkgdG8gcnVuIHRoZSB0ZXN0cy5cbiAgICB0aGlzLmxvZy5lcnJvcignRXhjZXB0aW9uIGR1cmluZyBzZXR1cDogJyArIChleC5zdGFjayA/IGV4LnN0YWNrIDogZXgpKTtcbiAgICB0aGlzLnBhbmljID0gdHJ1ZTtcbiAgICB0aGlzLm9uVGVzdFJ1bkNvbXBsZXRlXygpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy5sb2cuZ3JvdXAodGVzdC50ZXN0TmFtZSk7XG5cbiAgICB0aGlzLmN1cnJlbnRSZXN1bHQgPSBuZXcgbGliLlRlc3RNYW5hZ2VyLlJlc3VsdCh0aGlzLCBzdWl0ZSwgdGVzdCk7XG4gICAgdGhpcy50ZXN0TWFuYWdlci50ZXN0UHJlYW1ibGUodGhpcy5jdXJyZW50UmVzdWx0LCB0aGlzLmN4KTtcbiAgICBzdWl0ZS5wcmVhbWJsZSh0aGlzLmN1cnJlbnRSZXN1bHQsIHRoaXMuY3gpO1xuXG4gICAgdGhpcy50ZXN0UXVldWVfLnNoaWZ0KCk7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgdGhpcy5sb2cuZXJyb3IoXG4gICAgICAnVW5leHBlY3RlZCBleGNlcHRpb24gZHVyaW5nIHRlc3QgcHJlYW1ibGU6ICcgK1xuICAgICAgICAoZXguc3RhY2sgPyBleC5zdGFjayA6IGV4KSxcbiAgICApO1xuICAgIHRoaXMubG9nLmdyb3VwRW5kKCk7XG5cbiAgICB0aGlzLnBhbmljID0gdHJ1ZTtcbiAgICB0aGlzLm9uVGVzdFJ1bkNvbXBsZXRlXygpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy5jdXJyZW50UmVzdWx0LnJ1bigpO1xuICB9IGNhdGNoIChleCkge1xuICAgIC8vIFJlc3VsdC5ydW4oKSBzaG91bGQgY2F0Y2ggdGVzdCBleGNlcHRpb25zIGFuZCB0dXJuIHRoZW0gaW50byBmYWlsdXJlcy5cbiAgICAvLyBJZiB3ZSBnb3QgaGVyZSwgaXQgbWVhbnMgdGhlcmUgaXMgdHJvdWJsZSBpbiB0aGUgdGVzdGluZyBmcmFtZXdvcmsuXG4gICAgdGhpcy5sb2cuZXJyb3IoXG4gICAgICAnVW5leHBlY3RlZCBleGNlcHRpb24gZHVyaW5nIHRlc3QgcnVuOiAnICsgKGV4LnN0YWNrID8gZXguc3RhY2sgOiBleCksXG4gICAgKTtcbiAgICB0aGlzLnBhbmljID0gdHJ1ZTtcbiAgfVxufTtcblxuLyoqXG4gKiBSdW4gdGhlIHNlbGVjdGVkIGxpc3Qgb2YgdGVzdHMuXG4gKlxuICogU29tZSB0ZXN0cyBtYXkgbmVlZCB0byBydW4gYXN5bmNocm9ub3VzbHksIHNvIHlvdSBjYW5ub3QgYXNzdW1lIHRoZSBydW4gaXNcbiAqIGNvbXBsZXRlIHdoZW4gdGhpcyBmdW5jdGlvbiByZXR1cm5zLiAgSW5zdGVhZCwgcGFzcyBpbiBhIGZ1bmN0aW9uIHRvIGJlXG4gKiBjYWxsZWQgYmFjayB3aGVuIHRoZSBydW4gaGFzIGNvbXBsZXRlZC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9nIHRoZSByZXN1bHRzIG9mIHRoZSB0ZXN0IHJ1biBhcyB0aGV5IGhhcHBlbiBpbnRvIHRoZVxuICogbG9nIGRlZmluZWQgYnkgdGhlIGFzc29jaWF0ZWQgbGliLlRlc3RNYW5hZ2VyLiAgQnkgZGVmYXVsdCB0aGlzIGlzXG4gKiBjb25zb2xlLmxvZywgd2hpY2ggY2FuIGJlIHZpZXdlZCBpbiB0aGUgSmF2YVNjcmlwdCBjb25zb2xlIG9mIG1vc3QgYnJvd3NlcnMuXG4gKlxuICogVGhlIGJyb3dzZXIgc3RhdGUgaXMgZGV0ZXJtaW5lZCBieSB0aGUgbGFzdCB0ZXN0IHRvIHJ1bi4gIFdlIGludGVudGlvbmFsbHlcbiAqIGRvbid0IGRvIGFueSBjbGVhbnVwIHNvIHRoYXQgeW91IGNhbiBpbnNwZWN0IHRoZSBzdGF0ZSBvZiBhIGZhaWxlZCB0ZXN0LCBvclxuICogbGVhdmUgdGhlIGJyb3dzZXIgcmVhZHkgZm9yIG1hbnVhbCB0ZXN0aW5nLlxuICpcbiAqIEFueSBmYWlsdXJlcyBpbiBsaWIuVGVzdE1hbmFnZXIuKiBjb2RlIG9yIHRlc3Qgc3VpdGUgc2V0dXAgb3IgdGVzdCBjYXNlXG4gKiBwcmVhbWJsZSB3aWxsIGNhdXNlIHRoZSB0ZXN0IHJ1biB0byBhYm9ydC5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlRlc3RSdW4ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmxvZy5pbmZvKCdSdW5uaW5nICcgKyB0aGlzLnRlc3RRdWV1ZV8ubGVuZ3RoICsgJyB0ZXN0KHMpJyk7XG5cbiAgd2luZG93Lm9uZXJyb3IgPSB0aGlzLm9uVW5jYXVnaHRFeGNlcHRpb25fLmJpbmQodGhpcyk7XG4gIHRoaXMuc3RhcnREYXRlID0gbmV3IERhdGUoKTtcbiAgdGhpcy5ydW5OZXh0VGVzdF8oKTtcbn07XG5cbi8qKlxuICogRm9ybWF0IG1pbGxpc2Vjb25kcyBhcyBmcmFjdGlvbmFsIHNlY29uZHMuXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5UZXN0UnVuLnByb3RvdHlwZS5tc1RvU2Vjb25kc18gPSBmdW5jdGlvbihtcykge1xuICB2YXIgc2VjcyA9IChtcyAvIDEwMDApLnRvRml4ZWQoMik7XG4gIHJldHVybiBzZWNzICsgJ3MnO1xufTtcblxuLyoqXG4gKiBMb2cgdGhlIGN1cnJlbnQgcmVzdWx0IHN1bW1hcnkuXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5UZXN0UnVuLnByb3RvdHlwZS5zdW1tYXJpemUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuZmFpbHVyZXMubGVuZ3RoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmZhaWx1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmxvZy5lcnJvcignRkFJTEVEOiAnICsgdGhpcy5mYWlsdXJlc1tpXS50ZXN0LmZ1bGxOYW1lKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy50ZXN0UXVldWVfLmxlbmd0aCkge1xuICAgIHRoaXMubG9nLndhcm4oXG4gICAgICAnVGVzdCBydW4gaW5jb21wbGV0ZTogJyArXG4gICAgICAgIHRoaXMudGVzdFF1ZXVlXy5sZW5ndGggK1xuICAgICAgICAnIHRlc3Qocykgd2VyZSBub3QgcnVuLicsXG4gICAgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZWNvcmQgb2YgdGhlIHJlc3VsdCBvZiBhIHNpbmdsZSB0ZXN0LlxuICpcbiAqIFRoZXNlIGFyZSBjb25zdHJ1Y3RlZCBkdXJpbmcgYSB0ZXN0IHJ1biwgeW91IHNob3VsZG4ndCBoYXZlIHRvIG1ha2Ugb25lXG4gKiBvbiB5b3VyIG93bi5cbiAqXG4gKiBBbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGlzIHBhc3NlZCBpbiB0byBlYWNoIHRlc3QgZnVuY3Rpb24uICBJdCBjYW4gYmVcbiAqIHVzZWQgdG8gYWRkIG1lc3NhZ2VzIHRvIHRoZSB0ZXN0IGxvZywgdG8gcmVjb3JkIGEgdGVzdCBwYXNzL2ZhaWwgc3RhdGUsIHRvXG4gKiB0ZXN0IGFzc2VydGlvbnMsIG9yIHRvIGNyZWF0ZSBleGNlcHRpb24tcHJvb2Ygd3JhcHBlcnMgZm9yIGNhbGxiYWNrXG4gKiBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtsaWIuVGVzdE1hbmFnZXIuVGVzdFJ1bn0gdGVzdFJ1biBUaGUgVGVzdFJ1biBpbnN0YW5jZSBhc3NvY2lhdGVkIHdpdGhcbiAqICAgICB0aGlzIHJlc3VsdC5cbiAqIEBwYXJhbSB7bGliLlRlc3RNYW5hZ2VyLlN1aXR9IHN1aXRlIFRoZSBTdWl0ZSBjb250YWluaW5nIHRoZSB0ZXN0IHdlJ3JlXG4gKiAgICAgY29sbGVjdGluZyB0aGlzIHJlc3VsdCBmb3IuXG4gKiBAcGFyYW0ge2xpYi5UZXN0TWFuYWdlci5UZXN0fSB0ZXN0IFRoZSB0ZXN0IHdlJ3JlIGNvbGxlY3RpbmcgdGhpcyByZXN1bHQgZm9yLlxuICovXG5saWIuVGVzdE1hbmFnZXIuUmVzdWx0ID0gZnVuY3Rpb24odGVzdFJ1biwgc3VpdGUsIHRlc3QpIHtcbiAgLyoqXG4gICAqIFRoZSBUZXN0UnVuIGluc3RhbmNlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHJlc3VsdC5cbiAgICovXG4gIHRoaXMudGVzdFJ1biA9IHRlc3RSdW47XG5cbiAgLyoqXG4gICAqIFRoZSBTdWl0ZSBjb250YWluaW5nIHRoZSB0ZXN0IHdlJ3JlIGNvbGxlY3RpbmcgdGhpcyByZXN1bHQgZm9yLlxuICAgKi9cbiAgdGhpcy5zdWl0ZSA9IHN1aXRlO1xuXG4gIC8qKlxuICAgKiBUaGUgdGVzdCB3ZSdyZSBjb2xsZWN0aW5nIHRoaXMgcmVzdWx0IGZvci5cbiAgICovXG4gIHRoaXMudGVzdCA9IHRlc3Q7XG5cbiAgLyoqXG4gICAqIFRoZSB0aW1lIHdlIHN0YXJ0ZWQgdG8gY29sbGVjdCB0aGlzIHJlc3VsdCwgb3IgbnVsbCBpZiB3ZSBoYXZlbid0IHN0YXJ0ZWQuXG4gICAqL1xuICB0aGlzLnN0YXJ0RGF0ZSA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyB0aGF0IHRoZSB0ZXN0IHRvb2sgdG8gY29tcGxldGUsIG9yIG51bGwgaWZcbiAgICogaXQgaGFzbid0IGNvbXBsZXRlZCB5ZXQuXG4gICAqL1xuICB0aGlzLmR1cmF0aW9uID0gbnVsbDtcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoaXMgdGVzdCByZXN1bHQuXG4gICAqL1xuICB0aGlzLnN0YXR1cyA9IHRoaXMuUEVORElORztcblxuICAvLyBBbiBlcnJvciBtZXNzYWdlIHRoYXQgdGhlIHRlc3QgY2FzZSBpcyBleHBlY3RlZCB0byBnZW5lcmF0ZS5cbiAgdGhpcy5leHBlY3RlZEVycm9yTWVzc2FnZV8gPSBudWxsO1xufTtcblxuLyoqXG4gKiBQb3NzaWJsZSB2YWx1ZXMgZm9yIHRoaXMuc3RhdHVzLlxuICovXG5saWIuVGVzdE1hbmFnZXIuUmVzdWx0LnByb3RvdHlwZS5QRU5ESU5HID0gJ3BlbmRpbmcnO1xubGliLlRlc3RNYW5hZ2VyLlJlc3VsdC5wcm90b3R5cGUuRkFJTEVEID0gJ0ZBSUxFRCc7XG5saWIuVGVzdE1hbmFnZXIuUmVzdWx0LnByb3RvdHlwZS5QQVNTRUQgPSAncGFzc2VkJztcblxuLyoqXG4gKiBFeGNlcHRpb24gdGhyb3duIHdoZW4gYSB0ZXN0IGNvbXBsZXRlcyAocGFzcyBvciBmYWlsKSwgdG8gZW5zdXJlIG5vIG1vcmUgb2ZcbiAqIHRoZSB0ZXN0IGlzIHJ1bi5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlJlc3VsdC5UZXN0Q29tcGxldGUgPSBmdW5jdGlvbihyZXN1bHQpIHtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG5saWIuVGVzdE1hbmFnZXIuUmVzdWx0LlRlc3RDb21wbGV0ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIChcbiAgICAnbGliLlRlc3RNYW5hZ2VyLlJlc3VsdC5UZXN0Q29tcGxldGU6ICcgK1xuICAgIHRoaXMucmVzdWx0LnRlc3QuZnVsbE5hbWUgK1xuICAgICcsIHN0YXR1czogJyArXG4gICAgdGhpcy5yZXN1bHQuc3RhdHVzXG4gICk7XG59O1xuXG4vKipcbiAqIFN0YXJ0IHRoZSB0ZXN0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIHJlc3VsdC5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlJlc3VsdC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc3RhcnREYXRlID0gbmV3IERhdGUoKTtcbiAgdGhpcy50ZXN0LnJ1bih0aGlzKTtcblxuICBpZiAodGhpcy5zdGF0dXMgPT0gdGhpcy5QRU5ESU5HICYmICF0aGlzLnRpbWVvdXRfKSB7XG4gICAgdGhpcy5wcmludGxuKCdUZXN0IGRpZCBub3QgcmV0dXJuIGEgdmFsdWUgYW5kIGRpZCBub3QgcmVxdWVzdCBtb3JlIHRpbWUuJyk7XG4gICAgdGhpcy5jb21wbGV0ZVRlc3RfKHRoaXMuRkFJTEVELCBmYWxzZSk7XG4gIH1cbn07XG5cbi8qKlxuICogVW5oYW5kbGVkIGVycm9yIG1lc3NhZ2UgdGhpcyB0ZXN0IGV4cGVjdHMgdG8gZ2VuZXJhdGUuXG4gKlxuICogVGhpcyBtdXN0IGJlIHRoZSBleGFjdCBzdHJpbmcgdGhhdCB3b3VsZCBhcHBlYXIgaW4gdGhlIEphdmFTY3JpcHQgY29uc29sZSxcbiAqIG1pbnVzIHRoZSAnVW5jYXVnaHQgJyBwcmVmaXguXG4gKlxuICogVGhlIHRlc3QgY2FzZSBkb2VzICpub3QqIGF1dG9tYXRpY2FsbHkgZmFpbCBpZiB0aGUgZXJyb3IgbWVzc2FnZSBpcyBub3RcbiAqIGVuY291bnRlcmVkLlxuICovXG5saWIuVGVzdE1hbmFnZXIuUmVzdWx0LnByb3RvdHlwZS5leHBlY3RFcnJvck1lc3NhZ2UgPSBmdW5jdGlvbihzdHIpIHtcbiAgdGhpcy5leHBlY3RlZEVycm9yTWVzc2FnZV8gPSBzdHI7XG59O1xuXG4vKipcbiAqIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIGEgdGVzdCB0aW1lcyBvdXQuXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5SZXN1bHQucHJvdG90eXBlLm9uVGltZW91dF8gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy50aW1lb3V0XyA9IG51bGw7XG5cbiAgaWYgKHRoaXMuc3RhdHVzICE9IHRoaXMuUEVORElORykgcmV0dXJuO1xuXG4gIHRoaXMucHJpbnRsbignVGVzdCB0aW1lZCBvdXQuJyk7XG4gIHRoaXMuY29tcGxldGVUZXN0Xyh0aGlzLkZBSUxFRCwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBJbmRpY2F0ZSB0aGF0IGEgdGVzdCBjYXNlIG5lZWRzIG1vcmUgdGltZSB0byBjb21wbGV0ZS5cbiAqXG4gKiBCZWZvcmUgYSB0ZXN0IGNhc2UgcmV0dXJucyBpdCBtdXN0IHJlcG9ydCBhIHBhc3MvZmFpbCByZXN1bHQsIG9yIHJlcXVlc3QgbW9yZVxuICogdGltZSB0byBkbyBzby5cbiAqXG4gKiBJZiBhIHRlc3QgZG9lcyBub3QgcmVwb3J0IHBhc3MvZmFpbCBiZWZvcmUgdGhlIHRpbWUgZXhwaXJlcyBpdCB3aWxsXG4gKiBiZSByZXBvcnRlZCBhcyBhIHRpbWVvdXQgZmFpbHVyZS4gIEFueSBsYXRlIHBhc3MvZmFpbHMgd2lsbCBiZSBub3RlZCBpbiB0aGVcbiAqIHRlc3QgbG9nLCBidXQgd2lsbCBub3QgYWZmZWN0IHRoZSBmaW5hbCByZXN1bHQgb2YgdGhlIHRlc3QuXG4gKlxuICogVGVzdCBjYXNlcyBtYXkgY2FsbCByZXF1ZXN0VGltZSBtb3JlIHRoYW4gb25jZS4gIElmIHlvdSBoYXZlIGEgZmV3IGxheWVyc1xuICogb2YgYXN5bmNocm9ub3VzIEFQSSB0byBnbyB0aHJvdWdoLCB5b3Ugc2hvdWxkIGNhbGwgdGhpcyBvbmNlIHBlciBsYXllciB3aXRoXG4gKiBhbiBlc3RpbWF0ZSBvZiBob3cgbG9uZyBlYWNoIGNhbGxiYWNrIHdpbGwgdGFrZSB0byBjb21wbGV0ZS5cbiAqXG4gKiBAcGFyYW0ge2ludH0gbXMgTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyByZXF1ZXN0ZWQuXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5SZXN1bHQucHJvdG90eXBlLnJlcXVlc3RUaW1lID0gZnVuY3Rpb24obXMpIHtcbiAgaWYgKHRoaXMudGltZW91dF8pIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRfKTtcblxuICB0aGlzLnRpbWVvdXRfID0gc2V0VGltZW91dCh0aGlzLm9uVGltZW91dF8uYmluZCh0aGlzKSwgbXMpO1xufTtcblxuLyoqXG4gKiBSZXBvcnQgdGhlIGNvbXBsZXRpb24gb2YgYSB0ZXN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXMgVGhlIHN0YXR1cyBvZiB0aGUgdGVzdCBjYXNlLlxuICogQHBhcmFtIHtib29sZWFufSBvcHRfdGhyb3cgT3B0aW9uYWwgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgb3Igbm90XG4gKiAgICAgdG8gdGhyb3cgdGhlIFRlc3RDb21wbGV0ZSBleGNlcHRpb24uXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5SZXN1bHQucHJvdG90eXBlLmNvbXBsZXRlVGVzdF8gPSBmdW5jdGlvbihzdGF0dXMsIG9wdF90aHJvdykge1xuICBpZiAodGhpcy5zdGF0dXMgPT0gdGhpcy5QRU5ESU5HKSB7XG4gICAgdGhpcy5kdXJhdGlvbiA9IG5ldyBEYXRlKCkgLSB0aGlzLnN0YXJ0RGF0ZTtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcblxuICAgIHRoaXMudGVzdFJ1bi5vblJlc3VsdENvbXBsZXRlKHRoaXMpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMudGVzdFJ1bi5vblJlc3VsdFJlQ29tcGxldGUodGhpcywgc3RhdHVzKTtcbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMiB8fCBvcHRfdGhyb3cpXG4gICAgdGhyb3cgbmV3IGxpYi5UZXN0TWFuYWdlci5SZXN1bHQuVGVzdENvbXBsZXRlKHRoaXMpO1xufTtcblxuLyoqXG4gKiBBc3NlcnQgdGhhdCBhbiBhY3R1YWwgdmFsdWUgaXMgZXhhY3RseSBlcXVhbCB0byB0aGUgZXhwZWN0ZWQgdmFsdWUuXG4gKlxuICogVGhpcyB1c2VzIHRoZSBKYXZhU2NyaXB0ICc9PT0nIG9wZXJhdG9yIGluIG9yZGVyIHRvIGF2b2lkIHR5cGUgY29lcmNpb24uXG4gKlxuICogSWYgdGhlIGFzc2VydGlvbiBmYWlscywgdGhlIHRlc3QgaXMgbWFya2VkIGFzIGEgZmFpbHVyZSBhbmQgYSBUZXN0Q29tcGxldGVkXG4gKiBleGNlcHRpb24gaXMgdGhyb3duLlxuICpcbiAqIEBwYXJhbSB7Kn0gYWN0dWFsIFRoZSBhY3R1YWwgbWVhc3VyZWQgdmFsdWUuXG4gKiBAcGFyYW0geyp9IGV4cGVjdGVkIFRoZSB2YWx1ZSBleHBlY3RlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRfbmFtZSBBbiBvcHRpb25hbCBuYW1lIHVzZWQgdG8gaWRlbnRpZnkgdGhpc1xuICogICAgIGFzc2VydGlvbiBpbiB0aGUgdGVzdCBsb2cuICBJZiBvbWl0dGVkIGl0IHdpbGwgYmUgdGhlIGZpbGU6bGluZVxuICogICAgIG9mIHRoZSBjYWxsZXIuXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5SZXN1bHQucHJvdG90eXBlLmFzc2VydEVRID0gZnVuY3Rpb24oXG4gIGFjdHVhbCxcbiAgZXhwZWN0ZWQsXG4gIG9wdF9uYW1lLFxuKSB7XG4gIC8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gcHJldHR5IHVwIHRoZSBsb2cuXG4gIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHJldHVybiB2YWx1ZTtcblxuICAgIHZhciBzdHIgPSBTdHJpbmcodmFsdWUpO1xuICAgIHZhciBhcnkgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChlID0+IEpTT04uc3RyaW5naWZ5KGUpKTtcbiAgICBpZiAoYXJ5Lmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIElmIHRoZSBzdHJpbmcgaGFzIG5ld2xpbmVzLCBzdGFydCBpdCBvZmYgb24gaXRzIG93biBsaW5lIHNvIHRoYXRcbiAgICAgIC8vIGl0J3MgZWFzaWVyIHRvIGNvbXBhcmUgYWdhaW5zdCBhbm90aGVyIHN0cmluZyB3aXRoIG5ld2xpbmVzLlxuICAgICAgcmV0dXJuICdcXG4nICsgYXJ5LmpvaW4oJ1xcbicpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYXJ5LmpvaW4oJ1xcbicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSByZXR1cm47XG5cbiAgLy8gRGVhbCB3aXRoIGNvbW1vbiBvYmplY3QgdHlwZXMgc2luY2UgSmF2YVNjcmlwdCBjYW4ndC5cbiAgaWYgKGV4cGVjdGVkIGluc3RhbmNlb2YgQXJyYXkpXG4gICAgaWYgKGxpYi5hcnJheS5jb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQpKSByZXR1cm47XG5cbiAgdmFyIG5hbWUgPSBvcHRfbmFtZSA/ICdbJyArIG9wdF9uYW1lICsgJ10nIDogJyc7XG5cbiAgdGhpcy5mYWlsKFxuICAgICdhc3NlcnRFUScgK1xuICAgICAgbmFtZSArXG4gICAgICAnOiAnICtcbiAgICAgIHRoaXMuZ2V0Q2FsbGVyTG9jYXRpb25fKDEpICtcbiAgICAgICc6ICcgK1xuICAgICAgZm9ybWF0KGFjdHVhbCkgK1xuICAgICAgJyAhPT0gJyArXG4gICAgICBmb3JtYXQoZXhwZWN0ZWQpLFxuICApO1xufTtcblxuLyoqXG4gKiBBc3NlcnQgdGhhdCBhIHZhbHVlIGlzIHRydWUuXG4gKlxuICogVGhpcyB1c2VzIHRoZSBKYXZhU2NyaXB0ICc9PT0nIG9wZXJhdG9yIGluIG9yZGVyIHRvIGF2b2lkIHR5cGUgY29lcmNpb24uXG4gKiBUaGUgbXVzdCBiZSB0aGUgYm9vbGVhbiB2YWx1ZSBgdHJ1ZWAsIG5vdCBqdXN0IHNvbWUgXCJ0cnVpc2hcIiB2YWx1ZS5cbiAqXG4gKiBJZiB0aGUgYXNzZXJ0aW9uIGZhaWxzLCB0aGUgdGVzdCBpcyBtYXJrZWQgYXMgYSBmYWlsdXJlIGFuZCBhIFRlc3RDb21wbGV0ZWRcbiAqIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBhY3R1YWwgVGhlIGFjdHVhbCBtZWFzdXJlZCB2YWx1ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRfbmFtZSBBbiBvcHRpb25hbCBuYW1lIHVzZWQgdG8gaWRlbnRpZnkgdGhpc1xuICogICAgIGFzc2VydGlvbiBpbiB0aGUgdGVzdCBsb2cuICBJZiBvbWl0dGVkIGl0IHdpbGwgYmUgdGhlIGZpbGU6bGluZVxuICogICAgIG9mIHRoZSBjYWxsZXIuXG4gKi9cbmxpYi5UZXN0TWFuYWdlci5SZXN1bHQucHJvdG90eXBlLmFzc2VydCA9IGZ1bmN0aW9uKGFjdHVhbCwgb3B0X25hbWUpIHtcbiAgaWYgKGFjdHVhbCA9PT0gdHJ1ZSkgcmV0dXJuO1xuXG4gIHZhciBuYW1lID0gb3B0X25hbWUgPyAnWycgKyBvcHRfbmFtZSArICddJyA6ICcnO1xuXG4gIHRoaXMuZmFpbChcbiAgICAnYXNzZXJ0JyArIG5hbWUgKyAnOiAnICsgdGhpcy5nZXRDYWxsZXJMb2NhdGlvbl8oMSkgKyAnOiAnICsgU3RyaW5nKGFjdHVhbCksXG4gICk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgZmlsZW5hbWU6bGluZSBvZiBhIGNhbGxpbmcgc3RhY2sgZnJhbWUuXG4gKlxuICogVGhpcyB1c2VzIGEgZGlydHkgaGFjay4gIEl0IHRocm93cyBhbiBleGNlcHRpb24sIGNhdGNoZXMgaXQsIGFuZCBleGFtaW5lc1xuICogdGhlIHN0YWNrIHByb3BlcnR5IG9mIHRoZSBjYXVnaHQgZXhjZXB0aW9uLlxuICpcbiAqIEBwYXJhbSB7aW50fSBmcmFtZUluZGV4IFRoZSBzdGFjayBmcmFtZSB0byByZXR1cm4uICAwIGlzIHRoZSBmcmFtZSB0aGF0XG4gKiAgICAgY2FsbGVkIHRoaXMgbWV0aG9kLCAxIGlzIGl0cyBjYWxsZXIsIGFuZCBzbyBvbi5cbiAqIEByZXR1cm4ge3N0cmluZ30gQSBzdHJpbmcgb2YgdGhlIGZvcm1hdCBcImZpbGVuYW1lOmxpbmVudW1iZXJcIi5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlJlc3VsdC5wcm90b3R5cGUuZ2V0Q2FsbGVyTG9jYXRpb25fID0gZnVuY3Rpb24oZnJhbWVJbmRleCkge1xuICB0cnkge1xuICAgIHRocm93IG5ldyBFcnJvcigpO1xuICB9IGNhdGNoIChleCkge1xuICAgIHZhciBmcmFtZSA9IGV4LnN0YWNrLnNwbGl0KCdcXG4nKVtmcmFtZUluZGV4ICsgMl07XG4gICAgdmFyIGFyeSA9IGZyYW1lLm1hdGNoKC8oW14vXSs6XFxkKyk6XFxkK1xcKT8kLyk7XG4gICAgcmV0dXJuIGFyeSA/IGFyeVsxXSA6ICc/Pz8nO1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlIGEgbWVzc2FnZSB0byB0aGUgcmVzdWx0IGxvZy5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlJlc3VsdC5wcm90b3R5cGUucHJpbnRsbiA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgdGhpcy50ZXN0UnVuLmxvZy5pbmZvKG1lc3NhZ2UpO1xufTtcblxuLyoqXG4gKiBNYXJrIGEgZmFpbGVkIHRlc3QgYW5kIGV4aXQgb3V0IG9mIHRoZSByZXN0IG9mIHRoZSB0ZXN0LlxuICpcbiAqIFRoaXMgd2lsbCB0aHJvdyBhIFRlc3RDb21wbGV0ZWQgZXhjZXB0aW9uLCBjYXVzaW5nIHRoZSBjdXJyZW50IHRlc3QgdG8gc3RvcC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0X21lc3NhZ2UgT3B0aW9uYWwgbWVzc2FnZSB0byBhZGQgdG8gdGhlIGxvZy5cbiAqL1xubGliLlRlc3RNYW5hZ2VyLlJlc3VsdC5wcm90b3R5cGUuZmFpbCA9IGZ1bmN0aW9uKG9wdF9tZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoKSB0aGlzLnByaW50bG4ob3B0X21lc3NhZ2UpO1xuXG4gIHRoaXMuY29tcGxldGVUZXN0Xyh0aGlzLkZBSUxFRCwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIE1hcmsgYSBwYXNzZWQgdGVzdCBhbmQgZXhpdCBvdXQgb2YgdGhlIHJlc3Qgb2YgdGhlIHRlc3QuXG4gKlxuICogVGhpcyB3aWxsIHRocm93IGEgVGVzdENvbXBsZXRlZCBleGNlcHRpb24sIGNhdXNpbmcgdGhlIGN1cnJlbnQgdGVzdCB0byBzdG9wLlxuICovXG5saWIuVGVzdE1hbmFnZXIuUmVzdWx0LnByb3RvdHlwZS5wYXNzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29tcGxldGVUZXN0Xyh0aGlzLlBBU1NFRCwgdHJ1ZSk7XG59O1xuLy8gU09VUkNFIEZJTEU6IGxpYmRvdC9qcy9saWJfdXRmOC5qc1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBPUyBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxuLy8gVE9ETyhkYXZpZGJlbik6IFdoZW4gdGhlIHN0cmluZyBlbmNvZGluZyBBUEkgaXMgaW1wbGVtZW50ZWQsXG4vLyByZXBsYWNlIHRoaXMgd2l0aCB0aGUgbmF0aXZlIGluLWJyb3dzZXIgaW1wbGVtZW50YXRpb24uXG4vL1xuLy8gaHR0cHM6Ly93aWtpLndoYXR3Zy5vcmcvd2lraS9TdHJpbmdFbmNvZGluZ1xuLy8gaHR0cHM6Ly9lbmNvZGluZy5zcGVjLndoYXR3Zy5vcmcvXG5cbi8qKlxuICogQSBzdGF0ZWZ1bCBVVEYtOCBkZWNvZGVyLlxuICovXG5saWIuVVRGOERlY29kZXIgPSBmdW5jdGlvbigpIHtcbiAgLy8gVGhlIG51bWJlciBvZiBieXRlcyBsZWZ0IGluIHRoZSBjdXJyZW50IHNlcXVlbmNlLlxuICB0aGlzLmJ5dGVzTGVmdCA9IDA7XG4gIC8vIFRoZSBpbi1wcm9ncmVzcyBjb2RlIHBvaW50IGJlaW5nIGRlY29kZWQsIGlmIGJ5dGVzTGVmdCA+IDAuXG4gIHRoaXMuY29kZVBvaW50ID0gMDtcbiAgLy8gVGhlIGxvd2VyIGJvdW5kIG9uIHRoZSBmaW5hbCBjb2RlIHBvaW50LCBpZiBieXRlc0xlZnQgPiAwLlxuICB0aGlzLmxvd2VyQm91bmQgPSAwO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIGEgc29tZSBVVEYtOCBkYXRhLCB0YWtpbmcgaW50byBhY2NvdW50IHN0YXRlIGZyb20gcHJldmlvdXNcbiAqIGRhdGEgc3RyZWFtZWQgdGhyb3VnaCB0aGUgZW5jb2Rlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIGRhdGEgdG8gZGVjb2RlLCByZXByZXNlbnRlZCBhcyBhIEphdmFTY3JpcHRcbiAqICAgICBTdHJpbmcgd2l0aCBlYWNoIGNvZGUgdW5pdCByZXByZXNlbnRpbmcgYSBieXRlIGJldHdlZW4gMHgwMCB0b1xuICogICAgIDB4RkYuXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBkYXRhIGRlY29kZWQgaW50byBhIEphdmFTY3JpcHQgVVRGLTE2IHN0cmluZy5cbiAqL1xubGliLlVURjhEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgdmFyIHJldCA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKHRoaXMuYnl0ZXNMZWZ0ID09IDApIHtcbiAgICAgIGlmIChjIDw9IDB4N2YpIHtcbiAgICAgICAgcmV0ICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICB9IGVsc2UgaWYgKDB4YzAgPD0gYyAmJiBjIDw9IDB4ZGYpIHtcbiAgICAgICAgdGhpcy5jb2RlUG9pbnQgPSBjIC0gMHhjMDtcbiAgICAgICAgdGhpcy5ieXRlc0xlZnQgPSAxO1xuICAgICAgICB0aGlzLmxvd2VyQm91bmQgPSAweDgwO1xuICAgICAgfSBlbHNlIGlmICgweGUwIDw9IGMgJiYgYyA8PSAweGVmKSB7XG4gICAgICAgIHRoaXMuY29kZVBvaW50ID0gYyAtIDB4ZTA7XG4gICAgICAgIHRoaXMuYnl0ZXNMZWZ0ID0gMjtcbiAgICAgICAgdGhpcy5sb3dlckJvdW5kID0gMHg4MDA7XG4gICAgICB9IGVsc2UgaWYgKDB4ZjAgPD0gYyAmJiBjIDw9IDB4ZjcpIHtcbiAgICAgICAgdGhpcy5jb2RlUG9pbnQgPSBjIC0gMHhmMDtcbiAgICAgICAgdGhpcy5ieXRlc0xlZnQgPSAzO1xuICAgICAgICB0aGlzLmxvd2VyQm91bmQgPSAweDEwMDAwO1xuICAgICAgfSBlbHNlIGlmICgweGY4IDw9IGMgJiYgYyA8PSAweGZiKSB7XG4gICAgICAgIHRoaXMuY29kZVBvaW50ID0gYyAtIDB4Zjg7XG4gICAgICAgIHRoaXMuYnl0ZXNMZWZ0ID0gNDtcbiAgICAgICAgdGhpcy5sb3dlckJvdW5kID0gMHgyMDAwMDA7XG4gICAgICB9IGVsc2UgaWYgKDB4ZmMgPD0gYyAmJiBjIDw9IDB4ZmQpIHtcbiAgICAgICAgdGhpcy5jb2RlUG9pbnQgPSBjIC0gMHhmYztcbiAgICAgICAgdGhpcy5ieXRlc0xlZnQgPSA1O1xuICAgICAgICB0aGlzLmxvd2VyQm91bmQgPSAweDQwMDAwMDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQgKz0gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoMHg4MCA8PSBjICYmIGMgPD0gMHhiZikge1xuICAgICAgICB0aGlzLmJ5dGVzTGVmdC0tO1xuICAgICAgICB0aGlzLmNvZGVQb2ludCA9ICh0aGlzLmNvZGVQb2ludCA8PCA2KSArIChjIC0gMHg4MCk7XG4gICAgICAgIGlmICh0aGlzLmJ5dGVzTGVmdCA9PSAwKSB7XG4gICAgICAgICAgLy8gR290IGEgZnVsbCBzZXF1ZW5jZS4gQ2hlY2sgaWYgaXQncyB3aXRoaW4gYm91bmRzIGFuZFxuICAgICAgICAgIC8vIGZpbHRlciBvdXQgc3Vycm9nYXRlIHBhaXJzLlxuICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSB0aGlzLmNvZGVQb2ludDtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb2RlUG9pbnQgPCB0aGlzLmxvd2VyQm91bmQgfHxcbiAgICAgICAgICAgICgweGQ4MDAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweGRmZmYpIHx8XG4gICAgICAgICAgICBjb2RlUG9pbnQgPiAweDEwZmZmZlxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0ICs9ICdcXHVmZmZkJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRW5jb2RlIGFzIFVURi0xNiBpbiB0aGUgb3V0cHV0LlxuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgICAgICAgICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICAgICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMDtcbiAgICAgICAgICAgICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgICAgICAgICAgICAgMHhkODAwICsgKChjb2RlUG9pbnQgPj4+IDEwKSAmIDB4M2ZmKSxcbiAgICAgICAgICAgICAgICAweGRjMDAgKyAoY29kZVBvaW50ICYgMHgzZmYpLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVG9vIGZldyBieXRlcyBpbiBtdWx0aS1ieXRlIHNlcXVlbmNlLiBSZXdpbmQgc3RyZWFtIHNvIHdlXG4gICAgICAgIC8vIGRvbid0IGxvc2UgdGhlIG5leHQgYnl0ZS5cbiAgICAgICAgcmV0ICs9ICdcXHVmZmZkJztcbiAgICAgICAgdGhpcy5ieXRlc0xlZnQgPSAwO1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG4vKipcbiAqIERlY29kZXMgVVRGLTggZGF0YS4gVGhpcyBpcyBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciB3aGVuIGFsbCB0aGVcbiAqIGRhdGEgaXMgYWxyZWFkeSBrbm93bi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIGRhdGEgdG8gZGVjb2RlLCByZXByZXNlbnRlZCBhcyBhIEphdmFTY3JpcHRcbiAqICAgICBTdHJpbmcgd2l0aCBlYWNoIGNvZGUgdW5pdCByZXByZXNlbnRpbmcgYSBieXRlIGJldHdlZW4gMHgwMCB0b1xuICogICAgIDB4RkYuXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBkYXRhIGRlY29kZWQgaW50byBhIEphdmFTY3JpcHQgVVRGLTE2IHN0cmluZy5cbiAqL1xubGliLmRlY29kZVVURjggPSBmdW5jdGlvbih1dGY4KSB7XG4gIHJldHVybiBuZXcgbGliLlVURjhEZWNvZGVyKCkuZGVjb2RlKHV0ZjgpO1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIGEgVVRGLTE2IHN0cmluZyBpbnRvIFVURi04LlxuICpcbiAqIFRPRE8oZGF2aWRiZW4pOiBEbyB3ZSBuZWVkIGEgc3RhdGVmdWwgdmVyc2lvbiBvZiB0aGlzIHRoYXQgY2FuXG4gKiBoYW5kbGUgYSBzdXJyb2dhdGUgcGFpciBzcGxpdCBpbiB0d28gY2FsbHM/IFdoYXQgaGFwcGVucyBpZiBhXG4gKiBrZXlwcmVzcyBldmVudCB3b3VsZCBoYXZlIGNvbnRhaW5lZCBhIGNoYXJhY3RlciBvdXRzaWRlIHRoZSBCTVA/XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGVuY29kZS5cbiAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHN0cmluZyBlbmNvZGVkIGFzIFVURi04LCBhcyBhIEphdmFTY3JpcHRcbiAqICAgICBzdHJpbmcgd2l0aCBieXRlcyByZXByZXNlbnRlZCBhcyBjb2RlIHVuaXRzIGZyb20gMHgwMCB0byAweEZGLlxuICovXG5saWIuZW5jb2RlVVRGOCA9IGZ1bmN0aW9uKHN0cikge1xuICB2YXIgcmV0ID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gR2V0IGEgdW5pY29kZSBjb2RlIHBvaW50IG91dCBvZiBzdHIuXG4gICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoMHhkYzAwIDw9IGMgJiYgYyA8PSAweGRmZmYpIHtcbiAgICAgIGMgPSAweGZmZmQ7XG4gICAgfSBlbHNlIGlmICgweGQ4MDAgPD0gYyAmJiBjIDw9IDB4ZGJmZikge1xuICAgICAgaWYgKGkgKyAxIDwgc3RyLmxlbmd0aCkge1xuICAgICAgICB2YXIgZCA9IHN0ci5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgICAgaWYgKDB4ZGMwMCA8PSBkICYmIGQgPD0gMHhkZmZmKSB7XG4gICAgICAgICAgLy8gU3dhbGxvdyBhIHN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICAgIGMgPSAweDEwMDAwICsgKChjICYgMHgzZmYpIDw8IDEwKSArIChkICYgMHgzZmYpO1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjID0gMHhmZmZkO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjID0gMHhmZmZkO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEVuY29kZSBjIGluIFVURi04LlxuICAgIHZhciBieXRlc0xlZnQ7XG4gICAgaWYgKGMgPD0gMHg3Zikge1xuICAgICAgcmV0ICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKGMgPD0gMHg3ZmYpIHtcbiAgICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4YzAgfCAoYyA+Pj4gNikpO1xuICAgICAgYnl0ZXNMZWZ0ID0gMTtcbiAgICB9IGVsc2UgaWYgKGMgPD0gMHhmZmZmKSB7XG4gICAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGUwIHwgKGMgPj4+IDEyKSk7XG4gICAgICBieXRlc0xlZnQgPSAyO1xuICAgIH0gLyogaWYgKGMgPD0gMHgxMEZGRkYpICovIGVsc2Uge1xuICAgICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhmMCB8IChjID4+PiAxOCkpO1xuICAgICAgYnl0ZXNMZWZ0ID0gMztcbiAgICB9XG5cbiAgICB3aGlsZSAoYnl0ZXNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNMZWZ0LS07XG4gICAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweDgwIHwgKChjID4+PiAoNiAqIGJ5dGVzTGVmdCkpICYgMHgzZikpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufTtcbi8vIFNPVVJDRSBGSUxFOiBsaWJkb3QvdGhpcmRfcGFydHkvd2N3aWR0aC9saWJfd2MuanNcbi8vIENvcHlyaWdodCAoYykgMjAxNCBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiBsaWIud2Mgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxuLyoqXG4gKiBUaGlzIEphdmFTY3JpcHQgbGlicmFyeSBpcyBwb3J0ZWQgZnJvbSB0aGUgd2N3aWR0aC5qcyBtb2R1bGUgb2Ygbm9kZS5qcy5cbiAqIFRoZSBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiBjYW4gYmUgZm91bmQgYXQ6XG4gKiBodHRwczovL25wbWpzLm9yZy9wYWNrYWdlL3djd2lkdGguanNcbiAqL1xuXG4vKipcbiAqIEphdmFTY3JpcHQgcG9ydGluZyBvZiBNYXJrdXMgS3VobidzIHdjd2lkdGgoKSBpbXBsZW1lbnRhdGlvblxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhwbGFuYXRpb24gY29tZXMgZnJvbSB0aGUgb3JpZ2luYWwgQyBpbXBsZW1lbnRhdGlvbjpcbiAqXG4gKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHdjd2lkdGgoKSBhbmQgd2Nzd2lkdGgoKSAoZGVmaW5lZCBpblxuICogSUVFRSBTdGQgMTAwMi4xLTIwMDEpIGZvciBVbmljb2RlLlxuICpcbiAqIGh0dHA6Ly93d3cub3Blbmdyb3VwLm9yZy9vbmxpbmVwdWJzLzAwNzkwNDk3NS9mdW5jdGlvbnMvd2N3aWR0aC5odG1sXG4gKiBodHRwOi8vd3d3Lm9wZW5ncm91cC5vcmcvb25saW5lcHVicy8wMDc5MDQ5NzUvZnVuY3Rpb25zL3djc3dpZHRoLmh0bWxcbiAqXG4gKiBJbiBmaXhlZC13aWR0aCBvdXRwdXQgZGV2aWNlcywgTGF0aW4gY2hhcmFjdGVycyBhbGwgb2NjdXB5IGEgc2luZ2xlXG4gKiBcImNlbGxcIiBwb3NpdGlvbiBvZiBlcXVhbCB3aWR0aCwgd2hlcmVhcyBpZGVvZ3JhcGhpYyBDSksgY2hhcmFjdGVyc1xuICogb2NjdXB5IHR3byBzdWNoIGNlbGxzLiBJbnRlcm9wZXJhYmlsaXR5IGJldHdlZW4gdGVybWluYWwtbGluZVxuICogYXBwbGljYXRpb25zIGFuZCAodGVsZXR5cGUtc3R5bGUpIGNoYXJhY3RlciB0ZXJtaW5hbHMgdXNpbmcgdGhlXG4gKiBVVEYtOCBlbmNvZGluZyByZXF1aXJlcyBhZ3JlZW1lbnQgb24gd2hpY2ggY2hhcmFjdGVyIHNob3VsZCBhZHZhbmNlXG4gKiB0aGUgY3Vyc29yIGJ5IGhvdyBtYW55IGNlbGwgcG9zaXRpb25zLiBObyBlc3RhYmxpc2hlZCBmb3JtYWxcbiAqIHN0YW5kYXJkcyBleGlzdCBhdCBwcmVzZW50IG9uIHdoaWNoIFVuaWNvZGUgY2hhcmFjdGVyIHNoYWxsIG9jY3VweVxuICogaG93IG1hbnkgY2VsbCBwb3NpdGlvbnMgb24gY2hhcmFjdGVyIHRlcm1pbmFscy4gVGhlc2Ugcm91dGluZXMgYXJlXG4gKiBhIGZpcnN0IGF0dGVtcHQgb2YgZGVmaW5pbmcgc3VjaCBiZWhhdmlvciBiYXNlZCBvbiBzaW1wbGUgcnVsZXNcbiAqIGFwcGxpZWQgdG8gZGF0YSBwcm92aWRlZCBieSB0aGUgVW5pY29kZSBDb25zb3J0aXVtLlxuICpcbiAqIEZvciBzb21lIGdyYXBoaWNhbCBjaGFyYWN0ZXJzLCB0aGUgVW5pY29kZSBzdGFuZGFyZCBleHBsaWNpdGx5XG4gKiBkZWZpbmVzIGEgY2hhcmFjdGVyLWNlbGwgd2lkdGggdmlhIHRoZSBkZWZpbml0aW9uIG9mIHRoZSBFYXN0IEFzaWFuXG4gKiBGdWxsV2lkdGggKEYpLCBXaWRlIChXKSwgSGFsZi13aWR0aCAoSCksIGFuZCBOYXJyb3cgKE5hKSBjbGFzc2VzLlxuICogSW4gYWxsIHRoZXNlIGNhc2VzLCB0aGVyZSBpcyBubyBhbWJpZ3VpdHkgYWJvdXQgd2hpY2ggd2lkdGggYVxuICogdGVybWluYWwgc2hhbGwgdXNlLiBGb3IgY2hhcmFjdGVycyBpbiB0aGUgRWFzdCBBc2lhbiBBbWJpZ3VvdXMgKEEpXG4gKiBjbGFzcywgdGhlIHdpZHRoIGNob2ljZSBkZXBlbmRzIHB1cmVseSBvbiBhIHByZWZlcmVuY2Ugb2YgYmFja3dhcmRcbiAqIGNvbXBhdGliaWxpdHkgd2l0aCBlaXRoZXIgaGlzdG9yaWMgQ0pLIG9yIFdlc3Rlcm4gcHJhY3RpY2UuXG4gKiBDaG9vc2luZyBzaW5nbGUtd2lkdGggZm9yIHRoZXNlIGNoYXJhY3RlcnMgaXMgZWFzeSB0byBqdXN0aWZ5IGFzXG4gKiB0aGUgYXBwcm9wcmlhdGUgbG9uZy10ZXJtIHNvbHV0aW9uLCBhcyB0aGUgQ0pLIHByYWN0aWNlIG9mXG4gKiBkaXNwbGF5aW5nIHRoZXNlIGNoYXJhY3RlcnMgYXMgZG91YmxlLXdpZHRoIGNvbWVzIGZyb20gaGlzdG9yaWNcbiAqIGltcGxlbWVudGF0aW9uIHNpbXBsaWNpdHkgKDgtYml0IGVuY29kZWQgY2hhcmFjdGVycyB3ZXJlIGRpc3BsYXllZFxuICogc2luZ2xlLXdpZHRoIGFuZCAxNi1iaXQgb25lcyBkb3VibGUtd2lkdGgsIGV2ZW4gZm9yIEdyZWVrLFxuICogQ3lyaWxsaWMsIGV0Yy4pIGFuZCBub3QgYW55IHR5cG9ncmFwaGljIGNvbnNpZGVyYXRpb25zLlxuICpcbiAqIE11Y2ggbGVzcyBjbGVhciBpcyB0aGUgY2hvaWNlIG9mIHdpZHRoIGZvciB0aGUgTm90IEVhc3QgQXNpYW5cbiAqIChOZXV0cmFsKSBjbGFzcy4gRXhpc3RpbmcgcHJhY3RpY2UgZG9lcyBub3QgZGljdGF0ZSBhIHdpZHRoIGZvciBhbnlcbiAqIG9mIHRoZXNlIGNoYXJhY3RlcnMuIEl0IHdvdWxkIG5ldmVydGhlbGVzcyBtYWtlIHNlbnNlXG4gKiB0eXBvZ3JhcGhpY2FsbHkgdG8gYWxsb2NhdGUgdHdvIGNoYXJhY3RlciBjZWxscyB0byBjaGFyYWN0ZXJzIHN1Y2hcbiAqIGFzIGZvciBpbnN0YW5jZSBFTSBTUEFDRSBvciBWT0xVTUUgSU5URUdSQUwsIHdoaWNoIGNhbm5vdCBiZVxuICogcmVwcmVzZW50ZWQgYWRlcXVhdGVseSB3aXRoIGEgc2luZ2xlLXdpZHRoIGdseXBoLiBUaGUgZm9sbG93aW5nXG4gKiByb3V0aW5lcyBhdCBwcmVzZW50IG1lcmVseSBhc3NpZ24gYSBzaW5nbGUtY2VsbCB3aWR0aCB0byBhbGxcbiAqIG5ldXRyYWwgY2hhcmFjdGVycywgaW4gdGhlIGludGVyZXN0IG9mIHNpbXBsaWNpdHkuIFRoaXMgaXMgbm90XG4gKiBlbnRpcmVseSBzYXRpc2ZhY3RvcnkgYW5kIHNob3VsZCBiZSByZWNvbnNpZGVyZWQgYmVmb3JlXG4gKiBlc3RhYmxpc2hpbmcgYSBmb3JtYWwgc3RhbmRhcmQgaW4gbGliLndjIGFyZWEuIEF0IHRoZSBtb21lbnQsIHRoZVxuICogZGVjaXNpb24gd2hpY2ggTm90IEVhc3QgQXNpYW4gKE5ldXRyYWwpIGNoYXJhY3RlcnMgc2hvdWxkIGJlXG4gKiByZXByZXNlbnRlZCBieSBkb3VibGUtd2lkdGggZ2x5cGhzIGNhbm5vdCB5ZXQgYmUgYW5zd2VyZWQgYnlcbiAqIGFwcGx5aW5nIGEgc2ltcGxlIHJ1bGUgZnJvbSB0aGUgVW5pY29kZSBkYXRhYmFzZSBjb250ZW50LiBTZXR0aW5nXG4gKiB1cCBhIHByb3BlciBzdGFuZGFyZCBmb3IgdGhlIGJlaGF2aW9yIG9mIFVURi04IGNoYXJhY3RlciB0ZXJtaW5hbHNcbiAqIHdpbGwgcmVxdWlyZSBhIGNhcmVmdWwgYW5hbHlzaXMgbm90IG9ubHkgb2YgZWFjaCBVbmljb2RlIGNoYXJhY3RlcixcbiAqIGJ1dCBhbHNvIG9mIGVhY2ggcHJlc2VudGF0aW9uIGZvcm0sIHNvbWV0aGluZyB0aGUgYXV0aG9yIG9mIHRoZXNlXG4gKiByb3V0aW5lcyBoYXMgYXZvaWRlZCB0byBkbyBzbyBmYXIuXG4gKlxuICogaHR0cDovL3d3dy51bmljb2RlLm9yZy91bmljb2RlL3JlcG9ydHMvdHIxMS9cbiAqXG4gKiBNYXJrdXMgS3VobiAtLSAyMDA3LTA1LTI2IChVbmljb2RlIDUuMClcbiAqXG4gKiBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQgZGlzdHJpYnV0ZSBsaWIud2Mgc29mdHdhcmVcbiAqIGZvciBhbnkgcHVycG9zZSBhbmQgd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuIFRoZSBhdXRob3JcbiAqIGRpc2NsYWltcyBhbGwgd2FycmFudGllcyB3aXRoIHJlZ2FyZCB0byBsaWIud2Mgc29mdHdhcmUuXG4gKlxuICogTGF0ZXN0IHZlcnNpb246IGh0dHA6Ly93d3cuY2wuY2FtLmFjLnVrL35tZ2syNS91Y3Mvd2N3aWR0aC5jXG4gKi9cblxuLyoqXG4gKiBUaGUgZm9sbG93aW5nIGZ1bmN0aW9uIGRlZmluZXMgdGhlIGNvbHVtbiB3aWR0aCBvZiBhbiBJU08gMTA2NDYgY2hhcmFjdGVyXG4gKiBhcyBmb2xsb3dzOlxuICpcbiAqICAtIFRoZSBudWxsIGNoYXJhY3RlciAoVSswMDAwKSBoYXMgYSBjb2x1bW4gd2lkdGggb2YgMC5cbiAqICAtIE90aGVyIEMwL0MxIGNvbnRyb2wgY2hhcmFjdGVycyBhbmQgREVMIHdpbGwgbGVhZCB0byBhIHJldHVybiB2YWx1ZSBvZiAtMS5cbiAqICAtIE5vbi1zcGFjaW5nIGFuZCBlbmNsb3NpbmcgY29tYmluaW5nIGNoYXJhY3RlcnMgKGdlbmVyYWwgY2F0ZWdvcnkgY29kZSBNblxuICogICAgb3IgTWUgaW4gdGhlIFVuaWNvZGUgZGF0YWJhc2UpIGhhdmUgYSBjb2x1bW4gd2lkdGggb2YgMC5cbiAqICAtIFNPRlQgSFlQSEVOIChVKzAwQUQpIGhhcyBhIGNvbHVtbiB3aWR0aCBvZiAxLlxuICogIC0gT3RoZXIgZm9ybWF0IGNoYXJhY3RlcnMgKGdlbmVyYWwgY2F0ZWdvcnkgY29kZSBDZiBpbiB0aGUgVW5pY29kZSBkYXRhYmFzZSlcbiAqICAgIGFuZCBaRVJPIFdJRFRIIFNQQUNFIChVKzIwMEIpIGhhdmUgYSBjb2x1bW4gd2lkdGggb2YgMC5cbiAqICAtIEhhbmd1bCBKYW1vIG1lZGlhbCB2b3dlbHMgYW5kIGZpbmFsIGNvbnNvbmFudHMgKFUrMTE2MC1VKzExRkYpIGhhdmUgYVxuICogICAgY29sdW1uIHdpZHRoIG9mIDAuXG4gKiAgLSBTcGFjaW5nIGNoYXJhY3RlcnMgaW4gdGhlIEVhc3QgQXNpYW4gV2lkZSAoVykgb3IgRWFzdCBBc2lhbiBGdWxsLXdpZHRoIChGKVxuICogICAgY2F0ZWdvcnkgYXMgZGVmaW5lZCBpbiBVbmljb2RlIFRlY2huaWNhbCBSZXBvcnQgIzExIGhhdmUgYSBjb2x1bW4gd2lkdGggb2ZcbiAqICAgIDIuXG4gKiAgLSBFYXN0IEFzaWFuIEFtYmlndW91cyBjaGFyYWN0ZXJzIGFyZSB0YWtlbiBpbnRvIGFjY291bnQgaWZcbiAqICAgIHJlZ2FyZENqa0FtYmlndW91cyBmbGFnIGlzIGVuYWJsZWQuIFRoZXkgaGF2ZSBhIGNvbHVtbiB3aWR0aCBvZiAyLlxuICogIC0gQWxsIHJlbWFpbmluZyBjaGFyYWN0ZXJzIChpbmNsdWRpbmcgYWxsIHByaW50YWJsZSBJU08gODg1OS0xIGFuZCBXR0w0XG4gKiAgICBjaGFyYWN0ZXJzLCBVbmljb2RlIGNvbnRyb2wgY2hhcmFjdGVycywgZXRjLikgaGF2ZSBhIGNvbHVtbiB3aWR0aCBvZiAxLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gYXNzdW1lcyB0aGF0IGNoYXJhY3RlcnMgYXJlIGVuY29kZWQgaW4gSVNPIDEwNjQ2LlxuICovXG5cbmxpYi53YyA9IHt9O1xuXG4vLyBXaWR0aCBvZiBhIG51bCBjaGFyYWN0ZXIuXG5saWIud2MubnVsV2lkdGggPSAwO1xuXG4vLyBXaWR0aCBvZiBhIGNvbnRyb2wgY2hhcmFjdGVyLlxubGliLndjLmNvbnRyb2xXaWR0aCA9IDA7XG5cbi8vIEZsYWcgd2hldGhlciB0byBjb25zaWRlciBFYXN0IEFzaWFuIEFtYmlndW91cyBjaGFyYWN0ZXJzLlxubGliLndjLnJlZ2FyZENqa0FtYmlndW91cyA9IGZhbHNlO1xuXG4vLyBXaWR0aCBvZiBhbiBFYXN0IEFzaWFuIEFtYmlndW91cyBjaGFyYWN0ZXIuXG5saWIud2MuY2prQW1iaWd1b3VzV2lkdGggPSAyO1xuXG4vLyBTb3J0ZWQgbGlzdCBvZiBub24tb3ZlcmxhcHBpbmcgaW50ZXJ2YWxzIG9mIG5vbi1zcGFjaW5nIGNoYXJhY3RlcnNcbi8vIGdlbmVyYXRlZCBieSB0aGUgYC4vcmFuZ2VzLnB5YCBoZWxwZXIuXG5saWIud2MuY29tYmluaW5nID0gW1xuICBbMHgwMGFkLCAweDAwYWRdLFxuICBbMHgwMzAwLCAweDAzNmZdLFxuICBbMHgwNDgzLCAweDA0ODldLFxuICBbMHgwNTkxLCAweDA1YmRdLFxuICBbMHgwNWJmLCAweDA1YmZdLFxuICBbMHgwNWMxLCAweDA1YzJdLFxuICBbMHgwNWM0LCAweDA1YzVdLFxuICBbMHgwNWM3LCAweDA1YzddLFxuICBbMHgwNjEwLCAweDA2MWFdLFxuICBbMHgwNjFjLCAweDA2MWNdLFxuICBbMHgwNjRiLCAweDA2NWZdLFxuICBbMHgwNjcwLCAweDA2NzBdLFxuICBbMHgwNmQ2LCAweDA2ZGNdLFxuICBbMHgwNmRmLCAweDA2ZTRdLFxuICBbMHgwNmU3LCAweDA2ZThdLFxuICBbMHgwNmVhLCAweDA2ZWRdLFxuICBbMHgwNzExLCAweDA3MTFdLFxuICBbMHgwNzMwLCAweDA3NGFdLFxuICBbMHgwN2E2LCAweDA3YjBdLFxuICBbMHgwN2ViLCAweDA3ZjNdLFxuICBbMHgwN2ZkLCAweDA3ZmRdLFxuICBbMHgwODE2LCAweDA4MTldLFxuICBbMHgwODFiLCAweDA4MjNdLFxuICBbMHgwODI1LCAweDA4MjddLFxuICBbMHgwODI5LCAweDA4MmRdLFxuICBbMHgwODU5LCAweDA4NWJdLFxuICBbMHgwOGQzLCAweDA4ZTFdLFxuICBbMHgwOGUzLCAweDA5MDJdLFxuICBbMHgwOTNhLCAweDA5M2FdLFxuICBbMHgwOTNjLCAweDA5M2NdLFxuICBbMHgwOTQxLCAweDA5NDhdLFxuICBbMHgwOTRkLCAweDA5NGRdLFxuICBbMHgwOTUxLCAweDA5NTddLFxuICBbMHgwOTYyLCAweDA5NjNdLFxuICBbMHgwOTgxLCAweDA5ODFdLFxuICBbMHgwOWJjLCAweDA5YmNdLFxuICBbMHgwOWMxLCAweDA5YzRdLFxuICBbMHgwOWNkLCAweDA5Y2RdLFxuICBbMHgwOWUyLCAweDA5ZTNdLFxuICBbMHgwOWZlLCAweDA5ZmVdLFxuICBbMHgwYTAxLCAweDBhMDJdLFxuICBbMHgwYTNjLCAweDBhM2NdLFxuICBbMHgwYTQxLCAweDBhNDJdLFxuICBbMHgwYTQ3LCAweDBhNDhdLFxuICBbMHgwYTRiLCAweDBhNGRdLFxuICBbMHgwYTUxLCAweDBhNTFdLFxuICBbMHgwYTcwLCAweDBhNzFdLFxuICBbMHgwYTc1LCAweDBhNzVdLFxuICBbMHgwYTgxLCAweDBhODJdLFxuICBbMHgwYWJjLCAweDBhYmNdLFxuICBbMHgwYWMxLCAweDBhYzVdLFxuICBbMHgwYWM3LCAweDBhYzhdLFxuICBbMHgwYWNkLCAweDBhY2RdLFxuICBbMHgwYWUyLCAweDBhZTNdLFxuICBbMHgwYWZhLCAweDBhZmZdLFxuICBbMHgwYjAxLCAweDBiMDFdLFxuICBbMHgwYjNjLCAweDBiM2NdLFxuICBbMHgwYjNmLCAweDBiM2ZdLFxuICBbMHgwYjQxLCAweDBiNDRdLFxuICBbMHgwYjRkLCAweDBiNGRdLFxuICBbMHgwYjU2LCAweDBiNTZdLFxuICBbMHgwYjYyLCAweDBiNjNdLFxuICBbMHgwYjgyLCAweDBiODJdLFxuICBbMHgwYmMwLCAweDBiYzBdLFxuICBbMHgwYmNkLCAweDBiY2RdLFxuICBbMHgwYzAwLCAweDBjMDBdLFxuICBbMHgwYzA0LCAweDBjMDRdLFxuICBbMHgwYzNlLCAweDBjNDBdLFxuICBbMHgwYzQ2LCAweDBjNDhdLFxuICBbMHgwYzRhLCAweDBjNGRdLFxuICBbMHgwYzU1LCAweDBjNTZdLFxuICBbMHgwYzYyLCAweDBjNjNdLFxuICBbMHgwYzgxLCAweDBjODFdLFxuICBbMHgwY2JjLCAweDBjYmNdLFxuICBbMHgwY2JmLCAweDBjYmZdLFxuICBbMHgwY2M2LCAweDBjYzZdLFxuICBbMHgwY2NjLCAweDBjY2RdLFxuICBbMHgwY2UyLCAweDBjZTNdLFxuICBbMHgwZDAwLCAweDBkMDFdLFxuICBbMHgwZDNiLCAweDBkM2NdLFxuICBbMHgwZDQxLCAweDBkNDRdLFxuICBbMHgwZDRkLCAweDBkNGRdLFxuICBbMHgwZDYyLCAweDBkNjNdLFxuICBbMHgwZGNhLCAweDBkY2FdLFxuICBbMHgwZGQyLCAweDBkZDRdLFxuICBbMHgwZGQ2LCAweDBkZDZdLFxuICBbMHgwZTMxLCAweDBlMzFdLFxuICBbMHgwZTM0LCAweDBlM2FdLFxuICBbMHgwZTQ3LCAweDBlNGVdLFxuICBbMHgwZWIxLCAweDBlYjFdLFxuICBbMHgwZWI0LCAweDBlYjldLFxuICBbMHgwZWJiLCAweDBlYmNdLFxuICBbMHgwZWM4LCAweDBlY2RdLFxuICBbMHgwZjE4LCAweDBmMTldLFxuICBbMHgwZjM1LCAweDBmMzVdLFxuICBbMHgwZjM3LCAweDBmMzddLFxuICBbMHgwZjM5LCAweDBmMzldLFxuICBbMHgwZjcxLCAweDBmN2VdLFxuICBbMHgwZjgwLCAweDBmODRdLFxuICBbMHgwZjg2LCAweDBmODddLFxuICBbMHgwZjhkLCAweDBmOTddLFxuICBbMHgwZjk5LCAweDBmYmNdLFxuICBbMHgwZmM2LCAweDBmYzZdLFxuICBbMHgxMDJkLCAweDEwMzBdLFxuICBbMHgxMDMyLCAweDEwMzddLFxuICBbMHgxMDM5LCAweDEwM2FdLFxuICBbMHgxMDNkLCAweDEwM2VdLFxuICBbMHgxMDU4LCAweDEwNTldLFxuICBbMHgxMDVlLCAweDEwNjBdLFxuICBbMHgxMDcxLCAweDEwNzRdLFxuICBbMHgxMDgyLCAweDEwODJdLFxuICBbMHgxMDg1LCAweDEwODZdLFxuICBbMHgxMDhkLCAweDEwOGRdLFxuICBbMHgxMDlkLCAweDEwOWRdLFxuICBbMHgxMTYwLCAweDExZmZdLFxuICBbMHgxMzVkLCAweDEzNWZdLFxuICBbMHgxNzEyLCAweDE3MTRdLFxuICBbMHgxNzMyLCAweDE3MzRdLFxuICBbMHgxNzUyLCAweDE3NTNdLFxuICBbMHgxNzcyLCAweDE3NzNdLFxuICBbMHgxN2I0LCAweDE3YjVdLFxuICBbMHgxN2I3LCAweDE3YmRdLFxuICBbMHgxN2M2LCAweDE3YzZdLFxuICBbMHgxN2M5LCAweDE3ZDNdLFxuICBbMHgxN2RkLCAweDE3ZGRdLFxuICBbMHgxODBiLCAweDE4MGVdLFxuICBbMHgxODg1LCAweDE4ODZdLFxuICBbMHgxOGE5LCAweDE4YTldLFxuICBbMHgxOTIwLCAweDE5MjJdLFxuICBbMHgxOTI3LCAweDE5MjhdLFxuICBbMHgxOTMyLCAweDE5MzJdLFxuICBbMHgxOTM5LCAweDE5M2JdLFxuICBbMHgxYTE3LCAweDFhMThdLFxuICBbMHgxYTFiLCAweDFhMWJdLFxuICBbMHgxYTU2LCAweDFhNTZdLFxuICBbMHgxYTU4LCAweDFhNWVdLFxuICBbMHgxYTYwLCAweDFhNjBdLFxuICBbMHgxYTYyLCAweDFhNjJdLFxuICBbMHgxYTY1LCAweDFhNmNdLFxuICBbMHgxYTczLCAweDFhN2NdLFxuICBbMHgxYTdmLCAweDFhN2ZdLFxuICBbMHgxYWIwLCAweDFhYmVdLFxuICBbMHgxYjAwLCAweDFiMDNdLFxuICBbMHgxYjM0LCAweDFiMzRdLFxuICBbMHgxYjM2LCAweDFiM2FdLFxuICBbMHgxYjNjLCAweDFiM2NdLFxuICBbMHgxYjQyLCAweDFiNDJdLFxuICBbMHgxYjZiLCAweDFiNzNdLFxuICBbMHgxYjgwLCAweDFiODFdLFxuICBbMHgxYmEyLCAweDFiYTVdLFxuICBbMHgxYmE4LCAweDFiYTldLFxuICBbMHgxYmFiLCAweDFiYWRdLFxuICBbMHgxYmU2LCAweDFiZTZdLFxuICBbMHgxYmU4LCAweDFiZTldLFxuICBbMHgxYmVkLCAweDFiZWRdLFxuICBbMHgxYmVmLCAweDFiZjFdLFxuICBbMHgxYzJjLCAweDFjMzNdLFxuICBbMHgxYzM2LCAweDFjMzddLFxuICBbMHgxY2QwLCAweDFjZDJdLFxuICBbMHgxY2Q0LCAweDFjZTBdLFxuICBbMHgxY2UyLCAweDFjZThdLFxuICBbMHgxY2VkLCAweDFjZWRdLFxuICBbMHgxY2Y0LCAweDFjZjRdLFxuICBbMHgxY2Y4LCAweDFjZjldLFxuICBbMHgxZGMwLCAweDFkZjldLFxuICBbMHgxZGZiLCAweDFkZmZdLFxuICBbMHgyMDBiLCAweDIwMGZdLFxuICBbMHgyMDJhLCAweDIwMmVdLFxuICBbMHgyMDYwLCAweDIwNjRdLFxuICBbMHgyMDY2LCAweDIwNmZdLFxuICBbMHgyMGQwLCAweDIwZjBdLFxuICBbMHgyY2VmLCAweDJjZjFdLFxuICBbMHgyZDdmLCAweDJkN2ZdLFxuICBbMHgyZGUwLCAweDJkZmZdLFxuICBbMHgzMDJhLCAweDMwMmRdLFxuICBbMHgzMDk5LCAweDMwOWFdLFxuICBbMHhhNjZmLCAweGE2NzJdLFxuICBbMHhhNjc0LCAweGE2N2RdLFxuICBbMHhhNjllLCAweGE2OWZdLFxuICBbMHhhNmYwLCAweGE2ZjFdLFxuICBbMHhhODAyLCAweGE4MDJdLFxuICBbMHhhODA2LCAweGE4MDZdLFxuICBbMHhhODBiLCAweGE4MGJdLFxuICBbMHhhODI1LCAweGE4MjZdLFxuICBbMHhhOGM0LCAweGE4YzVdLFxuICBbMHhhOGUwLCAweGE4ZjFdLFxuICBbMHhhOGZmLCAweGE4ZmZdLFxuICBbMHhhOTI2LCAweGE5MmRdLFxuICBbMHhhOTQ3LCAweGE5NTFdLFxuICBbMHhhOTgwLCAweGE5ODJdLFxuICBbMHhhOWIzLCAweGE5YjNdLFxuICBbMHhhOWI2LCAweGE5YjldLFxuICBbMHhhOWJjLCAweGE5YmNdLFxuICBbMHhhOWU1LCAweGE5ZTVdLFxuICBbMHhhYTI5LCAweGFhMmVdLFxuICBbMHhhYTMxLCAweGFhMzJdLFxuICBbMHhhYTM1LCAweGFhMzZdLFxuICBbMHhhYTQzLCAweGFhNDNdLFxuICBbMHhhYTRjLCAweGFhNGNdLFxuICBbMHhhYTdjLCAweGFhN2NdLFxuICBbMHhhYWIwLCAweGFhYjBdLFxuICBbMHhhYWIyLCAweGFhYjRdLFxuICBbMHhhYWI3LCAweGFhYjhdLFxuICBbMHhhYWJlLCAweGFhYmZdLFxuICBbMHhhYWMxLCAweGFhYzFdLFxuICBbMHhhYWVjLCAweGFhZWRdLFxuICBbMHhhYWY2LCAweGFhZjZdLFxuICBbMHhhYmU1LCAweGFiZTVdLFxuICBbMHhhYmU4LCAweGFiZThdLFxuICBbMHhhYmVkLCAweGFiZWRdLFxuICBbMHhmYjFlLCAweGZiMWVdLFxuICBbMHhmZTAwLCAweGZlMGZdLFxuICBbMHhmZTIwLCAweGZlMmZdLFxuICBbMHhmZWZmLCAweGZlZmZdLFxuICBbMHhmZmY5LCAweGZmZmJdLFxuICBbMHgxMDFmZCwgMHgxMDFmZF0sXG4gIFsweDEwMmUwLCAweDEwMmUwXSxcbiAgWzB4MTAzNzYsIDB4MTAzN2FdLFxuICBbMHgxMGEwMSwgMHgxMGEwM10sXG4gIFsweDEwYTA1LCAweDEwYTA2XSxcbiAgWzB4MTBhMGMsIDB4MTBhMGZdLFxuICBbMHgxMGEzOCwgMHgxMGEzYV0sXG4gIFsweDEwYTNmLCAweDEwYTNmXSxcbiAgWzB4MTBhZTUsIDB4MTBhZTZdLFxuICBbMHgxMGQyNCwgMHgxMGQyN10sXG4gIFsweDEwZjQ2LCAweDEwZjUwXSxcbiAgWzB4MTEwMDEsIDB4MTEwMDFdLFxuICBbMHgxMTAzOCwgMHgxMTA0Nl0sXG4gIFsweDExMDdmLCAweDExMDgxXSxcbiAgWzB4MTEwYjMsIDB4MTEwYjZdLFxuICBbMHgxMTBiOSwgMHgxMTBiYV0sXG4gIFsweDExMTAwLCAweDExMTAyXSxcbiAgWzB4MTExMjcsIDB4MTExMmJdLFxuICBbMHgxMTEyZCwgMHgxMTEzNF0sXG4gIFsweDExMTczLCAweDExMTczXSxcbiAgWzB4MTExODAsIDB4MTExODFdLFxuICBbMHgxMTFiNiwgMHgxMTFiZV0sXG4gIFsweDExMWM5LCAweDExMWNjXSxcbiAgWzB4MTEyMmYsIDB4MTEyMzFdLFxuICBbMHgxMTIzNCwgMHgxMTIzNF0sXG4gIFsweDExMjM2LCAweDExMjM3XSxcbiAgWzB4MTEyM2UsIDB4MTEyM2VdLFxuICBbMHgxMTJkZiwgMHgxMTJkZl0sXG4gIFsweDExMmUzLCAweDExMmVhXSxcbiAgWzB4MTEzMDAsIDB4MTEzMDFdLFxuICBbMHgxMTMzYiwgMHgxMTMzY10sXG4gIFsweDExMzQwLCAweDExMzQwXSxcbiAgWzB4MTEzNjYsIDB4MTEzNmNdLFxuICBbMHgxMTM3MCwgMHgxMTM3NF0sXG4gIFsweDExNDM4LCAweDExNDNmXSxcbiAgWzB4MTE0NDIsIDB4MTE0NDRdLFxuICBbMHgxMTQ0NiwgMHgxMTQ0Nl0sXG4gIFsweDExNDVlLCAweDExNDVlXSxcbiAgWzB4MTE0YjMsIDB4MTE0YjhdLFxuICBbMHgxMTRiYSwgMHgxMTRiYV0sXG4gIFsweDExNGJmLCAweDExNGMwXSxcbiAgWzB4MTE0YzIsIDB4MTE0YzNdLFxuICBbMHgxMTViMiwgMHgxMTViNV0sXG4gIFsweDExNWJjLCAweDExNWJkXSxcbiAgWzB4MTE1YmYsIDB4MTE1YzBdLFxuICBbMHgxMTVkYywgMHgxMTVkZF0sXG4gIFsweDExNjMzLCAweDExNjNhXSxcbiAgWzB4MTE2M2QsIDB4MTE2M2RdLFxuICBbMHgxMTYzZiwgMHgxMTY0MF0sXG4gIFsweDExNmFiLCAweDExNmFiXSxcbiAgWzB4MTE2YWQsIDB4MTE2YWRdLFxuICBbMHgxMTZiMCwgMHgxMTZiNV0sXG4gIFsweDExNmI3LCAweDExNmI3XSxcbiAgWzB4MTE3MWQsIDB4MTE3MWZdLFxuICBbMHgxMTcyMiwgMHgxMTcyNV0sXG4gIFsweDExNzI3LCAweDExNzJiXSxcbiAgWzB4MTE4MmYsIDB4MTE4MzddLFxuICBbMHgxMTgzOSwgMHgxMTgzYV0sXG4gIFsweDExYTAxLCAweDExYTBhXSxcbiAgWzB4MTFhMzMsIDB4MTFhMzhdLFxuICBbMHgxMWEzYiwgMHgxMWEzZV0sXG4gIFsweDExYTQ3LCAweDExYTQ3XSxcbiAgWzB4MTFhNTEsIDB4MTFhNTZdLFxuICBbMHgxMWE1OSwgMHgxMWE1Yl0sXG4gIFsweDExYThhLCAweDExYTk2XSxcbiAgWzB4MTFhOTgsIDB4MTFhOTldLFxuICBbMHgxMWMzMCwgMHgxMWMzNl0sXG4gIFsweDExYzM4LCAweDExYzNkXSxcbiAgWzB4MTFjM2YsIDB4MTFjM2ZdLFxuICBbMHgxMWM5MiwgMHgxMWNhN10sXG4gIFsweDExY2FhLCAweDExY2IwXSxcbiAgWzB4MTFjYjIsIDB4MTFjYjNdLFxuICBbMHgxMWNiNSwgMHgxMWNiNl0sXG4gIFsweDExZDMxLCAweDExZDM2XSxcbiAgWzB4MTFkM2EsIDB4MTFkM2FdLFxuICBbMHgxMWQzYywgMHgxMWQzZF0sXG4gIFsweDExZDNmLCAweDExZDQ1XSxcbiAgWzB4MTFkNDcsIDB4MTFkNDddLFxuICBbMHgxMWQ5MCwgMHgxMWQ5MV0sXG4gIFsweDExZDk1LCAweDExZDk1XSxcbiAgWzB4MTFkOTcsIDB4MTFkOTddLFxuICBbMHgxMWVmMywgMHgxMWVmNF0sXG4gIFsweDE2YWYwLCAweDE2YWY0XSxcbiAgWzB4MTZiMzAsIDB4MTZiMzZdLFxuICBbMHgxNmY4ZiwgMHgxNmY5Ml0sXG4gIFsweDFiYzlkLCAweDFiYzllXSxcbiAgWzB4MWJjYTAsIDB4MWJjYTNdLFxuICBbMHgxZDE2NywgMHgxZDE2OV0sXG4gIFsweDFkMTczLCAweDFkMTgyXSxcbiAgWzB4MWQxODUsIDB4MWQxOGJdLFxuICBbMHgxZDFhYSwgMHgxZDFhZF0sXG4gIFsweDFkMjQyLCAweDFkMjQ0XSxcbiAgWzB4MWRhMDAsIDB4MWRhMzZdLFxuICBbMHgxZGEzYiwgMHgxZGE2Y10sXG4gIFsweDFkYTc1LCAweDFkYTc1XSxcbiAgWzB4MWRhODQsIDB4MWRhODRdLFxuICBbMHgxZGE5YiwgMHgxZGE5Zl0sXG4gIFsweDFkYWExLCAweDFkYWFmXSxcbiAgWzB4MWUwMDAsIDB4MWUwMDZdLFxuICBbMHgxZTAwOCwgMHgxZTAxOF0sXG4gIFsweDFlMDFiLCAweDFlMDIxXSxcbiAgWzB4MWUwMjMsIDB4MWUwMjRdLFxuICBbMHgxZTAyNiwgMHgxZTAyYV0sXG4gIFsweDFlOGQwLCAweDFlOGQ2XSxcbiAgWzB4MWU5NDQsIDB4MWU5NGFdLFxuICBbMHhlMDAwMSwgMHhlMDAwMV0sXG4gIFsweGUwMDIwLCAweGUwMDdmXSxcbiAgWzB4ZTAxMDAsIDB4ZTAxZWZdLFxuXTtcblxuLy8gU29ydGVkIGxpc3Qgb2Ygbm9uLW92ZXJsYXBwaW5nIGludGVydmFscyBvZiBFYXN0IEFzaWFuIEFtYmlndW91cyBjaGFyYWN0ZXJzXG4vLyBnZW5lcmF0ZWQgYnkgdGhlIGAuL3Jhbmdlcy5weWAgaGVscGVyLlxubGliLndjLmFtYmlndW91cyA9IFtcbiAgWzB4MDBhMSwgMHgwMGExXSxcbiAgWzB4MDBhNCwgMHgwMGE0XSxcbiAgWzB4MDBhNywgMHgwMGE4XSxcbiAgWzB4MDBhYSwgMHgwMGFhXSxcbiAgWzB4MDBhZCwgMHgwMGFlXSxcbiAgWzB4MDBiMCwgMHgwMGI0XSxcbiAgWzB4MDBiNiwgMHgwMGJhXSxcbiAgWzB4MDBiYywgMHgwMGJmXSxcbiAgWzB4MDBjNiwgMHgwMGM2XSxcbiAgWzB4MDBkMCwgMHgwMGQwXSxcbiAgWzB4MDBkNywgMHgwMGQ4XSxcbiAgWzB4MDBkZSwgMHgwMGUxXSxcbiAgWzB4MDBlNiwgMHgwMGU2XSxcbiAgWzB4MDBlOCwgMHgwMGVhXSxcbiAgWzB4MDBlYywgMHgwMGVkXSxcbiAgWzB4MDBmMCwgMHgwMGYwXSxcbiAgWzB4MDBmMiwgMHgwMGYzXSxcbiAgWzB4MDBmNywgMHgwMGZhXSxcbiAgWzB4MDBmYywgMHgwMGZjXSxcbiAgWzB4MDBmZSwgMHgwMGZlXSxcbiAgWzB4MDEwMSwgMHgwMTAxXSxcbiAgWzB4MDExMSwgMHgwMTExXSxcbiAgWzB4MDExMywgMHgwMTEzXSxcbiAgWzB4MDExYiwgMHgwMTFiXSxcbiAgWzB4MDEyNiwgMHgwMTI3XSxcbiAgWzB4MDEyYiwgMHgwMTJiXSxcbiAgWzB4MDEzMSwgMHgwMTMzXSxcbiAgWzB4MDEzOCwgMHgwMTM4XSxcbiAgWzB4MDEzZiwgMHgwMTQyXSxcbiAgWzB4MDE0NCwgMHgwMTQ0XSxcbiAgWzB4MDE0OCwgMHgwMTRiXSxcbiAgWzB4MDE0ZCwgMHgwMTRkXSxcbiAgWzB4MDE1MiwgMHgwMTUzXSxcbiAgWzB4MDE2NiwgMHgwMTY3XSxcbiAgWzB4MDE2YiwgMHgwMTZiXSxcbiAgWzB4MDFjZSwgMHgwMWNlXSxcbiAgWzB4MDFkMCwgMHgwMWQwXSxcbiAgWzB4MDFkMiwgMHgwMWQyXSxcbiAgWzB4MDFkNCwgMHgwMWQ0XSxcbiAgWzB4MDFkNiwgMHgwMWQ2XSxcbiAgWzB4MDFkOCwgMHgwMWQ4XSxcbiAgWzB4MDFkYSwgMHgwMWRhXSxcbiAgWzB4MDFkYywgMHgwMWRjXSxcbiAgWzB4MDI1MSwgMHgwMjUxXSxcbiAgWzB4MDI2MSwgMHgwMjYxXSxcbiAgWzB4MDJjNCwgMHgwMmM0XSxcbiAgWzB4MDJjNywgMHgwMmM3XSxcbiAgWzB4MDJjOSwgMHgwMmNiXSxcbiAgWzB4MDJjZCwgMHgwMmNkXSxcbiAgWzB4MDJkMCwgMHgwMmQwXSxcbiAgWzB4MDJkOCwgMHgwMmRiXSxcbiAgWzB4MDJkZCwgMHgwMmRkXSxcbiAgWzB4MDJkZiwgMHgwMmRmXSxcbiAgWzB4MDMwMCwgMHgwMzZmXSxcbiAgWzB4MDM5MSwgMHgwM2ExXSxcbiAgWzB4MDNhMywgMHgwM2E5XSxcbiAgWzB4MDNiMSwgMHgwM2MxXSxcbiAgWzB4MDNjMywgMHgwM2M5XSxcbiAgWzB4MDQwMSwgMHgwNDAxXSxcbiAgWzB4MDQxMCwgMHgwNDRmXSxcbiAgWzB4MDQ1MSwgMHgwNDUxXSxcbiAgWzB4MTEwMCwgMHgxMTVmXSxcbiAgWzB4MjAxMCwgMHgyMDEwXSxcbiAgWzB4MjAxMywgMHgyMDE2XSxcbiAgWzB4MjAxOCwgMHgyMDE5XSxcbiAgWzB4MjAxYywgMHgyMDFkXSxcbiAgWzB4MjAyMCwgMHgyMDIyXSxcbiAgWzB4MjAyNCwgMHgyMDI3XSxcbiAgWzB4MjAzMCwgMHgyMDMwXSxcbiAgWzB4MjAzMiwgMHgyMDMzXSxcbiAgWzB4MjAzNSwgMHgyMDM1XSxcbiAgWzB4MjAzYiwgMHgyMDNiXSxcbiAgWzB4MjAzZSwgMHgyMDNlXSxcbiAgWzB4MjA3NCwgMHgyMDc0XSxcbiAgWzB4MjA3ZiwgMHgyMDdmXSxcbiAgWzB4MjA4MSwgMHgyMDg0XSxcbiAgWzB4MjBhYywgMHgyMGFjXSxcbiAgWzB4MjEwMywgMHgyMTAzXSxcbiAgWzB4MjEwNSwgMHgyMTA1XSxcbiAgWzB4MjEwOSwgMHgyMTA5XSxcbiAgWzB4MjExMywgMHgyMTEzXSxcbiAgWzB4MjExNiwgMHgyMTE2XSxcbiAgWzB4MjEyMSwgMHgyMTIyXSxcbiAgWzB4MjEyNiwgMHgyMTI2XSxcbiAgWzB4MjEyYiwgMHgyMTJiXSxcbiAgWzB4MjE1MywgMHgyMTU0XSxcbiAgWzB4MjE1YiwgMHgyMTVlXSxcbiAgWzB4MjE2MCwgMHgyMTZiXSxcbiAgWzB4MjE3MCwgMHgyMTc5XSxcbiAgWzB4MjE4OSwgMHgyMTg5XSxcbiAgWzB4MjE5MCwgMHgyMTk5XSxcbiAgWzB4MjFiOCwgMHgyMWI5XSxcbiAgWzB4MjFkMiwgMHgyMWQyXSxcbiAgWzB4MjFkNCwgMHgyMWQ0XSxcbiAgWzB4MjFlNywgMHgyMWU3XSxcbiAgWzB4MjIwMCwgMHgyMjAwXSxcbiAgWzB4MjIwMiwgMHgyMjAzXSxcbiAgWzB4MjIwNywgMHgyMjA4XSxcbiAgWzB4MjIwYiwgMHgyMjBiXSxcbiAgWzB4MjIwZiwgMHgyMjBmXSxcbiAgWzB4MjIxMSwgMHgyMjExXSxcbiAgWzB4MjIxNSwgMHgyMjE1XSxcbiAgWzB4MjIxYSwgMHgyMjFhXSxcbiAgWzB4MjIxZCwgMHgyMjIwXSxcbiAgWzB4MjIyMywgMHgyMjIzXSxcbiAgWzB4MjIyNSwgMHgyMjI1XSxcbiAgWzB4MjIyNywgMHgyMjJjXSxcbiAgWzB4MjIyZSwgMHgyMjJlXSxcbiAgWzB4MjIzNCwgMHgyMjM3XSxcbiAgWzB4MjIzYywgMHgyMjNkXSxcbiAgWzB4MjI0OCwgMHgyMjQ4XSxcbiAgWzB4MjI0YywgMHgyMjRjXSxcbiAgWzB4MjI1MiwgMHgyMjUyXSxcbiAgWzB4MjI2MCwgMHgyMjYxXSxcbiAgWzB4MjI2NCwgMHgyMjY3XSxcbiAgWzB4MjI2YSwgMHgyMjZiXSxcbiAgWzB4MjI2ZSwgMHgyMjZmXSxcbiAgWzB4MjI4MiwgMHgyMjgzXSxcbiAgWzB4MjI4NiwgMHgyMjg3XSxcbiAgWzB4MjI5NSwgMHgyMjk1XSxcbiAgWzB4MjI5OSwgMHgyMjk5XSxcbiAgWzB4MjJhNSwgMHgyMmE1XSxcbiAgWzB4MjJiZiwgMHgyMmJmXSxcbiAgWzB4MjMxMiwgMHgyMzEyXSxcbiAgWzB4MjMxYSwgMHgyMzFiXSxcbiAgWzB4MjMyOSwgMHgyMzJhXSxcbiAgWzB4MjNlOSwgMHgyM2VjXSxcbiAgWzB4MjNmMCwgMHgyM2YwXSxcbiAgWzB4MjNmMywgMHgyM2YzXSxcbiAgWzB4MjQ2MCwgMHgyNGU5XSxcbiAgWzB4MjRlYiwgMHgyNTRiXSxcbiAgWzB4MjU1MCwgMHgyNTczXSxcbiAgWzB4MjU4MCwgMHgyNThmXSxcbiAgWzB4MjU5MiwgMHgyNTk1XSxcbiAgWzB4MjVhMCwgMHgyNWExXSxcbiAgWzB4MjVhMywgMHgyNWE5XSxcbiAgWzB4MjViMiwgMHgyNWIzXSxcbiAgWzB4MjViNiwgMHgyNWI3XSxcbiAgWzB4MjViYywgMHgyNWJkXSxcbiAgWzB4MjVjMCwgMHgyNWMxXSxcbiAgWzB4MjVjNiwgMHgyNWM4XSxcbiAgWzB4MjVjYiwgMHgyNWNiXSxcbiAgWzB4MjVjZSwgMHgyNWQxXSxcbiAgWzB4MjVlMiwgMHgyNWU1XSxcbiAgWzB4MjVlZiwgMHgyNWVmXSxcbiAgWzB4MjVmZCwgMHgyNWZlXSxcbiAgWzB4MjYwNSwgMHgyNjA2XSxcbiAgWzB4MjYwOSwgMHgyNjA5XSxcbiAgWzB4MjYwZSwgMHgyNjBmXSxcbiAgWzB4MjYxNCwgMHgyNjE1XSxcbiAgWzB4MjYxYywgMHgyNjFjXSxcbiAgWzB4MjYxZSwgMHgyNjFlXSxcbiAgWzB4MjY0MCwgMHgyNjQwXSxcbiAgWzB4MjY0MiwgMHgyNjQyXSxcbiAgWzB4MjY0OCwgMHgyNjUzXSxcbiAgWzB4MjY2MCwgMHgyNjYxXSxcbiAgWzB4MjY2MywgMHgyNjY1XSxcbiAgWzB4MjY2NywgMHgyNjZhXSxcbiAgWzB4MjY2YywgMHgyNjZkXSxcbiAgWzB4MjY2ZiwgMHgyNjZmXSxcbiAgWzB4MjY3ZiwgMHgyNjdmXSxcbiAgWzB4MjY5MywgMHgyNjkzXSxcbiAgWzB4MjY5ZSwgMHgyNjlmXSxcbiAgWzB4MjZhMSwgMHgyNmExXSxcbiAgWzB4MjZhYSwgMHgyNmFiXSxcbiAgWzB4MjZiZCwgMHgyNmJmXSxcbiAgWzB4MjZjNCwgMHgyNmUxXSxcbiAgWzB4MjZlMywgMHgyNmUzXSxcbiAgWzB4MjZlOCwgMHgyNmZmXSxcbiAgWzB4MjcwNSwgMHgyNzA1XSxcbiAgWzB4MjcwYSwgMHgyNzBiXSxcbiAgWzB4MjcyOCwgMHgyNzI4XSxcbiAgWzB4MjczZCwgMHgyNzNkXSxcbiAgWzB4Mjc0YywgMHgyNzRjXSxcbiAgWzB4Mjc0ZSwgMHgyNzRlXSxcbiAgWzB4Mjc1MywgMHgyNzU1XSxcbiAgWzB4Mjc1NywgMHgyNzU3XSxcbiAgWzB4Mjc3NiwgMHgyNzdmXSxcbiAgWzB4Mjc5NSwgMHgyNzk3XSxcbiAgWzB4MjdiMCwgMHgyN2IwXSxcbiAgWzB4MjdiZiwgMHgyN2JmXSxcbiAgWzB4MmIxYiwgMHgyYjFjXSxcbiAgWzB4MmI1MCwgMHgyYjUwXSxcbiAgWzB4MmI1NSwgMHgyYjU5XSxcbiAgWzB4MmU4MCwgMHgyZmRmXSxcbiAgWzB4MmZmMCwgMHgzMDNlXSxcbiAgWzB4MzA0MCwgMHg0ZGJmXSxcbiAgWzB4NGUwMCwgMHhhNGNmXSxcbiAgWzB4YTk2MCwgMHhhOTdmXSxcbiAgWzB4YWMwMCwgMHhkN2EzXSxcbiAgWzB4ZTAwMCwgMHhmYWZmXSxcbiAgWzB4ZmUwMCwgMHhmZTE5XSxcbiAgWzB4ZmUzMCwgMHhmZTZmXSxcbiAgWzB4ZmYwMSwgMHhmZjYwXSxcbiAgWzB4ZmZlMCwgMHhmZmU2XSxcbiAgWzB4ZmZmZCwgMHhmZmZkXSxcbiAgWzB4MTZmZTAsIDB4MTZmZTFdLFxuICBbMHgxNzAwMCwgMHgxOGFmZl0sXG4gIFsweDFiMDAwLCAweDFiMTJmXSxcbiAgWzB4MWIxNzAsIDB4MWIyZmZdLFxuICBbMHgxZjAwNCwgMHgxZjAwNF0sXG4gIFsweDFmMGNmLCAweDFmMGNmXSxcbiAgWzB4MWYxMDAsIDB4MWYxMGFdLFxuICBbMHgxZjExMCwgMHgxZjEyZF0sXG4gIFsweDFmMTMwLCAweDFmMTY5XSxcbiAgWzB4MWYxNzAsIDB4MWYxYWNdLFxuICBbMHgxZjIwMCwgMHgxZjIwMl0sXG4gIFsweDFmMjEwLCAweDFmMjNiXSxcbiAgWzB4MWYyNDAsIDB4MWYyNDhdLFxuICBbMHgxZjI1MCwgMHgxZjI1MV0sXG4gIFsweDFmMjYwLCAweDFmMjY1XSxcbiAgWzB4MWYzMDAsIDB4MWYzMjBdLFxuICBbMHgxZjMyZCwgMHgxZjMzNV0sXG4gIFsweDFmMzM3LCAweDFmMzdjXSxcbiAgWzB4MWYzN2UsIDB4MWYzOTNdLFxuICBbMHgxZjNhMCwgMHgxZjNjYV0sXG4gIFsweDFmM2NmLCAweDFmM2QzXSxcbiAgWzB4MWYzZTAsIDB4MWYzZjBdLFxuICBbMHgxZjNmNCwgMHgxZjNmNF0sXG4gIFsweDFmM2Y4LCAweDFmNDNlXSxcbiAgWzB4MWY0NDAsIDB4MWY0NDBdLFxuICBbMHgxZjQ0MiwgMHgxZjRmY10sXG4gIFsweDFmNGZmLCAweDFmNTNkXSxcbiAgWzB4MWY1NGIsIDB4MWY1NGVdLFxuICBbMHgxZjU1MCwgMHgxZjU2N10sXG4gIFsweDFmNTdhLCAweDFmNTdhXSxcbiAgWzB4MWY1OTUsIDB4MWY1OTZdLFxuICBbMHgxZjVhNCwgMHgxZjVhNF0sXG4gIFsweDFmNWZiLCAweDFmNjRmXSxcbiAgWzB4MWY2ODAsIDB4MWY2YzVdLFxuICBbMHgxZjZjYywgMHgxZjZjY10sXG4gIFsweDFmNmQwLCAweDFmNmQyXSxcbiAgWzB4MWY2ZWIsIDB4MWY2ZWNdLFxuICBbMHgxZjZmNCwgMHgxZjZmOV0sXG4gIFsweDFmOTEwLCAweDFmOTNlXSxcbiAgWzB4MWY5NDAsIDB4MWY5NzBdLFxuICBbMHgxZjk3MywgMHgxZjk3Nl0sXG4gIFsweDFmOTdhLCAweDFmOTdhXSxcbiAgWzB4MWY5N2MsIDB4MWY5YTJdLFxuICBbMHgxZjliMCwgMHgxZjliOV0sXG4gIFsweDFmOWMwLCAweDFmOWMyXSxcbiAgWzB4MWY5ZDAsIDB4MWY5ZmZdLFxuICBbMHgyMDAwMCwgMHgyZmZmZF0sXG4gIFsweDMwMDAwLCAweDNmZmZkXSxcbiAgWzB4ZTAxMDAsIDB4ZTAxZWZdLFxuICBbMHhmMDAwMCwgMHhmZmZmZF0sXG4gIFsweDEwMDAwMCwgMHgxMGZmZmRdLFxuXTtcblxuLy8gU29ydGVkIGxpc3Qgb2Ygbm9uLW92ZXJsYXBwaW5nIGludGVydmFscyBvZiBFYXN0IEFzaWFuIFVuYW1iaWd1b3VzIGNoYXJhY3RlcnNcbi8vIGdlbmVyYXRlZCBieSB0aGUgYC4vcmFuZ2VzLnB5YCBoZWxwZXIuXG5saWIud2MudW5hbWJpZ3VvdXMgPSBbXG4gIFsweDExMDAsIDB4MTE1Zl0sXG4gIFsweDIzMWEsIDB4MjMxYl0sXG4gIFsweDIzMjksIDB4MjMyYV0sXG4gIFsweDIzZTksIDB4MjNlY10sXG4gIFsweDIzZjAsIDB4MjNmMF0sXG4gIFsweDIzZjMsIDB4MjNmM10sXG4gIFsweDI1ZmQsIDB4MjVmZV0sXG4gIFsweDI2MTQsIDB4MjYxNV0sXG4gIFsweDI2NDgsIDB4MjY1M10sXG4gIFsweDI2N2YsIDB4MjY3Zl0sXG4gIFsweDI2OTMsIDB4MjY5M10sXG4gIFsweDI2YTEsIDB4MjZhMV0sXG4gIFsweDI2YWEsIDB4MjZhYl0sXG4gIFsweDI2YmQsIDB4MjZiZV0sXG4gIFsweDI2YzQsIDB4MjZjNV0sXG4gIFsweDI2Y2UsIDB4MjZjZV0sXG4gIFsweDI2ZDQsIDB4MjZkNF0sXG4gIFsweDI2ZWEsIDB4MjZlYV0sXG4gIFsweDI2ZjIsIDB4MjZmM10sXG4gIFsweDI2ZjUsIDB4MjZmNV0sXG4gIFsweDI2ZmEsIDB4MjZmYV0sXG4gIFsweDI2ZmQsIDB4MjZmZF0sXG4gIFsweDI3MDUsIDB4MjcwNV0sXG4gIFsweDI3MGEsIDB4MjcwYl0sXG4gIFsweDI3MjgsIDB4MjcyOF0sXG4gIFsweDI3NGMsIDB4Mjc0Y10sXG4gIFsweDI3NGUsIDB4Mjc0ZV0sXG4gIFsweDI3NTMsIDB4Mjc1NV0sXG4gIFsweDI3NTcsIDB4Mjc1N10sXG4gIFsweDI3OTUsIDB4Mjc5N10sXG4gIFsweDI3YjAsIDB4MjdiMF0sXG4gIFsweDI3YmYsIDB4MjdiZl0sXG4gIFsweDJiMWIsIDB4MmIxY10sXG4gIFsweDJiNTAsIDB4MmI1MF0sXG4gIFsweDJiNTUsIDB4MmI1NV0sXG4gIFsweDJlODAsIDB4MmZkZl0sXG4gIFsweDJmZjAsIDB4MzAzZV0sXG4gIFsweDMwNDAsIDB4MzI0N10sXG4gIFsweDMyNTAsIDB4NGRiZl0sXG4gIFsweDRlMDAsIDB4YTRjZl0sXG4gIFsweGE5NjAsIDB4YTk3Zl0sXG4gIFsweGFjMDAsIDB4ZDdhM10sXG4gIFsweGY5MDAsIDB4ZmFmZl0sXG4gIFsweGZlMTAsIDB4ZmUxOV0sXG4gIFsweGZlMzAsIDB4ZmU2Zl0sXG4gIFsweGZmMDEsIDB4ZmY2MF0sXG4gIFsweGZmZTAsIDB4ZmZlNl0sXG4gIFsweDE2ZmUwLCAweDE2ZmUxXSxcbiAgWzB4MTcwMDAsIDB4MThhZmZdLFxuICBbMHgxYjAwMCwgMHgxYjEyZl0sXG4gIFsweDFiMTcwLCAweDFiMmZmXSxcbiAgWzB4MWYwMDQsIDB4MWYwMDRdLFxuICBbMHgxZjBjZiwgMHgxZjBjZl0sXG4gIFsweDFmMThlLCAweDFmMThlXSxcbiAgWzB4MWYxOTEsIDB4MWYxOWFdLFxuICBbMHgxZjIwMCwgMHgxZjIwMl0sXG4gIFsweDFmMjEwLCAweDFmMjNiXSxcbiAgWzB4MWYyNDAsIDB4MWYyNDhdLFxuICBbMHgxZjI1MCwgMHgxZjI1MV0sXG4gIFsweDFmMjYwLCAweDFmMjY1XSxcbiAgWzB4MWYzMDAsIDB4MWYzMjBdLFxuICBbMHgxZjMyZCwgMHgxZjMzNV0sXG4gIFsweDFmMzM3LCAweDFmMzdjXSxcbiAgWzB4MWYzN2UsIDB4MWYzOTNdLFxuICBbMHgxZjNhMCwgMHgxZjNjYV0sXG4gIFsweDFmM2NmLCAweDFmM2QzXSxcbiAgWzB4MWYzZTAsIDB4MWYzZjBdLFxuICBbMHgxZjNmNCwgMHgxZjNmNF0sXG4gIFsweDFmM2Y4LCAweDFmNDNlXSxcbiAgWzB4MWY0NDAsIDB4MWY0NDBdLFxuICBbMHgxZjQ0MiwgMHgxZjRmY10sXG4gIFsweDFmNGZmLCAweDFmNTNkXSxcbiAgWzB4MWY1NGIsIDB4MWY1NGVdLFxuICBbMHgxZjU1MCwgMHgxZjU2N10sXG4gIFsweDFmNTdhLCAweDFmNTdhXSxcbiAgWzB4MWY1OTUsIDB4MWY1OTZdLFxuICBbMHgxZjVhNCwgMHgxZjVhNF0sXG4gIFsweDFmNWZiLCAweDFmNjRmXSxcbiAgWzB4MWY2ODAsIDB4MWY2YzVdLFxuICBbMHgxZjZjYywgMHgxZjZjY10sXG4gIFsweDFmNmQwLCAweDFmNmQyXSxcbiAgWzB4MWY2ZWIsIDB4MWY2ZWNdLFxuICBbMHgxZjZmNCwgMHgxZjZmOV0sXG4gIFsweDFmOTEwLCAweDFmOTNlXSxcbiAgWzB4MWY5NDAsIDB4MWY5NzBdLFxuICBbMHgxZjk3MywgMHgxZjk3Nl0sXG4gIFsweDFmOTdhLCAweDFmOTdhXSxcbiAgWzB4MWY5N2MsIDB4MWY5YTJdLFxuICBbMHgxZjliMCwgMHgxZjliOV0sXG4gIFsweDFmOWMwLCAweDFmOWMyXSxcbiAgWzB4MWY5ZDAsIDB4MWY5ZmZdLFxuICBbMHgyMDAwMCwgMHgyZmZmZF0sXG4gIFsweDMwMDAwLCAweDNmZmZkXSxcbl07XG5cbi8qKlxuICogQmluYXJ5IHNlYXJjaCB0byBjaGVjayBpZiB0aGUgZ2l2ZW4gdW5pY29kZSBjaGFyYWN0ZXIgaXMgaW4gdGhlIHRhYmxlLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gdWNzIEEgdW5pY29kZSBjaGFyYWN0ZXIgY29kZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZSBBIHNvcnRlZCBsaXN0IG9mIGludGVybmFscyB0byBtYXRjaCBhZ2FpbnN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGlzIGluIHRoZSB0YWJsZS5cbiAqL1xubGliLndjLmJpbmFyeVRhYmxlU2VhcmNoXyA9IGZ1bmN0aW9uKHVjcywgdGFibGUpIHtcbiAgdmFyIG1pbiA9IDAsXG4gICAgbWF4ID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgdmFyIG1pZDtcblxuICBpZiAodWNzIDwgdGFibGVbbWluXVswXSB8fCB1Y3MgPiB0YWJsZVttYXhdWzFdKSByZXR1cm4gZmFsc2U7XG4gIHdoaWxlIChtYXggPj0gbWluKSB7XG4gICAgbWlkID0gTWF0aC5mbG9vcigobWluICsgbWF4KSAvIDIpO1xuICAgIGlmICh1Y3MgPiB0YWJsZVttaWRdWzFdKSB7XG4gICAgICBtaW4gPSBtaWQgKyAxO1xuICAgIH0gZWxzZSBpZiAodWNzIDwgdGFibGVbbWlkXVswXSkge1xuICAgICAgbWF4ID0gbWlkIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBCaW5hcnkgc2VhcmNoIHRvIGNoZWNrIGlmIHRoZSBnaXZlbiB1bmljb2RlIGNoYXJhY3RlciBpcyBhIHNwYWNlIGNoYXJhY3Rlci5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IHVjcyBBIHVuaWNvZGUgY2hhcmFjdGVyIGNvZGUuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGlzIGEgc3BhY2UgY2hhcmFjdGVyOyBmYWxzZVxuICogICAgIG90aGVyd2lzZS5cbiAqL1xubGliLndjLmlzU3BhY2UgPSBmdW5jdGlvbih1Y3MpIHtcbiAgcmV0dXJuIGxpYi53Yy5iaW5hcnlUYWJsZVNlYXJjaF8odWNzLCBsaWIud2MuY29tYmluaW5nKTtcbn07XG5cbi8qKlxuICogQXV4aWxpYXJ5IGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiB0aGUgZ2l2ZW4gdW5pY29kZSBjaGFyYWN0ZXIgaXMgYSBFYXN0XG4gKiBBc2lhbiBBbWJpZ3VvdXMgY2hhcmFjdGVyLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gdWNzIEEgdW5pY29kZSBjaGFyYWN0ZXIgY29kZS5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgaXMgYSBFYXN0IEFzaWFuIEFtYmlndW91c1xuICogY2hhcmFjdGVyLlxuICovXG5saWIud2MuaXNDamtBbWJpZ3VvdXMgPSBmdW5jdGlvbih1Y3MpIHtcbiAgcmV0dXJuIGxpYi53Yy5iaW5hcnlUYWJsZVNlYXJjaF8odWNzLCBsaWIud2MuYW1iaWd1b3VzKTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBjb2x1bW4gd2lkdGggb2YgdGhlIGdpdmVuIGNoYXJhY3Rlci5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IHVjcyBBIHVuaWNvZGUgY2hhcmFjdGVyIGNvZGUuXG4gKlxuICogQHJldHVybiB7aW50ZWdlcn0gVGhlIGNvbHVtbiB3aWR0aCBvZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyLlxuICovXG5saWIud2MuY2hhcldpZHRoID0gZnVuY3Rpb24odWNzKSB7XG4gIGlmIChsaWIud2MucmVnYXJkQ2prQW1iaWd1b3VzKSB7XG4gICAgcmV0dXJuIGxpYi53Yy5jaGFyV2lkdGhSZWdhcmRBbWJpZ3VvdXModWNzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGliLndjLmNoYXJXaWR0aERpc3JlZ2FyZEFtYmlndW91cyh1Y3MpO1xuICB9XG59O1xuXG4vKipcbiAqIERldGVybWluZSB0aGUgY29sdW1uIHdpZHRoIG9mIHRoZSBnaXZlbiBjaGFyYWN0ZXIgd2l0aG91dCBjb25zaWRlcmluZyBFYXN0XG4gKiBBc2lhbiBBbWJpZ3VvdXMgY2hhcmFjdGVycy5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IHVjcyBBIHVuaWNvZGUgY2hhcmFjdGVyIGNvZGUuXG4gKlxuICogQHJldHVybiB7aW50ZWdlcn0gVGhlIGNvbHVtbiB3aWR0aCBvZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyLlxuICovXG5saWIud2MuY2hhcldpZHRoRGlzcmVnYXJkQW1iaWd1b3VzID0gZnVuY3Rpb24odWNzKSB7XG4gIC8vIE9wdGltaXplIGZvciBBU0NJSSBjaGFyYWN0ZXJzLlxuICBpZiAodWNzIDwgMHg3Zikge1xuICAgIGlmICh1Y3MgPj0gMHgyMCkgcmV0dXJuIDE7XG4gICAgZWxzZSBpZiAodWNzID09IDApIHJldHVybiBsaWIud2MubnVsV2lkdGg7XG4gICAgLyogaWYgKHVjcyA8IDB4MjApICovIGVsc2UgcmV0dXJuIGxpYi53Yy5jb250cm9sV2lkdGg7XG4gIH1cblxuICAvLyBUZXN0IGZvciA4LWJpdCBjb250cm9sIGNoYXJhY3RlcnMuXG4gIGlmICh1Y3MgPCAweGEwKSByZXR1cm4gbGliLndjLmNvbnRyb2xXaWR0aDtcblxuICAvLyBCaW5hcnkgc2VhcmNoIGluIHRhYmxlIG9mIG5vbi1zcGFjaW5nIGNoYXJhY3RlcnMuXG4gIGlmIChsaWIud2MuaXNTcGFjZSh1Y3MpKSByZXR1cm4gMDtcblxuICAvLyBCaW5hcnkgc2VhcmNoIGluIHRhYmxlIG9mIHdpZGUgY2hhcmFjdGVycy5cbiAgcmV0dXJuIGxpYi53Yy5iaW5hcnlUYWJsZVNlYXJjaF8odWNzLCBsaWIud2MudW5hbWJpZ3VvdXMpID8gMiA6IDE7XG59O1xuXG4vKipcbiAqIERldGVybWluZSB0aGUgY29sdW1uIHdpZHRoIG9mIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29uc2lkZXJpbmcgRWFzdCBBc2lhblxuICogQW1iaWd1b3VzIGNoYXJhY3RlcnMuXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyfSB1Y3MgQSB1bmljb2RlIGNoYXJhY3RlciBjb2RlLlxuICpcbiAqIEByZXR1cm4ge2ludGVnZXJ9IFRoZSBjb2x1bW4gd2lkdGggb2YgdGhlIGdpdmVuIGNoYXJhY3Rlci5cbiAqL1xubGliLndjLmNoYXJXaWR0aFJlZ2FyZEFtYmlndW91cyA9IGZ1bmN0aW9uKHVjcykge1xuICBpZiAobGliLndjLmlzQ2prQW1iaWd1b3VzKHVjcykpIHJldHVybiBsaWIud2MuY2prQW1iaWd1b3VzV2lkdGg7XG5cbiAgcmV0dXJuIGxpYi53Yy5jaGFyV2lkdGhEaXNyZWdhcmRBbWJpZ3VvdXModWNzKTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBjb2x1bW4gd2lkdGggb2YgdGhlIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm4ge2ludGVnZXJ9IFRoZSBjb2x1bW4gd2lkdGggb2YgdGhlIGdpdmVuIHN0cmluZy5cbiAqL1xubGliLndjLnN0cldpZHRoID0gZnVuY3Rpb24oc3RyKSB7XG4gIHZhciB3aWR0aCxcbiAgICBydiA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyApIHtcbiAgICB2YXIgY29kZVBvaW50ID0gc3RyLmNvZGVQb2ludEF0KGkpO1xuICAgIHdpZHRoID0gbGliLndjLmNoYXJXaWR0aChjb2RlUG9pbnQpO1xuICAgIGlmICh3aWR0aCA8IDApIHJldHVybiAtMTtcbiAgICBydiArPSB3aWR0aDtcbiAgICBpICs9IGNvZGVQb2ludCA8PSAweGZmZmYgPyAxIDogMjtcbiAgfVxuXG4gIHJldHVybiBydjtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBzdWJzdHJpbmcgYXQgdGhlIGdpdmVuIGNvbHVtbiBvZmZzZXQgb2YgdGhlIGdpdmVuIGNvbHVtbiB3aWR0aC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gZ2V0IHN1YnN0cmluZyBmcm9tLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBzdGFydCBUaGUgc3RhcnRpbmcgY29sdW1uIG9mZnNldCB0byBnZXQgc3Vic3RyaW5nLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBvcHRfd2lkdGggVGhlIGNvbHVtbiB3aWR0aCBvZiB0aGUgc3Vic3RyaW5nLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN1YnN0cmluZy5cbiAqL1xubGliLndjLnN1YnN0ciA9IGZ1bmN0aW9uKHN0ciwgc3RhcnQsIG9wdF93aWR0aCkge1xuICB2YXIgc3RhcnRJbmRleCA9IDA7XG4gIHZhciBlbmRJbmRleCwgd2lkdGg7XG5cbiAgLy8gRnVuIGVkZ2UgY2FzZTogTm9ybWFsbHkgd2UgYXNzb2NpYXRlIHplcm8gd2lkdGggY29kZXBvaW50cyAobGlrZSBjb21iaW5pbmdcbiAgLy8gY2hhcmFjdGVycykgd2l0aCB0aGUgcHJldmlvdXMgY29kZXBvaW50LCBzbyB3ZSBza2lwIGFueSBsZWFkaW5nIG9uZXMgd2hpbGVcbiAgLy8gaW5jbHVkaW5nIHRyYWlsaW5nIG9uZXMuICBIb3dldmVyLCBpZiB0aGVyZSBhcmUgemVybyB3aWR0aCBjb2RlcG9pbnRzIGF0XG4gIC8vIHRoZSBzdGFydCBvZiB0aGUgc3RyaW5nLCBhbmQgdGhlIHN1YnN0cmluZyBzdGFydHMgYXQgMCwgbGV0cyBpbmNsdWRlIHRoZW1cbiAgLy8gaW4gdGhlIHJlc3VsdC4gIFRoaXMgYWxzbyBtYWtlcyBmb3IgYSBzaW1wbGUgb3B0aW1pemF0aW9uIGZvciBhIGNvbW1vblxuICAvLyByZXF1ZXN0LlxuICBpZiAoc3RhcnQpIHtcbiAgICBmb3IgKHdpZHRoID0gMDsgc3RhcnRJbmRleCA8IHN0ci5sZW5ndGg7ICkge1xuICAgICAgY29uc3QgY29kZVBvaW50ID0gc3RyLmNvZGVQb2ludEF0KHN0YXJ0SW5kZXgpO1xuICAgICAgd2lkdGggKz0gbGliLndjLmNoYXJXaWR0aChjb2RlUG9pbnQpO1xuICAgICAgaWYgKHdpZHRoID4gc3RhcnQpIGJyZWFrO1xuICAgICAgc3RhcnRJbmRleCArPSBjb2RlUG9pbnQgPD0gMHhmZmZmID8gMSA6IDI7XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdF93aWR0aCAhPSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGVuZEluZGV4ID0gc3RhcnRJbmRleCwgd2lkdGggPSAwOyBlbmRJbmRleCA8IHN0ci5sZW5ndGg7ICkge1xuICAgICAgY29uc3QgY29kZVBvaW50ID0gc3RyLmNvZGVQb2ludEF0KGVuZEluZGV4KTtcbiAgICAgIHdpZHRoICs9IGxpYi53Yy5jaGFyV2lkdGgoY29kZVBvaW50KTtcbiAgICAgIGlmICh3aWR0aCA+IG9wdF93aWR0aCkgYnJlYWs7XG4gICAgICBlbmRJbmRleCArPSBjb2RlUG9pbnQgPD0gMHhmZmZmID8gMSA6IDI7XG4gICAgfVxuICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0SW5kZXgpO1xufTtcblxuLyoqXG4gKiBHZXQgc3Vic3RyaW5nIGF0IHRoZSBnaXZlbiBzdGFydCBhbmQgZW5kIGNvbHVtbiBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGdldCBzdWJzdHJpbmcgZnJvbS5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gc3RhcnQgVGhlIHN0YXJ0aW5nIGNvbHVtbiBvZmZzZXQuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGVuZCBUaGUgZW5kaW5nIGNvbHVtbiBvZmZzZXQuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3Vic3RyaW5nLlxuICovXG5saWIud2Muc3Vic3RyaW5nID0gZnVuY3Rpb24oc3RyLCBzdGFydCwgZW5kKSB7XG4gIHJldHVybiBsaWIud2Muc3Vic3RyKHN0ciwgc3RhcnQsIGVuZCAtIHN0YXJ0KTtcbn07XG5saWIucmVzb3VyY2UuYWRkKCdsaWJkb3QvY2hhbmdlbG9nL3ZlcnNpb24nLCAndGV4dC9wbGFpbicsICcyMDE4LTEwLTI0Jyk7XG5cbmxpYi5yZXNvdXJjZS5hZGQoJ2xpYmRvdC9jaGFuZ2Vsb2cvZGF0ZScsICd0ZXh0L3BsYWluJywgJzEuMjQnKTtcblxuLy8gVGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgbGliZG90L2Jpbi9jb25jYXQuc2guXG4vLyBJdCBoYXMgYmVlbiBtYXJrZWQgcmVhZC1vbmx5IGZvciB5b3VyIHNhZmV0eS4gIFJhdGhlciB0aGFuXG4vLyBlZGl0IGl0IGRpcmVjdGx5LCBwbGVhc2UgbW9kaWZ5IG9uZSBvZiB0aGVzZSBzb3VyY2UgZmlsZXMuXG4vL1xuLy8gaHRlcm0vYXVkaW8vYmVsbC5vZ2dcbi8vIGh0ZXJtL2ltYWdlcy9pY29uLTk2LnBuZ1xuXG4oJ3VzZSBzdHJpY3QnKTtcblxubGliLnJlc291cmNlLmFkZChcbiAgJ2h0ZXJtL2F1ZGlvL2JlbGwnLFxuICAnYXVkaW8vb2dnO2Jhc2U2NCcsXG4gICdUMmRuVXdBQ0FBQUFBQUFBQUFEaHFXNUtBQUFBQU1GdkVqWUJIZ0YyYjNKaWFYTUFBQUFBQVlDN0FBQUFBQUFBQUhjQkFBQUFBQUM0JyArXG4gICAgJ0FVOW5aMU1BQUFBQUFBQUFBQUFBNGFsdVNnRUFBQUFBZXNJM0VDMy8vLy8vLy8vLy8vLy8vLy8vLzhrRGRtOXlZbWx6SFFBQUFGaHAnICtcbiAgICAnY0dndVQzSm5JR3hwWWxadmNtSnBjeUJKSURJd01Ea3dOekE1QUFBQUFBRUZkbTl5WW1sektVSkRWZ0VBQ0FBQUFERk1JTVdBMEpCVicgK1xuICAgICdBQUFRQUFCZ0pDa09rMlpKS2FXVW9TaDVtSlJJU1NtbGxNVXdpWmlVaWNVWVk0d3h4aGhqakRIR0dHT01JRFJrRlFBQUJBQ0FLQW1PJyArXG4gICAgJ28rWkphczQ1WnhnbmpuS2dPV2xPT0tjZ0I0cFI0RGtKd3ZVbVkyNm10S1pyYnM0cEpRZ05XUVVBQUFJQVFFZ2hoUlJTU0NHRkZHS0knICtcbiAgICAnSVlZWVlvZ2hoeHh5eUNHbm5ISUtLcWlnZ2dveXlDQ0RURExwcEpOT091bW9vNDQ2NmlpMDBFSUxMYlRTU2t3eDFWWmpycjBHWFh4eicgK1xuICAgICd6am5ubkhQT09lZWNjODRKUWtOV0FRQWdBQUFFUWdZWlpCQkNDQ0dGRkZLSUthYVljZ295eUlEUWtGVUFBQ0FBZ0FBQUFBQkhrUlJKJyArXG4gICAgJ3NSVExzUnpOMFNSUDhpeFJFelhSTTBWVFZFMVZWVlZWZFYxWGRtWFhkblhYZG4xWm1JVmJ1SDFadUlWYjJJVmQ5NFZoR0laaEdJWmgnICtcbiAgICAnR0laaCtIM2Y5MzNmOTMwZ05HUVZBQ0FCQUtBak9aYmpLYUlpR3FMaU9hSURoSWFzQWdCa0FBQUVBQ0FKa2lJcGtxTkpwbVpxcm1tYicgK1xuICAgICd0bWlydG0zTHNpekxzZ3lFaHF3Q0FBQUJBQVFBQUFBQUFLQnBtcVpwbXFacG1xWnBtcVpwbXFacG1xWnBtbVpabG1WWmxtVlpsbVZaJyArXG4gICAgJ2xtVlpsbVZabG1WWmxtVlpsbVZabG1WWmxtVlpsbVZabG1WWlFHaklLZ0JBQWdCQXgzRWN4M0VrUlZJa3gzSXNCd2dOV1FVQXlBQUEnICtcbiAgICAnQ0FCQVVpekZjalJIY3pUSGN6ekhjenhIZEVUSmxFek45RXdQQ0ExWkJRQUFBZ0FJQUFBQUFBQkFNUnpGY1J6SjBTUlBVaTNUY2pWWCcgK1xuICAgICdjejNYYzAzWGRWMVhWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZZSFFrRlVBQUFRQUFDR2RacFpxJyArXG4gICAgJ2dBZ3prR0VnTkdRVkFJQUFBQUFZb1FoRERBZ05XUVVBQUFRQUFJaWg1Q0NhMEpyenpUa09tdVdncVJTYjA4R0pWSnNudWFtWW0zUE8nICtcbiAgICAnT2VlY2JNNFo0NXh6emluS21jV2dtZENhYzg1SkRKcWxvSm5RbW5QT2VSS2JCNjJwMHBwenpobm5uQTdHR1dHY2M4NXAwcG9IcWRsWScgK1xuICAgICdtM1BPV2RDYTVxaTVGSnR6em9tVW15ZTF1VlNiYzg0NTU1eHp6am5ubkhQT3FWNmN6c0U1NFp4enpvbmFtMnU1Q1YyY2M4NzVaSnp1JyArXG4gICAgJ3pRbmhuSFBPT2VlY2M4NDU1NXh6emdsQ1ExWUJBRUFBQUFSaDJCakduWUlnZlk0R1loUWhwaUdUSG5TUERwT2dNY2dwcEI2TmprWksnICtcbiAgICAncVlOUVVoa25wWFNDMEpCVkFBQWdBQUNFRUZKSUlZVVVVa2doaFJSU1NDR0dHR0tJSWFlY2Nnb3FxS1NTaWlyS0tMUE1Nc3Nzczh3eScgK1xuICAgICd5NnpEempycnNNTVFRd3d4dE5KS0xEWFZWbU9OdGVhZWM2NDVTR3VsdGRaYUs2V1VVa29wcFNBMFpCVUFBQUlBUUNCa2tFRUdHWVVVJyArXG4gICAgJ1VrZ2hocGh5eWltbm9JSUtDQTFaQlFBQUFnQUlBQUFBOENUUEVSM1JFUjNSRVIzUkVSM1JFUjNQOFJ4UkVpVlJFaVhSTWkxVE16MVYnICtcbiAgICAnVkZWWGRtMVpsM1hidDRWZDJIWGYxMzNmMTQxZkY0WmxXWlpsV1pabFdaWmxXWlpsV1pabENVSkRWZ0VBSUFBQUFFSUlJWVFVVWtnaCcgK1xuICAgICdoWlJpakRISG5JTk9RZ21CMEpCVkFBQWdBSUFBQUFBQVIzRVV4NUVjeVpFa1M3SWtUZElzemZJMFQvTTAwUk5GVVRSTlV4VmQwUlYxJyArXG4gICAgJzB4WmxVelpkMHpWbDAxVmwxWFpsMmJabFc3ZDlXYlo5My9kOTMvZDkzL2Q5My9kOTM5ZDFJRFJrRlFBZ0FRQ2dJem1TSWltU0lqbU8nICtcbiAgICAnNDBpU0JJU0dyQUlBWkFBQUJBQ2dLSTdpT0k0alNaSWtXWkltZVpabmlacXBtWjdwcWFJS2hJYXNBZ0FBQVFBRUFBQUFBQUNnYUlxbicgK1xuICAgICdtSXFuaUlybmlJNG9pWlpwaVpxcXVhSnN5cTdydXE3cnVxN3J1cTdydXE3cnVxN3J1cTdydXE3cnVxN3J1cTdydXE3cnVxN3J1a0JvJyArXG4gICAgJ3lDb0FRQUlBUUVkeUpFZHlKRVZTSkVWeUpBY0lEVmtGQU1nQUFBZ0F3REVjUTFJa3g3SXNUZk0wVC9NMDBSTTkwVE05VlhSRkZ3Z04nICtcbiAgICAnV1FVQUFBSUFDQUFBQUFBQXdKQU1TN0VjemRFa1VWSXQxVkkxMVZJdFZWUTlWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVicgK1xuICAgICdWVlZWVlZWVlZWVlYxVFJOMHpTQjBKQ1ZBQUFaQUFBalFRWVpoQkNLY3BCQ2JqMVlDREhtSkFXaE9RYWh4QmlFcHhBekREa05JblNRJyArXG4gICAgJ1FTYzl1Skk1d3d6ejRGSW9GVVJNZzQwbE40NGdEY0ttWEVubE9BaENRMVlFQUZFQUFJQXh5REhFR0hMT1NjbWdSTTR4Q1oyVXlEa24nICtcbiAgICAncFpQU1NTa3RsaGd6S1NXbUVtUGpuS1BTU2Nta2xCaExpcDJrRW1PSnJRQUFnQUFIQUlBQUM2SFFrQlVCUUJRQUFHSU1VZ29waFpSUycgK1xuICAgICd6aW5ta0ZMS01lVWNVa281cDV4VHpqa0lIWVRLTVFhZGd4QXBwUnhUemluSEhJVE1RZVdjZzlCQktBQUFJTUFCQUNEQVFpZzBaRVVBJyArXG4gICAgJ0VDY0E0SEFrejVNMFN4UWxTeE5GenhSbDF4Tk4xNVUwelRRMVVWUlZ5eE5WMVZSVjJ4Wk5WYllsVFJOTlRmUlVWUk5GVlJWVjA1Wk4nICtcbiAgICAnVmJWdHp6UmwyVlJWM1JaVjFiWmwyeForVjVaMTN6Tk5XUlpWMWRaTlZiVjExNVo5WDladFhaZzB6VFExVVZSVlRSUlYxVlJWMnpaVicgK1xuICAgICcxN1kxVVhSVlVWVmxXVlJWV1habFdmZFZWOVo5U3hSVjFWTk4yUlZWVmJaVjJmVnRWWlo5NFhSVlhWZGwyZmRWV1JaK1c5ZUY0Zlo5JyArXG4gICAgJzRSaFYxZFpOMTlWMVZaWjlZZFpsWWJkMTN5aHBtbWxxb3FpcW1paXFxcW1xdG0ycXJxMWJvdWlxb3FyS3NtZXFycXpLc3ErcnJtenInICtcbiAgICAnbWlpcXJxaXFzaXlxcWl5cnNxejdxaXpydHFpcXVxM0tzckNicnF2cnR1OEx3eXpydW5DcXJxNnJzdXo3cWl6cnVxM3J4bkhydWpCOCcgK1xuICAgICdwaW5McHF2cXVxbTZ1bTdydW5ITXRtMGNvNnJxdmlyTHdyREtzdS9ydWkrMGRTRlJWWFhkbEYzalYyVlo5MjFmZDU1Yjk0V3liVHUvJyArXG4gICAgJ3JmdktjZXU2MHZnNXoyOGN1Ylp0SExOdUc3K3QrOGJ6S3o5aE9JNmxaNXEyYmFxcXJadXFxK3V5Yml2RHJPdENVVlY5WFpWbDN6ZGQnICtcbiAgICAnV1JkdTN6ZU9XOWVOb3FycXVpckx2ckRLc2pIY3htOGN1ekFjWGRzMmpsdlhuYkt0QzMxanlQY0p6MnZieG5IN091UDJkYU92REFuSCcgK1xuICAgICdqd0FBZ0FFSEFJQUFFOHBBb1NFckFvQTRBUUFHSWVjVVV4QXF4U0IwRUZMcUlLUlVNUVloYzA1S3hSeVVVRXBxSVpUVUtzWWdWSTVKJyArXG4gICAgJ3lKeVRFa3BvS1pUU1VnZWhwVkJLYTZHVTFsSnJzYWJVWXUwZ3BCWkthUzJVMGxwcXFjYlVXb3dSWXhBeTU2Umt6a2tKcGJRV1Nta3QnICtcbiAgICAnYzA1SzU2Q2tEa0pLcGFRVVMwb3RWc3hKeWFDajBrRklxYVFTVTBtcHRWQkthNldrRmt0S01iWVVXMjR4MWh4S2FTMmtFbHRKS2NZVScgK1xuICAgICdVMjB0eHBvanhpQmt6a25KbkpNU1Nta3RsTkphNVppVURrSkttWU9TU2txdGxaSlN6SnlUMGtGSXFZT09Ta2twdHBKS1RLR1Uxa3BLJyArXG4gICAgJ3NZVlNXbXd4MXB4U2JEV1UwbHBKS2NhU1Ntd3R4bHBiVExWMUVGb0xwYlFXU21tdHRWWnJhcTNHVUVwckphVVlTMHF4dFJacmJqSG0nICtcbiAgICAnR2twcHJhUVNXMG1weFJaYmppM0dtbE5yTmFiV2FtNHg1aHBiYlQzV21uTktyZGJVVW8wdHhwcGpiYjNWbW52dklLUVdTbWt0bE5KaScgK1xuICAgICdhaTNHMW1LdG9aVFdTaXF4bFpKYWJESG0ybHFNT1pUU1lrbXB4WkpTakMzR21sdHN1YWFXYW13eDVwcFNpN1htMm5Oc05mYlVXcXd0JyArXG4gICAgJ3hwcFRTN1hXV25PUHVmVldBQURBZ0FNQVFJQUpaYURRa0pVQVFCUUFBRUdJVXM1SmFSQnl6RGtxQ1VMTU9TZXBja3hDS1NsVnpFRUknICtcbiAgICAnSmJYT09Ta3B4ZFk1Q0NXbEZrc3FMY1ZXYXlrcHRSWnJMUUFBb01BQkFDREFCazJKeFFFS0RWa0pBRVFCQUNER0lNUVloQVlacFJpRCcgK1xuICAgICcwQmlrRkdNUUlxVVljMDVLcFJSanprbkpHSE1PUWlvWlk4NUJLQ21FVUVvcUtZVVFTa2tscFFJQUFBb2NBQUFDYk5DVVdCeWcwSkFWJyArXG4gICAgJ0FVQVVBQUJnREdJTU1ZWWdkRlF5S2hHRVRFb25xWUVRV2d1dGRkWlNhNlhGekZwcXJiVFlRQWl0aGRZeVN5WEcxRnBtcmNTWVdpc0EnICtcbiAgICAnQU96QUFRRHN3RUlvTkdRbEFKQUhBRUFZb3hSanpqbG5FR0xNT2VnY05BZ3g1aHlFRGlyR25JTU9RZ2dWWTg1QkNDR0V6RGtJSVlRUScgK1xuICAgICdRdVljaEJCQ0NLR0RFRUlJcFpUU1FRZ2hoRkpLNlNDRUVFSXBwWFFRUWdpaGxGSUtBQUFxY0FBQUNMQlJaSE9Da2FCQ1ExWUNBSGtBJyArXG4gICAgJ0FJQXhTamtIb1pSR0tjWWdsSkpTb3hSakVFcEpxWElNUWlrcHhWWTVCNkdVbEZyc0lKVFNXbXcxZGhCS2FTM0dXa05LcmNWWWE2NGgnICtcbiAgICAncGRaaXJEWFgxRnFNdGVhYWEwb3R4bHByemJrQUFOd0ZCd0N3QXh0Rk5pY1lDU28wWkNVQWtBY0FnQ0NrRkdPTU1ZWVVZb294NTV4RCcgK1xuICAgICdDQ25GbUhQT0thWVljODQ1NTVSaWpEbm5uSE9NTWVlY2M4NDV4cGh6empubkhIUE9PZWVjYzQ0NTU1eHp6am5ubkhQT09lZWNjODQ1JyArXG4gICAgJzU1eHp6Z2tBQUNwd0FBQUlzRkZrYzRLUm9FSkRWZ0lBcVFBQUFCRldZb3d4eGhnYkNESEdHR09NTVVZU1lvd3h4aGhqYkRIR0dHT00nICtcbiAgICAnTWNhWVlvd3h4aGhqakRIR0dHT01NY1lZWTR3eHhoaGpqREhHR0dPTU1jWVlZNHd4eGhoampESEdHR09NTWNZWVk0d3h4aGhqakRIRycgK1xuICAgICdHRnRycmJYV1dtdXR0ZFphYTYyMTFscHJyUUJBdndvSEFQOEhHMVpIT0NrYUN5dzBaQ1VBRUE0QUFCakRtSE9PT1FZZGhJWXA2S1NFJyArXG4gICAgJ0RrSUlvVU5LT1NnbGhGQktLU2x6VGtwS3BhU1VXa3FaYzFKU0tpV2xsbExxSUtUVVdrb3R0ZFphQnlXbDFsSnFyYlhXT2dpbHROUmEnICtcbiAgICAnYTYyMTJFRklLYVhXV29zdHhsQktTcTIxMkdLTU5ZWlNVbXF0eGRoaXJER2swbEpzTGNZWVk2eWhsTlphYXpIR0dHc3RLYlhXWW95MScgK1xuICAgICd4bHByU2FtMTFtS0xOZFphQ3dEZ2JuQUFnRWl3Y1lhVnBMUEMwZUJDUTFZQ0FDRUJBQVJDakRubm5ITVFRZ2doVW9veDU2Q0RFRUlJJyArXG4gICAgJ0lVUktNZVljZEJCQ0NDR0VqREhub0lNUVFnZ2hoSkF4NWh4MEVFSUlJWVFRT3VjY2hCQkNDS0dFVWtybkhIUVFRZ2dobEZCQzZTQ0UnICtcbiAgICAnRUVJSW9ZUlNTaWtkaEJCQ0tLR0VVa29wSllRUVFnbWxsRkpLS2FXRUVFSUlvWVFTU2ltbGxCQkNDS1dVVWtvcHBaUVNRZ2dobEZKSycgK1xuICAgICdLYVdVVWtJSW9aUlFTaW1sbEZKS0NDR0VVa29wcFpSU1Nna2hoRkJLS2FXVVVrb3BJWVFTU2ltbGxGSktLYVVBQUlBREJ3Q0FBQ1BvJyArXG4gICAgJ0pLUEtJbXcwNGNJRFVHaklTZ0NBREFBQWNkaHE2eW5XeUNERm5JU1dTNFNRY2hCaUxoRlNpamxIc1dWSUdjVVkxWlF4cFJSVFVtdm8nICtcbiAgICAnbkdLTVVVK2RZMG94dzZ5VVZrb29rWUxTY3F5MWRzd0JBQUFnQ0FBd0VDRXpnVUFCRkJqSUFJQURoQVFwQUtDd3dOQXhYQVFFNUJJeScgK1xuICAgICdDZ3dLeDRSejBta0RBQkNFeUF5UmlGZ01FaE9xZ2FKaU9nQllYR0RJQjRBTWpZMjBpd3ZvTXNBRlhkeDFJSVFnQkNHSXhRRVVrSUNEJyArXG4gICAgJ0UyNTQ0ZzFQdU1FSk9rV2xEZ0lBQUFBQTRBQUFIZ0FBa2cwZ0lpS2FPWTRPancrUUVKRVJraEtURTVRQUFBQUFBTEFCZ0E4QWdDUUYnICtcbiAgICAnaUlpSVpvNmp3K01ESkVSa2hLVEU1QVFsQUFBQUFBQUFBQUFBQ0FnSUFBQUFBQUFFQUFBQUNBaFBaMmRUQUFRWU93QUFBQUFBQU9HcCcgK1xuICAgICdia29DQUFBQW1jNzREUmd5TmpNNjlUQXpPVGs3NGRuTHViZXdzYmFnbVppTnA0ZDBLYnNFeFNZL0kzWFVUd0pna2VaZG4xSFk0em9qJyArXG4gICAgJzMzL3E5REZ0djNVaTEvam14N2xDVXRQdDE4L3NZZjlNa2dBc0FHUkJkM2dNR1A0c1UrcUNQWUJ5OVZyQTNZcUpvc1czVzIvZWYxaU8nICtcbiAgICAnL3UzY2c4WkcvNTdqVStwUG1iR0VKVWdrZm5hSTM5RGJQcXhkZFpwaGJNUm1DYzVyS2xrVU1reXg4aUlvdWc1ZEp2MU9ZSDlhNTljKycgK1xuICAgICczR2V2cWM3WjJYRmREakwvcUh6dFJmaldFV3hKL2FpR2V6am9odTlIc0NaZFFCS2JpSDBWdFUvM204NWxERzJULyt4a1pjWW5YK0UrJyArXG4gICAgJ2FxenYveFRnT29URkcreDdTTnFRNE4rb0FBQlN4dVZYdzc3SmQ1Ym1tVG11SmFrWDc1MDlISDBrR1lLdkFSUHB3Zk9TQVB5U1BBYzInICtcbiAgICAnRWtuZUR3QjJId0FBSmxRRFlLNTU4Nk43OUdKQ2p4NCtwNmFEVWQyN1hTdlJ5WExKa0lDNVlaMWpMdjVscE9oWlR6MHMrRG1uRjFkaScgK1xuICAgICdwdHJuTTZVRGdJVzExWGg4Y0hUZDAvU21iZ09BZHhjeVd3TUFBR0lyWjNmTlNmWmJ6S2lZcks0K3RQcXRuTVZMT2VXT0cya1Z2VVkrJyArXG4gICAgJ3AyUEovaGtDbDVhRlJPNFRMR1lQWmNJVTN2WU0xaG9oUzRqSEZsbnlXLzJUNUo3a0dzU2hYV1Q4TjA1ViszQy9HUHFKMVFkV2lzR1AnICtcbiAgICAneEV6SHFYSVNCUElpbldEVXQ3SWVKdi9mNU90ekJ4cFR6WlpRK0NZRWhIWGZxRzRhQUJRbGk3MkdKaE40b0p2K2hYY0FwQUpTRXJBVycgK1xuICAgICc4RzJyYUFYNE5VY0FCblZ0NzdDelpBQitMc0hjVmUrUTRoK1FCMXdoL1pySlRQeFNCZEk4bWdUZUFkVHNRT29GVUVuZzlCSGNWUGh4JyArXG4gICAgJ1NSUllrS1daSlhPRllQNlY0QUVyaXBKb0VqWGdBMndKUlpIU0V4bUpEbThGMEE2Z0VYc2c1YTRac0FMSXRyTUI3K2ZoN1VLTHZZV1MnICtcbiAgICAnZHRzRHdGZjFtell6UzFGODJOMWgyT3l0MmU3NkIxUWRTMFNBc1FpZ0xQTU9nSlM5SlJDN2hGWEE2a1VzTEZOS0Q1Y0E1Y1RSdmdTcScgK1xuICAgICdQYzNGbDk5eFczUVRpL01IUjhERW02V252YVZRQVR3UnFSS2p5d1E5QnJyaHVnUjJBS1RzUFFlUWNrckFPZ0RPaGJURVN5clhRNTBDJyArXG4gICAgJ2tOcFhkdFdqVzdXMi8zVWplWDNVOTVnSWRhbGZSQW9BbXFVRWl3cDUzaENkY0N3bGc0N2ZjYmZ6bG1RTUFnYUJraDdjK2ZjRGdGK2knICtcbiAgICAnZndEWGZ6ZWdMUGNMWUpzQUFKUUFyVFhqbmgvdVhHeTN2MUhrM3BWNi8zdDVydVc4MWY2cHJmYk0yUTNXTlZ5OThCd1V0YkN3aEZoQScgK1xuICAgICdXdVBldjZPZS80WmFGUVVjZ0tyVnM0ZGVmemgxVEFEQTFERWg1YjNWbERhRUN3NWIrYlBma0tvczN0SUF1ZTN2SlpPaWgzZ2EzbDZPJyArXG4gICAgJzNQU2ZJa3JMdjBQQVM4NlBQZEw3ZzhvYzJLdGVORktLektSZWhPdjJnSm9GTEJQWG1hWHZQQlFJTGdKb24wYmJXQnN6cllaWVl3RTcnICtcbiAgICAnamwyait2VGRVN1ZwazIxTGlVMFFhalBreXdBQUhxYlVDMC9Zc1lPZGI0ZTZCT3A3RTBjQ2kwNEFvL1RnRDhaVkFNaWQ2aC9BOEllQicgK1xuICAgICdOa3A2L3hzQUFDWkVMRVlJayt5dkk2UXoxTk42bElmdEIvNklNV2pXSk5PcVBUTWVkQW15YWo2RXMwUUJrbEpwaVNXV0huUTJDb1liJyArXG4gICAgJ0dXQW10KzBnTFFCRktDQm5wMlFVVVFaLzF0aHRaREJKVXBGV1k4MnozNG9jb3JCNjJvWDdxQjV5MG9QQXYvZm94SDI1d1ZtZ0lIZjInICtcbiAgICAneEZPcjhsZVpjQnExS3gzWnZDcTlCZ2E2MzlBeHVIdVBOTC83MVlDRjRFeXdKcHFIRkFYNlhGMHNqVmJ1QU5udnZkTGNydWZZd09NLycgK1xuICAgICdpRGE2aUE0NjhBWUFBQjZtTkJNWGNnVEQ4SFNScUo0dnc4Q2pBbENFUEFDQVNsWC9BUHdQT0pLbDl4UUFBQVBtbmV2MmVXcDMzWGd5JyArXG4gICAgJ3czRHZmejZteUdrM295UDhZVEtzQ092ekFnQUxRaTBvMWM2TnpzMk8yUGcyaDRBQ0lKQWdBR1AwYU5uNXgwQkRnVmZIN3UyVHR5ZkQnICtcbiAgICAnY1JJdVlBeVFoQkYvbHZTUkF0dGdBNlRQYldaQTlnYVVyWldBVUVBQStEeDQ3UTMvcjg3SHhVVXFabUIwQm1VdU1sb2pGakh0MWdEdScgK1xuICAgICdubnZ1WDhNSW1zalNxNVdrelN6R1M2Mk9FSWxPdWZXV2V6eFdwdjZGQmdEZ0pWbHRmWEZZdE5BQW5xVTB4UW9EMFlMaVhvNWNGNVFWJyArXG4gICAgJzRDblkxdEJMQWtaQ09BQkFoYmsvQU0rL0F3U0NDZGxXQUFBTWNGalM3b3diOEdWRHp2ZURpWnZ6bmJ0MnRGNGJMNW9kTjFZS2w4OFQnICtcbiAgICAnQUVBQkNadnVmcTlZQ1RCdE13VkFRVUVBd0d0Tmx0elNhSHZBRFlDM1R4TFZqcWlSQStPWkFNaHpjcUVnUmNBT3dvQ2d2ZFR4c1RITCcgK1xuICAgICdRRUY2K29PYjIrUEFJOGNpUFFjWGc3cE9ZK0xqeFFTdjJmam1GdWozNGdHd3ozMTAvYkdLNnozeGdUODg3ZW9tV1VMRWFEZDA0d0hlJyArXG4gICAgJ3RZeGRqY2dWMlN4dlN3bjBWb1pYSlJxa1JDNUFTUS9tdVZvQVVzWDdBZ0FRTUJOYVZ3QUFsQUJSeFQvMVBtZnFMcVNSTkRiaFhiMDcnICtcbiAgICAnYmVycEIzYjk0anB1V0VaakJDRDJPY2RYRnBDS0VnQ0RmY0ZQTXc4QUFBRFV3VDRsblVtNTBsbXdycE1NaFBRSUtqNnUwRThmcjJ2RycgK1xuICAgICdCbmdNTmRJbHJac2lnamFobGp1ZDZBRlZnK3R6WHdVblhMM1RKTHBhamFXS0E0VkFBQUFNaUZmcUpnS0FaMDhYcnRTM2R4dFFOWWNwJyArXG4gICAgJ1B2WUVHOENsdnJRUkpnQmVwaHduTldKanRHcW1wNlZFUFN2QmU3RUJpVTNxZ0piUUF3RDRMZThMQU1ETWhIYk5BQUFsZ0srdEZzNU8nICtcbiAgICAnK1l5SmM5eUNuSmEzcnhMUHVsR254d3NYVjlGc2syazRQaXNDQUhDOEZrd2JHRTlnSlFBQW9Nbnlrc2owQ2RGTVpMTGdvejhNK0Z4eicgK1xuICAgICdpd1lCZ0l4K3pIaUNCQUtBbEJLTnBGMXNPOUpwVmN5RWk5YXIxNVlsSGdydXQ1ZlBKbmtkSjZ2RXdaUHlBSFFCSUVEVXJsTWNCQUFkJyArXG4gICAgJzJLQVMwUXErSndSc0U0QUpadE1uQUQ2R25PWXdZbE9JWnZ0elVOZGpyZUI3ZmlNa1dJMENtQkI2QUlBS2MzOEE5b3NFRmxUU0dFQ0InICtcbiAgICAnK2NiZVJEQzBhUnBMSHFOUHBsY0svNzZMeG4ycnBtcXlYc1lKV1JpL0ZRQUFBS0JRazlNQ0FPaWJyUUJRQURDRHNxcG9vUHV0ZCswNScgK1xuICAgICdDZTlnNmlFZGlZWGdWbVFBSTQrNHdza0VCRWlCbG9OUTZLaTAvS1RRMFFqV2ZqeHppK0FldVhLb01qRVZmUU9aenIweTk0MXFMZ00yJyArXG4gICAgJ0FFeHZiWk9xY3haNko2a3Jscmo0eTJqOUFkZ0tEeDZHbkpzVkxoYmM0MnVxNTg0K291U2ROQnBvQ2lDVkhyeitXelVBL0REdEQ4QVQnICtcbiAgICAnZ0EzaDBsTUNBQXpjRnYrUytmU1NOa2VZV2xUcGIzNG1mMlJmbXFxSmVNZWtsaEhBZnU3Vm9BRUFDZ0FBcEtSa3RMK0trUURXTXdZQycgK1xuICAgICdVQUFBQUhDS3NwODB4aHA5MVVqcVFCdzN4NDVjZXRxa2pRRXl1M0c5QjZOK1I2NTBVcThPVmlnN3dPbTZXdW4wZWE0bEtEUG9hYkpzJyArXG4gICAgJzZhTHFnYmhQenB2NEtSNGlPRGlsdzg4WnBZN3ExSU9NY2JBU0FPQVZ0bWNDbm9iY3JrRzRLR1M3L1puc2tWV1JORjlKMFJVSEtPbkInICtcbiAgICAneXk5V0E4RHY2TDRBQUFSTUNRVUE0R3JpdGZWTTJsY1pmSDNRM1Qvdlo0N0oyWUhoY21CYXpqZmR5dVYyNWdMQXpyYzBjd0FBQUFBWScgK1xuICAgICdDaDZQZHdBQUFHeVdqRlc0eVNjamFXYTJtR2NvZkh4V3hld0tBTGdsV0JwTFV2d3drK1VPaDVlTkd5VU9zMS9FRitwWnIrdWQ1T3pvJyArXG4gICAgJ0d3WWRBQUJnMnA1MkxpU2dBWS9aVmxPbWlsRWdIbjZHM09jd1lqekk3dk9qMXQ2eHN4NFMzbEJZOTZFVVFCRjZBSUJBbVBZSDRQb0cnICtcbiAgICAnWUNvSkFBRFdlK09aSlppNy94NzYveUg3THpmOU01WHpSS25GUG12ZU1zaWxRSHdWQUFBQUFLQjNMUUQ4UENJQUFBRGdhMFF1akJMeScgK1xuICAgICd3emVKNGE2Wi9FUlZCQVVsQUVEcXZvTTdCUUJBdUFndXpGcUlMdG1qSDNLZDR3ZktvYm5PaEEzejg1cVdvUlBtOWh3b09Ib0RBQWxDJyArXG4gICAgJ2J3REFBNTZGSEF1WGZsSG8zZmUydHRHOVhVRGVBOVltWUNCUTBvUHIvMVFDOEl2dUN3QUFBcGJVQVFDSzIyTW1FM083OFZBYkhRVDknICtcbiAgICAnUElQTm9UOXpOYzNsMk9lN1RBVkxBTkJ1ZlQ4TUFRQUFBR3pUNFBTOEFRQUFvRUxHSGIydWFDd3dFdjFFV2hGcmlVa2JBYUFaMjcvZicgK1xuICAgICdWWm5UWlhiV3ozQndXcGpVYU1aS1JqN2RaMEovL2dVZVRkcFZFd0FBWk9Gc054S0FqUVNnQStBQlBvWThKajV5MndqZTgxanNYYy8xJyArXG4gICAgJ1RPUVdURFlaQm1Ba05EaXFWd3VBMk5KOUFRQUFFQktBdDlWcnNmcy8yTjE5TU85MVM5cmQ4RUhUWkhuekM1TVltZlFFQUN5L0ZCY0EnICtcbiAgICAnQUFEQTVjNGdpNHo4UkFOcy9tNkZOWFZvOURWNDZKRzFCQkR1a3Fsdy9WYTVHN1FidUdWU0krMmFaYW9MWEpyZFZqMnpsQzlaNVFFQScgK1xuICAgICdFRnovNVF6Z1Zad0FBQUFBL29YY3h5QzZXZlR1KzA5VmUvYzc2Nko0VlRBR1VGbUE1MStWQU5LaS9RUG9Qd1lnWUFrQTcxNU9INFMwJyArXG4gICAgJ3M1S0RIdmo5OU1NcThUUEZjM3JvS1puR09vVDFibUloVmdjN1hBTUJBQUFBQU1BVzFWYlF3M2dhcHpPcEpkK0tkMmZjNGlTTzYyZkonICtcbiAgICAndjkrbW92dWkxd1VOUEFqMDU5TjNPVnh6azRnVjczUG1FOEZJQTJGNW1ScTM3RXZjNzZ2TFhmRjRyRDVVSkpBdzQ2aFc2TFpDYjVzTicgK1xuICAgICdMZHgra3pNQ0FBQitoZnk5NSs5NjVaQ0xQN0IzL1ZsVEhDdkRFS3RRaFRtNEtpQ2dBRUFicmZiV1RQc3NBQUFBWHBlZTF0VnJvellZJyArXG4gICAgJ240MXdEMWFlWXRrS2Zzd041L1NYUE8wSkRuaE8vNGxhVW9ydHYvczQxMmZ5YmUvbk9OZG5jb0NIbkJWbGl1MENRR0JXbFBZLzVLd28nICtcbiAgICAnbTJML2tydVBNNlE3b3o0dHZEUXkrYlozSHpPaStnTkhBNERaRWdBPScsXG4pO1xuXG5saWIucmVzb3VyY2UuYWRkKFxuICAnaHRlcm0vaW1hZ2VzL2ljb24tOTYnLFxuICAnaW1hZ2UvcG5nO2Jhc2U2NCcsXG4gICdpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBR0FBQUFCZ0NBWUFBQURpbUhjNEFBQVN0a2xFUVZSNDJ1MWRCWGpydXBMK1J6SUdtaklmJyArXG4gICAgJ3ZBY3U0Mk5tWnViM2xwbVptWm1abVJrdU16UERZYVl5SkcwU2E5YjJwMnoxZVF0cDdiemVmcHYvbktua2tTdzdHZzFJc2hOc0R0cG8nICtcbiAgICAnbzQwMjJtaWpEV3AvdGxUZ3picEpTcVl2TW9GVEM5dmpSRDVKTGI5UllhUmtwazIyU1MyOFA4cGFjQWFQZFo0MUtZTUNJODlZQjZ3TicgK1xuICAgICczSnpRSk0zVUlHcXVyZlRsS1FUQVp0cUVOaWQ1U2xOZFU4MDRWbWJiV1F0QTZITWtBQWRBRHNCZUFKN214d0loSWhGU1hKOWlSUHc0JyArXG4gICAgJ0pZREVjcW1HV0VwMUhoQ0k4Z0F0cFhGN3NjQjFaUkg5RTNIT2JBTkNOeTFBb0dUZWdORG5DZEU0MXRmUURIMnQrQ0lOUUVwSjlYcDknICtcbiAgICAnN29VRGgzK25YSzQ4RFlBTUlXUW1BTklrTlRuNnZQNjllM2QvemN0ZmV1MG5YTmV4bVZuM0YwZ0RBTXhNbEJvSHVodDBxbnNFRWVrQycgK1xuICAgICc0MlNkR0htTnhnVmpnazRiUE4wNFl1aThiaGM1MzRjUUJIMzVSS3JQTjlzR2RMbkIxL1d1ditIVzRmKzYvdFp2QkhBYUFKdm1LcjBBJyArXG4gICAgJ2pKR3Z5UU13OHBMcnJ2cWVUMzc4QXg4VXdyS2Vldm9GZ0VoZmpjR0dPMkpPK2l1VHQxU1c1REh6eXJhREV4eVRsV3dIakNRL0NBSmMnICtcbiAgICAnZWNVK1hIbjV4V0RtVkNHUUZBS2xqc0xieDhZbnZ2M0JoeDcvRVFDenVyaW1VMDRqQURMc3ZLM3I3My83VzEvL2cxLzZoVSsrdVZxdCcgK1xuICAgICcwWC9kY0JjS3hSSXN5OUppMzREUG93MmV0NkZ6Z2NYRktrNmZPWTgzdnU0VkVGS2tEaVlIQjNyb1N6NzNzYytPajA4ZU9IemsrQjlvJyArXG4gICAgJ015UUFCR2swZ0NJeU90OXhIUHZhRDMvd25ULzVWVi8rbWV1bXBtYndELzk4QTBxZHZWRUJOaHZNRENKYVZYdE0wMUd0VmxFcytMQnQnICtcbiAgICAnQzFuZ3pXOTh0WC9tN0xsdi9lbWYrODNIYXJYNnZicmZHRUNRUmdCbWxMUDlJeDk2MTQ5OSt6ZC81WFZqNDVQNDA3LzhGeFE3dWlHbCcgK1xuICAgICdRSzFXdzFaQ3ZSNmdYcTNBc2dROHp3WXpVa01JZ1hlKy9RMURkOXg1LzZkdXYvUCtSN1FqcHJRYUlIUWQvOG9yTHZuQ0p6LzIvcGZtJyArXG4gICAgJ2NqNys2cmYrREs1WGdPdTZzVDNkUXRCYXdxalc2bGhZWElSbFNUQWpFL1QzOWVMU1MvWmVFd3FnRThDaVlVVjR2UUlnVFVMVHlGdmUnICtcbiAgICAnOU9yM1dKWk4vM245SFRoM2ZnckZqaEptWm1hd0ZhR1V3a0psRWZmYzl4aDgzd01ZcWNGZzdOb3hpbncrbDlPQmlraXJBYWJ6N2VqdScgK1xuICAgICc2c3hKS1RFN1c0Ym41K0Q3UHJZbXRJL2dBRkphc0N3YjRJemFCTUh6WEU4TGdCSkM0STFHUVJLQWE0WG82dXBFc1ppSDUzbklSWUxlJyArXG4gICAgJ29sRE1DSUlxK25xNzBkRlJBR2NrZ0ZLcEFEK1VnQmFBZ2ZSUmtHdmJsaXdVY29oOEFCSEZZU2ZXTW5CcnhPekwxMlB3S3VmelN2VjUnICtcbiAgICAnNVRwbWk1YTBJQVNCUUNnV2N1anM3QUJuNUFRaWMrYjVyaE5sQVZBbVRsaVRFd25BOTkwd0l4RUVkVVFZbnhqSGlkTW5BVUljQllBQicgK1xuICAgICdScU5EZEM3Qk04dDBWdGZUbkdSZDhGS2RSSWpKY1ZsQ3NBYlBQQTVVQUs0clhMSmpQN2FOYmtPOVhvUHJPckVRV0hFbTY5S3VhMGNhJyArXG4gICAgJ1lFc3B2Q0JRNXRvU3A5RUFTQ2t0MjdaRjFQbEN4Qk9aT1BvNWZlWTBYcGc4akhlLzdWM1lOamhxakRSYWMzbU1WbDFPbzQwdnRSRXQnICtcbiAgICAnVysyRll3ZHcvUzAzWUhKNkVrT0RRMWhjWElRVWNhZUJsVUlXc0N3WitRRExkWnhjdWJLQXRCcGdObXpabGlVYTZ5TE1LaVJHb0JSMicgK1xuICAgICc3OXlONjY2NkZsSllBQmd2UmhBSW5jVVNIbi9pQ2RRckFaampTQWlLRlFRUlZFaFpJUkpBU0pFQUNJQ21sQUtRVXRxaEJFVGp3NWlqJyArXG4gICAgJ3VGcXI0b1dqQndIbUY3L2pWVUhjNmFSTlh4QW9aQTNQZFlYcnV2bGxkSmZUYUlBVGFRQTRLVS9Dek53TURwODRET1lYZitoWlhpaWonICtcbiAgICAnaEp6K0RLMFFBRWQrUllUT09BY2dNdzBnMjRvc2tOWUFJb0NYeERwYm5zT3hNOGZCNXFhY3dLWkQrM1dRY1MrVnhRcllZWE5WTkdNaCcgK1xuICAgICdJMW9kaUlSUVNIYjhCbWJDcGdaWWptVkxZaTBBTm14UU5LcE9qNTBGRk9CM1duRHpFcE9uRmtHYnVPWFBpbUc1QXAwakxxWk9MaUtvJyArXG4gICAgJ015SXNWaGZCOWxMRXBGU1ErUzI2amgyRm8vbjBZYWdSQ1VsTFJocEFBSU1JeVdsOXZCaW5Ba2Jmb0lQWGYrMHducmx4QXMvZFBJbksnICtcbiAgICAnVkIxQ1VPc0ZrZGhENk5ucDQ5b1A5OEV2V2Zqdm56cUdhazBoVmx3d0ZKc2FvQURLOXZxMlkwZU9PS1VHSkxUQWpqUWdGZ0JBeS9nVCcgK1xuICAgICd2YkdJeVhDMG5YNjZqSmQrWWdDN1gxbkNvMzkvQWNjZm1VVlFVMUY1eTBkOXJzdkdKVy90eHVYdjdvR3FNeDcrMi9Pb1Z4V0l6RTVTJyArXG4gICAgJ09rZmFCQkd5aEdQSGM0RzhZWWpUK3dETERnVWdKYlFQV0RHdUwwL1ZjZWZ2bk1MUkIyZHczVWY3OGRadjM0NUQ5MHpqc1grK2dQR2onICtcbiAgICAnQzdwZUM4eU5JN0RqcFNWY0U0NzZybEVQQisrYXdtUC9kQ0VhRU10cWJBUDFGcXpraG4wVmFVQWVnTXpBQkprYUlNRzhlcE5FaUUzUicgK1xuICAgICcwZnVuY2U3NU1pNE5SK01WNyszQjZOVUZQUG52WTNqdXBzbElTSmtLb1c5UERsZC9zQSs3WHQ2QjhTTVYzUGp6eDNEaTBUa0VOUWFKJyArXG4gICAgJzVBMXFNOFZSbGpLUGdwZzU4cGNOSHlDejBBRFNUbmhORFRCQmdsQ1pydVBodnorUFk0L000SnF3ZzY3NzJBQjJ2cXdEZC96bUtZd2QnICtcbiAgICAnV1FBSnBNYWxiK3ZHU3o4MUFBNkFoLzc2SEo2OUtmSTd0ZWo2SzdSUFVLd2FXUVQxRm1pQWxKRUp5a1haWmg1Y0UwMkZvYUVKa3BZRScgK1xuICAgICd3R3NLd05RR0FuRGhRQVVQLzkxNVRKNVl3UENsZVpTRzNXd1d2d2dZdnJ5QVlyOFRtNXduLzJNYzVjbTQ4MWM5UnpYV29iUVB5QnBTJyArXG4gICAgJ2lrZ0RHZ0pBVnZNQVJ6WTBBQVJ3YzdZNUNrbjN2SzRUVjcrL0Q1WW5jTitmbnNXcEorY2dzbkRJQ25qMG44NURTT0NTVUJPNlJsMDgnICtcbiAgICAnOGc4WGNPYlorVmdqU0t3ZUtSRzF4Z2NJRVFuQTlRRTQ2YU1nd3dsSEFtQnVPRkZlcGVNUmQ4ckkxY1U0RkJ6WW44ZXhoMmJ3NkQ5ZScgK1xuICAgICd3TmloQ2pnclIwd0kyMXZBemI5eUlyVC9wZmhhNy95K25Yais1Z2s4RVdyRHpKbEYvV3hRVWdNVXdFdFJFR1cvNVJscGdKZGFBQnEwJyArXG4gICAgJ3BBR2ljWUZWRmFCenhNR1Y3K3ZGdnRkM1lmcHNGYmYrNm9rNEtxb3Z4cUZvcGgrWUJCQXNNZzdjUG9uVFQ4M2pzbmQyNDdKMzlJUVInICtcbiAgICAnVVVjY2VSMjhjeHJWY3JCVVgyc0FhMU5hcjdkQ0F3aGV2Q2tETjdVQURCOWdTeUVCYUJWWVllVDM3UFR3OXUvYUFiY2c4UGkvWE1BeicgK1xuICAgICcxMDlnZnFMaEZBa3RnWDQ2TGJyT2czOTVEc2NlbUFuRDBYNjgrc3VHUSszTDRZN2ZPaFZIUkEwMG5EQlJhM3dBRUd1QUE4RGJxQUJJJyArXG4gICAgJ2t5RUEyeEZTckJISE0yeGY0T3p6ODJISU9iNWtiZ1NoMVREdjY5d0xaZHowUzhkeFVUZ1JITHdrRDJIUmtnQ0lkQmk2TkJQbVZwZ2cnICtcbiAgICAnTDdrckJrcm5BNnhJQTBRamZsNHg5Qnc3WEluRHpIbzFoYmxKYlpZb05rdlAzenFGdy9mUElLZ3FHTkM3YU5vRXRVUURFSmtnMjNFYycgK1xuICAgICd2MXF0cmhrRmlXWWVUWXpDVUNFRWVJMTVRRFRTZ2pwbk1lclRteVVCMUNzS3JHQUN5dkFCUWIxVkFuQXQxM1Y4TkFIUnhHcW90RU1JJyArXG4gICAgJ1FVYkpGZ0d0TWhOdXFRYTRVaTlIYkVnREtGa25pb0tJaEM0a2JHVXdGQmhzT0dITy9BcWhDeEFoNWRPc0JaRkJNb3FDR2hwQVJKdjcnICtcbiAgICAnaWh1bDM1b0V0ODRFNlUwWkN2MUFQcDBUMXRBQ3NJaEVwcXVaUWhKc1QyQzlVQUdqdHFBMnZEblB6T0QvTlVFcXltY09KOTRUY1BKWicgK1xuICAgICd6WVNGSFlLSWpIbEEraVhrL2t2eWVPMVhERU5ZdEs2SjE2a241M0gzNzUrT0JiRnVrQmtGdFdvZXdIQWRKMXFRS3dBUVdjeUV0UWFRJyArXG4gICAgJzRRUFNtazZLWjZnWERsVkFjbjB4OXZUcHhUU2pkaGtCY09ZbVNPK0tOVFpsS0swR1dIWW9BU0prWm9KSUFCUEhGbkRiYjV6RUZ4dHMnICtcbiAgICAnaHFFdE1rRzJyZmNFdEFac0pBb2ltQnBnR1JxZzA2MktWbXNBbUJIMlYyTmZXS1oxd294WUF5SUJ3RkFCWG1hK25FMzB3eXRWNHJVLycgK1xuICAgICdPSzl4TFdhR1VtcEpBSEUrYXdFRFVzckdub0NFUnNvb3lKWUFMZlBhT0VITkJ5Qmw3Qkd3S1FzeThrWUxVWjFrT1RYeVpwcmdVWUpIJyArXG4gICAgJ1NCenJjdExIRFo2aHVmbENMdDYxcXRXRFdBTWF3c2dPV2dDZTUrditKWU40dlQ2QXRBYklwU0NJR3VFY1JvYUc4VHJYUmN3ekNlWjcnICtcbiAgICAndTJnY200UUlabjBRRXVkQzV3R1lkWXhVdDJQeWpSU0F5V3NjNm12VzZoVzBDbnBYekFkZ1E2TlpBZEJ5SnNnS0JRQVFHQ3Arb1FGUScgK1xuICAgICc4ZVBkaFVJQnhXSnhYZnJKWUtRSE5SVU1NSzlrdXdoemMzTzRlTytlZUxRcXBiTGZGZk1hQWdBbmhkRGNjclNwQVpZdEFVQXB4dWpJJyArXG4gICAgJ0VONzI1bGZnMy8vN2J2VDE5Y095TEpoZzQ0L1pDVG8xeTQweUk3OXFtVDQvNXVuMmpUeDArWEx0bUFPQWxVSlhWeDZ2ZTgzTGRGa3InICtcbiAgICAnZHNXTVRaa1VUcGlrakZ5QUpVeEhGcjZvRGM5MThjRERUNkt5TUI4eHpWRnBtQnBBR0daSGlDZ1ZaZ29ScGhTbFFrQ1FUdlh4RWhGaycgK1xuICAgICdsTW9sWG55c2VZMjhOTXRsSWpYYUN6c0hPN2FQb0ZESVE2bldDTUR6WFMyQWRKdnliTWw0SGlhU0x5Szg5UzJ2eFJ0ZS93clU2dlhHJyArXG4gICAgJ0lGcnpPeGRXVFpjYU1OdENncTE1YTl2TnRXeVRNalVuY3dFZ3VTdTJJU2VzTzN2cDNZRGtFMlpTeXBpeVFNTzBKTzMzMWdURnJ5b0onICtcbiAgICAnSVh5bFZMckZPQ3RFcEFIbWFHNWpiUTNRYjhyNDVYS0ZOMnFDT0NKcFNVc3hpL241U2xPUDhyWEIwV3BvVWdDOEhnR3dRWXFJN0FNSCcgK1xuICAgICdqMUc5emsyRWEyMHdnSTVpUGhxczhkTWs2LzI2R3JPeWlxaGFyYzE2bmxmZnZuM0VhV3RBYy9CY0J3OCsvT2pjK1Bqa0thTXZ1V2tOJyArXG4gICAgJ01FK1luWjE3K3JubkR4d2VIT2k5aUNNK2d6YkxPWExyRzhwaXU0NkpJTzUvNE5IRDlYcHdiRVBmRXFqSjAxUjBYZWNEWWN6OGx2aEYnICtcbiAgICAnTVNFa3dKSUJhVTc2QVpBK1NzU1Q1b0hPbWlkcXZzSFFpZVlrNnlhL3VjeXNUL3BQb242eUx1bS81dFhONHVWNDVvY0FLSEVlV0ZkUScgK1xuICAgICdZY3BLS2I0d05uSC94TVRVandHWUFyQm9mTEhmdWhmamVPK2VYYnUrL21zKzk0Nkp5V2wxNk5BeFdtVjgwQVpHSW1XK00wei9keFdVJyArXG4gICAgJ05idkpOUXphcU5LNHJvMTN2L05OOUMvL2RvUDRnei8rbXhLQVdXTlFiMmhIekwvczBuMVhEZlQzVzNmZTh3UkFWbUx5dENFNTZITTMnICtcbiAgICAnTEwvRStiUnFiK25pRlo5clN2RDBubkh6ZDJZK00zdnM1Q2t3Yy9TOVFRTUFCZ0djMGN2UzlmVThtaWdpMHVVRGV5N2FzZnZRNGVNUScgK1xuICAgICdsb3V1enM3NEFtMHNMNFRaUWhISFRwekc4RkIvcWRSUjNEVTlNL3NVZ0pxbXBoZmpoSmFhOUgxdjkvWnR3LzFQUG4wUXRXb05zN096JyArXG4gICAgJ1dCbHRBVGlPaXhNbnp1Q1MvYnZ0Z1RCd0NRWGc2czVmTkxkVG1ua3VTQUt3dzBXclM3cTZTdDdFNUF4NmVnYldXSHBvdzNFY25Ecy8nICtcbiAgICAnRVg4djZmRHc0SjRYRGh6eEFTd0FFT3ZTQUYyV3UyajNqc3NBUXFWU1E2K1VMVFEvVzMrcFF5L2RZSGF1RWk5U2Joc2QyZ0dncUIyeCcgK1xuICAgICdCRUROK2dDcHkzckNDR2pQNU9RMEZITzBpZEdlRFRleEhSa294dmpFSkhac0d4a0UwQVBnbk81VFljNngxaEtBSUtKdHUzZHRHenAxJyArXG4gICAgJytoeUt4WTVvQjZ3cERXaWJJUmVuVHAzRDZPaFFsNVJ5TUFpQzV3MFRSQ3RwQUNXK3JNOGFHUjdjUHpUWVgzemlxUVB3L2R6bW00Z3QnICtcbiAgICAnWU9hWUdaN240Y1RKczNqVks2N3h3KytsMjM3MjNBVnRVUkxoYUZJREV1R25HNDcrUzMzZm84bXBXWlE2WFV4UFQ2T050ZmVEN2RnUicgK1xuICAgICdqNk5ReU5IUTBNQ09VQUEyQU5tTUJwQWhoR0pvLy9lRnk2bGdGc2puODIzenN3NmNuaHlIVWh3NzRrY2ZlOG96Zk1DS0Frak9BWWIyJyArXG4gICAgJzd0azVjdWJzQlRpdUYzdjM1aDF3Mnh3cFJtZ3hackJqKy9BSWdBNEFZN3Bmc1pZR3lJaTZ1enYzaEhPQXJvY2VmUWJNd05UVVZGc0QnICtcbiAgICAnbWpkRElVbWNEZ2Z2Nk9od0g0Q0lqaWUwZ0pmVkFGM0oyYlZqV3pnQjY1VG5MMHlnczdOcm5ST3d0aFpVcXpXY1BIVU9WMXkydHhpdScgK1xuICAgICdKQS9QemMwL3NwWUpFb2I1eWUvWnMvTmlaa2E1WEVWUHI0ODIxZ2ZQOXhBTjNuQTl5QjRjNk50K2NHNWVMdlBHRENkTlVLTlM3NzY5JyArXG4gICAgJ3UzWkdYMU5mcXdmUitzLy9DL1BEbkg1VFJxK2t4dW44ZkJrZHhRSkdoZ2QySGp4MDFCQkF3Z1FsN0wvSTVmeWQ0UkpFMytUVWROakknICtcbiAgICAnUEtTYzBBSmcvVCtKeE5Obks1VWx5M1Z1dGVySk9wemgzaG10czVEV0tFeHkzL2o2bDJKNGVBQWpJNFBiakc5VUY2WVFyTWFCV1JDdScgK1xuICAgICdmdTRmSFJuMEJ2cDdVU3prVVM0dm1EOWFzK0lQM2NTSFdMNWVYR1RVaXprNnYvSUR1Ym9kTTcrKytxcytFTmJzZzJSeExsRS81cHIxJyArXG4gICAgJ0V3OEgyNWFGbnA2dTJDRnZHeDBlMEpIUUdkTUVKVFdna1RvN2Q0eGUzTmZYZzFLcGlMZTg2VFdnOU9OdGMzZUt1VlgzeWF0ZWk1bTEnICtcbiAgICAnQUlhNnBSVDlRYUNlYjJZcG9yQnp4N1pkMGNoblJrZ0tiYVNMc01MWmNLNi9yemVjVTUzbjVUU0FFa3cvSFBrRnk4NkJwSnRxM0xSQicgK1xuICAgICdJSzZqcTdORGhQT3FQaTBBMCtjdXV4cTZFTWFzNWJHSmFWUVdGV2dUYnJxVlRkRVg5ZjRadm1mQjkvM0lsNWJXMmhObW5aYkRCNG9tJyArXG4gICAgJ0xwdy9oN241UllDYSszRTBUb1k0SnA5WGlHU1lrL1dNdkhtbHhERW43eU41ZmZONG1UenJNODA4RyswbGVKcVZiRzgxbmpiZmpGSkgnICtcbiAgICAnSHI0bm80bFozZmpSVDA2R29XeFErZUZIbjdyVHovMVR2NVFTckJRcFpyQW1mVk1hUUp5Tk9YSE9QRVNqenRKZnM1NHV4RkpXbDVxMScgK1xuICAgICd6WXVaUnpEK1J6QVBFdWZvSkZsbjJUeU12OGF4d1VoZUpQR1JWU01GRUhlNFpja3FNeThjT1hMaW41Zjd4VlV5eVB5cHdoS0FIcDEzJyArXG4gICAgJ0lqSkNWVzRpSEdBejMwUTVtbXgzSStkd3l2YldFMzZ4MGNrMUFGVzlHYitnMDZxbVdrTVFWdUxFUUV0dVZsZHlqUi92RkpxeWp4TmInICtcbiAgICAnNittVEE2RFY5NkhNdmt4MGVqMnBBWlp4b0JMNVFKOG9ES0lXM2p4bmZBNXR3ajF4VWhQTWpqZDl3R3BPT0VnSWdVemF4Rkc4Ulo0RicgK1xuICAgICdUZ3hvczlOMWF0YWp0ZCtTMUx5dEEyNnA4TktiUUU3LzArQnRwTmFrTnRwb280MDIydmdmN2xSUHRLQ0UzOW9BQUFBQVNVVk9SSzVDJyArXG4gICAgJ1lJST0nLFxuKTtcblxubGliLnJlc291cmNlLmFkZChcbiAgJ2h0ZXJtL2NvbmNhdC9kYXRlJyxcbiAgJ3RleHQvcGxhaW4nLFxuICAnTW9uLCAyNiBOb3YgMjAxOCAwODo1MDowOSArMDAwMCcsXG4pO1xuXG5saWIucmVzb3VyY2UuYWRkKCdodGVybS9jaGFuZ2Vsb2cvdmVyc2lvbicsICd0ZXh0L3BsYWluJywgJzIwMTgtMTAtMjQnKTtcblxubGliLnJlc291cmNlLmFkZCgnaHRlcm0vY2hhbmdlbG9nL2RhdGUnLCAndGV4dC9wbGFpbicsICcxLjgyJyk7XG5cbmxpYi5yZXNvdXJjZS5hZGQoXG4gICdodGVybS9naXQvSEVBRCcsXG4gICd0ZXh0L3BsYWluJyxcbiAgJzAzZWUwOTgwNDQ0YTM4YTk3ZWY5NDdiMjI3MmU0NGZkYjNiZGY1ZjUnLFxuKTtcblxuLy8gVGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgbGliZG90L2Jpbi9jb25jYXQuc2guXG4vLyBJdCBoYXMgYmVlbiBtYXJrZWQgcmVhZC1vbmx5IGZvciB5b3VyIHNhZmV0eS4gIFJhdGhlciB0aGFuXG4vLyBlZGl0IGl0IGRpcmVjdGx5LCBwbGVhc2UgbW9kaWZ5IG9uZSBvZiB0aGVzZSBzb3VyY2UgZmlsZXMuXG4vL1xuLy8gaHRlcm0vanMvaHRlcm0uanNcbi8vIGh0ZXJtL2pzL2h0ZXJtX2FjY2Vzc2liaWxpdHlfcmVhZGVyLmpzXG4vLyBodGVybS9qcy9odGVybV9jb250ZXh0bWVudS5qc1xuLy8gaHRlcm0vanMvaHRlcm1fZnJhbWUuanNcbi8vIGh0ZXJtL2pzL2h0ZXJtX2tleWJvYXJkLmpzXG4vLyBodGVybS9qcy9odGVybV9rZXlib2FyZF9iaW5kaW5ncy5qc1xuLy8gaHRlcm0vanMvaHRlcm1fa2V5Ym9hcmRfa2V5bWFwLmpzXG4vLyBodGVybS9qcy9odGVybV9rZXlib2FyZF9rZXlwYXR0ZXJuLmpzXG4vLyBodGVybS9qcy9odGVybV9vcHRpb25zLmpzXG4vLyBodGVybS9qcy9odGVybV9wYXJzZXIuanNcbi8vIGh0ZXJtL2pzL2h0ZXJtX3BhcnNlcl9pZGVudGlmaWVycy5qc1xuLy8gaHRlcm0vanMvaHRlcm1fcHJlZmVyZW5jZV9tYW5hZ2VyLmpzXG4vLyBodGVybS9qcy9odGVybV9wdWJzdWIuanNcbi8vIGh0ZXJtL2pzL2h0ZXJtX3NjcmVlbi5qc1xuLy8gaHRlcm0vanMvaHRlcm1fc2Nyb2xscG9ydC5qc1xuLy8gaHRlcm0vanMvaHRlcm1fdGVybWluYWwuanNcbi8vIGh0ZXJtL2pzL2h0ZXJtX3Rlcm1pbmFsX2lvLmpzXG4vLyBodGVybS9qcy9odGVybV90ZXh0X2F0dHJpYnV0ZXMuanNcbi8vIGh0ZXJtL2pzL2h0ZXJtX3Z0LmpzXG4vLyBodGVybS9qcy9odGVybV92dF9jaGFyYWN0ZXJfbWFwLmpzXG4vLyBodGVybS9hdWRpby9iZWxsLm9nZ1xuLy8gaHRlcm0vaW1hZ2VzL2ljb24tOTYucG5nXG5cbigndXNlIHN0cmljdCcpO1xuXG4vLyBTT1VSQ0UgRklMRTogaHRlcm0vanMvaHRlcm0uanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxpYi5ydGRlcCgnbGliLlN0b3JhZ2UnKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IERlY2xhcmVzIHRoZSBodGVybS4qIG5hbWVzcGFjZSBhbmQgc29tZSBiYXNpYyBzaGFyZWQgdXRpbGl0aWVzXG4gKiB0aGF0IGFyZSB0b28gc21hbGwgdG8gZGVzZXJ2ZSBkZWRpY2F0ZWQgZmlsZXMuXG4gKi9cbmV4cG9ydCB2YXIgaHRlcm0gPSB7fTtcblxuLyoqXG4gKiBUaGUgdHlwZSBvZiB3aW5kb3cgaG9zdGluZyBodGVybS5cbiAqXG4gKiBUaGlzIGlzIHNldCBhcyBwYXJ0IG9mIGh0ZXJtLmluaXQoKS4gIFRoZSB2YWx1ZSBpcyBpbnZhbGlkIHVudGlsXG4gKiBpbml0aWFsaXphdGlvbiBjb21wbGV0ZXMuXG4gKi9cbmh0ZXJtLndpbmRvd1R5cGUgPSBudWxsO1xuXG4vKipcbiAqIFRoZSBPUyB3ZSdyZSBydW5uaW5nIHVuZGVyLlxuICpcbiAqIFVzZWQgd2hlbiBzZXR0aW5nIHVwIE9TLXNwZWNpZmljIGJlaGF2aW9ycy5cbiAqXG4gKiBUaGlzIGlzIHNldCBhcyBwYXJ0IG9mIGh0ZXJtLmluaXQoKS4gIFRoZSB2YWx1ZSBpcyBpbnZhbGlkIHVudGlsXG4gKiBpbml0aWFsaXphdGlvbiBjb21wbGV0ZXMuXG4gKi9cbmh0ZXJtLm9zID0gbnVsbDtcblxuLyoqXG4gKiBXYXJuaW5nIG1lc3NhZ2UgdG8gZGlzcGxheSBpbiB0aGUgdGVybWluYWwgd2hlbiBicm93c2VyIHpvb20gaXMgZW5hYmxlZC5cbiAqXG4gKiBZb3UgY2FuIHJlcGxhY2UgaXQgd2l0aCB5b3VyIG93biBsb2NhbGl6ZWQgbWVzc2FnZS5cbiAqL1xuaHRlcm0uem9vbVdhcm5pbmdNZXNzYWdlID0gJ1pPT00gIT0gMTAwJSc7XG5cbi8qKlxuICogQnJpZWYgb3ZlcmxheSBtZXNzYWdlIGRpc3BsYXllZCB3aGVuIHRleHQgaXMgY29waWVkIHRvIHRoZSBjbGlwYm9hcmQuXG4gKlxuICogQnkgZGVmYXVsdCBpdCBpcyB0aGUgdW5pY29kZSBCTEFDSyBTQ0lTU09SUyBjaGFyYWN0ZXIsIGJ1dCB5b3UgY2FuXG4gKiByZXBsYWNlIGl0IHdpdGggeW91ciBvd24gbG9jYWxpemVkIG1lc3NhZ2UuXG4gKlxuICogVGhpcyBpcyBvbmx5IGRpc3BsYXllZCB3aGVuIHRoZSAnZW5hYmxlLWNsaXBib2FyZC1ub3RpY2UnIHByZWZlcmVuY2VcbiAqIGlzIGVuYWJsZWQuXG4gKi9cbmh0ZXJtLm5vdGlmeUNvcHlNZXNzYWdlID0gJ1xcdTI3MDInO1xuXG4vKipcbiAqIFRleHQgc2hvd24gaW4gYSBkZXNrdG9wIG5vdGlmaWNhdGlvbiBmb3IgdGhlIHRlcm1pbmFsXG4gKiBiZWxsLiAgXFx1MjI2YSBpcyBhIHVuaWNvZGUgRUlHSFRIIE5PVEUsICUodGl0bGUpIHdpbGxcbiAqIGJlIHJlcGxhY2VkIGJ5IHRoZSB0ZXJtaW5hbCB0aXRsZS5cbiAqL1xuaHRlcm0uZGVza3RvcE5vdGlmaWNhdGlvblRpdGxlID0gJ1xcdTI2NkEgJSh0aXRsZSkgXFx1MjY2QSc7XG5cbi8qKlxuICogTGlzdCBvZiBrbm93biBodGVybSB0ZXN0IHN1aXRlcy5cbiAqXG4gKiBBIHRlc3QgaGFybmVzcyBzaG91bGQgZW5zdXJlIHRoYXQgdGhleSBhbGwgZXhpc3QgYmVmb3JlIHJ1bm5pbmcuXG4gKi9cbmh0ZXJtLnRlc3REZXBzID0gW1xuICAnaHRlcm0uQWNjZXNzaWJpbGl0eVJlYWRlci5UZXN0cycsXG4gICdodGVybS5TY3JvbGxQb3J0LlRlc3RzJyxcbiAgJ2h0ZXJtLlNjcmVlbi5UZXN0cycsXG4gICdodGVybS5UZXJtaW5hbC5UZXN0cycsXG4gICdodGVybS5WVC5UZXN0cycsXG4gICdodGVybS5WVC5DYW5uZWRUZXN0cycsXG5dO1xuXG4vKipcbiAqIFRoZSBodGVybSBpbml0IGZ1bmN0aW9uLCByZWdpc3RlcmVkIHdpdGggbGliLnJlZ2lzdGVySW5pdCgpLlxuICpcbiAqIFRoaXMgaXMgY2FsbGVkIGR1cmluZyBsaWIuaW5pdCgpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uSW5pdCBUaGUgZnVuY3Rpb24gbGliLmluaXQoKSB3YW50cyB1cyB0byBpbnZva2Ugd2hlblxuICogICAgIGluaXRpYWxpemF0aW9uIGlzIGNvbXBsZXRlLlxuICovXG5saWIucmVnaXN0ZXJJbml0KCdodGVybScsIGZ1bmN0aW9uKG9uSW5pdCkge1xuICBmdW5jdGlvbiBpbml0T3Mob3MpIHtcbiAgICBodGVybS5vcyA9IG9zO1xuXG4gICAgb25Jbml0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0TWVzc2FnZU1hbmFnZXIoKSB7XG4gICAgbGliLmkxOG4uZ2V0QWNjZXB0TGFuZ3VhZ2VzKGxhbmd1YWdlcyA9PiB7XG4gICAgICBpZiAoIWh0ZXJtLm1lc3NhZ2VNYW5hZ2VyKVxuICAgICAgICBodGVybS5tZXNzYWdlTWFuYWdlciA9IG5ldyBsaWIuTWVzc2FnZU1hbmFnZXIobGFuZ3VhZ2VzKTtcblxuICAgICAgLy8gSWYgT1MgZGV0ZWN0aW9uIGZhaWxzLCB0aGVuIHdlJ2xsIHN0aWxsIHNldCB0aGUgdmFsdWUgdG8gc29tZXRoaW5nLlxuICAgICAgLy8gVGhlIE9TIGxvZ2ljIGluIGh0ZXJtIHRlbmRzIHRvIGJlIGJlc3QgZWZmb3J0IGFueXdheXMuXG4gICAgICBsaWIuZlxuICAgICAgICAuZ2V0T3MoKVxuICAgICAgICAudGhlbihpbml0T3MpXG4gICAgICAgIC5jYXRjaChpbml0T3MpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25XaW5kb3cod2luZG93KSB7XG4gICAgaHRlcm0ud2luZG93VHlwZSA9IHdpbmRvdy50eXBlO1xuICAgIGluaXRNZXNzYWdlTWFuYWdlcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25UYWIodGFiKSB7XG4gICAgaWYgKHRhYiAmJiB3aW5kb3cuY2hyb21lKSB7XG4gICAgICBjaHJvbWUud2luZG93cy5nZXQodGFiLndpbmRvd0lkLCBudWxsLCBvbldpbmRvdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE8ocmdpbmRhKTogVGhpcyBpcyB3aGVyZSB3ZSBlbmQgdXAgZm9yIGEgdjEgYXBwJ3MgYmFja2dyb3VuZCBwYWdlLlxuICAgICAgLy8gTWF5YmUgd2luZG93VHlwZSA9ICdub25lJyB3b3VsZCBiZSBtb3JlIGFwcHJvcHJpYXRlLCBvciBzb21ldGhpbmcuXG4gICAgICBodGVybS53aW5kb3dUeXBlID0gJ25vcm1hbCc7XG4gICAgICBpbml0TWVzc2FnZU1hbmFnZXIoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWh0ZXJtLmRlZmF1bHRTdG9yYWdlKSB7XG4gICAgaWYgKHdpbmRvdy5jaHJvbWUgJiYgY2hyb21lLnN0b3JhZ2UgJiYgY2hyb21lLnN0b3JhZ2Uuc3luYykge1xuICAgICAgaHRlcm0uZGVmYXVsdFN0b3JhZ2UgPSBuZXcgbGliLlN0b3JhZ2UuQ2hyb21lKGNocm9tZS5zdG9yYWdlLnN5bmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBodGVybS5kZWZhdWx0U3RvcmFnZSA9IG5ldyBsaWIuU3RvcmFnZS5Mb2NhbCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRoZSBjaHJvbWUudGFicyBBUEkgaXMgbm90IHN1cHBvcnRlZCBpbiBwYWNrYWdlZCBhcHBzLCBhbmQgZGV0ZWN0aW5nIGlmXG4gIC8vIHlvdSdyZSBhIHBhY2thZ2VkIGFwcCBpcyBhIGxpdHRsZSBhd2t3YXJkLlxuICB2YXIgaXNQYWNrYWdlZEFwcCA9IGZhbHNlO1xuICBpZiAod2luZG93LmNocm9tZSAmJiBjaHJvbWUucnVudGltZSAmJiBjaHJvbWUucnVudGltZS5nZXRNYW5pZmVzdCkge1xuICAgIHZhciBtYW5pZmVzdCA9IGNocm9tZS5ydW50aW1lLmdldE1hbmlmZXN0KCk7XG4gICAgaXNQYWNrYWdlZEFwcCA9IG1hbmlmZXN0LmFwcCAmJiBtYW5pZmVzdC5hcHAuYmFja2dyb3VuZDtcbiAgfVxuXG4gIGlmIChpc1BhY2thZ2VkQXBwKSB7XG4gICAgLy8gUGFja2FnZWQgYXBwcyBhcmUgbmV2ZXIgZGlzcGxheWVkIGluIGJyb3dzZXIgdGFicy5cbiAgICBzZXRUaW1lb3V0KG9uV2luZG93LmJpbmQobnVsbCwgeyB0eXBlOiAncG9wdXAnIH0pLCAwKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAod2luZG93LmNocm9tZSAmJiBjaHJvbWUudGFicykge1xuICAgICAgLy8gVGhlIGdldEN1cnJlbnQgbWV0aG9kIGdldHMgdGhlIHRhYiB0aGF0IGlzIFwiY3VycmVudGx5IHJ1bm5pbmdcIiwgbm90IHRoZVxuICAgICAgLy8gdG9wbW9zdCBvciBmb2N1c2VkIHRhYi5cbiAgICAgIGNocm9tZS50YWJzLmdldEN1cnJlbnQob25UYWIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KG9uV2luZG93LmJpbmQobnVsbCwgeyB0eXBlOiAnbm9ybWFsJyB9KSwgMCk7XG4gICAgfVxuICB9XG59KTtcblxuLyoqXG4gKiBSZXR1cm4gZGVjaW1hbCB7IHdpZHRoLCBoZWlnaHQgfSBmb3IgYSBnaXZlbiBkb20gbm9kZS5cbiAqL1xuaHRlcm0uZ2V0Q2xpZW50U2l6ZSA9IGZ1bmN0aW9uKGRvbSkge1xuICByZXR1cm4gZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gZGVjaW1hbCB3aWR0aCBmb3IgYSBnaXZlbiBkb20gbm9kZS5cbiAqL1xuaHRlcm0uZ2V0Q2xpZW50V2lkdGggPSBmdW5jdGlvbihkb20pIHtcbiAgcmV0dXJuIGRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbn07XG5cbi8qKlxuICogUmV0dXJuIGRlY2ltYWwgaGVpZ2h0IGZvciBhIGdpdmVuIGRvbSBub2RlLlxuICovXG5odGVybS5nZXRDbGllbnRIZWlnaHQgPSBmdW5jdGlvbihkb20pIHtcbiAgcmV0dXJuIGRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG59O1xuXG4vKipcbiAqIENvcHkgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHRvIHRoZSBzeXN0ZW0gY2xpcGJvYXJkLlxuICpcbiAqIEBwYXJhbSB7SFRNTERvY3VtZW50fSBUaGUgZG9jdW1lbnQgd2l0aCB0aGUgc2VsZWN0aW9uIHRvIGNvcHkuXG4gKi9cbmh0ZXJtLmNvcHlTZWxlY3Rpb25Ub0NsaXBib2FyZCA9IGZ1bmN0aW9uKGRvY3VtZW50KSB7XG4gIHRyeSB7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcbiAgfSBjYXRjaCAoZmlyZWZveEV4Y2VwdGlvbikge1xuICAgIC8vIElnbm9yZSB0aGlzLiBGRiB0aHJvd3MgYW4gZXhjZXB0aW9uIGlmIHRoZXJlIHdhcyBhbiBlcnJvciwgZXZlbiB0aG91Z2hcbiAgICAvLyB0aGUgc3BlYyBzYXlzIGp1c3QgcmV0dXJuIGZhbHNlLlxuICB9XG59O1xuXG4vKipcbiAqIFBhc3RlIHRoZSBzeXN0ZW0gY2xpcGJvYXJkIGludG8gdGhlIGVsZW1lbnQgd2l0aCBmb2N1cy5cbiAqXG4gKiBOb3RlOiBJbiBDaHJvbWUvRmlyZWZveCBhcHAvZXh0ZW5zaW9uIGVudmlyb25tZW50cywgeW91J2xsIG5lZWQgdGhlXG4gKiBcImNsaXBib2FyZFJlYWRcIiBwZXJtaXNzaW9uLiAgSW4gb3RoZXIgZW52aXJvbm1lbnRzLCB0aGlzIG1pZ2h0IGFsd2F5c1xuICogZmFpbCBhcyB0aGUgYnJvd3NlciBmcmVxdWVudGx5IGJsb2NrcyBhY2Nlc3MgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXG4gKlxuICogQHBhcmFtIHtIVE1MRG9jdW1lbnR9IFRoZSBkb2N1bWVudCB0byBwYXN0ZSBpbnRvLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGFzdGUgc3VjY2VlZGVkLlxuICovXG5odGVybS5wYXN0ZUZyb21DbGlwYm9hcmQgPSBmdW5jdGlvbihkb2N1bWVudCkge1xuICB0cnkge1xuICAgIHJldHVybiBkb2N1bWVudC5leGVjQ29tbWFuZCgncGFzdGUnKTtcbiAgfSBjYXRjaCAoZmlyZWZveEV4Y2VwdGlvbikge1xuICAgIC8vIElnbm9yZSB0aGlzLiAgRkYgNDAgYW5kIG9sZGVyIHdvdWxkIGluY29ycmVjdGx5IHRocm93IGFuIGV4Y2VwdGlvbiBpZlxuICAgIC8vIHRoZXJlIHdhcyBhbiBlcnJvciBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZS5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJuIGEgZm9ybWF0dGVkIG1lc3NhZ2UgaW4gdGhlIGN1cnJlbnQgbG9jYWxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBtZXNzYWdlIHRvIHJldHVybi5cbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPj19IGFyZ3MgVGhlIG1lc3NhZ2UgYXJndW1lbnRzLCBpZiByZXF1aXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gc3RyaW5nIFRoZSBkZWZhdWx0IG1lc3NhZ2UgdGV4dC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGxvY2FsaXplZCBtZXNzYWdlLlxuICovXG5odGVybS5tc2cgPSBmdW5jdGlvbihuYW1lLCBhcmdzID0gW10sIHN0cmluZykge1xuICByZXR1cm4gaHRlcm0ubWVzc2FnZU1hbmFnZXIuZ2V0KCdIVEVSTV8nICsgbmFtZSwgYXJncywgc3RyaW5nKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG5vdGlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIFZhcmlvdXMgcGFyYW1ldGVycyBmb3IgdGhlIG5vdGlmaWNhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMudGl0bGUgVGhlIHRpdGxlIChkZWZhdWx0cyB0byB0aGUgd2luZG93J3MgdGl0bGUpLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5ib2R5IFRoZSBtZXNzYWdlIGJvZHkgKG1haW4gdGV4dCkuXG4gKi9cbmh0ZXJtLm5vdGlmeSA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICB2YXIgZGVmID0gKGN1cnIsIGZhbGxiYWNrKSA9PiAoY3VyciAhPT0gdW5kZWZpbmVkID8gY3VyciA6IGZhbGxiYWNrKTtcbiAgaWYgKHBhcmFtcyA9PT0gdW5kZWZpbmVkIHx8IHBhcmFtcyA9PT0gbnVsbCkgcGFyYW1zID0ge307XG5cbiAgLy8gTWVyZ2UgdGhlIHVzZXIncyBjaG9pY2VzIHdpdGggdGhlIGRlZmF1bHQgc2V0dGluZ3MuICBXZSBkb24ndCB0YWtlIGl0XG4gIC8vIGRpcmVjdGx5IGluIGNhc2UgaXQgd2FzIHN0dWZmZWQgd2l0aCBleGNlc3MganVuay5cbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgYm9keTogcGFyYW1zLmJvZHksXG4gICAgaWNvbjogZGVmKHBhcmFtcy5pY29uLCBsaWIucmVzb3VyY2UuZ2V0RGF0YVVybCgnaHRlcm0vaW1hZ2VzL2ljb24tOTYnKSksXG4gIH07XG5cbiAgdmFyIHRpdGxlID0gZGVmKHBhcmFtcy50aXRsZSwgd2luZG93LmRvY3VtZW50LnRpdGxlKTtcbiAgaWYgKCF0aXRsZSkgdGl0bGUgPSAnaHRlcm0nO1xuICB0aXRsZSA9IGxpYi5mLnJlcGxhY2VWYXJzKGh0ZXJtLmRlc2t0b3BOb3RpZmljYXRpb25UaXRsZSwgeyB0aXRsZTogdGl0bGUgfSk7XG5cbiAgdmFyIG4gPSBuZXcgTm90aWZpY2F0aW9uKHRpdGxlLCBvcHRpb25zKTtcbiAgbi5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgd2luZG93LmZvY3VzKCk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9O1xuICByZXR1cm4gbjtcbn07XG5cbi8qKlxuICogTGF1bmNoZXMgdXJsIGluIGEgbmV3IHRhYi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTCB0byBsYXVuY2ggaW4gYSBuZXcgdGFiLlxuICovXG5odGVybS5vcGVuVXJsID0gZnVuY3Rpb24odXJsKSB7XG4gIGlmICh3aW5kb3cuY2hyb21lICYmIGNocm9tZS5icm93c2VyICYmIGNocm9tZS5icm93c2VyLm9wZW5UYWIpIHtcbiAgICAvLyBGb3IgQ2hyb21lIHYyIGFwcHMsIHdlIG5lZWQgdG8gdXNlIHRoaXMgQVBJIHRvIHByb3Blcmx5IG9wZW4gd2luZG93cy5cbiAgICBjaHJvbWUuYnJvd3Nlci5vcGVuVGFiKHsgdXJsOiB1cmwgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgd2luID0gd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJyk7XG4gICAgd2luLmZvY3VzKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ29uc3RydWN0b3IgZm9yIGEgaHRlcm0uU2l6ZSByZWNvcmQuXG4gKlxuICogSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgaGF2ZSBwdWJsaWMgcmVhZC93cml0ZSBtZW1iZXJzIGZvciB3aWR0aCBhbmQgaGVpZ2h0LlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gd2lkdGggVGhlIHdpZHRoIG9mIHRoaXMgcmVjb3JkLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBoZWlnaHQgVGhlIGhlaWdodCBvZiB0aGlzIHJlY29yZC5cbiAqL1xuaHRlcm0uU2l6ZSA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbn07XG5cbi8qKlxuICogQWRqdXN0IHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoaXMgcmVjb3JkLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gd2lkdGggVGhlIG5ldyB3aWR0aCBvZiB0aGlzIHJlY29yZC5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gaGVpZ2h0IFRoZSBuZXcgaGVpZ2h0IG9mIHRoaXMgcmVjb3JkLlxuICovXG5odGVybS5TaXplLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG59O1xuXG4vKipcbiAqIFJldHVybiBhIGNvcHkgb2YgdGhpcyByZWNvcmQuXG4gKlxuICogQHJldHVybiB7aHRlcm0uU2l6ZX0gQSBuZXcgaHRlcm0uU2l6ZSBpbnN0YW5jZSB3aXRoIHRoZSBzYW1lIHdpZHRoIGFuZFxuICogaGVpZ2h0LlxuICovXG5odGVybS5TaXplLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IGh0ZXJtLlNpemUodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGhlaWdodCBhbmQgd2lkdGggb2YgdGhpcyBpbnN0YW5jZSBiYXNlZCBvbiBhbm90aGVyIGh0ZXJtLlNpemUuXG4gKlxuICogQHBhcmFtIHtodGVybS5TaXplfSB0aGF0IFRoZSBvYmplY3QgdG8gY29weSBmcm9tLlxuICovXG5odGVybS5TaXplLnByb3RvdHlwZS5zZXRUbyA9IGZ1bmN0aW9uKHRoYXQpIHtcbiAgdGhpcy53aWR0aCA9IHRoYXQud2lkdGg7XG4gIHRoaXMuaGVpZ2h0ID0gdGhhdC5oZWlnaHQ7XG59O1xuXG4vKipcbiAqIFRlc3QgaWYgYW5vdGhlciBodGVybS5TaXplIGluc3RhbmNlIGlzIGVxdWFsIHRvIHRoaXMgb25lLlxuICpcbiAqIEBwYXJhbSB7aHRlcm0uU2l6ZX0gdGhhdCBUaGUgb3RoZXIgaHRlcm0uU2l6ZSBpbnN0YW5jZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYm90aCBpbnN0YW5jZXMgaGF2ZSB0aGUgc2FtZSB3aWR0aC9oZWlnaHQsIGZhbHNlXG4gKiAgICAgb3RoZXJ3aXNlLlxuICovXG5odGVybS5TaXplLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbih0aGF0KSB7XG4gIHJldHVybiB0aGlzLndpZHRoID09IHRoYXQud2lkdGggJiYgdGhpcy5oZWlnaHQgPT0gdGhhdC5oZWlnaHQ7XG59O1xuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGluc3RhbmNlLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gQSBzdHJpbmcgdGhhdCBpZGVudGlmaWVzIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoaXNcbiAqICAgICBpbnN0YW5jZS5cbiAqL1xuaHRlcm0uU2l6ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICdbaHRlcm0uU2l6ZTogJyArIHRoaXMud2lkdGggKyAnLCAnICsgdGhpcy5oZWlnaHQgKyAnXSc7XG59O1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciBhIGh0ZXJtLlJvd0NvbCByZWNvcmQuXG4gKlxuICogSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgaGF2ZSBwdWJsaWMgcmVhZC93cml0ZSBtZW1iZXJzIGZvciByb3cgYW5kIGNvbHVtbi5cbiAqXG4gKiBUaGlzIGNsYXNzIGluY2x1ZGVzIGFuICdvdmVyZmxvdycgYml0IHdoaWNoIGlzIHVzZSB0byBpbmRpY2F0ZSB0aGF0IGFuXG4gKiBhdHRlbXB0IGhhcyBiZWVuIG1hZGUgdG8gbW92ZSB0aGUgY3Vyc29yIGNvbHVtbiBwYXNzZWQgdGhlIGVuZCBvZiB0aGVcbiAqIHNjcmVlbi4gIFdoZW4gdGhpcyBoYXBwZW5zIHdlIGxlYXZlIHRoZSBjdXJzb3IgY29sdW1uIHNldCB0byB0aGUgbGFzdCBjb2x1bW5cbiAqIG9mIHRoZSBzY3JlZW4gYnV0IHNldCB0aGUgb3ZlcmZsb3cgYml0LiAgSW4gdGhpcyBzdGF0ZSBjdXJzb3IgbW92ZW1lbnRcbiAqIGhhcHBlbnMgbm9ybWFsbHksIGJ1dCBhbnkgYXR0ZW1wdCB0byBwcmludCBuZXcgY2hhcmFjdGVycyBjYXVzZXMgYSBjci9sZlxuICogZmlyc3QuXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyfSByb3cgVGhlIHJvdyBvZiB0aGlzIHJlY29yZC5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gY29sdW1uIFRoZSBjb2x1bW4gb2YgdGhpcyByZWNvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdF9vdmVyZmxvdyBPcHRpb25hbCBib29sZWFuIGluZGljYXRpbmcgdGhhdCB0aGUgUm93Q29sXG4gKiAgICAgaGFzIG92ZXJmbG93ZWQuXG4gKi9cbmh0ZXJtLlJvd0NvbCA9IGZ1bmN0aW9uKHJvdywgY29sdW1uLCBvcHRfb3ZlcmZsb3cpIHtcbiAgdGhpcy5yb3cgPSByb3c7XG4gIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICB0aGlzLm92ZXJmbG93ID0gISFvcHRfb3ZlcmZsb3c7XG59O1xuXG4vKipcbiAqIEFkanVzdCB0aGUgcm93IGFuZCBjb2x1bW4gb2YgdGhpcyByZWNvcmQuXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyfSByb3cgVGhlIG5ldyByb3cgb2YgdGhpcyByZWNvcmQuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGNvbHVtbiBUaGUgbmV3IGNvbHVtbiBvZiB0aGlzIHJlY29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X292ZXJmbG93IE9wdGlvbmFsIGJvb2xlYW4gaW5kaWNhdGluZyB0aGF0IHRoZSBSb3dDb2xcbiAqICAgICBoYXMgb3ZlcmZsb3dlZC5cbiAqL1xuaHRlcm0uUm93Q29sLnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24ocm93LCBjb2x1bW4sIG9wdF9vdmVyZmxvdykge1xuICB0aGlzLnJvdyA9IHJvdztcbiAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gIHRoaXMub3ZlcmZsb3cgPSAhIW9wdF9vdmVyZmxvdztcbn07XG5cbi8qKlxuICogUmV0dXJuIGEgY29weSBvZiB0aGlzIHJlY29yZC5cbiAqXG4gKiBAcmV0dXJuIHtodGVybS5Sb3dDb2x9IEEgbmV3IGh0ZXJtLlJvd0NvbCBpbnN0YW5jZSB3aXRoIHRoZSBzYW1lIHJvdyBhbmRcbiAqIGNvbHVtbi5cbiAqL1xuaHRlcm0uUm93Q29sLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IGh0ZXJtLlJvd0NvbCh0aGlzLnJvdywgdGhpcy5jb2x1bW4sIHRoaXMub3ZlcmZsb3cpO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHJvdyBhbmQgY29sdW1uIG9mIHRoaXMgaW5zdGFuY2UgYmFzZWQgb24gYW5vdGhlciBodGVybS5Sb3dDb2wuXG4gKlxuICogQHBhcmFtIHtodGVybS5Sb3dDb2x9IHRoYXQgVGhlIG9iamVjdCB0byBjb3B5IGZyb20uXG4gKi9cbmh0ZXJtLlJvd0NvbC5wcm90b3R5cGUuc2V0VG8gPSBmdW5jdGlvbih0aGF0KSB7XG4gIHRoaXMucm93ID0gdGhhdC5yb3c7XG4gIHRoaXMuY29sdW1uID0gdGhhdC5jb2x1bW47XG4gIHRoaXMub3ZlcmZsb3cgPSB0aGF0Lm92ZXJmbG93O1xufTtcblxuLyoqXG4gKiBUZXN0IGlmIGFub3RoZXIgaHRlcm0uUm93Q29sIGluc3RhbmNlIGlzIGVxdWFsIHRvIHRoaXMgb25lLlxuICpcbiAqIEBwYXJhbSB7aHRlcm0uUm93Q29sfSB0aGF0IFRoZSBvdGhlciBodGVybS5Sb3dDb2wgaW5zdGFuY2UuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGJvdGggaW5zdGFuY2VzIGhhdmUgdGhlIHNhbWUgcm93L2NvbHVtbiwgZmFsc2VcbiAqICAgICBvdGhlcndpc2UuXG4gKi9cbmh0ZXJtLlJvd0NvbC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24odGhhdCkge1xuICByZXR1cm4gKFxuICAgIHRoaXMucm93ID09IHRoYXQucm93ICYmXG4gICAgdGhpcy5jb2x1bW4gPT0gdGhhdC5jb2x1bW4gJiZcbiAgICB0aGlzLm92ZXJmbG93ID09IHRoYXQub3ZlcmZsb3dcbiAgKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgaW5zdGFuY2UuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBBIHN0cmluZyB0aGF0IGlkZW50aWZpZXMgdGhlIHJvdyBhbmQgY29sdW1uIG9mIHRoaXNcbiAqICAgICBpbnN0YW5jZS5cbiAqL1xuaHRlcm0uUm93Q29sLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKFxuICAgICdbaHRlcm0uUm93Q29sOiAnICtcbiAgICB0aGlzLnJvdyArXG4gICAgJywgJyArXG4gICAgdGhpcy5jb2x1bW4gK1xuICAgICcsICcgK1xuICAgIHRoaXMub3ZlcmZsb3cgK1xuICAgICddJ1xuICApO1xufTtcbi8vIFNPVVJDRSBGSUxFOiBodGVybS9qcy9odGVybV9hY2Nlc3NpYmlsaXR5X3JlYWRlci5qc1xuLy8gQ29weXJpZ2h0IDIwMTggVGhlIENocm9taXVtIE9TIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4vLyBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuXG4vKipcbiAqIEFjY2Vzc2liaWxpdHlSZWFkZXIgcmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyBjb21tYW5kIG91dHB1dCBmb3IgQVQuXG4gKlxuICogUmVuZGVycyBjb21tYW5kIG91dHB1dCBmb3IgQXNzaXN0aXZlIFRlY2hub2xvZ3kgdXNpbmcgYSBsaXZlIHJlZ2lvbi4gV2UgZG9uJ3RcbiAqIHVzZSB0aGUgdmlzaWJsZSByb3dzIG9mIHRoZSB0ZXJtaW5hbCBmb3IgcmVuZGVyaW5nIGNvbW1hbmQgb3V0cHV0IHRvIHRoZVxuICogc2NyZWVuIHJlYWRlciBiZWNhdXNlIHRoZSByZW5kZXJlZCBjb250ZW50IG1heSBiZSBkaWZmZXJlbnQgZnJvbSB3aGF0IHdlIHdhbnRcbiAqIHJlYWQgb3V0IGJ5IGEgc2NyZWVuIHJlYWRlci4gRm9yIGV4YW1wbGUsIHdlIG1heSBub3QgYWN0dWFsbHkgcmVuZGVyIGV2ZXJ5XG4gKiByb3cgb2YgYSBsYXJnZSBwaWVjZSBvZiBvdXRwdXQgdG8gdGhlIHNjcmVlbiBhcyBpdCB3b3VsZG4ndCBiZSBwZXJmb3JtYW50LlxuICogQnV0IHdlIHdhbnQgdGhlIHNjcmVlbiByZWFkZXIgdG8gcmVhZCBpdCBhbGwgb3V0IGluIG9yZGVyLlxuICpcbiAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IGRpdiBUaGUgZGl2IGVsZW1lbnQgd2hlcmUgdGhlIGxpdmUgcmVnaW9uIHNob3VsZCBiZVxuICogICAgIGFkZGVkLlxuICovXG5odGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyID0gZnVuY3Rpb24oZGl2KSB7XG4gIHRoaXMuZG9jdW1lbnRfID0gZGl2Lm93bmVyRG9jdW1lbnQ7XG5cbiAgLy8gVGhlIGxpdmUgcmVnaW9uIGVsZW1lbnQgdG8gYWRkIHRleHQgdG8uXG4gIGNvbnN0IGxpdmVSZWdpb24gPSB0aGlzLmRvY3VtZW50Xy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgbGl2ZVJlZ2lvbi5pZCA9ICdodGVybTphY2Nlc3NpYmlsaXR5LWxpdmUtcmVnaW9uJztcbiAgbGl2ZVJlZ2lvbi5zdHlsZS5jc3NUZXh0ID0gYHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAwOyBoZWlnaHQ6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMDsgdG9wOiAwO2A7XG4gIGRpdi5hcHBlbmRDaGlsZChsaXZlUmVnaW9uKTtcblxuICAvLyBXaGV0aGVyIGNvbW1hbmQgb3V0cHV0IHNob3VsZCBiZSByZW5kZXJlZCBmb3IgQXNzaXN0aXZlIFRlY2hub2xvZ3kuXG4gIC8vIFRoaXMgaXNuJ3QgYWx3YXlzIGVuYWJsZWQgYmVjYXVzZSBpdCBoYXMgYW4gaW1wYWN0IG9uIHBlcmZvcm1hbmNlLlxuICB0aGlzLmFjY2Vzc2liaWxpdHlFbmFibGVkID0gZmFsc2U7XG5cbiAgLy8gVGhpcyBsaXZlIGVsZW1lbnQgaXMgdXNlZCBmb3IgY29tbWFuZCBvdXRwdXQuXG4gIHRoaXMubGl2ZUVsZW1lbnRfID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgncCcpO1xuICB0aGlzLmxpdmVFbGVtZW50Xy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsICdwb2xpdGUnKTtcbiAgdGhpcy5saXZlRWxlbWVudF8uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJycpO1xuICBsaXZlUmVnaW9uLmFwcGVuZENoaWxkKHRoaXMubGl2ZUVsZW1lbnRfKTtcblxuICAvLyBUaGlzIGxpdmUgZWxlbWVudCBpcyB1c2VkIGZvciBzcGVha2luZyBvdXQgdGhlIGN1cnJlbnQgc2NyZWVuIHdoZW5cbiAgLy8gbmF2aWdhdGluZyB0aHJvdWdoIHRoZSBzY3JvbGxiYWNrIGJ1ZmZlci4gSXQgd2lsbCBpbnRlcnJ1cHQgZXhpc3RpbmdcbiAgLy8gYW5ub3VuY2VtZW50cy5cbiAgdGhpcy5hc3NlcnRpdmVMaXZlRWxlbWVudF8gPSB0aGlzLmRvY3VtZW50Xy5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIHRoaXMuYXNzZXJ0aXZlTGl2ZUVsZW1lbnRfLnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ2Fzc2VydGl2ZScpO1xuICB0aGlzLmFzc2VydGl2ZUxpdmVFbGVtZW50Xy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnJyk7XG4gIGxpdmVSZWdpb24uYXBwZW5kQ2hpbGQodGhpcy5hc3NlcnRpdmVMaXZlRWxlbWVudF8pO1xuXG4gIC8vIEEgcXVldWUgb2YgdXBkYXRlcyB0byBhbm5vdW5jZS5cbiAgdGhpcy5xdWV1ZV8gPSBbXTtcblxuICAvLyBBIHRpbWVyIHdoaWNoIHRyYWNrcyB3aGVuIG5leHQgdG8gYWRkIGl0ZW1zIHRvIHRoZSBsaXZlIHJlZ2lvbi4gbnVsbCB3aGVuXG4gIC8vIG5vdCBydW5uaW5nLiBUaGlzIGlzIHVzZWQgdG8gY29tYmluZSB1cGRhdGVzIHRoYXQgb2NjdXIgaW4gYSBzbWFsbCB3aW5kb3csXG4gIC8vIGFzIHdlbGwgYXMgdG8gYXZvaWQgdG9vIG11Y2ggb3V0cHV0IGJlaW5nIGFkZGVkIHRvIHRoZSBsaXZlIHJlZ2lvbiBpbiBvbmVcbiAgLy8gZ28gd2hpY2ggY2FuIGNhdXNlIHRoZSByZW5kZXJlciB0byBoYW5nLlxuICB0aGlzLm5leHRSZWFkVGltZXJfID0gbnVsbDtcblxuICAvLyBUaGlzIGlzIHNldCB0byB0cnVlIGlmIHRoZSBjdXJzb3IgaXMgYWJvdXQgdG8gdXBkYXRlIHBvc2l0aW9uIG9uIHRoZVxuICAvLyBzY3JlZW4uIGkuZS4gYmVmb3JlQ3Vyc29yQ2hhbmdlIGhhcyBiZWVuIGNhbGxlZCBidXQgbm90IGFmdGVyQ3Vyc29yQ2hhbmdlLlxuICB0aGlzLmN1cnNvcklzQ2hhbmdpbmdfID0gZmFsc2U7XG5cbiAgLy8gVGhpcyB0cmFja3MgY2hhbmdlcyB0aGF0IHdvdWxkIGJlIGFkZGVkIHRvIHF1ZXVlXyB3aGlsZSB0aGUgY3Vyc29yIGlzXG4gIC8vIGNoYW5naW5nLiBUaGlzIGlzIGRvbmUgc28gdGhhdCB3ZSBjYW4gZGVjaWRlIHRvIGRpc2NhcmQgdGhlc2UgY2hhbmdlcyBpZlxuICAvLyB3ZSBhbm5vdW5jZSBzb21ldGhpbmcgYXMgYSByZXN1bHQgb2YgdGhlIGN1cnNvciBjaGFuZ2UuXG4gIHRoaXMuY3Vyc29yQ2hhbmdlUXVldWVfID0gW107XG5cbiAgLy8gVGhlIHN0cmluZyBvZiB0ZXh0IG9uIHRoZSByb3cgdGhhdCB0aGUgY3Vyc29yIHdhcyBsYXN0IG9uLiBPbmx5IHZhbGlkIHdoaWxlXG4gIC8vIGN1cnNvcklzQ2hhbmdpbmdfIGlzIHRydWUuXG4gIHRoaXMubGFzdEN1cnNvclJvd1N0cmluZ18gPSBudWxsO1xuXG4gIC8vIFRoZSByb3cgdGhhdCB0aGUgY3Vyc29yIHdhcyBsYXN0IG9uLiBPbmx5IHZhbGlkIHdoaWxlIGN1cnNvcklzQ2hhbmdpbmdfIGlzXG4gIC8vIHRydWUuXG4gIHRoaXMubGFzdEN1cnNvclJvd18gPSBudWxsO1xuXG4gIC8vIFRoZSBjb2x1bW4gdGhhdCB0aGUgY3Vyc29yIHdhcyBsYXN0IG9uLiBPbmx5IHZhbGlkIHdoaWxlIGN1cnNvcklzQ2hhbmdpbmdfXG4gIC8vIGlzIHRydWUuXG4gIHRoaXMubGFzdEN1cnNvckNvbHVtbl8gPSBudWxsO1xuXG4gIC8vIFRydWUgaWYgYSBrZXlwcmVzcyBoYXMgYmVlbiBwZXJmb3JtZWQgc2luY2UgdGhlIGxhc3QgY3Vyc29yIGNoYW5nZS5cbiAgdGhpcy5oYXNVc2VyR2VzdHVyZSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZWxheSBpbiBtcyB0byB1c2UgZm9yIG1lcmdpbmcgc3RyaW5ncyB0byBvdXRwdXQuXG4gKlxuICogV2UgbWVyZ2Ugc3RyaW5ncyB0b2dldGhlciB0byBhdm9pZCBoYW5naW5nIHRoZSB0ZXJtaW5hbCBhbmQgdG8gZW5zdXJlIHRoYXRcbiAqIGFyaWEgdXBkYXRlcyBtYWtlIGl0IHRvIHRoZSBzY3JlZW4gcmVhZGVyLiBXZSB3YW50IHRoaXMgdG8gYmUgc2hvcnQgc29cbiAqIHRoZXJlJ3Mgbm90IGEgYmlnIGRlbGF5IGJldHdlZW4gdHlwaW5nL2V4ZWN1dGluZyBjb21tYW5kcyBhbmQgaGVhcmluZyBvdXRwdXQuXG4gKlxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7aW50ZWdlcn1cbiAqL1xuaHRlcm0uQWNjZXNzaWJpbGl0eVJlYWRlci5ERUxBWSA9IDUwO1xuXG4vKipcbiAqIEVuYWJsZSBhY2Nlc3NpYmlsaXR5LWZyaWVuZGx5IGZlYXR1cmVzIHRoYXQgaGF2ZSBhIHBlcmZvcm1hbmNlIGltcGFjdC5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgV2hldGhlciB0byBlbmFibGUgYWNjZXNzaWJpbGl0eS1mcmllbmRseSBmZWF0dXJlcy5cbiAqL1xuaHRlcm0uQWNjZXNzaWJpbGl0eVJlYWRlci5wcm90b3R5cGUuc2V0QWNjZXNzaWJpbGl0eUVuYWJsZWQgPSBmdW5jdGlvbihcbiAgZW5hYmxlZCxcbikge1xuICBpZiAoIWVuYWJsZWQpIHtcbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cblxuICB0aGlzLmFjY2Vzc2liaWxpdHlFbmFibGVkID0gZW5hYmxlZDtcbn07XG5cbi8qKlxuICogRGVjb3JhdGUgdGhlIGRvY3VtZW50IHdoZXJlIHRoZSB0ZXJtaW5hbCA8eC1zY3JlZW4+IHJlc2lkZXMuIFRoaXMgaXMgbmVlZGVkXG4gKiBmb3IgbGlzdGVuaW5nIHRvIGtleXN0cm9rZXMgb24gdGhlIHNjcmVlbi5cbiAqXG4gKiBAcGFyYW0ge0hUTUxEb2N1bWVudH0gZG9jIFRoZSBkb2N1bWVudCB3aGVyZSB0aGUgPHgtc2NyZWVuPiByZXNpZGVzLlxuICovXG5odGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyLnByb3RvdHlwZS5kZWNvcmF0ZSA9IGZ1bmN0aW9uKGRvYykge1xuICBjb25zdCBoYW5kbGVycyA9IFsna2V5ZG93bicsICdrZXlwcmVzcycsICdrZXl1cCcsICd0ZXh0SW5wdXQnXTtcbiAgaGFuZGxlcnMuZm9yRWFjaChoYW5kbGVyID0+IHtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcihoYW5kbGVyLCAoKSA9PiB7XG4gICAgICB0aGlzLmhhc1VzZXJHZXN0dXJlID0gdHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgdGhlIGN1cnNvciBvbiB0aGUgc2NyZWVuIGlzIGFib3V0IHRvIGdldFxuICogdXBkYXRlZC4gVGhpcyBhbGxvd3MgY3Vyc29yIGNoYW5nZXMgdG8gYmUgdHJhY2tlZCBhbmQgcmVsYXRlZCBub3RpZmljYXRpb25zXG4gKiB0byBiZSBhbm5vdW5jZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGN1cnNvclJvd1N0cmluZyBUaGUgdGV4dCBpbiB0aGUgcm93IHRoYXQgdGhlIGN1cnNvciBpc1xuICogICAgIGN1cnJlbnRseSBvbi5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gY3Vyc29yUm93IFRoZSBpbmRleCBvZiB0aGUgcm93IHRoYXQgdGhlIGN1cnNvciBpcyBjdXJyZW50bHlcbiAqICAgICBvbiwgaW5jbHVkaW5nIHJvd3MgaW4gdGhlIHNjcm9sbGJhY2sgYnVmZmVyLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBjdXJzb3JDb2x1bW4gVGhlIGluZGV4IG9mIHRoZSBjb2x1bW4gdGhhdCB0aGUgY3Vyc29yIGlzXG4gKiAgICAgY3VycmVudGx5IG9uLlxuICovXG5odGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyLnByb3RvdHlwZS5iZWZvcmVDdXJzb3JDaGFuZ2UgPSBmdW5jdGlvbihcbiAgY3Vyc29yUm93U3RyaW5nLFxuICBjdXJzb3JSb3csXG4gIGN1cnNvckNvbHVtbixcbikge1xuICAvLyBJZiBhY2Nlc3NpYmlsaXR5IGlzIGVuYWJsZWQgd2UgZG9uJ3QgYW5ub3VuY2Ugc2VsZWN0aW9uIGNoYW5nZXMgYXMgdGhlc2VcbiAgLy8gY2FuIGhhdmUgYSBwZXJmb3JtYW5jZSBpbXBhY3QuXG4gIGlmICghdGhpcy5hY2Nlc3NpYmlsaXR5RW5hYmxlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIGlzIG5vIHVzZXIgZ2VzdHVyZSB0aGF0IGNhbiBiZSB0aWVkIHRvIHRoZSBjdXJzb3IgY2hhbmdlLCB3ZVxuICAvLyBkb24ndCB3YW50IHRvIGFubm91bmNlIGFueXRoaW5nLlxuICBpZiAoIXRoaXMuaGFzVXNlckdlc3R1cmUgfHwgdGhpcy5jdXJzb3JJc0NoYW5naW5nXykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuY3Vyc29ySXNDaGFuZ2luZ18gPSB0cnVlO1xuICB0aGlzLmxhc3RDdXJzb3JSb3dTdHJpbmdfID0gY3Vyc29yUm93U3RyaW5nO1xuICB0aGlzLmxhc3RDdXJzb3JSb3dfID0gY3Vyc29yUm93O1xuICB0aGlzLmxhc3RDdXJzb3JDb2x1bW5fID0gY3Vyc29yQ29sdW1uO1xufTtcblxuLyoqXG4gKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGN1cnNvciBvbiB0aGUgc2NyZWVuIGhhcyBiZWVuIHVwZGF0ZWQuIE5vdGVcbiAqIHRoYXQgc2V2ZXJhbCB1cGRhdGVzIHRvIHRoZSBjdXJzb3IgbWF5IGhhdmUgaGFwcGVuZWQgYmV0d2VlblxuICogYmVmb3JlQ3Vyc29yQ2hhbmdlIGFuZCBhZnRlckN1cnNvckNoYW5nZS5cbiAqXG4gKiBUaGlzIGFsbG93cyBjdXJzb3IgY2hhbmdlcyB0byBiZSB0cmFja2VkIGFuZCByZWxhdGVkIG5vdGlmaWNhdGlvbnMgdG8gYmVcbiAqIGFubm91bmNlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3Vyc29yUm93U3RyaW5nIFRoZSB0ZXh0IGluIHRoZSByb3cgdGhhdCB0aGUgY3Vyc29yIGlzXG4gKiAgICAgY3VycmVudGx5IG9uLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBjdXJzb3JSb3cgVGhlIGluZGV4IG9mIHRoZSByb3cgdGhhdCB0aGUgY3Vyc29yIGlzIGN1cnJlbnRseVxuICogICAgIG9uLCBpbmNsdWRpbmcgcm93cyBpbiB0aGUgc2Nyb2xsYmFjayBidWZmZXIuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGN1cnNvckNvbHVtbiBUaGUgaW5kZXggb2YgdGhlIGNvbHVtbiB0aGF0IHRoZSBjdXJzb3IgaXNcbiAqICAgICBjdXJyZW50bHkgb24uXG4gKi9cbmh0ZXJtLkFjY2Vzc2liaWxpdHlSZWFkZXIucHJvdG90eXBlLmFmdGVyQ3Vyc29yQ2hhbmdlID0gZnVuY3Rpb24oXG4gIGN1cnNvclJvd1N0cmluZyxcbiAgY3Vyc29yUm93LFxuICBjdXJzb3JDb2x1bW4sXG4pIHtcbiAgLy8gVGhpcyBjYW4gaGFwcGVuIGlmIGNsZWFyKCkgaXMgY2FsbGVkIG1pZHdheSB0aHJvdWdoIGEgY3Vyc29yIGNoYW5nZS5cbiAgaWYgKCF0aGlzLmN1cnNvcklzQ2hhbmdpbmdfKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuY3Vyc29ySXNDaGFuZ2luZ18gPSBmYWxzZTtcblxuICBpZiAoIXRoaXMuYW5ub3VuY2VBY3Rpb25fKGN1cnNvclJvd1N0cmluZywgY3Vyc29yUm93LCBjdXJzb3JDb2x1bW4pKSB7XG4gICAgLy8gSWYgd2UgZG9uJ3QgYW5ub3VuY2UgYSBzcGVjaWFsIGFjdGlvbiwgd2UgcmUtcXVldWUgYWxsIHRoZSBvdXRwdXQgdGhhdFxuICAgIC8vIHdhcyBxdWV1ZWQgZHVyaW5nIHRoZSBzZWxlY3Rpb24gY2hhbmdlLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jdXJzb3JDaGFuZ2VRdWV1ZV8ubGVuZ3RoOyArK2kpIHtcbiAgICAgIHRoaXMuYW5ub3VuY2UodGhpcy5jdXJzb3JDaGFuZ2VRdWV1ZV9baV0pO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuY3Vyc29yQ2hhbmdlUXVldWVfID0gW107XG4gIHRoaXMubGFzdEN1cnNvclJvd1N0cmluZ18gPSBudWxsO1xuICB0aGlzLmxhc3RDdXJzb3JSb3dfID0gbnVsbDtcbiAgdGhpcy5sYXN0Q3Vyc29yQ29sdW1uXyA9IG51bGw7XG4gIHRoaXMuaGFzVXNlckdlc3R1cmUgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogQW5ub3VuY2UgdGhlIGNvbW1hbmQgb3V0cHV0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBhbm5vdW5jZSB1c2luZyBhIGxpdmUgcmVnaW9uLlxuICovXG5odGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyLnByb3RvdHlwZS5hbm5vdW5jZSA9IGZ1bmN0aW9uKHN0cikge1xuICBpZiAoIXRoaXMuYWNjZXNzaWJpbGl0eUVuYWJsZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBJZiB0aGUgY3Vyc29yIGlzIGluIHRoZSBtaWRkbGUgb2YgY2hhbmdpbmcsIHdlIHF1ZXVlIHVwIHRoZSBvdXRwdXRcbiAgLy8gc2VwYXJhdGVseSBhcyB3ZSBtYXkgbm90IHdhbnQgaXQgdG8gYmUgYW5ub3VuY2VkIGlmIGl0J3MgcGFydCBvZiBhIGN1cnNvclxuICAvLyBjaGFuZ2UgYW5ub3VuY2VtZW50LlxuICBpZiAodGhpcy5jdXJzb3JJc0NoYW5naW5nXykge1xuICAgIHRoaXMuY3Vyc29yQ2hhbmdlUXVldWVfLnB1c2goc3RyKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEb24ndCBhcHBlbmQgbmV3bGluZXMgdG8gdGhlIHF1ZXVlIGlmIHRoZSBxdWV1ZSBpcyBlbXB0eS4gSXQgd29uJ3QgaGF2ZSBhbnlcbiAgLy8gaW1wYWN0LlxuICBpZiAoc3RyID09ICdcXG4nICYmIHRoaXMucXVldWVfLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLnF1ZXVlXy5wdXNoKCcnKTtcbiAgICAvLyBXZSBkb24ndCBuZWVkIHRvIHRyaWdnZXIgYW4gYW5ub3VuY2VtZW50IG9uIG5ld2xpbmVzIGJlY2F1c2UgdGhleSB3b24ndFxuICAgIC8vIGNoYW5nZSB0aGUgZXhpc3RpbmcgY29udGVudCB0aGF0J3Mgb3V0cHV0LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLnF1ZXVlXy5sZW5ndGggPT0gMCkge1xuICAgIHRoaXMucXVldWVfLnB1c2goc3RyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXZSBwdXQgYSBzcGFjZSBiZXR3ZWVuIHN0cmluZ3MgdGhhdCBhcHBlYXIgb24gdGhlIHNhbWUgbGluZS5cbiAgICAvLyBUT0RPKHJheW1lcyk6IFdlIHNob3VsZCBjaGVjayB0aGUgbG9jYXRpb24gb24gdGhlIHJvdyBhbmQgbm90IGFkZCBhIHNwYWNlXG4gICAgLy8gaWYgdGhlIHN0cmluZ3MgYXJlIGpvaW5lZCB0b2dldGhlci5cbiAgICBsZXQgcGFkZGluZyA9ICcnO1xuICAgIGlmICh0aGlzLnF1ZXVlX1t0aGlzLnF1ZXVlXy5sZW5ndGggLSAxXS5sZW5ndGggIT0gMCkge1xuICAgICAgcGFkZGluZyA9ICcgJztcbiAgICB9XG4gICAgdGhpcy5xdWV1ZV9bdGhpcy5xdWV1ZV8ubGVuZ3RoIC0gMV0gKz0gcGFkZGluZyArIHN0cjtcbiAgfVxuXG4gIC8vIElmIHdlJ3ZlIGFscmVhZHkgc2NoZWR1bGVkIHRleHQgYmVpbmcgYWRkZWQgdG8gdGhlIGxpdmUgcmVnaW9uLCB3YWl0IGZvciBpdFxuICAvLyB0byBoYXBwZW4uXG4gIGlmICh0aGlzLm5leHRSZWFkVGltZXJfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgdGhlcmUncyBvbmx5IG9uZSBpdGVtIGluIHRoZSBxdWV1ZSwgd2UgbWF5IGdldCBvdGhlciB0ZXh0IGJlaW5nIGFkZGVkXG4gIC8vIHZlcnkgc29vbiBhZnRlci4gSW4gdGhhdCBjYXNlLCB3YWl0IGEgc21hbGwgZGVsYXkgc28gd2UgY2FuIG1lcmdlIHRoZVxuICAvLyByZWxhdGVkIHN0cmluZ3MuXG4gIGlmICh0aGlzLnF1ZXVlXy5sZW5ndGggPT0gMSkge1xuICAgIHRoaXMubmV4dFJlYWRUaW1lcl8gPSBzZXRUaW1lb3V0KFxuICAgICAgdGhpcy5hZGRUb0xpdmVSZWdpb25fLmJpbmQodGhpcyksXG4gICAgICBodGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyLkRFTEFZLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0V4cGVjdGVkIG9ubHkgb25lIGl0ZW0gaW4gcXVldWVfIG9yIG5leHRSZWFkVGltZXJfIHRvIGJlIHJ1bm5pbmcuJyxcbiAgICApO1xuICB9XG59O1xuXG4vKipcbiAqIFZvaWNlIGFuIGFubm91bmNlbWVudCB0aGF0IHdpbGwgaW50ZXJydXB0IG90aGVyIGFubm91bmNlbWVudHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGFubm91bmNlIHVzaW5nIGEgbGl2ZSByZWdpb24uXG4gKi9cbmh0ZXJtLkFjY2Vzc2liaWxpdHlSZWFkZXIucHJvdG90eXBlLmFzc2VydGl2ZUFubm91bmNlID0gZnVuY3Rpb24oc3RyKSB7XG4gIGlmICh0aGlzLmhhc1VzZXJHZXN0dXJlICYmIHN0ciA9PSAnICcpIHtcbiAgICBzdHIgPSBodGVybS5tc2coJ1NQQUNFX0NIQVJBQ1RFUicsIFtdLCAnU3BhY2UnKTtcbiAgfVxuXG4gIC8vIElmIHRoZSBzYW1lIHN0cmluZyBpcyBhbm5vdW5jZWQgdHdpY2UsIGFuIGF0dHJpYnV0ZSBjaGFuZ2Ugd29uJ3QgYmVcbiAgLy8gcmVnaXN0ZXJlZCBhbmQgdGhlIHNjcmVlbiByZWFkZXIgd29uJ3Qga25vdyB0aGF0IHRoZSBzdHJpbmcgaGFzIGNoYW5nZWQuXG4gIC8vIFNvIHdlIHNsaWdodGx5IGNoYW5nZSB0aGUgc3RyaW5nIHRvIGVuc3VyZSB0aGF0IHRoZSBhdHRyaWJ1dGUgY2hhbmdlIGdldHNcbiAgLy8gcmVnaXN0ZXJlZC5cbiAgc3RyID0gc3RyLnRyaW0oKTtcbiAgaWYgKHN0ciA9PSB0aGlzLmFzc2VydGl2ZUxpdmVFbGVtZW50Xy5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSkge1xuICAgIHN0ciA9ICdcXG4nICsgc3RyO1xuICB9XG5cbiAgdGhpcy5jbGVhcigpO1xuICB0aGlzLmFzc2VydGl2ZUxpdmVFbGVtZW50Xy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBzdHIpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBuZXdsaW5lIHRvIHRoZSB0ZXh0IHRoYXQgd2lsbCBiZSBhbm5vdW5jZWQgdG8gdGhlIGxpdmUgcmVnaW9uLlxuICovXG5odGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyLnByb3RvdHlwZS5uZXdMaW5lID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYW5ub3VuY2UoJ1xcbicpO1xufTtcblxuLyoqXG4gKiBDbGVhciB0aGUgbGl2ZSByZWdpb24gYW5kIGFueSBpbi1mbGlnaHQgYW5ub3VuY2VtZW50cy5cbiAqL1xuaHRlcm0uQWNjZXNzaWJpbGl0eVJlYWRlci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5saXZlRWxlbWVudF8uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJycpO1xuICB0aGlzLmFzc2VydGl2ZUxpdmVFbGVtZW50Xy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnJyk7XG4gIGNsZWFyVGltZW91dCh0aGlzLm5leHRSZWFkVGltZXJfKTtcbiAgdGhpcy5uZXh0UmVhZFRpbWVyXyA9IG51bGw7XG4gIHRoaXMucXVldWVfID0gW107XG5cbiAgdGhpcy5jdXJzb3JJc0NoYW5naW5nXyA9IGZhbHNlO1xuICB0aGlzLmN1cnNvckNoYW5nZVF1ZXVlXyA9IFtdO1xuICB0aGlzLmxhc3RDdXJzb3JSb3dTdHJpbmdfID0gbnVsbDtcbiAgdGhpcy5sYXN0Q3Vyc29yUm93XyA9IG51bGw7XG4gIHRoaXMubGFzdEN1cnNvckNvbHVtbl8gPSBudWxsO1xuICB0aGlzLmhhc1VzZXJHZXN0dXJlID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIFRoaXMgd2lsbCBhbm5vdW5jZSBhbiBhY3Rpb24gdGhhdCBpcyByZWxhdGVkIHRvIGEgY3Vyc29yIGNoYW5nZSwgZm9yIGV4YW1wbGVcbiAqIHdoZW4gdGhlIHVzZXIgZGVsZXRlcyBhIGNoYXJhY3RlciB3ZSB3YW50IHRoZSBjaGFyYWN0ZXIgZGVsZXRlZCB0byBiZVxuICogYW5ub3VuY2VkLiBTaW1pbGFybHksIHdoZW4gdGhlIHVzZXIgbW92ZXMgdGhlIGN1cnNvciBhbG9uZyB0aGUgbGluZSwgd2Ugd2FudFxuICogdGhlIGNoYXJhY3RlcnMgc2VsZWN0ZWQgdG8gYmUgYW5ub3VuY2VkLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIGEgaGV1cmlzdGljLiBCZWNhdXNlIG9mIHRoZSBuYXR1cmUgb2YgdGVybWluYWxcbiAqIGVtdWxhdG9ycywgd2UgY2FuJ3QgZGlzdGluZ3Vpc2ggaW5wdXQgYW5kIG91dHB1dCwgd2hpY2ggbWVhbnMgd2UgZG9uJ3QgcmVhbGx5XG4gKiBrbm93IHdoYXQgb3V0cHV0IGlzIHRoZSByZXN1bHQgb2YgYSBrZXlwcmVzcyBhbmQgd2hhdCBpc24ndC4gQWxzbyBpbiBzb21lXG4gKiB0ZXJtaW5hbCBhcHBsaWNhdGlvbnMgY2VydGFpbiBhbm5vdW5jZW1lbnRzIG1heSBtYWtlIHNlbnNlIHdoZXJlYXMgb3RoZXJzIG1heVxuICogbm90LiBUaGlzIGZ1bmN0aW9uIHNob3VsZCB0cnkgdG8gYWNjb3VudCBmb3IgdGhlIG1vc3QgY29tbW9uIGNhc2VzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjdXJzb3JSb3dTdHJpbmcgVGhlIHRleHQgaW4gdGhlIHJvdyB0aGF0IHRoZSBjdXJzb3IgaXNcbiAqICAgICBjdXJyZW50bHkgb24uXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGN1cnNvclJvdyBUaGUgaW5kZXggb2YgdGhlIHJvdyB0aGF0IHRoZSBjdXJzb3IgaXMgY3VycmVudGx5XG4gKiAgICAgb24sIGluY2x1ZGluZyByb3dzIGluIHRoZSBzY3JvbGxiYWNrIGJ1ZmZlci5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gY3Vyc29yQ29sdW1uIFRoZSBpbmRleCBvZiB0aGUgY29sdW1uIHRoYXQgdGhlIGN1cnNvciBpc1xuICogICAgIGN1cnJlbnRseSBvbi5cbiAqL1xuaHRlcm0uQWNjZXNzaWJpbGl0eVJlYWRlci5wcm90b3R5cGUuYW5ub3VuY2VBY3Rpb25fID0gZnVuY3Rpb24oXG4gIGN1cnNvclJvd1N0cmluZyxcbiAgY3Vyc29yUm93LFxuICBjdXJzb3JDb2x1bW4sXG4pIHtcbiAgLy8gSWYgdGhlIGN1cnNvciBjaGFuZ2VzIHJvd3MsIHdlIGRvbid0IGFubm91bmNlIGFueXRoaW5nIGF0IHByZXNlbnQuXG4gIGlmICh0aGlzLmxhc3RDdXJzb3JSb3dfICE9IGN1cnNvclJvdykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRoZSBjYXNlIHdoZW4gdGhlIHJvdyBvZiB0ZXh0IGhhc24ndCBjaGFuZ2VkIGF0IGFsbC5cbiAgaWYgKHRoaXMubGFzdEN1cnNvclJvd1N0cmluZ18gPT0gY3Vyc29yUm93U3RyaW5nKSB7XG4gICAgLy8gTW92aW5nIHRoZSBjdXJzb3IgYWxvbmcgdGhlIGxpbmUuIFdlIGNoZWNrIHRoYXQgbm8gc2lnbmlmaWNhbnQgY2hhbmdlc1xuICAgIC8vIGhhdmUgYmVlbiBxdWV1ZWQuIElmIHRoZXkgaGF2ZSwgaXQgbWF5IG5vdCBqdXN0IGJlIGEgY3Vyc29yIG1vdmVtZW50IGFuZFxuICAgIC8vIGl0IG1heSBiZSBiZXR0ZXIgdG8gcmVhZCB0aG9zZSBvdXQuXG4gICAgaWYgKFxuICAgICAgdGhpcy5sYXN0Q3Vyc29yQ29sdW1uXyAhPSBjdXJzb3JDb2x1bW4gJiZcbiAgICAgIHRoaXMuY3Vyc29yQ2hhbmdlUXVldWVfLmpvaW4oJycpLnRyaW0oKSA9PSAnJ1xuICAgICkge1xuICAgICAgLy8gQW5ub3VuY2UgdGhlIHRleHQgYmV0d2VlbiB0aGUgb2xkIGN1cnNvciBwb3NpdGlvbiBhbmQgdGhlIG5ldyBvbmUuXG4gICAgICBjb25zdCBzdGFydCA9IE1hdGgubWluKHRoaXMubGFzdEN1cnNvckNvbHVtbl8sIGN1cnNvckNvbHVtbik7XG4gICAgICBjb25zdCBsZW4gPSBNYXRoLmFicyhjdXJzb3JDb2x1bW4gLSB0aGlzLmxhc3RDdXJzb3JDb2x1bW5fKTtcbiAgICAgIHRoaXMuYXNzZXJ0aXZlQW5ub3VuY2UoXG4gICAgICAgIGxpYi53Yy5zdWJzdHIodGhpcy5sYXN0Q3Vyc29yUm93U3RyaW5nXywgc3RhcnQsIGxlbiksXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRoZSBjYXNlIHdoZW4gdGhlIHJvdyBvZiB0ZXh0IGhhcyBjaGFuZ2VkLlxuICBpZiAodGhpcy5sYXN0Q3Vyc29yUm93U3RyaW5nXyAhPSBjdXJzb3JSb3dTdHJpbmcpIHtcbiAgICAvLyBTcGFjZWJhci4gV2UgbWFudWFsbHkgYW5ub3VuY2UgdGhpcyBjaGFyYWN0ZXIgc2luY2UgdGhlIHNjcmVlbiByZWFkZXIgbWF5XG4gICAgLy8gbm90IGFubm91bmNlIHRoZSB3aGl0ZXNwYWNlIGluIGEgbGl2ZSByZWdpb24uXG4gICAgaWYgKHRoaXMubGFzdEN1cnNvckNvbHVtbl8gKyAxID09IGN1cnNvckNvbHVtbikge1xuICAgICAgaWYgKFxuICAgICAgICBsaWIud2Muc3Vic3RyKGN1cnNvclJvd1N0cmluZywgY3Vyc29yQ29sdW1uIC0gMSwgMSkgPT0gJyAnICYmXG4gICAgICAgIHRoaXMuY3Vyc29yQ2hhbmdlUXVldWVfLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgdGhpcy5jdXJzb3JDaGFuZ2VRdWV1ZV9bMF0gPT0gJyAnXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5hc3NlcnRpdmVBbm5vdW5jZSgnICcpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBCYWNrc3BhY2UgYW5kIGRlbGV0aW9uLlxuICAgIC8vIFRoZSBwb3NpdGlvbiBvZiB0aGUgY2hhcmFjdGVycyBkZWxldGVkIGlzIHJpZ2h0IGFmdGVyIHRoZSBjdXJyZW50XG4gICAgLy8gcG9zaXRpb24gb2YgdGhlIGN1cnNvciBpbiB0aGUgY2FzZSBvZiBiYWNrc3BhY2UgYW5kIGRlbGV0ZS5cbiAgICBjb25zdCBjdXJzb3JEZWxldGVkID0gY3Vyc29yQ29sdW1uO1xuICAgIC8vIENoZWNrIHRoYXQgdGhlIGN1cnJlbnQgcm93IHN0cmluZyBpcyBzaG9ydGVyIHRoYW4gdGhlIHByZXZpb3VzLiBBbHNvXG4gICAgLy8gY2hlY2sgdGhhdCB0aGUgc3RhcnQgb2YgdGhlIHN0cmluZ3MgKHVwIHRvIHRoZSBjdXJzb3IpIG1hdGNoLlxuICAgIGlmIChcbiAgICAgIGxpYi53Yy5zdHJXaWR0aChjdXJzb3JSb3dTdHJpbmcpIDw9XG4gICAgICAgIGxpYi53Yy5zdHJXaWR0aCh0aGlzLmxhc3RDdXJzb3JSb3dTdHJpbmdfKSAmJlxuICAgICAgbGliLndjLnN1YnN0cih0aGlzLmxhc3RDdXJzb3JSb3dTdHJpbmdfLCAwLCBjdXJzb3JEZWxldGVkKSA9PVxuICAgICAgICBsaWIud2Muc3Vic3RyKGN1cnNvclJvd1N0cmluZywgMCwgY3Vyc29yRGVsZXRlZClcbiAgICApIHtcbiAgICAgIC8vIEZpbmQgdGhlIGxlbmd0aCBvZiB0aGUgY3VycmVudCByb3cgc3RyaW5nIGlnbm9yaW5nIHNwYWNlIGNoYXJhY3RlcnMuXG4gICAgICAvLyBUaGVzZSBtYXkgYmUgaW5zZXJ0ZWQgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nIHdoZW4gZGVsZXRpbmcgY2hhcmFjdGVyc1xuICAgICAgLy8gc28gdGhleSBzaG91bGQgYmUgaWdub3JlZC5cbiAgICAgIGxldCBsZW5ndGhPZkN1cnJlbnRSb3cgPSBsaWIud2Muc3RyV2lkdGgoY3Vyc29yUm93U3RyaW5nKTtcbiAgICAgIGZvciAoOyBsZW5ndGhPZkN1cnJlbnRSb3cgPiAwOyAtLWxlbmd0aE9mQ3VycmVudFJvdykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbGVuZ3RoT2ZDdXJyZW50Um93ID09IGN1cnNvckRlbGV0ZWQgfHxcbiAgICAgICAgICBsaWIud2Muc3Vic3RyKGN1cnNvclJvd1N0cmluZywgbGVuZ3RoT2ZDdXJyZW50Um93IC0gMSwgMSkgIT0gJyAnXG4gICAgICAgICkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG51bUNoYXJzRGVsZXRlZCA9XG4gICAgICAgIGxpYi53Yy5zdHJXaWR0aCh0aGlzLmxhc3RDdXJzb3JSb3dTdHJpbmdfKSAtIGxlbmd0aE9mQ3VycmVudFJvdztcblxuICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmdzIG1hdGNoLlxuICAgICAgY29uc3QgbGVuZ3RoT2ZFbmRPZlN0cmluZyA9IGxlbmd0aE9mQ3VycmVudFJvdyAtIGN1cnNvckRlbGV0ZWQ7XG4gICAgICBjb25zdCBlbmRPZkxhc3RSb3dTdHJpbmcgPSBsaWIud2Muc3Vic3RyKFxuICAgICAgICB0aGlzLmxhc3RDdXJzb3JSb3dTdHJpbmdfLFxuICAgICAgICBjdXJzb3JEZWxldGVkICsgbnVtQ2hhcnNEZWxldGVkLFxuICAgICAgICBsZW5ndGhPZkVuZE9mU3RyaW5nLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IGVuZE9mQ3VycmVudFJvd1N0cmluZyA9IGxpYi53Yy5zdWJzdHIoXG4gICAgICAgIGN1cnNvclJvd1N0cmluZyxcbiAgICAgICAgY3Vyc29yRGVsZXRlZCxcbiAgICAgICAgbGVuZ3RoT2ZFbmRPZlN0cmluZyxcbiAgICAgICk7XG4gICAgICBpZiAoZW5kT2ZMYXN0Um93U3RyaW5nID09IGVuZE9mQ3VycmVudFJvd1N0cmluZykge1xuICAgICAgICBjb25zdCBkZWxldGVkID0gbGliLndjLnN1YnN0cihcbiAgICAgICAgICB0aGlzLmxhc3RDdXJzb3JSb3dTdHJpbmdfLFxuICAgICAgICAgIGN1cnNvckRlbGV0ZWQsXG4gICAgICAgICAgbnVtQ2hhcnNEZWxldGVkLFxuICAgICAgICApO1xuICAgICAgICBpZiAoZGVsZXRlZCAhPSAnJykge1xuICAgICAgICAgIHRoaXMuYXNzZXJ0aXZlQW5ub3VuY2UoZGVsZXRlZCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBBZGQgdGV4dCBmcm9tIHF1ZXVlXyB0byB0aGUgbGl2ZSByZWdpb24uXG4gKlxuICovXG5odGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyLnByb3RvdHlwZS5hZGRUb0xpdmVSZWdpb25fID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMubmV4dFJlYWRUaW1lcl8gPSBudWxsO1xuXG4gIGxldCBzdHIgPSB0aGlzLnF1ZXVlXy5qb2luKCdcXG4nKS50cmltKCk7XG5cbiAgLy8gSWYgdGhlIHNhbWUgc3RyaW5nIGlzIGFubm91bmNlZCB0d2ljZSwgYW4gYXR0cmlidXRlIGNoYW5nZSB3b24ndCBiZVxuICAvLyByZWdpc3RlcmVkIGFuZCB0aGUgc2NyZWVuIHJlYWRlciB3b24ndCBrbm93IHRoYXQgdGhlIHN0cmluZyBoYXMgY2hhbmdlZC5cbiAgLy8gU28gd2Ugc2xpZ2h0bHkgY2hhbmdlIHRoZSBzdHJpbmcgdG8gZW5zdXJlIHRoYXQgdGhlIGF0dHJpYnV0ZSBjaGFuZ2UgZ2V0c1xuICAvLyByZWdpc3RlcmVkLlxuICBpZiAoc3RyID09IHRoaXMubGl2ZUVsZW1lbnRfLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKSB7XG4gICAgc3RyID0gJ1xcbicgKyBzdHI7XG4gIH1cblxuICB0aGlzLmxpdmVFbGVtZW50Xy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBzdHIpO1xuICB0aGlzLnF1ZXVlXyA9IFtdO1xufTtcbi8vIFNPVVJDRSBGSUxFOiBodGVybS9qcy9odGVybV9jb250ZXh0bWVudS5qc1xuLy8gQ29weXJpZ2h0IDIwMTggVGhlIENocm9taXVtIE9TIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4vLyBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgQ29udGV4dCBtZW51IGhhbmRsaW5nLlxuICovXG5cbi8qKlxuICogTWFuYWdlIHRoZSBjb250ZXh0IG1lbnUgdXN1YWxseSBzaG93biB3aGVuIHJpZ2h0IGNsaWNraW5nLlxuICovXG5odGVybS5Db250ZXh0TWVudSA9IGZ1bmN0aW9uKCkge1xuICAvLyBUaGUgZG9jdW1lbnQgdGhhdCBjb250YWlucyB0aGlzIGNvbnRleHQgbWVudS5cbiAgdGhpcy5kb2N1bWVudF8gPSBudWxsO1xuICAvLyBUaGUgZ2VuZXJhdGVkIGNvbnRleHQgbWVudSAoaS5lLiBIVE1MIGVsZW1lbnRzKS5cbiAgdGhpcy5lbGVtZW50XyA9IG51bGw7XG4gIC8vIFRoZSBzdHJ1Y3R1cmVkIG1lbnUgKGkuZS4gSlMgb2JqZWN0cykuXG4gIHRoaXMubWVudV8gPSBbXTtcbn07XG5cbi8qKlxuICogQ29uc3RhbnQgdG8gYWRkIGEgc2VwYXJhdG9yIHRvIHRoZSBjb250ZXh0IG1lbnUuXG4gKi9cbmh0ZXJtLkNvbnRleHRNZW51LlNFUEFSQVRPUiA9IHt9O1xuXG4vKipcbiAqIEJpbmQgY29udGV4dCBtZW51IHRvIGEgc3BlY2lmaWMgZG9jdW1lbnQgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0hUTUxEb2N1bWVudH0gZG9jdW1lbnQgVGhlIGRvY3VtZW50IHRvIHVzZSB3aGVuIGNyZWF0aW5nIGVsZW1lbnRzLlxuICovXG5odGVybS5Db250ZXh0TWVudS5wcm90b3R5cGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbihkb2N1bWVudCkge1xuICBpZiAodGhpcy5lbGVtZW50Xykge1xuICAgIHRoaXMuZWxlbWVudF8ucmVtb3ZlKCk7XG4gICAgdGhpcy5lbGVtZW50XyA9IG51bGw7XG4gIH1cbiAgdGhpcy5kb2N1bWVudF8gPSBkb2N1bWVudDtcbiAgdGhpcy5yZWdlbmVyYXRlXygpO1xuICB0aGlzLmRvY3VtZW50Xy5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudF8pO1xufTtcblxuLyoqXG4gKiBSZWdlbmVyYXRlIHRoZSBIVE1MIGVsZW1lbnRzIGJhc2VkIG9uIGludGVybmFsIG1lbnUgc3RhdGUuXG4gKi9cbmh0ZXJtLkNvbnRleHRNZW51LnByb3RvdHlwZS5yZWdlbmVyYXRlXyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuZWxlbWVudF8pIHtcbiAgICB0aGlzLmVsZW1lbnRfID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnbWVudScpO1xuICAgIHRoaXMuZWxlbWVudF8uaWQgPSAnaHRlcm06Y29udGV4dC1tZW51JztcbiAgICB0aGlzLmVsZW1lbnRfLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIGJvcmRlcjogc29saWQgMXB4O1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmhpZGUoKTtcbiAgfVxuXG4gIC8vIENsZWFyIG91dCBleGlzdGluZyBtZW51IGVudHJpZXMuXG4gIHdoaWxlICh0aGlzLmVsZW1lbnRfLmZpcnN0Q2hpbGQpIHtcbiAgICB0aGlzLmVsZW1lbnRfLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudF8uZmlyc3RDaGlsZCk7XG4gIH1cblxuICB0aGlzLm1lbnVfLmZvckVhY2goKFtuYW1lLCBhY3Rpb25dKSA9PiB7XG4gICAgY29uc3QgbWVudWl0ZW0gPSB0aGlzLmRvY3VtZW50Xy5jcmVhdGVFbGVtZW50KCdtZW51aXRlbScpO1xuICAgIGlmIChuYW1lID09PSBodGVybS5Db250ZXh0TWVudS5TRVBBUkFUT1IpIHtcbiAgICAgIG1lbnVpdGVtLmlubmVySFRNTCA9ICc8aHI+JztcbiAgICAgIG1lbnVpdGVtLmNsYXNzTmFtZSA9ICdzZXBhcmF0b3InO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZW51aXRlbS5pbm5lclRleHQgPSBuYW1lO1xuICAgICAgbWVudWl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGFjdGlvbihlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmVsZW1lbnRfLmFwcGVuZENoaWxkKG1lbnVpdGVtKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFNldCBhbGwgdGhlIGVudHJpZXMgaW4gdGhlIGNvbnRleHQgbWVudS5cbiAqXG4gKiBUaGlzIGlzIGFuIGFycmF5IG9mIGFycmF5cy4gIFRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheSBpcyB0aGUgc3RyaW5nIHRvXG4gKiBkaXNwbGF5IHdoaWxlIHRoZSBzZWNvbmQgZWxlbWVudCBpcyB0aGUgZnVuY3Rpb24gdG8gY2FsbC5cbiAqXG4gKiBUaGUgZmlyc3QgZWxlbWVudCBtYXkgYWxzbyBiZSB0aGUgU0VQQVJBVE9SIGNvbnN0YW50IHRvIGFkZCBhIHNlcGFyYXRvci5cbiAqXG4gKiBUaGlzIHJlc2V0cyBhbGwgZXhpc3RpbmcgbWVudSBlbnRyaWVzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8c3RyaW5nLCBmdW5jdGlvbihFdmVudCk+Pn0gaXRlbXMgVGhlIG1lbnUgZW50cmllcy5cbiAqL1xuaHRlcm0uQ29udGV4dE1lbnUucHJvdG90eXBlLnNldEl0ZW1zID0gZnVuY3Rpb24oaXRlbXMpIHtcbiAgdGhpcy5tZW51XyA9IGl0ZW1zO1xuICB0aGlzLnJlZ2VuZXJhdGVfKCk7XG59O1xuXG4vKipcbiAqIFNob3cgdGhlIGNvbnRleHQgbWVudS5cbiAqXG4gKiBUaGUgZXZlbnQgaXMgdXNlZCB0byBkZXRlcm1pbmUgd2hlcmUgdG8gc2hvdyB0aGUgbWVudS5cbiAqXG4gKiBJZiBubyBtZW51IGVudHJpZXMgYXJlIGRlZmluZWQsIHRoZW4gbm90aGluZyB3aWxsIGJlIHNob3duLlxuICpcbiAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGV2ZW50IHRyaWdnZXJpbmcgdGhpcyBkaXNwbGF5LlxuICogQHBhcmFtIHtodGVybS5UZXJtaW5hbD19IHRlcm1pbmFsIFRoZSB0ZXJtaW5hbCBvYmplY3QgdG8gZ2V0IHN0eWxlIGluZm8gZnJvbS5cbiAqL1xuaHRlcm0uQ29udGV4dE1lbnUucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbihlLCB0ZXJtaW5hbCkge1xuICAvLyBJZiB0aGVyZSBhcmUgbm8gbWVudSBlbnRyaWVzLCB0aGVuIGRvbid0IHRyeSB0byBzaG93IGFueXRoaW5nLlxuICBpZiAodGhpcy5tZW51Xy5sZW5ndGggPT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIElmIHdlIGhhdmUgdGhlIHRlcm1pbmFsLCBzeW5jIHRoZSBzdHlsZSBwcmVmZXJlbmNlcyBvdmVyLlxuICBpZiAodGVybWluYWwpIHtcbiAgICB0aGlzLmVsZW1lbnRfLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHRlcm1pbmFsLmdldEJhY2tncm91bmRDb2xvcigpO1xuICAgIHRoaXMuZWxlbWVudF8uc3R5bGUuY29sb3IgPSB0ZXJtaW5hbC5nZXRGb3JlZ3JvdW5kQ29sb3IoKTtcbiAgICB0aGlzLmVsZW1lbnRfLnN0eWxlLmZvbnRTaXplID0gdGVybWluYWwuZ2V0Rm9udFNpemUoKTtcbiAgICB0aGlzLmVsZW1lbnRfLnN0eWxlLmZvbnRGYW1pbHkgPSB0ZXJtaW5hbC5nZXRGb250RmFtaWx5KCk7XG4gIH1cblxuICB0aGlzLmVsZW1lbnRfLnN0eWxlLnRvcCA9IGAke2UuY2xpZW50WX1weGA7XG4gIHRoaXMuZWxlbWVudF8uc3R5bGUubGVmdCA9IGAke2UuY2xpZW50WH1weGA7XG4gIGNvbnN0IGRvY1NpemUgPSBodGVybS5nZXRDbGllbnRTaXplKHRoaXMuZG9jdW1lbnRfLmJvZHkpO1xuXG4gIHRoaXMuZWxlbWVudF8uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cbiAgLy8gV2UgY2FuJ3QgY2FsY3VsYXRlIHNpemVzIHVudGlsIGFmdGVyIGl0J3MgZGlzcGxheWVkLlxuICBjb25zdCBlbGVTaXplID0gaHRlcm0uZ2V0Q2xpZW50U2l6ZSh0aGlzLmVsZW1lbnRfKTtcbiAgLy8gTWFrZSBzdXJlIHRoZSBtZW51IGlzbid0IGNsaXBwZWQgb3V0c2lkZSBvZiB0aGUgY3VycmVudCBlbGVtZW50LlxuICBjb25zdCBtaW5ZID0gTWF0aC5tYXgoMCwgZG9jU2l6ZS5oZWlnaHQgLSBlbGVTaXplLmhlaWdodCk7XG4gIGNvbnN0IG1pblggPSBNYXRoLm1heCgwLCBkb2NTaXplLndpZHRoIC0gZWxlU2l6ZS53aWR0aCk7XG4gIGlmIChtaW5ZIDwgZS5jbGllbnRZKSB7XG4gICAgdGhpcy5lbGVtZW50Xy5zdHlsZS50b3AgPSBgJHttaW5ZfXB4YDtcbiAgfVxuICBpZiAobWluWCA8IGUuY2xpZW50WCkge1xuICAgIHRoaXMuZWxlbWVudF8uc3R5bGUubGVmdCA9IGAke21pblh9cHhgO1xuICB9XG59O1xuXG4vKipcbiAqIEhpZGUgdGhlIGNvbnRleHQgbWVudS5cbiAqL1xuaHRlcm0uQ29udGV4dE1lbnUucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLmVsZW1lbnRfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lbGVtZW50Xy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xufTtcbi8vIFNPVVJDRSBGSUxFOiBodGVybS9qcy9odGVybV9mcmFtZS5qc1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBPUyBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxubGliLnJ0ZGVwKCdsaWIuZicpO1xuXG4vKipcbiAqIEZpcnN0IGRyYWZ0IG9mIHRoZSBpbnRlcmZhY2UgYmV0d2VlbiB0aGUgdGVybWluYWwgYW5kIGEgdGhpcmQgcGFydHkgZGlhbG9nLlxuICpcbiAqIFRoaXMgaXMgcm91Z2guICBJdCdzIGp1c3QgdGhlIHRlcm1pbmFsLT5kaWFsb2cgbGF5ZXIuICBUbyBjb21wbGV0ZSB0aGluZ3NcbiAqIHdlJ2xsIGFsc28gbmVlZCBhIGNvbW1hbmQtPnRlcm1pbmFsIGxheWVyLiAgVGhhdCB3aWxsIGhhdmUgdG8gZmFjaWxpdGF0ZVxuICogY29tbWFuZC0+dGVybWluYWwtPmRpYWxvZyBvciBkaXJlY3QgY29tbWFuZC0+ZGlhbG9nIGNvbW11bmljYXRpb24uXG4gKlxuICogSSBpbWFnaW5lIHRoaXMgY2xhc3Mgd2lsbCBjaGFuZ2Ugc2lnbmlmaWNhbnRseSB3aGVuIHRoYXQgaGFwcGVucy5cbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdCBhIG5ldyBmcmFtZSBmb3IgdGhlIGdpdmVuIHRlcm1pbmFsLlxuICpcbiAqIEBwYXJhbSB0ZXJtaW5hbCB7aHRlcm0uVGVybWluYWx9IFRoZSBwYXJlbnQgdGVybWluYWwgb2JqZWN0LlxuICogQHBhcmFtIHVybCB7U3RyaW5nfSBUaGUgdXJsIHRvIGxvYWQgaW4gdGhlIGZyYW1lLlxuICogQHBhcmFtIG9wdF9vcHRpb25zIHtPYmplY3R9IE9wdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSBmcmFtZS4gIE5vdCBpbXBsZW1lbnRlZC5cbiAqL1xuaHRlcm0uRnJhbWUgPSBmdW5jdGlvbih0ZXJtaW5hbCwgdXJsLCBvcHRfb3B0aW9ucykge1xuICB0aGlzLnRlcm1pbmFsXyA9IHRlcm1pbmFsO1xuICB0aGlzLmRpdl8gPSB0ZXJtaW5hbC5kaXZfO1xuICB0aGlzLnVybCA9IHVybDtcbiAgdGhpcy5vcHRpb25zID0gb3B0X29wdGlvbnMgfHwge307XG4gIHRoaXMuaWZyYW1lXyA9IG51bGw7XG4gIHRoaXMuY29udGFpbmVyXyA9IG51bGw7XG4gIHRoaXMubWVzc2FnZUNoYW5uZWxfID0gbnVsbDtcbn07XG5cbi8qKlxuICogSGFuZGxlIG1lc3NhZ2VzIGZyb20gdGhlIGlmcmFtZS5cbiAqL1xuaHRlcm0uRnJhbWUucHJvdG90eXBlLm9uTWVzc2FnZV8gPSBmdW5jdGlvbihlKSB7XG4gIHN3aXRjaCAoZS5kYXRhLm5hbWUpIHtcbiAgICBjYXNlICdpcGMtaW5pdC1vayc6XG4gICAgICAvLyBXZSBnZXQgdGhpcyByZXNwb25zZSBhZnRlciB3ZSBzZW5kIHRoZW0gaXBjLWluaXQgYW5kIHRoZXkgZmluaXNoLlxuICAgICAgdGhpcy5zZW5kVGVybWluYWxJbmZvXygpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ3Rlcm1pbmFsLWluZm8tb2snOlxuICAgICAgLy8gV2UgZ2V0IHRoaXMgcmVzcG9uc2UgYWZ0ZXIgd2Ugc2VuZCB0aGVtIHRlcm1pbmFsLWluZm8gYW5kIHRoZXkgZmluaXNoLlxuICAgICAgLy8gU2hvdyB0aGUgZmluaXNoZWQgZnJhbWUsIGFuZCB0aGVuIHJlYmluZCBvdXIgbWVzc2FnZSBoYW5kbGVyIHRvIHRoZVxuICAgICAgLy8gY2FsbGJhY2sgYmVsb3cuXG4gICAgICB0aGlzLmNvbnRhaW5lcl8uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgIHRoaXMucG9zdE1lc3NhZ2UoJ3Zpc2libGUnKTtcbiAgICAgIHRoaXMubWVzc2FnZUNoYW5uZWxfLnBvcnQxLm9ubWVzc2FnZSA9IHRoaXMub25NZXNzYWdlLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLm9uTG9hZCgpO1xuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zb2xlLmxvZygnVW5rbm93biBtZXNzYWdlIGZyb20gZnJhbWU6JywgZS5kYXRhKTtcbiAgICAgIHJldHVybjtcbiAgfVxufTtcblxuLyoqXG4gKiBDbGllbnRzIGNvdWxkIG92ZXJyaWRlIHRoaXMsIEkgZ3Vlc3MuXG4gKlxuICogSXQgZG9lc24ndCBzdXBwb3J0IG11bHRpcGxlIGxpc3RlbmVycywgYnV0IEknbSBub3Qgc3VyZSB0aGF0IHdvdWxkIG1ha2Ugc2Vuc2VcbiAqIGhlcmUuICBJdCdzIHByb2JhYmx5IGJldHRlciB0byBzcGVhayBkaXJlY3RseSB0byBvdXIgcGFyZW50cy5cbiAqL1xuaHRlcm0uRnJhbWUucHJvdG90eXBlLm9uTWVzc2FnZSA9IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogSGFuZGxlIGlmcmFtZSBvbkxvYWQgZXZlbnQuXG4gKi9cbmh0ZXJtLkZyYW1lLnByb3RvdHlwZS5vbkxvYWRfID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMubWVzc2FnZUNoYW5uZWxfID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gIHRoaXMubWVzc2FnZUNoYW5uZWxfLnBvcnQxLm9ubWVzc2FnZSA9IHRoaXMub25NZXNzYWdlXy5iaW5kKHRoaXMpO1xuICB0aGlzLm1lc3NhZ2VDaGFubmVsXy5wb3J0MS5zdGFydCgpO1xuICB0aGlzLmlmcmFtZV8uY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShcbiAgICB7IG5hbWU6ICdpcGMtaW5pdCcsIGFyZ3Y6IFt7IG1lc3NhZ2VQb3J0OiB0aGlzLm1lc3NhZ2VDaGFubmVsXy5wb3J0MiB9XSB9LFxuICAgIHRoaXMudXJsLFxuICAgIFt0aGlzLm1lc3NhZ2VDaGFubmVsXy5wb3J0Ml0sXG4gICk7XG59O1xuXG4vKipcbiAqIENsaWVudHMgbWF5IG92ZXJyaWRlIHRoaXMuXG4gKi9cbmh0ZXJtLkZyYW1lLnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbigpIHt9O1xuXG4vKipcbiAqIFNlbmRzIHRoZSB0ZXJtaW5hbC1pbmZvIG1lc3NhZ2UgdG8gdGhlIGlmcmFtZS5cbiAqL1xuaHRlcm0uRnJhbWUucHJvdG90eXBlLnNlbmRUZXJtaW5hbEluZm9fID0gZnVuY3Rpb24oKSB7XG4gIGxpYi5pMThuLmdldEFjY2VwdExhbmd1YWdlcyhcbiAgICBmdW5jdGlvbihsYW5ndWFnZXMpIHtcbiAgICAgIHRoaXMucG9zdE1lc3NhZ2UoJ3Rlcm1pbmFsLWluZm8nLCBbXG4gICAgICAgIHtcbiAgICAgICAgICBhY2NlcHRMYW5ndWFnZXM6IGxhbmd1YWdlcyxcbiAgICAgICAgICBmb3JlZ3JvdW5kQ29sb3I6IHRoaXMudGVybWluYWxfLmdldEZvcmVncm91bmRDb2xvcigpLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy50ZXJtaW5hbF8uZ2V0QmFja2dyb3VuZENvbG9yKCksXG4gICAgICAgICAgY3Vyc29yQ29sb3I6IHRoaXMudGVybWluYWxfLmdldEN1cnNvckNvbG9yKCksXG4gICAgICAgICAgZm9udFNpemU6IHRoaXMudGVybWluYWxfLmdldEZvbnRTaXplKCksXG4gICAgICAgICAgZm9udEZhbWlseTogdGhpcy50ZXJtaW5hbF8uZ2V0Rm9udEZhbWlseSgpLFxuICAgICAgICAgIGJhc2VVUkw6IGxpYi5mLmdldFVSTCgnLycpLFxuICAgICAgICB9LFxuICAgICAgXSk7XG4gICAgfS5iaW5kKHRoaXMpLFxuICApO1xufTtcblxuLyoqXG4gKiBVc2VyIGNsaWNrZWQgdGhlIGNsb3NlIGJ1dHRvbiBvbiB0aGUgZnJhbWUgZGVjb3JhdGlvbi5cbiAqL1xuaHRlcm0uRnJhbWUucHJvdG90eXBlLm9uQ2xvc2VDbGlja2VkXyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENsb3NlIHRoaXMgZnJhbWUuXG4gKi9cbmh0ZXJtLkZyYW1lLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuY29udGFpbmVyXyB8fCAhdGhpcy5jb250YWluZXJfLnBhcmVudE5vZGUpIHJldHVybjtcblxuICB0aGlzLmNvbnRhaW5lcl8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmNvbnRhaW5lcl8pO1xuICB0aGlzLm9uQ2xvc2UoKTtcbn07XG5cbi8qKlxuICogQ2xpZW50cyBtYXkgb3ZlcnJpZGUgdGhpcy5cbiAqL1xuaHRlcm0uRnJhbWUucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHt9O1xuXG4vKipcbiAqIFNlbmQgYSBtZXNzYWdlIHRvIHRoZSBpZnJhbWUuXG4gKi9cbmh0ZXJtLkZyYW1lLnByb3RvdHlwZS5wb3N0TWVzc2FnZSA9IGZ1bmN0aW9uKG5hbWUsIGFyZ3YpIHtcbiAgaWYgKCF0aGlzLm1lc3NhZ2VDaGFubmVsXykgdGhyb3cgbmV3IEVycm9yKCdNZXNzYWdlIGNoYW5uZWwgaXMgbm90IHNldCB1cC4nKTtcblxuICB0aGlzLm1lc3NhZ2VDaGFubmVsXy5wb3J0MS5wb3N0TWVzc2FnZSh7IG5hbWU6IG5hbWUsIGFyZ3Y6IGFyZ3YgfSk7XG59O1xuXG4vKipcbiAqIFNob3cgdGhlIFVJIGZvciB0aGlzIGZyYW1lLlxuICpcbiAqIFRoZSBpZnJhbWUgc3JjIGlzIG5vdCBsb2FkZWQgdW50aWwgdGhpcyBtZXRob2QgaXMgY2FsbGVkLlxuICovXG5odGVybS5GcmFtZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gb3B0KG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmIChuYW1lIGluIHNlbGYub3B0aW9ucykgcmV0dXJuIHNlbGYub3B0aW9uc1tuYW1lXTtcblxuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMuY29udGFpbmVyXyAmJiB0aGlzLmNvbnRhaW5lcl8ucGFyZW50Tm9kZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZyYW1lIGFscmVhZHkgdmlzaWJsZScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBoZWFkZXJIZWlnaHQgPSAnMTZweCc7XG5cbiAgdmFyIGRpdlNpemUgPSBodGVybS5nZXRDbGllbnRTaXplKHRoaXMuZGl2Xyk7XG5cbiAgdmFyIHdpZHRoID0gb3B0KCd3aWR0aCcsIDY0MCk7XG4gIHZhciBoZWlnaHQgPSBvcHQoJ2hlaWdodCcsIDQ4MCk7XG4gIHZhciBsZWZ0ID0gKGRpdlNpemUud2lkdGggLSB3aWR0aCkgLyAyO1xuICB2YXIgdG9wID0gKGRpdlNpemUuaGVpZ2h0IC0gaGVpZ2h0KSAvIDI7XG5cbiAgdmFyIGRvY3VtZW50ID0gdGhpcy50ZXJtaW5hbF8uZG9jdW1lbnRfO1xuXG4gIHZhciBjb250YWluZXIgPSAodGhpcy5jb250YWluZXJfID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuICBjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9XG4gICAgJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsnICtcbiAgICAnZGlzcGxheTogbm9uZTsnICtcbiAgICAnZmxleC1kaXJlY3Rpb246IGNvbHVtbjsnICtcbiAgICAndG9wOiAxMCU7JyArXG4gICAgJ2xlZnQ6IDQlOycgK1xuICAgICd3aWR0aDogOTAlOycgK1xuICAgICdoZWlnaHQ6IDgwJTsnICtcbiAgICAnbWluLWhlaWdodDogMjAlOycgK1xuICAgICdtYXgtaGVpZ2h0OiA4MCU7JyArXG4gICAgJ2JveC1zaGFkb3c6IDAgMCAycHggJyArXG4gICAgdGhpcy50ZXJtaW5hbF8uZ2V0Rm9yZWdyb3VuZENvbG9yKCkgK1xuICAgICc7JyArXG4gICAgJ2JvcmRlcjogMnB4ICcgK1xuICAgIHRoaXMudGVybWluYWxfLmdldEZvcmVncm91bmRDb2xvcigpICtcbiAgICAnIHNvbGlkOyc7XG5cbiAgaWYgKGZhbHNlKSB7XG4gICAgLy8gTm8gdXNlIGZvciB0aGUgY2xvc2UgYnV0dG9uLCBzbyBubyB1c2UgZm9yIHRoZSB3aW5kb3cgaGVhZGVyIGVpdGhlci5cbiAgICB2YXIgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgaGVhZGVyLnN0eWxlLmNzc1RleHQgPVxuICAgICAgJ2Rpc3BsYXk6IGZsZXg7JyArXG4gICAgICAnanVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDsnICtcbiAgICAgICdoZWlnaHQ6ICcgK1xuICAgICAgaGVhZGVySGVpZ2h0ICtcbiAgICAgICc7JyArXG4gICAgICAnYmFja2dyb3VuZC1jb2xvcjogJyArXG4gICAgICB0aGlzLnRlcm1pbmFsXy5nZXRGb3JlZ3JvdW5kQ29sb3IoKSArXG4gICAgICAnOycgK1xuICAgICAgJ2NvbG9yOiAnICtcbiAgICAgIHRoaXMudGVybWluYWxfLmdldEJhY2tncm91bmRDb2xvcigpICtcbiAgICAgICc7JyArXG4gICAgICAnZm9udC1zaXplOiAxNnB4OycgK1xuICAgICAgJ2ZvbnQtZmFtaWx5OiAnICtcbiAgICAgIHRoaXMudGVybWluYWxfLmdldEZvbnRGYW1pbHkoKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaGVhZGVyKTtcblxuICAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICAgIGJ1dHRvbi5zdHlsZS5jc3NUZXh0ID1cbiAgICAgICdtYXJnaW4tdG9wOiAtM3B4OycgKyAnbWFyZ2luLXJpZ2h0OiAzcHg7JyArICdjdXJzb3I6IHBvaW50ZXI7JztcbiAgICBidXR0b24udGV4dENvbnRlbnQgPSAnXFx1MmEyZic7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsb3NlQ2xpY2tlZF8uYmluZCh0aGlzKSk7XG4gICAgaGVhZGVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gIH1cblxuICB2YXIgaWZyYW1lID0gKHRoaXMuaWZyYW1lXyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpKTtcbiAgaWZyYW1lLm9ubG9hZCA9IHRoaXMub25Mb2FkXy5iaW5kKHRoaXMpO1xuICBpZnJhbWUuc3R5bGUuY3NzVGV4dCA9ICdkaXNwbGF5OiBmbGV4OycgKyAnZmxleDogMTsnICsgJ3dpZHRoOiAxMDAlJztcbiAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3JjJywgdGhpcy51cmwpO1xuICBpZnJhbWUuc2V0QXR0cmlidXRlKCdzZWFtbGVzcycsIHRydWUpO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcblxuICB0aGlzLmRpdl8uYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbn07XG4vLyBTT1VSQ0UgRklMRTogaHRlcm0vanMvaHRlcm1fa2V5Ym9hcmQuanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxpYi5ydGRlcCgnaHRlcm0uS2V5Ym9hcmQuS2V5TWFwJyk7XG5cbi8qKlxuICogS2V5Ym9hcmQgaGFuZGxlci5cbiAqXG4gKiBDb25zdW1lcyBvbktleSogZXZlbnRzIGFuZCBpbnZva2VzIG9uVlRLZXlzdHJva2Ugb24gdGhlIGFzc29jaWF0ZWRcbiAqIGh0ZXJtLlRlcm1pbmFsIG9iamVjdC5cbiAqXG4gKiBTZWUgYWxzbzogW1hURVJNXSBhcyByZWZlcmVuY2VkIGluIHZ0LmpzLlxuICpcbiAqIEBwYXJhbSB7aHRlcm0uVGVybWluYWx9IFRoZSBUZXJtaW5hbCBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5Ym9hcmQuXG4gKi9cbmh0ZXJtLktleWJvYXJkID0gZnVuY3Rpb24odGVybWluYWwpIHtcbiAgLy8gVGhlIHBhcmVudCB2dCBpbnRlcnByZXRlci5cbiAgdGhpcy50ZXJtaW5hbCA9IHRlcm1pbmFsO1xuXG4gIC8vIFRoZSBlbGVtZW50IHdlJ3JlIGN1cnJlbnRseSBjYXB0dXJpbmcga2V5Ym9hcmQgZXZlbnRzIGZvci5cbiAgdGhpcy5rZXlib2FyZEVsZW1lbnRfID0gbnVsbDtcblxuICAvLyBUaGUgZXZlbnQgaGFuZGxlcnMgd2UgYXJlIGludGVyZXN0ZWQgaW4sIGFuZCB0aGVpciBib3VuZCBjYWxsYmFja3MsIHNhdmVkXG4gIC8vIHNvIHRoZXkgY2FuIGJlIHVuaW5zdGFsbGVkIHdpdGggcmVtb3ZlRXZlbnRMaXN0ZW5lciwgd2hlbiByZXF1aXJlZC5cbiAgdGhpcy5oYW5kbGVyc18gPSBbXG4gICAgWydmb2N1c291dCcsIHRoaXMub25Gb2N1c091dF8uYmluZCh0aGlzKV0sXG4gICAgWydrZXlkb3duJywgdGhpcy5vbktleURvd25fLmJpbmQodGhpcyldLFxuICAgIFsna2V5cHJlc3MnLCB0aGlzLm9uS2V5UHJlc3NfLmJpbmQodGhpcyldLFxuICAgIFsna2V5dXAnLCB0aGlzLm9uS2V5VXBfLmJpbmQodGhpcyldLFxuICAgIFsndGV4dElucHV0JywgdGhpcy5vblRleHRJbnB1dF8uYmluZCh0aGlzKV0sXG4gIF07XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGtleSBtYXAuXG4gICAqL1xuICB0aGlzLmtleU1hcCA9IG5ldyBodGVybS5LZXlib2FyZC5LZXlNYXAodGhpcyk7XG5cbiAgdGhpcy5iaW5kaW5ncyA9IG5ldyBodGVybS5LZXlib2FyZC5CaW5kaW5ncyh0aGlzKTtcblxuICAvKipcbiAgICogbm9uZTogRGlzYWJsZSBhbnkgQWx0R3IgcmVsYXRlZCBtdW5naW5nLlxuICAgKiBjdHJsLWFsdDogQXNzdW1lIEN0cmwrQWx0IG1lYW5zIEFsdEdyLlxuICAgKiBsZWZ0LWFsdDogQXNzdW1lIGxlZnQgQWx0IG1lYW5zIEFsdEdyLlxuICAgKiByaWdodC1hbHQ6IEFzc3VtZSByaWdodCBBbHQgbWVhbnMgQWx0R3IuXG4gICAqL1xuICB0aGlzLmFsdEdyTW9kZSA9ICdub25lJztcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgU2hpZnQtSW5zZXJ0IHdpbGwgZmFsbCB0aHJvdWdoIHRvIHRoZSBicm93c2VyIGFzIGEgcGFzdGUuXG4gICAqIElmIGZhbHNlLCB0aGUga2V5c3Ryb2tlIHdpbGwgYmUgc2VudCB0byB0aGUgaG9zdC5cbiAgICovXG4gIHRoaXMuc2hpZnRJbnNlcnRQYXN0ZSA9IHRydWU7XG5cbiAgLyoqXG4gICAqIElmIHRydWUsIGhvbWUvZW5kIHdpbGwgY29udHJvbCB0aGUgdGVybWluYWwgc2Nyb2xsYmFyIGFuZCBzaGlmdCBob21lL2VuZFxuICAgKiB3aWxsIHNlbmQgdGhlIFZUIGtleWNvZGVzLiAgSWYgZmFsc2UgdGhlbiBob21lL2VuZCBzZW5kcyBWVCBjb2RlcyBhbmRcbiAgICogc2hpZnQgaG9tZS9lbmQgc2Nyb2xscy5cbiAgICovXG4gIHRoaXMuaG9tZUtleXNTY3JvbGwgPSBmYWxzZTtcblxuICAvKipcbiAgICogU2FtZSBhcyBhYm92ZSwgZXhjZXB0IGZvciBwYWdlIHVwL3BhZ2UgZG93bi5cbiAgICovXG4gIHRoaXMucGFnZUtleXNTY3JvbGwgPSBmYWxzZTtcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgQ3RybC1QbHVzL01pbnVzL1plcm8gY29udHJvbHMgem9vbS5cbiAgICogSWYgZmFsc2UsIEN0cmwtU2hpZnQtUGx1cy9NaW51cy9aZXJvIGNvbnRyb2xzIHpvb20sIEN0cmwtTWludXMgc2VuZHMgXl8sXG4gICAqIEN0cmwtUGx1cy9aZXJvIGRvIG5vdGhpbmcuXG4gICAqL1xuICB0aGlzLmN0cmxQbHVzTWludXNaZXJvWm9vbSA9IHRydWU7XG5cbiAgLyoqXG4gICAqIEN0cmwrQyBjb3BpZXMgaWYgdHJ1ZSwgc2VuZHMgXkMgdG8gaG9zdCBpZiBmYWxzZS5cbiAgICogQ3RybCtTaGlmdCtDIHNlbmRzIF5DIHRvIGhvc3QgaWYgdHJ1ZSwgY29waWVzIGlmIGZhbHNlLlxuICAgKi9cbiAgdGhpcy5jdHJsQ0NvcHkgPSBmYWxzZTtcblxuICAvKipcbiAgICogQ3RybCtWIHBhc3RlcyBpZiB0cnVlLCBzZW5kcyBeViB0byBob3N0IGlmIGZhbHNlLlxuICAgKiBDdHJsK1NoaWZ0K1Ygc2VuZHMgXlYgdG8gaG9zdCBpZiB0cnVlLCBwYXN0ZXMgaWYgZmFsc2UuXG4gICAqL1xuICB0aGlzLmN0cmxWUGFzdGUgPSBmYWxzZTtcblxuICAvKipcbiAgICogRW5hYmxlL2Rpc2FibGUgYXBwbGljYXRpb24ga2V5cGFkLlxuICAgKlxuICAgKiBUaGlzIGNoYW5nZXMgdGhlIHdheSBudW1lcmljIGtleXMgYXJlIHNlbnQgZnJvbSB0aGUga2V5Ym9hcmQuXG4gICAqL1xuICB0aGlzLmFwcGxpY2F0aW9uS2V5cGFkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEVuYWJsZS9kaXNhYmxlIHRoZSBhcHBsaWNhdGlvbiBjdXJzb3IgbW9kZS5cbiAgICpcbiAgICogVGhpcyBjaGFuZ2VzIHRoZSB3YXkgY3Vyc29yIGtleXMgYXJlIHNlbnQgZnJvbSB0aGUga2V5Ym9hcmQuXG4gICAqL1xuICB0aGlzLmFwcGxpY2F0aW9uQ3Vyc29yID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBiYWNrc3BhY2Ugc2hvdWxkIHNlbmQgQlMgKCdcXHgwOCcsIGFrYSBeSCkuICBPdGhlcndpc2VcbiAgICogdGhlIGJhY2tzcGFjZSBrZXkgc2hvdWxkIHNlbmQgJ1xceDdmJy5cbiAgICovXG4gIHRoaXMuYmFja3NwYWNlU2VuZHNCYWNrc3BhY2UgPSBmYWxzZTtcblxuICAvKipcbiAgICogVGhlIGVuY29kaW5nIG1ldGhvZCBmb3IgZGF0YSBzZW50IHRvIHRoZSBob3N0LlxuICAgKi9cbiAgdGhpcy5jaGFyYWN0ZXJFbmNvZGluZyA9ICd1dGYtOCc7XG5cbiAgLyoqXG4gICAqIFNldCB3aGV0aGVyIHRoZSBtZXRhIGtleSBzZW5kcyBhIGxlYWRpbmcgZXNjYXBlIG9yIG5vdC5cbiAgICovXG4gIHRoaXMubWV0YVNlbmRzRXNjYXBlID0gdHJ1ZTtcblxuICAvKipcbiAgICogU2V0IHdoZXRoZXIgbWV0YS1WIGdldHMgcGFzc2VkIHRvIGhvc3QuXG4gICAqL1xuICB0aGlzLnBhc3NNZXRhViA9IHRydWU7XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIGhvdyB0aGUgYWx0IGtleSBpcyBoYW5kbGVkLlxuICAgKlxuICAgKiAgZXNjYXBlLi4uLi4uLiBTZW5kIGFuIEVTQyBwcmVmaXguXG4gICAqICA4LWJpdC4uLi4uLi4uIEFkZCAxMjggdG8gdGhlIHVuc2hpZnRlZCBjaGFyYWN0ZXIgYXMgaW4geHRlcm0uXG4gICAqICBicm93c2VyLWtleS4uIFdhaXQgZm9yIHRoZSBrZXlwcmVzcyBldmVudCBhbmQgc2VlIHdoYXQgdGhlIGJyb3dzZXIgc2F5cy5cbiAgICogICAgICAgICAgICAgICAgKFRoaXMgd29uJ3Qgd29yayB3ZWxsIG9uIHBsYXRmb3JtcyB3aGVyZSB0aGUgYnJvd3NlclxuICAgKiAgICAgICAgICAgICAgICAgcGVyZm9ybXMgYSBkZWZhdWx0IGFjdGlvbiBmb3Igc29tZSBhbHQgc2VxdWVuY2VzLilcbiAgICpcbiAgICogVGhpcyBzZXR0aW5nIG9ubHkgbWF0dGVycyB3aGVuIGFsdCBpcyBkaXN0aW5jdCBmcm9tIG1ldGEgKGFsdElzTWV0YSBpc1xuICAgKiBmYWxzZS4pXG4gICAqL1xuICB0aGlzLmFsdFNlbmRzV2hhdCA9ICdlc2NhcGUnO1xuXG4gIC8qKlxuICAgKiBTZXQgd2hldGhlciB0aGUgYWx0IGtleSBhY3RzIGFzIGEgbWV0YSBrZXksIGluc3RlYWQgb2YgcHJvZHVjaW5nIDgtYml0XG4gICAqIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIFRydWUgdG8gZW5hYmxlLCBmYWxzZSB0byBkaXNhYmxlLCBudWxsIHRvIGF1dG9kZXRlY3QgYmFzZWQgb24gcGxhdGZvcm0uXG4gICAqL1xuICB0aGlzLmFsdElzTWV0YSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0cmllcyB0byBkZXRlY3QgREVMIGtleSBldmVudHMgdGhhdCBhcmUgZnJvbSBhbHQtYmFja3NwYWNlIG9uXG4gICAqIENocm9tZSBPUyB2cyBmcm9tIGEgdHJ1ZSBERUwga2V5IHByZXNzLlxuICAgKlxuICAgKiBCYWNrZ3JvdW5kOiBBdCB0aGUgdGltZSBvZiB3cml0aW5nLCBvbiBDaHJvbWUgT1MsIGFsdC1iYWNrc3BhY2UgaXMgbWFwcGVkXG4gICAqIHRvIERFTC4gU29tZSB1c2VycyBtYXkgYmUgaGFwcHkgd2l0aCB0aGlzLCBidXQgb3RoZXJzIG1heSBiZSBmcnVzdHJhdGVkXG4gICAqIHRoYXQgaXQncyBpbXBvc3NpYmxlIHRvIGRvIG1ldGEtYmFja3NwYWNlLiBJZiB0aGUgdXNlciBlbmFibGVzIHRoaXMgcHJlZixcbiAgICogd2UgdXNlIGEgdHJpY2sgdG8gdGVsbCBhIHRydWUgREVMIGtleXByZXNzIGZyb20gYWx0LWJhY2tzcGFjZTogb25cbiAgICogYWx0LWJhY2tzcGFjZSwgd2Ugd2lsbCBzZWUgdGhlIGFsdCBrZXkgZ28gZG93biwgdGhlbiBnZXQgYSBERUwga2V5c3Ryb2tlXG4gICAqIHRoYXQgaW5kaWNhdGVzIHRoYXQgYWx0IGlzIG5vdCBwcmVzc2VkLiBTZWUgaHR0cHM6Ly9jcmJ1Zy5jb20vMTc0NDEwIC5cbiAgICovXG4gIHRoaXMuYWx0QmFja3NwYWNlSXNNZXRhQmFja3NwYWNlID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUgY3VycmVudCBhbHQta2V5IHN0YXRlLCB3aGljaCBpcyBuZWNlc3NhcnkgZm9yXG4gICAqIHRoZSBhbHRCYWNrc3BhY2VJc01ldGFCYWNrc3BhY2UgcHJlZmVyZW5jZSBhYm92ZSBhbmQgZm9yIHRoZSBhbHRHck1vZGVcbiAgICogcHJlZmVyZW5jZS4gIFRoaXMgaXMgYSBiaXRtYXAgd2l0aCB3aGVyZSBiaXQgcG9zaXRpb25zIGNvcnJlc3BvbmQgdG8gdGhlXG4gICAqIFwibG9jYXRpb25cIiBwcm9wZXJ0eSBvZiB0aGUga2V5IGV2ZW50LlxuICAgKi9cbiAgdGhpcy5hbHRLZXlQcmVzc2VkID0gMDtcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgQ2hyb21lIE9TIG1lZGlhIGtleXMgd2lsbCBiZSBtYXBwZWQgdG8gdGhlaXIgRi1rZXkgZXF1aXZhbGVudC5cbiAgICogRS5nLiBcIkJhY2tcIiB3aWxsIGJlIG1hcHBlZCB0byBGMS4gSWYgZmFsc2UsIENocm9tZSB3aWxsIGhhbmRsZSB0aGUga2V5cy5cbiAgICovXG4gIHRoaXMubWVkaWFLZXlzQXJlRktleXMgPSBmYWxzZTtcblxuICAvKipcbiAgICogSG9sZHMgdGhlIHByZXZpb3VzIHNldHRpbmcgb2YgYWx0U2VuZHNXaGF0IHdoZW4gREVDU0VUIDEwMzkgaXMgdXNlZC4gV2hlblxuICAgKiBERUNSU1QgMTAzOSBpcyB1c2VkLCBhbHRTZW5kc1doYXQgaXMgY2hhbmdlZCBiYWNrIHRvIHRoaXMgYW5kIHRoaXMgaXNcbiAgICogbnVsbGVkIG91dC5cbiAgICovXG4gIHRoaXMucHJldmlvdXNBbHRTZW5kc1doYXRfID0gbnVsbDtcbn07XG5cbi8qKlxuICogU3BlY2lhbCBoYW5kbGluZyBmb3Iga2V5Q29kZXMgaW4gYSBrZXlib2FyZCBsYXlvdXQuXG4gKi9cbmh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMgPSB7XG4gIC8qKlxuICAgKiBDYWxsIHByZXZlbnREZWZhdWx0IGFuZCBzdG9wUHJvcGFnYXRpb24gZm9yIHRoaXMga2V5IGV2ZW50IGFuZCBub3RoaW5nXG4gICAqIGVsc2UuXG4gICAqL1xuICBDQU5DRUw6IGxpYi5mLmNyZWF0ZUVudW0oJ0NBTkNFTCcpLFxuXG4gIC8qKlxuICAgKiBUaGlzIHBlcmZvcm1zIHRoZSBkZWZhdWx0IHRlcm1pbmFsIGFjdGlvbiBmb3IgdGhlIGtleS4gIElmIHVzZWQgaW4gdGhlXG4gICAqICdub3JtYWwnIGFjdGlvbiBhbmQgdGhlIHRoZSBrZXlzdHJva2UgcmVwcmVzZW50cyBhIHByaW50YWJsZSBrZXksIHRoZVxuICAgKiBjaGFyYWN0ZXIgd2lsbCBiZSBzZW50IHRvIHRoZSBob3N0LiAgSWYgdXNlZCBpbiBvbmUgb2YgdGhlIG1vZGlmaWVyXG4gICAqIGFjdGlvbnMsIHRoZSB0ZXJtaW5hbCB3aWxsIHBlcmZvcm0gdGhlIG5vcm1hbCBhY3Rpb24gYWZ0ZXIgKHBvc3NpYmx5KVxuICAgKiBhbHRlcmluZyBpdC5cbiAgICpcbiAgICogIC0gSWYgdGhlIG5vcm1hbCBzZXF1ZW5jZSBzdGFydHMgd2l0aCBDU0ksIHRoZSBzZXF1ZW5jZSB3aWxsIGJlIGFkanVzdGVkXG4gICAqICAgIHRvIGluY2x1ZGUgdGhlIG1vZGlmaWVyIHBhcmFtZXRlciBhcyBkZXNjcmliZWQgaW4gW1hURVJNXSBpbiB0aGUgZmluYWxcbiAgICogICAgdGFibGUgb2YgdGhlIFwiUEMtU3R5bGUgRnVuY3Rpb24gS2V5c1wiIHNlY3Rpb24uXG4gICAqXG4gICAqICAtIElmIHRoZSBjb250cm9sIGtleSBpcyBkb3duIGFuZCB0aGUga2V5IHJlcHJlc2VudHMgYSBwcmludGFibGUgY2hhcmFjdGVyLFxuICAgKiAgICBhbmQgdGhlIHVwcGVyY2FzZSB2ZXJzaW9uIG9mIHRoZSB1bnNoaWZ0ZWQga2V5Y2FwIGlzIGJldHdlZW5cbiAgICogICAgNjQgKEFTQ0lJICdAJykgYW5kIDk1IChBU0NJSSAnXycpLCB0aGVuIHRoZSB1cHBlcmNhc2UgdmVyc2lvbiBvZiB0aGVcbiAgICogICAgdW5zaGlmdGVkIGtleWNhcCBtaW51cyA2NCBpcyBzZW50LiAgVGhpcyBtYWtlcyAnXkAnIHNlbmQgJ1xceDAwJyBhbmRcbiAgICogICAgJ15fJyBzZW5kICdcXHgxZicuICAoTm90ZSB0aGF0IG9uZSBoaWdoZXIgdGhhdCAweDFmIGlzIDB4MjAsIHdoaWNoIGlzXG4gICAqICAgIHRoZSBmaXJzdCBwcmludGFibGUgQVNDSUkgdmFsdWUuKVxuICAgKlxuICAgKiAgLSBJZiB0aGUgYWx0IGtleSBpcyBkb3duIGFuZCB0aGUga2V5IHJlcHJlc2VudHMgYSBwcmludGFibGUgY2hhcmFjdGVyIHRoZW5cbiAgICogICAgdGhlIHZhbHVlIG9mIHRoZSBjaGFyYWN0ZXIgaXMgc2hpZnRlZCB1cCBieSAxMjguXG4gICAqXG4gICAqICAtIElmIG1ldGEgaXMgZG93biBhbmQgY29uZmlndXJlZCB0byBzZW5kIGFuIGVzY2FwZSwgJ1xceDFiJyB3aWxsIGJlIHNlbnRcbiAgICogICAgYmVmb3JlIHRoZSBub3JtYWwgYWN0aW9uIGlzIHBlcmZvcm1lZC5cbiAgICovXG4gIERFRkFVTFQ6IGxpYi5mLmNyZWF0ZUVudW0oJ0RFRkFVTFQnKSxcblxuICAvKipcbiAgICogQ2F1c2VzIHRoZSB0ZXJtaW5hbCB0byBvcHQgb3V0IG9mIGhhbmRsaW5nIHRoZSBrZXkgZXZlbnQsIGluc3RlYWQgbGV0dGluZ1xuICAgKiB0aGUgYnJvd3NlciBkZWFsIHdpdGggaXQuXG4gICAqL1xuICBQQVNTOiBsaWIuZi5jcmVhdGVFbnVtKCdQQVNTJyksXG5cbiAgLyoqXG4gICAqIEluc2VydCB0aGUgZmlyc3Qgb3Igc2Vjb25kIGNoYXJhY3RlciBvZiB0aGUga2V5Q2FwLCBiYXNlZCBvbiBlLnNoaWZ0S2V5LlxuICAgKiBUaGUga2V5IHdpbGwgYmUgaGFuZGxlZCBpbiBvbktleURvd24sIGFuZCBlLnByZXZlbnREZWZhdWx0KCkgd2lsbCBiZVxuICAgKiBjYWxsZWQuXG4gICAqXG4gICAqIEl0IGlzIHVzZWZ1bCBmb3IgYSBtb2RpZmllZCBrZXkgYWN0aW9uLCB3aGVyZSBpdCBlc3NlbnRpYWxseSBzdHJpcHMgdGhlXG4gICAqIG1vZGlmaWVyIHdoaWxlIHByZXZlbnRpbmcgdGhlIGJyb3dzZXIgZnJvbSByZWFjdGluZyB0byB0aGUga2V5LlxuICAgKi9cbiAgU1RSSVA6IGxpYi5mLmNyZWF0ZUVudW0oJ1NUUklQJyksXG59O1xuXG4vKipcbiAqIEVuY29kZSBhIHN0cmluZyBhY2NvcmRpbmcgdG8gdGhlICdzZW5kLWVuY29kaW5nJyBwcmVmZXJlbmNlLlxuICovXG5odGVybS5LZXlib2FyZC5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24oc3RyKSB7XG4gIGlmICh0aGlzLmNoYXJhY3RlckVuY29kaW5nID09ICd1dGYtOCcpXG4gICAgcmV0dXJuIHRoaXMudGVybWluYWwudnQuZW5jb2RlVVRGOChzdHIpO1xuXG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIENhcHR1cmUga2V5Ym9hcmQgZXZlbnRzIHNlbnQgdG8gdGhlIGFzc29jaWF0ZWQgZWxlbWVudC5cbiAqXG4gKiBUaGlzIGVuYWJsZXMgdGhlIGtleWJvYXJkLiAgQ2FwdHVyZWQgZXZlbnRzIGFyZSBjb25zdW1lZCBieSB0aGlzIGNsYXNzXG4gKiBhbmQgd2lsbCBub3QgcGVyZm9ybSB0aGVpciBkZWZhdWx0IGFjdGlvbiBvciBidWJibGUgdG8gb3RoZXIgZWxlbWVudHMuXG4gKlxuICogUGFzc2luZyBhIG51bGwgZWxlbWVudCB3aWxsIHVuaW5zdGFsbCB0aGUga2V5Ym9hcmQgaGFuZGxlcnMuXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB3aG9zZSBldmVudHMgc2hvdWxkIGJlIGNhcHR1cmVkLCBvclxuICogICAgIG51bGwgdG8gZGlzYWJsZSB0aGUga2V5Ym9hcmQuXG4gKi9cbmh0ZXJtLktleWJvYXJkLnByb3RvdHlwZS5pbnN0YWxsS2V5Ym9hcmQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50ID09IHRoaXMua2V5Ym9hcmRFbGVtZW50XykgcmV0dXJuO1xuXG4gIGlmIChlbGVtZW50ICYmIHRoaXMua2V5Ym9hcmRFbGVtZW50XykgdGhpcy5pbnN0YWxsS2V5Ym9hcmQobnVsbCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmhhbmRsZXJzXy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBoYW5kbGVyID0gdGhpcy5oYW5kbGVyc19baV07XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihoYW5kbGVyWzBdLCBoYW5kbGVyWzFdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5rZXlib2FyZEVsZW1lbnRfLnJlbW92ZUV2ZW50TGlzdGVuZXIoaGFuZGxlclswXSwgaGFuZGxlclsxXSk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5rZXlib2FyZEVsZW1lbnRfID0gZWxlbWVudDtcbn07XG5cbi8qKlxuICogRGlzYWJsZSBrZXlib2FyZCBldmVudCBjYXB0dXJlLlxuICpcbiAqIFRoaXMgd2lsbCBhbGxvdyB0aGUgYnJvd3NlciB0byBwcm9jZXNzIGtleSBldmVudHMgbm9ybWFsbHkuXG4gKi9cbmh0ZXJtLktleWJvYXJkLnByb3RvdHlwZS51bmluc3RhbGxLZXlib2FyZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmluc3RhbGxLZXlib2FyZChudWxsKTtcbn07XG5cbi8qKlxuICogSGFuZGxlIG9uVGV4dElucHV0IGV2ZW50cy5cbiAqXG4gKiBUaGVzZSBhcmUgZ2VuZXJhdGVkIHdoZW4gdXNpbmcgSU1FcywgVmlydHVhbCBLZXlib2FyZHMgKFZLcyksIGNvbXBvc2Uga2V5cyxcbiAqIFVuaWNvZGUgaW5wdXQsIGV0Yy4uLlxuICovXG5odGVybS5LZXlib2FyZC5wcm90b3R5cGUub25UZXh0SW5wdXRfID0gZnVuY3Rpb24oZSkge1xuICBpZiAoIWUuZGF0YSkgcmV0dXJuO1xuXG4gIC8vIEp1c3QgcGFzcyB0aGUgZ2VuZXJhdGVkIGJ1ZmZlciBzdHJhaWdodCBkb3duLiAgTm8gbmVlZCBmb3IgdXMgdG8gc3BsaXQgaXRcbiAgLy8gdXAgb3Igb3RoZXJ3aXNlIHBhcnNlIGl0IGFoZWFkIG9mIHRpbWVzLlxuICB0aGlzLnRlcm1pbmFsLm9uVlRLZXlzdHJva2UoZS5kYXRhKTtcbn07XG5cbi8qKlxuICogSGFuZGxlIG9uS2V5UHJlc3MgZXZlbnRzLlxuICovXG5odGVybS5LZXlib2FyZC5wcm90b3R5cGUub25LZXlQcmVzc18gPSBmdW5jdGlvbihlKSB7XG4gIHZhciBjb2RlO1xuXG4gIGlmIChcbiAgICAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSkgJiZcbiAgICAoZS5rZXlDb2RlID09IDk5IC8qICdjJyAqLyB8fCBlLmtleUNvZGUgPT0gMTE4KSAvKiAndicgKi9cbiAgKSB7XG4gICAgLy8gT24gRkYgdGhlIGtleSBwcmVzcyAobm90IGtleSBkb3duKSBldmVudCBnZXRzIGZpcmVkIGZvciBjb3B5L3Bhc3RlLlxuICAgIC8vIExldCBpdCBmYWxsIHRocm91Z2ggZm9yIHRoZSBkZWZhdWx0IGJyb3dzZXIgYmVoYXZpb3IuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGUua2V5Q29kZSA9PSA5IC8qIFRhYiAqLykge1xuICAgIC8vIE9uIEZGLCBhIGtleSBwcmVzcyBldmVudCB3aWxsIGJlIGZpcmVkIGluIGFkZGl0aW9uIG9mIGtleSBkb3duIGZvciB0aGVcbiAgICAvLyBUYWIga2V5IGlmIGtleSBkb3duIGlzbid0IGhhbmRsZWQuIFRoaXMgd291bGQgb25seSBoYXBwZW4gaWYgYSBjdXN0b21cbiAgICAvLyBQQVNTIGJpbmRpbmcgaGFzIGJlZW4gY3JlYXRlZCBhbmQgdGhlcmVmb3JlIHRoaXMgc2hvdWxkIGJlIGhhbmRsZWQgYnkgdGhlXG4gICAgLy8gYnJvd3Nlci5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZS5hbHRLZXkgJiYgdGhpcy5hbHRTZW5kc1doYXQgPT0gJ2Jyb3dzZXIta2V5JyAmJiBlLmNoYXJDb2RlID09IDApIHtcbiAgICAvLyBJZiB3ZSBnb3QgaGVyZSBiZWNhdXNlIHdlIHdlcmUgZXhwZWN0aW5nIHRoZSBicm93c2VyIHRvIGhhbmRsZSBhblxuICAgIC8vIGFsdCBzZXF1ZW5jZSBidXQgaXQgZGlkbid0IGRvIGl0LCB0aGVuIHdlIG1pZ2h0IGJlIG9uIGFuIE9TIHdpdGhvdXRcbiAgICAvLyBhbiBlbmFibGVkIElNRSBzeXN0ZW0uICBJbiB0aGF0IGNhc2Ugd2UgZmFsbCBiYWNrIHRvIHh0ZXJtLWxpa2VcbiAgICAvLyBiZWhhdmlvci5cbiAgICAvL1xuICAgIC8vIFRoaXMgaGFwcGVucyBoZXJlIG9ubHkgYXMgYSBmYWxsYmFjay4gIFR5cGljYWxseSB0aGVzZSBwbGF0Zm9ybXMgc2hvdWxkXG4gICAgLy8gc2V0IGFsdFNlbmRzV2hhdCB0byBlaXRoZXIgJ2VzY2FwZScgb3IgJzgtYml0Jy5cbiAgICB2YXIgY2ggPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUua2V5Q29kZSk7XG4gICAgaWYgKCFlLnNoaWZ0S2V5KSBjaCA9IGNoLnRvTG93ZXJDYXNlKCk7XG4gICAgY29kZSA9IGNoLmNoYXJDb2RlQXQoMCkgKyAxMjg7XG4gIH0gZWxzZSBpZiAoZS5jaGFyQ29kZSA+PSAzMikge1xuICAgIGNoID0gZS5jaGFyQ29kZTtcbiAgfVxuXG4gIGlmIChjaCkgdGhpcy50ZXJtaW5hbC5vblZUS2V5c3Ryb2tlKFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpKTtcblxuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG59O1xuXG4vKipcbiAqIFByZXZlbnQgZGVmYXVsdCBoYW5kbGluZyBmb3Igbm9uLWN0cmwtc2hpZnRlZCBldmVudC5cbiAqXG4gKiBXaGVuIGNvbWJpbmVkIHdpdGggQ2hyb21lIHBlcm1pc3Npb24gJ2FwcC53aW5kb3cuZnVsbHNjcmVlbi5vdmVycmlkZUVzYycsXG4gKiBhbmQgY2FsbGVkIGZvciBib3RoIGtleSBkb3duIGFuZCBrZXkgdXAgZXZlbnRzLFxuICogdGhlIEVTQyBrZXkgcmVtYWlucyB1c2FibGUgd2l0aGluIGZ1bGxzY3JlZW4gQ2hyb21lIGFwcCB3aW5kb3dzLlxuICovXG5odGVybS5LZXlib2FyZC5wcm90b3R5cGUucHJldmVudENocm9tZUFwcE5vbkN0cmxTaGlmdERlZmF1bHRfID0gZnVuY3Rpb24oZSkge1xuICBpZiAoIXdpbmRvdy5jaHJvbWUgfHwgIXdpbmRvdy5jaHJvbWUuYXBwIHx8ICF3aW5kb3cuY2hyb21lLmFwcC53aW5kb3cpIHJldHVybjtcbiAgaWYgKCFlLmN0cmxLZXkgfHwgIWUuc2hpZnRLZXkpIGUucHJldmVudERlZmF1bHQoKTtcbn07XG5cbmh0ZXJtLktleWJvYXJkLnByb3RvdHlwZS5vbkZvY3VzT3V0XyA9IGZ1bmN0aW9uKGUpIHtcbiAgdGhpcy5hbHRLZXlQcmVzc2VkID0gMDtcbn07XG5cbmh0ZXJtLktleWJvYXJkLnByb3RvdHlwZS5vbktleVVwXyA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYgKGUua2V5Q29kZSA9PSAxOClcbiAgICB0aGlzLmFsdEtleVByZXNzZWQgPSB0aGlzLmFsdEtleVByZXNzZWQgJiB+KDEgPDwgKGUubG9jYXRpb24gLSAxKSk7XG5cbiAgaWYgKGUua2V5Q29kZSA9PSAyNykgdGhpcy5wcmV2ZW50Q2hyb21lQXBwTm9uQ3RybFNoaWZ0RGVmYXVsdF8oZSk7XG59O1xuXG4vKipcbiAqIEhhbmRsZSBvbktleURvd24gZXZlbnRzLlxuICovXG5odGVybS5LZXlib2FyZC5wcm90b3R5cGUub25LZXlEb3duXyA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYgKGUua2V5Q29kZSA9PSAxOClcbiAgICB0aGlzLmFsdEtleVByZXNzZWQgPSB0aGlzLmFsdEtleVByZXNzZWQgfCAoMSA8PCAoZS5sb2NhdGlvbiAtIDEpKTtcblxuICBpZiAoZS5rZXlDb2RlID09IDI3KSB0aGlzLnByZXZlbnRDaHJvbWVBcHBOb25DdHJsU2hpZnREZWZhdWx0XyhlKTtcblxuICB2YXIga2V5RGVmID0gdGhpcy5rZXlNYXAua2V5RGVmc1tlLmtleUNvZGVdO1xuICBpZiAoIWtleURlZikge1xuICAgIC8vIElmIHRoaXMga2V5IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgcmVnaXN0ZXJlZCwgZmFsbCBiYWNrIHRvIHRoZSB1bmtub3duXG4gICAgLy8ga2V5IG1hcHBpbmcgKGtleUNvZGUgPT0gMCksIGFuZCB0aGVuIGF1dG9tYXRpY2FsbHkgcmVnaXN0ZXIgaXQgdG8gYXZvaWRcbiAgICAvLyBhbnkgZnVydGhlciB3YXJuaW5ncyBoZXJlLlxuICAgIGNvbnNvbGUud2FybihgTm8gZGVmaW5pdGlvbiBmb3Iga2V5ICR7ZS5rZXl9IChrZXlDb2RlICR7ZS5rZXlDb2RlfSlgKTtcbiAgICBrZXlEZWYgPSB0aGlzLmtleU1hcC5rZXlEZWZzWzBdO1xuICAgIHRoaXMua2V5TWFwLmFkZEtleURlZihlLmtleUNvZGUsIGtleURlZik7XG4gIH1cblxuICAvLyBUaGUgdHlwZSBvZiBhY3Rpb24gd2UncmUgZ29pbmcgdG8gdXNlLlxuICB2YXIgcmVzb2x2ZWRBY3Rpb25UeXBlID0gbnVsbDtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGZ1bmN0aW9uIGdldEFjdGlvbihuYW1lKSB7XG4gICAgLy8gR2V0IHRoZSBrZXkgYWN0aW9uIGZvciB0aGUgZ2l2ZW4gYWN0aW9uIG5hbWUuICBJZiB0aGUgYWN0aW9uIGlzIGFcbiAgICAvLyBmdW5jdGlvbiwgZGlzcGF0Y2ggaXQuICBJZiB0aGUgYWN0aW9uIGRlZmVycyB0byB0aGUgbm9ybWFsIGFjdGlvbixcbiAgICAvLyByZXNvbHZlIHRoYXQgaW5zdGVhZC5cblxuICAgIHJlc29sdmVkQWN0aW9uVHlwZSA9IG5hbWU7XG5cbiAgICB2YXIgYWN0aW9uID0ga2V5RGVmW25hbWVdO1xuICAgIGlmICh0eXBlb2YgYWN0aW9uID09ICdmdW5jdGlvbicpXG4gICAgICBhY3Rpb24gPSBhY3Rpb24uYXBwbHkoc2VsZi5rZXlNYXAsIFtlLCBrZXlEZWZdKTtcblxuICAgIGlmIChhY3Rpb24gPT09IERFRkFVTFQgJiYgbmFtZSAhPSAnbm9ybWFsJykgYWN0aW9uID0gZ2V0QWN0aW9uKCdub3JtYWwnKTtcblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cblxuICAvLyBOb3RlIHRoYXQgd2UgdXNlIHRoZSB0cmlwbGUtZXF1YWxzICgnPT09Jykgb3BlcmF0b3IgdG8gdGVzdCBlcXVhbGl0eSBmb3JcbiAgLy8gdGhlc2UgY29uc3RhbnRzLCBpbiBvcmRlciB0byBkaXN0aW5ndWlzaCB1c2FnZSBvZiB0aGUgY29uc3RhbnQgZnJvbSB1c2FnZVxuICAvLyBvZiBhIGxpdGVyYWwgc3RyaW5nIHRoYXQgaGFwcGVucyB0byBjb250YWluIHRoZSBzYW1lIGJ5dGVzLlxuICB2YXIgQ0FOQ0VMID0gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG4gIHZhciBERUZBVUxUID0gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5ERUZBVUxUO1xuICB2YXIgUEFTUyA9IGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuUEFTUztcbiAgdmFyIFNUUklQID0gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5TVFJJUDtcblxuICB2YXIgY29udHJvbCA9IGUuY3RybEtleTtcbiAgdmFyIGFsdCA9IHRoaXMuYWx0SXNNZXRhID8gZmFsc2UgOiBlLmFsdEtleTtcbiAgdmFyIG1ldGEgPSB0aGlzLmFsdElzTWV0YSA/IGUuYWx0S2V5IHx8IGUubWV0YUtleSA6IGUubWV0YUtleTtcblxuICAvLyBJbiB0aGUga2V5LW1hcCwgd2Ugc3Vycm91bmQgdGhlIGtleUNhcCBmb3Igbm9uLXByaW50YWJsZXMgaW4gXCJbLi4uXVwiXG4gIHZhciBpc1ByaW50YWJsZSA9ICEvXlxcW1xcdytcXF0kLy50ZXN0KGtleURlZi5rZXlDYXApO1xuXG4gIHN3aXRjaCAodGhpcy5hbHRHck1vZGUpIHtcbiAgICBjYXNlICdjdHJsLWFsdCc6XG4gICAgICBpZiAoaXNQcmludGFibGUgJiYgY29udHJvbCAmJiBhbHQpIHtcbiAgICAgICAgLy8gY3RybC1hbHQtcHJpbnRhYmxlIG1lYW5zIGFsdEdyLiAgV2UgY2xlYXIgb3V0IHRoZSBjb250cm9sIGFuZFxuICAgICAgICAvLyBhbHQgbW9kaWZpZXJzIGFuZCB3YWl0IHRvIHNlZSB0aGUgY2hhckNvZGUgaW4gdGhlIGtleWRvd24gZXZlbnQuXG4gICAgICAgIGNvbnRyb2wgPSBmYWxzZTtcbiAgICAgICAgYWx0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3JpZ2h0LWFsdCc6XG4gICAgICBpZiAoaXNQcmludGFibGUgJiYgdGhpcy50ZXJtaW5hbC5rZXlib2FyZC5hbHRLZXlQcmVzc2VkICYgMikge1xuICAgICAgICBjb250cm9sID0gZmFsc2U7XG4gICAgICAgIGFsdCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdsZWZ0LWFsdCc6XG4gICAgICBpZiAoaXNQcmludGFibGUgJiYgdGhpcy50ZXJtaW5hbC5rZXlib2FyZC5hbHRLZXlQcmVzc2VkICYgMSkge1xuICAgICAgICBjb250cm9sID0gZmFsc2U7XG4gICAgICAgIGFsdCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cblxuICB2YXIgYWN0aW9uO1xuXG4gIGlmIChjb250cm9sKSB7XG4gICAgYWN0aW9uID0gZ2V0QWN0aW9uKCdjb250cm9sJyk7XG4gIH0gZWxzZSBpZiAoYWx0KSB7XG4gICAgYWN0aW9uID0gZ2V0QWN0aW9uKCdhbHQnKTtcbiAgfSBlbHNlIGlmIChtZXRhKSB7XG4gICAgYWN0aW9uID0gZ2V0QWN0aW9uKCdtZXRhJyk7XG4gIH0gZWxzZSB7XG4gICAgYWN0aW9uID0gZ2V0QWN0aW9uKCdub3JtYWwnKTtcbiAgfVxuXG4gIC8vIElmIGUubWFza1NoaWZ0S2V5IHdhcyBzZXQgKGR1cmluZyBnZXRBY3Rpb24pIGl0IG1lYW5zIHRoZSBzaGlmdCBrZXkgaXNcbiAgLy8gYWxyZWFkeSBhY2NvdW50ZWQgZm9yIGluIHRoZSBhY3Rpb24sIGFuZCB3ZSBzaG91bGQgbm90IGFjdCBvbiBpdCBhbnlcbiAgLy8gZnVydGhlci4gVGhpcyBpcyBjdXJyZW50bHkgb25seSB1c2VkIGZvciBDdHJsLVNoaWZ0LVRhYiwgd2hpY2ggc2hvdWxkIHNlbmRcbiAgLy8gXCJDU0kgWlwiLCBub3QgXCJDU0kgMSA7IDIgWlwiLlxuICB2YXIgc2hpZnQgPSAhZS5tYXNrU2hpZnRLZXkgJiYgZS5zaGlmdEtleTtcblxuICB2YXIga2V5RG93biA9IHtcbiAgICBrZXlDb2RlOiBlLmtleUNvZGUsXG4gICAgc2hpZnQ6IGUuc2hpZnRLZXksIC8vIG5vdCBgdmFyIHNoaWZ0YCBmcm9tIGFib3ZlLlxuICAgIGN0cmw6IGNvbnRyb2wsXG4gICAgYWx0OiBhbHQsXG4gICAgbWV0YTogbWV0YSxcbiAgfTtcblxuICB2YXIgYmluZGluZyA9IHRoaXMuYmluZGluZ3MuZ2V0QmluZGluZyhrZXlEb3duKTtcblxuICBpZiAoYmluZGluZykge1xuICAgIC8vIENsZWFyIG91dCB0aGUgbW9kaWZpZXIgYml0cyBzbyB3ZSBkb24ndCB0cnkgdG8gbXVuZ2UgdGhlIHNlcXVlbmNlXG4gICAgLy8gZnVydGhlci5cbiAgICBzaGlmdCA9IGNvbnRyb2wgPSBhbHQgPSBtZXRhID0gZmFsc2U7XG4gICAgcmVzb2x2ZWRBY3Rpb25UeXBlID0gJ25vcm1hbCc7XG4gICAgYWN0aW9uID0gYmluZGluZy5hY3Rpb247XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbiA9PSAnZnVuY3Rpb24nKVxuICAgICAgYWN0aW9uID0gYWN0aW9uLmNhbGwodGhpcywgdGhpcy50ZXJtaW5hbCwga2V5RG93bik7XG4gIH1cblxuICBpZiAoYWx0ICYmIHRoaXMuYWx0U2VuZHNXaGF0ID09ICdicm93c2VyLWtleScgJiYgYWN0aW9uID09IERFRkFVTFQpIHtcbiAgICAvLyBXaGVuIGFsdFNlbmRzV2hhdCBpcyAnYnJvd3Nlci1rZXknLCB3ZSB3YWl0IGZvciB0aGUga2V5cHJlc3MgZXZlbnQuXG4gICAgLy8gSW4ga2V5cHJlc3MsIHRoZSBicm93c2VyIHNob3VsZCBoYXZlIHNldCB0aGUgZXZlbnQuY2hhckNvZGUgdG8gdGhlXG4gICAgLy8gYXBwcm9wcmlhdGUgY2hhcmFjdGVyLlxuICAgIC8vIFRPRE8ocmdpbmRhKTogQ2hhcmFjdGVyIGNvbXBvc2l0aW9ucyB3aWxsIG5lZWQgc29tZSBibGFjayBtYWdpYy5cbiAgICBhY3Rpb24gPSBQQVNTO1xuICB9XG5cbiAgaWYgKGFjdGlvbiA9PT0gUEFTUyB8fCAoYWN0aW9uID09PSBERUZBVUxUICYmICEoY29udHJvbCB8fCBhbHQgfHwgbWV0YSkpKSB7XG4gICAgLy8gSWYgdGhpcyBrZXkgaXMgc3VwcG9zZWQgdG8gYmUgaGFuZGxlZCBieSB0aGUgYnJvd3Nlciwgb3IgaXQgaXMgYW5cbiAgICAvLyB1bm1vZGlmaWVkIGtleSB3aXRoIHRoZSBkZWZhdWx0IGFjdGlvbiwgdGhlbiBleGl0IHRoaXMgZXZlbnQgaGFuZGxlci5cbiAgICAvLyBJZiBpdCdzIGFuIHVubW9kaWZpZWQga2V5LCBpdCdsbCBiZSBoYW5kbGVkIGluIG9uS2V5UHJlc3Mgd2hlcmUgd2VcbiAgICAvLyBjYW4gdGVsbCBmb3Igc3VyZSB3aGljaCBBU0NJSSBjb2RlIHRvIGluc2VydC5cbiAgICAvL1xuICAgIC8vIFRoaXMgYmxvY2sgbmVlZHMgdG8gY29tZSBiZWZvcmUgdGhlIFNUUklQIHRlc3QsIG90aGVyd2lzZSB3ZSdsbCBzdHJpcFxuICAgIC8vIHRoZSBtb2RpZmllciBhbmQgdGhpbmsgaXQncyBvayB0byBsZXQgdGhlIGJyb3dzZXIgaGFuZGxlIHRoZSBrZXlwcmVzcy5cbiAgICAvLyBUaGUgYnJvd3NlciB3b24ndCBrbm93IHdlJ3JlIHRyeWluZyB0byBpZ25vcmUgdGhlIG1vZGlmaWVycyBhbmQgbWlnaHRcbiAgICAvLyBwZXJmb3JtIHNvbWUgZGVmYXVsdCBhY3Rpb24uXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGFjdGlvbiA9PT0gU1RSSVApIHtcbiAgICBhbHQgPSBjb250cm9sID0gZmFsc2U7XG4gICAgYWN0aW9uID0ga2V5RGVmLm5vcm1hbDtcbiAgICBpZiAodHlwZW9mIGFjdGlvbiA9PSAnZnVuY3Rpb24nKVxuICAgICAgYWN0aW9uID0gYWN0aW9uLmFwcGx5KHRoaXMua2V5TWFwLCBbZSwga2V5RGVmXSk7XG5cbiAgICBpZiAoYWN0aW9uID09IERFRkFVTFQgJiYga2V5RGVmLmtleUNhcC5sZW5ndGggPT0gMilcbiAgICAgIGFjdGlvbiA9IGtleURlZi5rZXlDYXAuc3Vic3RyKHNoaWZ0ID8gMSA6IDAsIDEpO1xuICB9XG5cbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gIGlmIChhY3Rpb24gPT09IENBTkNFTCkgcmV0dXJuO1xuXG4gIGlmIChhY3Rpb24gIT09IERFRkFVTFQgJiYgdHlwZW9mIGFjdGlvbiAhPSAnc3RyaW5nJykge1xuICAgIGNvbnNvbGUud2FybignSW52YWxpZCBhY3Rpb246ICcgKyBKU09OLnN0cmluZ2lmeShhY3Rpb24pKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBTdHJpcCB0aGUgbW9kaWZpZXIgdGhhdCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIGFjdGlvbiwgc2luY2Ugd2UgYXNzdW1lIHRoYXRcbiAgLy8gbW9kaWZpZXIgaGFzIGFscmVhZHkgYmVlbiBhY2NvdW50ZWQgZm9yIGluIHRoZSBhY3Rpb24uXG4gIGlmIChyZXNvbHZlZEFjdGlvblR5cGUgPT0gJ2NvbnRyb2wnKSB7XG4gICAgY29udHJvbCA9IGZhbHNlO1xuICB9IGVsc2UgaWYgKHJlc29sdmVkQWN0aW9uVHlwZSA9PSAnYWx0Jykge1xuICAgIGFsdCA9IGZhbHNlO1xuICB9IGVsc2UgaWYgKHJlc29sdmVkQWN0aW9uVHlwZSA9PSAnbWV0YScpIHtcbiAgICBtZXRhID0gZmFsc2U7XG4gIH1cblxuICBpZiAoYWN0aW9uLnN1YnN0cigwLCAyKSA9PSAnXFx4MWJbJyAmJiAoYWx0IHx8IGNvbnRyb2wgfHwgc2hpZnQgfHwgbWV0YSkpIHtcbiAgICAvLyBUaGUgYWN0aW9uIGlzIGFuIGVzY2FwZSBzZXF1ZW5jZSB0aGF0IGFuZCBpdCB3YXMgdHJpZ2dlcmVkIGluIHRoZVxuICAgIC8vIHByZXNlbmNlIG9mIGEga2V5Ym9hcmQgbW9kaWZpZXIsIHdlIG1heSBuZWVkIHRvIGFsdGVyIHRoZSBhY3Rpb24gdG9cbiAgICAvLyBpbmNsdWRlIHRoZSBtb2RpZmllciBiZWZvcmUgc2VuZGluZyBpdC5cblxuICAgIC8vIFRoZSBtYXRoIGlzIGZ1bmt5IGJ1dCBhbGlnbnMgdy94dGVybS5cbiAgICBsZXQgaW1vZCA9IDE7XG4gICAgaWYgKHNoaWZ0KSBpbW9kICs9IDE7XG4gICAgaWYgKGFsdCkgaW1vZCArPSAyO1xuICAgIGlmIChjb250cm9sKSBpbW9kICs9IDQ7XG4gICAgaWYgKG1ldGEpIGltb2QgKz0gODtcbiAgICBsZXQgbW9kID0gJzsnICsgaW1vZDtcblxuICAgIGlmIChhY3Rpb24ubGVuZ3RoID09IDMpIHtcbiAgICAgIC8vIFNvbWUgb2YgdGhlIENTSSBzZXF1ZW5jZXMgaGF2ZSB6ZXJvIHBhcmFtZXRlcnMgdW5sZXNzIG1vZGlmaWVkLlxuICAgICAgYWN0aW9uID0gJ1xceDFiWzEnICsgbW9kICsgYWN0aW9uLnN1YnN0cigyLCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJzIGFsd2F5cyBoYXZlIGF0IGxlYXN0IG9uZSBwYXJhbWV0ZXIuXG4gICAgICBhY3Rpb24gPVxuICAgICAgICBhY3Rpb24uc3Vic3RyKDAsIGFjdGlvbi5sZW5ndGggLSAxKSArXG4gICAgICAgIG1vZCArXG4gICAgICAgIGFjdGlvbi5zdWJzdHIoYWN0aW9uLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYWN0aW9uID09PSBERUZBVUxUKSB7XG4gICAgICBhY3Rpb24gPSBrZXlEZWYua2V5Q2FwLnN1YnN0cihzaGlmdCA/IDEgOiAwLCAxKTtcblxuICAgICAgaWYgKGNvbnRyb2wpIHtcbiAgICAgICAgdmFyIHVuc2hpZnRlZCA9IGtleURlZi5rZXlDYXAuc3Vic3RyKDAsIDEpO1xuICAgICAgICB2YXIgY29kZSA9IHVuc2hpZnRlZC5jaGFyQ29kZUF0KDApO1xuICAgICAgICBpZiAoY29kZSA+PSA2NCAmJiBjb2RlIDw9IDk1KSB7XG4gICAgICAgICAgYWN0aW9uID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlIC0gNjQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFsdCAmJiB0aGlzLmFsdFNlbmRzV2hhdCA9PSAnOC1iaXQnICYmIGFjdGlvbi5sZW5ndGggPT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSBhY3Rpb24uY2hhckNvZGVBdCgwKSArIDEyODtcbiAgICAgIGFjdGlvbiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgfVxuXG4gICAgLy8gV2UgcmVzcGVjdCBhbHQvbWV0YVNlbmRzRXNjYXBlIGV2ZW4gaWYgdGhlIGtleW1hcCBhY3Rpb24gd2FzIGEgbGl0ZXJhbFxuICAgIC8vIHN0cmluZy4gIE90aGVyd2lzZSwgZXZlcnkgb3ZlcnJpZGRlbiBhbHQvbWV0YSBhY3Rpb24gd291bGQgaGF2ZSB0b1xuICAgIC8vIGNoZWNrIGFsdC9tZXRhU2VuZHNFc2NhcGUuXG4gICAgaWYgKFxuICAgICAgKGFsdCAmJiB0aGlzLmFsdFNlbmRzV2hhdCA9PSAnZXNjYXBlJykgfHxcbiAgICAgIChtZXRhICYmIHRoaXMubWV0YVNlbmRzRXNjYXBlKVxuICAgICkge1xuICAgICAgYWN0aW9uID0gJ1xceDFiJyArIGFjdGlvbjtcbiAgICB9XG4gIH1cblxuICB0aGlzLnRlcm1pbmFsLm9uVlRLZXlzdHJva2UoYWN0aW9uKTtcbn07XG4vLyBTT1VSQ0UgRklMRTogaHRlcm0vanMvaHRlcm1fa2V5Ym9hcmRfYmluZGluZ3MuanNcbi8vIENvcHlyaWdodCAoYykgMjAxNSBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbi8qKlxuICogQSBtYXBwaW5nIGZyb20gaHRlcm0uS2V5Ym9hcmQuS2V5UGF0dGVybiB0byBhbiBhY3Rpb24uXG4gKlxuICogVE9ETyhyZ2luZGEpOiBGb3Igbm93IHRoaXMgYmluZGluZ3MgY29kZSBpcyBvbmx5IHVzZWQgZm9yIHVzZXIgb3ZlcnJpZGVzLlxuICogaHRlcm0uS2V5Ym9hcmQuS2V5TWFwIHN0aWxsIGhhbmRsZXMgYWxsIG9mIHRoZSBidWlsdC1pbiBrZXkgbWFwcGluZ3MuXG4gKiBJdCdkIGJlIG5pY2UgaWYgd2UgbWlncmF0ZWQgdGhhdCBvdmVyIHRvIGJlIGh0ZXJtLktleWJvYXJkLkJpbmRpbmdzIGJhc2VkLlxuICovXG5odGVybS5LZXlib2FyZC5CaW5kaW5ncyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmJpbmRpbmdzXyA9IHt9O1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYWxsIGJpbmRpbmdzLlxuICovXG5odGVybS5LZXlib2FyZC5CaW5kaW5ncy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5iaW5kaW5nc18gPSB7fTtcbn07XG5cbi8qKlxuICogQWRkIGEgbmV3IGJpbmRpbmcuXG4gKlxuICogSW50ZXJuYWwgQVBJIHRoYXQgYXNzdW1lcyBwYXJzZWQgb2JqZWN0cyBhcyBpbnB1dHMuXG4gKiBTZWUgdGhlIHB1YmxpYyBhZGRCaW5kaW5nIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHBhcmFtIHtodGVybS5LZXlib2FyZC5LZXlQYXR0ZXJufSBrZXlQYXR0ZXJuXG4gKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbnxodGVybS5LZXlib2FyZC5LZXlBY3Rpb259IGFjdGlvblxuICovXG5odGVybS5LZXlib2FyZC5CaW5kaW5ncy5wcm90b3R5cGUuYWRkQmluZGluZ18gPSBmdW5jdGlvbihrZXlQYXR0ZXJuLCBhY3Rpb24pIHtcbiAgdmFyIGJpbmRpbmcgPSBudWxsO1xuICB2YXIgbGlzdCA9IHRoaXMuYmluZGluZ3NfW2tleVBhdHRlcm4ua2V5Q29kZV07XG4gIGlmIChsaXN0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdFtpXS5rZXlQYXR0ZXJuLm1hdGNoS2V5UGF0dGVybihrZXlQYXR0ZXJuKSkge1xuICAgICAgICBiaW5kaW5nID0gbGlzdFtpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGJpbmRpbmcpIHtcbiAgICBiaW5kaW5nLmFjdGlvbiA9IGFjdGlvbjtcbiAgfSBlbHNlIHtcbiAgICBiaW5kaW5nID0geyBrZXlQYXR0ZXJuOiBrZXlQYXR0ZXJuLCBhY3Rpb246IGFjdGlvbiB9O1xuXG4gICAgaWYgKCFsaXN0KSB7XG4gICAgICB0aGlzLmJpbmRpbmdzX1trZXlQYXR0ZXJuLmtleUNvZGVdID0gW2JpbmRpbmddO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJpbmRpbmdzX1trZXlQYXR0ZXJuLmtleUNvZGVdLnB1c2goYmluZGluZyk7XG5cbiAgICAgIGxpc3Quc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBodGVybS5LZXlib2FyZC5LZXlQYXR0ZXJuLnNvcnRDb21wYXJlKFxuICAgICAgICAgIGEua2V5UGF0dGVybixcbiAgICAgICAgICBiLmtleVBhdHRlcm4sXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQWRkIGEgbmV3IGJpbmRpbmcuXG4gKlxuICogSWYgYSBiaW5kaW5nIGZvciB0aGUga2V5UGF0dGVybiBhbHJlYWR5IGV4aXN0cyBpdCB3aWxsIGJlIG92ZXJyaWRkZW4uXG4gKlxuICogTW9yZSBzcGVjaWZpYyBrZXlQYXR0ZXJucyB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aG9zZSB3aXRoIHdpbGRjYXJkcy4gIEdpdmVuXG4gKiBiaW5kaW5ncyBmb3IgXCJDdHJsLUFcIiBhbmQgXCJDdHJsLSotQVwiLCBhbmQgYSBcIkN0cmwtQVwiIGtleWRvd24sIHRoZSBcIkN0cmwtQVwiXG4gKiBiaW5kaW5nIHdpbGwgbWF0Y2ggZXZlbiBpZiBcIkN0cmwtKi1BXCIgd2FzIGNyZWF0ZWQgbGFzdC5cbiAqXG4gKiBJZiBhY3Rpb24gaXMgYSBzdHJpbmcsIGl0IHdpbGwgYmUgcGFzc2VkIHRocm91Z2ggaHRlcm0uUGFyc2VyLnBhcnNlS2V5QWN0aW9uLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICogICAvLyBXaWxsIHJlcGxhY2UgQ3RybC1QIGtleXN0cm9rZXMgd2l0aCB0aGUgc3RyaW5nIFwiaGl5YSFcIi5cbiAqICAgYWRkQmluZGluZygnQ3RybC1QJywgXCInaGl5YSEnXCIpO1xuICogICAvLyBXaWxsIGNhbmNlbCB0aGUga2V5c3Ryb2tlIGVudGlyZWx5IChtYWtlIGl0IGRvIG5vdGhpbmcpLlxuICogICBhZGRCaW5kaW5nKCdBbHQtRCcsIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuQ0FOQ0VMKTtcbiAqICAgLy8gV2lsbCBleGVjdXRlIHRoZSBjb2RlIGFuZCByZXR1cm4gdGhlIGFjdGlvbi5cbiAqICAgYWRkQmluZGluZygnQ3RybC1UJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ0dvdCBhIFQhJyk7XG4gKiAgICAgcmV0dXJuIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuUEFTUztcbiAqICAgfSk7XG4gKlxuICogQHBhcmFtIHtzdHJpbmd8aHRlcm0uS2V5Ym9hcmQuS2V5UGF0dGVybn0ga2V5UGF0dGVyblxuICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb258aHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ufSBhY3Rpb25cbiAqL1xuaHRlcm0uS2V5Ym9hcmQuQmluZGluZ3MucHJvdG90eXBlLmFkZEJpbmRpbmcgPSBmdW5jdGlvbihrZXksIGFjdGlvbikge1xuICAvLyBJZiB3ZSdyZSBnaXZlbiBhIGh0ZXJtLktleWJvYXJkLktleVBhdHRlcm4gb2JqZWN0LCBwYXNzIGl0IGRvd24uXG4gIGlmICh0eXBlb2Yga2V5ICE9ICdzdHJpbmcnKSB7XG4gICAgdGhpcy5hZGRCaW5kaW5nXyhrZXksIGFjdGlvbik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSGVyZSB3ZSB0cmVhdCBrZXkgYXMgYSBzdHJpbmcuXG4gIHZhciBwID0gbmV3IGh0ZXJtLlBhcnNlcigpO1xuXG4gIHAucmVzZXQoa2V5KTtcbiAgdmFyIHNlcXVlbmNlO1xuXG4gIHRyeSB7XG4gICAgc2VxdWVuY2UgPSBwLnBhcnNlS2V5U2VxdWVuY2UoKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICBjb25zb2xlLmVycm9yKGV4KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXAuaXNDb21wbGV0ZSgpKSB7XG4gICAgY29uc29sZS5lcnJvcihwLmVycm9yKCdFeHBlY3RlZCBlbmQgb2Ygc2VxdWVuY2U6ICcgKyBzZXF1ZW5jZSkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIElmIGFjdGlvbiBpcyBhIHN0cmluZywgcGFyc2UgaXQuICBPdGhlcndpc2UgYXNzdW1lIGl0J3MgY2FsbGFibGUuXG4gIGlmICh0eXBlb2YgYWN0aW9uID09ICdzdHJpbmcnKSB7XG4gICAgcC5yZXNldChhY3Rpb24pO1xuICAgIHRyeSB7XG4gICAgICBhY3Rpb24gPSBwLnBhcnNlS2V5QWN0aW9uKCk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmICghcC5pc0NvbXBsZXRlKCkpIHtcbiAgICBjb25zb2xlLmVycm9yKHAuZXJyb3IoJ0V4cGVjdGVkIGVuZCBvZiBzZXF1ZW5jZTogJyArIHNlcXVlbmNlKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5hZGRCaW5kaW5nXyhuZXcgaHRlcm0uS2V5Ym9hcmQuS2V5UGF0dGVybihzZXF1ZW5jZSksIGFjdGlvbik7XG59O1xuXG4vKipcbiAqIEFkZCBtdWx0aXBsZSBiaW5kaW5ncyBhdCBhIHRpbWUgdXNpbmcgYSBtYXAgb2Yge3N0cmluZzogc3RyaW5nLCAuLi59XG4gKlxuICogVGhpcyB1c2VzIGh0ZXJtLlBhcnNlciB0byBwYXJzZSB0aGUgbWFwcyBrZXkgaW50byBLZXlQYXR0ZXJucywgYW5kIHRoZVxuICogbWFwIHZhbHVlcyBpbnRvIHtzdHJpbmd8ZnVuY3Rpb258S2V5QWN0aW9ufS5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqICB7XG4gKiAgICAvLyBXaWxsIHJlcGxhY2UgQ3RybC1QIGtleXN0cm9rZXMgd2l0aCB0aGUgc3RyaW5nIFwiaGl5YSFcIi5cbiAqICAgICdDdHJsLVAnOiBcIidoaXlhISdcIixcbiAqICAgIC8vIFdpbGwgY2FuY2VsIHRoZSBrZXlzdHJva2UgZW50aXJlbHkgKG1ha2UgaXQgZG8gbm90aGluZykuXG4gKiAgICAnQWx0LUQnOiBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLkNBTkNFTCxcbiAqICB9XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1hcFxuICovXG5odGVybS5LZXlib2FyZC5CaW5kaW5ncy5wcm90b3R5cGUuYWRkQmluZGluZ3MgPSBmdW5jdGlvbihtYXApIHtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkge1xuICAgIHRoaXMuYWRkQmluZGluZyhrZXksIG1hcFtrZXldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGJpbmRpbmcgdGhhdCBpcyB0aGUgYmVzdCBtYXRjaCBmb3IgdGhlIGdpdmVuIGtleURvd24gcmVjb3JkLFxuICogb3IgbnVsbCBpZiB0aGVyZSBpcyBubyBtYXRjaC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0ga2V5RG93biBBbiBvYmplY3Qgd2l0aCBhIGtleUNvZGUgcHJvcGVydHkgYW5kIHplcm8gb3JcbiAqICAgbW9yZSBib29sZWFuIHByb3BlcnRpZXMgcmVwcmVzZW50aW5nIGtleSBtb2RpZmllcnMuICBUaGVzZSBwcm9wZXJ0eSBuYW1lc1xuICogICBtdXN0IG1hdGNoIHRob3NlIGRlZmluZWQgaW4gaHRlcm0uS2V5Ym9hcmQuS2V5UGF0dGVybi5tb2RpZmllcnMuXG4gKi9cbmh0ZXJtLktleWJvYXJkLkJpbmRpbmdzLnByb3RvdHlwZS5nZXRCaW5kaW5nID0gZnVuY3Rpb24oa2V5RG93bikge1xuICB2YXIgbGlzdCA9IHRoaXMuYmluZGluZ3NfW2tleURvd24ua2V5Q29kZV07XG4gIGlmICghbGlzdCkgcmV0dXJuIG51bGw7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGJpbmRpbmcgPSBsaXN0W2ldO1xuICAgIGlmIChiaW5kaW5nLmtleVBhdHRlcm4ubWF0Y2hLZXlEb3duKGtleURvd24pKSByZXR1cm4gYmluZGluZztcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbi8vIFNPVVJDRSBGSUxFOiBodGVybS9qcy9odGVybV9rZXlib2FyZF9rZXltYXAuanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxpYi5ydGRlcCgnaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucycpO1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGtleSBtYXAgZm9yIGh0ZXJtLlxuICpcbiAqIENvbnRhaW5zIGEgbWFwcGluZyBvZiBrZXlDb2RlcyB0byBrZXlEZWZzIChha2Ega2V5IGRlZmluaXRpb25zKS4gIFRoZSBrZXlcbiAqIGRlZmluaXRpb24gdGVsbHMgdGhlIGh0ZXJtLktleWJvYXJkIGNsYXNzIGhvdyB0byBoYW5kbGUga2V5Y29kZXMuXG4gKlxuICogVGhpcyBzaG91bGQgd29yayBmb3IgbW9zdCBjYXNlcywgYXMgdGhlIHByaW50YWJsZSBjaGFyYWN0ZXJzIGdldCBoYW5kbGVkXG4gKiBpbiB0aGUga2V5cHJlc3MgZXZlbnQuICBJbiB0aGF0IGNhc2UsIGV2ZW4gaWYgdGhlIGtleWNhcCBpcyB3cm9uZyBpbiB0aGVcbiAqIGtleSBtYXAsIHRoZSBjb3JyZWN0IGNoYXJhY3RlciBzaG91bGQgYmUgc2VudC5cbiAqXG4gKiBEaWZmZXJlbnQgbGF5b3V0cywgc3VjaCBhcyBEdm9yYWsgc2hvdWxkIHdvcmsgd2l0aCB0aGlzIGtleW1hcCwgYXMgdGhvc2VcbiAqIGxheW91dHMgdHlwaWNhbGx5IG1vdmUga2V5Y29kZXMgYXJvdW5kIG9uIHRoZSBrZXlib2FyZCB3aXRob3V0IGRpc3R1cmJpbmdcbiAqIHRoZSBhY3R1YWwga2V5Y2Fwcy5cbiAqXG4gKiBUaGVyZSBtYXkgYmUgaXNzdWVzIHdpdGggY29udHJvbCBrZXlzIG9uIG5vbi1VUyBrZXlib2FyZHMgb3Igd2l0aCBrZXlib2FyZHNcbiAqIHRoYXQgdmVyeSBzaWduaWZpY2FudGx5IGZyb20gdGhlIGV4cGVjdGF0aW9ucyBoZXJlLCBpbiB3aGljaCBjYXNlIHdlIG1heVxuICogaGF2ZSB0byBpbnZlbnQgbmV3IGtleSBtYXBzLlxuICpcbiAqIFRoZSBzZXF1ZW5jZXMgZGVmaW5lZCBpbiB0aGlzIGtleSBtYXAgY29tZSBmcm9tIFtYVEVSTV0gYXMgcmVmZXJlbmNlZCBpblxuICogdnQuanMsIHN0YXJ0aW5nIHdpdGggdGhlIHNlY3Rpb24gdGl0bGVkIFwiQWx0IGFuZCBNZXRhIEtleXNcIi5cbiAqL1xuaHRlcm0uS2V5Ym9hcmQuS2V5TWFwID0gZnVuY3Rpb24oa2V5Ym9hcmQpIHtcbiAgdGhpcy5rZXlib2FyZCA9IGtleWJvYXJkO1xuICB0aGlzLmtleURlZnMgPSB7fTtcbiAgdGhpcy5yZXNldCgpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBzaW5nbGUga2V5IGRlZmluaXRpb24uXG4gKlxuICogVGhlIGRlZmluaXRpb24gaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBmaWVsZHM6ICdrZXlDYXAnLFxuICogJ25vcm1hbCcsICdjb250cm9sJywgJ2FsdCcsIGFuZCAnbWV0YScuXG4gKlxuICogIC0ga2V5Q2FwIGlzIGEgc3RyaW5nIGlkZW50aWZ5aW5nIHRoZSBrZXkgb24gdGhlIGtleWJvYXJkLiAgRm9yIHByaW50YWJsZVxuICogICAga2V5cywgdGhlIGtleSBjYXAgc2hvdWxkIGJlIGV4YWN0bHkgdHdvIGNoYXJhY3RlcnMsIHN0YXJ0aW5nIHdpdGggdGhlXG4gKiAgICB1bnNoaWZ0ZWQgdmVyc2lvbi4gIEZvciBleGFtcGxlLCAnYUEnLCAnYkInLCAnMSEnIGFuZCAnPSsnLiAgRm9yXG4gKiAgICBub24tcHJpbnRhYmxlIHRoZSBrZXkgY2FwIHNob3VsZCBiZSBzdXJyb3VuZGVkIGluIHNxdWFyZSBicmFjZXMsIGFzIGluXG4gKiAgICAnW0lOU10nLCAnW0xFRlRdJy4gIEJ5IGNvbnZlbnRpb24sIG5vbi1wcmludGFibGUga2V5Y2FwcyBhcmUgaW4gdXBwZXJjYXNlXG4gKiAgICBidXQgdGhpcyBpcyBub3QgYSBzdHJpY3QgcmVxdWlyZW1lbnQuXG4gKlxuICogIC0gTm9ybWFsIGlzIHRoZSBhY3Rpb24gdGhhdCBzaG91bGQgYmUgcGVyZm9ybWVkIHdoZW4gdGhlIGtleSBpcyBwcmVzc2VkXG4gKiAgICBpbiB0aGUgYWJzZW5jZSBvZiBhbnkgbW9kaWZpZXIuICBTZWUgYmVsb3cgZm9yIHRoZSBzdXBwb3J0ZWQgYWN0aW9ucy5cbiAqXG4gKiAgLSBDb250cm9sIGlzIHRoZSBhY3Rpb24gdGhhdCBzaG91bGQgYmUgcGVyZm9ybWVkIHdoZW4gdGhlIGtleSBpcyBwcmVzc2VkXG4gKiAgICBhbG9uZyB3aXRoIHRoZSBjb250cm9sIG1vZGlmaWVyLiAgU2VlIGJlbG93IGZvciB0aGUgc3VwcG9ydGVkIGFjdGlvbnMuXG4gKlxuICogIC0gQWx0IGlzIHRoZSBhY3Rpb24gdGhhdCBzaG91bGQgYmUgcGVyZm9ybWVkIHdoZW4gdGhlIGtleSBpcyBwcmVzc2VkXG4gKiAgICBhbG9uZyB3aXRoIHRoZSBhbHQgbW9kaWZpZXIuICBTZWUgYmVsb3cgZm9yIHRoZSBzdXBwb3J0ZWQgYWN0aW9ucy5cbiAqXG4gKiAgLSBNZXRhIGlzIHRoZSBhY3Rpb24gdGhhdCBzaG91bGQgYmUgcGVyZm9ybWVkIHdoZW4gdGhlIGtleSBpcyBwcmVzc2VkXG4gKiAgICBhbG9uZyB3aXRoIHRoZSBtZXRhIG1vZGlmaWVyLiAgU2VlIGJlbG93IGZvciB0aGUgc3VwcG9ydGVkIGFjdGlvbnMuXG4gKlxuICogQWN0aW9ucyBjYW4gYmUgb25lIG9mIHRoZSBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zIGFzIGRvY3VtZW50ZWQgYmVsb3csXG4gKiBhIGxpdGVyYWwgc3RyaW5nLCBvciBhbiBhcnJheS4gIElmIHRoZSBhY3Rpb24gaXMgYSBsaXRlcmFsIHN0cmluZyB0aGVuXG4gKiB0aGUgc3RyaW5nIGlzIHNlbnQgZGlyZWN0bHkgdG8gdGhlIGhvc3QuICBJZiB0aGUgYWN0aW9uIGlzIGFuIGFycmF5IGl0XG4gKiBpcyB0YWtlbiB0byBiZSBhbiBlc2NhcGUgc2VxdWVuY2UgdGhhdCBtYXkgYmUgYWx0ZXJlZCBieSBtb2RpZmllciBrZXlzLlxuICogVGhlIHNlY29uZC10by1sYXN0IGVsZW1lbnQgb2YgdGhlIGFycmF5IHdpbGwgYmUgb3ZlcndyaXR0ZW4gd2l0aCB0aGVcbiAqIHN0YXRlIG9mIHRoZSBtb2RpZmllciBrZXlzLCBhcyBzcGVjaWZpZWQgaW4gdGhlIGZpbmFsIHRhYmxlIG9mIFwiUEMtU3R5bGVcbiAqIEZ1bmN0aW9uIEtleXNcIiBmcm9tIFtYVEVSTV0uXG4gKi9cbmh0ZXJtLktleWJvYXJkLktleU1hcC5wcm90b3R5cGUuYWRkS2V5RGVmID0gZnVuY3Rpb24oa2V5Q29kZSwgZGVmKSB7XG4gIGlmIChrZXlDb2RlIGluIHRoaXMua2V5RGVmcykgY29uc29sZS53YXJuKCdEdXBsaWNhdGUga2V5Q29kZTogJyArIGtleUNvZGUpO1xuXG4gIHRoaXMua2V5RGVmc1trZXlDb2RlXSA9IGRlZjtcbn07XG5cbi8qKlxuICogQWRkIG11bHRpcGxlIGtleSBkZWZpbml0aW9ucyBpbiBhIHNpbmdsZSBjYWxsLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgdGhlIGtleSBkZWZpbml0aW9ucyBhcyB2YXJpYWJsZSBhcmd1bWVudCBsaXN0LiAgRWFjaFxuICogYXJndW1lbnQgaXMgdGhlIGtleSBkZWZpbml0aW9uIHNwZWNpZmllZCBhcyBhbiBhcnJheS5cbiAqXG4gKiAoSWYgdGhlIGZ1bmN0aW9uIHRvb2sgZXZlcnl0aGluZyBhcyBvbmUgYmlnIGhhc2ggd2UgY291bGRuJ3QgZGV0ZWN0XG4gKiBkdXBsaWNhdGVzLCBhbmQgdGhlcmUgd291bGQgYmUgYSBsb3QgbW9yZSB0eXBpbmcgaW52b2x2ZWQuKVxuICpcbiAqIEVhY2gga2V5IGRlZmluaXRpb24gc2hvdWxkIGhhdmUgNiBlbGVtZW50czogKGtleUNvZGUsIGtleUNhcCwgbm9ybWFsIGFjdGlvbixcbiAqIGNvbnRyb2wgYWN0aW9uLCBhbHQgYWN0aW9uIGFuZCBtZXRhIGFjdGlvbikuICBTZWUgS2V5TWFwLmFkZEtleURlZiBmb3IgdGhlXG4gKiBtZWFuaW5nIG9mIHRoZXNlIGVsZW1lbnRzLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlNYXAucHJvdG90eXBlLmFkZEtleURlZnMgPSBmdW5jdGlvbih2YXJfYXJncykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuYWRkS2V5RGVmKGFyZ3VtZW50c1tpXVswXSwge1xuICAgICAga2V5Q2FwOiBhcmd1bWVudHNbaV1bMV0sXG4gICAgICBub3JtYWw6IGFyZ3VtZW50c1tpXVsyXSxcbiAgICAgIGNvbnRyb2w6IGFyZ3VtZW50c1tpXVszXSxcbiAgICAgIGFsdDogYXJndW1lbnRzW2ldWzRdLFxuICAgICAgbWV0YTogYXJndW1lbnRzW2ldWzVdLFxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCB1cCB0aGUgZGVmYXVsdCBzdGF0ZSBmb3IgdGhpcyBrZXltYXAuXG4gKi9cbmh0ZXJtLktleWJvYXJkLktleU1hcC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5rZXlEZWZzID0ge307XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBieSB0aGUgXCJtYWNyb1wiIGZ1bmN0aW9ucyBiZWxvdy4gIEl0IG1ha2VzIGl0XG4gIC8vIHBvc3NpYmxlIHRvIHVzZSB0aGUgY2FsbCgpIG1hY3JvIGFzIGFuIGFyZ3VtZW50IHRvIGFueSBvdGhlciBtYWNyby5cbiAgZnVuY3Rpb24gcmVzb2x2ZShhY3Rpb24sIGUsIGspIHtcbiAgICBpZiAodHlwZW9mIGFjdGlvbiA9PSAnZnVuY3Rpb24nKSByZXR1cm4gYWN0aW9uLmFwcGx5KHNlbGYsIFtlLCBrXSk7XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG5cbiAgLy8gSWYgbm90IGFwcGxpY2F0aW9uIGtleXBhZCBhLCBlbHNlIGIuICBUaGUga2V5cyB0aGF0IGNhcmUgYWJvdXRcbiAgLy8gYXBwbGljYXRpb24ga2V5cGFkIGlnbm9yZSBpdCB3aGVuIHRoZSBrZXkgaXMgbW9kaWZpZWQuXG4gIGZ1bmN0aW9uIGFrKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSwgaykge1xuICAgICAgdmFyIGFjdGlvbiA9XG4gICAgICAgIGUuc2hpZnRLZXkgfHxcbiAgICAgICAgZS5jdHJsS2V5IHx8XG4gICAgICAgIGUuYWx0S2V5IHx8XG4gICAgICAgIGUubWV0YUtleSB8fFxuICAgICAgICAhc2VsZi5rZXlib2FyZC5hcHBsaWNhdGlvbktleXBhZFxuICAgICAgICAgID8gYVxuICAgICAgICAgIDogYjtcbiAgICAgIHJldHVybiByZXNvbHZlKGFjdGlvbiwgZSwgayk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIElmIG1vZCBvciBub3QgYXBwbGljYXRpb24gY3Vyc29yIGEsIGVsc2UgYi4gIFRoZSBrZXlzIHRoYXQgY2FyZSBhYm91dFxuICAvLyBhcHBsaWNhdGlvbiBjdXJzb3IgaWdub3JlIGl0IHdoZW4gdGhlIGtleSBpcyBtb2RpZmllZC5cbiAgZnVuY3Rpb24gYWMoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbihlLCBrKSB7XG4gICAgICB2YXIgYWN0aW9uID1cbiAgICAgICAgZS5zaGlmdEtleSB8fFxuICAgICAgICBlLmN0cmxLZXkgfHxcbiAgICAgICAgZS5hbHRLZXkgfHxcbiAgICAgICAgZS5tZXRhS2V5IHx8XG4gICAgICAgICFzZWxmLmtleWJvYXJkLmFwcGxpY2F0aW9uQ3Vyc29yXG4gICAgICAgICAgPyBhXG4gICAgICAgICAgOiBiO1xuICAgICAgcmV0dXJuIHJlc29sdmUoYWN0aW9uLCBlLCBrKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gSWYgbm90IGJhY2tzcGFjZS1zZW5kcy1iYWNrc3BhY2Uga2V5cGFkIGEsIGVsc2UgYi5cbiAgZnVuY3Rpb24gYnMoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbihlLCBrKSB7XG4gICAgICB2YXIgYWN0aW9uID0gIXNlbGYua2V5Ym9hcmQuYmFja3NwYWNlU2VuZHNCYWNrc3BhY2UgPyBhIDogYjtcbiAgICAgIHJldHVybiByZXNvbHZlKGFjdGlvbiwgZSwgayk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIElmIG5vdCBlLnNoaWZ0S2V5IGEsIGVsc2UgYi5cbiAgZnVuY3Rpb24gc2goYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbihlLCBrKSB7XG4gICAgICB2YXIgYWN0aW9uID0gIWUuc2hpZnRLZXkgPyBhIDogYjtcbiAgICAgIGUubWFza1NoaWZ0S2V5ID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXNvbHZlKGFjdGlvbiwgZSwgayk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIElmIG5vdCBlLmFsdEtleSBhLCBlbHNlIGIuXG4gIGZ1bmN0aW9uIGFsdChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUsIGspIHtcbiAgICAgIHZhciBhY3Rpb24gPSAhZS5hbHRLZXkgPyBhIDogYjtcbiAgICAgIHJldHVybiByZXNvbHZlKGFjdGlvbiwgZSwgayk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIElmIG5vIG1vZGlmaWVycyBhLCBlbHNlIGIuXG4gIGZ1bmN0aW9uIG1vZChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUsIGspIHtcbiAgICAgIHZhciBhY3Rpb24gPSAhKGUuc2hpZnRLZXkgfHwgZS5jdHJsS2V5IHx8IGUuYWx0S2V5IHx8IGUubWV0YUtleSkgPyBhIDogYjtcbiAgICAgIHJldHVybiByZXNvbHZlKGFjdGlvbiwgZSwgayk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIENvbXB1dGUgYSBjb250cm9sIGNoYXJhY3RlciBmb3IgYSBnaXZlbiBjaGFyYWN0ZXIuXG4gIGZ1bmN0aW9uIGN0bChjaCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgLSA2NCk7XG4gIH1cblxuICAvLyBDYWxsIGEgbWV0aG9kIG9uIHRoZSBrZXltYXAgaW5zdGFuY2UuXG4gIGZ1bmN0aW9uIGMobSkge1xuICAgIHJldHVybiBmdW5jdGlvbihlLCBrKSB7XG4gICAgICByZXR1cm4gdGhpc1ttXShlLCBrKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gSWdub3JlIGlmIG5vdCB0cmFwcGluZyBtZWRpYSBrZXlzLlxuICBmdW5jdGlvbiBtZWQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSwgaykge1xuICAgICAgaWYgKCFzZWxmLmtleWJvYXJkLm1lZGlhS2V5c0FyZUZLZXlzKSB7XG4gICAgICAgIC8vIEJsb2NrIEJhY2ssIEZvcndhcmQsIGFuZCBSZWxvYWQga2V5cyB0byBhdm9pZCBuYXZpZ2F0aW5nIGF3YXkgZnJvbVxuICAgICAgICAvLyB0aGUgY3VycmVudCBwYWdlLlxuICAgICAgICByZXR1cm4gZS5rZXlDb2RlID09IDE2NiB8fCBlLmtleUNvZGUgPT0gMTY3IHx8IGUua2V5Q29kZSA9PSAxNjhcbiAgICAgICAgICA/IGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuQ0FOQ0VMXG4gICAgICAgICAgOiBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLlBBU1M7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzb2x2ZShmbiwgZSwgayk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIEJyb3dzZXItc3BlY2lmaWMgZGlmZmVyZW5jZXMuXG4gIGlmICh3aW5kb3cubmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQpIHtcbiAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnRmlyZWZveCcpKSB7XG4gICAgICAvLyBGaXJlZm94IGRlZmluZXMgc29tZSBrZXlzIHVuaXF1ZWx5LiAgTm8gb3RoZXIgYnJvd3NlciBkZWZpbmVzIHRoZXNlIGlzXG4gICAgICAvLyB0aGlzIHdheS4gIFNvbWUgZXZlbiBjb25mbGljdC4gIFRoZSBrZXlDb2RlIGZpZWxkIGlzbid0IHdlbGwgZG9jdW1lbnRlZFxuICAgICAgLy8gYXMgaXQgaXNuJ3Qgc3RhbmRhcmRpemVkLiAgQXQgc29tZSBwb2ludCB3ZSBzaG91bGQgc3dpdGNoIHRvIFwia2V5XCIuXG4gICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXlDb2RlXG4gICAgICAvLyBodHRwOi8vdW5peHBhcGEuY29tL2pzL2tleS5odG1sXG4gICAgICB2YXIga2V5Y2FwTXV0ZSA9IDE4MTsgLy8gTXV0ZVxuICAgICAgdmFyIGtleWNhcFZvbERuID0gMTgyOyAvLyBWb2x1bWUgRG93blxuICAgICAgdmFyIGtleWNhcFZvbFVwID0gMTgzOyAvLyBWb2x1bWUgVXBcbiAgICAgIHZhciBrZXljYXBTQyA9IDU5OyAvLyA7OlxuICAgICAgdmFyIGtleWNhcEVQID0gNjE7IC8vID0rXG4gICAgICB2YXIga2V5Y2FwTVUgPSAxNzM7IC8vIC1fXG5cbiAgICAgIHRoaXMuYWRkS2V5RGVmcyhcbiAgICAgICAgLy8gRmlyZWZveCBJdGFsaWFuICsqLlxuICAgICAgICBbXG4gICAgICAgICAgMTcxLFxuICAgICAgICAgICcrKicsXG4gICAgICAgICAgREVGQVVMVCxcbiAgICAgICAgICBjKCdvblBsdXNNaW51c1plcm9fJyksXG4gICAgICAgICAgREVGQVVMVCxcbiAgICAgICAgICBjKCdvblBsdXNNaW51c1plcm9fJyksXG4gICAgICAgIF0sXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBbGwgb3RoZXIgYnJvd3NlcnMgdXNlIHRoZXNlIG1hcHBpbmdzLlxuICAgICAgdmFyIGtleWNhcE11dGUgPSAxNzM7IC8vIE11dGVcbiAgICAgIHZhciBrZXljYXBWb2xEbiA9IDE3NDsgLy8gVm9sdW1lIERvd25cbiAgICAgIHZhciBrZXljYXBWb2xVcCA9IDE3NTsgLy8gVm9sdW1lIFVwXG4gICAgICB2YXIga2V5Y2FwU0MgPSAxODY7IC8vIDs6XG4gICAgICB2YXIga2V5Y2FwRVAgPSAxODc7IC8vID0rXG4gICAgICB2YXIga2V5Y2FwTVUgPSAxODk7IC8vIC1fXG4gICAgfVxuICB9XG5cbiAgdmFyIEVTQyA9ICdcXHgxYic7XG4gIHZhciBDU0kgPSAnXFx4MWJbJztcbiAgdmFyIFNTMyA9ICdcXHgxYk8nO1xuXG4gIHZhciBDQU5DRUwgPSBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLkNBTkNFTDtcbiAgdmFyIERFRkFVTFQgPSBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLkRFRkFVTFQ7XG4gIHZhciBQQVNTID0gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5QQVNTO1xuICB2YXIgU1RSSVAgPSBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLlNUUklQO1xuXG4gIHRoaXMuYWRkS2V5RGVmcyhcbiAgICAvLyBUaGVzZSBmaWVsZHMgYXJlOiBba2V5Y29kZSwga2V5Y2FwLCBub3JtYWwsIGNvbnRyb2wsIGFsdCwgbWV0YV1cblxuICAgIC8vIFRoZSBicm93c2VyIHNlbmRzIHRoZSBrZXljb2RlIDAgZm9yIHNvbWUga2V5cy4gIFdlJ2xsIGp1c3QgYXNzdW1lIGl0J3NcbiAgICAvLyBnb2luZyB0byBkbyB0aGUgcmlnaHQgdGhpbmcgYnkgZGVmYXVsdCBmb3IgdGhvc2Uga2V5cy5cbiAgICBbMCwgJ1tVTktOT1dOXScsIFBBU1MsIFBBU1MsIFBBU1MsIFBBU1NdLFxuXG4gICAgLy8gRmlyc3Qgcm93LlxuICAgIC8vIFRoZXNlIGJpbmRpbmdzIG1hdGNoIHh0ZXJtIGZvciBsYWNrIG9mIGEgYmV0dGVyIHN0YW5kYXJkLiAgVGhlIGVtaXR0ZWRcbiAgICAvLyB2YWx1ZXMgbWlnaHQgbG9vayBsaWtlIHRoZXkncmUgc2tpcHBpbmcgdmFsdWVzLCBidXQgaXQncyB3aGF0IHh0ZXJtIGRvZXMuXG4gICAgLy8gaHR0cHM6Ly9pbnZpc2libGUtaXNsYW5kLm5ldC94dGVybS9jdGxzZXFzL2N0bHNlcXMuaHRtbCNoMi1QQy1TdHlsZS1GdW5jdGlvbi1LZXlzXG4gICAgWzI3LCAnW0VTQ10nLCBFU0MsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsxMTIsICdbRjFdJywgbW9kKFNTMyArICdQJywgQ1NJICsgJ1AnKSwgREVGQVVMVCwgQ1NJICsgJzIzficsIERFRkFVTFRdLFxuICAgIFsxMTMsICdbRjJdJywgbW9kKFNTMyArICdRJywgQ1NJICsgJ1EnKSwgREVGQVVMVCwgQ1NJICsgJzI0ficsIERFRkFVTFRdLFxuICAgIFsxMTQsICdbRjNdJywgbW9kKFNTMyArICdSJywgQ1NJICsgJ1InKSwgREVGQVVMVCwgQ1NJICsgJzI1ficsIERFRkFVTFRdLFxuICAgIFsxMTUsICdbRjRdJywgbW9kKFNTMyArICdTJywgQ1NJICsgJ1MnKSwgREVGQVVMVCwgQ1NJICsgJzI2ficsIERFRkFVTFRdLFxuICAgIFsxMTYsICdbRjVdJywgQ1NJICsgJzE1ficsIERFRkFVTFQsIENTSSArICcyOH4nLCBERUZBVUxUXSxcbiAgICBbMTE3LCAnW0Y2XScsIENTSSArICcxN34nLCBERUZBVUxULCBDU0kgKyAnMjl+JywgREVGQVVMVF0sXG4gICAgWzExOCwgJ1tGN10nLCBDU0kgKyAnMTh+JywgREVGQVVMVCwgQ1NJICsgJzMxficsIERFRkFVTFRdLFxuICAgIFsxMTksICdbRjhdJywgQ1NJICsgJzE5ficsIERFRkFVTFQsIENTSSArICczMn4nLCBERUZBVUxUXSxcbiAgICBbMTIwLCAnW0Y5XScsIENTSSArICcyMH4nLCBERUZBVUxULCBDU0kgKyAnMzN+JywgREVGQVVMVF0sXG4gICAgWzEyMSwgJ1tGMTBdJywgQ1NJICsgJzIxficsIERFRkFVTFQsIENTSSArICczNH4nLCBERUZBVUxUXSxcbiAgICBbMTIyLCAnW0YxMV0nLCBjKCdvbkYxMV8nKSwgREVGQVVMVCwgQ1NJICsgJzQyficsIERFRkFVTFRdLFxuICAgIFsxMjMsICdbRjEyXScsIENTSSArICcyNH4nLCBERUZBVUxULCBDU0kgKyAnNDN+JywgREVGQVVMVF0sXG5cbiAgICAvLyBTZWNvbmQgcm93LlxuICAgIFsxOTIsICdgficsIERFRkFVTFQsIHNoKGN0bCgnQCcpLCBjdGwoJ14nKSksIERFRkFVTFQsIFBBU1NdLFxuICAgIFs0OSwgJzEhJywgREVGQVVMVCwgYygnb25DdHJsTnVtXycpLCBjKCdvbkFsdE51bV8nKSwgYygnb25NZXRhTnVtXycpXSxcbiAgICBbNTAsICcyQCcsIERFRkFVTFQsIGMoJ29uQ3RybE51bV8nKSwgYygnb25BbHROdW1fJyksIGMoJ29uTWV0YU51bV8nKV0sXG4gICAgWzUxLCAnMyMnLCBERUZBVUxULCBjKCdvbkN0cmxOdW1fJyksIGMoJ29uQWx0TnVtXycpLCBjKCdvbk1ldGFOdW1fJyldLFxuICAgIFs1MiwgJzQkJywgREVGQVVMVCwgYygnb25DdHJsTnVtXycpLCBjKCdvbkFsdE51bV8nKSwgYygnb25NZXRhTnVtXycpXSxcbiAgICBbNTMsICc1JScsIERFRkFVTFQsIGMoJ29uQ3RybE51bV8nKSwgYygnb25BbHROdW1fJyksIGMoJ29uTWV0YU51bV8nKV0sXG4gICAgWzU0LCAnNl4nLCBERUZBVUxULCBjKCdvbkN0cmxOdW1fJyksIGMoJ29uQWx0TnVtXycpLCBjKCdvbk1ldGFOdW1fJyldLFxuICAgIFs1NSwgJzcmJywgREVGQVVMVCwgYygnb25DdHJsTnVtXycpLCBjKCdvbkFsdE51bV8nKSwgYygnb25NZXRhTnVtXycpXSxcbiAgICBbNTYsICc4KicsIERFRkFVTFQsIGMoJ29uQ3RybE51bV8nKSwgYygnb25BbHROdW1fJyksIGMoJ29uTWV0YU51bV8nKV0sXG4gICAgWzU3LCAnOSgnLCBERUZBVUxULCBjKCdvbkN0cmxOdW1fJyksIGMoJ29uQWx0TnVtXycpLCBjKCdvbk1ldGFOdW1fJyldLFxuICAgIFtcbiAgICAgIDQ4LFxuICAgICAgJzApJyxcbiAgICAgIERFRkFVTFQsXG4gICAgICBjKCdvblBsdXNNaW51c1plcm9fJyksXG4gICAgICBjKCdvbkFsdE51bV8nKSxcbiAgICAgIGMoJ29uUGx1c01pbnVzWmVyb18nKSxcbiAgICBdLFxuICAgIFtcbiAgICAgIGtleWNhcE1VLFxuICAgICAgJy1fJyxcbiAgICAgIERFRkFVTFQsXG4gICAgICBjKCdvblBsdXNNaW51c1plcm9fJyksXG4gICAgICBERUZBVUxULFxuICAgICAgYygnb25QbHVzTWludXNaZXJvXycpLFxuICAgIF0sXG4gICAgW1xuICAgICAga2V5Y2FwRVAsXG4gICAgICAnPSsnLFxuICAgICAgREVGQVVMVCxcbiAgICAgIGMoJ29uUGx1c01pbnVzWmVyb18nKSxcbiAgICAgIERFRkFVTFQsXG4gICAgICBjKCdvblBsdXNNaW51c1plcm9fJyksXG4gICAgXSxcblxuICAgIFs4LCAnW0JLU1BdJywgYnMoJ1xceDdmJywgJ1xcYicpLCBicygnXFxiJywgJ1xceDdmJyksIERFRkFVTFQsIERFRkFVTFRdLFxuXG4gICAgLy8gVGhpcmQgcm93LlxuICAgIFs5LCAnW1RBQl0nLCBzaCgnXFx0JywgQ1NJICsgJ1onKSwgU1RSSVAsIFBBU1MsIERFRkFVTFRdLFxuICAgIFs4MSwgJ3FRJywgREVGQVVMVCwgY3RsKCdRJyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFs4NywgJ3dXJywgREVGQVVMVCwgY3RsKCdXJyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFs2OSwgJ2VFJywgREVGQVVMVCwgY3RsKCdFJyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFs4MiwgJ3JSJywgREVGQVVMVCwgY3RsKCdSJyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFs4NCwgJ3RUJywgREVGQVVMVCwgY3RsKCdUJyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFs4OSwgJ3lZJywgREVGQVVMVCwgY3RsKCdZJyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFs4NSwgJ3VVJywgREVGQVVMVCwgY3RsKCdVJyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFs3MywgJ2lJJywgREVGQVVMVCwgY3RsKCdJJyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFs3OSwgJ29PJywgREVGQVVMVCwgY3RsKCdPJyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFs4MCwgJ3BQJywgREVGQVVMVCwgY3RsKCdQJyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsyMTksICdbeycsIERFRkFVTFQsIGN0bCgnWycpLCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbMjIxLCAnXX0nLCBERUZBVUxULCBjdGwoJ10nKSwgREVGQVVMVCwgREVGQVVMVF0sXG4gICAgWzIyMCwgJ1xcXFx8JywgREVGQVVMVCwgY3RsKCdcXFxcJyksIERFRkFVTFQsIERFRkFVTFRdLFxuXG4gICAgLy8gRm91cnRoIHJvdy4gKFdlIGxldCBDdHJsLVNoaWZ0LUogcGFzcyBmb3IgQ2hyb21lIERldlRvb2xzLilcbiAgICBbMjAsICdbQ0FQU10nLCBQQVNTLCBQQVNTLCBQQVNTLCBERUZBVUxUXSxcbiAgICBbNjUsICdhQScsIERFRkFVTFQsIGN0bCgnQScpLCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbODMsICdzUycsIERFRkFVTFQsIGN0bCgnUycpLCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbNjgsICdkRCcsIERFRkFVTFQsIGN0bCgnRCcpLCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbNzAsICdmRicsIERFRkFVTFQsIGN0bCgnRicpLCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbNzEsICdnRycsIERFRkFVTFQsIGN0bCgnRycpLCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbNzIsICdoSCcsIERFRkFVTFQsIGN0bCgnSCcpLCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbNzQsICdqSicsIERFRkFVTFQsIHNoKGN0bCgnSicpLCBQQVNTKSwgREVGQVVMVCwgREVGQVVMVF0sXG4gICAgWzc1LCAna0snLCBERUZBVUxULCBzaChjdGwoJ0snKSwgYygnb25DbGVhcl8nKSksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFs3NiwgJ2xMJywgREVGQVVMVCwgc2goY3RsKCdMJyksIFBBU1MpLCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBba2V5Y2FwU0MsICc7OicsIERFRkFVTFQsIFNUUklQLCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbMjIyLCAnXFwnXCInLCBERUZBVUxULCBTVFJJUCwgREVGQVVMVCwgREVGQVVMVF0sXG4gICAgWzEzLCAnW0VOVEVSXScsICdcXHInLCBDQU5DRUwsIENBTkNFTCwgREVGQVVMVF0sXG5cbiAgICAvLyBGaWZ0aCByb3cuICBUaGlzIGluY2x1ZGVzIHRoZSBjb3B5L3Bhc3RlIHNob3J0Y3V0cy4gIE9uIHNvbWVcbiAgICAvLyBwbGF0Zm9ybXMgaXQncyBDdHJsLUMvViwgb24gb3RoZXJzIGl0J3MgTWV0YS1DL1YuICBXZSBhc3N1bWUgZWl0aGVyXG4gICAgLy8gQ3RybC1DL01ldGEtQyBzaG91bGQgcGFzcyB0byB0aGUgYnJvd3NlciB3aGVuIHRoZXJlIGlzIGEgc2VsZWN0aW9uLFxuICAgIC8vIGFuZCBDdHJsLVNoaWZ0LVYvTWV0YS0qLVYgc2hvdWxkIGFsd2F5cyBwYXNzIHRvIHRoZSBicm93c2VyIChzaW5jZVxuICAgIC8vIHRoZXNlIHNlZW0gdG8gYmUgcmVjb2duaXplZCBhcyBwYXN0ZSB0b28pLlxuICAgIFsxNiwgJ1tTSElGVF0nLCBQQVNTLCBQQVNTLCBQQVNTLCBERUZBVUxUXSxcbiAgICBbOTAsICd6WicsIERFRkFVTFQsIGN0bCgnWicpLCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbODgsICd4WCcsIERFRkFVTFQsIGN0bCgnWCcpLCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbNjcsICdjQycsIERFRkFVTFQsIGMoJ29uQ3RybENfJyksIERFRkFVTFQsIGMoJ29uTWV0YUNfJyldLFxuICAgIFs4NiwgJ3ZWJywgREVGQVVMVCwgYygnb25DdHJsVl8nKSwgREVGQVVMVCwgYygnb25NZXRhVl8nKV0sXG4gICAgWzY2LCAnYkInLCBERUZBVUxULCBzaChjdGwoJ0InKSwgUEFTUyksIERFRkFVTFQsIHNoKERFRkFVTFQsIFBBU1MpXSxcbiAgICBbNzgsICduTicsIERFRkFVTFQsIGMoJ29uQ3RybE5fJyksIERFRkFVTFQsIGMoJ29uTWV0YU5fJyldLFxuICAgIFs3NywgJ21NJywgREVGQVVMVCwgY3RsKCdNJyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsxODgsICcsPCcsIERFRkFVTFQsIGFsdChTVFJJUCwgUEFTUyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsxOTAsICcuPicsIERFRkFVTFQsIGFsdChTVFJJUCwgUEFTUyksIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsxOTEsICcvPycsIERFRkFVTFQsIHNoKGN0bCgnXycpLCBjdGwoJz8nKSksIERFRkFVTFQsIERFRkFVTFRdLFxuXG4gICAgLy8gU2l4dGggYW5kIGZpbmFsIHJvdy5cbiAgICBbMTcsICdbQ1RSTF0nLCBQQVNTLCBQQVNTLCBQQVNTLCBQQVNTXSxcbiAgICBbMTgsICdbQUxUXScsIFBBU1MsIFBBU1MsIFBBU1MsIFBBU1NdLFxuICAgIFs5MSwgJ1tMQVBMXScsIFBBU1MsIFBBU1MsIFBBU1MsIFBBU1NdLFxuICAgIFszMiwgJyAnLCBERUZBVUxULCBjdGwoJ0AnKSwgREVGQVVMVCwgREVGQVVMVF0sXG4gICAgWzkyLCAnW1JBUExdJywgUEFTUywgUEFTUywgUEFTUywgUEFTU10sXG4gICAgWzkzLCAnW1JNRU5VXScsIFBBU1MsIFBBU1MsIFBBU1MsIFBBU1NdLFxuXG4gICAgLy8gVGhlc2UgdGhpbmdzLlxuICAgIFs0MiwgJ1tQUlRTQ1JdJywgUEFTUywgUEFTUywgUEFTUywgUEFTU10sXG4gICAgWzE0NSwgJ1tTQ1JMS10nLCBQQVNTLCBQQVNTLCBQQVNTLCBQQVNTXSxcbiAgICBbMTksICdbQlJFQUtdJywgUEFTUywgUEFTUywgUEFTUywgUEFTU10sXG5cbiAgICAvLyBUaGUgYmxvY2sgb2Ygc2l4IGtleXMgYWJvdmUgdGhlIGFycm93cy5cbiAgICBbNDUsICdbSU5TRVJUXScsIGMoJ29uS2V5SW5zZXJ0XycpLCBERUZBVUxULCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbMzYsICdbSE9NRV0nLCBjKCdvbktleUhvbWVfJyksIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFszMywgJ1tQR1VQXScsIGMoJ29uS2V5UGFnZVVwXycpLCBERUZBVUxULCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbNDYsICdbREVMXScsIGMoJ29uS2V5RGVsXycpLCBERUZBVUxULCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbMzUsICdbRU5EXScsIGMoJ29uS2V5RW5kXycpLCBERUZBVUxULCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbMzQsICdbUEdET1dOXScsIGMoJ29uS2V5UGFnZURvd25fJyksIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuXG4gICAgLy8gQXJyb3cga2V5cy4gIFdoZW4gdW5tb2RpZmllZCB0aGV5IHJlc3BlY3QgdGhlIGFwcGxpY2F0aW9uIGN1cnNvciBzdGF0ZSxcbiAgICAvLyBvdGhlcndpc2UgdGhleSBhbHdheXMgc2VuZCB0aGUgQ1NJIGNvZGVzLlxuICAgIFszOCwgJ1tVUF0nLCBjKCdvbktleUFycm93VXBfJyksIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFs0MCwgJ1tET1dOXScsIGMoJ29uS2V5QXJyb3dEb3duXycpLCBERUZBVUxULCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbMzksICdbUklHSFRdJywgYWMoQ1NJICsgJ0MnLCBTUzMgKyAnQycpLCBERUZBVUxULCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbMzcsICdbTEVGVF0nLCBhYyhDU0kgKyAnRCcsIFNTMyArICdEJyksIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuXG4gICAgWzE0NCwgJ1tOVU1MT0NLXScsIFBBU1MsIFBBU1MsIFBBU1MsIFBBU1NdLFxuXG4gICAgLy8gT24gQXBwbGUga2V5Ym9hcmRzLCB0aGUgTnVtTG9jayBrZXkgaXMgYSBDbGVhciBrZXkuICBJdCBhbHNvIHRlbmRzIHRvIGJlXG4gICAgLy8gd2hhdCBLUDUgc2VuZHMgd2hlbiBudW1sb2NrIGlzIG9mZi4gIE5vdCBjbGVhciBpZiB3ZSBjb3VsZCBkbyBhbnl0aGluZ1xuICAgIC8vIHVzZWZ1bCB3aXRoIGl0LCBzbyBqdXN0IHBhc3MgaXQgYWxvbmcuXG4gICAgWzEyLCAnW0NMRUFSXScsIFBBU1MsIFBBU1MsIFBBU1MsIFBBU1NdLFxuXG4gICAgLy8gV2l0aCBudW1sb2NrIG9mZiwgdGhlIGtleXBhZCBnZW5lcmF0ZXMgdGhlIHNhbWUga2V5IGNvZGVzIGFzIHRoZSBhcnJvd3NcbiAgICAvLyBhbmQgJ2Jsb2NrIG9mIHNpeCcgZm9yIHNvbWUga2V5cywgYW5kIG51bGwga2V5IGNvZGVzIGZvciB0aGUgcmVzdC5cblxuICAgIC8vIEtleXBhZCB3aXRoIG51bWxvY2sgb24gZ2VuZXJhdGVzIHVuaXF1ZSBrZXkgY29kZXMuLi5cbiAgICBbOTYsICdbS1AwXScsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFs5NywgJ1tLUDFdJywgREVGQVVMVCwgREVGQVVMVCwgREVGQVVMVCwgREVGQVVMVF0sXG4gICAgWzk4LCAnW0tQMl0nLCBERUZBVUxULCBERUZBVUxULCBERUZBVUxULCBERUZBVUxUXSxcbiAgICBbOTksICdbS1AzXScsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsxMDAsICdbS1A0XScsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsxMDEsICdbS1A1XScsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsxMDIsICdbS1A2XScsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsxMDMsICdbS1A3XScsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsxMDQsICdbS1A4XScsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsxMDUsICdbS1A5XScsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFtcbiAgICAgIDEwNyxcbiAgICAgICdbS1ArXScsXG4gICAgICBERUZBVUxULFxuICAgICAgYygnb25QbHVzTWludXNaZXJvXycpLFxuICAgICAgREVGQVVMVCxcbiAgICAgIGMoJ29uUGx1c01pbnVzWmVyb18nKSxcbiAgICBdLFxuICAgIFtcbiAgICAgIDEwOSxcbiAgICAgICdbS1AtXScsXG4gICAgICBERUZBVUxULFxuICAgICAgYygnb25QbHVzTWludXNaZXJvXycpLFxuICAgICAgREVGQVVMVCxcbiAgICAgIGMoJ29uUGx1c01pbnVzWmVyb18nKSxcbiAgICBdLFxuICAgIFsxMDYsICdbS1AqXScsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsxMTEsICdbS1AvXScsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgIFsxMTAsICdbS1AuXScsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICApO1xuXG4gIC8vIE9TLXNwZWNpZmljIGRpZmZlcmVuY2VzLlxuICBpZiAoaHRlcm0ub3MgPT0gJ2Nyb3MnKSB7XG4gICAgdGhpcy5hZGRLZXlEZWZzKFxuICAgICAgLy8gQ2hyb21lIE9TIGtleWJvYXJkIHRvcCByb3cuICBUaGUgbWVkaWEta2V5cy1hcmUtZmtleXMgcHJlZmVyZW5jZSBhbGxvd3NcbiAgICAgIC8vIHVzZXJzIHRvIG1ha2UgdGhlc2UgYWx3YXlzIGJlaGF2ZSBhcyBmdW5jdGlvbiBrZXlzIChzZWUgdGhvc2UgYmluZGluZ3NcbiAgICAgIC8vIGFib3ZlIGZvciBtb3JlIGRldGFpbHMpLlxuICAgICAgW1xuICAgICAgICAxNjYsXG4gICAgICAgICdbQkFDS10nLFxuICAgICAgICBtZWQobW9kKFNTMyArICdQJywgQ1NJICsgJ1AnKSksXG4gICAgICAgIERFRkFVTFQsXG4gICAgICAgIENTSSArICcyM34nLFxuICAgICAgICBERUZBVUxULFxuICAgICAgXSwgLy8gRjFcbiAgICAgIFtcbiAgICAgICAgMTY3LFxuICAgICAgICAnW0ZXRF0nLFxuICAgICAgICBtZWQobW9kKFNTMyArICdRJywgQ1NJICsgJ1EnKSksXG4gICAgICAgIERFRkFVTFQsXG4gICAgICAgIENTSSArICcyNH4nLFxuICAgICAgICBERUZBVUxULFxuICAgICAgXSwgLy8gRjJcbiAgICAgIFtcbiAgICAgICAgMTY4LFxuICAgICAgICAnW1JFTE9BRF0nLFxuICAgICAgICBtZWQobW9kKFNTMyArICdSJywgQ1NJICsgJ1InKSksXG4gICAgICAgIERFRkFVTFQsXG4gICAgICAgIENTSSArICcyNX4nLFxuICAgICAgICBERUZBVUxULFxuICAgICAgXSwgLy8gRjNcbiAgICAgIFtcbiAgICAgICAgMTgzLFxuICAgICAgICAnW0ZTQ1JdJyxcbiAgICAgICAgbWVkKG1vZChTUzMgKyAnUycsIENTSSArICdTJykpLFxuICAgICAgICBERUZBVUxULFxuICAgICAgICBDU0kgKyAnMjZ+JyxcbiAgICAgICAgREVGQVVMVCxcbiAgICAgIF0sIC8vIEY0XG4gICAgICBbMTgyLCAnW1dJTlNdJywgbWVkKENTSSArICcxNX4nKSwgREVGQVVMVCwgQ1NJICsgJzI4ficsIERFRkFVTFRdLCAvLyBGNVxuICAgICAgWzIxNiwgJ1tCUklULV0nLCBtZWQoQ1NJICsgJzE3ficpLCBERUZBVUxULCBDU0kgKyAnMjl+JywgREVGQVVMVF0sIC8vIEY2XG4gICAgICBbMjE3LCAnW0JSSVQrXScsIG1lZChDU0kgKyAnMTh+JyksIERFRkFVTFQsIENTSSArICczMX4nLCBERUZBVUxUXSwgLy8gRjdcbiAgICAgIFsxNzMsICdbTVVURV0nLCBtZWQoQ1NJICsgJzE5ficpLCBERUZBVUxULCBDU0kgKyAnMzJ+JywgREVGQVVMVF0sIC8vIEY4XG4gICAgICBbMTc0LCAnW1ZPTC1dJywgbWVkKENTSSArICcyMH4nKSwgREVGQVVMVCwgQ1NJICsgJzMzficsIERFRkFVTFRdLCAvLyBGOVxuICAgICAgWzE3NSwgJ1tWT0wrXScsIG1lZChDU0kgKyAnMjF+JyksIERFRkFVTFQsIENTSSArICczNH4nLCBERUZBVUxUXSwgLy8gRjEwXG5cbiAgICAgIC8vIFdlIGNvdWxkIG1ha2UgdGhpcyBpbnRvIEYxMSwgYnV0IGl0J2QgYmUgYSBiaXQgd2VpcmQuICBDaHJvbWUgYWxsb3dzIHVzXG4gICAgICAvLyB0byBzZWUgdGhpcyBhbmQgcmVhY3QsIGJ1dCBpdCBkb2Vzbid0IGFjdHVhbGx5IGFsbG93IHVzIHRvIGJsb2NrIG9yXG4gICAgICAvLyBjYW5jZWwgaXQsIHNvIGl0IG1ha2VzIHRoZSBzY3JlZW4gZmxhc2gvbG9jayBzdGlsbC5cbiAgICAgIFsxNTIsICdbUE9XRVJdJywgREVGQVVMVCwgREVGQVVMVCwgREVGQVVMVCwgREVGQVVMVF0sXG5cbiAgICAgIC8vIFRoZSBQaXhlbGJvb2sgaGFzIGEgc2xpZ2h0bHkgZGlmZmVyZW50IGxheW91dC4gIFRoaXMgbWVhbnMgaGFsZiB0aGUga2V5c1xuICAgICAgLy8gYWJvdmUgYXJlIG9mZiBieSBvbmUuICBodHRwczovL2NyYnVnLmNvbS84MDc1MTNcbiAgICAgIFsxNzksICdbUExBWV0nLCBtZWQoQ1NJICsgJzE4ficpLCBERUZBVUxULCBDU0kgKyAnMzF+JywgREVGQVVMVF0sIC8vIEY3XG4gICAgICAvLyBUaGUgc2V0dGluZ3MgLyBoYW1idXJnZXJzIC8gdGhyZWUgaG90IGRvZ3MgLyBtZW51IC8gd2hhdGV2ZXItaXQncy1jYWxsZWQuXG4gICAgICBbMTU0LCAnW0RPR1NdJywgbWVkKENTSSArICcyM34nKSwgREVGQVVMVCwgQ1NJICsgJzQyficsIERFRkFVTFRdLCAvLyBGMTFcblxuICAgICAgLy8gV2UgZG9uJ3QgdXNlIHRoaXMgZm9yIGFueXRoaW5nLCBidXQga2VlcCBpdCBmcm9tIHBvcHBpbmcgdXAgYnkgZGVmYXVsdC5cbiAgICAgIFsxNTMsICdbQVNTSVNUXScsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFQsIERFRkFVTFRdLFxuICAgICk7XG4gIH1cbn07XG5cbi8qKlxuICogRWl0aGVyIGFsbG93IHRoZSBwYXN0ZSBvciBzZW5kIGEga2V5IHNlcXVlbmNlLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlNYXAucHJvdG90eXBlLm9uS2V5SW5zZXJ0XyA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYgKHRoaXMua2V5Ym9hcmQuc2hpZnRJbnNlcnRQYXN0ZSAmJiBlLnNoaWZ0S2V5KVxuICAgIHJldHVybiBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLlBBU1M7XG5cbiAgcmV0dXJuICdcXHgxYlsyfic7XG59O1xuXG4vKipcbiAqIEVpdGhlciBzY3JvbGwgdGhlIHNjcm9sbGJhY2sgYnVmZmVyIG9yIHNlbmQgYSBrZXkgc2VxdWVuY2UuXG4gKi9cbmh0ZXJtLktleWJvYXJkLktleU1hcC5wcm90b3R5cGUub25LZXlIb21lXyA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYgKCF0aGlzLmtleWJvYXJkLmhvbWVLZXlzU2Nyb2xsIF4gZS5zaGlmdEtleSkge1xuICAgIGlmIChcbiAgICAgIGUuYWx0ZXkgfHxcbiAgICAgIGUuY3RybEtleSB8fFxuICAgICAgZS5zaGlmdEtleSB8fFxuICAgICAgIXRoaXMua2V5Ym9hcmQuYXBwbGljYXRpb25DdXJzb3JcbiAgICApIHtcbiAgICAgIHJldHVybiAnXFx4MWJbSCc7XG4gICAgfVxuXG4gICAgcmV0dXJuICdcXHgxYk9IJztcbiAgfVxuXG4gIHRoaXMua2V5Ym9hcmQudGVybWluYWwuc2Nyb2xsSG9tZSgpO1xuICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG59O1xuXG4vKipcbiAqIEVpdGhlciBzY3JvbGwgdGhlIHNjcm9sbGJhY2sgYnVmZmVyIG9yIHNlbmQgYSBrZXkgc2VxdWVuY2UuXG4gKi9cbmh0ZXJtLktleWJvYXJkLktleU1hcC5wcm90b3R5cGUub25LZXlFbmRfID0gZnVuY3Rpb24oZSkge1xuICBpZiAoIXRoaXMua2V5Ym9hcmQuaG9tZUtleXNTY3JvbGwgXiBlLnNoaWZ0S2V5KSB7XG4gICAgaWYgKFxuICAgICAgZS5hbHRLZXkgfHxcbiAgICAgIGUuY3RybEtleSB8fFxuICAgICAgZS5zaGlmdEtleSB8fFxuICAgICAgIXRoaXMua2V5Ym9hcmQuYXBwbGljYXRpb25DdXJzb3JcbiAgICApIHtcbiAgICAgIHJldHVybiAnXFx4MWJbRic7XG4gICAgfVxuXG4gICAgcmV0dXJuICdcXHgxYk9GJztcbiAgfVxuXG4gIHRoaXMua2V5Ym9hcmQudGVybWluYWwuc2Nyb2xsRW5kKCk7XG4gIHJldHVybiBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLkNBTkNFTDtcbn07XG5cbi8qKlxuICogRWl0aGVyIHNjcm9sbCB0aGUgc2Nyb2xsYmFjayBidWZmZXIgb3Igc2VuZCBhIGtleSBzZXF1ZW5jZS5cbiAqL1xuaHRlcm0uS2V5Ym9hcmQuS2V5TWFwLnByb3RvdHlwZS5vbktleVBhZ2VVcF8gPSBmdW5jdGlvbihlKSB7XG4gIGlmICghdGhpcy5rZXlib2FyZC5wYWdlS2V5c1Njcm9sbCBeIGUuc2hpZnRLZXkpIHJldHVybiAnXFx4MWJbNX4nO1xuXG4gIHRoaXMua2V5Ym9hcmQudGVybWluYWwuc2Nyb2xsUGFnZVVwKCk7XG4gIHJldHVybiBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLkNBTkNFTDtcbn07XG5cbi8qKlxuICogRWl0aGVyIHNlbmQgYSB0cnVlIERFTCwgb3Igc3ViIGluIG1ldGEtYmFja3NwYWNlLlxuICpcbiAqIE9uIENocm9tZSBPUywgaWYgd2Uga25vdyB0aGUgYWx0IGtleSBpcyBkb3duLCBidXQgd2UgZ2V0IGEgREVMIGV2ZW50IHRoYXRcbiAqIGNsYWltcyB0aGF0IHRoZSBhbHQga2V5IGlzIG5vdCBwcmVzc2VkLCB3ZSBrbm93IHRoZSBERUwgd2FzIGEgc3ludGhldGljXG4gKiBvbmUgZnJvbSBhIHVzZXIgdGhhdCBoaXQgYWx0LWJhY2tzcGFjZS4gQmFzZWQgb24gYSB1c2VyIHByZWYsIHdlIGNhbiBzdWJcbiAqIGluIG1ldGEtYmFja3NwYWNlIGluIHRoaXMgY2FzZS5cbiAqL1xuaHRlcm0uS2V5Ym9hcmQuS2V5TWFwLnByb3RvdHlwZS5vbktleURlbF8gPSBmdW5jdGlvbihlKSB7XG4gIGlmIChcbiAgICB0aGlzLmtleWJvYXJkLmFsdEJhY2tzcGFjZUlzTWV0YUJhY2tzcGFjZSAmJlxuICAgIHRoaXMua2V5Ym9hcmQuYWx0S2V5UHJlc3NlZCAmJlxuICAgICFlLmFsdEtleVxuICApXG4gICAgcmV0dXJuICdcXHgxYlxceDdmJztcbiAgcmV0dXJuICdcXHgxYlszfic7XG59O1xuXG4vKipcbiAqIEVpdGhlciBzY3JvbGwgdGhlIHNjcm9sbGJhY2sgYnVmZmVyIG9yIHNlbmQgYSBrZXkgc2VxdWVuY2UuXG4gKi9cbmh0ZXJtLktleWJvYXJkLktleU1hcC5wcm90b3R5cGUub25LZXlQYWdlRG93bl8gPSBmdW5jdGlvbihlKSB7XG4gIGlmICghdGhpcy5rZXlib2FyZC5wYWdlS2V5c1Njcm9sbCBeIGUuc2hpZnRLZXkpIHJldHVybiAnXFx4MWJbNn4nO1xuXG4gIHRoaXMua2V5Ym9hcmQudGVybWluYWwuc2Nyb2xsUGFnZURvd24oKTtcbiAgcmV0dXJuIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuQ0FOQ0VMO1xufTtcblxuLyoqXG4gKiBFaXRoZXIgc2Nyb2xsIHRoZSBzY3JvbGxiYWNrIGJ1ZmZlciBvciBzZW5kIGEga2V5IHNlcXVlbmNlLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlNYXAucHJvdG90eXBlLm9uS2V5QXJyb3dVcF8gPSBmdW5jdGlvbihlKSB7XG4gIGlmICghdGhpcy5rZXlib2FyZC5hcHBsaWNhdGlvbkN1cnNvciAmJiBlLnNoaWZ0S2V5KSB7XG4gICAgdGhpcy5rZXlib2FyZC50ZXJtaW5hbC5zY3JvbGxMaW5lVXAoKTtcbiAgICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG4gIH1cblxuICByZXR1cm4gZS5zaGlmdEtleSB8fFxuICAgIGUuY3RybEtleSB8fFxuICAgIGUuYWx0S2V5IHx8XG4gICAgZS5tZXRhS2V5IHx8XG4gICAgIXRoaXMua2V5Ym9hcmQuYXBwbGljYXRpb25DdXJzb3JcbiAgICA/ICdcXHgxYltBJ1xuICAgIDogJ1xceDFiT0EnO1xufTtcblxuLyoqXG4gKiBFaXRoZXIgc2Nyb2xsIHRoZSBzY3JvbGxiYWNrIGJ1ZmZlciBvciBzZW5kIGEga2V5IHNlcXVlbmNlLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlNYXAucHJvdG90eXBlLm9uS2V5QXJyb3dEb3duXyA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYgKCF0aGlzLmtleWJvYXJkLmFwcGxpY2F0aW9uQ3Vyc29yICYmIGUuc2hpZnRLZXkpIHtcbiAgICB0aGlzLmtleWJvYXJkLnRlcm1pbmFsLnNjcm9sbExpbmVEb3duKCk7XG4gICAgcmV0dXJuIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuQ0FOQ0VMO1xuICB9XG5cbiAgcmV0dXJuIGUuc2hpZnRLZXkgfHxcbiAgICBlLmN0cmxLZXkgfHxcbiAgICBlLmFsdEtleSB8fFxuICAgIGUubWV0YUtleSB8fFxuICAgICF0aGlzLmtleWJvYXJkLmFwcGxpY2F0aW9uQ3Vyc29yXG4gICAgPyAnXFx4MWJbQidcbiAgICA6ICdcXHgxYk9CJztcbn07XG5cbi8qKlxuICogQ2xlYXIgdGhlIHByaW1hcnkvYWx0ZXJuYXRlIHNjcmVlbnMgYW5kIHRoZSBzY3JvbGxiYWNrIGJ1ZmZlci5cbiAqL1xuaHRlcm0uS2V5Ym9hcmQuS2V5TWFwLnByb3RvdHlwZS5vbkNsZWFyXyA9IGZ1bmN0aW9uKGUsIGtleURlZikge1xuICB0aGlzLmtleWJvYXJkLnRlcm1pbmFsLndpcGVDb250ZW50cygpO1xuICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG59O1xuXG4vKipcbiAqIEhhbmRsZSBGMTEgYmVoYXZpb3IgKGZ1bGxzY3JlZW4pIHdoZW4gbm90IGluIGEgd2luZG93LlxuICpcbiAqIEl0IHdvdWxkIGJlIG5pY2UgdG8gdXNlIHRoZSBGdWxsc2NyZWVuIEFQSSwgYnV0IHRoZSBVWCBpcyBzbGlnaHRseSBkaWZmZXJlbnRcbiAqIGEgYmFkIHdheTogdGhlIEVzY2FwZSBrZXkgaXMgYXV0b21hdGljYWxseSByZWdpc3RlcmVkIGZvciBleGl0aW5nLiAgSWYgd2UgbGV0XG4gKiB0aGUgYnJvd3NlciBoYW5kbGUgRjExIGRpcmVjdGx5IHRob3VnaCwgd2Ugc3RpbGwgZ2V0IHRvIGNhcHR1cmUgRXNjYXBlLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlNYXAucHJvdG90eXBlLm9uRjExXyA9IGZ1bmN0aW9uKGUsIGtleURlZikge1xuICBpZiAoaHRlcm0ud2luZG93VHlwZSAhPSAncG9wdXAnKSByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5QQVNTO1xuICBlbHNlIHJldHVybiAnXFx4MWJbMjN+Jztcbn07XG5cbi8qKlxuICogRWl0aGVyIHBhc3MgQ3RybC0xLi45IHRvIHRoZSBicm93c2VyIG9yIHNlbmQgdGhlbSB0byB0aGUgaG9zdC5cbiAqXG4gKiBOb3RlIHRoYXQgQ3RybC0xIGFuZCBDdHJsLTkgZG9uJ3QgYWN0dWFsbHkgaGF2ZSBzcGVjaWFsIHNlcXVlbmNlcyBtYXBwZWRcbiAqIHRvIHRoZW0gaW4geHRlcm0gb3IgZ25vbWUtdGVybWluYWwuICBUaGUgcmFuZ2UgaXMgcmVhbGx5IEN0cmwtMi4uOCwgYnV0XG4gKiB3ZSBoYW5kbGUgMS4uOSBzaW5jZSBDaHJvbWUgdHJlYXRzIHRoZSB3aG9sZSByYW5nZSBzcGVjaWFsLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlNYXAucHJvdG90eXBlLm9uQ3RybE51bV8gPSBmdW5jdGlvbihlLCBrZXlEZWYpIHtcbiAgLy8gQ29tcHV0ZSBhIGNvbnRyb2wgY2hhcmFjdGVyIGZvciBhIGdpdmVuIGNoYXJhY3Rlci5cbiAgZnVuY3Rpb24gY3RsKGNoKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSAtIDY0KTtcbiAgfVxuXG4gIGlmICh0aGlzLmtleWJvYXJkLnRlcm1pbmFsLnBhc3NDdHJsTnVtYmVyICYmICFlLnNoaWZ0S2V5KVxuICAgIHJldHVybiBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLlBBU1M7XG5cbiAgc3dpdGNoIChrZXlEZWYua2V5Q2FwLnN1YnN0cigwLCAxKSkge1xuICAgIGNhc2UgJzEnOlxuICAgICAgcmV0dXJuICcxJztcbiAgICBjYXNlICcyJzpcbiAgICAgIHJldHVybiBjdGwoJ0AnKTtcbiAgICBjYXNlICczJzpcbiAgICAgIHJldHVybiBjdGwoJ1snKTtcbiAgICBjYXNlICc0JzpcbiAgICAgIHJldHVybiBjdGwoJ1xcXFwnKTtcbiAgICBjYXNlICc1JzpcbiAgICAgIHJldHVybiBjdGwoJ10nKTtcbiAgICBjYXNlICc2JzpcbiAgICAgIHJldHVybiBjdGwoJ14nKTtcbiAgICBjYXNlICc3JzpcbiAgICAgIHJldHVybiBjdGwoJ18nKTtcbiAgICBjYXNlICc4JzpcbiAgICAgIHJldHVybiAnXFx4N2YnO1xuICAgIGNhc2UgJzknOlxuICAgICAgcmV0dXJuICc5JztcbiAgfVxufTtcblxuLyoqXG4gKiBFaXRoZXIgcGFzcyBBbHQtMS4uOSB0byB0aGUgYnJvd3NlciBvciBzZW5kIHRoZW0gdG8gdGhlIGhvc3QuXG4gKi9cbmh0ZXJtLktleWJvYXJkLktleU1hcC5wcm90b3R5cGUub25BbHROdW1fID0gZnVuY3Rpb24oZSwga2V5RGVmKSB7XG4gIGlmICh0aGlzLmtleWJvYXJkLnRlcm1pbmFsLnBhc3NBbHROdW1iZXIgJiYgIWUuc2hpZnRLZXkpXG4gICAgcmV0dXJuIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuUEFTUztcblxuICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5ERUZBVUxUO1xufTtcblxuLyoqXG4gKiBFaXRoZXIgcGFzcyBNZXRhLTEuLjkgdG8gdGhlIGJyb3dzZXIgb3Igc2VuZCB0aGVtIHRvIHRoZSBob3N0LlxuICovXG5odGVybS5LZXlib2FyZC5LZXlNYXAucHJvdG90eXBlLm9uTWV0YU51bV8gPSBmdW5jdGlvbihlLCBrZXlEZWYpIHtcbiAgaWYgKHRoaXMua2V5Ym9hcmQudGVybWluYWwucGFzc01ldGFOdW1iZXIgJiYgIWUuc2hpZnRLZXkpXG4gICAgcmV0dXJuIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuUEFTUztcblxuICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5ERUZBVUxUO1xufTtcblxuLyoqXG4gKiBFaXRoZXIgc2VuZCBhIF5DIG9yIGludGVycHJldCB0aGUga2V5c3Ryb2tlIGFzIGEgY29weSBjb21tYW5kLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlNYXAucHJvdG90eXBlLm9uQ3RybENfID0gZnVuY3Rpb24oZSwga2V5RGVmKSB7XG4gIHZhciBzZWxlY3Rpb24gPSB0aGlzLmtleWJvYXJkLnRlcm1pbmFsLmdldERvY3VtZW50KCkuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgaWYgKCFzZWxlY3Rpb24uaXNDb2xsYXBzZWQpIHtcbiAgICBpZiAodGhpcy5rZXlib2FyZC5jdHJsQ0NvcHkgJiYgIWUuc2hpZnRLZXkpIHtcbiAgICAgIC8vIEN0cmwtQyBzaG91bGQgY29weSBpZiB0aGVyZSBpcyBhIHNlbGVjdGlvbiwgc2VuZCBeQyBvdGhlcndpc2UuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBjb3B5IGJ5IGxldHRpbmcgdGhlIGJyb3dzZXIgaGFuZGxlIEN0cmwtQy4gIE9uIG1vc3RcbiAgICAgIC8vIGJyb3dzZXJzLCB0aGlzIGlzIHRoZSAqb25seSogd2F5IHRvIHBsYWNlIHRleHQgb24gdGhlIGNsaXBib2FyZCBmcm9tXG4gICAgICAvLyB0aGUgJ2RyaXZlLWJ5JyB3ZWIuXG4gICAgICBpZiAodGhpcy5rZXlib2FyZC50ZXJtaW5hbC5jbGVhclNlbGVjdGlvbkFmdGVyQ29weSkge1xuICAgICAgICBzZXRUaW1lb3V0KHNlbGVjdGlvbi5jb2xsYXBzZVRvRW5kLmJpbmQoc2VsZWN0aW9uKSwgNTApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuUEFTUztcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMua2V5Ym9hcmQuY3RybENDb3B5ICYmIGUuc2hpZnRLZXkpIHtcbiAgICAgIC8vIEN0cmwtU2hpZnQtQyBzaG91bGQgY29weSBpZiB0aGVyZSBpcyBhIHNlbGVjdGlvbiwgc2VuZCBeQyBvdGhlcndpc2UuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBjb3B5IG1hbnVhbGx5LiAgVGhpcyBvbmx5IHdvcmtzIGluIHNpdHVhdGlvbnMgd2hlcmVcbiAgICAgIC8vIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5JykgaXMgYWxsb3dlZC5cbiAgICAgIGlmICh0aGlzLmtleWJvYXJkLnRlcm1pbmFsLmNsZWFyU2VsZWN0aW9uQWZ0ZXJDb3B5KSB7XG4gICAgICAgIHNldFRpbWVvdXQoc2VsZWN0aW9uLmNvbGxhcHNlVG9FbmQuYmluZChzZWxlY3Rpb24pLCA1MCk7XG4gICAgICB9XG4gICAgICB0aGlzLmtleWJvYXJkLnRlcm1pbmFsLmNvcHlTZWxlY3Rpb25Ub0NsaXBib2FyZCgpO1xuICAgICAgcmV0dXJuIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuQ0FOQ0VMO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnXFx4MDMnO1xufTtcblxuLyoqXG4gKiBFaXRoZXIgc2VuZCBhIF5OIG9yIG9wZW4gYSBuZXcgd2luZG93IHRvIHRoZSBzYW1lIGxvY2F0aW9uLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlNYXAucHJvdG90eXBlLm9uQ3RybE5fID0gZnVuY3Rpb24oZSwga2V5RGVmKSB7XG4gIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgd2luZG93Lm9wZW4oXG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmLFxuICAgICAgJycsXG4gICAgICAnY2hyb21lPW5vLGNsb3NlPXllcyxyZXNpemU9eWVzLHNjcm9sbGJhcnM9eWVzLCcgK1xuICAgICAgICAnbWluaW1pemFibGU9eWVzLHdpZHRoPScgK1xuICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCArXG4gICAgICAgICcsaGVpZ2h0PScgK1xuICAgICAgICB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgKTtcbiAgICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG4gIH1cblxuICByZXR1cm4gJ1xceDBlJztcbn07XG5cbi8qKlxuICogRWl0aGVyIHNlbmQgYSBeViBvciBpc3N1ZSBhIHBhc3RlIGNvbW1hbmQuXG4gKlxuICogVGhlIGRlZmF1bHQgYmVoYXZpb3IgaXMgdG8gcGFzdGUgaWYgdGhlIHVzZXIgcHJlc3NlcyBDdHJsLVNoaWZ0LVYsIGFuZCBzZW5kXG4gKiBhIF5WIGlmIHRoZSB1c2VyIHByZXNzZXMgQ3RybC1WLiBUaGlzIGNhbiBiZSBmbGlwcGVkIHdpdGggdGhlXG4gKiAnY3RybC12LXBhc3RlJyBwcmVmZXJlbmNlLlxuICpcbiAqL1xuaHRlcm0uS2V5Ym9hcmQuS2V5TWFwLnByb3RvdHlwZS5vbkN0cmxWXyA9IGZ1bmN0aW9uKGUsIGtleURlZikge1xuICBpZiAoXG4gICAgKCFlLnNoaWZ0S2V5ICYmIHRoaXMua2V5Ym9hcmQuY3RybFZQYXN0ZSkgfHxcbiAgICAoZS5zaGlmdEtleSAmJiAhdGhpcy5rZXlib2FyZC5jdHJsVlBhc3RlKVxuICApIHtcbiAgICAvLyBXZSB0cnkgdG8gZG8gdGhlIHBhc3Rpbmcgb3Vyc2VsdmVzIGFzIG5vdCBhbGwgYnJvd3NlcnMvT1NzIGJpbmQgQ3RybC1WIHRvXG4gICAgLy8gcGFzdGluZy4gIE5vdGFibHksIG9uIG1hY09TLCBDdHJsLVYvQ3RybC1TaGlmdC1WIGRvIG5vdGhpbmcuXG4gICAgLy8gSG93ZXZlciwgdGhpcyBtaWdodCBydW4gaW50byB3ZWIgcmVzdHJpY3Rpb25zLCBzbyBpZiBpdCBmYWlscywgd2Ugc3RpbGxcbiAgICAvLyBmYWxsYmFjayB0byB0aGUgbGV0dGluZyB0aGUgbmF0aXZlIGJlaGF2aW9yIChob3BlZnVsbHkpIHNhdmUgdXMuXG4gICAgaWYgKHRoaXMua2V5Ym9hcmQudGVybWluYWwucGFzdGUoKSkgcmV0dXJuIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuQ0FOQ0VMO1xuICAgIGVsc2UgcmV0dXJuIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuUEFTUztcbiAgfVxuXG4gIHJldHVybiAnXFx4MTYnO1xufTtcblxuLyoqXG4gKiBFaXRoZXIgdGhlIGRlZmF1bHQgYWN0aW9uIG9yIG9wZW4gYSBuZXcgd2luZG93IHRvIHRoZSBzYW1lIGxvY2F0aW9uLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlNYXAucHJvdG90eXBlLm9uTWV0YU5fID0gZnVuY3Rpb24oZSwga2V5RGVmKSB7XG4gIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgd2luZG93Lm9wZW4oXG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmLFxuICAgICAgJycsXG4gICAgICAnY2hyb21lPW5vLGNsb3NlPXllcyxyZXNpemU9eWVzLHNjcm9sbGJhcnM9eWVzLCcgK1xuICAgICAgICAnbWluaW1pemFibGU9eWVzLHdpZHRoPScgK1xuICAgICAgICB3aW5kb3cub3V0ZXJXaWR0aCArXG4gICAgICAgICcsaGVpZ2h0PScgK1xuICAgICAgICB3aW5kb3cub3V0ZXJIZWlnaHQsXG4gICAgKTtcbiAgICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG4gIH1cblxuICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5ERUZBVUxUO1xufTtcblxuLyoqXG4gKiBFaXRoZXIgc2VuZCBhIE1ldGEtQyBvciBhbGxvdyB0aGUgYnJvd3NlciB0byBpbnRlcnByZXQgdGhlIGtleXN0cm9rZSBhcyBhXG4gKiBjb3B5IGNvbW1hbmQuXG4gKlxuICogSWYgdGhlcmUgaXMgbm8gc2VsZWN0aW9uLCBvciBpZiB0aGUgdXNlciBwcmVzc2VzIE1ldGEtU2hpZnQtQywgdGhlbiB3ZSdsbFxuICogdHJhbnNtaXQgYW4gJ1xceDFiJyAoaWYgbWV0YVNlbmRzRXNjYXBlIGlzIG9uKSBmb2xsb3dlZCBieSAnYycgb3IgJ0MnLlxuICpcbiAqIElmIHRoZXJlIGlzIGEgc2VsZWN0aW9uLCB3ZSBkZWZlciB0byB0aGUgYnJvd3Nlci4gIEluIHRoaXMgY2FzZSB3ZSBjbGVhciBvdXRcbiAqIHRoZSBzZWxlY3Rpb24gc28gdGhlIHVzZXIga25vd3Mgd2UgaGVhcmQgdGhlbSwgYW5kIGFsc28gdG8gZ2l2ZSB0aGVtIGFcbiAqIGNoYW5jZSB0byBzZW5kIGEgTWV0YS1DIGJ5IGp1c3QgaGl0dGluZyB0aGUga2V5IGFnYWluLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlNYXAucHJvdG90eXBlLm9uTWV0YUNfID0gZnVuY3Rpb24oZSwga2V5RGVmKSB7XG4gIHZhciBkb2N1bWVudCA9IHRoaXMua2V5Ym9hcmQudGVybWluYWwuZ2V0RG9jdW1lbnQoKTtcbiAgaWYgKGUuc2hpZnRLZXkgfHwgZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCkuaXNDb2xsYXBzZWQpIHtcbiAgICAvLyBJZiB0aGUgc2hpZnQga2V5IGlzIGJlaW5nIGhlbGQsIG9yIHRoZXJlIGlzIG5vIGRvY3VtZW50IHNlbGVjdGlvbiwgc2VuZFxuICAgIC8vIGEgTWV0YS1DLiAgVGhlIGtleWJvYXJkIGNvZGUgd2lsbCBhZGQgdGhlIEVTQyBpZiBtZXRhU2VuZHNFc2NhcGUgaXMgdHJ1ZSxcbiAgICAvLyB3ZSBqdXN0IGhhdmUgdG8gZGVjaWRlIGJldHdlZW4gJ2MnIGFuZCAnQycuXG4gICAgcmV0dXJuIGtleURlZi5rZXlDYXAuc3Vic3RyKGUuc2hpZnRLZXkgPyAxIDogMCwgMSk7XG4gIH1cblxuICAvLyBPdGhlcndpc2UgbGV0IHRoZSBicm93c2VyIGhhbmRsZSBpdCBhcyBhIGNvcHkgY29tbWFuZC5cbiAgaWYgKHRoaXMua2V5Ym9hcmQudGVybWluYWwuY2xlYXJTZWxlY3Rpb25BZnRlckNvcHkpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCkuY29sbGFwc2VUb0VuZCgpO1xuICAgIH0sIDUwKTtcbiAgfVxuICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5QQVNTO1xufTtcblxuLyoqXG4gKiBFaXRoZXIgUEFTUyBvciBERUZBVUxUIE1ldGEtViwgZGVwZW5kaW5nIG9uIHByZWZlcmVuY2UuXG4gKlxuICogQWx3YXlzIFBBU1MgTWV0YS1TaGlmdC1WIHRvIGFsbG93IGJyb3dzZXIgdG8gaW50ZXJwcmV0IHRoZSBrZXlzdHJva2UgYXNcbiAqIGEgcGFzdGUgY29tbWFuZC5cbiAqL1xuaHRlcm0uS2V5Ym9hcmQuS2V5TWFwLnByb3RvdHlwZS5vbk1ldGFWXyA9IGZ1bmN0aW9uKGUsIGtleURlZikge1xuICBpZiAoZS5zaGlmdEtleSkgcmV0dXJuIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuUEFTUztcblxuICByZXR1cm4gdGhpcy5rZXlib2FyZC5wYXNzTWV0YVZcbiAgICA/IGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuUEFTU1xuICAgIDogaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5ERUZBVUxUO1xufTtcblxuLyoqXG4gKiBIYW5kbGUgZm9udCB6b29taW5nLlxuICpcbiAqIFRoZSBicm93c2VyJ3MgYnVpbHQtaW4gem9vbSBoYXMgYSBiaXQgb2YgYW4gaXNzdWUgYXQgY2VydGFpbiB6b29tIGxldmVscy5cbiAqIEF0IHNvbWUgbWFnbmlmaWNhdGlvbnMsIHRoZSBtZWFzdXJlZCBoZWlnaHQgb2YgYSByb3cgb2YgdGV4dCBkaWZmZXJzIGZyb21cbiAqIHRoZSBoZWlnaHQgdGhhdCB3YXMgZXhwbGljaXRseSBzZXQuXG4gKlxuICogV2Ugb3ZlcnJpZGUgdGhlIGJyb3dzZXIgem9vbSBrZXlzIHRvIGNoYW5nZSB0aGUgU2Nyb2xsUG9ydCdzIGZvbnQgc2l6ZSB0b1xuICogYXZvaWQgdGhlIGlzc3VlLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlNYXAucHJvdG90eXBlLm9uUGx1c01pbnVzWmVyb18gPSBmdW5jdGlvbihlLCBrZXlEZWYpIHtcbiAgaWYgKCEodGhpcy5rZXlib2FyZC5jdHJsUGx1c01pbnVzWmVyb1pvb20gXiBlLnNoaWZ0S2V5KSkge1xuICAgIC8vIElmIGN0cmwtUE1aIGNvbnRyb2xzIHpvb20gYW5kIHRoZSBzaGlmdCBrZXkgaXMgcHJlc3NlZCwgb3JcbiAgICAvLyBjdHJsLXNoaWZ0LVBNWiBjb250cm9scyB6b29tIGFuZCB0aGlzIHNoaWZ0IGtleSBpcyBub3QgcHJlc3NlZCxcbiAgICAvLyB0aGVuIHdlIHdhbnQgdG8gc2VuZCB0aGUgY29udHJvbCBjb2RlIGluc3RlYWQgb2YgYWZmZWN0aW5nIHpvb20uXG4gICAgaWYgKGtleURlZi5rZXlDYXAgPT0gJy1fJykgcmV0dXJuICdcXHgxZic7IC8vIF5fXG5cbiAgICAvLyBPbmx5IF5fIGlzIHZhbGlkLCB0aGUgb3RoZXIgc2VxdWVuY2VzIGhhdmUgbm8gbWVhbmluZy5cbiAgICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG4gIH1cblxuICBpZiAodGhpcy5rZXlib2FyZC50ZXJtaW5hbC5nZXRab29tRmFjdG9yKCkgIT0gMSkge1xuICAgIC8vIElmIHdlJ3JlIG5vdCBhdCAxOjEgem9vbSBmYWN0b3IsIGxldCB0aGUgQ3RybCArLy0vMCBrZXlzIGNvbnRyb2wgdGhlXG4gICAgLy8gYnJvd3NlciB6b29tLCBzbyBpdCdzIGVhc2llciB0byBmb3IgdGhlIHVzZXIgdG8gZ2V0IGJhY2sgdG8gMTAwJS5cbiAgICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5QQVNTO1xuICB9XG5cbiAgdmFyIGNhcCA9IGtleURlZi5rZXlDYXAuc3Vic3RyKDAsIDEpO1xuICBpZiAoY2FwID09ICcwJykge1xuICAgIHRoaXMua2V5Ym9hcmQudGVybWluYWwuc2V0Rm9udFNpemUoMCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNpemUgPSB0aGlzLmtleWJvYXJkLnRlcm1pbmFsLmdldEZvbnRTaXplKCk7XG5cbiAgICBpZiAoY2FwID09ICctJyB8fCBrZXlEZWYua2V5Q2FwID09ICdbS1AtXScpIHtcbiAgICAgIHNpemUgLT0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2l6ZSArPSAxO1xuICAgIH1cblxuICAgIHRoaXMua2V5Ym9hcmQudGVybWluYWwuc2V0Rm9udFNpemUoc2l6ZSk7XG4gIH1cblxuICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG59O1xuLy8gU09VUkNFIEZJTEU6IGh0ZXJtL2pzL2h0ZXJtX2tleWJvYXJkX2tleXBhdHRlcm4uanNcbi8vIENvcHlyaWdodCAoYykgMjAxNSBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbi8qKlxuICogQSByZWNvcmQgb2YgbW9kaWZpZXIgYml0cyBhbmQga2V5Y29kZSB1c2VkIHRvIGRlZmluZSBhIGtleSBiaW5kaW5nLlxuICpcbiAqIFRoZSBtb2RpZmllciBuYW1lcyBhcmUgZW51bWVyYXRlZCBpbiB0aGUgc3RhdGljIEtleVBhdHRlcm4ubW9kaWZpZXJzXG4gKiBwcm9wZXJ0eSBiZWxvdy4gIEVhY2ggbW9kaWZpZXIgY2FuIGJlIHRydWUsIGZhbHNlLCBvciBcIipcIi4gIFRydWUgbWVhbnNcbiAqIHRoZSBtb2RpZmllciBrZXkgbXVzdCBiZSBwcmVzZW50LCBmYWxzZSBtZWFucyBpdCBtdXN0IG5vdCwgYW5kIFwiKlwiIG1lYW5zXG4gKiBpdCBkb2Vzbid0IG1hdHRlci5cbiAqL1xuaHRlcm0uS2V5Ym9hcmQuS2V5UGF0dGVybiA9IGZ1bmN0aW9uKHNwZWMpIHtcbiAgdGhpcy53aWxkY2FyZENvdW50ID0gMDtcbiAgdGhpcy5rZXlDb2RlID0gc3BlYy5rZXlDb2RlO1xuXG4gIGh0ZXJtLktleWJvYXJkLktleVBhdHRlcm4ubW9kaWZpZXJzLmZvckVhY2goXG4gICAgZnVuY3Rpb24obW9kKSB7XG4gICAgICB0aGlzW21vZF0gPSBzcGVjW21vZF0gfHwgZmFsc2U7XG4gICAgICBpZiAodGhpc1ttb2RdID09ICcqJykgdGhpcy53aWxkY2FyZENvdW50Kys7XG4gICAgfS5iaW5kKHRoaXMpLFxuICApO1xufTtcblxuLyoqXG4gKiBWYWxpZCBtb2RpZmllciBuYW1lcy5cbiAqL1xuaHRlcm0uS2V5Ym9hcmQuS2V5UGF0dGVybi5tb2RpZmllcnMgPSBbJ3NoaWZ0JywgJ2N0cmwnLCAnYWx0JywgJ21ldGEnXTtcblxuLyoqXG4gKiBBIGNvbXBhcmUgY2FsbGJhY2sgZm9yIEFycmF5LnByb3RvdHlwZS5zb3J0KCkuXG4gKlxuICogVGhlIGJpbmRpbmdzIGNvZGUgd2FudHMgdG8gYmUgc3VyZSB0byBzZWFyY2ggdGhyb3VnaCB0aGUgc3RyaWN0ZXN0IGtleVxuICogcGF0dGVybnMgZmlyc3QsIHNvIHRoYXQgbG9vc2VseSBkZWZpbmVkIHBhdHRlcm5zIGhhdmUgYSBsb3dlciBwcmlvcml0eSB0aGFuXG4gKiBleGFjdCBwYXR0ZXJucy5cbiAqXG4gKiBAcGFyYW0ge2h0ZXJtLktleWJvYXJkLktleVBhdHRlcm59IGFcbiAqIEBwYXJhbSB7aHRlcm0uS2V5Ym9hcmQuS2V5UGF0dGVybn0gYlxuICovXG5odGVybS5LZXlib2FyZC5LZXlQYXR0ZXJuLnNvcnRDb21wYXJlID0gZnVuY3Rpb24oYSwgYikge1xuICBpZiAoYS53aWxkY2FyZENvdW50IDwgYi53aWxkY2FyZENvdW50KSByZXR1cm4gLTE7XG5cbiAgaWYgKGEud2lsZGNhcmRDb3VudCA+IGIud2lsZGNhcmRDb3VudCkgcmV0dXJuIDE7XG5cbiAgcmV0dXJuIDA7XG59O1xuXG4vKipcbiAqIFByaXZhdGUgbWV0aG9kIHVzZWQgdG8gbWF0Y2ggdGhpcyBrZXkgcGF0dGVybiBhZ2FpbnN0IG90aGVyIGtleSBwYXR0ZXJuc1xuICogb3Iga2V5IGRvd24gZXZlbnRzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBUaGUgb2JqZWN0IHRvIG1hdGNoLlxuICogQHBhcmFtIHtib29sZWFufSBUcnVlIGlmIHdlIHNob3VsZCBpZ25vcmUgd2lsZGNhcmRzLiAgVXNlZnVsIHdoZW4geW91IHdhbnRcbiAqICAgdG8gcGVyZm9ybSBhbmQgZXhhY3QgbWF0Y2ggYWdhaW5zdCBhbm90aGVyIGtleSBwYXR0ZXJuLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlQYXR0ZXJuLnByb3RvdHlwZS5tYXRjaF8gPSBmdW5jdGlvbihvYmosIGV4YWN0TWF0Y2gpIHtcbiAgaWYgKHRoaXMua2V5Q29kZSAhPSBvYmoua2V5Q29kZSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBydiA9IHRydWU7XG5cbiAgaHRlcm0uS2V5Ym9hcmQuS2V5UGF0dGVybi5tb2RpZmllcnMuZm9yRWFjaChcbiAgICBmdW5jdGlvbihtb2QpIHtcbiAgICAgIHZhciBtb2RWYWx1ZSA9IG1vZCBpbiBvYmogPyBvYmpbbW9kXSA6IGZhbHNlO1xuICAgICAgaWYgKCFydiB8fCAoIWV4YWN0TWF0Y2ggJiYgdGhpc1ttb2RdID09ICcqJykgfHwgdGhpc1ttb2RdID09IG1vZFZhbHVlKVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIHJ2ID0gZmFsc2U7XG4gICAgfS5iaW5kKHRoaXMpLFxuICApO1xuXG4gIHJldHVybiBydjtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgdGhlIGdpdmVuIGtleURvd24gb2JqZWN0IGlzIGEgbWF0Y2ggZm9yIHRoaXMga2V5IHBhdHRlcm4uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGtleURvd24gQW4gb2JqZWN0IHdpdGggYSBrZXlDb2RlIHByb3BlcnR5IGFuZCB6ZXJvIG9yXG4gKiAgIG1vcmUgYm9vbGVhbiBwcm9wZXJ0aWVzIHJlcHJlc2VudGluZyBrZXkgbW9kaWZpZXJzLiAgVGhlc2UgcHJvcGVydHkgbmFtZXNcbiAqICAgbXVzdCBtYXRjaCB0aG9zZSBkZWZpbmVkIGluIGh0ZXJtLktleWJvYXJkLktleVBhdHRlcm4ubW9kaWZpZXJzLlxuICovXG5odGVybS5LZXlib2FyZC5LZXlQYXR0ZXJuLnByb3RvdHlwZS5tYXRjaEtleURvd24gPSBmdW5jdGlvbihrZXlEb3duKSB7XG4gIHJldHVybiB0aGlzLm1hdGNoXyhrZXlEb3duLCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIHRoZSBnaXZlbiBodGVybS5LZXlib2FyZC5LZXlQYXR0ZXJuIGlzIGV4YWN0bHkgdGhlIHNhbWUgYXNcbiAqIHRoaXMgb25lLlxuICpcbiAqIEBwYXJhbSB7aHRlcm0uS2V5Ym9hcmQuS2V5UGF0dGVybn1cbiAqL1xuaHRlcm0uS2V5Ym9hcmQuS2V5UGF0dGVybi5wcm90b3R5cGUubWF0Y2hLZXlQYXR0ZXJuID0gZnVuY3Rpb24oa2V5UGF0dGVybikge1xuICByZXR1cm4gdGhpcy5tYXRjaF8oa2V5UGF0dGVybiwgdHJ1ZSk7XG59O1xuLy8gU09VUkNFIEZJTEU6IGh0ZXJtL2pzL2h0ZXJtX29wdGlvbnMuanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBUaGlzIGZpbGUgaW1wbGVtZW50cyB0aGUgaHRlcm0uT3B0aW9ucyBjbGFzcyxcbiAqIHdoaWNoIHN0b3JlcyBjdXJyZW50IG9wZXJhdGluZyBjb25kaXRpb25zIGZvciB0aGUgdGVybWluYWwuICBUaGlzIG9iamVjdCBpc1xuICogdXNlZCBpbnN0ZWFkIG9mIGEgc2VyaWVzIG9mIHBhcmFtZXRlcnMgdG8gYWxsb3cgc2F2aW5nL3Jlc3RvcmluZyBvZiBjdXJzb3JcbiAqIGNvbmRpdGlvbnMgZWFzaWx5LCBhbmQgdG8gcHJvdmlkZSBhbiBlYXN5IHBsYWNlIGZvciBjb21tb24gY29uZmlndXJhdGlvblxuICogb3B0aW9ucy5cbiAqXG4gKiBPcmlnaW5hbCBjb2RlIGJ5IENvcnkgTWFjY2Fycm9uZS5cbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZvciB0aGUgaHRlcm0uT3B0aW9ucyBjbGFzcywgb3B0aW9uYWxseSBhY3RpbmcgYXMgYSBjb3B5XG4gKiBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBUaGUgZGVmYXVsdHMgYXJlIGFzIGRlZmluZWQgaW4gaHR0cDovL3d3dy52dDEwMC5uZXQvZG9jcy92dDUxMC1ybS9ERUNTVFJcbiAqIGV4Y2VwdCB0aGF0IHdlIGVuYWJsZSBhdXRvd3JhcCAod3JhcGFyb3VuZCkgYnkgZGVmYXVsdCBzaW5jZSB0aGF0IHNlZW1zIHRvXG4gKiBiZSB3aGF0IHh0ZXJtIGRvZXMuXG4gKlxuICogQHBhcmFtIHtodGVybS5PcHRpb25zPX0gb3B0X2NvcHkgT3B0aW9uYWwgaW5zdGFuY2UgdG8gY29weS5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5odGVybS5PcHRpb25zID0gZnVuY3Rpb24ob3B0X2NvcHkpIHtcbiAgLy8gQWxsIGF0dHJpYnV0ZXMgaW4gdGhpcyBjbGFzcyBhcmUgcHVibGljIHRvIGFsbG93IGVhc3kgYWNjZXNzIGJ5IHRoZVxuICAvLyB0ZXJtaW5hbC5cblxuICB0aGlzLndyYXBhcm91bmQgPSBvcHRfY29weSA/IG9wdF9jb3B5LndyYXBhcm91bmQgOiB0cnVlO1xuICB0aGlzLnJldmVyc2VXcmFwYXJvdW5kID0gb3B0X2NvcHkgPyBvcHRfY29weS5yZXZlcnNlV3JhcGFyb3VuZCA6IGZhbHNlO1xuICB0aGlzLm9yaWdpbk1vZGUgPSBvcHRfY29weSA/IG9wdF9jb3B5Lm9yaWdpbk1vZGUgOiBmYWxzZTtcbiAgdGhpcy5hdXRvQ2FycmlhZ2VSZXR1cm4gPSBvcHRfY29weSA/IG9wdF9jb3B5LmF1dG9DYXJyaWFnZVJldHVybiA6IGZhbHNlO1xuICB0aGlzLmN1cnNvclZpc2libGUgPSBvcHRfY29weSA/IG9wdF9jb3B5LmN1cnNvclZpc2libGUgOiBmYWxzZTtcbiAgdGhpcy5jdXJzb3JCbGluayA9IG9wdF9jb3B5ID8gb3B0X2NvcHkuY3Vyc29yQmxpbmsgOiBmYWxzZTtcbiAgdGhpcy5pbnNlcnRNb2RlID0gb3B0X2NvcHkgPyBvcHRfY29weS5pbnNlcnRNb2RlIDogZmFsc2U7XG4gIHRoaXMucmV2ZXJzZVZpZGVvID0gb3B0X2NvcHkgPyBvcHRfY29weS5yZXZlcnNlVmlkZW8gOiBmYWxzZTtcbiAgdGhpcy5icmFja2V0ZWRQYXN0ZSA9IG9wdF9jb3B5ID8gb3B0X2NvcHkuYnJhY2tldGVkUGFzdGUgOiBmYWxzZTtcbn07XG4vLyBTT1VSQ0UgRklMRTogaHRlcm0vanMvaHRlcm1fcGFyc2VyLmpzXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTUgVGhlIENocm9taXVtIE9TIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4vLyBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuXG5saWIucnRkZXAoJ2h0ZXJtLktleWJvYXJkLktleUFjdGlvbnMnKTtcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIFBhcnNlcyB0aGUga2V5IGRlZmluaXRpb24gc3ludGF4IHVzZWQgZm9yIHVzZXIga2V5Ym9hcmQgY3VzdG9taXphdGlvbnMuXG4gKi9cbmh0ZXJtLlBhcnNlciA9IGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogQHR5cGUge3N0cmluZ30gVGhlIHNvdXJjZSBzdHJpbmcuXG4gICAqL1xuICB0aGlzLnNvdXJjZSA9ICcnO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfSBUaGUgY3VycmVudCBwb3NpdGlvbi5cbiAgICovXG4gIHRoaXMucG9zID0gMDtcblxuICAvKipcbiAgICogQHR5cGUge3N0cmluZz99IFRoZSBjaGFyYWN0ZXIgYXQgdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gICAqL1xuICB0aGlzLmNoID0gbnVsbDtcbn07XG5cbmh0ZXJtLlBhcnNlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ1BhcnNlIGVycm9yIGF0ICcgKyB0aGlzLnBvcyArICc6ICcgKyBtZXNzYWdlKTtcbn07XG5cbmh0ZXJtLlBhcnNlci5wcm90b3R5cGUuaXNDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5wb3MgPT0gdGhpcy5zb3VyY2UubGVuZ3RoO1xufTtcblxuaHRlcm0uUGFyc2VyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKHNvdXJjZSwgb3B0X3Bvcykge1xuICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgdGhpcy5wb3MgPSBvcHRfcG9zIHx8IDA7XG4gIHRoaXMuY2ggPSBzb3VyY2Uuc3Vic3RyKDAsIDEpO1xufTtcblxuLyoqXG4gKiBQYXJzZSBhIGtleSBzZXF1ZW5jZS5cbiAqXG4gKiBBIGtleSBzZXF1ZW5jZSBpcyB6ZXJvIG9yIG1vcmUgb2YgdGhlIGtleSBtb2RpZmllcnMgZGVmaW5lZCBpblxuICogaHRlcm0uUGFyc2VyLmlkZW50aWZpZXJzLm1vZGlmaWVyS2V5cyBmb2xsb3dlZCBieSBhIGtleSBjb2RlLiAgS2V5XG4gKiBjb2RlcyBjYW4gYmUgYW4gaW50ZWdlciBvciBhbiBpZGVudGlmaWVyIGZyb21cbiAqIGh0ZXJtLlBhcnNlci5pZGVudGlmaWVycy5rZXlDb2Rlcy4gIE1vZGlmaWVycyBhbmQga2V5Q29kZXMgc2hvdWxkIGJlIGpvaW5lZFxuICogYnkgdGhlIGRhc2ggY2hhcmFjdGVyLlxuICpcbiAqIEFuIGFzdGVyaXNrIFwiKlwiIGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIHRoYXQgdGhlIHVuc3BlY2lmaWVkIG1vZGlmaWVyc1xuICogYXJlIG9wdGlvbmFsLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICogICBBOiBNYXRjaGVzIG9ubHkgYW4gdW5tb2RpZmllZCBcIkFcIiBjaGFyYWN0ZXIuXG4gKiAgIDY1OiBTYW1lIGFzIGFib3ZlLlxuICogICAweDQxOiBTYW1lIGFzIGFib3ZlLlxuICogICBDdHJsLUE6IE1hdGNoZXMgb25seSBDdHJsLUEuXG4gKiAgIEN0cmwtNjU6IFNhbWUgYXMgYWJvdmUuXG4gKiAgIEN0cmwtMHg0MTogU2FtZSBhcyBhYm92ZS5cbiAqICAgQ3RybC1TaGlmdC1BOiBNYXRjaGVzIG9ubHkgQ3RybC1TaGlmdC1BLlxuICogICBDdHJsLSotQTogTWF0Y2hlcyBDdHJsLUEsIGFzIHdlbGwgYXMgYW55IG90aGVyIGtleSBzZXF1ZW5jZSB0aGF0IGluY2x1ZGVzXG4gKiAgICAgYXQgbGVhc3QgdGhlIEN0cmwgYW5kIEEga2V5cy5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IEFuIG9iamVjdCB3aXRoIHNoaWZ0LCBjdHJsLCBhbHQsIG1ldGEsIGtleUNvZGVcbiAqICAgcHJvcGVydGllcy5cbiAqL1xuaHRlcm0uUGFyc2VyLnByb3RvdHlwZS5wYXJzZUtleVNlcXVlbmNlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBydiA9IHtcbiAgICBrZXlDb2RlOiBudWxsLFxuICB9O1xuXG4gIGZvciAodmFyIGsgaW4gaHRlcm0uUGFyc2VyLmlkZW50aWZpZXJzLm1vZGlmaWVyS2V5cykge1xuICAgIHJ2W2h0ZXJtLlBhcnNlci5pZGVudGlmaWVycy5tb2RpZmllcktleXNba11dID0gZmFsc2U7XG4gIH1cblxuICB3aGlsZSAodGhpcy5wb3MgPCB0aGlzLnNvdXJjZS5sZW5ndGgpIHtcbiAgICB0aGlzLnNraXBTcGFjZSgpO1xuXG4gICAgdmFyIHRva2VuID0gdGhpcy5wYXJzZVRva2VuKCk7XG4gICAgaWYgKHRva2VuLnR5cGUgPT0gJ2ludGVnZXInKSB7XG4gICAgICBydi5rZXlDb2RlID0gdG9rZW4udmFsdWU7XG4gICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09ICdpZGVudGlmaWVyJykge1xuICAgICAgdmFyIHVjVmFsdWUgPSB0b2tlbi52YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgaWYgKFxuICAgICAgICB1Y1ZhbHVlIGluIGh0ZXJtLlBhcnNlci5pZGVudGlmaWVycy5tb2RpZmllcktleXMgJiZcbiAgICAgICAgaHRlcm0uUGFyc2VyLmlkZW50aWZpZXJzLm1vZGlmaWVyS2V5cy5oYXNPd25Qcm9wZXJ0eSh1Y1ZhbHVlKVxuICAgICAgKSB7XG4gICAgICAgIHZhciBtb2QgPSBodGVybS5QYXJzZXIuaWRlbnRpZmllcnMubW9kaWZpZXJLZXlzW3VjVmFsdWVdO1xuICAgICAgICBpZiAocnZbbW9kXSAmJiBydlttb2RdICE9ICcqJylcbiAgICAgICAgICB0aHJvdyB0aGlzLmVycm9yKCdEdXBsaWNhdGUgbW9kaWZpZXI6ICcgKyB0b2tlbi52YWx1ZSk7XG4gICAgICAgIHJ2W21vZF0gPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdWNWYWx1ZSBpbiBodGVybS5QYXJzZXIuaWRlbnRpZmllcnMua2V5Q29kZXMgJiZcbiAgICAgICAgaHRlcm0uUGFyc2VyLmlkZW50aWZpZXJzLmtleUNvZGVzLmhhc093blByb3BlcnR5KHVjVmFsdWUpXG4gICAgICApIHtcbiAgICAgICAgcnYua2V5Q29kZSA9IGh0ZXJtLlBhcnNlci5pZGVudGlmaWVycy5rZXlDb2Rlc1t1Y1ZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IHRoaXMuZXJyb3IoJ1Vua25vd24ga2V5OiAnICsgdG9rZW4udmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PSAnc3ltYm9sJykge1xuICAgICAgaWYgKHRva2VuLnZhbHVlID09ICcqJykge1xuICAgICAgICBmb3IgKHZhciBpZCBpbiBodGVybS5QYXJzZXIuaWRlbnRpZmllcnMubW9kaWZpZXJLZXlzKSB7XG4gICAgICAgICAgdmFyIHAgPSBodGVybS5QYXJzZXIuaWRlbnRpZmllcnMubW9kaWZpZXJLZXlzW2lkXTtcbiAgICAgICAgICBpZiAoIXJ2W3BdKSBydltwXSA9ICcqJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgdGhpcy5lcnJvcignVW5leHBlY3RlZCBzeW1ib2w6ICcgKyB0b2tlbi52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IHRoaXMuZXJyb3IoJ0V4cGVjdGVkIGludGVnZXIgb3IgaWRlbnRpZmllcicpO1xuICAgIH1cblxuICAgIHRoaXMuc2tpcFNwYWNlKCk7XG5cbiAgICBpZiAodGhpcy5jaCAhPSAnLScpIGJyZWFrO1xuXG4gICAgaWYgKHJ2LmtleUNvZGUgIT0gbnVsbClcbiAgICAgIHRocm93IHRoaXMuZXJyb3IoJ0V4dHJhIGRlZmluaXRpb24gYWZ0ZXIgdGFyZ2V0IGtleScpO1xuXG4gICAgdGhpcy5hZHZhbmNlKDEpO1xuICB9XG5cbiAgaWYgKHJ2LmtleUNvZGUgPT0gbnVsbCkgdGhyb3cgdGhpcy5lcnJvcignTWlzc2luZyB0YXJnZXQga2V5Jyk7XG5cbiAgcmV0dXJuIHJ2O1xufTtcblxuaHRlcm0uUGFyc2VyLnByb3RvdHlwZS5wYXJzZUtleUFjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNraXBTcGFjZSgpO1xuXG4gIHZhciB0b2tlbiA9IHRoaXMucGFyc2VUb2tlbigpO1xuXG4gIGlmICh0b2tlbi50eXBlID09ICdzdHJpbmcnKSByZXR1cm4gdG9rZW4udmFsdWU7XG5cbiAgaWYgKHRva2VuLnR5cGUgPT0gJ2lkZW50aWZpZXInKSB7XG4gICAgaWYgKFxuICAgICAgdG9rZW4udmFsdWUgaW4gaHRlcm0uUGFyc2VyLmlkZW50aWZpZXJzLmFjdGlvbnMgJiZcbiAgICAgIGh0ZXJtLlBhcnNlci5pZGVudGlmaWVycy5hY3Rpb25zLmhhc093blByb3BlcnR5KHRva2VuLnZhbHVlKVxuICAgIClcbiAgICAgIHJldHVybiBodGVybS5QYXJzZXIuaWRlbnRpZmllcnMuYWN0aW9uc1t0b2tlbi52YWx1ZV07XG5cbiAgICB0aHJvdyB0aGlzLmVycm9yKCdVbmtub3duIGtleSBhY3Rpb246ICcgKyB0b2tlbi52YWx1ZSk7XG4gIH1cblxuICB0aHJvdyB0aGlzLmVycm9yKCdFeHBlY3RlZCBzdHJpbmcgb3IgaWRlbnRpZmllcicpO1xufTtcblxuaHRlcm0uUGFyc2VyLnByb3RvdHlwZS5wZWVrU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNoID09IFwiJ1wiIHx8IHRoaXMuY2ggPT0gJ1wiJztcbn07XG5cbmh0ZXJtLlBhcnNlci5wcm90b3R5cGUucGVla0lkZW50aWZpZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2gubWF0Y2goL1thLXpfXS9pKTtcbn07XG5cbmh0ZXJtLlBhcnNlci5wcm90b3R5cGUucGVla0ludGVnZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY2gubWF0Y2goL1swLTldLyk7XG59O1xuXG5odGVybS5QYXJzZXIucHJvdG90eXBlLnBhcnNlVG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuY2ggPT0gJyonKSB7XG4gICAgdmFyIHJ2ID0geyB0eXBlOiAnc3ltYm9sJywgdmFsdWU6IHRoaXMuY2ggfTtcbiAgICB0aGlzLmFkdmFuY2UoMSk7XG4gICAgcmV0dXJuIHJ2O1xuICB9XG5cbiAgaWYgKHRoaXMucGVla0lkZW50aWZpZXIoKSlcbiAgICByZXR1cm4geyB0eXBlOiAnaWRlbnRpZmllcicsIHZhbHVlOiB0aGlzLnBhcnNlSWRlbnRpZmllcigpIH07XG5cbiAgaWYgKHRoaXMucGVla1N0cmluZygpKSByZXR1cm4geyB0eXBlOiAnc3RyaW5nJywgdmFsdWU6IHRoaXMucGFyc2VTdHJpbmcoKSB9O1xuXG4gIGlmICh0aGlzLnBlZWtJbnRlZ2VyKCkpXG4gICAgcmV0dXJuIHsgdHlwZTogJ2ludGVnZXInLCB2YWx1ZTogdGhpcy5wYXJzZUludGVnZXIoKSB9O1xuXG4gIHRocm93IHRoaXMuZXJyb3IoJ1VuZXhwZWN0ZWQgdG9rZW4nKTtcbn07XG5cbmh0ZXJtLlBhcnNlci5wcm90b3R5cGUucGFyc2VJZGVudGlmaWVyID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5wZWVrSWRlbnRpZmllcigpKSB0aHJvdyB0aGlzLmVycm9yKCdFeHBlY3RlZCBpZGVudGlmaWVyJyk7XG5cbiAgcmV0dXJuIHRoaXMucGFyc2VQYXR0ZXJuKC9bYS16MC05X10rL2dpKTtcbn07XG5cbmh0ZXJtLlBhcnNlci5wcm90b3R5cGUucGFyc2VJbnRlZ2VyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBiYXNlID0gMTA7XG5cbiAgaWYgKFxuICAgIHRoaXMuY2ggPT0gJzAnICYmXG4gICAgdGhpcy5wb3MgPCB0aGlzLnNvdXJjZS5sZW5ndGggLSAxICYmXG4gICAgdGhpcy5zb3VyY2Uuc3Vic3RyKHRoaXMucG9zICsgMSwgMSkgPT0gJ3gnXG4gICkge1xuICAgIHJldHVybiBwYXJzZUludCh0aGlzLnBhcnNlUGF0dGVybigvMHhbMC05YS1mXSsvZ2kpKTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZUludCh0aGlzLnBhcnNlUGF0dGVybigvXFxkKy9nKSk7XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgc2luZ2xlIG9yIGRvdWJsZSBxdW90ZWQgc3RyaW5nLlxuICpcbiAqIFRoZSBjdXJyZW50IHBvc2l0aW9uIHNob3VsZCBwb2ludCBhdCB0aGUgaW5pdGlhbCBxdW90ZSBjaGFyYWN0ZXIuICBTaW5nbGVcbiAqIHF1b3RlZCBzdHJpbmdzIHdpbGwgYmUgdHJlYXRlZCBsaXRlcmFsbHksIGRvdWJsZSBxdW90ZWQgd2lsbCBwcm9jZXNzIGVzY2FwZXMuXG4gKlxuICogVE9ETyhyZ2luZGEpOiBWYXJpYWJsZSBpbnRlcnBvbGF0aW9uLlxuICpcbiAqIEBwYXJhbSB7UGFyc2VTdGF0ZX0gcGFyc2VTdGF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHF1b3RlIEEgc2luZ2xlIG9yIGRvdWJsZS1xdW90ZSBjaGFyYWN0ZXIuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmh0ZXJtLlBhcnNlci5wcm90b3R5cGUucGFyc2VTdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIHZhciBxdW90ZSA9IHRoaXMuY2g7XG4gIGlmIChxdW90ZSAhPSAnXCInICYmIHF1b3RlICE9IFwiJ1wiKSB0aHJvdyB0aGlzLmVycm9yKCdTdHJpbmcgZXhwZWN0ZWQnKTtcblxuICB0aGlzLmFkdmFuY2UoMSk7XG5cbiAgdmFyIHJlID0gbmV3IFJlZ0V4cCgnW1xcXFxcXFxcJyArIHF1b3RlICsgJ10nLCAnZycpO1xuXG4gIHdoaWxlICh0aGlzLnBvcyA8IHRoaXMuc291cmNlLmxlbmd0aCkge1xuICAgIHJlLmxhc3RJbmRleCA9IHRoaXMucG9zO1xuICAgIGlmICghcmUuZXhlYyh0aGlzLnNvdXJjZSkpIHRocm93IHRoaXMuZXJyb3IoJ1VudGVybWluYXRlZCBzdHJpbmcgbGl0ZXJhbCcpO1xuXG4gICAgcmVzdWx0ICs9IHRoaXMuc291cmNlLnN1YnN0cmluZyh0aGlzLnBvcywgcmUubGFzdEluZGV4IC0gMSk7XG5cbiAgICB0aGlzLmFkdmFuY2UocmUubGFzdEluZGV4IC0gdGhpcy5wb3MgLSAxKTtcblxuICAgIGlmIChxdW90ZSA9PSAnXCInICYmIHRoaXMuY2ggPT0gJ1xcXFwnKSB7XG4gICAgICB0aGlzLmFkdmFuY2UoMSk7XG4gICAgICByZXN1bHQgKz0gdGhpcy5wYXJzZUVzY2FwZSgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHF1b3RlID09IFwiJ1wiICYmIHRoaXMuY2ggPT0gJ1xcXFwnKSB7XG4gICAgICByZXN1bHQgKz0gdGhpcy5jaDtcbiAgICAgIHRoaXMuYWR2YW5jZSgxKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNoID09IHF1b3RlKSB7XG4gICAgICB0aGlzLmFkdmFuY2UoMSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIHRocm93IHRoaXMuZXJyb3IoJ1VudGVybWluYXRlZCBzdHJpbmcgbGl0ZXJhbCcpO1xufTtcblxuLyoqXG4gKiBQYXJzZSBhbiBlc2NhcGUgY29kZSBmcm9tIHRoZSBjdXJyZW50IHBvc2l0aW9uICh3aGljaCBzaG91bGQgcG9pbnQgdG9cbiAqIHRoZSBmaXJzdCBjaGFyYWN0ZXIgQUZURVIgdGhlIGxlYWRpbmcgYmFja3NsYXNoLilcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmh0ZXJtLlBhcnNlci5wcm90b3R5cGUucGFyc2VFc2NhcGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG1hcCA9IHtcbiAgICAnXCInOiAnXCInLFxuICAgIFwiJ1wiOiBcIidcIixcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBhOiAnXFx4MDcnLFxuICAgIGI6ICdcXHgwOCcsXG4gICAgZTogJ1xceDFiJyxcbiAgICBmOiAnXFx4MGMnLFxuICAgIG46ICdcXHgwYScsXG4gICAgcjogJ1xceDBkJyxcbiAgICB0OiAnXFx4MDknLFxuICAgIHY6ICdcXHgwYicsXG4gICAgeDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLnBhcnNlUGF0dGVybigvW2EtejAtOV17Mn0vZ2kpO1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQodmFsdWUsIDE2KSk7XG4gICAgfSxcbiAgICB1OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMucGFyc2VQYXR0ZXJuKC9bYS16MC05XXs0fS9naSk7XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludCh2YWx1ZSwgMTYpKTtcbiAgICB9LFxuICB9O1xuXG4gIGlmICghKHRoaXMuY2ggaW4gbWFwICYmIG1hcC5oYXNPd25Qcm9wZXJ0eSh0aGlzLmNoKSkpXG4gICAgdGhyb3cgdGhpcy5lcnJvcignVW5rbm93biBlc2NhcGU6ICcgKyB0aGlzLmNoKTtcblxuICB2YXIgdmFsdWUgPSBtYXBbdGhpcy5jaF07XG4gIHRoaXMuYWR2YW5jZSgxKTtcblxuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHZhbHVlID0gdmFsdWUuY2FsbCh0aGlzKTtcblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBwYXR0ZXJuIHN0YXJ0aW5nIGZyb20gdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtSZWdFeHB9IHBhdHRlcm4gQSBwYXR0ZXJuIHJlcHJlc2VudGluZyB0aGUgY2hhcmFjdGVycyB0byBzcGFuLiAgTVVTVFxuICogICBpbmNsdWRlIHRoZSBcImdsb2JhbFwiIFJlZ0V4cCBmbGFnLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5odGVybS5QYXJzZXIucHJvdG90eXBlLnBhcnNlUGF0dGVybiA9IGZ1bmN0aW9uKHBhdHRlcm4pIHtcbiAgaWYgKCFwYXR0ZXJuLmdsb2JhbClcbiAgICB0aHJvdyB0aGlzLmVycm9yKCdJbnRlcm5hbCBlcnJvcjogU3BhbiBwYXR0ZXJucyBtdXN0IGJlIGdsb2JhbCcpO1xuXG4gIHBhdHRlcm4ubGFzdEluZGV4ID0gdGhpcy5wb3M7XG4gIHZhciBhcnkgPSBwYXR0ZXJuLmV4ZWModGhpcy5zb3VyY2UpO1xuXG4gIGlmICghYXJ5IHx8IHBhdHRlcm4ubGFzdEluZGV4IC0gYXJ5WzBdLmxlbmd0aCAhPSB0aGlzLnBvcylcbiAgICB0aHJvdyB0aGlzLmVycm9yKCdFeHBlY3RlZCBtYXRjaCBmb3I6ICcgKyBwYXR0ZXJuKTtcblxuICB0aGlzLnBvcyA9IHBhdHRlcm4ubGFzdEluZGV4IC0gMTtcbiAgdGhpcy5hZHZhbmNlKDEpO1xuXG4gIHJldHVybiBhcnlbMF07XG59O1xuXG4vKipcbiAqIEFkdmFuY2UgdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKi9cbmh0ZXJtLlBhcnNlci5wcm90b3R5cGUuYWR2YW5jZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gIHRoaXMucG9zICs9IGNvdW50O1xuICB0aGlzLmNoID0gdGhpcy5zb3VyY2Uuc3Vic3RyKHRoaXMucG9zLCAxKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfZXhwZWN0IEEgbGlzdCBvZiB2YWxpZCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHRvXG4gKiAgIHRlcm1pbmF0ZSBvbi5cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmh0ZXJtLlBhcnNlci5wcm90b3R5cGUuc2tpcFNwYWNlID0gZnVuY3Rpb24ob3B0X2V4cGVjdCkge1xuICBpZiAoIS9cXHMvLnRlc3QodGhpcy5jaCkpIHJldHVybjtcblxuICB2YXIgcmUgPSAvXFxzKy9nbTtcbiAgcmUubGFzdEluZGV4ID0gdGhpcy5wb3M7XG5cbiAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICBpZiAocmUuZXhlYyhzb3VyY2UpKSB0aGlzLnBvcyA9IHJlLmxhc3RJbmRleDtcblxuICB0aGlzLmNoID0gdGhpcy5zb3VyY2Uuc3Vic3RyKHRoaXMucG9zLCAxKTtcblxuICBpZiAob3B0X2V4cGVjdCkge1xuICAgIGlmICh0aGlzLmNoLmluZGV4T2Yob3B0X2V4cGVjdCkgPT0gLTEpIHtcbiAgICAgIHRocm93IHRoaXMuZXJyb3IoJ0V4cGVjdGVkIG9uZSBvZiAnICsgb3B0X2V4cGVjdCArICcsIGZvdW5kOiAnICsgdGhpcy5jaCk7XG4gICAgfVxuICB9XG59O1xuLy8gU09VUkNFIEZJTEU6IGh0ZXJtL2pzL2h0ZXJtX3BhcnNlcl9pZGVudGlmaWVycy5qc1xuLy8gQ29weXJpZ2h0IChjKSAyMDE1IFRoZSBDaHJvbWl1bSBPUyBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxuLyoqXG4gKiBDb2xsZWN0aW9ucyBvZiBpZGVudGlmaWVyIGZvciBodGVybS5QYXJzZXIuXG4gKi9cbmh0ZXJtLlBhcnNlci5pZGVudGlmaWVycyA9IHt9O1xuXG4vKipcbiAqIE1vZGlmaWVyIGtleSBuYW1lcyB1c2VkIHdoZW4gZGVmaW5pbmcga2V5IHNlcXVlbmNlcy5cbiAqXG4gKiBUaGVzZSBhcmUgdXBwZXIgY2FzZSBzbyB3ZSBjYW4gbm9ybWFsaXplIHRoZSB1c2VyIGlucHV0IGFuZCBiZSBmb3JnaXZpbmcuXG4gKiBcIkNUUkwtQVwiIGFuZCBcIkN0cmwtQVwiIGFuZCBcImN0cmwtYVwiIGFyZSBhbGwgYWNjZXB0ZWQuXG4gKlxuICogTm90ZTogTmFtZXMgaGVyZSBjYW5ub3Qgb3ZlcmxhcCB3aXRoIGh0ZXJtLlBhcnNlci5pZGVudGlmaWVycy5rZXlDb2Rlcy5cbiAqL1xuaHRlcm0uUGFyc2VyLmlkZW50aWZpZXJzLm1vZGlmaWVyS2V5cyA9IHtcbiAgU0hJRlQ6ICdzaGlmdCcsXG4gIENUUkw6ICdjdHJsJyxcbiAgLy8gQ29tbW9uIGFsaWFzLlxuICBDT05UUk9MOiAnY3RybCcsXG4gIEFMVDogJ2FsdCcsXG4gIE1FVEE6ICdtZXRhJyxcbn07XG5cbi8qKlxuICogS2V5IGNvZGVzIHVzZWZ1bCB3aGVuIGRlZmluaW5nIGtleSBzZXF1ZW5jZXMuXG4gKlxuICogUHVuY3R1YXRpb24gaXMgbW9zdGx5IGxlZnQgb3V0IG9mIHRoaXMgbGlzdCBiZWNhdXNlIHRoZXkgY2FuIG1vdmUgYXJvdW5kXG4gKiBiYXNlZCBvbiBrZXlib2FyZCBsb2NhbGUgYW5kIGJyb3dzZXIuXG4gKlxuICogSW4gYSBrZXkgc2VxdWVuY2UgbGlrZSBcIkN0cmwtRVNDXCIsIHRoZSBFU0MgY29tZXMgZnJvbSB0aGlzIGxpc3Qgb2ZcbiAqIGlkZW50aWZpZXJzLiAgSXQgaXMgZXF1aXZhbGVudCB0byBcIkN0cmwtMjdcIiBhbmQgXCJDdHJsLTB4MWJcIi5cbiAqXG4gKiBUaGVzZSBhcmUgdXBwZXIgY2FzZSBzbyB3ZSBjYW4gbm9ybWFsaXplIHRoZSB1c2VyIGlucHV0IGFuZCBiZSBmb3JnaXZpbmcuXG4gKiBcIkN0cmwtRVNDXCIgYW5kIFwiQ3RybC1Fc2NcIiBhbiBcIkN0cmwtZXNjXCIgYXJlIGFsbCBhY2NlcHRlZC5cbiAqXG4gKiBXZSBhbHNvIGluY2x1ZGUgY29tbW9uIGFsaWFzZXMgZm9yIHRoZSBzYW1lIGtleS4gIFwiRXNjXCIgYW5kIFwiRXNjYXBlXCIgYXJlIHRoZVxuICogc2FtZSBrZXkuXG4gKlxuICogTm90ZTogTmFtZXMgaGVyZSBjYW5ub3Qgb3ZlcmxhcCB3aXRoIGh0ZXJtLlBhcnNlci5pZGVudGlmaWVycy5tb2RpZmllcktleXMuXG4gKi9cbmh0ZXJtLlBhcnNlci5pZGVudGlmaWVycy5rZXlDb2RlcyA9IHtcbiAgLy8gVG9wIHJvdy5cbiAgRVNDQVBFOiAyNyxcbiAgRVNDOiAyNyxcbiAgRjE6IDExMixcbiAgRjI6IDExMyxcbiAgRjM6IDExNCxcbiAgRjQ6IDExNSxcbiAgRjU6IDExNixcbiAgRjY6IDExNyxcbiAgRjc6IDExOCxcbiAgRjg6IDExOSxcbiAgRjk6IDEyMCxcbiAgRjEwOiAxMjEsXG4gIEYxMTogMTIyLFxuICBGMTI6IDEyMyxcblxuICAvLyBSb3cgdHdvLlxuICBPTkU6IDQ5LFxuICBUV086IDUwLFxuICBUSFJFRTogNTEsXG4gIEZPVVI6IDUyLFxuICBGSVZFOiA1MyxcbiAgU0lYOiA1NCxcbiAgU0VWRU46IDU1LFxuICBFSUdIVDogNTYsXG4gIE5JTkU6IDU3LFxuICBaRVJPOiA0OCxcbiAgQkFDS1NQQUNFOiA4LFxuICBCS1NQOiA4LFxuICBCUzogOCxcblxuICAvLyBSb3cgdGhyZWUuXG4gIFRBQjogOSxcbiAgUTogODEsXG4gIFc6IDg3LFxuICBFOiA2OSxcbiAgUjogODIsXG4gIFQ6IDg0LFxuICBZOiA4OSxcbiAgVTogODUsXG4gIEk6IDczLFxuICBPOiA3OSxcbiAgUDogODAsXG5cbiAgLy8gUm93IGZvdXIuXG4gIENBUFNfTE9DSzogMjAsXG4gIENBUFNMT0NLOiAyMCxcbiAgQ0FQUzogMjAsXG4gIEE6IDY1LFxuICBTOiA4MyxcbiAgRDogNjgsXG4gIEY6IDcwLFxuICBHOiA3MSxcbiAgSDogNzIsXG4gIEo6IDc0LFxuICBLOiA3NSxcbiAgTDogNzYsXG4gIC8vIFdlIG1hcCBlbnRlciBhbmQgcmV0dXJuIHRvZ2V0aGVyIGV2ZW4gdGhvdWdoIGVudGVyIHNob3VsZCByZWFsbHkgYmUgMTBcbiAgLy8gYmVjYXVzZSBtb3N0IHBlb3BsZSBkb24ndCBrbm93IG9yIGNhcmUgYWJvdXQgdGhlIGhpc3RvcnkgaGVyZS4gIFBsdXMsXG4gIC8vIG1vc3Qga2V5Ym9hcmRzL3Byb2dyYW1zIG1hcCB0aGVtIHRvZ2V0aGVyIGFscmVhZHkuICBJZiB0aGV5IHJlYWxseSB3YW50XG4gIC8vIHRvIGJpbmQgdGhlbSBkaWZmZXJlbnRseSwgdGhleSBjYW4gYWxzbyB1c2UgdGhlIG51bWVyaWMgdmFsdWUuXG4gIEVOVEVSOiAxMyxcbiAgRU5UOiAxMyxcbiAgUkVUVVJOOiAxMyxcbiAgUkVUOiAxMyxcblxuICAvLyBSb3cgZml2ZS5cbiAgWjogOTAsXG4gIFg6IDg4LFxuICBDOiA2NyxcbiAgVjogODYsXG4gIEI6IDY2LFxuICBOOiA3OCxcbiAgTTogNzcsXG5cbiAgLy8gRXRjLlxuICBTUEFDRTogMzIsXG4gIFNQOiAzMixcbiAgUFJJTlRfU0NSRUVOOiA0MixcbiAgUFJUU0M6IDQyLFxuICBTQ1JPTExfTE9DSzogMTQ1LFxuICBTQ1JMSzogMTQ1LFxuICBCUkVBSzogMTksXG4gIEJSSzogMTksXG4gIElOU0VSVDogNDUsXG4gIElOUzogNDUsXG4gIEhPTUU6IDM2LFxuICBQQUdFX1VQOiAzMyxcbiAgUEdVUDogMzMsXG4gIERFTEVURTogNDYsXG4gIERFTDogNDYsXG4gIEVORDogMzUsXG4gIFBBR0VfRE9XTjogMzQsXG4gIFBHRE9XTjogMzQsXG4gIFBHRE46IDM0LFxuICBVUDogMzgsXG4gIERPV046IDQwLFxuICBSSUdIVDogMzksXG4gIExFRlQ6IDM3LFxuICBOVU1MT0NLOiAxNDQsXG5cbiAgLy8gS2V5cGFkXG4gIEtQMDogOTYsXG4gIEtQMTogOTcsXG4gIEtQMjogOTgsXG4gIEtQMzogOTksXG4gIEtQNDogMTAwLFxuICBLUDU6IDEwMSxcbiAgS1A2OiAxMDIsXG4gIEtQNzogMTAzLFxuICBLUDg6IDEwNCxcbiAgS1A5OiAxMDUsXG4gIEtQX1BMVVM6IDEwNyxcbiAgS1BfQUREOiAxMDcsXG4gIEtQX01JTlVTOiAxMDksXG4gIEtQX1NVQlRSQUNUOiAxMDksXG4gIEtQX1NUQVI6IDEwNixcbiAgS1BfTVVMVElQTFk6IDEwNixcbiAgS1BfRElWSURFOiAxMTEsXG4gIEtQX0RFQ0lNQUw6IDExMCxcbiAgS1BfUEVSSU9EOiAxMTAsXG5cbiAgLy8gQ2hyb21lIE9TIG1lZGlhIGtleXNcbiAgTkFWSUdBVEVfQkFDSzogMTY2LFxuICBOQVZJR0FURV9GT1JXQVJEOiAxNjcsXG4gIFJFTE9BRDogMTY4LFxuICBGVUxMX1NDUkVFTjogMTgzLFxuICBXSU5ET1dfT1ZFUlZJRVc6IDE4MixcbiAgQlJJR0hUTkVTU19VUDogMjE2LFxuICBCUklHSFRORVNTX0RPV046IDIxNyxcbn07XG5cbi8qKlxuICogSWRlbnRpZmllcnMgZm9yIHVzZSBpbiBrZXkgYWN0aW9ucy5cbiAqL1xuaHRlcm0uUGFyc2VyLmlkZW50aWZpZXJzLmFjdGlvbnMgPSB7XG4gIC8qKlxuICAgKiBQcmV2ZW50IHRoZSBicm93c2VyIGFuZCBvcGVyYXRpbmcgc3lzdGVtIGZyb20gaGFuZGxpbmcgdGhlIGV2ZW50LlxuICAgKi9cbiAgQ0FOQ0VMOiBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLkNBTkNFTCxcblxuICAvKipcbiAgICogV2FpdCBmb3IgYSBcImtleXByZXNzXCIgZXZlbnQsIHNlbmQgdGhlIGtleXByZXNzIGNoYXJDb2RlIHRvIHRoZSBob3N0LlxuICAgKi9cbiAgREVGQVVMVDogaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5ERUZBVUxULFxuXG4gIC8qKlxuICAgKiBMZXQgdGhlIGJyb3dzZXIgb3Igb3BlcmF0aW5nIHN5c3RlbSBoYW5kbGUgdGhlIGtleS5cbiAgICovXG4gIFBBU1M6IGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuUEFTUyxcblxuICAvKipcbiAgICogU2Nyb2xsIHRoZSB0ZXJtaW5hbCBvbmUgbGluZSB1cC5cbiAgICovXG4gIHNjcm9sbExpbmVVcDogZnVuY3Rpb24odGVybWluYWwpIHtcbiAgICB0ZXJtaW5hbC5zY3JvbGxMaW5lVXAoKTtcbiAgICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNjcm9sbCB0aGUgdGVybWluYWwgb25lIGxpbmUgZG93bi5cbiAgICovXG4gIHNjcm9sbExpbmVEb3duOiBmdW5jdGlvbih0ZXJtaW5hbCkge1xuICAgIHRlcm1pbmFsLnNjcm9sbExpbmVEb3duKCk7XG4gICAgcmV0dXJuIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuQ0FOQ0VMO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTY3JvbGwgdGhlIHRlcm1pbmFsIG9uZSBwYWdlIHVwLlxuICAgKi9cbiAgc2Nyb2xsUGFnZVVwOiBmdW5jdGlvbih0ZXJtaW5hbCkge1xuICAgIHRlcm1pbmFsLnNjcm9sbFBhZ2VVcCgpO1xuICAgIHJldHVybiBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLkNBTkNFTDtcbiAgfSxcblxuICAvKipcbiAgICogU2Nyb2xsIHRoZSB0ZXJtaW5hbCBvbmUgcGFnZSBkb3duLlxuICAgKi9cbiAgc2Nyb2xsUGFnZURvd246IGZ1bmN0aW9uKHRlcm1pbmFsKSB7XG4gICAgdGVybWluYWwuc2Nyb2xsUGFnZURvd24oKTtcbiAgICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNjcm9sbCB0aGUgdGVybWluYWwgdG8gdGhlIHRvcC5cbiAgICovXG4gIHNjcm9sbFRvVG9wOiBmdW5jdGlvbih0ZXJtaW5hbCkge1xuICAgIHRlcm1pbmFsLnNjcm9sbEhvbWUoKTtcbiAgICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNjcm9sbCB0aGUgdGVybWluYWwgdG8gdGhlIGJvdHRvbS5cbiAgICovXG4gIHNjcm9sbFRvQm90dG9tOiBmdW5jdGlvbih0ZXJtaW5hbCkge1xuICAgIHRlcm1pbmFsLnNjcm9sbEVuZCgpO1xuICAgIHJldHVybiBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLkNBTkNFTDtcbiAgfSxcblxuICAvKipcbiAgICogQ2xlYXIgdGhlIGFjdGl2ZSBzY3JlZW4gYW5kIG1vdmUgdGhlIGN1cnNvciB0byAoMCwwKS5cbiAgICovXG4gIGNsZWFyU2NyZWVuOiBmdW5jdGlvbih0ZXJtaW5hbCkge1xuICAgIHRlcm1pbmFsLmNsZWFySG9tZSgpO1xuICAgIHJldHVybiBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLkNBTkNFTDtcbiAgfSxcblxuICAvKipcbiAgICogQ2xlYXIgdGhlIHNjcm9sbGJhY2sgYnVmZmVyLlxuICAgKi9cbiAgY2xlYXJTY3JvbGxiYWNrOiBmdW5jdGlvbih0ZXJtaW5hbCkge1xuICAgIHRlcm1pbmFsLmNsZWFyU2Nyb2xsYmFjaygpO1xuICAgIHJldHVybiBodGVybS5LZXlib2FyZC5LZXlBY3Rpb25zLkNBTkNFTDtcbiAgfSxcblxuICAvKipcbiAgICogQ2xlYXIgdGhlIHRlcm1pbmFsIGFuZCBzY3JvbGxiYWNrIGJ1ZmZlciBhbmQgbW92ZSB0aGUgY3Vyc29yIHRvICgwLDApLlxuICAgKi9cbiAgY2xlYXJUZXJtaW5hbDogZnVuY3Rpb24odGVybWluYWwpIHtcbiAgICB0ZXJtaW5hbC53aXBlQ29udGVudHMoKTtcbiAgICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYSBmdWxsIHRlcm1pbmFsIHJlc2V0LlxuICAgKi9cbiAgZnVsbFJlc2V0OiBmdW5jdGlvbih0ZXJtaW5hbCkge1xuICAgIHRlcm1pbmFsLnJlc2V0KCk7XG4gICAgcmV0dXJuIGh0ZXJtLktleWJvYXJkLktleUFjdGlvbnMuQ0FOQ0VMO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGEgc29mdCB0ZXJtaW5hbCByZXNldC5cbiAgICovXG4gIHNvZnRSZXNldDogZnVuY3Rpb24odGVybWluYWwpIHtcbiAgICB0ZXJtaW5hbC5zb2Z0UmVzZXQoKTtcbiAgICByZXR1cm4gaHRlcm0uS2V5Ym9hcmQuS2V5QWN0aW9ucy5DQU5DRUw7XG4gIH0sXG59O1xuLy8gU09VUkNFIEZJTEU6IGh0ZXJtL2pzL2h0ZXJtX3ByZWZlcmVuY2VfbWFuYWdlci5qc1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBPUyBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxubGliLnJ0ZGVwKCdsaWIuZicsICdsaWIuU3RvcmFnZScpO1xuXG4vKipcbiAqIFByZWZlcmVuY2VNYW5hZ2VyIHN1YmNsYXNzIG1hbmFnaW5nIGdsb2JhbCBOYVNTSCBwcmVmZXJlbmNlcy5cbiAqXG4gKiBUaGlzIGlzIGN1cnJlbnRseSBqdXN0IGFuIG9yZGVyZWQgbGlzdCBvZiBrbm93biBjb25uZWN0aW9uIHByb2ZpbGVzLlxuICovXG5odGVybS5QcmVmZXJlbmNlTWFuYWdlciA9IGZ1bmN0aW9uKHByb2ZpbGVJZCkge1xuICBsaWIuUHJlZmVyZW5jZU1hbmFnZXIuY2FsbChcbiAgICB0aGlzLFxuICAgIGh0ZXJtLmRlZmF1bHRTdG9yYWdlLFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLnByZWZpeF8gKyBwcm9maWxlSWQsXG4gICk7XG4gIE9iamVjdC5lbnRyaWVzKGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmF1bHRQcmVmZXJlbmNlcykuZm9yRWFjaChcbiAgICAoW2tleSwgZW50cnldKSA9PiB7XG4gICAgICB0aGlzLmRlZmluZVByZWZlcmVuY2Uoa2V5LCBlbnRyeVsnZGVmYXVsdCddKTtcbiAgICB9LFxuICApO1xufTtcblxuLyoqXG4gKiBUaGUgc3RvcmFnZSBrZXkgcHJlZml4IHRvIG5hbWVzcGFjZSB0aGUgcHJlZmVyZW5jZXMuXG4gKi9cbmh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLnByZWZpeF8gPSAnL2h0ZXJtL3Byb2ZpbGVzLyc7XG5cbi8qKlxuICogTGlzdCBhbGwgdGhlIGRlZmluZWQgcHJvZmlsZXMuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihBcnJheTxzdHJpbmc+KX0gY2FsbGJhY2sgQ2FsbGVkIHdpdGggdGhlIGxpc3Qgb2YgcHJvZmlsZXMuXG4gKi9cbmh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmxpc3RQcm9maWxlcyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIGh0ZXJtLmRlZmF1bHRTdG9yYWdlLmdldEl0ZW1zKG51bGwsIGl0ZW1zID0+IHtcbiAgICBjb25zdCBwcm9maWxlcyA9IHt9O1xuICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhpdGVtcykpIHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aChodGVybS5QcmVmZXJlbmNlTWFuYWdlci5wcmVmaXhfKSkge1xuICAgICAgICAvLyBUdXJuIFwiL2h0ZXJtL3Byb2ZpbGVzL2Zvby9iYXIvY293XCIgdG8gXCJmb28vYmFyL2Nvd1wiLlxuICAgICAgICBjb25zdCBzdWJLZXkgPSBrZXkuc2xpY2UoaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIucHJlZml4Xy5sZW5ndGgpO1xuICAgICAgICAvLyBUdXJuIFwiZm9vL2Jhci9jb3dcIiBpbnRvIFwiZm9vXCIuXG4gICAgICAgIHByb2ZpbGVzW3N1YktleS5zcGxpdCgnLycsIDEpWzBdXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGNhbGxiYWNrKE9iamVjdC5rZXlzKHByb2ZpbGVzKSk7XG4gIH0pO1xufTtcblxuaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcyA9IHt9O1xuaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5LZXlib2FyZCA9ICdLZXlib2FyZCc7XG5odGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkFwcGVhcmFuY2UgPSAnQXBwZWFyYW5jZSc7XG5odGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkNvcHlQYXN0ZSA9ICdDb3B5UGFzdGUnO1xuaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5Tb3VuZHMgPSAnU291bmRzJztcbmh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuU2Nyb2xsaW5nID0gJ1Njcm9sbGluZyc7XG5odGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkVuY29kaW5nID0gJ0VuY29kaW5nJztcbmh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuRXh0ZW5zaW9ucyA9ICdFeHRlbnNpb25zJztcbmh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuTWlzY2VsbGFuZW91cyA9ICdNaXNjZWxsYW5lb3VzJztcblxuLyoqXG4gKiBMaXN0IG9mIGNhdGVnb3JpZXMsIG9yZGVyZWQgYnkgZGlzcGxheSBvcmRlciAodG9wIHRvIGJvdHRvbSlcbiAqL1xuaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcnlEZWZpbml0aW9ucyA9IFtcbiAge1xuICAgIGlkOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkFwcGVhcmFuY2UsXG4gICAgdGV4dDogJ0FwcGVhcmFuY2UgKGZvbnRzLCBjb2xvcnMsIGltYWdlcyknLFxuICB9LFxuICB7XG4gICAgaWQ6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuQ29weVBhc3RlLFxuICAgIHRleHQ6ICdDb3B5ICYgUGFzdGUnLFxuICB9LFxuICB7XG4gICAgaWQ6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuRW5jb2RpbmcsXG4gICAgdGV4dDogJ0VuY29kaW5nJyxcbiAgfSxcbiAge1xuICAgIGlkOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLktleWJvYXJkLFxuICAgIHRleHQ6ICdLZXlib2FyZCcsXG4gIH0sXG4gIHtcbiAgICBpZDogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5TY3JvbGxpbmcsXG4gICAgdGV4dDogJ1Njcm9sbGluZycsXG4gIH0sXG4gIHtcbiAgICBpZDogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5Tb3VuZHMsXG4gICAgdGV4dDogJ1NvdW5kcycsXG4gIH0sXG4gIHtcbiAgICBpZDogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5FeHRlbnNpb25zLFxuICAgIHRleHQ6ICdFeHRlbnNpb25zJyxcbiAgfSxcbiAge1xuICAgIGlkOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLk1pc2NlbGxhbmVvdXMsXG4gICAgdGV4dDogJ01pc2NlbGxhbmVvdXMnLFxuICB9LFxuXTtcblxuLyoqXG4gKiBJbnRlcm5hbCBoZWxwZXIgdG8gY3JlYXRlIGEgZGVmYXVsdCBwcmVmZXJlbmNlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge2h0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXN9IGNhdGVnb3J5IFRoZSBwcmVmIGNhdGVnb3J5LlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRWYWx1ZSBUaGUgZGVmYXVsdCBwcmVmIHZhbHVlLlxuICogQHBhcmFtIHtPYmplY3R9IHR5cGUgVGhlIHR5cGUgZm9yIHRoaXMgcHJlZiAob3IgYW4gYXJyYXkgZm9yIGVudW1zKS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBoZWxwIFRoZSB1c2VyIHJlYWRhYmxlIGhlbHAgdGV4dC5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIGRlZmF1bHQgcHJlZiBvYmplY3QuXG4gKi9cbmh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfID0gZnVuY3Rpb24oXG4gIGNhdGVnb3J5LFxuICBkZWZhdWx0VmFsdWUsXG4gIHR5cGUsXG4gIGhlbHAsXG4pIHtcbiAgcmV0dXJuIHtcbiAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgZGVmYXVsdDogZGVmYXVsdFZhbHVlLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgaGVscDogaGVscCxcbiAgfTtcbn07XG5cbmh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmF1bHRQcmVmZXJlbmNlcyA9IHtcbiAgJ2FsdC1nci1tb2RlJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5LZXlib2FyZCxcbiAgICBudWxsLFxuICAgIFtudWxsLCAnbm9uZScsICdjdHJsLWFsdCcsICdsZWZ0LWFsdCcsICdyaWdodC1hbHQnXSxcbiAgICBgU2VsZWN0IGFuIEFsdEdyIGRldGVjdGlvbiBoZXVyaXN0aWMuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgJ251bGwnOiBBdXRvZGV0ZWN0IGJhc2VkIG9uIG5hdmlnYXRvci5sYW5ndWFnZTpcXG5gICtcbiAgICAgIGAgICAgICAnZW4tdXMnID0+ICdub25lJywgZWxzZSA9PiAncmlnaHQtYWx0J1xcbmAgK1xuICAgICAgYCdub25lJzogRGlzYWJsZSBhbnkgQWx0R3IgcmVsYXRlZCBtdW5naW5nLlxcbmAgK1xuICAgICAgYCdjdHJsLWFsdCc6IEFzc3VtZSBDdHJsK0FsdCBtZWFucyBBbHRHci5cXG5gICtcbiAgICAgIGAnbGVmdC1hbHQnOiBBc3N1bWUgbGVmdCBBbHQgbWVhbnMgQWx0R3IuXFxuYCArXG4gICAgICBgJ3JpZ2h0LWFsdCc6IEFzc3VtZSByaWdodCBBbHQgbWVhbnMgQWx0R3IuYCxcbiAgKSxcblxuICAnYWx0LWJhY2tzcGFjZS1pcy1tZXRhLWJhY2tzcGFjZSc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuS2V5Ym9hcmQsXG4gICAgZmFsc2UsXG4gICAgJ2Jvb2wnLFxuICAgIGBJZiBzZXQsIHVuZG9lcyB0aGUgQ2hyb21lIE9TIEFsdC1CYWNrc3BhY2UtPkRFTCByZW1hcCwgc28gdGhhdCBgICtcbiAgICAgIGBBbHQtQmFja3NwYWNlIGluZGVlZCBpcyBBbHQtQmFja3NwYWNlLmAsXG4gICksXG5cbiAgJ2FsdC1pcy1tZXRhJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5LZXlib2FyZCxcbiAgICBmYWxzZSxcbiAgICAnYm9vbCcsXG4gICAgYFdoZXRoZXIgdGhlIEFsdCBrZXkgYWN0cyBhcyBhIE1ldGEga2V5IG9yIGFzIGEgZGlzdGluY3QgQWx0IGtleS5gLFxuICApLFxuXG4gICdhbHQtc2VuZHMtd2hhdCc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuS2V5Ym9hcmQsXG4gICAgJ2VzY2FwZScsXG4gICAgWydlc2NhcGUnLCAnOC1iaXQnLCAnYnJvd3Nlci1rZXknXSxcbiAgICBgQ29udHJvbHMgaG93IHRoZSBBbHQga2V5IGlzIGhhbmRsZWQuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgICBlc2NhcGU6IFNlbmQgYW4gRVNDIHByZWZpeC5cXG5gICtcbiAgICAgIGAgIDgtYml0OiBBZGQgMTI4IHRvIHRoZSB0eXBlZCBjaGFyYWN0ZXIgYXMgaW4geHRlcm0uXFxuYCArXG4gICAgICBgICBicm93c2VyLWtleTogV2FpdCBmb3IgdGhlIGtleXByZXNzIGV2ZW50IGFuZCBzZWUgd2hhdCB0aGUgYnJvd3NlclxcbmAgK1xuICAgICAgYCAgICBzYXlzLiAoVGhpcyB3b24ndCB3b3JrIHdlbGwgb24gcGxhdGZvcm1zIHdoZXJlIHRoZSBicm93c2VyXFxuYCArXG4gICAgICBgICAgIHBlcmZvcm1zIGEgZGVmYXVsdCBhY3Rpb24gZm9yIHNvbWUgQWx0IHNlcXVlbmNlcy4pYCxcbiAgKSxcblxuICAnYXVkaWJsZS1iZWxsLXNvdW5kJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5Tb3VuZHMsXG4gICAgJ2xpYi1yZXNvdXJjZTpodGVybS9hdWRpby9iZWxsJyxcbiAgICAndXJsJyxcbiAgICBgVVJMIG9mIHRoZSB0ZXJtaW5hbCBiZWxsIHNvdW5kLiBFbXB0eSBzdHJpbmcgZm9yIG5vIGF1ZGlibGUgYmVsbC5gLFxuICApLFxuXG4gICdkZXNrdG9wLW5vdGlmaWNhdGlvbi1iZWxsJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5Tb3VuZHMsXG4gICAgZmFsc2UsXG4gICAgJ2Jvb2wnLFxuICAgIGBJZiB0cnVlLCB0ZXJtaW5hbCBiZWxscyBpbiB0aGUgYmFja2dyb3VuZCB3aWxsIGNyZWF0ZSBhIFdlYiBgICtcbiAgICAgIGBOb3RpZmljYXRpb24uIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ub3RpZmljYXRpb25zL1xcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYERpc3BsYXlpbmcgbm90aWZpY2F0aW9ucyByZXF1aXJlcyBwZXJtaXNzaW9uIGZyb20gdGhlIHVzZXIuIFdoZW4gdGhpcyBgICtcbiAgICAgIGBvcHRpb24gaXMgc2V0IHRvIHRydWUsIGh0ZXJtIHdpbGwgYXR0ZW1wdCB0byBhc2sgdGhlIHVzZXIgZm9yIGAgK1xuICAgICAgYHBlcm1pc3Npb24gaWYgbmVjZXNzYXJ5LiBCcm93c2VycyBtYXkgbm90IHNob3cgdGhpcyBwZXJtaXNzaW9uIGAgK1xuICAgICAgYHJlcXVlc3QgaWYgaXQgd2FzIG5vdCB0cmlnZ2VyZWQgYnkgYSB1c2VyIGFjdGlvbi5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBDaHJvbWUgZXh0ZW5zaW9ucyB3aXRoIHRoZSBcIm5vdGlmaWNhdGlvbnNcIiBwZXJtaXNzaW9uIGhhdmUgcGVybWlzc2lvbiBgICtcbiAgICAgIGB0byBkaXNwbGF5IG5vdGlmaWNhdGlvbnMuYCxcbiAgKSxcblxuICAnYmFja2dyb3VuZC1jb2xvcic6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuQXBwZWFyYW5jZSxcbiAgICAncmdiKDE2LCAxNiwgMTYpJyxcbiAgICAnY29sb3InLFxuICAgIGBUaGUgYmFja2dyb3VuZCBjb2xvciBmb3IgdGV4dCB3aXRoIG5vIG90aGVyIGNvbG9yIGF0dHJpYnV0ZXMuYCxcbiAgKSxcblxuICAnYmFja2dyb3VuZC1pbWFnZSc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuQXBwZWFyYW5jZSxcbiAgICAnJyxcbiAgICAnc3RyaW5nJyxcbiAgICBgQ1NTIHZhbHVlIG9mIHRoZSBiYWNrZ3JvdW5kIGltYWdlLiBFbXB0eSBzdHJpbmcgZm9yIG5vIGltYWdlLlxcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYEZvciBleGFtcGxlOlxcbmAgK1xuICAgICAgYCAgdXJsKGh0dHBzOi8vZ29vLmdsL2FuZWRUSylcXG5gICtcbiAgICAgIGAgIGxpbmVhci1ncmFkaWVudCh0b3AgYm90dG9tLCBibHVlLCByZWQpYCxcbiAgKSxcblxuICAnYmFja2dyb3VuZC1zaXplJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5BcHBlYXJhbmNlLFxuICAgICcnLFxuICAgICdzdHJpbmcnLFxuICAgIGBDU1MgdmFsdWUgb2YgdGhlIGJhY2tncm91bmQgaW1hZ2Ugc2l6ZS5gLFxuICApLFxuXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5BcHBlYXJhbmNlLFxuICAgICcnLFxuICAgICdzdHJpbmcnLFxuICAgIGBDU1MgdmFsdWUgb2YgdGhlIGJhY2tncm91bmQgaW1hZ2UgcG9zaXRpb24uXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgRm9yIGV4YW1wbGU6XFxuYCArXG4gICAgICBgICAxMCUgMTAlXFxuYCArXG4gICAgICBgICBjZW50ZXJgLFxuICApLFxuXG4gICdiYWNrc3BhY2Utc2VuZHMtYmFja3NwYWNlJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5LZXlib2FyZCxcbiAgICBmYWxzZSxcbiAgICAnYm9vbCcsXG4gICAgYElmIHRydWUsIHRoZSBiYWNrc3BhY2Ugc2hvdWxkIHNlbmQgQlMgKCdcXFxceDA4JywgYWthIF5IKS4gT3RoZXJ3aXNlIGAgK1xuICAgICAgYHRoZSBiYWNrc3BhY2Uga2V5IHNob3VsZCBzZW5kICdcXFxceDdmJy5gLFxuICApLFxuXG4gICdjaGFyYWN0ZXItbWFwLW92ZXJyaWRlcyc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuQXBwZWFyYW5jZSxcbiAgICBudWxsLFxuICAgICd2YWx1ZScsXG4gICAgYFRoaXMgaXMgc3BlY2lmaWVkIGFzIGFuIG9iamVjdC4gSXQgaXMgYSBzcGFyc2UgYXJyYXksIHdoZXJlIGVhY2ggYCArXG4gICAgICBgcHJvcGVydHkgaXMgdGhlIGNoYXJhY3RlciBzZXQgY29kZSBhbmQgdGhlIHZhbHVlIGlzIGFuIG9iamVjdCB0aGF0IGlzIGAgK1xuICAgICAgYGEgc3BhcnNlIGFycmF5IGl0c2VsZi4gSW4gdGhhdCBzcGFyc2UgYXJyYXksIGVhY2ggcHJvcGVydHkgaXMgdGhlIGAgK1xuICAgICAgYHJlY2VpdmVkIGNoYXJhY3RlciBhbmQgdGhlIHZhbHVlIGlzIHRoZSBkaXNwbGF5ZWQgY2hhcmFjdGVyLlxcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYEZvciBleGFtcGxlOlxcbmAgK1xuICAgICAgYCAge1wiMFwiOntcIitcIjpcIlxcXFx1MjE5MlwiLFwiLFwiOlwiXFxcXHUyMTkwXCIsXCItXCI6XCJcXFxcdTIxOTFcIixcIi5cIjpcIlxcXFx1MjE5M1wiLCBgICtcbiAgICAgIGBcIjBcIjpcIlxcXFx1MjU4OFwifX1gLFxuICApLFxuXG4gICdjbG9zZS1vbi1leGl0JzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5NaXNjZWxsYW5lb3VzLFxuICAgIHRydWUsXG4gICAgJ2Jvb2wnLFxuICAgIGBXaGV0aGVyIHRvIGNsb3NlIHRoZSB3aW5kb3cgd2hlbiB0aGUgY29tbWFuZCBmaW5pc2hlcyBleGVjdXRpbmcuYCxcbiAgKSxcblxuICAnY3Vyc29yLWJsaW5rJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5BcHBlYXJhbmNlLFxuICAgIGZhbHNlLFxuICAgICdib29sJyxcbiAgICBgV2hldGhlciB0aGUgdGV4dCBjdXJzb3IgYmxpbmtzIGJ5IGRlZmF1bHQuIFRoaXMgY2FuIGJlIHRvZ2dsZWQgYXQgYCArXG4gICAgICBgcnVudGltZSB2aWEgdGVybWluYWwgZXNjYXBlIHNlcXVlbmNlcy5gLFxuICApLFxuXG4gICdjdXJzb3ItYmxpbmstY3ljbGUnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkFwcGVhcmFuY2UsXG4gICAgWzEwMDAsIDUwMF0sXG4gICAgJ3ZhbHVlJyxcbiAgICBgVGhlIHRleHQgY3Vyc29yIGJsaW5rIHJhdGUgaW4gbWlsbGlzZWNvbmRzLlxcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYEEgdHdvIGVsZW1lbnQgYXJyYXksIHRoZSBmaXJzdCBvZiB3aGljaCBpcyBob3cgbG9uZyB0aGUgdGV4dCBjdXJzb3IgYCArXG4gICAgICBgc2hvdWxkIGJlIG9uLCBzZWNvbmQgaXMgaG93IGxvbmcgaXQgc2hvdWxkIGJlIG9mZi5gLFxuICApLFxuXG4gICdjdXJzb3ItY29sb3InOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkFwcGVhcmFuY2UsXG4gICAgJ3JnYmEoMjU1LCAwLCAwLCAwLjUpJyxcbiAgICAnY29sb3InLFxuICAgIGBUaGUgY29sb3Igb2YgdGhlIHZpc2libGUgdGV4dCBjdXJzb3IuYCxcbiAgKSxcblxuICAnY29sb3ItcGFsZXR0ZS1vdmVycmlkZXMnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkFwcGVhcmFuY2UsXG4gICAgbnVsbCxcbiAgICAndmFsdWUnLFxuICAgIGBPdmVycmlkZSBjb2xvcnMgaW4gdGhlIGRlZmF1bHQgcGFsZXR0ZS5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBUaGlzIGNhbiBiZSBzcGVjaWZpZWQgYXMgYW4gYXJyYXkgb3IgYW4gb2JqZWN0LiBJZiBzcGVjaWZpZWQgYXMgYW4gYCArXG4gICAgICBgb2JqZWN0IGl0IGlzIGFzc3VtZWQgdG8gYmUgYSBzcGFyc2UgYXJyYXksIHdoZXJlIGVhY2ggcHJvcGVydHkgYCArXG4gICAgICBgaXMgYSBudW1lcmljIGluZGV4IGludG8gdGhlIGNvbG9yIHBhbGV0dGUuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgVmFsdWVzIGNhbiBiZSBzcGVjaWZpZWQgYXMgYWxtb3N0IGFueSBDU1MgY29sb3IgdmFsdWUuIFRoaXMgYCArXG4gICAgICBgaW5jbHVkZXMgI1JHQiwgI1JSR0dCQiwgcmdiKC4uLiksIHJnYmEoLi4uKSwgYW5kIGFueSBjb2xvciBuYW1lcyBgICtcbiAgICAgIGB0aGF0IGFyZSBhbHNvIHBhcnQgb2YgdGhlIHN0YW5kYXJkIFgxMSByZ2IudHh0IGZpbGUuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgWW91IGNhbiB1c2UgJ251bGwnIHRvIHNwZWNpZnkgdGhhdCB0aGUgZGVmYXVsdCB2YWx1ZSBzaG91bGQgYmUgbm90IGAgK1xuICAgICAgYGJlIGNoYW5nZWQuIFRoaXMgaXMgdXNlZnVsIGZvciBza2lwcGluZyBhIHNtYWxsIG51bWJlciBvZiBpbmRpY2VzIGAgK1xuICAgICAgYHdoZW4gdGhlIHZhbHVlIGlzIHNwZWNpZmllZCBhcyBhbiBhcnJheS5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBGb3IgZXhhbXBsZSwgdGhlc2UgYm90aCBzZXQgY29sb3IgaW5kZXggMSB0byBibHVlOlxcbmAgK1xuICAgICAgYCAgezE6IFwiIzAwMDBmZlwifVxcbmAgK1xuICAgICAgYCAgW251bGwsIFwiIzAwMDBmZlwiXWAsXG4gICksXG5cbiAgJ2NvcHktb24tc2VsZWN0JzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5Db3B5UGFzdGUsXG4gICAgdHJ1ZSxcbiAgICAnYm9vbCcsXG4gICAgYEF1dG9tYXRpY2FsbHkgY29weSBtb3VzZSBzZWxlY3Rpb24gdG8gdGhlIGNsaXBib2FyZC5gLFxuICApLFxuXG4gICd1c2UtZGVmYXVsdC13aW5kb3ctY29weSc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuQ29weVBhc3RlLFxuICAgIGZhbHNlLFxuICAgICdib29sJyxcbiAgICBgV2hldGhlciB0byB1c2UgdGhlIGRlZmF1bHQgYnJvd3Nlci9PUydzIGNvcHkgYmVoYXZpb3IuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgQWxsb3cgdGhlIGJyb3dzZXIvT1MgdG8gaGFuZGxlIHRoZSBjb3B5IGV2ZW50IGRpcmVjdGx5IHdoaWNoIG1pZ2h0IGAgK1xuICAgICAgYGltcHJvdmUgY29tcGF0aWJpbGl0eSB3aXRoIHNvbWUgc3lzdGVtcyAod2hlcmUgY29weWluZyBkb2Vzbid0IHdvcmsgYCArXG4gICAgICBgYXQgYWxsKSwgYnV0IG1ha2VzIHRoZSB0ZXh0IHNlbGVjdGlvbiBsZXNzIHJvYnVzdC5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBGb3IgZXhhbXBsZSwgbG9uZyBsaW5lcyB0aGF0IHdlcmUgYXV0b21hdGljYWxseSBsaW5lIHdyYXBwZWQgd2lsbCBgICtcbiAgICAgIGBiZSBjb3BpZWQgd2l0aCB0aGUgbmV3bGluZXMgc3RpbGwgaW4gdGhlbS5gLFxuICApLFxuXG4gICdjbGVhci1zZWxlY3Rpb24tYWZ0ZXItY29weSc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuQ29weVBhc3RlLFxuICAgIHRydWUsXG4gICAgJ2Jvb2wnLFxuICAgIGBXaGV0aGVyIHRvIGNsZWFyIHRoZSBzZWxlY3Rpb24gYWZ0ZXIgY29weWluZy5gLFxuICApLFxuXG4gICdjdHJsLXBsdXMtbWludXMtemVyby16b29tJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5LZXlib2FyZCxcbiAgICB0cnVlLFxuICAgICdib29sJyxcbiAgICBgSWYgdHJ1ZSwgQ3RybC1QbHVzL01pbnVzL1plcm8gY29udHJvbHMgem9vbS5cXG5gICtcbiAgICAgIGBJZiBmYWxzZSwgQ3RybC1TaGlmdC1QbHVzL01pbnVzL1plcm8gY29udHJvbHMgem9vbSwgQ3RybC1NaW51cyBzZW5kcyBgICtcbiAgICAgIGBeXywgQ3RybC1QbHVzL1plcm8gZG8gbm90aGluZy5gLFxuICApLFxuXG4gICdjdHJsLWMtY29weSc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuS2V5Ym9hcmQsXG4gICAgZmFsc2UsXG4gICAgJ2Jvb2wnLFxuICAgIGBDdHJsLUMgY29waWVzIGlmIHRydWUsIHNlbmQgXkMgdG8gaG9zdCBpZiBmYWxzZS5cXG5gICtcbiAgICAgIGBDdHJsLVNoaWZ0LUMgc2VuZHMgXkMgdG8gaG9zdCBpZiB0cnVlLCBjb3BpZXMgaWYgZmFsc2UuYCxcbiAgKSxcblxuICAnY3RybC12LXBhc3RlJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5LZXlib2FyZCxcbiAgICBmYWxzZSxcbiAgICAnYm9vbCcsXG4gICAgYEN0cmwtViBwYXN0ZXMgaWYgdHJ1ZSwgc2VuZCBeViB0byBob3N0IGlmIGZhbHNlLlxcbmAgK1xuICAgICAgYEN0cmwtU2hpZnQtViBzZW5kcyBeViB0byBob3N0IGlmIHRydWUsIHBhc3RlcyBpZiBmYWxzZS5gLFxuICApLFxuXG4gICdlYXN0LWFzaWFuLWFtYmlndW91cy1hcy10d28tY29sdW1uJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5LZXlib2FyZCxcbiAgICBmYWxzZSxcbiAgICAnYm9vbCcsXG4gICAgYFdoZXRoZXIgRWFzdCBBc2lhbiBBbWJpZ3VvdXMgY2hhcmFjdGVycyBoYXZlIHR3byBjb2x1bW4gd2lkdGguYCxcbiAgKSxcblxuICAnZW5hYmxlLTgtYml0LWNvbnRyb2wnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLktleWJvYXJkLFxuICAgIGZhbHNlLFxuICAgICdib29sJyxcbiAgICBgVHJ1ZSB0byBlbmFibGUgOC1iaXQgY29udHJvbCBjaGFyYWN0ZXJzLCBmYWxzZSB0byBpZ25vcmUgdGhlbS5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBXZSdsbCByZXNwZWN0IHRoZSB0d28tYnl0ZSB2ZXJzaW9ucyBvZiB0aGVzZSBjb250cm9sIGNoYXJhY3RlcnMgYCArXG4gICAgICBgcmVnYXJkbGVzcyBvZiB0aGlzIHNldHRpbmcuYCxcbiAgKSxcblxuICAnZW5hYmxlLWJvbGQnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkFwcGVhcmFuY2UsXG4gICAgbnVsbCxcbiAgICAndHJpc3RhdGUnLFxuICAgIGBJZiB0cnVlLCB1c2UgYm9sZCB3ZWlnaHQgZm9udCBmb3IgdGV4dCB3aXRoIHRoZSBib2xkL2JyaWdodCBgICtcbiAgICAgIGBhdHRyaWJ1dGUuIEZhbHNlIHRvIHVzZSB0aGUgbm9ybWFsIHdlaWdodCBmb250LiBOdWxsIHRvIGF1dG9kZXRlY3QuYCxcbiAgKSxcblxuICAnZW5hYmxlLWJvbGQtYXMtYnJpZ2h0JzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5BcHBlYXJhbmNlLFxuICAgIHRydWUsXG4gICAgJ2Jvb2wnLFxuICAgIGBJZiB0cnVlLCB1c2UgYnJpZ2h0IGNvbG9ycyAoOC0xNSBvbiBhIDE2IGNvbG9yIHBhbGV0dGUpIGZvciBhbnkgdGV4dCBgICtcbiAgICAgIGB3aXRoIHRoZSBib2xkIGF0dHJpYnV0ZS4gRmFsc2Ugb3RoZXJ3aXNlLmAsXG4gICksXG5cbiAgJ2VuYWJsZS1ibGluayc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuQXBwZWFyYW5jZSxcbiAgICB0cnVlLFxuICAgICdib29sJyxcbiAgICBgSWYgdHJ1ZSwgcmVzcGVjdCB0aGUgYmxpbmsgYXR0cmlidXRlLiBGYWxzZSB0byBpZ25vcmUgaXQuYCxcbiAgKSxcblxuICAnZW5hYmxlLWNsaXBib2FyZC1ub3RpY2UnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkNvcHlQYXN0ZSxcbiAgICB0cnVlLFxuICAgICdib29sJyxcbiAgICBgV2hldGhlciB0byBzaG93IGEgbWVzc2FnZSBpbiB0aGUgdGVybWluYWwgd2hlbiB0aGUgaG9zdCB3cml0ZXMgdG8gdGhlIGAgK1xuICAgICAgYGNsaXBib2FyZC5gLFxuICApLFxuXG4gICdlbmFibGUtY2xpcGJvYXJkLXdyaXRlJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5Db3B5UGFzdGUsXG4gICAgdHJ1ZSxcbiAgICAnYm9vbCcsXG4gICAgYEFsbG93IHRoZSByZW1vdGUgaG9zdCB0byB3cml0ZSBkaXJlY3RseSB0byB0aGUgbG9jYWwgc3lzdGVtIGAgK1xuICAgICAgYGNsaXBib2FyZC5cXG5gICtcbiAgICAgIGBSZWFkIGFjY2VzcyBpcyBuZXZlciBncmFudGVkIHJlZ2FyZGxlc3Mgb2YgdGhpcyBzZXR0aW5nLlxcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYFRoaXMgaXMgdXNlZCB0byBjb250cm9sIGFjY2VzcyB0byBmZWF0dXJlcyBsaWtlIE9TQy01Mi5gLFxuICApLFxuXG4gICdlbmFibGUtZGVjMTInOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLk1pc2NlbGxhbmVvdXMsXG4gICAgZmFsc2UsXG4gICAgJ2Jvb2wnLFxuICAgIGBSZXNwZWN0IHRoZSBob3N0J3MgYXR0ZW1wdCB0byBjaGFuZ2UgdGhlIHRleHQgY3Vyc29yIGJsaW5rIHN0YXR1cyBgICtcbiAgICAgIGB1c2luZyBERUMgUHJpdmF0ZSBNb2RlIDEyLmAsXG4gICksXG5cbiAgJ2VuYWJsZS1jc2ktai0zJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5NaXNjZWxsYW5lb3VzLFxuICAgIHRydWUsXG4gICAgJ2Jvb2wnLFxuICAgIGBXaGV0aGVyIENTSS1KIChFcmFzZSBEaXNwbGF5KSBtb2RlIDMgbWF5IGNsZWFyIHRoZSB0ZXJtaW5hbCBgICtcbiAgICAgIGBzY3JvbGxiYWNrIGJ1ZmZlci5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBFbmFibGluZyB0aGlzIGJ5IGRlZmF1bHQgaXMgc2FmZS5gLFxuICApLFxuXG4gIGVudmlyb25tZW50OiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLk1pc2NlbGxhbmVvdXMsXG4gICAge1xuICAgICAgLy8gU2lnbmFsIG5jdXJzZXMgYmFzZWQgYXBwcyB0byB1c2UgVVRGLTggb3V0cHV0IGluc3RlYWQgb2YgbGVnYWN5XG4gICAgICAvLyBkcmF3aW5nIG1vZGVzICh3aGljaCBvbmx5IHdvcmsgaW4gSVNPLTIwMjIgbW9kZSkuICBTaW5jZSBodGVybSBpc1xuICAgICAgLy8gYWx3YXlzIFVURi04LCB0aGlzIHNob3VsZG4ndCBjYXVzZSBwcm9ibGVtcy5cbiAgICAgIE5DVVJTRVNfTk9fVVRGOF9BQ1M6ICcxJyxcbiAgICAgIFRFUk06ICd4dGVybS0yNTZjb2xvcicsXG4gICAgICAvLyBTZXQgdGhpcyBlbnYgdmFyIHRoYXQgYSBidW5jaCBvZiBtYWluc3RyZWFtIHRlcm1pbmFsIGVtdWxhdG9ycyBzZXRcbiAgICAgIC8vIHRvIGluZGljYXRlIHdlIHN1cHBvcnQgdHJ1ZSBjb2xvcnMuXG4gICAgICAvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9YVmlsa2EvODM0NjcyOFxuICAgICAgQ09MT1JURVJNOiAndHJ1ZWNvbG9yJyxcbiAgICB9LFxuICAgICd2YWx1ZScsXG4gICAgYFRoZSBpbml0aWFsIHNldCBvZiBlbnZpcm9ubWVudCB2YXJpYWJsZXMsIGFzIGFuIG9iamVjdC5gLFxuICApLFxuXG4gICdmb250LWZhbWlseSc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuQXBwZWFyYW5jZSxcbiAgICAnXCJEZWphVnUgU2FucyBNb25vXCIsIFwiTm90byBTYW5zIE1vbm9cIiwgXCJFdmVyc29uIE1vbm9cIiwgRnJlZU1vbm8sICcgK1xuICAgICAgJ01lbmxvLCBUZXJtaW5hbCwgbW9ub3NwYWNlJyxcbiAgICAnc3RyaW5nJyxcbiAgICBgRGVmYXVsdCBmb250IGZhbWlseSBmb3IgdGhlIHRlcm1pbmFsIHRleHQuYCxcbiAgKSxcblxuICAnZm9udC1zaXplJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5BcHBlYXJhbmNlLFxuICAgIDE1LFxuICAgICdpbnQnLFxuICAgIGBUaGUgZGVmYXVsdCBmb250IHNpemUgaW4gcGl4ZWxzLmAsXG4gICksXG5cbiAgJ2ZvbnQtc21vb3RoaW5nJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5BcHBlYXJhbmNlLFxuICAgICdhbnRpYWxpYXNlZCcsXG4gICAgJ3N0cmluZycsXG4gICAgYENTUyBmb250LXNtb290aGluZyBwcm9wZXJ0eS5gLFxuICApLFxuXG4gICdmb3JlZ3JvdW5kLWNvbG9yJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5BcHBlYXJhbmNlLFxuICAgICdyZ2IoMjQwLCAyNDAsIDI0MCknLFxuICAgICdjb2xvcicsXG4gICAgYFRoZSBmb3JlZ3JvdW5kIGNvbG9yIGZvciB0ZXh0IHdpdGggbm8gb3RoZXIgY29sb3IgYXR0cmlidXRlcy5gLFxuICApLFxuXG4gICdoaWRlLW1vdXNlLXdoaWxlLXR5cGluZyc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuS2V5Ym9hcmQsXG4gICAgbnVsbCxcbiAgICAndHJpc3RhdGUnLFxuICAgIGBXaGV0aGVyIHRvIGF1dG9tYXRpY2FsbHkgaGlkZSB0aGUgbW91c2UgY3Vyc29yIHdoZW4gdHlwaW5nLiBgICtcbiAgICAgIGBCeSBkZWZhdWx0LCBhdXRvZGV0ZWN0IHdoZXRoZXIgdGhlIHBsYXRmb3JtL09TIGhhbmRsZXMgdGhpcy5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBOb3RlOiBTb21lIG9wZXJhdGluZyBzeXN0ZW1zIG1heSBvdmVycmlkZSB0aGlzIHNldHRpbmcgYW5kIHRodXMgeW91IGAgK1xuICAgICAgYG1pZ2h0IG5vdCBiZSBhYmxlIHRvIGFsd2F5cyBkaXNhYmxlIGl0LmAsXG4gICksXG5cbiAgJ2hvbWUta2V5cy1zY3JvbGwnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLktleWJvYXJkLFxuICAgIGZhbHNlLFxuICAgICdib29sJyxcbiAgICBgSWYgdHJ1ZSwgSG9tZS9FbmQgY29udHJvbHMgdGhlIHRlcm1pbmFsIHNjcm9sbGJhciBhbmQgU2hpZnQtSG9tZS9gICtcbiAgICAgIGBTaGlmdC1FbmQgYXJlIHNlbnQgdG8gdGhlIHJlbW90ZSBob3N0LiBJZiBmYWxzZSwgdGhlbiBIb21lL0VuZCBhcmUgYCArXG4gICAgICBgc2VudCB0byB0aGUgcmVtb3RlIGhvc3QgYW5kIFNoaWZ0LUhvbWUvU2hpZnQtRW5kIHNjcm9sbHMuYCxcbiAgKSxcblxuICBrZXliaW5kaW5nczogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5LZXlib2FyZCxcbiAgICBudWxsLFxuICAgICd2YWx1ZScsXG4gICAgYEEgbWFwIG9mIGtleSBzZXF1ZW5jZSB0byBrZXkgYWN0aW9ucy4gS2V5IHNlcXVlbmNlcyBpbmNsdWRlIHplcm8gb3IgYCArXG4gICAgICBgbW9yZSBtb2RpZmllciBrZXlzIGZvbGxvd2VkIGJ5IGEga2V5IGNvZGUuIEtleSBjb2RlcyBjYW4gYmUgZGVjaW1hbCBgICtcbiAgICAgIGBvciBoZXhhZGVjaW1hbCBudW1iZXJzLCBvciBhIGtleSBpZGVudGlmaWVyLiBLZXkgYWN0aW9ucyBjYW4gYmUgYCArXG4gICAgICBgc3BlY2lmaWVkIGFzIGEgc3RyaW5nIHRvIHNlbmQgdG8gdGhlIGhvc3QsIG9yIGFuIGFjdGlvbiBpZGVudGlmaWVyLiBgICtcbiAgICAgIGBGb3IgYSBmdWxsIGV4cGxhbmF0aW9uIG9mIHRoZSBmb3JtYXQsIHNlZSBodHRwczovL2dvby5nbC9MV1JuZHIuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgU2FtcGxlIGtleWJpbmRpbmdzOlxcbmAgK1xuICAgICAgYHtcXG5gICtcbiAgICAgIGAgIFwiQ3RybC1BbHQtS1wiOiBcImNsZWFyVGVybWluYWxcIixcXG5gICtcbiAgICAgIGAgIFwiQ3RybC1TaGlmdC1MXCI6IFwiUEFTU1wiLFxcbmAgK1xuICAgICAgYCAgXCJDdHJsLUhcIjogXCInSGVsbG8gV29ybGQnXCJcXG5gICtcbiAgICAgIGB9YCxcbiAgKSxcblxuICAnbWVkaWEta2V5cy1hcmUtZmtleXMnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLktleWJvYXJkLFxuICAgIGZhbHNlLFxuICAgICdib29sJyxcbiAgICBgSWYgdHJ1ZSwgY29udmVydCBtZWRpYSBrZXlzIHRvIHRoZWlyIEZrZXkgZXF1aXZhbGVudC4gSWYgZmFsc2UsIGxldCBgICtcbiAgICAgIGB0aGUgYnJvd3NlciBoYW5kbGUgdGhlIGtleXMuYCxcbiAgKSxcblxuICAnbWV0YS1zZW5kcy1lc2NhcGUnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLktleWJvYXJkLFxuICAgIHRydWUsXG4gICAgJ2Jvb2wnLFxuICAgIGBTZW5kIGFuIEVTQyBwcmVmaXggd2hlbiBwcmVzc2luZyBhIGtleSB3aGlsZSBob2xkaW5nIHRoZSBNZXRhIGtleS5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBGb3IgZXhhbXBsZSwgd2hlbiBlbmFibGVkLCBwcmVzc2luZyBNZXRhLUsgd2lsbCBzZW5kIF5bayBhcyBpZiB5b3UgYCArXG4gICAgICBgdHlwZWQgRXNjYXBlIHRoZW4gay4gV2hlbiBkaXNhYmxlZCwgb25seSBrIHdpbGwgYmUgc2VudC5gLFxuICApLFxuXG4gICdtb3VzZS1yaWdodC1jbGljay1wYXN0ZSc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuQ29weVBhc3RlLFxuICAgIHRydWUsXG4gICAgJ2Jvb2wnLFxuICAgIGBQYXN0ZSBvbiByaWdodCBtb3VzZSBidXR0b24gY2xpY2tzLlxcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYFRoaXMgb3B0aW9uIGlzIGluZGVwZW5kZW50IG9mIHRoZSBcIm1vdXNlLXBhc3RlLWJ1dHRvblwiIHNldHRpbmcuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgTm90ZTogVGhpcyB3aWxsIGhhbmRsZSBsZWZ0ICYgcmlnaHQgaGFuZGVkIG1pY2UgY29ycmVjdGx5LmAsXG4gICksXG5cbiAgJ21vdXNlLXBhc3RlLWJ1dHRvbic6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuQ29weVBhc3RlLFxuICAgIG51bGwsXG4gICAgW251bGwsIDAsIDEsIDIsIDMsIDQsIDUsIDZdLFxuICAgIGBNb3VzZSBwYXN0ZSBidXR0b24sIG9yIG51bGwgdG8gYXV0b2RldGVjdC5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBGb3IgYXV0b2RldGVjdCwgd2UnbGwgdXNlIHRoZSBtaWRkbGUgbW91c2UgYnV0dG9uIGZvciBub24tWDExIGAgK1xuICAgICAgYHBsYXRmb3JtcyAoaW5jbHVkaW5nIENocm9tZSBPUykuIE9uIFgxMSwgd2UnbGwgdXNlIHRoZSByaWdodCBtb3VzZSBgICtcbiAgICAgIGBidXR0b24gKHNpbmNlIHRoZSBuYXRpdmUgd2luZG93IG1hbmFnZXIgc2hvdWxkIHBhc3RlIHZpYSB0aGUgbWlkZGxlIGAgK1xuICAgICAgYG1vdXNlIGJ1dHRvbikuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgMCA9PSBsZWZ0IChwcmltYXJ5KSBidXR0b24uXFxuYCArXG4gICAgICBgMSA9PSBtaWRkbGUgKGF1eGlsaWFyeSkgYnV0dG9uLlxcbmAgK1xuICAgICAgYDIgPT0gcmlnaHQgKHNlY29uZGFyeSkgYnV0dG9uLlxcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYFRoaXMgb3B0aW9uIGlzIGluZGVwZW5kZW50IG9mIHRoZSBzZXR0aW5nIGZvciByaWdodC1jbGljayBwYXN0ZS5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBOb3RlOiBUaGlzIHdpbGwgaGFuZGxlIGxlZnQgJiByaWdodCBoYW5kZWQgbWljZSBjb3JyZWN0bHkuYCxcbiAgKSxcblxuICAnd29yZC1icmVhay1tYXRjaC1sZWZ0JzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5Db3B5UGFzdGUsXG4gICAgJ1teXFxcXHNcXFxcW1xcXFxdKCl7fTw+XCJcXCdcXFxcXiFAIyQlJiosOzpgXScsXG4gICAgJ3N0cmluZycsXG4gICAgYFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBoYWx0IG1hdGNoaW5nIHRvIHRoZSBsZWZ0IChzdGFydCkgb2YgYSBgICtcbiAgICAgIGBzZWxlY3Rpb24uXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgTm9ybWFsbHkgdGhpcyBpcyBhIGNoYXJhY3RlciBjbGFzcyB0byByZWplY3Qgc3BlY2lmaWMgY2hhcmFjdGVycy5cXG5gICtcbiAgICAgIGBXZSBhbGxvdyBcIn5cIiBhbmQgXCIuXCIgYnkgZGVmYXVsdCBhcyBwYXRocyBmcmVxdWVudGx5IHN0YXJ0IHdpdGggdGhvc2UuYCxcbiAgKSxcblxuICAnd29yZC1icmVhay1tYXRjaC1yaWdodCc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuQ29weVBhc3RlLFxuICAgICdbXlxcXFxzXFxcXFtcXFxcXSgpe308PlwiXFwnXFxcXF4hQCMkJSYqLDs6fi5gXScsXG4gICAgJ3N0cmluZycsXG4gICAgYFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBoYWx0IG1hdGNoaW5nIHRvIHRoZSByaWdodCAoZW5kKSBvZiBhIGAgK1xuICAgICAgYHNlbGVjdGlvbi5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBOb3JtYWxseSB0aGlzIGlzIGEgY2hhcmFjdGVyIGNsYXNzIHRvIHJlamVjdCBzcGVjaWZpYyBjaGFyYWN0ZXJzLmAsXG4gICksXG5cbiAgJ3dvcmQtYnJlYWstbWF0Y2gtbWlkZGxlJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5Db3B5UGFzdGUsXG4gICAgJ1teXFxcXHNcXFxcW1xcXFxdKCl7fTw+XCJcXCdcXFxcXl0qJyxcbiAgICAnc3RyaW5nJyxcbiAgICBgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFsbCB0aGUgY2hhcmFjdGVycyBpbiB0aGUgbWlkZGxlLlxcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYE5vcm1hbGx5IHRoaXMgaXMgYSBjaGFyYWN0ZXIgY2xhc3MgdG8gcmVqZWN0IHNwZWNpZmljIGNoYXJhY3RlcnMuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgVXNlZCB0byBleHBhbmQgdGhlIHNlbGVjdGlvbiBzdXJyb3VuZGluZyB0aGUgc3RhcnRpbmcgcG9pbnQuYCxcbiAgKSxcblxuICAncGFnZS1rZXlzLXNjcm9sbCc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuS2V5Ym9hcmQsXG4gICAgZmFsc2UsXG4gICAgJ2Jvb2wnLFxuICAgIGBJZiB0cnVlLCBQYWdlIFVwL1BhZ2UgRG93biBjb250cm9scyB0aGUgdGVybWluYWwgc2Nyb2xsYmFyIGFuZCBgICtcbiAgICAgIGBTaGlmdC1QYWdlIFVwL1NoaWZ0LVBhZ2UgRG93biBhcmUgc2VudCB0byB0aGUgcmVtb3RlIGhvc3QuIElmIGZhbHNlLCBgICtcbiAgICAgIGB0aGVuIFBhZ2UgVXAvUGFnZSBEb3duIGFyZSBzZW50IHRvIHRoZSByZW1vdGUgaG9zdCBhbmQgU2hpZnQtUGFnZSBVcC9gICtcbiAgICAgIGBTaGlmdC1QYWdlIERvd24gc2Nyb2xscy5gLFxuICApLFxuXG4gICdwYXNzLWFsdC1udW1iZXInOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLktleWJvYXJkLFxuICAgIG51bGwsXG4gICAgJ3RyaXN0YXRlJyxcbiAgICBgV2hldGhlciBBbHQtMS4uOSBpcyBwYXNzZWQgdG8gdGhlIGJyb3dzZXIuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgVGhpcyBpcyBoYW5keSB3aGVuIHJ1bm5pbmcgaHRlcm0gaW4gYSBicm93c2VyIHRhYiwgc28gdGhhdCB5b3UgZG9uJ3QgYCArXG4gICAgICBgbG9zZSBDaHJvbWUncyBcInN3aXRjaCB0byB0YWJcIiBrZXlib2FyZCBhY2NlbGVyYXRvcnMuIFdoZW4gbm90IHJ1bm5pbmcgYCArXG4gICAgICBgaW4gYSB0YWIgaXQncyBiZXR0ZXIgdG8gc2VuZCB0aGVzZSBrZXlzIHRvIHRoZSBob3N0IHNvIHRoZXkgY2FuIGJlIGAgK1xuICAgICAgYHVzZWQgaW4gdmltIG9yIGVtYWNzLlxcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYElmIHRydWUsIEFsdC0xLi45IHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgYnJvd3Nlci4gSWYgZmFsc2UsIEFsdC0xLi45IGAgK1xuICAgICAgYHdpbGwgYmUgc2VudCB0byB0aGUgaG9zdC4gSWYgbnVsbCwgYXV0b2RldGVjdCBiYXNlZCBvbiBicm93c2VyIGAgK1xuICAgICAgYHBsYXRmb3JtIGFuZCB3aW5kb3cgdHlwZS5gLFxuICApLFxuXG4gICdwYXNzLWN0cmwtbnVtYmVyJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5LZXlib2FyZCxcbiAgICBudWxsLFxuICAgICd0cmlzdGF0ZScsXG4gICAgYFdoZXRoZXIgQ3RybC0xLi45IGlzIHBhc3NlZCB0byB0aGUgYnJvd3Nlci5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBUaGlzIGlzIGhhbmR5IHdoZW4gcnVubmluZyBodGVybSBpbiBhIGJyb3dzZXIgdGFiLCBzbyB0aGF0IHlvdSBkb24ndCBgICtcbiAgICAgIGBsb3NlIENocm9tZSdzIFwic3dpdGNoIHRvIHRhYlwiIGtleWJvYXJkIGFjY2VsZXJhdG9ycy4gV2hlbiBub3QgcnVubmluZyBgICtcbiAgICAgIGBpbiBhIHRhYiBpdCdzIGJldHRlciB0byBzZW5kIHRoZXNlIGtleXMgdG8gdGhlIGhvc3Qgc28gdGhleSBjYW4gYmUgYCArXG4gICAgICBgdXNlZCBpbiB2aW0gb3IgZW1hY3MuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgSWYgdHJ1ZSwgQ3RybC0xLi45IHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgYnJvd3Nlci4gSWYgZmFsc2UsIGAgK1xuICAgICAgYEN0cmwtMS4uOSB3aWxsIGJlIHNlbnQgdG8gdGhlIGhvc3QuIElmIG51bGwsIGF1dG9kZXRlY3QgYmFzZWQgb24gYCArXG4gICAgICBgYnJvd3NlciBwbGF0Zm9ybSBhbmQgd2luZG93IHR5cGUuYCxcbiAgKSxcblxuICAncGFzcy1tZXRhLW51bWJlcic6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuS2V5Ym9hcmQsXG4gICAgbnVsbCxcbiAgICAndHJpc3RhdGUnLFxuICAgIGBXaGV0aGVyIE1ldGEtMS4uOSBpcyBwYXNzZWQgdG8gdGhlIGJyb3dzZXIuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgVGhpcyBpcyBoYW5keSB3aGVuIHJ1bm5pbmcgaHRlcm0gaW4gYSBicm93c2VyIHRhYiwgc28gdGhhdCB5b3UgZG9uJ3QgYCArXG4gICAgICBgbG9zZSBDaHJvbWUncyBcInN3aXRjaCB0byB0YWJcIiBrZXlib2FyZCBhY2NlbGVyYXRvcnMuIFdoZW4gbm90IHJ1bm5pbmcgYCArXG4gICAgICBgaW4gYSB0YWIgaXQncyBiZXR0ZXIgdG8gc2VuZCB0aGVzZSBrZXlzIHRvIHRoZSBob3N0IHNvIHRoZXkgY2FuIGJlIGAgK1xuICAgICAgYHVzZWQgaW4gdmltIG9yIGVtYWNzLlxcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYElmIHRydWUsIE1ldGEtMS4uOSB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIGJyb3dzZXIuIElmIGZhbHNlLCBgICtcbiAgICAgIGBNZXRhLTEuLjkgd2lsbCBiZSBzZW50IHRvIHRoZSBob3N0LiBJZiBudWxsLCBhdXRvZGV0ZWN0IGJhc2VkIG9uIGAgK1xuICAgICAgYGJyb3dzZXIgcGxhdGZvcm0gYW5kIHdpbmRvdyB0eXBlLmAsXG4gICksXG5cbiAgJ3Bhc3MtbWV0YS12JzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5LZXlib2FyZCxcbiAgICB0cnVlLFxuICAgICdib29sJyxcbiAgICBgV2hldGhlciBNZXRhLVYgZ2V0cyBwYXNzZWQgdG8gaG9zdC5gLFxuICApLFxuXG4gICdwYXN0ZS1vbi1kcm9wJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5Db3B5UGFzdGUsXG4gICAgdHJ1ZSxcbiAgICAnYm9vbCcsXG4gICAgYElmIHRydWUsIERyYWcgYW5kIGRyb3BwZWQgdGV4dCB3aWxsIHBhc3RlIGludG8gdGVybWluYWwuXFxuYCArXG4gICAgICBgSWYgZmFsc2UsIGRyb3BwZWQgdGV4dCB3aWxsIGJlIGlnbm9yZWQuYCxcbiAgKSxcblxuICAncmVjZWl2ZS1lbmNvZGluZyc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuRW5jb2RpbmcsXG4gICAgJ3V0Zi04JyxcbiAgICBbJ3V0Zi04JywgJ3JhdyddLFxuICAgIGBTZXQgdGhlIGV4cGVjdGVkIGVuY29kaW5nIGZvciBkYXRhIHJlY2VpdmVkIGZyb20gdGhlIGhvc3QuXFxuYCArXG4gICAgICBgSWYgdGhlIGVuY29kaW5ncyBkbyBub3QgbWF0Y2gsIHZpc3VhbCBidWdzIGFyZSBsaWtlbHkgdG8gYmUgYCArXG4gICAgICBgb2JzZXJ2ZWQuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgVmFsaWQgdmFsdWVzIGFyZSAndXRmLTgnIGFuZCAncmF3Jy5gLFxuICApLFxuXG4gICdzY3JvbGwtb24ta2V5c3Ryb2tlJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5TY3JvbGxpbmcsXG4gICAgdHJ1ZSxcbiAgICAnYm9vbCcsXG4gICAgYFdoZXRoZXIgdG8gc2Nyb2xsIHRvIHRoZSBib3R0b20gb24gYW55IGtleXN0cm9rZS5gLFxuICApLFxuXG4gICdzY3JvbGwtb24tb3V0cHV0JzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5TY3JvbGxpbmcsXG4gICAgZmFsc2UsXG4gICAgJ2Jvb2wnLFxuICAgIGBXaGV0aGVyIHRvIHNjcm9sbCB0byB0aGUgYm90dG9tIG9uIHRlcm1pbmFsIG91dHB1dC5gLFxuICApLFxuXG4gICdzY3JvbGxiYXItdmlzaWJsZSc6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuU2Nyb2xsaW5nLFxuICAgIHRydWUsXG4gICAgJ2Jvb2wnLFxuICAgIGBUaGUgdmVydGljYWwgc2Nyb2xsYmFyIG1vZGUuYCxcbiAgKSxcblxuICAnc2Nyb2xsLXdoZWVsLW1heS1zZW5kLWFycm93LWtleXMnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLlNjcm9sbGluZyxcbiAgICBmYWxzZSxcbiAgICAnYm9vbCcsXG4gICAgYFdoZW4gdXNpbmcgdGhlIGFsdGVybmF0aXZlIHNjcmVlbiBidWZmZXIsIGFuZCBERUNDS00gKEFwcGxpY2F0aW9uIGAgK1xuICAgICAgYEN1cnNvciBLZXlzKSBpcyBhY3RpdmUsIG1vdXNlIHdoZWVsIHNjcm9sbCBldmVudHMgd2lsbCBlbXVsYXRlIGFycm93IGAgK1xuICAgICAgYGtleXMuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgSXQgY2FuIGJlIHRlbXBvcmFyaWx5IGRpc2FibGVkIGJ5IGhvbGRpbmcgdGhlIFNoaWZ0IGtleS5cXG5gICtcbiAgICAgIGBcXG5gICtcbiAgICAgIGBUaGlzIGZyZXF1ZW50bHkgY29tZXMgdXAgd2hlbiB1c2luZyBwYWdlcnMgKGxlc3MpIG9yIHJlYWRpbmcgbWFuIGAgK1xuICAgICAgYHBhZ2VzIG9yIHRleHQgZWRpdG9ycyAodmkvbmFubykgb3IgdXNpbmcgc2NyZWVuL3RtdXguYCxcbiAgKSxcblxuICAnc2Nyb2xsLXdoZWVsLW1vdmUtbXVsdGlwbGllcic6IGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmRlZmluZVByZWZfKFxuICAgIGh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLmNhdGVnb3JpZXMuU2Nyb2xsaW5nLFxuICAgIDEsXG4gICAgJ2ludCcsXG4gICAgYFRoZSBtdWx0aXBsaWVyIGZvciBzY3JvbGwgd2hlZWwgZXZlbnRzIHdoZW4gbWVhc3VyZWQgaW4gcGl4ZWxzLlxcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYEFsdGVycyBob3cgZmFzdCB0aGUgcGFnZSBzY3JvbGxzLmAsXG4gICksXG5cbiAgJ3NlbmQtZW5jb2RpbmcnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkVuY29kaW5nLFxuICAgICd1dGYtOCcsXG4gICAgWyd1dGYtOCcsICdyYXcnXSxcbiAgICBgU2V0IHRoZSBlbmNvZGluZyBmb3IgZGF0YSBzZW50IHRvIGhvc3QuYCxcbiAgKSxcblxuICAndGVybWluYWwtZW5jb2RpbmcnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkVuY29kaW5nLFxuICAgICd1dGYtOCcsXG4gICAgWydpc28tMjAyMicsICd1dGYtOCcsICd1dGYtOC1sb2NrZWQnXSxcbiAgICBgVGhlIGRlZmF1bHQgdGVybWluYWwgZW5jb2RpbmcgKERPQ1MpLlxcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYElTTy0yMDIyIGVuYWJsZXMgY2hhcmFjdGVyIG1hcCB0cmFuc2xhdGlvbnMgKGxpa2UgZ3JhcGhpY3MgbWFwcykuXFxuYCArXG4gICAgICBgVVRGLTggZGlzYWJsZXMgc3VwcG9ydCBmb3IgdGhvc2UuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgVGhlIGxvY2tlZCB2YXJpYW50IG1lYW5zIHRoZSBlbmNvZGluZyBjYW5ub3QgYmUgY2hhbmdlZCBhdCBydW50aW1lIGAgK1xuICAgICAgYHZpYSB0ZXJtaW5hbCBlc2NhcGUgc2VxdWVuY2VzLlxcbmAgK1xuICAgICAgYFxcbmAgK1xuICAgICAgYFlvdSBzaG91bGQgc3RpY2sgd2l0aCBVVEYtOCB1bmxlc3MgeW91IG5vdGljZSBicm9rZW4gcmVuZGVyaW5nIHdpdGggYCArXG4gICAgICBgbGVnYWN5IGFwcGxpY2F0aW9ucy5gLFxuICApLFxuXG4gICdzaGlmdC1pbnNlcnQtcGFzdGUnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLktleWJvYXJkLFxuICAgIHRydWUsXG4gICAgJ2Jvb2wnLFxuICAgIGBXaGV0aGVyIFNoaWZ0LUluc2VydCBpcyB1c2VkIGZvciBwYXN0aW5nIG9yIGlzIHNlbnQgdG8gdGhlIHJlbW90ZSBob3N0LmAsXG4gICksXG5cbiAgJ3VzZXItY3NzJzogaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuZGVmaW5lUHJlZl8oXG4gICAgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY2F0ZWdvcmllcy5BcHBlYXJhbmNlLFxuICAgICcnLFxuICAgICd1cmwnLFxuICAgIGBVUkwgb2YgdXNlciBzdHlsZXNoZWV0IHRvIGluY2x1ZGUgaW4gdGhlIHRlcm1pbmFsIGRvY3VtZW50LmAsXG4gICksXG5cbiAgJ3VzZXItY3NzLXRleHQnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkFwcGVhcmFuY2UsXG4gICAgJycsXG4gICAgJ211bHRpbGluZS1zdHJpbmcnLFxuICAgIGBDdXN0b20gQ1NTIHRleHQgZm9yIHN0eWxpbmcgdGhlIHRlcm1pbmFsLmAsXG4gICksXG5cbiAgJ2FsbG93LWltYWdlcy1pbmxpbmUnOiBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5kZWZpbmVQcmVmXyhcbiAgICBodGVybS5QcmVmZXJlbmNlTWFuYWdlci5jYXRlZ29yaWVzLkV4dGVuc2lvbnMsXG4gICAgbnVsbCxcbiAgICAndHJpc3RhdGUnLFxuICAgIGBXaGV0aGVyIHRvIGFsbG93IHRoZSByZW1vdGUgaG9zdCB0byBkaXNwbGF5IGltYWdlcyBpbiB0aGUgdGVybWluYWwuXFxuYCArXG4gICAgICBgXFxuYCArXG4gICAgICBgQnkgZGVmYXVsdCwgd2UgcHJvbXB0IHVudGlsIGEgY2hvaWNlIGlzIG1hZGUuYCxcbiAgKSxcbn07XG5cbmh0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoXG4gIGxpYi5QcmVmZXJlbmNlTWFuYWdlci5wcm90b3R5cGUsXG4pO1xuaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIuY29uc3RydWN0b3IgPSBodGVybS5QcmVmZXJlbmNlTWFuYWdlcjtcbi8vIFNPVVJDRSBGSUxFOiBodGVybS9qcy9odGVybV9wdWJzdWIuanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbi8qKlxuICogVXRpbGl0eSBjbGFzcyB1c2VkIHRvIGFkZCBwdWJsaXNoL3N1YnNjcmliZS91bnN1YnNjcmliZSBmdW5jdGlvbmFsaXR5IHRvXG4gKiBhbiBleGlzdGluZyBvYmplY3QuXG4gKi9cbmh0ZXJtLlB1YlN1YiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm9ic2VydmVyc18gPSB7fTtcbn07XG5cbi8qKlxuICogQWRkIHB1Ymxpc2gsIHN1YnNjcmliZSwgYW5kIHVuc3Vic2NyaWJlIG1ldGhvZHMgdG8gYW4gZXhpc3Rpbmcgb2JqZWN0LlxuICpcbiAqIE5vIG90aGVyIHByb3BlcnRpZXMgb2YgdGhlIG9iamVjdCBhcmUgdG91Y2hlZCwgc28gdGhlcmUgaXMgbm8gbmVlZCB0b1xuICogd29ycnkgYWJvdXQgY2xhc2hpbmcgcHJpdmF0ZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBhZGQgdGhpcyBiZWhhdmlvciB0by5cbiAqL1xuaHRlcm0uUHViU3ViLmFkZEJlaGF2aW9yID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciBwdWJzdWIgPSBuZXcgaHRlcm0uUHViU3ViKCk7XG4gIGZvciAodmFyIG0gaW4gaHRlcm0uUHViU3ViLnByb3RvdHlwZSkge1xuICAgIG9ialttXSA9IGh0ZXJtLlB1YlN1Yi5wcm90b3R5cGVbbV0uYmluZChwdWJzdWIpO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byBiZSBub3RpZmllZCBvZiBtZXNzYWdlcyBhYm91dCBhIHN1YmplY3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN1YmplY3QgVGhlIHN1YmplY3QgdG8gc3Vic2NyaWJlIHRvLlxuICogQHBhcmFtIHtmdW5jdGlvbihPYmplY3QpfSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gaW52b2tlIGZvciBub3RpZmljYXRpb25zLlxuICovXG5odGVybS5QdWJTdWIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uKHN1YmplY3QsIGNhbGxiYWNrKSB7XG4gIGlmICghKHN1YmplY3QgaW4gdGhpcy5vYnNlcnZlcnNfKSkgdGhpcy5vYnNlcnZlcnNfW3N1YmplY3RdID0gW107XG5cbiAgdGhpcy5vYnNlcnZlcnNfW3N1YmplY3RdLnB1c2goY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIGEgc3ViamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3ViamVjdCBUaGUgc3ViamVjdCB0byB1bnN1YnNjcmliZSBmcm9tLlxuICogQHBhcmFtIHtmdW5jdGlvbihPYmplY3QpfSBjYWxsYmFjayBBIGNhbGxiYWNrIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCB2aWFcbiAqICAgICBzdWJzY3JpYmUoKS5cbiAqL1xuaHRlcm0uUHViU3ViLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKHN1YmplY3QsIGNhbGxiYWNrKSB7XG4gIHZhciBsaXN0ID0gdGhpcy5vYnNlcnZlcnNfW3N1YmplY3RdO1xuICBpZiAoIWxpc3QpIHRocm93ICdJbnZhbGlkIHN1YmplY3Q6ICcgKyBzdWJqZWN0O1xuXG4gIHZhciBpID0gbGlzdC5pbmRleE9mKGNhbGxiYWNrKTtcbiAgaWYgKGkgPCAwKSB0aHJvdyAnTm90IHN1YnNjcmliZWQ6ICcgKyBzdWJqZWN0O1xuXG4gIGxpc3Quc3BsaWNlKGksIDEpO1xufTtcblxuLyoqXG4gKiBQdWJsaXNoIGEgbWVzc2FnZSBhYm91dCBhIHN1YmplY3QuXG4gKlxuICogU3Vic2NyaWJlcnMgKGFuZCB0aGUgb3B0aW9uYWwgZmluYWwgY2FsbGJhY2spIGFyZSBpbnZva2VkIGFzeW5jaHJvbm91c2x5LlxuICogVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gYmVmb3JlIGFueW9uZSBpcyBhY3R1YWxseSBub3RpZmllZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3ViamVjdCBUaGUgc3ViamVjdCB0byBwdWJsaXNoIGFib3V0LlxuICogQHBhcmFtIHtPYmplY3R9IGUgQW4gYXJiaXRyYXJ5IG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBub3RpZmljYXRpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKE9iamVjdCl9IG9wdF9sYXN0Q2FsbGJhY2sgQW4gb3B0aW9uYWwgZnVuY3Rpb24gdG8gY2FsbCBhZnRlclxuICogICAgIGFsbCBzdWJzY3JpYmVycyBoYXZlIGJlZW4gbm90aWZpZWQuXG4gKi9cbmh0ZXJtLlB1YlN1Yi5wcm90b3R5cGUucHVibGlzaCA9IGZ1bmN0aW9uKHN1YmplY3QsIGUsIG9wdF9sYXN0Q2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gbm90aWZ5TGlzdChpKSB7XG4gICAgLy8gU2V0IHRoaXMgdGltZW91dCBiZWZvcmUgaW52b2tpbmcgdGhlIGNhbGxiYWNrLCBzbyB3ZSBkb24ndCBoYXZlIHRvXG4gICAgLy8gY29uY2VybiBvdXJzZWx2ZXMgd2l0aCBleGNlcHRpb25zLlxuICAgIGlmIChpIDwgbGlzdC5sZW5ndGggLSAxKSBzZXRUaW1lb3V0KG5vdGlmeUxpc3QsIDAsIGkgKyAxKTtcblxuICAgIGxpc3RbaV0oZSk7XG4gIH1cblxuICB2YXIgbGlzdCA9IHRoaXMub2JzZXJ2ZXJzX1tzdWJqZWN0XTtcbiAgaWYgKGxpc3QpIHtcbiAgICAvLyBDb3B5IHRoZSBsaXN0LCBpbiBjYXNlIGl0IGNoYW5nZXMgd2hpbGUgd2UncmUgbm90aWZ5aW5nLlxuICAgIGxpc3QgPSBbXS5jb25jYXQobGlzdCk7XG4gIH1cblxuICBpZiAob3B0X2xhc3RDYWxsYmFjaykge1xuICAgIGlmIChsaXN0KSB7XG4gICAgICBsaXN0LnB1c2gob3B0X2xhc3RDYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3QgPSBbb3B0X2xhc3RDYWxsYmFja107XG4gICAgfVxuICB9XG5cbiAgaWYgKGxpc3QpIHNldFRpbWVvdXQobm90aWZ5TGlzdCwgMCwgMCk7XG59O1xuLy8gU09VUkNFIEZJTEU6IGh0ZXJtL2pzL2h0ZXJtX3NjcmVlbi5qc1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBPUyBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxubGliLnJ0ZGVwKFxuICAnbGliLmYnLFxuICAnbGliLndjJyxcbiAgJ2h0ZXJtLlJvd0NvbCcsXG4gICdodGVybS5TaXplJyxcbiAgJ2h0ZXJtLlRleHRBdHRyaWJ1dGVzJyxcbik7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBzaW5nbGUgdGVybWluYWwgc2NyZWVuIGZ1bGwgb2YgdGV4dC5cbiAqXG4gKiBJdCBtYWludGFpbnMgdGhlIGN1cnJlbnQgY3Vyc29yIHBvc2l0aW9uIGFuZCBoYXMgYmFzaWMgbWV0aG9kcyBmb3IgdGV4dFxuICogaW5zZXJ0IGFuZCBvdmVyd3JpdGUsIGFuZCBhZGRpbmcgb3IgcmVtb3Zpbmcgcm93cyBmcm9tIHRoZSBzY3JlZW4uXG4gKlxuICogVGhpcyBjbGFzcyBoYXMgbm8ga25vd2xlZGdlIG9mIHRoZSBzY3JvbGxiYWNrIGJ1ZmZlci5cbiAqXG4gKiBUaGUgbnVtYmVyIG9mIHJvd3Mgb24gdGhlIHNjcmVlbiBpcyBkZXRlcm1pbmVkIG9ubHkgYnkgdGhlIG51bWJlciBvZiByb3dzXG4gKiB0aGF0IHRoZSBjYWxsZXIgaW5zZXJ0cyBpbnRvIHRoZSBzY3JlZW4uICBJZiBhIGNhbGxlciB3YW50cyB0byBlbnN1cmUgYVxuICogY29uc3RhbnQgbnVtYmVyIG9mIHJvd3Mgb24gdGhlIHNjcmVlbiwgaXQncyB0aGVpciByZXNwb25zaWJpbGl0eSB0byByZW1vdmUgYVxuICogcm93IGZvciBlYWNoIHJvdyBpbnNlcnRlZC5cbiAqXG4gKiBUaGUgc2NyZWVuIHdpZHRoLCBpbiBjb250cmFzdCwgaXMgZW5mb3JjZWQgbG9jYWxseS5cbiAqXG4gKlxuICogSW4gcHJhY3RpY2UuLi5cbiAqIC0gVGhlIGh0ZXJtLlRlcm1pbmFsIGNsYXNzIGhvbGRzIHR3byBodGVybS5TY3JlZW4gaW5zdGFuY2VzLiAgT25lIGZvciB0aGVcbiAqIHByaW1hcnkgc2NyZWVuIGFuZCBvbmUgZm9yIHRoZSBhbHRlcm5hdGUgc2NyZWVuLlxuICpcbiAqIC0gVGhlIGh0bWwuU2NyZWVuIGNsYXNzIG9ubHkgY2FyZXMgdGhhdCByb3dzIGFyZSBIVE1MRWxlbWVudHMuICBJbiB0aGVcbiAqIGxhcmdlciBjb250ZXh0IG9mIGh0ZXJtLCBob3dldmVyLCB0aGUgcm93cyBoYXBwZW4gdG8gYmUgZGlzcGxheWVkIGJ5IGFuXG4gKiBodGVybS5TY3JvbGxQb3J0IGFuZCBoYXZlIHRvIGZvbGxvdyBhIGZldyBydWxlcyBhcyBhIHJlc3VsdC4gIEVhY2hcbiAqIHJvdyBtdXN0IGJlIHJvb3RlZCBieSB0aGUgY3VzdG9tIEhUTUwgdGFnICd4LXJvdycsIGFuZCBlYWNoIG11c3QgaGF2ZSBhXG4gKiByb3dJbmRleCBwcm9wZXJ0eSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBpbmRleCBvZiB0aGUgcm93IGluIHRoZSBjb250ZXh0XG4gKiBvZiB0aGUgc2Nyb2xsYmFjayBidWZmZXIuICBUaGVzZSBpbnZhcmlhbnRzIGFyZSBlbmZvcmNlZCBieSBodGVybS5UZXJtaW5hbFxuICogYmVjYXVzZSB0aGF0IGlzIHRoZSBjbGFzcyB1c2luZyB0aGUgaHRlcm0uU2NyZWVuIGluIHRoZSBjb250ZXh0IG9mIGFuXG4gKiBodGVybS5TY3JvbGxQb3J0LlxuICovXG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHNjcmVlbiBpbnN0YW5jZS5cbiAqXG4gKiBUaGUgc2NyZWVuIGluaXRpYWxseSBoYXMgbm8gcm93cyBhbmQgYSBtYXhpbXVtIGNvbHVtbiBjb3VudCBvZiAwLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gb3B0X2NvbHVtbkNvdW50IFRoZSBtYXhpbXVtIG51bWJlciBvZiBjb2x1bW5zIGZvciB0aGlzXG4gKiAgICBzY3JlZW4uICBTZWUgaW5zZXJ0U3RyaW5nKCkgYW5kIG92ZXJ3cml0ZVN0cmluZygpIGZvciBpbmZvcm1hdGlvbiBhYm91dFxuICogICAgd2hhdCBoYXBwZW5zIHdoZW4gdG9vIG1hbnkgY2hhcmFjdGVycyBhcmUgYWRkZWQgdG9vIGEgcm93LiAgRGVmYXVsdHMgdG9cbiAqICAgIDAgaWYgbm90IHByb3ZpZGVkLlxuICovXG5odGVybS5TY3JlZW4gPSBmdW5jdGlvbihvcHRfY29sdW1uQ291bnQpIHtcbiAgLyoqXG4gICAqIFB1YmxpYywgcmVhZC1vbmx5IGFjY2VzcyB0byB0aGUgcm93cyBpbiB0aGlzIHNjcmVlbi5cbiAgICovXG4gIHRoaXMucm93c0FycmF5ID0gW107XG5cbiAgLy8gVGhlIG1heCBjb2x1bW4gd2lkdGggZm9yIHRoaXMgc2NyZWVuLlxuICB0aGlzLmNvbHVtbkNvdW50XyA9IG9wdF9jb2x1bW5Db3VudCB8fCA4MDtcblxuICAvLyBUaGUgY3VycmVudCBjb2xvciwgYm9sZCwgdW5kZXJsaW5lIGFuZCBibGluayBhdHRyaWJ1dGVzLlxuICB0aGlzLnRleHRBdHRyaWJ1dGVzID0gbmV3IGh0ZXJtLlRleHRBdHRyaWJ1dGVzKHdpbmRvdy5kb2N1bWVudCk7XG5cbiAgLy8gQ3VycmVudCB6ZXJvLWJhc2VkIGN1cnNvciBjb29yZGluYXRlcy5cbiAgdGhpcy5jdXJzb3JQb3NpdGlvbiA9IG5ldyBodGVybS5Sb3dDb2woMCwgMCk7XG5cbiAgLy8gU2F2ZWQgc3RhdGUgdXNlZCBieSBERUNTQyBhbmQgcmVsYXRlZCBzZXR0aW5ncy4gIFRoaXMgaXMgb25seSBmb3Igc2F2aW5nXG4gIC8vIGFuZCByZXN0b3Jpbmcgc3BlY2lmaWMgc3RhdGUsIG5vdCBmb3IgdGhlIGN1cnJlbnQvYWN0aXZlIHN0YXRlLlxuICB0aGlzLmN1cnNvclN0YXRlXyA9IG5ldyBodGVybS5TY3JlZW4uQ3Vyc29yU3RhdGUodGhpcyk7XG5cbiAgLy8gVGhlIG5vZGUgY29udGFpbmluZyB0aGUgcm93IHRoYXQgdGhlIGN1cnNvciBpcyBwb3NpdGlvbmVkIG9uLlxuICB0aGlzLmN1cnNvclJvd05vZGVfID0gbnVsbDtcblxuICAvLyBUaGUgbm9kZSBjb250YWluaW5nIHRoZSBzcGFuIG9mIHRleHQgdGhhdCB0aGUgY3Vyc29yIGlzIHBvc2l0aW9uZWQgb24uXG4gIHRoaXMuY3Vyc29yTm9kZV8gPSBudWxsO1xuXG4gIC8vIFRoZSBvZmZzZXQgaW4gY29sdW1uIHdpZHRoIGludG8gY3Vyc29yTm9kZV8gd2hlcmUgdGhlIGN1cnNvciBpcyBwb3NpdGlvbmVkLlxuICB0aGlzLmN1cnNvck9mZnNldF8gPSBudWxsO1xuXG4gIC8vIFJlZ2V4ZXMgZm9yIGV4cGFuZGluZyB3b3JkIHNlbGVjdGlvbnMuXG4gIHRoaXMud29yZEJyZWFrTWF0Y2hMZWZ0ID0gbnVsbDtcbiAgdGhpcy53b3JkQnJlYWtNYXRjaFJpZ2h0ID0gbnVsbDtcbiAgdGhpcy53b3JkQnJlYWtNYXRjaE1pZGRsZSA9IG51bGw7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgc2NyZWVuIHNpemUgYXMgYW4gaHRlcm0uU2l6ZSBvYmplY3QuXG4gKlxuICogQHJldHVybiB7aHRlcm0uU2l6ZX0gaHRlcm0uU2l6ZSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IG51bWJlclxuICogICAgIG9mIHJvd3MgYW5kIGNvbHVtbnMgaW4gdGhpcyBzY3JlZW4uXG4gKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IGh0ZXJtLlNpemUodGhpcy5jb2x1bW5Db3VudF8sIHRoaXMucm93c0FycmF5Lmxlbmd0aCk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgY3VycmVudCBudW1iZXIgb2Ygcm93cyBpbiB0aGlzIHNjcmVlbi5cbiAqXG4gKiBAcmV0dXJuIHtpbnRlZ2VyfSBUaGUgbnVtYmVyIG9mIHJvd3MgaW4gdGhpcyBzY3JlZW4uXG4gKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnJvd3NBcnJheS5sZW5ndGg7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgY3VycmVudCBudW1iZXIgb2YgY29sdW1ucyBpbiB0aGlzIHNjcmVlbi5cbiAqXG4gKiBAcmV0dXJuIHtpbnRlZ2VyfSBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgaW4gdGhpcyBzY3JlZW4uXG4gKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuZ2V0V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY29sdW1uQ291bnRfO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1heGltdW0gbnVtYmVyIG9mIGNvbHVtbnMgcGVyIHJvdy5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGNvdW50IFRoZSBtYXhpbXVtIG51bWJlciBvZiBjb2x1bW5zIHBlciByb3cuXG4gKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuc2V0Q29sdW1uQ291bnQgPSBmdW5jdGlvbihjb3VudCkge1xuICB0aGlzLmNvbHVtbkNvdW50XyA9IGNvdW50O1xuXG4gIGlmICh0aGlzLmN1cnNvclBvc2l0aW9uLmNvbHVtbiA+PSBjb3VudClcbiAgICB0aGlzLnNldEN1cnNvclBvc2l0aW9uKHRoaXMuY3Vyc29yUG9zaXRpb24ucm93LCBjb3VudCAtIDEpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGZpcnN0IHJvdyBmcm9tIHRoZSBzY3JlZW4gYW5kIHJldHVybiBpdC5cbiAqXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gVGhlIGZpcnN0IHJvdyBpbiB0aGlzIHNjcmVlbi5cbiAqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5zaGlmdFJvdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zaGlmdFJvd3MoMSlbMF07XG59O1xuXG4vKipcbiAqIFJlbW92ZSByb3dzIGZyb20gdGhlIHRvcCBvZiB0aGUgc2NyZWVuIGFuZCByZXR1cm4gdGhlbSBhcyBhbiBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGNvdW50IFRoZSBudW1iZXIgb2Ygcm93cyB0byByZW1vdmUuXG4gKiBAcmV0dXJuIHtBcnJheS48SFRNTEVsZW1lbnQ+fSBUaGUgc2VsZWN0ZWQgcm93cy5cbiAqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5zaGlmdFJvd3MgPSBmdW5jdGlvbihjb3VudCkge1xuICByZXR1cm4gdGhpcy5yb3dzQXJyYXkuc3BsaWNlKDAsIGNvdW50KTtcbn07XG5cbi8qKlxuICogSW5zZXJ0IGEgcm93IGF0IHRoZSB0b3Agb2YgdGhlIHNjcmVlbi5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByb3cgVGhlIHJvdyB0byBpbnNlcnQuXG4gKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUudW5zaGlmdFJvdyA9IGZ1bmN0aW9uKHJvdykge1xuICB0aGlzLnJvd3NBcnJheS5zcGxpY2UoMCwgMCwgcm93KTtcbn07XG5cbi8qKlxuICogSW5zZXJ0IHJvd3MgYXQgdGhlIHRvcCBvZiB0aGUgc2NyZWVuLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPEhUTUxFbGVtZW50Pn0gcm93cyBUaGUgcm93cyB0byBpbnNlcnQuXG4gKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUudW5zaGlmdFJvd3MgPSBmdW5jdGlvbihyb3dzKSB7XG4gIHRoaXMucm93c0FycmF5LnVuc2hpZnQuYXBwbHkodGhpcy5yb3dzQXJyYXksIHJvd3MpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGxhc3Qgcm93IGZyb20gdGhlIHNjcmVlbiBhbmQgcmV0dXJuIGl0LlxuICpcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBUaGUgbGFzdCByb3cgaW4gdGhpcyBzY3JlZW4uXG4gKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUucG9wUm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnBvcFJvd3MoMSlbMF07XG59O1xuXG4vKipcbiAqIFJlbW92ZSByb3dzIGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIGFuZCByZXR1cm4gdGhlbSBhcyBhbiBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGNvdW50IFRoZSBudW1iZXIgb2Ygcm93cyB0byByZW1vdmUuXG4gKiBAcmV0dXJuIHtBcnJheS48SFRNTEVsZW1lbnQ+fSBUaGUgc2VsZWN0ZWQgcm93cy5cbiAqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5wb3BSb3dzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgcmV0dXJuIHRoaXMucm93c0FycmF5LnNwbGljZSh0aGlzLnJvd3NBcnJheS5sZW5ndGggLSBjb3VudCwgY291bnQpO1xufTtcblxuLyoqXG4gKiBJbnNlcnQgYSByb3cgYXQgdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuLlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvdyBUaGUgcm93IHRvIGluc2VydC5cbiAqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5wdXNoUm93ID0gZnVuY3Rpb24ocm93KSB7XG4gIHRoaXMucm93c0FycmF5LnB1c2gocm93KTtcbn07XG5cbi8qKlxuICogSW5zZXJ0IHJvd3MgYXQgdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPEhUTUxFbGVtZW50Pn0gcm93cyBUaGUgcm93cyB0byBpbnNlcnQuXG4gKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUucHVzaFJvd3MgPSBmdW5jdGlvbihyb3dzKSB7XG4gIHJvd3MucHVzaC5hcHBseSh0aGlzLnJvd3NBcnJheSwgcm93cyk7XG59O1xuXG4vKipcbiAqIEluc2VydCBhIHJvdyBhdCB0aGUgc3BlY2lmaWVkIHJvdyBvZiB0aGUgc2NyZWVuLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gaW5kZXggVGhlIGluZGV4IHRvIGluc2VydCB0aGUgcm93LlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm93IFRoZSByb3cgdG8gaW5zZXJ0LlxuICovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLmluc2VydFJvdyA9IGZ1bmN0aW9uKGluZGV4LCByb3cpIHtcbiAgdGhpcy5yb3dzQXJyYXkuc3BsaWNlKGluZGV4LCAwLCByb3cpO1xufTtcblxuLyoqXG4gKiBJbnNlcnQgcm93cyBhdCB0aGUgc3BlY2lmaWVkIHJvdyBvZiB0aGUgc2NyZWVuLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gaW5kZXggVGhlIGluZGV4IHRvIGluc2VydCB0aGUgcm93cy5cbiAqIEBwYXJhbSB7QXJyYXkuPEhUTUxFbGVtZW50Pn0gcm93cyBUaGUgcm93cyB0byBpbnNlcnQuXG4gKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuaW5zZXJ0Um93cyA9IGZ1bmN0aW9uKGluZGV4LCByb3dzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucm93c0FycmF5LnNwbGljZShpbmRleCArIGksIDAsIHJvd3NbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIHJvdyBmcm9tIHRoZSBzY3JlZW4gYW5kIHJldHVybiBpdC5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgcm93IHRvIHJlbW92ZS5cbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBUaGUgc2VsZWN0ZWQgcm93LlxuICovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLnJlbW92ZVJvdyA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gIHJldHVybiB0aGlzLnJvd3NBcnJheS5zcGxpY2UoaW5kZXgsIDEpWzBdO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgcm93cyBmcm9tIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiBhbmQgcmV0dXJuIHRoZW0gYXMgYW4gYXJyYXkuXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyfSBpbmRleCBUaGUgaW5kZXggdG8gc3RhcnQgcmVtb3Zpbmcgcm93cy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gY291bnQgVGhlIG51bWJlciBvZiByb3dzIHRvIHJlbW92ZS5cbiAqIEByZXR1cm4ge0FycmF5LjxIVE1MRWxlbWVudD59IFRoZSBzZWxlY3RlZCByb3dzLlxuICovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLnJlbW92ZVJvd3MgPSBmdW5jdGlvbihpbmRleCwgY291bnQpIHtcbiAgcmV0dXJuIHRoaXMucm93c0FycmF5LnNwbGljZShpbmRleCwgY291bnQpO1xufTtcblxuLyoqXG4gKiBJbnZhbGlkYXRlIHRoZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvbi5cbiAqXG4gKiBUaGlzIHNldHMgdGhpcy5jdXJzb3JQb3NpdGlvbiB0byAoMCwgMCkgYW5kIGNsZWFycyBvdXQgc29tZSBpbnRlcm5hbFxuICogZGF0YS5cbiAqXG4gKiBBdHRlbXB0aW5nIHRvIGluc2VydCBvciBvdmVyd3JpdGUgdGV4dCB3aGlsZSB0aGUgY3Vyc29yIHBvc2l0aW9uIGlzIGludmFsaWRcbiAqIHdpbGwgcmFpc2UgYW4gb2JzY3VyZSBleGNlcHRpb24uXG4gKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuaW52YWxpZGF0ZUN1cnNvclBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY3Vyc29yUG9zaXRpb24ubW92ZSgwLCAwKTtcbiAgdGhpcy5jdXJzb3JSb3dOb2RlXyA9IG51bGw7XG4gIHRoaXMuY3Vyc29yTm9kZV8gPSBudWxsO1xuICB0aGlzLmN1cnNvck9mZnNldF8gPSBudWxsO1xufTtcblxuLyoqXG4gKiBDbGVhciB0aGUgY29udGVudHMgb2YgdGhlIGN1cnNvciByb3cuXG4gKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuY2xlYXJDdXJzb3JSb3cgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jdXJzb3JSb3dOb2RlXy5pbm5lckhUTUwgPSAnJztcbiAgdGhpcy5jdXJzb3JSb3dOb2RlXy5yZW1vdmVBdHRyaWJ1dGUoJ2xpbmUtb3ZlcmZsb3cnKTtcbiAgdGhpcy5jdXJzb3JPZmZzZXRfID0gMDtcbiAgdGhpcy5jdXJzb3JQb3NpdGlvbi5jb2x1bW4gPSAwO1xuICB0aGlzLmN1cnNvclBvc2l0aW9uLm92ZXJmbG93ID0gZmFsc2U7XG5cbiAgdmFyIHRleHQ7XG4gIGlmICh0aGlzLnRleHRBdHRyaWJ1dGVzLmlzRGVmYXVsdCgpKSB7XG4gICAgdGV4dCA9ICcnO1xuICB9IGVsc2Uge1xuICAgIHRleHQgPSBsaWIuZi5nZXRXaGl0ZXNwYWNlKHRoaXMuY29sdW1uQ291bnRfKTtcbiAgfVxuXG4gIC8vIFdlIHNob3VsZG4ndCBob25vciBpbnZlcnNlIGNvbG9ycyB3aGVuIGNsZWFyaW5nIGFuIGFyZWEsIHRvIG1hdGNoXG4gIC8vIHh0ZXJtJ3MgYmFjayBjb2xvciBlcmFzZSBiZWhhdmlvci5cbiAgdmFyIGludmVyc2UgPSB0aGlzLnRleHRBdHRyaWJ1dGVzLmludmVyc2U7XG4gIHRoaXMudGV4dEF0dHJpYnV0ZXMuaW52ZXJzZSA9IGZhbHNlO1xuICB0aGlzLnRleHRBdHRyaWJ1dGVzLnN5bmNDb2xvcnMoKTtcblxuICB2YXIgbm9kZSA9IHRoaXMudGV4dEF0dHJpYnV0ZXMuY3JlYXRlQ29udGFpbmVyKHRleHQpO1xuICB0aGlzLmN1cnNvclJvd05vZGVfLmFwcGVuZENoaWxkKG5vZGUpO1xuICB0aGlzLmN1cnNvck5vZGVfID0gbm9kZTtcblxuICB0aGlzLnRleHRBdHRyaWJ1dGVzLmludmVyc2UgPSBpbnZlcnNlO1xuICB0aGlzLnRleHRBdHRyaWJ1dGVzLnN5bmNDb2xvcnMoKTtcbn07XG5cbi8qKlxuICogTWFyayB0aGUgY3VycmVudCByb3cgYXMgaGF2aW5nIG92ZXJmbG93ZWQgdG8gdGhlIG5leHQgbGluZS5cbiAqXG4gKiBUaGUgbGluZSBvdmVyZmxvdyBzdGF0ZSBpcyB1c2VkIHdoZW4gY29udmVydGluZyBhIHJhbmdlIG9mIHJvd3MgaW50byB0ZXh0LlxuICogSXQgbWFrZXMgaXQgcG9zc2libGUgdG8gcmVjb21iaW5lIHR3byBvciBtb3JlIG92ZXJmbG93IHRlcm1pbmFsIHJvd3MgaW50b1xuICogYSBzaW5nbGUgbGluZS5cbiAqXG4gKiBUaGlzIGlzIGRpc3RpbmN0IGZyb20gdGhlIGN1cnNvciBiZWluZyBpbiB0aGUgb3ZlcmZsb3cgc3RhdGUuICBDdXJzb3JcbiAqIG92ZXJmbG93IGluZGljYXRlcyB0aGF0IHByaW50aW5nIGF0IHRoZSBjdXJzb3IgcG9zaXRpb24gd2lsbCBjb21taXQgYVxuICogbGluZSBvdmVyZmxvdywgdW5sZXNzIGl0IGlzIHByZWNlZGVkIGJ5IGEgcmVwb3NpdGlvbmluZyBvZiB0aGUgY3Vyc29yXG4gKiB0byBhIG5vbi1vdmVyZmxvdyBzdGF0ZS5cbiAqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5jb21taXRMaW5lT3ZlcmZsb3cgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jdXJzb3JSb3dOb2RlXy5zZXRBdHRyaWJ1dGUoJ2xpbmUtb3ZlcmZsb3cnLCB0cnVlKTtcbn07XG5cbi8qKlxuICogUmVsb2NhdGUgdGhlIGN1cnNvciB0byBhIGdpdmUgcm93IGFuZCBjb2x1bW4uXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyfSByb3cgVGhlIHplcm8gYmFzZWQgcm93LlxuICogQHBhcmFtIHtpbnRlZ2VyfSBjb2x1bW4gVGhlIHplcm8gYmFzZWQgY29sdW1uLlxuICovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLnNldEN1cnNvclBvc2l0aW9uID0gZnVuY3Rpb24ocm93LCBjb2x1bW4pIHtcbiAgaWYgKCF0aGlzLnJvd3NBcnJheS5sZW5ndGgpIHtcbiAgICBjb25zb2xlLndhcm4oJ0F0dGVtcHQgdG8gc2V0IGN1cnNvciBwb3NpdGlvbiBvbiBlbXB0eSBzY3JlZW4uJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHJvdyA+PSB0aGlzLnJvd3NBcnJheS5sZW5ndGgpIHtcbiAgICBjb25zb2xlLmVycm9yKCdSb3cgb3V0IG9mIGJvdW5kczogJyArIHJvdyk7XG4gICAgcm93ID0gdGhpcy5yb3dzQXJyYXkubGVuZ3RoIC0gMTtcbiAgfSBlbHNlIGlmIChyb3cgPCAwKSB7XG4gICAgY29uc29sZS5lcnJvcignUm93IG91dCBvZiBib3VuZHM6ICcgKyByb3cpO1xuICAgIHJvdyA9IDA7XG4gIH1cblxuICBpZiAoY29sdW1uID49IHRoaXMuY29sdW1uQ291bnRfKSB7XG4gICAgY29uc29sZS5lcnJvcignQ29sdW1uIG91dCBvZiBib3VuZHM6ICcgKyBjb2x1bW4pO1xuICAgIGNvbHVtbiA9IHRoaXMuY29sdW1uQ291bnRfIC0gMTtcbiAgfSBlbHNlIGlmIChjb2x1bW4gPCAwKSB7XG4gICAgY29uc29sZS5lcnJvcignQ29sdW1uIG91dCBvZiBib3VuZHM6ICcgKyBjb2x1bW4pO1xuICAgIGNvbHVtbiA9IDA7XG4gIH1cblxuICB0aGlzLmN1cnNvclBvc2l0aW9uLm92ZXJmbG93ID0gZmFsc2U7XG5cbiAgdmFyIHJvd05vZGUgPSB0aGlzLnJvd3NBcnJheVtyb3ddO1xuICB2YXIgbm9kZSA9IHJvd05vZGUuZmlyc3RDaGlsZDtcblxuICBpZiAoIW5vZGUpIHtcbiAgICBub2RlID0gcm93Tm9kZS5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICByb3dOb2RlLmFwcGVuZENoaWxkKG5vZGUpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRDb2x1bW4gPSAwO1xuXG4gIGlmIChyb3dOb2RlID09IHRoaXMuY3Vyc29yUm93Tm9kZV8pIHtcbiAgICBpZiAoY29sdW1uID49IHRoaXMuY3Vyc29yUG9zaXRpb24uY29sdW1uIC0gdGhpcy5jdXJzb3JPZmZzZXRfKSB7XG4gICAgICBub2RlID0gdGhpcy5jdXJzb3JOb2RlXztcbiAgICAgIGN1cnJlbnRDb2x1bW4gPSB0aGlzLmN1cnNvclBvc2l0aW9uLmNvbHVtbiAtIHRoaXMuY3Vyc29yT2Zmc2V0XztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5jdXJzb3JSb3dOb2RlXyA9IHJvd05vZGU7XG4gIH1cblxuICB0aGlzLmN1cnNvclBvc2l0aW9uLm1vdmUocm93LCBjb2x1bW4pO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgdmFyIG9mZnNldCA9IGNvbHVtbiAtIGN1cnJlbnRDb2x1bW47XG4gICAgdmFyIHdpZHRoID0gaHRlcm0uVGV4dEF0dHJpYnV0ZXMubm9kZVdpZHRoKG5vZGUpO1xuICAgIGlmICghbm9kZS5uZXh0U2libGluZyB8fCB3aWR0aCA+IG9mZnNldCkge1xuICAgICAgdGhpcy5jdXJzb3JOb2RlXyA9IG5vZGU7XG4gICAgICB0aGlzLmN1cnNvck9mZnNldF8gPSBvZmZzZXQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY3VycmVudENvbHVtbiArPSB3aWR0aDtcbiAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgdGhlIHByb3ZpZGVkIHNlbGVjdGlvbiBvYmplY3QgdG8gYmUgYSBjYXJldCBzZWxlY3Rpb24gYXQgdGhlIGN1cnJlbnRcbiAqIGN1cnNvciBwb3NpdGlvbi5cbiAqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5zeW5jU2VsZWN0aW9uQ2FyZXQgPSBmdW5jdGlvbihzZWxlY3Rpb24pIHtcbiAgdHJ5IHtcbiAgICBzZWxlY3Rpb24uY29sbGFwc2UodGhpcy5jdXJzb3JOb2RlXywgdGhpcy5jdXJzb3JPZmZzZXRfKTtcbiAgfSBjYXRjaCAoZmlyZWZveElnbm9yZWRFeGNlcHRpb24pIHtcbiAgICAvLyBGRiBjYW4gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIHRoZSByYW5nZSBpcyBvZmYsIHJhdGhlciB0aGFuIGp1c3Qgbm90XG4gICAgLy8gcGVyZm9ybWluZyB0aGUgY29sbGFwc2UuXG4gIH1cbn07XG5cbi8qKlxuICogU3BsaXQgYSBzaW5nbGUgbm9kZSBpbnRvIHR3byBub2RlcyBhdCB0aGUgZ2l2ZW4gb2Zmc2V0LlxuICpcbiAqIEZvciBleGFtcGxlOlxuICogR2l2ZW4gdGhlIERPTSBmcmFnbWVudCAnPGRpdj48c3Bhbj5IZWxsbyBXb3JsZDwvc3Bhbj48L2Rpdj4nLCBjYWxsIHNwbGl0Tm9kZV9cbiAqIHBhc3NpbmcgdGhlIHNwYW4gYW5kIGFuIG9mZnNldCBvZiA2LiAgVGhpcyB3b3VsZCBtb2RpZnkgdGhlIGZyYWdtZW50IHRvXG4gKiBiZWNvbWU6ICc8ZGl2PjxzcGFuPkhlbGxvIDwvc3Bhbj48c3Bhbj5Xb3JsZDwvc3Bhbj48L2Rpdj4nLiAgSWYgdGhlIHNwYW5cbiAqIGhhZCBhbnkgYXR0cmlidXRlcyB0aGV5IHdvdWxkIGhhdmUgYmVlbiBjb3BpZWQgdG8gdGhlIG5ldyBzcGFuIGFzIHdlbGwuXG4gKlxuICogVGhlIHRvLWJlLXNwbGl0IG5vZGUgbXVzdCBoYXZlIGEgY29udGFpbmVyLCBzbyB0aGF0IHRoZSBuZXcgbm9kZSBjYW4gYmVcbiAqIHBsYWNlZCBuZXh0IHRvIGl0LlxuICpcbiAqIEBwYXJhbSB7SFRNTE5vZGV9IG5vZGUgVGhlIG5vZGUgdG8gc3BsaXQuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IGludG8gdGhlIG5vZGUgd2hlcmUgdGhlIHNwbGl0IHNob3VsZFxuICogICAgIG9jY3VyLlxuICovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLnNwbGl0Tm9kZV8gPSBmdW5jdGlvbihub2RlLCBvZmZzZXQpIHtcbiAgdmFyIGFmdGVyTm9kZSA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcblxuICB2YXIgdGV4dENvbnRlbnQgPSBub2RlLnRleHRDb250ZW50O1xuICBub2RlLnRleHRDb250ZW50ID0gaHRlcm0uVGV4dEF0dHJpYnV0ZXMubm9kZVN1YnN0cihub2RlLCAwLCBvZmZzZXQpO1xuICBhZnRlck5vZGUudGV4dENvbnRlbnQgPSBsaWIud2Muc3Vic3RyKHRleHRDb250ZW50LCBvZmZzZXQpO1xuXG4gIGlmIChhZnRlck5vZGUudGV4dENvbnRlbnQpXG4gICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhZnRlck5vZGUsIG5vZGUubmV4dFNpYmxpbmcpO1xuICBpZiAoIW5vZGUudGV4dENvbnRlbnQpIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn07XG5cbi8qKlxuICogRW5zdXJlIHRoYXQgdGV4dCBpcyBjbGlwcGVkIGFuZCB0aGUgY3Vyc29yIGlzIGNsYW1wZWQgdG8gdGhlIGNvbHVtbiBjb3VudC5cbiAqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5tYXliZUNsaXBDdXJyZW50Um93ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3aWR0aCA9IGh0ZXJtLlRleHRBdHRyaWJ1dGVzLm5vZGVXaWR0aCh0aGlzLmN1cnNvclJvd05vZGVfKTtcblxuICBpZiAod2lkdGggPD0gdGhpcy5jb2x1bW5Db3VudF8pIHtcbiAgICAvLyBDdXJyZW50IHJvdyBkb2VzIG5vdCBuZWVkIGNsaXBwaW5nLCBidXQgbWF5IG5lZWQgY2xhbXBpbmcuXG4gICAgaWYgKHRoaXMuY3Vyc29yUG9zaXRpb24uY29sdW1uID49IHRoaXMuY29sdW1uQ291bnRfKSB7XG4gICAgICB0aGlzLnNldEN1cnNvclBvc2l0aW9uKHRoaXMuY3Vyc29yUG9zaXRpb24ucm93LCB0aGlzLmNvbHVtbkNvdW50XyAtIDEpO1xuICAgICAgdGhpcy5jdXJzb3JQb3NpdGlvbi5vdmVyZmxvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU2F2ZSBvZmYgdGhlIGN1cnJlbnQgY29sdW1uIHNvIHdlIGNhbiBtYXliZSByZXN0b3JlIGl0IGxhdGVyLlxuICB2YXIgY3VycmVudENvbHVtbiA9IHRoaXMuY3Vyc29yUG9zaXRpb24uY29sdW1uO1xuXG4gIC8vIE1vdmUgdGhlIGN1cnNvciB0byB0aGUgZmluYWwgY29sdW1uLlxuICB0aGlzLnNldEN1cnNvclBvc2l0aW9uKHRoaXMuY3Vyc29yUG9zaXRpb24ucm93LCB0aGlzLmNvbHVtbkNvdW50XyAtIDEpO1xuXG4gIC8vIFJlbW92ZSBhbnkgdGV4dCB0aGF0IHBhcnRpYWxseSBvdmVyZmxvd3MuXG4gIHdpZHRoID0gaHRlcm0uVGV4dEF0dHJpYnV0ZXMubm9kZVdpZHRoKHRoaXMuY3Vyc29yTm9kZV8pO1xuXG4gIGlmICh0aGlzLmN1cnNvck9mZnNldF8gPCB3aWR0aCAtIDEpIHtcbiAgICB0aGlzLmN1cnNvck5vZGVfLnRleHRDb250ZW50ID0gaHRlcm0uVGV4dEF0dHJpYnV0ZXMubm9kZVN1YnN0cihcbiAgICAgIHRoaXMuY3Vyc29yTm9kZV8sXG4gICAgICAwLFxuICAgICAgdGhpcy5jdXJzb3JPZmZzZXRfICsgMSxcbiAgICApO1xuICB9XG5cbiAgLy8gUmVtb3ZlIGFsbCBub2RlcyBhZnRlciB0aGUgY3Vyc29yLlxuICB2YXIgcm93Tm9kZSA9IHRoaXMuY3Vyc29yUm93Tm9kZV87XG4gIHZhciBub2RlID0gdGhpcy5jdXJzb3JOb2RlXy5uZXh0U2libGluZztcblxuICB3aGlsZSAobm9kZSkge1xuICAgIHJvd05vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgbm9kZSA9IHRoaXMuY3Vyc29yTm9kZV8ubmV4dFNpYmxpbmc7XG4gIH1cblxuICBpZiAoY3VycmVudENvbHVtbiA8IHRoaXMuY29sdW1uQ291bnRfKSB7XG4gICAgLy8gSWYgdGhlIGN1cnNvciB3YXMgd2l0aGluIHRoZSBzY3JlZW4gYmVmb3JlIHdlIHN0YXJ0ZWQgdGhlbiByZXN0b3JlIGl0c1xuICAgIC8vIHBvc2l0aW9uLlxuICAgIHRoaXMuc2V0Q3Vyc29yUG9zaXRpb24odGhpcy5jdXJzb3JQb3NpdGlvbi5yb3csIGN1cnJlbnRDb2x1bW4pO1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSBsZWF2ZSBpdCBhdCB0aGUgdGhlIGxhc3QgY29sdW1uIGluIHRoZSBvdmVyZmxvdyBzdGF0ZS5cbiAgICB0aGlzLmN1cnNvclBvc2l0aW9uLm92ZXJmbG93ID0gdHJ1ZTtcbiAgfVxufTtcblxuLyoqXG4gKiBJbnNlcnQgYSBzdHJpbmcgYXQgdGhlIGN1cnJlbnQgY2hhcmFjdGVyIHBvc2l0aW9uIHVzaW5nIHRoZSBjdXJyZW50XG4gKiB0ZXh0IGF0dHJpYnV0ZXMuXG4gKlxuICogWW91IG11c3QgY2FsbCBtYXliZUNsaXBDdXJyZW50Um93KCkgYWZ0ZXIgaW4gb3JkZXIgdG8gY2xpcCBvdmVyZmxvd2VkXG4gKiB0ZXh0IGFuZCBjbGFtcCB0aGUgY3Vyc29yLlxuICpcbiAqIEl0IGlzIGFsc28gdXAgdG8gdGhlIGNhbGxlciB0byBwcm9wZXJseSBtYWludGFpbiB0aGUgbGluZSBvdmVyZmxvdyBzdGF0ZVxuICogdXNpbmcgaHRlcm0uU2NyZWVuLi5jb21taXRMaW5lT3ZlcmZsb3coKS5cbiAqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5pbnNlcnRTdHJpbmcgPSBmdW5jdGlvbihzdHIsIHdjd2lkdGggPSB1bmRlZmluZWQpIHtcbiAgdmFyIGN1cnNvck5vZGUgPSB0aGlzLmN1cnNvck5vZGVfO1xuICB2YXIgY3Vyc29yTm9kZVRleHQgPSBjdXJzb3JOb2RlLnRleHRDb250ZW50O1xuXG4gIHRoaXMuY3Vyc29yUm93Tm9kZV8ucmVtb3ZlQXR0cmlidXRlKCdsaW5lLW92ZXJmbG93Jyk7XG5cbiAgLy8gV2UgbWF5IGFsdGVyIHRoZSB3aWR0aCBvZiB0aGUgc3RyaW5nIGJ5IHByZXBlbmRpbmcgc29tZSBtaXNzaW5nXG4gIC8vIHdoaXRlc3BhY2VzLCBzbyB3ZSBuZWVkIHRvIHJlY29yZCB0aGUgc3RyaW5nIHdpZHRoIGFoZWFkIG9mIHRpbWUuXG4gIGlmICh3Y3dpZHRoID09PSB1bmRlZmluZWQpIHdjd2lkdGggPSBsaWIud2Muc3RyV2lkdGgoc3RyKTtcblxuICAvLyBObyBtYXR0ZXIgd2hhdCwgYmVmb3JlIHRoaXMgZnVuY3Rpb24gZXhpdHMgdGhlIGN1cnNvciBjb2x1bW4gd2lsbCBoYXZlXG4gIC8vIG1vdmVkIHRoaXMgbXVjaC5cbiAgdGhpcy5jdXJzb3JQb3NpdGlvbi5jb2x1bW4gKz0gd2N3aWR0aDtcblxuICAvLyBMb2NhbCBjYWNoZSBvZiB0aGUgY3Vyc29yIG9mZnNldC5cbiAgdmFyIG9mZnNldCA9IHRoaXMuY3Vyc29yT2Zmc2V0XztcblxuICAvLyBSZXZlcnNlIG9mZnNldCBpcyB0aGUgb2Zmc2V0IG1lYXN1cmVkIGZyb20gdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuICAvLyBaZXJvIGltcGxpZXMgdGhhdCB0aGUgY3Vyc29yIGlzIGF0IHRoZSBlbmQgb2YgdGhlIGN1cnNvciBub2RlLlxuICB2YXIgcmV2ZXJzZU9mZnNldCA9IGh0ZXJtLlRleHRBdHRyaWJ1dGVzLm5vZGVXaWR0aChjdXJzb3JOb2RlKSAtIG9mZnNldDtcblxuICBpZiAocmV2ZXJzZU9mZnNldCA8IDApIHtcbiAgICAvLyBBIG5lZ2F0aXZlIHJldmVyc2Ugb2Zmc2V0IG1lYW5zIHRoZSBjdXJzb3IgaXMgcG9zaXRpb25lZCBwYXN0IHRoZSBlbmRcbiAgICAvLyBvZiB0aGUgY2hhcmFjdGVycyBvbiB0aGlzIGxpbmUuICBXZSdsbCBuZWVkIHRvIGluc2VydCB0aGUgbWlzc2luZ1xuICAgIC8vIHdoaXRlc3BhY2UuXG4gICAgdmFyIHdzID0gbGliLmYuZ2V0V2hpdGVzcGFjZSgtcmV2ZXJzZU9mZnNldCk7XG5cbiAgICAvLyBUaGlzIHdoaXRlc3BhY2Ugc2hvdWxkIGJlIGNvbXBsZXRlbHkgdW5zdHlsZWQuICBVbmRlcmxpbmUsIGJhY2tncm91bmRcbiAgICAvLyBjb2xvciwgYW5kIHN0cmlrZXRocm91Z2ggd291bGQgYmUgdmlzaWJsZSBvbiB3aGl0ZXNwYWNlLCBzbyB3ZSBjYW4ndCB1c2VcbiAgICAvLyBvbmUgb2YgdGhvc2Ugc3BhbnMgdG8gaG9sZCB0aGUgdGV4dC5cbiAgICBpZiAoXG4gICAgICAhKFxuICAgICAgICB0aGlzLnRleHRBdHRyaWJ1dGVzLnVuZGVybGluZSB8fFxuICAgICAgICB0aGlzLnRleHRBdHRyaWJ1dGVzLnN0cmlrZXRocm91Z2ggfHxcbiAgICAgICAgdGhpcy50ZXh0QXR0cmlidXRlcy5iYWNrZ3JvdW5kIHx8XG4gICAgICAgIHRoaXMudGV4dEF0dHJpYnV0ZXMud2NOb2RlIHx8XG4gICAgICAgICF0aGlzLnRleHRBdHRyaWJ1dGVzLmFzY2lpTm9kZSB8fFxuICAgICAgICB0aGlzLnRleHRBdHRyaWJ1dGVzLnRpbGVEYXRhICE9IG51bGxcbiAgICAgIClcbiAgICApIHtcbiAgICAgIC8vIEJlc3QgY2FzZSBzY2VuYXJpbywgd2UgY2FuIGp1c3QgcHJldGVuZCB0aGUgc3BhY2VzIHdlcmUgcGFydCBvZiB0aGVcbiAgICAgIC8vIG9yaWdpbmFsIHN0cmluZy5cbiAgICAgIHN0ciA9IHdzICsgc3RyO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjdXJzb3JOb2RlLm5vZGVUeXBlID09IE5vZGUuVEVYVF9OT0RFIHx8XG4gICAgICAhKFxuICAgICAgICBjdXJzb3JOb2RlLndjTm9kZSB8fFxuICAgICAgICAhY3Vyc29yTm9kZS5hc2NpaU5vZGUgfHxcbiAgICAgICAgY3Vyc29yTm9kZS50aWxlTm9kZSB8fFxuICAgICAgICBjdXJzb3JOb2RlLnN0eWxlLnRleHREZWNvcmF0aW9uIHx8XG4gICAgICAgIGN1cnNvck5vZGUuc3R5bGUudGV4dERlY29yYXRpb25TdHlsZSB8fFxuICAgICAgICBjdXJzb3JOb2RlLnN0eWxlLnRleHREZWNvcmF0aW9uTGluZSB8fFxuICAgICAgICBjdXJzb3JOb2RlLnN0eWxlLmJhY2tncm91bmRDb2xvclxuICAgICAgKVxuICAgICkge1xuICAgICAgLy8gU2Vjb25kIGJlc3QgY2FzZSwgdGhlIGN1cnJlbnQgbm9kZSBpcyBhYmxlIHRvIGhvbGQgdGhlIHdoaXRlc3BhY2UuXG4gICAgICBjdXJzb3JOb2RlLnRleHRDb250ZW50ID0gY3Vyc29yTm9kZVRleHQgKz0gd3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdvcnN0IGNhc2UsIHdlIGhhdmUgdG8gY3JlYXRlIGEgbmV3IG5vZGUgdG8gaG9sZCB0aGUgd2hpdGVzcGFjZS5cbiAgICAgIHZhciB3c05vZGUgPSBjdXJzb3JOb2RlLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUod3MpO1xuICAgICAgdGhpcy5jdXJzb3JSb3dOb2RlXy5pbnNlcnRCZWZvcmUod3NOb2RlLCBjdXJzb3JOb2RlLm5leHRTaWJsaW5nKTtcbiAgICAgIHRoaXMuY3Vyc29yTm9kZV8gPSBjdXJzb3JOb2RlID0gd3NOb2RlO1xuICAgICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gb2Zmc2V0ID0gLXJldmVyc2VPZmZzZXQ7XG4gICAgICBjdXJzb3JOb2RlVGV4dCA9IHdzO1xuICAgIH1cblxuICAgIC8vIFdlIG5vdyBrbm93IGZvciBzdXJlIHRoYXQgd2UncmUgYXQgdGhlIGxhc3QgY2hhcmFjdGVyIG9mIHRoZSBjdXJzb3Igbm9kZS5cbiAgICByZXZlcnNlT2Zmc2V0ID0gMDtcbiAgfVxuXG4gIGlmICh0aGlzLnRleHRBdHRyaWJ1dGVzLm1hdGNoZXNDb250YWluZXIoY3Vyc29yTm9kZSkpIHtcbiAgICAvLyBUaGUgbmV3IHRleHQgY2FuIGJlIHBsYWNlZCBkaXJlY3RseSBpbiB0aGUgY3Vyc29yIG5vZGUuXG4gICAgaWYgKHJldmVyc2VPZmZzZXQgPT0gMCkge1xuICAgICAgY3Vyc29yTm9kZS50ZXh0Q29udGVudCA9IGN1cnNvck5vZGVUZXh0ICsgc3RyO1xuICAgIH0gZWxzZSBpZiAob2Zmc2V0ID09IDApIHtcbiAgICAgIGN1cnNvck5vZGUudGV4dENvbnRlbnQgPSBzdHIgKyBjdXJzb3JOb2RlVGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3Vyc29yTm9kZS50ZXh0Q29udGVudCA9XG4gICAgICAgIGh0ZXJtLlRleHRBdHRyaWJ1dGVzLm5vZGVTdWJzdHIoY3Vyc29yTm9kZSwgMCwgb2Zmc2V0KSArXG4gICAgICAgIHN0ciArXG4gICAgICAgIGh0ZXJtLlRleHRBdHRyaWJ1dGVzLm5vZGVTdWJzdHIoY3Vyc29yTm9kZSwgb2Zmc2V0KTtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnNvck9mZnNldF8gKz0gd2N3aWR0aDtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUaGUgY3Vyc29yIG5vZGUgaXMgdGhlIHdyb25nIHN0eWxlIGZvciB0aGUgbmV3IHRleHQuICBJZiB3ZSdyZSBhdCB0aGVcbiAgLy8gYmVnaW5uaW5nIG9yIGVuZCBvZiB0aGUgY3Vyc29yIG5vZGUsIHRoZW4gdGhlIGFkamFjZW50IG5vZGUgaXMgYWxzbyBhXG4gIC8vIHBvdGVudGlhbCBjYW5kaWRhdGUuXG5cbiAgaWYgKG9mZnNldCA9PSAwKSB7XG4gICAgLy8gQXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgY3Vyc29yIG5vZGUsIHRoZSBjaGVjayB0aGUgcHJldmlvdXMgc2libGluZy5cbiAgICB2YXIgcHJldmlvdXNTaWJsaW5nID0gY3Vyc29yTm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgaWYgKFxuICAgICAgcHJldmlvdXNTaWJsaW5nICYmXG4gICAgICB0aGlzLnRleHRBdHRyaWJ1dGVzLm1hdGNoZXNDb250YWluZXIocHJldmlvdXNTaWJsaW5nKVxuICAgICkge1xuICAgICAgcHJldmlvdXNTaWJsaW5nLnRleHRDb250ZW50ICs9IHN0cjtcbiAgICAgIHRoaXMuY3Vyc29yTm9kZV8gPSBwcmV2aW91c1NpYmxpbmc7XG4gICAgICB0aGlzLmN1cnNvck9mZnNldF8gPSBsaWIud2Muc3RyV2lkdGgocHJldmlvdXNTaWJsaW5nLnRleHRDb250ZW50KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV3Tm9kZSA9IHRoaXMudGV4dEF0dHJpYnV0ZXMuY3JlYXRlQ29udGFpbmVyKHN0cik7XG4gICAgdGhpcy5jdXJzb3JSb3dOb2RlXy5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgY3Vyc29yTm9kZSk7XG4gICAgdGhpcy5jdXJzb3JOb2RlXyA9IG5ld05vZGU7XG4gICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gd2N3aWR0aDtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocmV2ZXJzZU9mZnNldCA9PSAwKSB7XG4gICAgLy8gQXQgdGhlIGVuZCBvZiB0aGUgY3Vyc29yIG5vZGUsIHRoZSBjaGVjayB0aGUgbmV4dCBzaWJsaW5nLlxuICAgIHZhciBuZXh0U2libGluZyA9IGN1cnNvck5vZGUubmV4dFNpYmxpbmc7XG4gICAgaWYgKG5leHRTaWJsaW5nICYmIHRoaXMudGV4dEF0dHJpYnV0ZXMubWF0Y2hlc0NvbnRhaW5lcihuZXh0U2libGluZykpIHtcbiAgICAgIG5leHRTaWJsaW5nLnRleHRDb250ZW50ID0gc3RyICsgbmV4dFNpYmxpbmcudGV4dENvbnRlbnQ7XG4gICAgICB0aGlzLmN1cnNvck5vZGVfID0gbmV4dFNpYmxpbmc7XG4gICAgICB0aGlzLmN1cnNvck9mZnNldF8gPSBsaWIud2Muc3RyV2lkdGgoc3RyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV3Tm9kZSA9IHRoaXMudGV4dEF0dHJpYnV0ZXMuY3JlYXRlQ29udGFpbmVyKHN0cik7XG4gICAgdGhpcy5jdXJzb3JSb3dOb2RlXy5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgbmV4dFNpYmxpbmcpO1xuICAgIHRoaXMuY3Vyc29yTm9kZV8gPSBuZXdOb2RlO1xuICAgIC8vIFdlIHNwZWNpZmljYWxseSBuZWVkIHRvIGluY2x1ZGUgYW55IG1pc3Npbmcgd2hpdGVzcGFjZSBoZXJlLCBzaW5jZSBpdCdzXG4gICAgLy8gZ29pbmcgaW4gYSBuZXcgbm9kZS5cbiAgICB0aGlzLmN1cnNvck9mZnNldF8gPSBodGVybS5UZXh0QXR0cmlidXRlcy5ub2RlV2lkdGgobmV3Tm9kZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV29yc3QgY2FzZSwgd2UncmUgc29tZXdoZXJlIGluIHRoZSBtaWRkbGUgb2YgdGhlIGN1cnNvciBub2RlLiAgV2UnbGxcbiAgLy8gaGF2ZSB0byBzcGxpdCBpdCBpbnRvIHR3byBub2RlcyBhbmQgaW5zZXJ0IG91ciBuZXcgY29udGFpbmVyIGluIGJldHdlZW4uXG4gIHRoaXMuc3BsaXROb2RlXyhjdXJzb3JOb2RlLCBvZmZzZXQpO1xuICB2YXIgbmV3Tm9kZSA9IHRoaXMudGV4dEF0dHJpYnV0ZXMuY3JlYXRlQ29udGFpbmVyKHN0cik7XG4gIHRoaXMuY3Vyc29yUm93Tm9kZV8uaW5zZXJ0QmVmb3JlKG5ld05vZGUsIGN1cnNvck5vZGUubmV4dFNpYmxpbmcpO1xuICB0aGlzLmN1cnNvck5vZGVfID0gbmV3Tm9kZTtcbiAgdGhpcy5jdXJzb3JPZmZzZXRfID0gd2N3aWR0aDtcbn07XG5cbi8qKlxuICogT3ZlcndyaXRlIHRoZSB0ZXh0IGF0IHRoZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvbi5cbiAqXG4gKiBZb3UgbXVzdCBjYWxsIG1heWJlQ2xpcEN1cnJlbnRSb3coKSBhZnRlciBpbiBvcmRlciB0byBjbGlwIG92ZXJmbG93ZWRcbiAqIHRleHQgYW5kIGNsYW1wIHRoZSBjdXJzb3IuXG4gKlxuICogSXQgaXMgYWxzbyB1cCB0byB0aGUgY2FsbGVyIHRvIHByb3Blcmx5IG1haW50YWluIHRoZSBsaW5lIG92ZXJmbG93IHN0YXRlXG4gKiB1c2luZyBodGVybS5TY3JlZW4uLmNvbW1pdExpbmVPdmVyZmxvdygpLlxuICovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLm92ZXJ3cml0ZVN0cmluZyA9IGZ1bmN0aW9uKHN0ciwgd2N3aWR0aCA9IHVuZGVmaW5lZCkge1xuICB2YXIgbWF4TGVuZ3RoID0gdGhpcy5jb2x1bW5Db3VudF8gLSB0aGlzLmN1cnNvclBvc2l0aW9uLmNvbHVtbjtcbiAgaWYgKCFtYXhMZW5ndGgpIHJldHVybiBbc3RyXTtcblxuICBpZiAod2N3aWR0aCA9PT0gdW5kZWZpbmVkKSB3Y3dpZHRoID0gbGliLndjLnN0cldpZHRoKHN0cik7XG5cbiAgaWYgKFxuICAgIHRoaXMudGV4dEF0dHJpYnV0ZXMubWF0Y2hlc0NvbnRhaW5lcih0aGlzLmN1cnNvck5vZGVfKSAmJlxuICAgIHRoaXMuY3Vyc29yTm9kZV8udGV4dENvbnRlbnQuc3Vic3RyKHRoaXMuY3Vyc29yT2Zmc2V0XykgPT0gc3RyXG4gICkge1xuICAgIC8vIFRoaXMgb3ZlcndyaXRlIHdvdWxkIGJlIGEgbm8tb3AsIGp1c3QgbW92ZSB0aGUgY3Vyc29yIGFuZCByZXR1cm4uXG4gICAgdGhpcy5jdXJzb3JPZmZzZXRfICs9IHdjd2lkdGg7XG4gICAgdGhpcy5jdXJzb3JQb3NpdGlvbi5jb2x1bW4gKz0gd2N3aWR0aDtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmRlbGV0ZUNoYXJzKE1hdGgubWluKHdjd2lkdGgsIG1heExlbmd0aCkpO1xuICB0aGlzLmluc2VydFN0cmluZyhzdHIsIHdjd2lkdGgpO1xufTtcblxuLyoqXG4gKiBGb3J3YXJkLWRlbGV0ZSBvbmUgb3IgbW9yZSBjaGFyYWN0ZXJzIGF0IHRoZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvbi5cbiAqXG4gKiBUZXh0IHRvIHRoZSByaWdodCBvZiB0aGUgZGVsZXRlZCBjaGFyYWN0ZXJzIGlzIHNoaWZ0ZWQgbGVmdC4gIE9ubHkgYWZmZWN0c1xuICogY2hhcmFjdGVycyBvbiB0aGUgc2FtZSByb3cgYXMgdGhlIGN1cnNvci5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGNvdW50IFRoZSBjb2x1bW4gd2lkdGggb2YgY2hhcmFjdGVycyB0byBkZWxldGUuICBUaGlzIGlzXG4gKiAgICAgY2xhbXBlZCB0byB0aGUgY29sdW1uIHdpZHRoIG1pbnVzIHRoZSBjdXJzb3IgY29sdW1uLlxuICogQHJldHVybiB7aW50ZWdlcn0gVGhlIGNvbHVtbiB3aWR0aCBvZiB0aGUgY2hhcmFjdGVycyBhY3R1YWxseSBkZWxldGVkLlxuICovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLmRlbGV0ZUNoYXJzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLmN1cnNvck5vZGVfO1xuICB2YXIgb2Zmc2V0ID0gdGhpcy5jdXJzb3JPZmZzZXRfO1xuXG4gIHZhciBjdXJyZW50Q3Vyc29yQ29sdW1uID0gdGhpcy5jdXJzb3JQb3NpdGlvbi5jb2x1bW47XG4gIGNvdW50ID0gTWF0aC5taW4oY291bnQsIHRoaXMuY29sdW1uQ291bnRfIC0gY3VycmVudEN1cnNvckNvbHVtbik7XG4gIGlmICghY291bnQpIHJldHVybiAwO1xuXG4gIHZhciBydiA9IGNvdW50O1xuICB2YXIgc3RhcnRMZW5ndGgsIGVuZExlbmd0aDtcblxuICB3aGlsZSAobm9kZSAmJiBjb3VudCkge1xuICAgIC8vIFNhbml0eSBjaGVjayBzbyB3ZSBkb24ndCBsb29wIGZvcmV2ZXIsIGJ1dCB3ZSBkb24ndCBhbHNvIGdvIHF1aWV0bHkuXG4gICAgaWYgKGNvdW50IDwgMCkge1xuICAgICAgY29uc29sZS5lcnJvcihgRGVsZXRpbmcgJHtydn0gY2hhcnMgd2VudCBuZWdhdGl2ZTogJHtjb3VudH1gKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN0YXJ0TGVuZ3RoID0gaHRlcm0uVGV4dEF0dHJpYnV0ZXMubm9kZVdpZHRoKG5vZGUpO1xuICAgIG5vZGUudGV4dENvbnRlbnQgPVxuICAgICAgaHRlcm0uVGV4dEF0dHJpYnV0ZXMubm9kZVN1YnN0cihub2RlLCAwLCBvZmZzZXQpICtcbiAgICAgIGh0ZXJtLlRleHRBdHRyaWJ1dGVzLm5vZGVTdWJzdHIobm9kZSwgb2Zmc2V0ICsgY291bnQpO1xuICAgIGVuZExlbmd0aCA9IGh0ZXJtLlRleHRBdHRyaWJ1dGVzLm5vZGVXaWR0aChub2RlKTtcblxuICAgIC8vIERlYWwgd2l0aCBzcGxpdHRpbmcgd2lkZSBjaGFyYWN0ZXJzLiAgVGhlcmUgYXJlIHR3byB3YXlzOiB3ZSBjb3VsZCBkZWxldGVcbiAgICAvLyB0aGUgZmlyc3QgY29sdW1uIG9yIHRoZSBzZWNvbmQgY29sdW1uLiAgSW4gYm90aCBjYXNlcywgd2UgZGVsZXRlIHRoZSB3aWRlXG4gICAgLy8gY2hhcmFjdGVyIGFuZCByZXBsYWNlIG9uZSBvZiB0aGUgY29sdW1ucyB3aXRoIGEgc3BhY2UgKHNpbmNlIHRoZSBvdGhlclxuICAgIC8vIHdhcyBkZWxldGVkKS4gIElmIHRoZXJlIGFyZSBtb3JlIGNoYXJzIHRvIGRlbGV0ZSwgdGhlIG5leHQgbG9vcCB3aWxsIHBpY2tcbiAgICAvLyB1cCB0aGUgc2xhY2suXG4gICAgaWYgKFxuICAgICAgbm9kZS53Y05vZGUgJiZcbiAgICAgIG9mZnNldCA8IHN0YXJ0TGVuZ3RoICYmXG4gICAgICAoKGVuZExlbmd0aCAmJiBzdGFydExlbmd0aCA9PSBlbmRMZW5ndGgpIHx8ICghZW5kTGVuZ3RoICYmIG9mZnNldCA9PSAxKSlcbiAgICApIHtcbiAgICAgIC8vIE5vIGNoYXJhY3RlcnMgd2VyZSBkZWxldGVkIHdoZW4gdGhlcmUgc2hvdWxkIGJlLiAgV2UncmUgcHJvYmFibHkgdHJ5aW5nXG4gICAgICAvLyB0byBkZWxldGUgb25lIGNvbHVtbiB3aWR0aCBmcm9tIGEgd2lkZSBjaGFyYWN0ZXIgbm9kZS4gIFdlIHJlbW92ZSB0aGVcbiAgICAgIC8vIHdpZGUgY2hhcmFjdGVyIG5vZGUgaGVyZSBhbmQgcmVwbGFjZSBpdCB3aXRoIGEgc2luZ2xlIHNwYWNlLlxuICAgICAgdmFyIHNwYWNlTm9kZSA9IHRoaXMudGV4dEF0dHJpYnV0ZXMuY3JlYXRlQ29udGFpbmVyKCcgJyk7XG4gICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNwYWNlTm9kZSwgb2Zmc2V0ID8gbm9kZSA6IG5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgbm9kZS50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgZW5kTGVuZ3RoID0gMDtcbiAgICAgIGNvdW50IC09IDE7XG4gICAgfSBlbHNlIGNvdW50IC09IHN0YXJ0TGVuZ3RoIC0gZW5kTGVuZ3RoO1xuXG4gICAgdmFyIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICBpZiAoZW5kTGVuZ3RoID09IDAgJiYgbm9kZSAhPSB0aGlzLmN1cnNvck5vZGVfKSB7XG4gICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgfVxuICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgICBvZmZzZXQgPSAwO1xuICB9XG5cbiAgLy8gUmVtb3ZlIHRoaXMuY3Vyc29yTm9kZV8gaWYgaXQgaXMgYW4gZW1wdHkgbm9uLXRleHQgbm9kZS5cbiAgaWYgKFxuICAgIHRoaXMuY3Vyc29yTm9kZV8ubm9kZVR5cGUgIT0gTm9kZS5URVhUX05PREUgJiZcbiAgICAhdGhpcy5jdXJzb3JOb2RlXy50ZXh0Q29udGVudFxuICApIHtcbiAgICB2YXIgY3Vyc29yTm9kZSA9IHRoaXMuY3Vyc29yTm9kZV87XG4gICAgaWYgKGN1cnNvck5vZGUucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICB0aGlzLmN1cnNvck5vZGVfID0gY3Vyc29yTm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICB0aGlzLmN1cnNvck9mZnNldF8gPSBodGVybS5UZXh0QXR0cmlidXRlcy5ub2RlV2lkdGgoXG4gICAgICAgIGN1cnNvck5vZGUucHJldmlvdXNTaWJsaW5nLFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGN1cnNvck5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICAgIHRoaXMuY3Vyc29yTm9kZV8gPSBjdXJzb3JOb2RlLm5leHRTaWJsaW5nO1xuICAgICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGVtcHR5Tm9kZSA9IHRoaXMuY3Vyc29yUm93Tm9kZV8ub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgICB0aGlzLmN1cnNvclJvd05vZGVfLmFwcGVuZENoaWxkKGVtcHR5Tm9kZSk7XG4gICAgICB0aGlzLmN1cnNvck5vZGVfID0gZW1wdHlOb2RlO1xuICAgICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gMDtcbiAgICB9XG4gICAgdGhpcy5jdXJzb3JSb3dOb2RlXy5yZW1vdmVDaGlsZChjdXJzb3JOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBydjtcbn07XG5cbi8qKlxuICogRmluZHMgZmlyc3QgWC1ST1cgb2YgYSBsaW5lIGNvbnRhaW5pbmcgc3BlY2lmaWVkIFgtUk9XLlxuICogVXNlZCB0byBzdXBwb3J0IGxpbmUgb3ZlcmZsb3cuXG4gKlxuICogQHBhcmFtIHtOb2RlfSByb3cgWC1ST1cgdG8gYmVnaW4gc2VhcmNoIGZvciBmaXJzdCByb3cgb2YgbGluZS5cbiAqIEByZXR1cm4ge05vZGV9IFRoZSBYLVJPVyB0aGF0IGlzIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpbmUuXG4gKiovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLmdldExpbmVTdGFydFJvd18gPSBmdW5jdGlvbihyb3cpIHtcbiAgd2hpbGUgKFxuICAgIHJvdy5wcmV2aW91c1NpYmxpbmcgJiZcbiAgICByb3cucHJldmlvdXNTaWJsaW5nLmhhc0F0dHJpYnV0ZSgnbGluZS1vdmVyZmxvdycpXG4gICkge1xuICAgIHJvdyA9IHJvdy5wcmV2aW91c1NpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIHJvdztcbn07XG5cbi8qKlxuICogR2V0cyB0ZXh0IG9mIGEgbGluZSBiZWdpbm5pbmcgd2l0aCByb3cuXG4gKiBTdXBwb3J0cyBsaW5lIG92ZXJmbG93LlxuICpcbiAqIEBwYXJhbSB7Tm9kZX0gcm93IEZpcnN0IFgtUk9XIG9mIGxpbmUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRleHQgY29udGVudCBvZiBsaW5lLlxuICoqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5nZXRMaW5lVGV4dF8gPSBmdW5jdGlvbihyb3cpIHtcbiAgdmFyIHJvd1RleHQgPSAnJztcbiAgd2hpbGUgKHJvdykge1xuICAgIHJvd1RleHQgKz0gcm93LnRleHRDb250ZW50O1xuICAgIGlmIChyb3cuaGFzQXR0cmlidXRlKCdsaW5lLW92ZXJmbG93JykpIHtcbiAgICAgIHJvdyA9IHJvdy5uZXh0U2libGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByb3dUZXh0O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIFgtUk9XIHRoYXQgaXMgYW5jZXN0b3Igb2YgdGhlIG5vZGUuXG4gKlxuICogQHBhcmFtIHtOb2RlfSBub2RlIE5vZGUgdG8gZ2V0IFgtUk9XIGFuY2VzdG9yIGZvci5cbiAqIEByZXR1cm4ge05vZGV9IFgtUk9XIGFuY2VzdG9yIG9mIG5vZGUsIG9yIG51bGwgaWYgbm90IGZvdW5kLlxuICoqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5nZXRYUm93QW5jZXN0b3JfID0gZnVuY3Rpb24obm9kZSkge1xuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlLm5vZGVOYW1lID09PSAnWC1ST1cnKSBicmVhaztcbiAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBub2RlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHBvc2l0aW9uIHdpdGhpbiBsaW5lIG9mIGNoYXJhY3RlciBhdCBvZmZzZXQgd2l0aGluIG5vZGUuXG4gKiBTdXBwb3J0cyBsaW5lIG92ZXJmbG93LlxuICpcbiAqIEBwYXJhbSB7Tm9kZX0gcm93IFgtUk9XIGF0IGJlZ2lubmluZyBvZiBsaW5lLlxuICogQHBhcmFtIHtOb2RlfSBub2RlIE5vZGUgdG8gZ2V0IHBvc2l0aW9uIG9mLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBvZmZzZXQgT2Zmc2V0IGludG8gbm9kZS5cbiAqXG4gKiBAcmV0dXJuIHtpbnRlZ2VyfSBQb3NpdGlvbiB3aXRoaW4gbGluZSBvZiBjaGFyYWN0ZXIgYXQgb2Zmc2V0IHdpdGhpbiBub2RlLlxuICoqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5nZXRQb3NpdGlvbldpdGhPdmVyZmxvd18gPSBmdW5jdGlvbihyb3csIG5vZGUsIG9mZnNldCkge1xuICBpZiAoIW5vZGUpIHJldHVybiAtMTtcbiAgdmFyIGFuY2VzdG9yUm93ID0gdGhpcy5nZXRYUm93QW5jZXN0b3JfKG5vZGUpO1xuICBpZiAoIWFuY2VzdG9yUm93KSByZXR1cm4gLTE7XG4gIHZhciBwb3NpdGlvbiA9IDA7XG4gIHdoaWxlIChhbmNlc3RvclJvdyAhPSByb3cpIHtcbiAgICBwb3NpdGlvbiArPSBodGVybS5UZXh0QXR0cmlidXRlcy5ub2RlV2lkdGgocm93KTtcbiAgICBpZiAocm93Lmhhc0F0dHJpYnV0ZSgnbGluZS1vdmVyZmxvdycpICYmIHJvdy5uZXh0U2libGluZykge1xuICAgICAgcm93ID0gcm93Lm5leHRTaWJsaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiBwb3NpdGlvbiArIHRoaXMuZ2V0UG9zaXRpb25XaXRoaW5Sb3dfKHJvdywgbm9kZSwgb2Zmc2V0KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBwb3NpdGlvbiB3aXRoaW4gcm93IG9mIGNoYXJhY3RlciBhdCBvZmZzZXQgd2l0aGluIG5vZGUuXG4gKiBEb2VzIG5vdCBzdXBwb3J0IGxpbmUgb3ZlcmZsb3cuXG4gKlxuICogQHBhcmFtIHtOb2RlfSByb3cgWC1ST1cgdG8gZ2V0IHBvc2l0aW9uIHdpdGhpbi5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBOb2RlIHRvIGdldCBwb3NpdGlvbiBmb3IuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IG9mZnNldCBPZmZzZXQgd2l0aGluIG5vZGUgdG8gZ2V0IHBvc2l0aW9uIGZvci5cbiAqIEByZXR1cm4ge2ludGVnZXJ9IFBvc2l0aW9uIHdpdGhpbiByb3cgb2YgY2hhcmFjdGVyIGF0IG9mZnNldCB3aXRoaW4gbm9kZS5cbiAqKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuZ2V0UG9zaXRpb25XaXRoaW5Sb3dfID0gZnVuY3Rpb24ocm93LCBub2RlLCBvZmZzZXQpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPSByb3cpIHtcbiAgICAvLyBJZiB3ZSB0cmF2ZXJzZWQgdG8gdGhlIHRvcCBub2RlLCB0aGVuIHRoZXJlJ3Mgbm90aGluZyB0byBmaW5kIGhlcmUuXG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSA9PSBudWxsKSByZXR1cm4gLTE7XG5cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5nZXRQb3NpdGlvbldpdGhpblJvd18obm9kZS5wYXJlbnROb2RlLCBub2RlLCBvZmZzZXQpICtcbiAgICAgIHRoaXMuZ2V0UG9zaXRpb25XaXRoaW5Sb3dfKHJvdywgbm9kZS5wYXJlbnROb2RlLCAwKVxuICAgICk7XG4gIH1cbiAgdmFyIHBvc2l0aW9uID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3cuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjdXJyZW50Tm9kZSA9IHJvdy5jaGlsZE5vZGVzW2ldO1xuICAgIGlmIChjdXJyZW50Tm9kZSA9PSBub2RlKSByZXR1cm4gcG9zaXRpb24gKyBvZmZzZXQ7XG4gICAgcG9zaXRpb24gKz0gaHRlcm0uVGV4dEF0dHJpYnV0ZXMubm9kZVdpZHRoKGN1cnJlbnROb2RlKTtcbiAgfVxuICByZXR1cm4gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG5vZGUgYW5kIG9mZnNldCBjb3JyZXNwb25kaW5nIHRvIHBvc2l0aW9uIHdpdGhpbiBsaW5lLlxuICogU3VwcG9ydHMgbGluZSBvdmVyZmxvdy5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IHJvdyBYLVJPVyBhdCBiZWdpbm5pbmcgb2YgbGluZS5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gcG9zaXRpb24gUG9zaXRpb24gd2l0aGluIGxpbmUgdG8gcmV0cmlldmUgbm9kZSBhbmQgb2Zmc2V0LlxuICogQHJldHVybiB7QXJyYXl9IFR3byBlbGVtZW50IGFycmF5IGNvbnRhaW5pbmcgbm9kZSBhbmQgb2Zmc2V0IHJlc3BlY3RpdmVseS5cbiAqKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuZ2V0Tm9kZUFuZE9mZnNldFdpdGhPdmVyZmxvd18gPSBmdW5jdGlvbihyb3csIHBvc2l0aW9uKSB7XG4gIHdoaWxlIChyb3cgJiYgcG9zaXRpb24gPiBodGVybS5UZXh0QXR0cmlidXRlcy5ub2RlV2lkdGgocm93KSkge1xuICAgIGlmIChyb3cuaGFzQXR0cmlidXRlKCdsaW5lLW92ZXJmbG93JykgJiYgcm93Lm5leHRTaWJsaW5nKSB7XG4gICAgICBwb3NpdGlvbiAtPSBodGVybS5UZXh0QXR0cmlidXRlcy5ub2RlV2lkdGgocm93KTtcbiAgICAgIHJvdyA9IHJvdy5uZXh0U2libGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcy5nZXROb2RlQW5kT2Zmc2V0V2l0aGluUm93Xyhyb3csIHBvc2l0aW9uKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbm9kZSBhbmQgb2Zmc2V0IGNvcnJlc3BvbmRpbmcgdG8gcG9zaXRpb24gd2l0aGluIHJvdy5cbiAqIERvZXMgbm90IHN1cHBvcnQgbGluZSBvdmVyZmxvdy5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IHJvdyBYLVJPVyB0byBnZXQgcG9zaXRpb24gd2l0aGluLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBwb3NpdGlvbiBQb3NpdGlvbiB3aXRoaW4gcm93IHRvIHJldHJpZXZlIG5vZGUgYW5kIG9mZnNldC5cbiAqIEByZXR1cm4ge0FycmF5fSBUd28gZWxlbWVudCBhcnJheSBjb250YWluaW5nIG5vZGUgYW5kIG9mZnNldCByZXNwZWN0aXZlbHkuXG4gKiovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLmdldE5vZGVBbmRPZmZzZXRXaXRoaW5Sb3dfID0gZnVuY3Rpb24ocm93LCBwb3NpdGlvbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJvdy5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGUgPSByb3cuY2hpbGROb2Rlc1tpXTtcbiAgICB2YXIgbm9kZVRleHRXaWR0aCA9IGh0ZXJtLlRleHRBdHRyaWJ1dGVzLm5vZGVXaWR0aChub2RlKTtcbiAgICBpZiAocG9zaXRpb24gPD0gbm9kZVRleHRXaWR0aCkge1xuICAgICAgaWYgKG5vZGUubm9kZU5hbWUgPT09ICdTUEFOJykge1xuICAgICAgICAvKiogRHJpbGwgZG93biB0byBub2RlIGNvbnRhaW5lZCBieSBTUEFOLiAqKi9cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZUFuZE9mZnNldFdpdGhpblJvd18obm9kZSwgcG9zaXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtub2RlLCBwb3NpdGlvbl07XG4gICAgICB9XG4gICAgfVxuICAgIHBvc2l0aW9uIC09IG5vZGVUZXh0V2lkdGg7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG5vZGUgYW5kIG9mZnNldCBjb3JyZXNwb25kaW5nIHRvIHBvc2l0aW9uIHdpdGhpbiBsaW5lLlxuICogU3VwcG9ydHMgbGluZSBvdmVyZmxvdy5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IHJvdyBYLVJPVyBhdCBiZWdpbm5pbmcgb2YgbGluZS5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gc3RhcnQgU3RhcnQgcG9zaXRpb24gb2YgcmFuZ2Ugd2l0aGluIGxpbmUuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGVuZCBFbmQgcG9zaXRpb24gb2YgcmFuZ2Ugd2l0aGluIGxpbmUuXG4gKiBAcGFyYW0ge1JhbmdlfSByYW5nZSBSYW5nZSB0byBtb2RpZnkuXG4gKiovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLnNldFJhbmdlXyA9IGZ1bmN0aW9uKHJvdywgc3RhcnQsIGVuZCwgcmFuZ2UpIHtcbiAgdmFyIHN0YXJ0Tm9kZUFuZE9mZnNldCA9IHRoaXMuZ2V0Tm9kZUFuZE9mZnNldFdpdGhPdmVyZmxvd18ocm93LCBzdGFydCk7XG4gIGlmIChzdGFydE5vZGVBbmRPZmZzZXQgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgZW5kTm9kZUFuZE9mZnNldCA9IHRoaXMuZ2V0Tm9kZUFuZE9mZnNldFdpdGhPdmVyZmxvd18ocm93LCBlbmQpO1xuICBpZiAoZW5kTm9kZUFuZE9mZnNldCA9PSBudWxsKSByZXR1cm47XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0Tm9kZUFuZE9mZnNldFswXSwgc3RhcnROb2RlQW5kT2Zmc2V0WzFdKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZE5vZGVBbmRPZmZzZXRbMF0sIGVuZE5vZGVBbmRPZmZzZXRbMV0pO1xufTtcblxuLyoqXG4gKiBFeHBhbmRzIHNlbGVjdGlvbiB0byBzdXJyb3VuZGluZyBzdHJpbmcgd2l0aCB3b3JkIGJyZWFrIG1hdGNoZXMuXG4gKlxuICogQHBhcmFtIHtTZWxlY3Rpb259IHNlbGVjdGlvbiBTZWxlY3Rpb24gdG8gZXhwYW5kLlxuICogQHBhcmFtIHtzdHJpbmd9IGxlZnRNYXRjaCBsZWZ0IHdvcmQgYnJlYWsgbWF0Y2guXG4gKiBAcGFyYW0ge3N0cmluZ30gcmlnaHRNYXRjaCByaWdodCB3b3JkIGJyZWFrIG1hdGNoLlxuICogQHBhcmFtIHtzdHJpbmd9IGluc2lkZU1hdGNoIGluc2lkZSB3b3JkIGJyZWFrIG1hdGNoLlxuICovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLmV4cGFuZFNlbGVjdGlvbldpdGhXb3JkQnJlYWtNYXRjaGVzXyA9IGZ1bmN0aW9uKFxuICBzZWxlY3Rpb24sXG4gIGxlZnRNYXRjaCxcbiAgcmlnaHRNYXRjaCxcbiAgaW5zaWRlTWF0Y2gsXG4pIHtcbiAgaWYgKCFzZWxlY3Rpb24pIHJldHVybjtcblxuICB2YXIgcmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgaWYgKCFyYW5nZSB8fCByYW5nZS50b1N0cmluZygpLm1hdGNoKC9cXHMvKSkgcmV0dXJuO1xuXG4gIGNvbnN0IHJvd0VsZW1lbnQgPSB0aGlzLmdldFhSb3dBbmNlc3Rvcl8ocmFuZ2Uuc3RhcnRDb250YWluZXIpO1xuICBpZiAoIXJvd0VsZW1lbnQpIHJldHVybjtcbiAgY29uc3Qgcm93ID0gdGhpcy5nZXRMaW5lU3RhcnRSb3dfKHJvd0VsZW1lbnQpO1xuICBpZiAoIXJvdykgcmV0dXJuO1xuXG4gIHZhciBzdGFydFBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbldpdGhPdmVyZmxvd18oXG4gICAgcm93LFxuICAgIHJhbmdlLnN0YXJ0Q29udGFpbmVyLFxuICAgIHJhbmdlLnN0YXJ0T2Zmc2V0LFxuICApO1xuICBpZiAoc3RhcnRQb3NpdGlvbiA9PSAtMSkgcmV0dXJuO1xuICB2YXIgZW5kUG9zaXRpb24gPSB0aGlzLmdldFBvc2l0aW9uV2l0aE92ZXJmbG93XyhcbiAgICByb3csXG4gICAgcmFuZ2UuZW5kQ29udGFpbmVyLFxuICAgIHJhbmdlLmVuZE9mZnNldCxcbiAgKTtcbiAgaWYgKGVuZFBvc2l0aW9uID09IC0xKSByZXR1cm47XG5cbiAgLy9Nb3ZlIHN0YXJ0IHRvIHRoZSBsZWZ0LlxuICB2YXIgcm93VGV4dCA9IHRoaXMuZ2V0TGluZVRleHRfKHJvdyk7XG4gIHZhciBsaW5lVXBUb1JhbmdlID0gbGliLndjLnN1YnN0cmluZyhyb3dUZXh0LCAwLCBlbmRQb3NpdGlvbik7XG4gIHZhciBsZWZ0UmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKGxlZnRNYXRjaCArIGluc2lkZU1hdGNoICsgJyQnKTtcbiAgdmFyIGV4cGFuZGVkU3RhcnQgPSBsaW5lVXBUb1JhbmdlLnNlYXJjaChsZWZ0UmVndWxhckV4cHJlc3Npb24pO1xuICBpZiAoZXhwYW5kZWRTdGFydCA9PSAtMSB8fCBleHBhbmRlZFN0YXJ0ID4gc3RhcnRQb3NpdGlvbikgcmV0dXJuO1xuXG4gIC8vTW92ZSBlbmQgdG8gdGhlIHJpZ2h0LlxuICB2YXIgbGluZUZyb21SYW5nZSA9IGxpYi53Yy5zdWJzdHJpbmcoXG4gICAgcm93VGV4dCxcbiAgICBzdGFydFBvc2l0aW9uLFxuICAgIGxpYi53Yy5zdHJXaWR0aChyb3dUZXh0KSxcbiAgKTtcbiAgdmFyIHJpZ2h0UmVndWxhckV4cHJlc3Npb24gPSBuZXcgUmVnRXhwKCdeJyArIGluc2lkZU1hdGNoICsgcmlnaHRNYXRjaCk7XG4gIHZhciBmb3VuZCA9IGxpbmVGcm9tUmFuZ2UubWF0Y2gocmlnaHRSZWd1bGFyRXhwcmVzc2lvbik7XG4gIGlmICghZm91bmQpIHJldHVybjtcbiAgdmFyIGV4cGFuZGVkRW5kID0gc3RhcnRQb3NpdGlvbiArIGxpYi53Yy5zdHJXaWR0aChmb3VuZFswXSk7XG4gIGlmIChleHBhbmRlZEVuZCA9PSAtMSB8fCBleHBhbmRlZEVuZCA8IGVuZFBvc2l0aW9uKSByZXR1cm47XG5cbiAgdGhpcy5zZXRSYW5nZV8ocm93LCBleHBhbmRlZFN0YXJ0LCBleHBhbmRlZEVuZCwgcmFuZ2UpO1xuICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xufTtcblxuLyoqXG4gKiBFeHBhbmRzIHNlbGVjdGlvbiB0byBzdXJyb3VuZGluZyBzdHJpbmcgdXNpbmcgdGhlIHVzZXIncyBzZXR0aW5ncy5cbiAqXG4gKiBAcGFyYW0ge1NlbGVjdGlvbn0gc2VsZWN0aW9uIFNlbGVjdGlvbiB0byBleHBhbmQuXG4gKi9cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuZXhwYW5kU2VsZWN0aW9uID0gZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG4gIHRoaXMuZXhwYW5kU2VsZWN0aW9uV2l0aFdvcmRCcmVha01hdGNoZXNfKFxuICAgIHNlbGVjdGlvbixcbiAgICB0aGlzLndvcmRCcmVha01hdGNoTGVmdCxcbiAgICB0aGlzLndvcmRCcmVha01hdGNoUmlnaHQsXG4gICAgdGhpcy53b3JkQnJlYWtNYXRjaE1pZGRsZSxcbiAgKTtcbn07XG5cbi8qKlxuICogRXhwYW5kcyBzZWxlY3Rpb24gdG8gc3Vycm91bmRpbmcgVVJMIHVzaW5nIGEgc2V0IG9mIGZpeGVkIG1hdGNoIHNldHRpbmdzLlxuICpcbiAqIEBwYXJhbSB7U2VsZWN0aW9ufSBzZWxlY3Rpb24gU2VsZWN0aW9uIHRvIGV4cGFuZC5cbiAqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5leHBhbmRTZWxlY3Rpb25Gb3JVcmwgPSBmdW5jdGlvbihzZWxlY3Rpb24pIHtcbiAgdGhpcy5leHBhbmRTZWxlY3Rpb25XaXRoV29yZEJyZWFrTWF0Y2hlc18oXG4gICAgc2VsZWN0aW9uLFxuICAgICdbXlxcXFxzXFxcXFtcXFxcXSgpe308PlwiXFwnXFxcXF4hQCMkJSYqLDs6YF0nLFxuICAgICdbXlxcXFxzXFxcXFtcXFxcXSgpe308PlwiXFwnXFxcXF4hQCMkJSYqLDs6fi5gXScsXG4gICAgJ1teXFxcXHNcXFxcW1xcXFxdKCl7fTw+XCJcXCdcXFxcXl0qJyxcbiAgKTtcbn07XG5cbi8qKlxuICogU2F2ZSB0aGUgY3VycmVudCBjdXJzb3Igc3RhdGUgdG8gdGhlIGNvcnJlc3BvbmRpbmcgc2NyZWVucy5cbiAqXG4gKiBAcGFyYW0ge2h0ZXJtLlZUfSB2dCBUaGUgVlQgb2JqZWN0IHRvIHJlYWQgZ3JhcGhpYyBjb2Rlc2V0IGRldGFpbHMgZnJvbS5cbiAqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5zYXZlQ3Vyc29yQW5kU3RhdGUgPSBmdW5jdGlvbih2dCkge1xuICB0aGlzLmN1cnNvclN0YXRlXy5zYXZlKHZ0KTtcbn07XG5cbi8qKlxuICogUmVzdG9yZSB0aGUgc2F2ZWQgY3Vyc29yIHN0YXRlIGluIHRoZSBjb3JyZXNwb25kaW5nIHNjcmVlbnMuXG4gKlxuICogQHBhcmFtIHtodGVybS5WVH0gdnQgVGhlIFZUIG9iamVjdCB0byB3cml0ZSBncmFwaGljIGNvZGVzZXQgZGV0YWlscyB0by5cbiAqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5yZXN0b3JlQ3Vyc29yQW5kU3RhdGUgPSBmdW5jdGlvbih2dCkge1xuICB0aGlzLmN1cnNvclN0YXRlXy5yZXN0b3JlKHZ0KTtcbn07XG5cbi8qKlxuICogVHJhY2sgYWxsIHRoZSB0aGluZ3MgcmVsYXRlZCB0byB0aGUgY3VycmVudCBcImN1cnNvclwiLlxuICpcbiAqIFRoZSBzZXQgb2YgdGhpbmdzIHNhdmVkICYgcmVzdG9yZWQgaGVyZSBpcyBkZWZpbmVkIGJ5IERFQzpcbiAqIGh0dHBzOi8vdnQxMDAubmV0L2RvY3MvdnQ1MTAtcm0vREVDU0MuaHRtbFxuICogLSBDdXJzb3IgcG9zaXRpb25cbiAqIC0gQ2hhcmFjdGVyIGF0dHJpYnV0ZXMgc2V0IGJ5IHRoZSBTR1IgY29tbWFuZFxuICogLSBDaGFyYWN0ZXIgc2V0cyAoRzAsIEcxLCBHMiwgb3IgRzMpIGN1cnJlbnRseSBpbiBHTCBhbmQgR1JcbiAqIC0gV3JhcCBmbGFnIChhdXRvd3JhcCBvciBubyBhdXRvd3JhcClcbiAqIC0gU3RhdGUgb2Ygb3JpZ2luIG1vZGUgKERFQ09NKVxuICogLSBTZWxlY3RpdmUgZXJhc2UgYXR0cmlidXRlXG4gKiAtIEFueSBzaW5nbGUgc2hpZnQgMiAoU1MyKSBvciBzaW5nbGUgc2hpZnQgMyAoU1MzKSBmdW5jdGlvbnMgc2VudFxuICpcbiAqIFRoZXNlIGFyZSBkb25lIG9uIGEgcGVyLXNjcmVlbiBiYXNpcy5cbiAqL1xuaHRlcm0uU2NyZWVuLkN1cnNvclN0YXRlID0gZnVuY3Rpb24oc2NyZWVuKSB7XG4gIHRoaXMuc2NyZWVuXyA9IHNjcmVlbjtcbiAgdGhpcy5jdXJzb3IgPSBudWxsO1xuICB0aGlzLnRleHRBdHRyaWJ1dGVzID0gbnVsbDtcbiAgdGhpcy5HTCA9IHRoaXMuR1IgPSB0aGlzLkcwID0gdGhpcy5HMSA9IHRoaXMuRzIgPSB0aGlzLkczID0gbnVsbDtcbn07XG5cbi8qKlxuICogU2F2ZSBhbGwgdGhlIGN1cnNvciBzdGF0ZS5cbiAqXG4gKiBAcGFyYW0ge2h0ZXJtLlZUfSB2dCBUaGUgVlQgb2JqZWN0IHRvIHJlYWQgZ3JhcGhpYyBjb2Rlc2V0IGRldGFpbHMgZnJvbS5cbiAqL1xuaHRlcm0uU2NyZWVuLkN1cnNvclN0YXRlLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24odnQpIHtcbiAgdGhpcy5jdXJzb3IgPSB2dC50ZXJtaW5hbC5zYXZlQ3Vyc29yKCk7XG5cbiAgdGhpcy50ZXh0QXR0cmlidXRlcyA9IHRoaXMuc2NyZWVuXy50ZXh0QXR0cmlidXRlcy5jbG9uZSgpO1xuXG4gIHRoaXMuR0wgPSB2dC5HTDtcbiAgdGhpcy5HUiA9IHZ0LkdSO1xuXG4gIHRoaXMuRzAgPSB2dC5HMDtcbiAgdGhpcy5HMSA9IHZ0LkcxO1xuICB0aGlzLkcyID0gdnQuRzI7XG4gIHRoaXMuRzMgPSB2dC5HMztcbn07XG5cbi8qKlxuICogUmVzdG9yZSB0aGUgcHJldmlvdXNseSBzYXZlZCBjdXJzb3Igc3RhdGUuXG4gKlxuICogQHBhcmFtIHtodGVybS5WVH0gdnQgVGhlIFZUIG9iamVjdCB0byB3cml0ZSBncmFwaGljIGNvZGVzZXQgZGV0YWlscyB0by5cbiAqL1xuaHRlcm0uU2NyZWVuLkN1cnNvclN0YXRlLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24odnQpIHtcbiAgdnQudGVybWluYWwucmVzdG9yZUN1cnNvcih0aGlzLmN1cnNvcik7XG5cbiAgLy8gQ3Vyc29yIHJlc3RvcmUgaW5jbHVkZXMgY2hhciBhdHRyaWJ1dGVzIChib2xkL2V0Yy4uLiksIGJ1dCBkb2VzIG5vdCBjaGFuZ2VcbiAgLy8gdGhlIGNvbG9yIHBhbGV0dGUgKHdoaWNoIGFyZSBhIHRlcm1pbmFsIHNldHRpbmcpLlxuICBjb25zdCB0YXR0cnMgPSB0aGlzLnRleHRBdHRyaWJ1dGVzLmNsb25lKCk7XG4gIHRhdHRycy5jb2xvclBhbGV0dGUgPSB0aGlzLnNjcmVlbl8udGV4dEF0dHJpYnV0ZXMuY29sb3JQYWxldHRlO1xuICB0YXR0cnMuc3luY0NvbG9ycygpO1xuXG4gIHRoaXMuc2NyZWVuXy50ZXh0QXR0cmlidXRlcyA9IHRhdHRycztcblxuICB2dC5HTCA9IHRoaXMuR0w7XG4gIHZ0LkdSID0gdGhpcy5HUjtcblxuICB2dC5HMCA9IHRoaXMuRzA7XG4gIHZ0LkcxID0gdGhpcy5HMTtcbiAgdnQuRzIgPSB0aGlzLkcyO1xuICB2dC5HMyA9IHRoaXMuRzM7XG59O1xuLy8gU09VUkNFIEZJTEU6IGh0ZXJtL2pzL2h0ZXJtX3Njcm9sbHBvcnQuanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxpYi5ydGRlcCgnbGliLmYnLCAnaHRlcm0uUHViU3ViJywgJ2h0ZXJtLlNpemUnKTtcblxuLyoqXG4gKiBBICd2aWV3cG9ydCcgdmlldyBvZiBmaXhlZC1oZWlnaHQgcm93cyB3aXRoIHN1cHBvcnQgZm9yIHNlbGVjdGlvbiBhbmRcbiAqIGNvcHktdG8tY2xpcGJvYXJkLlxuICpcbiAqICdWaWV3cG9ydCcgaW4gdGhpcyBjYXNlIG1lYW5zIHRoYXQgb25seSB0aGUgdmlzaWJsZSByb3dzIGFyZSBpbiB0aGUgRE9NLlxuICogSWYgdGhlIHJvd1Byb3ZpZGVyIGhhcyAxMDAsMDAwIHJvd3MsIGJ1dCB0aGUgU2Nyb2xsUG9ydCBpcyBvbmx5IDI1IHJvd3NcbiAqIHRhbGwsIHRoZW4gb25seSAyNSBkb20gbm9kZXMgYXJlIGNyZWF0ZWQuICBUaGUgU2Nyb2xsUG9ydCB3aWxsIGFzayB0aGVcbiAqIFJvd1Byb3ZpZGVyIHRvIGNyZWF0ZSBuZXcgdmlzaWJsZSByb3dzIG9uIGRlbWFuZCBhcyB0aGV5IGFyZSBzY3JvbGxlZCBpblxuICogdG8gdGhlIHZpc2libGUgYXJlYS5cbiAqXG4gKiBUaGlzIHZpZXdwb3J0IGlzIGRlc2lnbmVkIHNvIHRoYXQgc2VsZWN0IGFuZCBjb3B5LXRvLWNsaXBib2FyZCBzdGlsbCB3b3JrcyxcbiAqIGV2ZW4gd2hlbiBhbGwgb3IgcGFydCBvZiB0aGUgc2VsZWN0aW9uIGlzIHNjcm9sbGVkIG9mZiBzY3JlZW4uXG4gKlxuICogTm90ZSB0aGF0IHRoZSBYMTEgbW91c2UgY2xpcGJvYXJkIGRvZXMgbm90IHdvcmsgcHJvcGVybHkgd2hlbiBhbGwgb3IgcGFydFxuICogb2YgdGhlIHNlbGVjdGlvbiBpcyBvZmYgc2NyZWVuLiAgSXQgd291bGQgYmUgZGlmZmljdWx0IHRvIGZpeCB0aGlzIHdpdGhvdXRcbiAqIGFkZGluZyBzaWduaWZpY2FudCBvdmVyaGVhZCB0byBwYXRob2xvZ2ljYWxseSBsYXJnZSBzZWxlY3Rpb24gY2FzZXMuXG4gKlxuICogVGhlIFJvd1Byb3ZpZGVyIHNob3VsZCByZXR1cm4gcm93cyByb290ZWQgYnkgdGhlIGN1c3RvbSB0YWcgbmFtZSAneC1yb3cnLlxuICogVGhpcyBlbnN1cmVzIHRoYXQgd2UgY2FuIHF1aWNrbHkgYXNzaWduIHRoZSBjb3JyZWN0IGRpc3BsYXkgaGVpZ2h0XG4gKiB0byB0aGUgcm93cyB3aXRoIGNzcy5cbiAqXG4gKiBAcGFyYW0ge1Jvd1Byb3ZpZGVyfSByb3dQcm92aWRlciBBbiBvYmplY3QgY2FwYWJsZSBvZiBwcm92aWRpbmcgcm93cyBhc1xuICogICAgIHJhdyB0ZXh0IG9yIHJvdyBub2Rlcy5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydCA9IGZ1bmN0aW9uKHJvd1Byb3ZpZGVyKSB7XG4gIGh0ZXJtLlB1YlN1Yi5hZGRCZWhhdmlvcih0aGlzKTtcblxuICB0aGlzLnJvd1Byb3ZpZGVyXyA9IHJvd1Byb3ZpZGVyO1xuXG4gIC8vIFNXQUcgdGhlIGNoYXJhY3RlciBzaXplIHVudGlsIHdlIGNhbiBtZWFzdXJlIGl0LlxuICB0aGlzLmNoYXJhY3RlclNpemUgPSBuZXcgaHRlcm0uU2l6ZSgxMCwgMTApO1xuXG4gIC8vIERPTSBub2RlIHVzZWQgZm9yIGNoYXJhY3RlciBtZWFzdXJlbWVudC5cbiAgdGhpcy5ydWxlcl8gPSBudWxsO1xuXG4gIHRoaXMuc2VsZWN0aW9uID0gbmV3IGh0ZXJtLlNjcm9sbFBvcnQuU2VsZWN0aW9uKHRoaXMpO1xuXG4gIC8vIEEgbWFwIG9mIHJvd0luZGV4ID0+IHJvd05vZGUgZm9yIGVhY2ggcm93IHRoYXQgaXMgZHJhd24gYXMgcGFydCBvZiBhXG4gIC8vIHBlbmRpbmcgcmVkcmF3XygpIGNhbGwuICBOdWxsIGlmIHRoZXJlIGlzIG5vIHBlbmRpbmcgcmVkcmF3XyBjYWxsLlxuICB0aGlzLmN1cnJlbnRSb3dOb2RlQ2FjaGVfID0gbnVsbDtcblxuICAvLyBBIG1hcCBvZiByb3dJbmRleCA9PiByb3dOb2RlIGZvciBlYWNoIHJvdyB0aGF0IHdhcyBkcmF3biBhcyBwYXJ0IG9mIHRoZVxuICAvLyBwcmV2aW91cyByZWRyYXdfKCkgY2FsbC5cbiAgdGhpcy5wcmV2aW91c1Jvd05vZGVDYWNoZV8gPSB7fTtcblxuICAvLyBVc2VkIGR1cmluZyBzY3JvbGwgZXZlbnRzIHRvIGRldGVjdCB3aGVuIHRoZSB1bmRlcmx5aW5nIGNhdXNlIGlzIGEgcmVzaXplLlxuICB0aGlzLmxhc3RTY3JlZW5XaWR0aF8gPSBudWxsO1xuICB0aGlzLmxhc3RTY3JlZW5IZWlnaHRfID0gbnVsbDtcblxuICAvLyBUcnVlIGlmIHRoZSB1c2VyIHNob3VsZCBiZSBhbGxvd2VkIHRvIHNlbGVjdCB0ZXh0IGluIHRoZSB0ZXJtaW5hbC5cbiAgLy8gVGhpcyBpcyBkaXNhYmxlZCB3aGVuIHRoZSBob3N0IHJlcXVlc3RzIG1vdXNlIGRyYWcgZXZlbnRzIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIHdpdGggdHdvIG5vdGlvbnMgb2Ygc2VsZWN0aW9uLlxuICB0aGlzLnNlbGVjdGlvbkVuYWJsZWRfID0gdHJ1ZTtcblxuICAvLyBUaGUgbGFzdCByb3cgY291bnQgcmV0dXJuZWQgYnkgdGhlIHJvdyBwcm92aWRlciwgcmUtcG9wdWxhdGVkIGR1cmluZ1xuICAvLyBzeW5jU2Nyb2xsSGVpZ2h0KCkuXG4gIHRoaXMubGFzdFJvd0NvdW50XyA9IDA7XG5cbiAgLy8gVGhlIHNjcm9sbCB3aGVlbCBwaXhlbCBkZWx0YSBtdWx0aXBsaWVyIHRvIGluY3JlYXNlL2RlY3JlYXNlXG4gIC8vIHRoZSBzY3JvbGwgc3BlZWQgb2YgbW91c2Ugd2hlZWwgZXZlbnRzLiBTZWU6IGh0dHBzOi8vZ29vLmdsL3NYZWxucVxuICB0aGlzLnNjcm9sbFdoZWVsTXVsdGlwbGllcl8gPSAxO1xuXG4gIC8vIFRoZSBsYXN0IHRvdWNoIGV2ZW50cyB3ZSBzYXcgdG8gc3VwcG9ydCB0b3VjaCBiYXNlZCBzY3JvbGxpbmcuICBJbmRleGVkXG4gIC8vIGJ5IHRvdWNoIGlkZW50aWZpZXIgc2luY2Ugd2UgY2FuIGhhdmUgbW9yZSB0aGFuIG9uZSB0b3VjaCBhY3RpdmUuXG4gIHRoaXMubGFzdFRvdWNoXyA9IHt9O1xuXG4gIC8qKlxuICAgKiBUcnVlIGlmIHRoZSBsYXN0IHNjcm9sbCBjYXVzZWQgdGhlIHNjcm9sbHBvcnQgdG8gc2hvdyB0aGUgZmluYWwgcm93LlxuICAgKi9cbiAgdGhpcy5pc1Njcm9sbGVkRW5kID0gdHJ1ZTtcblxuICAvKipcbiAgICogQSBndWVzcyBhdCB0aGUgY3VycmVudCBzY3JvbGxiYXIgd2lkdGgsIGZpeGVkIGluIHJlc2l6ZSgpLlxuICAgKi9cbiAgdGhpcy5jdXJyZW50U2Nyb2xsYmFyV2lkdGhQeCA9IDE2O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBjdHJsLXYga2V5IG9uIHRoZSBzY3JlZW4gc2hvdWxkIHBhc3RlLlxuICAgKi9cbiAgdGhpcy5jdHJsVlBhc3RlID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcGFzdGUgb24gZHJvcHBlZCB0ZXh0LlxuICAgKi9cbiAgdGhpcy5wYXN0ZU9uRHJvcCA9IHRydWU7XG5cbiAgdGhpcy5kaXZfID0gbnVsbDtcbiAgdGhpcy5kb2N1bWVudF8gPSBudWxsO1xuXG4gIC8vIENvbGxlY3Rpb24gb2YgYWN0aXZlIHRpbWVvdXQgaGFuZGxlcy5cbiAgdGhpcy50aW1lb3V0c18gPSB7fTtcblxuICB0aGlzLm9ic2VydmVyc18gPSB7fTtcblxuICB0aGlzLkRFQlVHXyA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBQcm94eSBmb3IgdGhlIG5hdGl2ZSBzZWxlY3Rpb24gb2JqZWN0IHdoaWNoIHVuZGVyc3RhbmRzIGhvdyB0byB3YWxrIHVwIHRoZVxuICogRE9NIHRvIGZpbmQgdGhlIGNvbnRhaW5pbmcgcm93IG5vZGUgYW5kIHNvcnQgb3V0IHdoaWNoIGNvbWVzIGZpcnN0LlxuICpcbiAqIEBwYXJhbSB7aHRlcm0uU2Nyb2xsUG9ydH0gc2Nyb2xsUG9ydCBUaGUgcGFyZW50IGh0ZXJtLlNjcm9sbFBvcnQgaW5zdGFuY2UuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQuU2VsZWN0aW9uID0gZnVuY3Rpb24oc2Nyb2xsUG9ydCkge1xuICB0aGlzLnNjcm9sbFBvcnRfID0gc2Nyb2xsUG9ydDtcblxuICAvKipcbiAgICogVGhlIHJvdyBjb250YWluaW5nIHRoZSBzdGFydCBvZiB0aGUgc2VsZWN0aW9uLlxuICAgKlxuICAgKiBUaGlzIG1heSBiZSBwYXJ0aWFsbHkgb3IgZnVsbHkgc2VsZWN0ZWQuICBJdCBtYXkgYmUgdGhlIHNlbGVjdGlvbiBhbmNob3JcbiAgICogb3IgdGhlIGZvY3VzLCBidXQgaXRzIHJvd0luZGV4IGlzIGd1YXJhbnRlZWQgdG8gYmUgbGVzcy10aGFuLW9yLWVxdWFsLXRvXG4gICAqIHRoYXQgb2YgdGhlIGVuZFJvdy5cbiAgICpcbiAgICogSWYgb25seSBvbmUgcm93IGlzIHNlbGVjdGVkIHRoZW4gc3RhcnRSb3cgPT0gZW5kUm93LiAgSWYgdGhlcmUgaXMgbm9cbiAgICogc2VsZWN0aW9uIG9yIHRoZSBzZWxlY3Rpb24gaXMgY29sbGFwc2VkIHRoZW4gc3RhcnRSb3cgPT0gbnVsbC5cbiAgICovXG4gIHRoaXMuc3RhcnRSb3cgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgcm93IGNvbnRhaW5pbmcgdGhlIGVuZCBvZiB0aGUgc2VsZWN0aW9uLlxuICAgKlxuICAgKiBUaGlzIG1heSBiZSBwYXJ0aWFsbHkgb3IgZnVsbHkgc2VsZWN0ZWQuICBJdCBtYXkgYmUgdGhlIHNlbGVjdGlvbiBhbmNob3JcbiAgICogb3IgdGhlIGZvY3VzLCBidXQgaXRzIHJvd0luZGV4IGlzIGd1YXJhbnRlZWQgdG8gYmUgZ3JlYXRlci10aGFuLW9yLWVxdWFsLXRvXG4gICAqIHRoYXQgb2YgdGhlIHN0YXJ0Um93LlxuICAgKlxuICAgKiBJZiBvbmx5IG9uZSByb3cgaXMgc2VsZWN0ZWQgdGhlbiBzdGFydFJvdyA9PSBlbmRSb3cuICBJZiB0aGVyZSBpcyBub1xuICAgKiBzZWxlY3Rpb24gb3IgdGhlIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQgdGhlbiBzdGFydFJvdyA9PSBudWxsLlxuICAgKi9cbiAgdGhpcy5lbmRSb3cgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUcnVlIGlmIHN0YXJ0Um93ICE9IGVuZFJvdy5cbiAgICovXG4gIHRoaXMuaXNNdWx0aWxpbmUgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUcnVlIGlmIHRoZSBzZWxlY3Rpb24gaXMganVzdCBhIHBvaW50IHJhdGhlciB0aGFuIGEgcmFuZ2UuXG4gICAqL1xuICB0aGlzLmlzQ29sbGFwc2VkID0gbnVsbDtcbn07XG5cbi8qKlxuICogR2l2ZW4gYSBsaXN0IG9mIERPTSBub2RlcyBhbmQgYSBjb250YWluZXIsIHJldHVybiB0aGUgRE9NIG5vZGUgdGhhdFxuICogaXMgZmlyc3QgYWNjb3JkaW5nIHRvIGEgZGVwdGgtZmlyc3Qgc2VhcmNoLlxuICpcbiAqIFJldHVybnMgbnVsbCBpZiBub25lIG9mIHRoZSBjaGlsZHJlbiBhcmUgZm91bmQuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQuU2VsZWN0aW9uLnByb3RvdHlwZS5maW5kRmlyc3RDaGlsZCA9IGZ1bmN0aW9uKFxuICBwYXJlbnQsXG4gIGNoaWxkQXJ5LFxuKSB7XG4gIHZhciBub2RlID0gcGFyZW50LmZpcnN0Q2hpbGQ7XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAoY2hpbGRBcnkuaW5kZXhPZihub2RlKSAhPSAtMSkgcmV0dXJuIG5vZGU7XG5cbiAgICBpZiAobm9kZS5jaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgdmFyIHJ2ID0gdGhpcy5maW5kRmlyc3RDaGlsZChub2RlLCBjaGlsZEFyeSk7XG4gICAgICBpZiAocnYpIHJldHVybiBydjtcbiAgICB9XG5cbiAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBTeW5jaHJvbml6ZSB0aGlzIG9iamVjdCB3aXRoIHRoZSBjdXJyZW50IERPTSBzZWxlY3Rpb24uXG4gKlxuICogVGhpcyBpcyBhIG9uZS13YXkgc3luY2hyb25pemF0aW9uLCB0aGUgRE9NIHNlbGVjdGlvbiBpcyBjb3BpZWQgdG8gdGhpc1xuICogb2JqZWN0LCBub3QgdGhlIG90aGVyIHdheSBhcm91bmQuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQuU2VsZWN0aW9uLnByb3RvdHlwZS5zeW5jID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyBUaGUgZG9tIHNlbGVjdGlvbiBvYmplY3QgaGFzIG5vIHdheSB0byB0ZWxsIHdoaWNoIG5vZGVzIGNvbWUgZmlyc3QgaW5cbiAgLy8gdGhlIGRvY3VtZW50LCBzbyB3ZSBoYXZlIHRvIGZpZ3VyZSB0aGF0IG91dC5cbiAgLy9cbiAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHdoZW4gd2UgZGV0ZWN0IHRoYXQgdGhlIFwiYW5jaG9yXCIgbm9kZSBpcyBmaXJzdC5cbiAgZnVuY3Rpb24gYW5jaG9yRmlyc3QoKSB7XG4gICAgc2VsZi5zdGFydFJvdyA9IGFuY2hvclJvdztcbiAgICBzZWxmLnN0YXJ0Tm9kZSA9IHNlbGVjdGlvbi5hbmNob3JOb2RlO1xuICAgIHNlbGYuc3RhcnRPZmZzZXQgPSBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xuICAgIHNlbGYuZW5kUm93ID0gZm9jdXNSb3c7XG4gICAgc2VsZi5lbmROb2RlID0gc2VsZWN0aW9uLmZvY3VzTm9kZTtcbiAgICBzZWxmLmVuZE9mZnNldCA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcbiAgfVxuXG4gIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB3aGVuIHdlIGRldGVjdCB0aGF0IHRoZSBcImZvY3VzXCIgbm9kZSBpcyBmaXJzdC5cbiAgZnVuY3Rpb24gZm9jdXNGaXJzdCgpIHtcbiAgICBzZWxmLnN0YXJ0Um93ID0gZm9jdXNSb3c7XG4gICAgc2VsZi5zdGFydE5vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICAgIHNlbGYuc3RhcnRPZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG4gICAgc2VsZi5lbmRSb3cgPSBhbmNob3JSb3c7XG4gICAgc2VsZi5lbmROb2RlID0gc2VsZWN0aW9uLmFuY2hvck5vZGU7XG4gICAgc2VsZi5lbmRPZmZzZXQgPSBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IHRoaXMuc2Nyb2xsUG9ydF8uZ2V0RG9jdW1lbnQoKS5nZXRTZWxlY3Rpb24oKTtcblxuICB0aGlzLnN0YXJ0Um93ID0gbnVsbDtcbiAgdGhpcy5lbmRSb3cgPSBudWxsO1xuICB0aGlzLmlzTXVsdGlsaW5lID0gbnVsbDtcbiAgdGhpcy5pc0NvbGxhcHNlZCA9ICFzZWxlY3Rpb24gfHwgc2VsZWN0aW9uLmlzQ29sbGFwc2VkO1xuXG4gIGlmICghc2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVXN1YWxseSBjb2xsYXBzZWQgc2VsZWN0aW9ucyB3b3VsZG4ndCBiZSBpbnRlcmVzdGluZywgaG93ZXZlciBzY3JlZW5cbiAgLy8gcmVhZGVycyB3aWxsIHNldCBhIGNvbGxhcHNlZCBzZWxlY3Rpb24gYXMgdGhleSBuYXZpZ2F0ZSB0aHJvdWdoIHRoZSBET00uXG4gIC8vIEl0IGlzIGltcG9ydGFudCB0byBwcmVzZXJ2ZSB0aGVzZSBub2RlcyBpbiB0aGUgRE9NIGFzIHNjcm9sbGluZyBoYXBwZW5zXG4gIC8vIHNvIHRoYXQgc2NyZWVuIHJlYWRlciBuYXZpZ2F0aW9uIGlzbid0IGNsZWFyZWQuXG4gIGNvbnN0IGFjY2Vzc2liaWxpdHlFbmFibGVkID1cbiAgICB0aGlzLnNjcm9sbFBvcnRfLmFjY2Vzc2liaWxpdHlSZWFkZXJfICYmXG4gICAgdGhpcy5zY3JvbGxQb3J0Xy5hY2Nlc3NpYmlsaXR5UmVhZGVyXy5hY2Nlc3NpYmlsaXR5RW5hYmxlZDtcbiAgaWYgKHRoaXMuaXNDb2xsYXBzZWQgJiYgIWFjY2Vzc2liaWxpdHlFbmFibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGFuY2hvclJvdyA9IHNlbGVjdGlvbi5hbmNob3JOb2RlO1xuICB3aGlsZSAoYW5jaG9yUm93ICYmIGFuY2hvclJvdy5ub2RlTmFtZSAhPSAnWC1ST1cnKSB7XG4gICAgYW5jaG9yUm93ID0gYW5jaG9yUm93LnBhcmVudE5vZGU7XG4gIH1cblxuICBpZiAoIWFuY2hvclJvdykge1xuICAgIC8vIERvbid0IHNldCBhIHNlbGVjdGlvbiBpZiBpdCdzIG5vdCBhIHJvdyBub2RlIHRoYXQncyBzZWxlY3RlZC5cbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZm9jdXNSb3cgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICB3aGlsZSAoZm9jdXNSb3cgJiYgZm9jdXNSb3cubm9kZU5hbWUgIT0gJ1gtUk9XJykge1xuICAgIGZvY3VzUm93ID0gZm9jdXNSb3cucGFyZW50Tm9kZTtcbiAgfVxuXG4gIGlmICghZm9jdXNSb3cpIHtcbiAgICAvLyBEb24ndCBzZXQgYSBzZWxlY3Rpb24gaWYgaXQncyBub3QgYSByb3cgbm9kZSB0aGF0J3Mgc2VsZWN0ZWQuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGFuY2hvclJvdy5yb3dJbmRleCA8IGZvY3VzUm93LnJvd0luZGV4KSB7XG4gICAgYW5jaG9yRmlyc3QoKTtcbiAgfSBlbHNlIGlmIChhbmNob3JSb3cucm93SW5kZXggPiBmb2N1c1Jvdy5yb3dJbmRleCkge1xuICAgIGZvY3VzRmlyc3QoKTtcbiAgfSBlbHNlIGlmIChzZWxlY3Rpb24uZm9jdXNOb2RlID09IHNlbGVjdGlvbi5hbmNob3JOb2RlKSB7XG4gICAgaWYgKHNlbGVjdGlvbi5hbmNob3JPZmZzZXQgPCBzZWxlY3Rpb24uZm9jdXNPZmZzZXQpIHtcbiAgICAgIGFuY2hvckZpcnN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvY3VzRmlyc3QoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIHNlbGVjdGlvbiBzdGFydHMgYW5kIGVuZHMgaW4gdGhlIHNhbWUgcm93LCBidXQgaXNuJ3QgY29udGFpbmVkIGFsbFxuICAgIC8vIGluIGEgc2luZ2xlIG5vZGUuXG4gICAgdmFyIGZpcnN0Tm9kZSA9IHRoaXMuZmluZEZpcnN0Q2hpbGQoYW5jaG9yUm93LCBbXG4gICAgICBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIHNlbGVjdGlvbi5mb2N1c05vZGUsXG4gICAgXSk7XG5cbiAgICBpZiAoIWZpcnN0Tm9kZSkgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGVycm9yIHN5bmNpbmcgc2VsZWN0aW9uLicpO1xuXG4gICAgaWYgKGZpcnN0Tm9kZSA9PSBzZWxlY3Rpb24uYW5jaG9yTm9kZSkge1xuICAgICAgYW5jaG9yRmlyc3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9jdXNGaXJzdCgpO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuaXNNdWx0aWxpbmUgPSBhbmNob3JSb3cucm93SW5kZXggIT0gZm9jdXNSb3cucm93SW5kZXg7XG59O1xuXG4vKipcbiAqIFR1cm4gYSBkaXYgaW50byB0aGlzIGh0ZXJtLlNjcm9sbFBvcnQuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLmRlY29yYXRlID0gZnVuY3Rpb24oZGl2KSB7XG4gIHRoaXMuZGl2XyA9IGRpdjtcblxuICB0aGlzLmlmcmFtZV8gPSBkaXYub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdGhpcy5pZnJhbWVfLnN0eWxlLmNzc1RleHQgPVxuICAgICdib3JkZXI6IDA7JyArICdoZWlnaHQ6IDEwMCU7JyArICdwb3NpdGlvbjogYWJzb2x1dGU7JyArICd3aWR0aDogMTAwJSc7XG5cbiAgLy8gU2V0IHRoZSBpZnJhbWUgc3JjIHRvICMgaW4gRkYuICBPdGhlcndpc2Ugd2hlbiB0aGUgZnJhbWUnc1xuICAvLyBsb2FkIGV2ZW50IGZpcmVzIGluIEZGIGl0IGNsZWFycyBvdXQgdGhlIGNvbnRlbnQgb2YgdGhlIGlmcmFtZS5cbiAgaWYgKCdtb3pJbm5lclNjcmVlblgnIGluIHdpbmRvdylcbiAgICAvLyBkZXRlY3QgYSBGRiBvbmx5IHByb3BlcnR5XG4gICAgdGhpcy5pZnJhbWVfLnNyYyA9ICcjJztcblxuICBkaXYuYXBwZW5kQ2hpbGQodGhpcy5pZnJhbWVfKTtcblxuICB0aGlzLmlmcmFtZV8uY29udGVudFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICdyZXNpemUnLFxuICAgIHRoaXMub25SZXNpemVfLmJpbmQodGhpcyksXG4gICk7XG5cbiAgdmFyIGRvYyA9ICh0aGlzLmRvY3VtZW50XyA9IHRoaXMuaWZyYW1lXy5jb250ZW50RG9jdW1lbnQpO1xuICBkb2MuYm9keS5zdHlsZS5jc3NUZXh0ID1cbiAgICAnbWFyZ2luOiAwcHg7JyArXG4gICAgJ3BhZGRpbmc6IDBweDsnICtcbiAgICAnaGVpZ2h0OiAxMDAlOycgK1xuICAgICd3aWR0aDogMTAwJTsnICtcbiAgICAnb3ZlcmZsb3c6IGhpZGRlbjsnICtcbiAgICAnY3Vyc29yOiB2YXIoLS1odGVybS1tb3VzZS1jdXJzb3Itc3R5bGUpOycgK1xuICAgICctd2Via2l0LXVzZXItc2VsZWN0OiBub25lOycgK1xuICAgICctbW96LXVzZXItc2VsZWN0OiBub25lOyc7XG5cbiAgY29uc3QgbWV0YUNoYXJzZXQgPSBkb2MuY3JlYXRlRWxlbWVudCgnbWV0YScpO1xuICBtZXRhQ2hhcnNldC5zZXRBdHRyaWJ1dGUoJ2NoYXJzZXQnLCAndXRmLTgnKTtcbiAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQobWV0YUNoYXJzZXQpO1xuXG4gIGlmICh0aGlzLkRFQlVHXykge1xuICAgIC8vIFdoZW4gd2UncmUgZGVidWdnaW5nIHdlIGFkZCBwYWRkaW5nIHRvIHRoZSBib2R5IHNvIHRoYXQgdGhlIG9mZnNjcmVlblxuICAgIC8vIGVsZW1lbnRzIGFyZSB2aXNpYmxlLlxuICAgIHRoaXMuZG9jdW1lbnRfLmJvZHkuc3R5bGUucGFkZGluZ1RvcCA9IHRoaXMuZG9jdW1lbnRfLmJvZHkuc3R5bGUucGFkZGluZ0JvdHRvbSA9XG4gICAgICAnY2FsYyh2YXIoLS1odGVybS1jaGFyc2l6ZS1oZWlnaHQpICogMyknO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgLy8gSGlkZSByb3dzIHRoYXQgYXJlIGFib3ZlIG9yIGJlbG93IHRoZSB4LWZvbGQgZWxlbWVudHMuIFRoaXMgaXMgbmVjZXNzYXJ5IHRvXG4gIC8vIGVuc3VyZSB0aGF0IHRoZXNlIHJvd3MgYXJlbid0IHZpc2libGUgdG8gYSBzY3JlZW4gcmVhZGVyLiBGaXJzdCBoaWRlIGFsbFxuICAvLyByb3dzIHRoYXQgYXJlIGNoaWxkcmVuIG9mIHRoZSA8eC1zY3JlZW4+LiBUaGVuIGRpc3BsYXkgdGhlIG5vZGVzIHRoYXQgYXJlXG4gIC8vIGFmdGVyIHRoZSB0b3AgZm9sZC4gVGhlbiByZWhpZGUgbm9kZXMgdGhhdCBhcmUgYWZ0ZXIgdGhlIGJvdHRvbSBmb2xkLlxuICBzdHlsZS50ZXh0Q29udGVudCA9IGBcbiAgICAgIHgtcm93IHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGhlaWdodDogdmFyKC0taHRlcm0tY2hhcnNpemUtaGVpZ2h0KTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IHZhcigtLWh0ZXJtLWNoYXJzaXplLWhlaWdodCk7XG4gICAgICB9XG5cbiAgICAgIHgtc2NyZWVuIHgtcm93IHtcbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAjaHRlcm1cXFxcOnRvcC1mb2xkLWZvci1yb3ctc2VsZWN0aW9uIH4geC1yb3cge1xuICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgICAgfVxuXG4gICAgICAjaHRlcm1cXFxcOmJvdHRvbS1mb2xkLWZvci1yb3ctc2VsZWN0aW9uIH4geC1yb3cge1xuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICB9YDtcbiAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXG4gIHRoaXMudXNlckNzc0xpbmtfID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgdGhpcy51c2VyQ3NzTGlua18uc2V0QXR0cmlidXRlKCdyZWwnLCAnc3R5bGVzaGVldCcpO1xuXG4gIHRoaXMudXNlckNzc1RleHRfID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIGRvYy5oZWFkLmFwcGVuZENoaWxkKHRoaXMudXNlckNzc1RleHRfKTtcblxuICAvLyBUT0RPKHJnaW5kYSk6IFNvcnJ5LCB0aGlzICdzY3JlZW5fJyBpc24ndCB0aGUgc2FtZSB0aGluZyBhcyBodGVybS5TY3JlZW5cbiAgLy8gZnJvbSBzY3JlZW4uanMuICBJIG5lZWQgdG8gcGljayBhIGJldHRlciBuYW1lIGZvciBvbmUgb2YgdGhlbSB0byBhdm9pZFxuICAvLyB0aGUgY29sbGlzaW9uLlxuICAvLyBXZSBtYWtlIHRoaXMgZmllbGQgZWRpdGFibGUgZXZlbiB0aG91Z2ggd2UgZG9uJ3QgYWN0dWFsbHkgYWxsb3cgYW55dGhpbmdcbiAgLy8gdG8gYmUgZWRpdGVkIGhlcmUgc28gdGhhdCBDaHJvbWUgd2lsbCBkbyB0aGUgcmlnaHQgdGhpbmcgd2l0aCB2aXJ0dWFsXG4gIC8vIGtleWJvYXJkcyBhbmQgSU1Fcy4gIEJ1dCBtYWtlIHN1cmUgd2UgdHVybiBvZmYgYWxsIHRoZSBpbnB1dCBoZWxwZXIgbG9naWNcbiAgLy8gdGhhdCBkb2Vzbid0IG1ha2Ugc2Vuc2UgaGVyZSwgYW5kIG1pZ2h0IGluYWR2ZXJ0ZW50bHkgbXVuZyBvciBzYXZlIGlucHV0LlxuICAvLyBTb21lIG9mIHRoZXNlIGF0dHJpYnV0ZXMgYXJlIHN0YW5kYXJkIHdoaWxlIG90aGVycyBhcmUgYnJvd3NlciBzcGVjaWZpYyxcbiAgLy8gYnV0IHNob3VsZCBiZSBzYWZlbHkgaWdub3JlZCBieSBvdGhlciBicm93c2Vycy5cbiAgdGhpcy5zY3JlZW5fID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3gtc2NyZWVuJyk7XG4gIHRoaXMuc2NyZWVuXy5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsICd0cnVlJyk7XG4gIHRoaXMuc2NyZWVuXy5zZXRBdHRyaWJ1dGUoJ3NwZWxsY2hlY2snLCAnZmFsc2UnKTtcbiAgdGhpcy5zY3JlZW5fLnNldEF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJywgJ29mZicpO1xuICB0aGlzLnNjcmVlbl8uc2V0QXR0cmlidXRlKCdhdXRvY29ycmVjdCcsICdvZmYnKTtcbiAgdGhpcy5zY3JlZW5fLnNldEF0dHJpYnV0ZSgnYXV0b2NhcGl0YWxpemUnLCAnbm9uZScpO1xuXG4gIC8vIEluIHNvbWUgd2F5cyB0aGUgdGVybWluYWwgYmVoYXZlcyBsaWtlIGEgdGV4dCBib3ggYnV0IG5vdCBpbiBhbGwgd2F5cy4gSXRcbiAgLy8gaXMgbm90IGVkaXRhYmxlIGluIHRoZSBzYW1lIHdheXMgYSB0ZXh0IGJveCBpcyBlZGl0YWJsZSBhbmQgdGhlIGNvbnRlbnQgd2VcbiAgLy8gd2FudCB0byBiZSByZWFkIG91dCBieSBhIHNjcmVlbiByZWFkZXIgZG9lcyBub3QgYWx3YXlzIGFsaWduIHdpdGggdGhlIGVkaXRzXG4gIC8vIChzZWxlY3Rpb24gY2hhbmdlcykgdGhhdCBoYXBwZW4gaW4gdGhlIHRlcm1pbmFsIHdpbmRvdy4gVXNlIHRoZSBsb2cgcm9sZSBzb1xuICAvLyB0aGF0IHRoZSBzY3JlZW4gcmVhZGVyIGRvZXNuJ3QgdHJlYXQgaXQgbGlrZSBhIHRleHQgYm94IGFuZCBhbm5vdW5jZSBhbGxcbiAgLy8gc2VsZWN0aW9uIGNoYW5nZXMuIFRoZSBhbm5vdW5jZW1lbnRzIHRoYXQgd2Ugd2FudCBzcG9rZW4gYXJlIGdlbmVyYXRlZFxuICAvLyBieSBhIHNlcGFyYXRlIGxpdmUgcmVnaW9uLCB3aGljaCBnaXZlcyBtb3JlIGNvbnRyb2wgb3ZlciB3aGF0IHdpbGwgYmVcbiAgLy8gc3Bva2VuLlxuICB0aGlzLnNjcmVlbl8uc2V0QXR0cmlidXRlKCdyb2xlJywgJ2xvZycpO1xuICB0aGlzLnNjcmVlbl8uc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAnb2ZmJyk7XG4gIHRoaXMuc2NyZWVuXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJywgJ1Rlcm1pbmFsJyk7XG5cbiAgLy8gU2V0IGFyaWEtcmVhZG9ubHkgdG8gaW5kaWNhdGUgdG8gdGhlIHNjcmVlbiByZWFkZXIgdGhhdCB0aGUgdGV4dCBvbiB0aGVcbiAgLy8gc2NyZWVuIGlzIG5vdCBtb2RpZmlhYmxlIGJ5IHRoZSBodG1sIGN1cnNvci4gSXQgbWF5IGJlIG1vZGlmaWFibGUgYnlcbiAgLy8gc2VuZGluZyBpbnB1dCB0byB0aGUgYXBwbGljYXRpb24gcnVubmluZyBpbiB0aGUgdGVybWluYWwsIGJ1dCB0aGlzIGlzXG4gIC8vIG9ydGhvZ29uYWwgdG8gdGhlIERPTSdzIG5vdGlvbiBvZiBtb2RpZmlhYmxlLlxuICB0aGlzLnNjcmVlbl8uc2V0QXR0cmlidXRlKCdhcmlhLXJlYWRvbmx5JywgJ3RydWUnKTtcbiAgdGhpcy5zY3JlZW5fLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcbiAgdGhpcy5zY3JlZW5fLnN0eWxlLmNzc1RleHQgPVxuICAgICdjYXJldC1jb2xvcjogdHJhbnNwYXJlbnQ7JyArXG4gICAgJ2Rpc3BsYXk6IGJsb2NrOycgK1xuICAgICdmb250LWZhbWlseTogbW9ub3NwYWNlOycgK1xuICAgICdmb250LXNpemU6IDE1cHg7JyArXG4gICAgJ2ZvbnQtdmFyaWFudC1saWdhdHVyZXM6IG5vbmU7JyArXG4gICAgJ2hlaWdodDogMTAwJTsnICtcbiAgICAnb3ZlcmZsb3cteTogc2Nyb2xsOyBvdmVyZmxvdy14OiBoaWRkZW47JyArXG4gICAgJ3doaXRlLXNwYWNlOiBwcmU7JyArXG4gICAgJ3dpZHRoOiAxMDAlOycgK1xuICAgICdvdXRsaW5lOiBub25lICFpbXBvcnRhbnQnO1xuXG4gIGRvYy5ib2R5LmFwcGVuZENoaWxkKHRoaXMuc2NyZWVuXyk7XG5cbiAgdGhpcy5zY3JlZW5fLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGxfLmJpbmQodGhpcykpO1xuICB0aGlzLnNjcmVlbl8uYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLm9uU2Nyb2xsV2hlZWxfLmJpbmQodGhpcykpO1xuICB0aGlzLnNjcmVlbl8uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Ub3VjaF8uYmluZCh0aGlzKSk7XG4gIHRoaXMuc2NyZWVuXy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hfLmJpbmQodGhpcykpO1xuICB0aGlzLnNjcmVlbl8uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hfLmJpbmQodGhpcykpO1xuICB0aGlzLnNjcmVlbl8uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCB0aGlzLm9uVG91Y2hfLmJpbmQodGhpcykpO1xuICB0aGlzLnNjcmVlbl8uYWRkRXZlbnRMaXN0ZW5lcignY29weScsIHRoaXMub25Db3B5Xy5iaW5kKHRoaXMpKTtcbiAgdGhpcy5zY3JlZW5fLmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgdGhpcy5vblBhc3RlXy5iaW5kKHRoaXMpKTtcbiAgdGhpcy5zY3JlZW5fLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCB0aGlzLm9uRHJhZ0FuZERyb3BfLmJpbmQodGhpcykpO1xuXG4gIGRvYy5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uQm9keUtleURvd25fLmJpbmQodGhpcykpO1xuXG4gIC8vIEFkZCBidXR0b25zIHRvIG1ha2UgYWNjZXNzaWJsZSBzY3JvbGxpbmcgdGhyb3VnaCB0ZXJtaW5hbCBoaXN0b3J5IHdvcmtcbiAgLy8gd2VsbC4gVGhlc2UgYXJlIHBvc2l0aW9uZWQgb2ZmLXNjcmVlbiB1bnRpbCB0aGV5IGFyZSBzZWxlY3RlZCwgYXQgd2hpY2hcbiAgLy8gcG9pbnQgdGhleSBhcmUgbW92ZWQgb24tc2NyZWVuLlxuICBjb25zdCBzY3JvbGxCdXR0b25IZWlnaHQgPSAzMDtcbiAgY29uc3Qgc2Nyb2xsQnV0dG9uQm9yZGVyID0gMTtcbiAgY29uc3Qgc2Nyb2xsQnV0dG9uVG90YWxIZWlnaHQgPSBzY3JvbGxCdXR0b25IZWlnaHQgKyAyICogc2Nyb2xsQnV0dG9uQm9yZGVyO1xuICBjb25zdCBzY3JvbGxCdXR0b25TdHlsZSA9IGByaWdodDogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjpmaXhlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtzY3JvbGxCdXR0b25IZWlnaHR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMTBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6ICR7c2Nyb2xsQnV0dG9uSGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6ICR7c2Nyb2xsQnV0dG9uQm9yZGVyfXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtgO1xuICAvLyBOb3RlOiB3ZSB1c2UgYSA8ZGl2PiByYXRoZXIgdGhhbiBhIDxidXR0b24+IGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCBpdCB0byBiZVxuICAvLyBmb2N1c2FibGUuIElmIGl0J3MgZm9jdXNhYmxlIHRoaXMgaW50ZXJmZXJlcyB3aXRoIHRoZSBjb250ZW50ZWRpdGFibGVcbiAgLy8gZm9jdXMuXG4gIHRoaXMuc2Nyb2xsVXBCdXR0b25fID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRoaXMuc2Nyb2xsVXBCdXR0b25fLmlkID0gJ2h0ZXJtOmExMXk6cGFnZS11cCc7XG4gIHRoaXMuc2Nyb2xsVXBCdXR0b25fLmlubmVyVGV4dCA9IGh0ZXJtLm1zZygnQlVUVE9OX1BBR0VfVVAnLCBbXSwgJ1BhZ2UgdXAnKTtcbiAgdGhpcy5zY3JvbGxVcEJ1dHRvbl8uc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICB0aGlzLnNjcm9sbFVwQnV0dG9uXy5zdHlsZS5jc3NUZXh0ID0gc2Nyb2xsQnV0dG9uU3R5bGU7XG4gIHRoaXMuc2Nyb2xsVXBCdXR0b25fLnN0eWxlLnRvcCA9IC1zY3JvbGxCdXR0b25Ub3RhbEhlaWdodCArICdweCc7XG4gIHRoaXMuc2Nyb2xsVXBCdXR0b25fLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zY3JvbGxQYWdlVXAuYmluZCh0aGlzKSk7XG5cbiAgdGhpcy5zY3JvbGxEb3duQnV0dG9uXyA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0aGlzLnNjcm9sbERvd25CdXR0b25fLmlkID0gJ2h0ZXJtOmExMXk6cGFnZS1kb3duJztcbiAgdGhpcy5zY3JvbGxEb3duQnV0dG9uXy5pbm5lclRleHQgPSBodGVybS5tc2coXG4gICAgJ0JVVFRPTl9QQUdFX0RPV04nLFxuICAgIFtdLFxuICAgICdQYWdlIGRvd24nLFxuICApO1xuICB0aGlzLnNjcm9sbERvd25CdXR0b25fLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTtcbiAgdGhpcy5zY3JvbGxEb3duQnV0dG9uXy5zdHlsZS5jc3NUZXh0ID0gc2Nyb2xsQnV0dG9uU3R5bGU7XG4gIHRoaXMuc2Nyb2xsRG93bkJ1dHRvbl8uc3R5bGUuYm90dG9tID0gLXNjcm9sbEJ1dHRvblRvdGFsSGVpZ2h0ICsgJ3B4JztcbiAgdGhpcy5zY3JvbGxEb3duQnV0dG9uXy5hZGRFdmVudExpc3RlbmVyKFxuICAgICdjbGljaycsXG4gICAgdGhpcy5zY3JvbGxQYWdlRG93bi5iaW5kKHRoaXMpLFxuICApO1xuXG4gIC8vIFdlIG9ubHkgYWxsb3cgdGhlIHNjcm9sbCBidXR0b25zIHRvIGRpc3BsYXkgYWZ0ZXIgYSBkZWxheSwgb3RoZXJ3aXNlIHRoZVxuICAvLyBwYWdlIHVwIGJ1dHRvbiBjYW4gZmxhc2ggb250byB0aGUgc2NyZWVuIGR1cmluZyB0aGUgaW50aWFsIGNoYW5nZSBpbiBmb2N1cy5cbiAgLy8gVGhpcyBzZWVtcyB0byBiZSBiZWNhdXNlIGl0IGlzIHRoZSBmaXJzdCBlbGVtZW50IGluc2lkZSB0aGUgPHgtc2NyZWVuPlxuICAvLyBlbGVtZW50LCB3aGljaCB3aWxsIGdldCBmb2N1c3NlZCBvbiBwYWdlIGxvYWQuXG4gIHRoaXMuYWxsb3dTY3JvbGxCdXR0b25zVG9EaXNwbGF5XyA9IGZhbHNlO1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICB0aGlzLmFsbG93U2Nyb2xsQnV0dG9uc1RvRGlzcGxheV8gPSB0cnVlO1xuICB9LCA1MDApO1xuICB0aGlzLmRvY3VtZW50Xy5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCAoKSA9PiB7XG4gICAgdGhpcy5zZWxlY3Rpb24uc3luYygpO1xuXG4gICAgaWYgKCF0aGlzLmFsbG93U2Nyb2xsQnV0dG9uc1RvRGlzcGxheV8pIHJldHVybjtcblxuICAgIGNvbnN0IGFjY2Vzc2liaWxpdHlFbmFibGVkID1cbiAgICAgIHRoaXMuYWNjZXNzaWJpbGl0eVJlYWRlcl8gJiZcbiAgICAgIHRoaXMuYWNjZXNzaWJpbGl0eVJlYWRlcl8uYWNjZXNzaWJpbGl0eUVuYWJsZWQ7XG5cbiAgICBjb25zdCBzZWxlY3Rpb24gPSB0aGlzLmRvY3VtZW50Xy5nZXRTZWxlY3Rpb24oKTtcbiAgICBsZXQgc2VsZWN0ZWRFbGVtZW50O1xuICAgIGlmIChzZWxlY3Rpb24uYW5jaG9yTm9kZSAmJiBzZWxlY3Rpb24uYW5jaG9yTm9kZS5wYXJlbnRFbGVtZW50KSB7XG4gICAgICBzZWxlY3RlZEVsZW1lbnQgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZS5wYXJlbnRFbGVtZW50O1xuICAgIH1cbiAgICBpZiAoYWNjZXNzaWJpbGl0eUVuYWJsZWQgJiYgc2VsZWN0ZWRFbGVtZW50ID09IHRoaXMuc2Nyb2xsVXBCdXR0b25fKSB7XG4gICAgICB0aGlzLnNjcm9sbFVwQnV0dG9uXy5zdHlsZS50b3AgPSAnMHB4JztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zY3JvbGxVcEJ1dHRvbl8uc3R5bGUudG9wID0gLXNjcm9sbEJ1dHRvblRvdGFsSGVpZ2h0ICsgJ3B4JztcbiAgICB9XG4gICAgaWYgKGFjY2Vzc2liaWxpdHlFbmFibGVkICYmIHNlbGVjdGVkRWxlbWVudCA9PSB0aGlzLnNjcm9sbERvd25CdXR0b25fKSB7XG4gICAgICB0aGlzLnNjcm9sbERvd25CdXR0b25fLnN0eWxlLmJvdHRvbSA9ICcwcHgnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNjcm9sbERvd25CdXR0b25fLnN0eWxlLmJvdHRvbSA9IC1zY3JvbGxCdXR0b25Ub3RhbEhlaWdodCArICdweCc7XG4gICAgfVxuICB9KTtcblxuICB0aGlzLnNjcmVlbl8uYXBwZW5kQ2hpbGQodGhpcy5zY3JvbGxVcEJ1dHRvbl8pO1xuXG4gIC8vIFRoaXMgaXMgdGhlIG1haW4gY29udGFpbmVyIGZvciB0aGUgZml4ZWQgcm93cy5cbiAgdGhpcy5yb3dOb2Rlc18gPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRoaXMucm93Tm9kZXNfLmlkID0gJ2h0ZXJtOnJvdy1ub2Rlcyc7XG4gIHRoaXMucm93Tm9kZXNfLnN0eWxlLmNzc1RleHQgPVxuICAgICdkaXNwbGF5OiBibG9jazsnICtcbiAgICAncG9zaXRpb246IGZpeGVkOycgK1xuICAgICdvdmVyZmxvdzogaGlkZGVuOycgK1xuICAgICctd2Via2l0LXVzZXItc2VsZWN0OiB0ZXh0OycgK1xuICAgICctbW96LXVzZXItc2VsZWN0OiB0ZXh0Oyc7XG4gIHRoaXMuc2NyZWVuXy5hcHBlbmRDaGlsZCh0aGlzLnJvd05vZGVzXyk7XG5cbiAgdGhpcy5zY3JlZW5fLmFwcGVuZENoaWxkKHRoaXMuc2Nyb2xsRG93bkJ1dHRvbl8pO1xuXG4gIC8vIFR3byBub2RlcyB0byBob2xkIG9mZnNjcmVlbiB0ZXh0IGR1cmluZyB0aGUgY29weSBldmVudC5cbiAgdGhpcy50b3BTZWxlY3RCYWdfID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3gtc2VsZWN0LWJhZycpO1xuICB0aGlzLnRvcFNlbGVjdEJhZ18uc3R5bGUuY3NzVGV4dCA9XG4gICAgJ2Rpc3BsYXk6IGJsb2NrOycgK1xuICAgICdvdmVyZmxvdzogaGlkZGVuOycgK1xuICAgICdoZWlnaHQ6IHZhcigtLWh0ZXJtLWNoYXJzaXplLWhlaWdodCk7JyArXG4gICAgJ3doaXRlLXNwYWNlOiBwcmU7JztcblxuICB0aGlzLmJvdHRvbVNlbGVjdEJhZ18gPSB0aGlzLnRvcFNlbGVjdEJhZ18uY2xvbmVOb2RlKCk7XG5cbiAgLy8gTm9kZXMgYWJvdmUgdGhlIHRvcCBmb2xkIGFuZCBiZWxvdyB0aGUgYm90dG9tIGZvbGQgYXJlIGhpZGRlbi4gIFRoZXkgYXJlXG4gIC8vIG9ubHkgdXNlZCB0byBob2xkIHJvd3MgdGhhdCBhcmUgcGFydCBvZiB0aGUgc2VsZWN0aW9uIGJ1dCBhcmUgY3VycmVudGx5XG4gIC8vIHNjcm9sbGVkIG9mZiB0aGUgdG9wIG9yIGJvdHRvbSBvZiB0aGUgdmlzaWJsZSByYW5nZS5cbiAgdGhpcy50b3BGb2xkXyA9IGRvYy5jcmVhdGVFbGVtZW50KCd4LWZvbGQnKTtcbiAgdGhpcy50b3BGb2xkXy5pZCA9ICdodGVybTp0b3AtZm9sZC1mb3Itcm93LXNlbGVjdGlvbic7XG4gIHRoaXMudG9wRm9sZF8uc3R5bGUuY3NzVGV4dCA9ICdkaXNwbGF5OiBibG9jazsnO1xuICB0aGlzLnJvd05vZGVzXy5hcHBlbmRDaGlsZCh0aGlzLnRvcEZvbGRfKTtcblxuICB0aGlzLmJvdHRvbUZvbGRfID0gdGhpcy50b3BGb2xkXy5jbG9uZU5vZGUoKTtcbiAgdGhpcy5ib3R0b21Gb2xkXy5pZCA9ICdodGVybTpib3R0b20tZm9sZC1mb3Itcm93LXNlbGVjdGlvbic7XG4gIHRoaXMucm93Tm9kZXNfLmFwcGVuZENoaWxkKHRoaXMuYm90dG9tRm9sZF8pO1xuXG4gIC8vIFRoaXMgaGlkZGVuIGRpdiBhY2NvdW50cyBmb3IgdGhlIHZlcnRpY2FsIHNwYWNlIHRoYXQgd291bGQgYmUgY29uc3VtZWQgYnlcbiAgLy8gYWxsIHRoZSByb3dzIGluIHRoZSBidWZmZXIgaWYgdGhleSB3ZXJlIHZpc2libGUuICBJdCdzIHdoYXQgY2F1c2VzIHRoZVxuICAvLyBzY3JvbGxiYXIgdG8gYXBwZWFyIG9uIHRoZSAneC1zY3JlZW4nLCBhbmQgaXQgbW92ZXMgd2l0aGluIHRoZSBzY3JlZW4gd2hlblxuICAvLyB0aGUgc2Nyb2xsYmFyIGlzIG1vdmVkLlxuICAvL1xuICAvLyBJdCBpcyBzZXQgJ3Zpc2liaWxpdHk6IGhpZGRlbicgdG8ga2VlcCB0aGUgYnJvd3NlciBmcm9tIHRyeWluZyB0byBpbmNsdWRlXG4gIC8vIGl0IGluIHRoZSBzZWxlY3Rpb24gd2hlbiBhIHVzZXIgJ2RyYWcgc2VsZWN0cycgdXB3YXJkcyAoZHJhZyB0aGUgbW91c2UgdG9cbiAgLy8gc2VsZWN0IGFuZCBzY3JvbGwgYXQgdGhlIHNhbWUgdGltZSkuICBXaXRob3V0IHRoaXMsIHRoZSBzZWxlY3Rpb24gZ2V0c1xuICAvLyBvdXQgb2Ygd2hhY2suXG4gIHRoaXMuc2Nyb2xsQXJlYV8gPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRoaXMuc2Nyb2xsQXJlYV8uaWQgPSAnaHRlcm06c2Nyb2xsYXJlYSc7XG4gIHRoaXMuc2Nyb2xsQXJlYV8uc3R5bGUuY3NzVGV4dCA9ICd2aXNpYmlsaXR5OiBoaWRkZW4nO1xuICB0aGlzLnNjcmVlbl8uYXBwZW5kQ2hpbGQodGhpcy5zY3JvbGxBcmVhXyk7XG5cbiAgLy8gVGhpcyBzdmcgZWxlbWVudCBpcyB1c2VkIHRvIGRldGVjdCB3aGVuIHRoZSBicm93c2VyIGlzIHpvb21lZC4gIEl0IG11c3QgYmVcbiAgLy8gcGxhY2VkIGluIHRoZSBvdXRlcm1vc3QgZG9jdW1lbnQgZm9yIGN1cnJlbnRTY2FsZSB0byBiZSBjb3JyZWN0LlxuICAvLyBUT0RPKHJnaW5kYSk6IFRoaXMgbWVhbnMgdGhhdCBodGVybSBuZXN0ZWQgaW4gYW4gaWZyYW1lIHdpbGwgbm90IGNvcnJlY3RseVxuICAvLyBkZXRlY3QgYnJvd3NlciB6b29tIGxldmVsLiAgV2Ugc2hvdWxkIGNvbWUgdXAgd2l0aCBhIGJldHRlciBzb2x1dGlvbi5cbiAgLy8gTm90ZTogVGhpcyBtdXN0IGJlIGh0dHA6Ly8gZWxzZSBDaHJvbWUgY2Fubm90IGNyZWF0ZSB0aGUgZWxlbWVudCBjb3JyZWN0bHkuXG4gIHZhciB4bWxucyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG4gIHRoaXMuc3ZnXyA9IHRoaXMuZGl2Xy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh4bWxucywgJ3N2ZycpO1xuICB0aGlzLnN2Z18uaWQgPSAnaHRlcm06em9vbS1kZXRlY3Rvcic7XG4gIHRoaXMuc3ZnXy5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgeG1sbnMpO1xuICB0aGlzLnN2Z18uc2V0QXR0cmlidXRlKCd2ZXJzaW9uJywgJzEuMScpO1xuICB0aGlzLnN2Z18uc3R5bGUuY3NzVGV4dCA9XG4gICAgJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsnICsgJ3RvcDogMDsnICsgJ2xlZnQ6IDA7JyArICd2aXNpYmlsaXR5OiBoaWRkZW4nO1xuXG4gIC8vIFdlIHNlbmQgZm9jdXMgdG8gdGhpcyBlbGVtZW50IGp1c3QgYmVmb3JlIGEgcGFzdGUgaGFwcGVucywgc28gd2UgY2FuXG4gIC8vIGNhcHR1cmUgdGhlIHBhc3RlZCB0ZXh0IGFuZCBmb3J3YXJkIGl0IG9uIHRvIHNvbWVvbmUgd2hvIGNhcmVzLlxuICB0aGlzLnBhc3RlVGFyZ2V0XyA9IGRvYy5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICB0aGlzLnBhc3RlVGFyZ2V0Xy5pZCA9ICdodGVybTpjdHJsLXYtcGFzdGUtdGFyZ2V0JztcbiAgdGhpcy5wYXN0ZVRhcmdldF8uc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICB0aGlzLnBhc3RlVGFyZ2V0Xy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgdGhpcy5wYXN0ZVRhcmdldF8uc3R5bGUuY3NzVGV4dCA9XG4gICAgJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsnICtcbiAgICAnaGVpZ2h0OiAxcHg7JyArXG4gICAgJ3dpZHRoOiAxcHg7JyArXG4gICAgJ2xlZnQ6IDBweDsgJyArXG4gICAgJ2JvdHRvbTogMHB4OycgK1xuICAgICdvcGFjaXR5OiAwJztcbiAgdGhpcy5wYXN0ZVRhcmdldF8uY29udGVudEVkaXRhYmxlID0gdHJ1ZTtcblxuICB0aGlzLnNjcmVlbl8uYXBwZW5kQ2hpbGQodGhpcy5wYXN0ZVRhcmdldF8pO1xuICB0aGlzLnBhc3RlVGFyZ2V0Xy5hZGRFdmVudExpc3RlbmVyKFxuICAgICd0ZXh0SW5wdXQnLFxuICAgIHRoaXMuaGFuZGxlUGFzdGVUYXJnZXRUZXh0SW5wdXRfLmJpbmQodGhpcyksXG4gICk7XG5cbiAgdGhpcy5yZXNpemUoKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBBY2Nlc3NpYmlsaXR5UmVhZGVyIG9iamVjdCB0byB1c2UgdG8gYW5ub3VuY2UgcGFnZSBzY3JvbGwgdXBkYXRlcy5cbiAqXG4gKiBAcGFyYW0ge2h0ZXJtLkFjY2Vzc2liaWxpdHlSZWFkZXJ9IGFjY2Vzc2liaWxpdHlSZWFkZXIgZm9yIGFubm91bmNpbmcgcGFnZVxuICogICAgIHNjcm9sbCB1cGRhdGVzLlxuICovXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5zZXRBY2Nlc3NpYmlsaXR5UmVhZGVyID0gZnVuY3Rpb24oXG4gIGFjY2Vzc2liaWxpdHlSZWFkZXIsXG4pIHtcbiAgdGhpcy5hY2Nlc3NpYmlsaXR5UmVhZGVyXyA9IGFjY2Vzc2liaWxpdHlSZWFkZXI7XG59O1xuXG4vKipcbiAqIFNjcm9sbCB0aGUgdGVybWluYWwgb25lIHBhZ2UgdXAgKG1pbnVzIG9uZSBsaW5lKSByZWxhdGl2ZSB0byB0aGUgY3VycmVudFxuICogcG9zaXRpb24uXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNjcm9sbFBhZ2VVcCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5nZXRUb3BSb3dJbmRleCgpID09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBpID0gdGhpcy5nZXRUb3BSb3dJbmRleCgpO1xuICB0aGlzLnNjcm9sbFJvd1RvVG9wKGkgLSB0aGlzLnZpc2libGVSb3dDb3VudCArIDEpO1xuXG4gIHRoaXMuYXNzZXJ0aXZlQW5ub3VuY2VfKCk7XG59O1xuXG4vKipcbiAqIFNjcm9sbCB0aGUgdGVybWluYWwgb25lIHBhZ2UgZG93biAobWludXMgb25lIGxpbmUpIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50XG4gKiBwb3NpdGlvbi5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuc2Nyb2xsUGFnZURvd24gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaXNTY3JvbGxlZEVuZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGkgPSB0aGlzLmdldFRvcFJvd0luZGV4KCk7XG4gIHRoaXMuc2Nyb2xsUm93VG9Ub3AoaSArIHRoaXMudmlzaWJsZVJvd0NvdW50IC0gMSk7XG5cbiAgdGhpcy5hc3NlcnRpdmVBbm5vdW5jZV8oKTtcbn07XG5cbi8qKlxuICogU2VsZWN0IHRoZSBmb250LWZhbWlseSBhbmQgZm9udC1zbW9vdGhpbmcgZm9yIHRoaXMgc2Nyb2xscG9ydC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9udEZhbWlseSBWYWx1ZSBvZiB0aGUgQ1NTICdmb250LWZhbWlseScgdG8gdXNlIGZvciB0aGlzXG4gKiAgICAgc2Nyb2xscG9ydC4gIFNob3VsZCBiZSBhIG1vbm9zcGFjZSBmb250LlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdF9zbW9vdGhpbmcgT3B0aW9uYWwgdmFsdWUgZm9yICctd2Via2l0LWZvbnQtc21vb3RoaW5nJy5cbiAqICAgICBEZWZhdWx0cyB0byBhbiBlbXB0eSBzdHJpbmcgaWYgbm90IHNwZWNpZmllZC5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuc2V0Rm9udEZhbWlseSA9IGZ1bmN0aW9uKGZvbnRGYW1pbHksIG9wdF9zbW9vdGhpbmcpIHtcbiAgdGhpcy5zY3JlZW5fLnN0eWxlLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5O1xuICBpZiAob3B0X3Ntb290aGluZykge1xuICAgIHRoaXMuc2NyZWVuXy5zdHlsZS53ZWJraXRGb250U21vb3RoaW5nID0gb3B0X3Ntb290aGluZztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNjcmVlbl8uc3R5bGUud2Via2l0Rm9udFNtb290aGluZyA9ICcnO1xuICB9XG5cbiAgdGhpcy5zeW5jQ2hhcmFjdGVyU2l6ZSgpO1xufTtcblxuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuZ2V0Rm9udEZhbWlseSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zY3JlZW5fLnN0eWxlLmZvbnRGYW1pbHk7XG59O1xuXG4vKipcbiAqIFNldCBhIGN1c3RvbSBzdHlsZXNoZWV0IHRvIGluY2x1ZGUgaW4gdGhlIHNjcm9sbHBvcnQuXG4gKlxuICogRGVmYXVsdHMgdG8gbnVsbCwgbWVhbmluZyBubyBjdXN0b20gY3NzIGlzIGxvYWRlZC4gIFNldCBpdCBiYWNrIHRvIG51bGwgb3JcbiAqIHRoZSBlbXB0eSBzdHJpbmcgdG8gcmVtb3ZlIGEgcHJldmlvdXNseSBhcHBsaWVkIGN1c3RvbSBjc3MuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNldFVzZXJDc3NVcmwgPSBmdW5jdGlvbih1cmwpIHtcbiAgaWYgKHVybCkge1xuICAgIHRoaXMudXNlckNzc0xpbmtfLnNldEF0dHJpYnV0ZSgnaHJlZicsIHVybCk7XG5cbiAgICBpZiAoIXRoaXMudXNlckNzc0xpbmtfLnBhcmVudE5vZGUpXG4gICAgICB0aGlzLmRvY3VtZW50Xy5oZWFkLmFwcGVuZENoaWxkKHRoaXMudXNlckNzc0xpbmtfKTtcbiAgfSBlbHNlIGlmICh0aGlzLnVzZXJDc3NMaW5rXy5wYXJlbnROb2RlKSB7XG4gICAgdGhpcy5kb2N1bWVudF8uaGVhZC5yZW1vdmVDaGlsZCh0aGlzLnVzZXJDc3NMaW5rXyk7XG4gIH1cbn07XG5cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNldFVzZXJDc3NUZXh0ID0gZnVuY3Rpb24odGV4dCkge1xuICB0aGlzLnVzZXJDc3NUZXh0Xy50ZXh0Q29udGVudCA9IHRleHQ7XG59O1xuXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmlmcmFtZV8uZm9jdXMoKTtcbiAgdGhpcy5zY3JlZW5fLmZvY3VzKCk7XG4gIHRoaXMucHVibGlzaCgnZm9jdXMnKTtcbn07XG5cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLmdldEZvcmVncm91bmRDb2xvciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zY3JlZW5fLnN0eWxlLmNvbG9yO1xufTtcblxuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuc2V0Rm9yZWdyb3VuZENvbG9yID0gZnVuY3Rpb24oY29sb3IpIHtcbiAgdGhpcy5zY3JlZW5fLnN0eWxlLmNvbG9yID0gY29sb3I7XG4gIHRoaXMuc2Nyb2xsVXBCdXR0b25fLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICB0aGlzLnNjcm9sbERvd25CdXR0b25fLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xufTtcblxuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuZ2V0QmFja2dyb3VuZENvbG9yID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNjcmVlbl8uc3R5bGUuYmFja2dyb3VuZENvbG9yO1xufTtcblxuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuc2V0QmFja2dyb3VuZENvbG9yID0gZnVuY3Rpb24oY29sb3IpIHtcbiAgdGhpcy5zY3JlZW5fLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICB0aGlzLnNjcm9sbFVwQnV0dG9uXy5zdHlsZS5jb2xvciA9IGNvbG9yO1xuICB0aGlzLnNjcm9sbERvd25CdXR0b25fLnN0eWxlLmNvbG9yID0gY29sb3I7XG59O1xuXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5zZXRCYWNrZ3JvdW5kSW1hZ2UgPSBmdW5jdGlvbihpbWFnZSkge1xuICB0aGlzLnNjcmVlbl8uc3R5bGUuYmFja2dyb3VuZEltYWdlID0gaW1hZ2U7XG59O1xuXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5zZXRCYWNrZ3JvdW5kU2l6ZSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgdGhpcy5zY3JlZW5fLnN0eWxlLmJhY2tncm91bmRTaXplID0gc2l6ZTtcbn07XG5cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNldEJhY2tncm91bmRQb3NpdGlvbiA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gIHRoaXMuc2NyZWVuXy5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPSBwb3NpdGlvbjtcbn07XG5cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNldEN0cmxWUGFzdGUgPSBmdW5jdGlvbihjdHJsVlBhc3RlKSB7XG4gIHRoaXMuY3RybFZQYXN0ZSA9IGN0cmxWUGFzdGU7XG59O1xuXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5zZXRQYXN0ZU9uRHJvcCA9IGZ1bmN0aW9uKHBhc3RlT25Ecm9wKSB7XG4gIHRoaXMucGFzdGVPbkRyb3AgPSBwYXN0ZU9uRHJvcDtcbn07XG5cbi8qKlxuICogR2V0IHRoZSB1c2FibGUgc2l6ZSBvZiB0aGUgc2Nyb2xscG9ydCBzY3JlZW4uXG4gKlxuICogVGhlIHdpZHRoIHdpbGwgbm90IGluY2x1ZGUgdGhlIHNjcm9sbGJhciB3aWR0aC5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuZ2V0U2NyZWVuU2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IGh0ZXJtLmdldENsaWVudFNpemUodGhpcy5zY3JlZW5fKTtcbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0LFxuICAgIHdpZHRoOiBzaXplLndpZHRoIC0gdGhpcy5jdXJyZW50U2Nyb2xsYmFyV2lkdGhQeCxcbiAgfTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSB1c2FibGUgd2lkdGggb2YgdGhlIHNjcm9sbHBvcnQgc2NyZWVuLlxuICpcbiAqIFRoaXMgdGhlIHdpZGdldCB3aWR0aCBtaW51cyBzY3JvbGxiYXIgd2lkdGguXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLmdldFNjcmVlbldpZHRoID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmdldFNjcmVlblNpemUoKS53aWR0aDtcbn07XG5cbi8qKlxuICogR2V0IHRoZSB1c2FibGUgaGVpZ2h0IG9mIHRoZSBzY3JvbGxwb3J0IHNjcmVlbi5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuZ2V0U2NyZWVuSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmdldFNjcmVlblNpemUoKS5oZWlnaHQ7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgZG9jdW1lbnQgdGhhdCBob2xkcyB0aGUgdmlzaWJsZSByb3dzIG9mIHRoaXMgaHRlcm0uU2Nyb2xsUG9ydC5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuZ2V0RG9jdW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZG9jdW1lbnRfO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB4LXNjcmVlbiBlbGVtZW50IHRoYXQgaG9sZHMgdGhlIHJvd3Mgb2YgdGhpcyBodGVybS5TY3JvbGxQb3J0LlxuICovXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5nZXRTY3JlZW5Ob2RlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNjcmVlbl87XG59O1xuXG4vKipcbiAqIENsZWFyIG91dCBhbnkgY2FjaGVkIHJvd05vZGVzLlxuICovXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5yZXNldENhY2hlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY3VycmVudFJvd05vZGVDYWNoZV8gPSBudWxsO1xuICB0aGlzLnByZXZpb3VzUm93Tm9kZUNhY2hlXyA9IHt9O1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIGN1cnJlbnQgcm93UHJvdmlkZXIuXG4gKlxuICogVGhpcyB3aWxsIGNsZWFyIHRoZSByb3cgY2FjaGUgYW5kIGNhdXNlIGEgcmVkcmF3LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByb3dQcm92aWRlciBBbiBvYmplY3QgY2FwYWJsZSBvZiBwcm92aWRpbmcgdGhlIHJvd3NcbiAqICAgICBpbiB0aGlzIGh0ZXJtLlNjcm9sbFBvcnQuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNldFJvd1Byb3ZpZGVyID0gZnVuY3Rpb24ocm93UHJvdmlkZXIpIHtcbiAgdGhpcy5yZXNldENhY2hlKCk7XG4gIHRoaXMucm93UHJvdmlkZXJfID0gcm93UHJvdmlkZXI7XG4gIHRoaXMuc2NoZWR1bGVSZWRyYXcoKTtcbn07XG5cbi8qKlxuICogSW5mb3JtIHRoZSBTY3JvbGxQb3J0IHRoYXQgdGhlIHJvb3QgRE9NIG5vZGVzIGZvciBzb21lIG9yIGFsbCBvZiB0aGUgdmlzaWJsZVxuICogcm93cyBhcmUgbm8gbG9uZ2VyIHZhbGlkLlxuICpcbiAqIFNwZWNpZmljYWxseSwgdGhpcyBzaG91bGQgYmUgY2FsbGVkIGlmIHRoaXMucm93UHJvdmlkZXJfLmdldFJvd05vZGUoKSBub3dcbiAqIHJldHVybnMgYW4gZW50aXJlbHkgZGlmZmVyZW50IG5vZGUgdGhhbiBpdCBkaWQgYmVmb3JlLiAgSXQgZG9lcyBub3RcbiAqIG5lZWQgdG8gYmUgY2FsbGVkIGlmIHRoZSBjb250ZW50IG9mIGEgcm93IG5vZGUgaXMgdGhlIG9ubHkgdGhpbmcgdGhhdFxuICogY2hhbmdlZC5cbiAqXG4gKiBUaGlzIHNraXBzIHNvbWUgb2YgdGhlIG92ZXJoZWFkIG9mIGEgZnVsbCByZWRyYXcsIGJ1dCBzaG91bGQgbm90IGJlIHVzZWRcbiAqIGluIGNhc2VzIHdoZXJlIHRoZSBzY3JvbGxwb3J0IGhhcyBiZWVuIHNjcm9sbGVkLCBvciB3aGVuIHRoZSByb3cgY291bnQgaGFzXG4gKiBjaGFuZ2VkLlxuICovXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5pbnZhbGlkYXRlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlID0gdGhpcy50b3BGb2xkXy5uZXh0U2libGluZztcbiAgd2hpbGUgKG5vZGUgIT0gdGhpcy5ib3R0b21Gb2xkXykge1xuICAgIHZhciBuZXh0U2libGluZyA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgbm9kZS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIG5vZGUgPSBuZXh0U2libGluZztcbiAgfVxuXG4gIHRoaXMucHJldmlvdXNSb3dOb2RlQ2FjaGVfID0gbnVsbDtcbiAgdmFyIHRvcFJvd0luZGV4ID0gdGhpcy5nZXRUb3BSb3dJbmRleCgpO1xuICB2YXIgYm90dG9tUm93SW5kZXggPSB0aGlzLmdldEJvdHRvbVJvd0luZGV4KHRvcFJvd0luZGV4KTtcblxuICB0aGlzLmRyYXdWaXNpYmxlUm93c18odG9wUm93SW5kZXgsIGJvdHRvbVJvd0luZGV4KTtcbn07XG5cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNjaGVkdWxlSW52YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy50aW1lb3V0c18uaW52YWxpZGF0ZSkgcmV0dXJuO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy50aW1lb3V0c18uaW52YWxpZGF0ZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHNlbGYudGltZW91dHNfLmludmFsaWRhdGU7XG4gICAgc2VsZi5pbnZhbGlkYXRlKCk7XG4gIH0sIDApO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGZvbnQgc2l6ZSBvZiB0aGUgU2Nyb2xsUG9ydC5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuc2V0Rm9udFNpemUgPSBmdW5jdGlvbihweCkge1xuICB0aGlzLnNjcmVlbl8uc3R5bGUuZm9udFNpemUgPSBweCArICdweCc7XG4gIHRoaXMuc3luY0NoYXJhY3RlclNpemUoKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBjdXJyZW50IGZvbnQgc2l6ZSBvZiB0aGUgU2Nyb2xsUG9ydC5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuZ2V0Rm9udFNpemUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHRoaXMuc2NyZWVuXy5zdHlsZS5mb250U2l6ZSk7XG59O1xuXG4vKipcbiAqIE1lYXN1cmUgdGhlIHNpemUgb2YgYSBzaW5nbGUgY2hhcmFjdGVyIGluIHBpeGVscy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0X3dlaWdodCBUaGUgZm9udCB3ZWlnaHQgdG8gbWVhc3VyZSwgb3IgJ25vcm1hbCcgaWZcbiAqICAgICBvbWl0dGVkLlxuICogQHJldHVybiB7aHRlcm0uU2l6ZX0gQSBuZXcgaHRlcm0uU2l6ZSBvYmplY3QuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLm1lYXN1cmVDaGFyYWN0ZXJTaXplID0gZnVuY3Rpb24ob3B0X3dlaWdodCkge1xuICAvLyBOdW1iZXIgb2YgbGluZXMgdXNlZCB0byBhdmVyYWdlIHRoZSBoZWlnaHQgb2YgYSBzaW5nbGUgY2hhcmFjdGVyLlxuICB2YXIgbnVtYmVyT2ZMaW5lcyA9IDEwMDtcbiAgLy8gTnVtYmVyIG9mIGNoYXJzIHBlciBsaW5lIHVzZWQgdG8gYXZlcmFnZSB0aGUgd2lkdGggb2YgYSBzaW5nbGUgY2hhcmFjdGVyLlxuICB2YXIgbGluZUxlbmd0aCA9IDEwMDtcblxuICBpZiAoIXRoaXMucnVsZXJfKSB7XG4gICAgdGhpcy5ydWxlcl8gPSB0aGlzLmRvY3VtZW50Xy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLnJ1bGVyXy5pZCA9ICdodGVybTpydWxlci1jaGFyYWN0ZXItc2l6ZSc7XG4gICAgdGhpcy5ydWxlcl8uc3R5bGUuY3NzVGV4dCA9XG4gICAgICAncG9zaXRpb246IGFic29sdXRlOycgK1xuICAgICAgJ3RvcDogMDsnICtcbiAgICAgICdsZWZ0OiAwOycgK1xuICAgICAgJ3Zpc2liaWxpdHk6IGhpZGRlbjsnICtcbiAgICAgICdoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDsnICtcbiAgICAgICd3aWR0aDogYXV0byAhaW1wb3J0YW50Oyc7XG5cbiAgICAvLyBXZSBuZWVkIHRvIHB1dCB0aGUgdGV4dCBpbiBhIHNwYW4gdG8gbWFrZSB0aGUgc2l6ZSBjYWxjdWxhdGlvblxuICAgIC8vIHdvcmsgcHJvcGVybHkgaW4gRmlyZWZveFxuICAgIHRoaXMucnVsZXJTcGFuXyA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICB0aGlzLnJ1bGVyU3Bhbl8uaWQgPSAnaHRlcm06cnVsZXItc3Bhbi13b3JrYXJvdW5kJztcbiAgICB0aGlzLnJ1bGVyU3Bhbl8uaW5uZXJIVE1MID0gKCdYJy5yZXBlYXQobGluZUxlbmd0aCkgKyAnXFxyJykucmVwZWF0KFxuICAgICAgbnVtYmVyT2ZMaW5lcyxcbiAgICApO1xuICAgIHRoaXMucnVsZXJfLmFwcGVuZENoaWxkKHRoaXMucnVsZXJTcGFuXyk7XG5cbiAgICB0aGlzLnJ1bGVyQmFzZWxpbmVfID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHRoaXMucnVsZXJTcGFuXy5pZCA9ICdodGVybTpydWxlci1iYXNlbGluZSc7XG4gICAgLy8gV2Ugd2FudCB0byBjb2xsYXBzZSBpdCBvbiB0aGUgYmFzZWxpbmVcbiAgICB0aGlzLnJ1bGVyQmFzZWxpbmVfLnN0eWxlLmZvbnRTaXplID0gJzBweCc7XG4gICAgdGhpcy5ydWxlckJhc2VsaW5lXy50ZXh0Q29udGVudCA9ICdYJztcbiAgfVxuXG4gIHRoaXMucnVsZXJTcGFuXy5zdHlsZS5mb250V2VpZ2h0ID0gb3B0X3dlaWdodCB8fCAnJztcblxuICB0aGlzLnJvd05vZGVzXy5hcHBlbmRDaGlsZCh0aGlzLnJ1bGVyXyk7XG4gIHZhciBydWxlclNpemUgPSBodGVybS5nZXRDbGllbnRTaXplKHRoaXMucnVsZXJTcGFuXyk7XG5cbiAgdmFyIHNpemUgPSBuZXcgaHRlcm0uU2l6ZShcbiAgICBydWxlclNpemUud2lkdGggLyBsaW5lTGVuZ3RoLFxuICAgIHJ1bGVyU2l6ZS5oZWlnaHQgLyBudW1iZXJPZkxpbmVzLFxuICApO1xuXG4gIHRoaXMucnVsZXJfLmFwcGVuZENoaWxkKHRoaXMucnVsZXJCYXNlbGluZV8pO1xuICBzaXplLmJhc2VsaW5lID0gdGhpcy5ydWxlckJhc2VsaW5lXy5vZmZzZXRUb3A7XG4gIHRoaXMucnVsZXJfLnJlbW92ZUNoaWxkKHRoaXMucnVsZXJCYXNlbGluZV8pO1xuXG4gIHRoaXMucm93Tm9kZXNfLnJlbW92ZUNoaWxkKHRoaXMucnVsZXJfKTtcblxuICB0aGlzLmRpdl8ub3duZXJEb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuc3ZnXyk7XG4gIHNpemUuem9vbUZhY3RvciA9IHRoaXMuc3ZnXy5jdXJyZW50U2NhbGU7XG4gIHRoaXMuZGl2Xy5vd25lckRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5zdmdfKTtcblxuICByZXR1cm4gc2l6ZTtcbn07XG5cbi8qKlxuICogU3luY2hyb25pemUgdGhlIGNoYXJhY3RlciBzaXplLlxuICpcbiAqIFRoaXMgd2lsbCByZS1tZWFzdXJlIHRoZSBjdXJyZW50IGNoYXJhY3RlciBzaXplIGFuZCBhZGp1c3QgdGhlIGhlaWdodFxuICogb2YgYW4geC1yb3cgdG8gbWF0Y2guXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnN5bmNDaGFyYWN0ZXJTaXplID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2hhcmFjdGVyU2l6ZSA9IHRoaXMubWVhc3VyZUNoYXJhY3RlclNpemUoKTtcblxuICB0aGlzLnJlc2l6ZSgpO1xufTtcblxuLyoqXG4gKiBSZXNldCBkaW1lbnNpb25zIGFuZCB2aXNpYmxlIHJvdyBjb3VudCB0byBhY2NvdW50IGZvciBhIGNoYW5nZSBpbiB0aGVcbiAqIGRpbWVuc2lvbnMgb2YgdGhlICd4LXNjcmVlbicuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmN1cnJlbnRTY3JvbGxiYXJXaWR0aFB4ID1cbiAgICBodGVybS5nZXRDbGllbnRXaWR0aCh0aGlzLnNjcmVlbl8pIC0gdGhpcy5zY3JlZW5fLmNsaWVudFdpZHRoO1xuXG4gIHRoaXMuc3luY1Njcm9sbEhlaWdodCgpO1xuICB0aGlzLnN5bmNSb3dOb2Rlc0RpbWVuc2lvbnNfKCk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnB1Ymxpc2goJ3Jlc2l6ZScsIHsgc2Nyb2xsUG9ydDogdGhpcyB9LCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLnNjcm9sbFJvd1RvQm90dG9tKHNlbGYucm93UHJvdmlkZXJfLmdldFJvd0NvdW50KCkpO1xuICAgIHNlbGYuc2NoZWR1bGVSZWRyYXcoKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEFubm91bmNlIHRleHQgY29udGVudCBvbiB0aGUgY3VycmVudCBzY3JlZW4gZm9yIHRoZSBzY3JlZW4gcmVhZGVyLlxuICovXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5hc3NlcnRpdmVBbm5vdW5jZV8gPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLmFjY2Vzc2liaWxpdHlSZWFkZXJfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdG9wUm93ID0gdGhpcy5nZXRUb3BSb3dJbmRleCgpO1xuICBjb25zdCBib3R0b21Sb3cgPSB0aGlzLmdldEJvdHRvbVJvd0luZGV4KHRvcFJvdyk7XG5cbiAgbGV0IHBlcmNlbnRTY3JvbGxlZCA9XG4gICAgKDEwMCAqIHRvcFJvdykgL1xuICAgIE1hdGgubWF4KDEsIHRoaXMucm93UHJvdmlkZXJfLmdldFJvd0NvdW50KCkgLSB0aGlzLnZpc2libGVSb3dDb3VudCk7XG4gIHBlcmNlbnRTY3JvbGxlZCA9IE1hdGgubWluKDEwMCwgTWF0aC5yb3VuZChwZXJjZW50U2Nyb2xsZWQpKTtcbiAgbGV0IGN1cnJlbnRTY3JlZW5Db250ZW50ID0gaHRlcm0ubXNnKFxuICAgICdBTk5PVU5DRV9DVVJSRU5UX1NDUkVFTl9IRUFERVInLFxuICAgIFtwZXJjZW50U2Nyb2xsZWRdLFxuICAgICckMSUgc2Nyb2xsZWQsJyxcbiAgKTtcbiAgY3VycmVudFNjcmVlbkNvbnRlbnQgKz0gJ1xcbic7XG5cbiAgZm9yIChsZXQgaSA9IHRvcFJvdzsgaSA8PSBib3R0b21Sb3c7ICsraSkge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLmZldGNoUm93Tm9kZV8oaSk7XG4gICAgY3VycmVudFNjcmVlbkNvbnRlbnQgKz0gbm9kZS50ZXh0Q29udGVudCArICdcXG4nO1xuICB9XG5cbiAgdGhpcy5hY2Nlc3NpYmlsaXR5UmVhZGVyXy5hc3NlcnRpdmVBbm5vdW5jZShjdXJyZW50U2NyZWVuQ29udGVudCk7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgcG9zaXRpb24gYW5kIHNpemUgb2YgdGhlIHJvdyBub2RlcyBlbGVtZW50LlxuICovXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5zeW5jUm93Tm9kZXNEaW1lbnNpb25zXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2NyZWVuU2l6ZSA9IHRoaXMuZ2V0U2NyZWVuU2l6ZSgpO1xuXG4gIHRoaXMubGFzdFNjcmVlbldpZHRoXyA9IHNjcmVlblNpemUud2lkdGg7XG4gIHRoaXMubGFzdFNjcmVlbkhlaWdodF8gPSBzY3JlZW5TaXplLmhlaWdodDtcblxuICAvLyBXZSBkb24ndCB3YW50IHRvIHNob3cgYSBwYXJ0aWFsIHJvdyBiZWNhdXNlIGl0IHdvdWxkIGJlIGRpc3RyYWN0aW5nXG4gIC8vIGluIGEgdGVybWluYWwsIHNvIHdlIGZsb29yIGFueSBmcmFjdGlvbmFsIHJvdyBjb3VudC5cbiAgdGhpcy52aXNpYmxlUm93Q291bnQgPSBsaWIuZi5zbWFydEZsb29yRGl2aWRlKFxuICAgIHNjcmVlblNpemUuaGVpZ2h0LFxuICAgIHRoaXMuY2hhcmFjdGVyU2l6ZS5oZWlnaHQsXG4gICk7XG5cbiAgLy8gVGhlbiBjb21wdXRlIHRoZSBoZWlnaHQgb2Ygb3VyIGludGVncmFsIG51bWJlciBvZiByb3dzLlxuICB2YXIgdmlzaWJsZVJvd3NIZWlnaHQgPSB0aGlzLnZpc2libGVSb3dDb3VudCAqIHRoaXMuY2hhcmFjdGVyU2l6ZS5oZWlnaHQ7XG5cbiAgLy8gVGhlbiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBzY3JlZW4gaGVpZ2h0IGFuZCB0b3RhbCByb3cgaGVpZ2h0IG5lZWRzIHRvXG4gIC8vIGJlIG1hZGUgdXAgZm9yIGFzIHRvcCBtYXJnaW4uICBXZSBuZWVkIHRvIHJlY29yZCB0aGlzIHZhbHVlIHNvIGl0XG4gIC8vIGNhbiBiZSB1c2VkIGxhdGVyIHRvIGRldGVybWluZSB0aGUgdG9wUm93SW5kZXguXG4gIHRoaXMudmlzaWJsZVJvd1RvcE1hcmdpbiA9IDA7XG4gIHRoaXMudmlzaWJsZVJvd0JvdHRvbU1hcmdpbiA9IHNjcmVlblNpemUuaGVpZ2h0IC0gdmlzaWJsZVJvd3NIZWlnaHQ7XG5cbiAgdGhpcy50b3BGb2xkXy5zdHlsZS5tYXJnaW5Cb3R0b20gPSB0aGlzLnZpc2libGVSb3dUb3BNYXJnaW4gKyAncHgnO1xuXG4gIHZhciB0b3BGb2xkT2Zmc2V0ID0gMDtcbiAgdmFyIG5vZGUgPSB0aGlzLnRvcEZvbGRfLnByZXZpb3VzU2libGluZztcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICB0b3BGb2xkT2Zmc2V0ICs9IGh0ZXJtLmdldENsaWVudEhlaWdodChub2RlKTtcbiAgICBub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gIH1cblxuICAvLyBTZXQgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIHZpc2libGUgcm93cyBjb250YWluZXIuXG4gIHRoaXMucm93Tm9kZXNfLnN0eWxlLndpZHRoID0gc2NyZWVuU2l6ZS53aWR0aCArICdweCc7XG4gIHRoaXMucm93Tm9kZXNfLnN0eWxlLmhlaWdodCA9IHZpc2libGVSb3dzSGVpZ2h0ICsgdG9wRm9sZE9mZnNldCArICdweCc7XG4gIHRoaXMucm93Tm9kZXNfLnN0eWxlLmxlZnQgPSB0aGlzLnNjcmVlbl8ub2Zmc2V0TGVmdCArICdweCc7XG4gIHRoaXMucm93Tm9kZXNfLnN0eWxlLnRvcCA9IHRoaXMuc2NyZWVuXy5vZmZzZXRUb3AgLSB0b3BGb2xkT2Zmc2V0ICsgJ3B4Jztcbn07XG5cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnN5bmNTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgLy8gUmVzaXplIHRoZSBzY3JvbGwgYXJlYSB0byBhcHBlYXIgYXMgdGhvdWdoIGl0IGNvbnRhaW5zIGV2ZXJ5IHJvdy5cbiAgdGhpcy5sYXN0Um93Q291bnRfID0gdGhpcy5yb3dQcm92aWRlcl8uZ2V0Um93Q291bnQoKTtcbiAgdGhpcy5zY3JvbGxBcmVhXy5zdHlsZS5oZWlnaHQgPVxuICAgIHRoaXMuY2hhcmFjdGVyU2l6ZS5oZWlnaHQgKiB0aGlzLmxhc3RSb3dDb3VudF8gK1xuICAgIHRoaXMudmlzaWJsZVJvd1RvcE1hcmdpbiArXG4gICAgdGhpcy52aXNpYmxlUm93Qm90dG9tTWFyZ2luICtcbiAgICAncHgnO1xufTtcblxuLyoqXG4gKiBTY2hlZHVsZSBhIHJlZHJhdyB0byBoYXBwZW4gYXN5bmNocm9ub3VzbHkuXG4gKlxuICogSWYgdGhpcyBtZXRob2QgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGJlZm9yZSB0aGUgcmVkcmF3IGhhcyBhIGNoYW5jZSB0b1xuICogcnVuIG9ubHkgb25lIHJlZHJhdyBvY2N1cnMuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNjaGVkdWxlUmVkcmF3ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnRpbWVvdXRzXy5yZWRyYXcpIHJldHVybjtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMudGltZW91dHNfLnJlZHJhdyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHNlbGYudGltZW91dHNfLnJlZHJhdztcbiAgICBzZWxmLnJlZHJhd18oKTtcbiAgfSwgMCk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZSB0aGUgc3RhdGUgb2Ygc2Nyb2xsIHVwL2Rvd24gYnV0dG9ucy5cbiAqXG4gKiBJZiB0aGUgdmlld3BvcnQgaXMgYXQgdGhlIHRvcCBvciBib3R0b20gcm93IG9mIG91dHB1dCwgdGhlc2UgYnV0dG9ucyB3aWxsXG4gKiBiZSBtYWRlIHRyYW5zcGFyZW50IGFuZCBjbGlja2luZyB0aGVtIHNob3VsZG4ndCBzY3JvbGwgYW55IGZ1cnRoZXIuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnVwZGF0ZVNjcm9sbEJ1dHRvblN0YXRlXyA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBzZXRCdXR0b24gPSAoYnV0dG9uLCBkaXNhYmxlZCkgPT4ge1xuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCBkaXNhYmxlZCA/ICd0cnVlJyA6ICdmYWxzZScpO1xuICAgIGJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gZGlzYWJsZWQgPyAwLjUgOiAxO1xuICB9O1xuICBzZXRCdXR0b24odGhpcy5zY3JvbGxVcEJ1dHRvbl8sIHRoaXMuZ2V0VG9wUm93SW5kZXgoKSA9PSAwKTtcbiAgc2V0QnV0dG9uKHRoaXMuc2Nyb2xsRG93bkJ1dHRvbl8sIHRoaXMuaXNTY3JvbGxlZEVuZCk7XG59O1xuXG4vKipcbiAqIFJlZHJhdyB0aGUgY3VycmVudCBodGVybS5TY3JvbGxQb3J0IGJhc2VkIG9uIHRoZSBjdXJyZW50IHNjcm9sbGJhciBwb3NpdGlvbi5cbiAqXG4gKiBXaGVuIHJlZHJhd2luZywgd2UgYXJlIGNhcmVmdWwgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHJvd3MgdGhhdCBzdGFydCBvciBlbmRcbiAqIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBhcmUgbm90IHRvdWNoZWQgaW4gYW55IHdheS4gIERvaW5nIHNvIHdvdWxkIGRpc3R1cmJcbiAqIHRoZSBzZWxlY3Rpb24sIGFuZCBjbGVhbmluZyB1cCBhZnRlciB0aGF0IHdvdWxkIGNhdXNlIGZsYXNoZXMgYXQgYmVzdCBhbmRcbiAqIGluY29ycmVjdCBzZWxlY3Rpb24gYXQgd29yc3QuICBJbnN0ZWFkLCB3ZSBtb2RpZnkgdGhlIERPTSBhcm91bmQgdGhlc2Ugbm9kZXMuXG4gKiBXZSBldmVuIHN0YXNoIHRoZSBzZWxlY3Rpb24gc3RhcnQvZW5kIG91dHNpZGUgb2YgdGhlIHZpc2libGUgYXJlYSBpZlxuICogdGhleSBhcmUgbm90IHN1cHBvc2VkIHRvIGJlIHZpc2libGUgaW4gdGhlIGh0ZXJtLlNjcm9sbFBvcnQuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnJlZHJhd18gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZXNldFNlbGVjdEJhZ3NfKCk7XG4gIHRoaXMuc2VsZWN0aW9uLnN5bmMoKTtcblxuICB0aGlzLnN5bmNTY3JvbGxIZWlnaHQoKTtcblxuICB0aGlzLmN1cnJlbnRSb3dOb2RlQ2FjaGVfID0ge307XG5cbiAgdmFyIHRvcFJvd0luZGV4ID0gdGhpcy5nZXRUb3BSb3dJbmRleCgpO1xuICB2YXIgYm90dG9tUm93SW5kZXggPSB0aGlzLmdldEJvdHRvbVJvd0luZGV4KHRvcFJvd0luZGV4KTtcblxuICB0aGlzLmRyYXdUb3BGb2xkXyh0b3BSb3dJbmRleCk7XG4gIHRoaXMuZHJhd0JvdHRvbUZvbGRfKGJvdHRvbVJvd0luZGV4KTtcbiAgdGhpcy5kcmF3VmlzaWJsZVJvd3NfKHRvcFJvd0luZGV4LCBib3R0b21Sb3dJbmRleCk7XG5cbiAgdGhpcy5zeW5jUm93Tm9kZXNEaW1lbnNpb25zXygpO1xuXG4gIHRoaXMucHJldmlvdXNSb3dOb2RlQ2FjaGVfID0gdGhpcy5jdXJyZW50Um93Tm9kZUNhY2hlXztcbiAgdGhpcy5jdXJyZW50Um93Tm9kZUNhY2hlXyA9IG51bGw7XG5cbiAgdGhpcy5pc1Njcm9sbGVkRW5kID1cbiAgICB0aGlzLmdldFRvcFJvd0luZGV4KCkgKyB0aGlzLnZpc2libGVSb3dDb3VudCA+PSB0aGlzLmxhc3RSb3dDb3VudF87XG5cbiAgdGhpcy51cGRhdGVTY3JvbGxCdXR0b25TdGF0ZV8oKTtcbn07XG5cbi8qKlxuICogRW5zdXJlIHRoYXQgdGhlIG5vZGVzIGFib3ZlIHRoZSB0b3AgZm9sZCBhcmUgYXMgdGhleSBzaG91bGQgYmUuXG4gKlxuICogSWYgdGhlIHNlbGVjdGlvbiBzdGFydCBhbmQvb3IgZW5kIG5vZGVzIGFyZSBhYm92ZSB0aGUgdmlzaWJsZSByYW5nZVxuICogb2YgdGhpcyBodGVybS5TY3JvbGxQb3J0IHRoZW4gdGhlIGRvbSB3aWxsIGJlIGFkanVzdGVkIHNvIHRoYXQgdGhleSBhcHBlYXJcbiAqIGJlZm9yZSB0aGUgdG9wIGZvbGQgKHRoZSBmaXJzdCB4LWZvbGQgZWxlbWVudCwgYWthIHRoaXMudG9wRm9sZCkuXG4gKlxuICogSWYgbm90LCB0aGUgdG9wIGZvbGQgd2lsbCBiZSB0aGUgZmlyc3QgZWxlbWVudC5cbiAqXG4gKiBJdCBpcyBjcml0aWNhbCB0aGF0IHRoaXMgbWV0aG9kIGRvZXMgbm90IG1vdmUgdGhlIHNlbGVjdGlvbiBub2Rlcy4gIERvaW5nXG4gKiBzbyB3b3VsZCBjbGVhciB0aGUgY3VycmVudCBzZWxlY3Rpb24uICBJbnN0ZWFkLCB0aGUgcmVzdCBvZiB0aGUgRE9NIGlzXG4gKiBhZGp1c3RlZCBhcm91bmQgdGhlbS5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuZHJhd1RvcEZvbGRfID0gZnVuY3Rpb24odG9wUm93SW5kZXgpIHtcbiAgaWYgKFxuICAgICF0aGlzLnNlbGVjdGlvbi5zdGFydFJvdyB8fFxuICAgIHRoaXMuc2VsZWN0aW9uLnN0YXJ0Um93LnJvd0luZGV4ID49IHRvcFJvd0luZGV4XG4gICkge1xuICAgIC8vIFNlbGVjdGlvbiBpcyBlbnRpcmVseSBiZWxvdyB0aGUgdG9wIGZvbGQsIGp1c3QgbWFrZSBzdXJlIHRoZSBmb2xkIGlzXG4gICAgLy8gdGhlIGZpcnN0IGNoaWxkLlxuICAgIGlmICh0aGlzLnJvd05vZGVzXy5maXJzdENoaWxkICE9IHRoaXMudG9wRm9sZF8pXG4gICAgICB0aGlzLnJvd05vZGVzXy5pbnNlcnRCZWZvcmUodGhpcy50b3BGb2xkXywgdGhpcy5yb3dOb2Rlc18uZmlyc3RDaGlsZCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoXG4gICAgIXRoaXMuc2VsZWN0aW9uLmlzTXVsdGlsaW5lIHx8XG4gICAgdGhpcy5zZWxlY3Rpb24uZW5kUm93LnJvd0luZGV4ID49IHRvcFJvd0luZGV4XG4gICkge1xuICAgIC8vIE9ubHkgdGhlIHN0YXJ0Um93IGlzIGFib3ZlIHRoZSBmb2xkLlxuICAgIGlmICh0aGlzLnNlbGVjdGlvbi5zdGFydFJvdy5uZXh0U2libGluZyAhPSB0aGlzLnRvcEZvbGRfKVxuICAgICAgdGhpcy5yb3dOb2Rlc18uaW5zZXJ0QmVmb3JlKFxuICAgICAgICB0aGlzLnRvcEZvbGRfLFxuICAgICAgICB0aGlzLnNlbGVjdGlvbi5zdGFydFJvdy5uZXh0U2libGluZyxcbiAgICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQm90aCByb3dzIGFyZSBhYm92ZSB0aGUgZm9sZC5cbiAgICBpZiAodGhpcy5zZWxlY3Rpb24uZW5kUm93Lm5leHRTaWJsaW5nICE9IHRoaXMudG9wRm9sZF8pIHtcbiAgICAgIHRoaXMucm93Tm9kZXNfLmluc2VydEJlZm9yZShcbiAgICAgICAgdGhpcy50b3BGb2xkXyxcbiAgICAgICAgdGhpcy5zZWxlY3Rpb24uZW5kUm93Lm5leHRTaWJsaW5nLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBUcmltIGFueSBpbnRlcm1lZGlhdGUgbGluZXMuXG4gICAgd2hpbGUgKHRoaXMuc2VsZWN0aW9uLnN0YXJ0Um93Lm5leHRTaWJsaW5nICE9IHRoaXMuc2VsZWN0aW9uLmVuZFJvdykge1xuICAgICAgdGhpcy5yb3dOb2Rlc18ucmVtb3ZlQ2hpbGQodGhpcy5zZWxlY3Rpb24uc3RhcnRSb3cubmV4dFNpYmxpbmcpO1xuICAgIH1cbiAgfVxuXG4gIHdoaWxlICh0aGlzLnJvd05vZGVzXy5maXJzdENoaWxkICE9IHRoaXMuc2VsZWN0aW9uLnN0YXJ0Um93KSB7XG4gICAgdGhpcy5yb3dOb2Rlc18ucmVtb3ZlQ2hpbGQodGhpcy5yb3dOb2Rlc18uZmlyc3RDaGlsZCk7XG4gIH1cbn07XG5cbi8qKlxuICogRW5zdXJlIHRoYXQgdGhlIG5vZGVzIGJlbG93IHRoZSBib3R0b20gZm9sZCBhcmUgYXMgdGhleSBzaG91bGQgYmUuXG4gKlxuICogSWYgdGhlIHNlbGVjdGlvbiBzdGFydCBhbmQvb3IgZW5kIG5vZGVzIGFyZSBiZWxvdyB0aGUgdmlzaWJsZSByYW5nZVxuICogb2YgdGhpcyBodGVybS5TY3JvbGxQb3J0IHRoZW4gdGhlIGRvbSB3aWxsIGJlIGFkanVzdGVkIHNvIHRoYXQgdGhleSBhcHBlYXJcbiAqIGFmdGVyIHRoZSBib3R0b20gZm9sZCAodGhlIHNlY29uZCB4LWZvbGQgZWxlbWVudCwgYWthIHRoaXMuYm90dG9tRm9sZCkuXG4gKlxuICogSWYgbm90LCB0aGUgYm90dG9tIGZvbGQgd2lsbCBiZSB0aGUgbGFzdCBlbGVtZW50LlxuICpcbiAqIEl0IGlzIGNyaXRpY2FsIHRoYXQgdGhpcyBtZXRob2QgZG9lcyBub3QgbW92ZSB0aGUgc2VsZWN0aW9uIG5vZGVzLiAgRG9pbmdcbiAqIHNvIHdvdWxkIGNsZWFyIHRoZSBjdXJyZW50IHNlbGVjdGlvbi4gIEluc3RlYWQsIHRoZSByZXN0IG9mIHRoZSBET00gaXNcbiAqIGFkanVzdGVkIGFyb3VuZCB0aGVtLlxuICovXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5kcmF3Qm90dG9tRm9sZF8gPSBmdW5jdGlvbihib3R0b21Sb3dJbmRleCkge1xuICBpZiAoXG4gICAgIXRoaXMuc2VsZWN0aW9uLmVuZFJvdyB8fFxuICAgIHRoaXMuc2VsZWN0aW9uLmVuZFJvdy5yb3dJbmRleCA8PSBib3R0b21Sb3dJbmRleFxuICApIHtcbiAgICAvLyBTZWxlY3Rpb24gaXMgZW50aXJlbHkgYWJvdmUgdGhlIGJvdHRvbSBmb2xkLCBqdXN0IG1ha2Ugc3VyZSB0aGUgZm9sZCBpc1xuICAgIC8vIHRoZSBsYXN0IGNoaWxkLlxuICAgIGlmICh0aGlzLnJvd05vZGVzXy5sYXN0Q2hpbGQgIT0gdGhpcy5ib3R0b21Gb2xkXylcbiAgICAgIHRoaXMucm93Tm9kZXNfLmFwcGVuZENoaWxkKHRoaXMuYm90dG9tRm9sZF8pO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKFxuICAgICF0aGlzLnNlbGVjdGlvbi5pc011bHRpbGluZSB8fFxuICAgIHRoaXMuc2VsZWN0aW9uLnN0YXJ0Um93LnJvd0luZGV4IDw9IGJvdHRvbVJvd0luZGV4XG4gICkge1xuICAgIC8vIE9ubHkgdGhlIGVuZFJvdyBpcyBiZWxvdyB0aGUgZm9sZC5cbiAgICBpZiAodGhpcy5ib3R0b21Gb2xkXy5uZXh0U2libGluZyAhPSB0aGlzLnNlbGVjdGlvbi5lbmRSb3cpXG4gICAgICB0aGlzLnJvd05vZGVzXy5pbnNlcnRCZWZvcmUodGhpcy5ib3R0b21Gb2xkXywgdGhpcy5zZWxlY3Rpb24uZW5kUm93KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCb3RoIHJvd3MgYXJlIGJlbG93IHRoZSBmb2xkLlxuICAgIGlmICh0aGlzLmJvdHRvbUZvbGRfLm5leHRTaWJsaW5nICE9IHRoaXMuc2VsZWN0aW9uLnN0YXJ0Um93KSB7XG4gICAgICB0aGlzLnJvd05vZGVzXy5pbnNlcnRCZWZvcmUodGhpcy5ib3R0b21Gb2xkXywgdGhpcy5zZWxlY3Rpb24uc3RhcnRSb3cpO1xuICAgIH1cblxuICAgIC8vIFRyaW0gYW55IGludGVybWVkaWF0ZSBsaW5lcy5cbiAgICB3aGlsZSAodGhpcy5zZWxlY3Rpb24uc3RhcnRSb3cubmV4dFNpYmxpbmcgIT0gdGhpcy5zZWxlY3Rpb24uZW5kUm93KSB7XG4gICAgICB0aGlzLnJvd05vZGVzXy5yZW1vdmVDaGlsZCh0aGlzLnNlbGVjdGlvbi5zdGFydFJvdy5uZXh0U2libGluZyk7XG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKHRoaXMucm93Tm9kZXNfLmxhc3RDaGlsZCAhPSB0aGlzLnNlbGVjdGlvbi5lbmRSb3cpIHtcbiAgICB0aGlzLnJvd05vZGVzXy5yZW1vdmVDaGlsZCh0aGlzLnJvd05vZGVzXy5sYXN0Q2hpbGQpO1xuICB9XG59O1xuXG4vKipcbiAqIEVuc3VyZSB0aGF0IHRoZSByb3dzIGJldHdlZW4gdGhlIHRvcCBhbmQgYm90dG9tIGZvbGRzIGFyZSBhcyB0aGV5IHNob3VsZCBiZS5cbiAqXG4gKiBUaGlzIG1ldGhvZCBhc3N1bWVzIHRoYXQgZHJhd1RvcEZvbGRfKCkgYW5kIGRyYXdCb3R0b21Gb2xkXygpIGhhdmUgYWxyZWFkeVxuICogcnVuLCBhbmQgdGhhdCB0aGV5IGhhdmUgbGVmdCBhbnkgdmlzaWJsZSBzZWxlY3Rpb24gcm93IChzZWxlY3Rpb24gc3RhcnRcbiAqIG9yIHNlbGVjdGlvbiBlbmQpIGJldHdlZW4gdGhlIGZvbGRzLlxuICpcbiAqIEl0IHJlY3ljbGVzIERPTSBub2RlcyBmcm9tIHRoZSBwcmV2aW91cyByZWRyYXcgd2hlcmUgcG9zc2libGUsIGJ1dCB3aWxsIGFza1xuICogdGhlIHJvd1NvdXJjZSB0byBtYWtlIG5ldyBub2RlcyBpZiBuZWNlc3NhcnkuXG4gKlxuICogSXQgaXMgY3JpdGljYWwgdGhhdCB0aGlzIG1ldGhvZCBkb2VzIG5vdCBtb3ZlIHRoZSBzZWxlY3Rpb24gbm9kZXMuICBEb2luZ1xuICogc28gd291bGQgY2xlYXIgdGhlIGN1cnJlbnQgc2VsZWN0aW9uLiAgSW5zdGVhZCwgdGhlIHJlc3Qgb2YgdGhlIERPTSBpc1xuICogYWRqdXN0ZWQgYXJvdW5kIHRoZW0uXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLmRyYXdWaXNpYmxlUm93c18gPSBmdW5jdGlvbihcbiAgdG9wUm93SW5kZXgsXG4gIGJvdHRvbVJvd0luZGV4LFxuKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyBLZWVwIHJlbW92aW5nIG5vZGVzLCBzdGFydGluZyB3aXRoIGN1cnJlbnROb2RlLCB1bnRpbCB3ZSBlbmNvdW50ZXJcbiAgLy8gdGFyZ2V0Tm9kZS4gIFRocm93cyBvbiBmYWlsdXJlLlxuICBmdW5jdGlvbiByZW1vdmVVbnRpbE5vZGUoY3VycmVudE5vZGUsIHRhcmdldE5vZGUpIHtcbiAgICB3aGlsZSAoY3VycmVudE5vZGUgIT0gdGFyZ2V0Tm9kZSkge1xuICAgICAgaWYgKCFjdXJyZW50Tm9kZSkgdGhyb3cgJ0RpZCBub3QgZW5jb3VudGVyIHRhcmdldCBub2RlJztcblxuICAgICAgaWYgKGN1cnJlbnROb2RlID09IHNlbGYuYm90dG9tRm9sZF8pXG4gICAgICAgIHRocm93ICdFbmNvdW50ZXJlZCBib3R0b20gZm9sZCBiZWZvcmUgdGFyZ2V0IG5vZGUnO1xuXG4gICAgICB2YXIgZGVhZE5vZGUgPSBjdXJyZW50Tm9kZTtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICBkZWFkTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRlYWROb2RlKTtcbiAgICB9XG4gIH1cblxuICAvLyBTaG9ydGhhbmQgZm9yIHRoaW5ncyB3ZSdyZSBnb2luZyB0byB1c2UgYSBsb3QuXG4gIHZhciBzZWxlY3Rpb25TdGFydFJvdyA9IHRoaXMuc2VsZWN0aW9uLnN0YXJ0Um93O1xuICB2YXIgc2VsZWN0aW9uRW5kUm93ID0gdGhpcy5zZWxlY3Rpb24uZW5kUm93O1xuICB2YXIgYm90dG9tRm9sZCA9IHRoaXMuYm90dG9tRm9sZF87XG5cbiAgLy8gVGhlIG5vZGUgd2UncmUgZXhhbWluaW5nIGR1cmluZyB0aGUgY3VycmVudCBpdGVyYXRpb24uXG4gIHZhciBub2RlID0gdGhpcy50b3BGb2xkXy5uZXh0U2libGluZztcblxuICB2YXIgdGFyZ2V0RHJhd0NvdW50ID0gTWF0aC5taW4oXG4gICAgdGhpcy52aXNpYmxlUm93Q291bnQsXG4gICAgdGhpcy5yb3dQcm92aWRlcl8uZ2V0Um93Q291bnQoKSxcbiAgKTtcblxuICBmb3IgKHZhciBkcmF3Q291bnQgPSAwOyBkcmF3Q291bnQgPCB0YXJnZXREcmF3Q291bnQ7IGRyYXdDb3VudCsrKSB7XG4gICAgdmFyIHJvd0luZGV4ID0gdG9wUm93SW5kZXggKyBkcmF3Q291bnQ7XG5cbiAgICBpZiAobm9kZSA9PSBib3R0b21Gb2xkKSB7XG4gICAgICAvLyBXZSd2ZSBoaXQgdGhlIGJvdHRvbSBmb2xkLCB3ZSBuZWVkIHRvIGluc2VydCBhIG5ldyByb3cuXG4gICAgICB2YXIgbmV3Tm9kZSA9IHRoaXMuZmV0Y2hSb3dOb2RlXyhyb3dJbmRleCk7XG4gICAgICBpZiAoIW5ld05vZGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDb3VsZG4ndCBmZXRjaCByb3cgaW5kZXg6IFwiICsgcm93SW5kZXgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdGhpcy5yb3dOb2Rlc18uaW5zZXJ0QmVmb3JlKG5ld05vZGUsIG5vZGUpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUucm93SW5kZXggPT0gcm93SW5kZXgpIHtcbiAgICAgIC8vIFRoaXMgbm9kZSBpcyBpbiB0aGUgcmlnaHQgcGxhY2UsIG1vdmUgYWxvbmcuXG4gICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChzZWxlY3Rpb25TdGFydFJvdyAmJiBzZWxlY3Rpb25TdGFydFJvdy5yb3dJbmRleCA9PSByb3dJbmRleCkge1xuICAgICAgLy8gVGhlIHNlbGVjdGlvbiBzdGFydCByb3cgaXMgc3VwcG9zZWQgdG8gYmUgaGVyZSwgcmVtb3ZlIG5vZGVzIHVudGlsXG4gICAgICAvLyB3ZSBmaW5kIGl0LlxuICAgICAgcmVtb3ZlVW50aWxOb2RlKG5vZGUsIHNlbGVjdGlvblN0YXJ0Um93KTtcbiAgICAgIG5vZGUgPSBzZWxlY3Rpb25TdGFydFJvdy5uZXh0U2libGluZztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChzZWxlY3Rpb25FbmRSb3cgJiYgc2VsZWN0aW9uRW5kUm93LnJvd0luZGV4ID09IHJvd0luZGV4KSB7XG4gICAgICAvLyBUaGUgc2VsZWN0aW9uIGVuZCByb3cgaXMgc3VwcG9zZWQgdG8gYmUgaGVyZSwgcmVtb3ZlIG5vZGVzIHVudGlsXG4gICAgICAvLyB3ZSBmaW5kIGl0LlxuICAgICAgcmVtb3ZlVW50aWxOb2RlKG5vZGUsIHNlbGVjdGlvbkVuZFJvdyk7XG4gICAgICBub2RlID0gc2VsZWN0aW9uRW5kUm93Lm5leHRTaWJsaW5nO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUgPT0gc2VsZWN0aW9uU3RhcnRSb3cgfHwgbm9kZSA9PSBzZWxlY3Rpb25FbmRSb3cpIHtcbiAgICAgIC8vIFdlIGVuY291bnRlcmVkIHRoZSBzdGFydC9lbmQgb2YgdGhlIHNlbGVjdGlvbiwgYnV0IHdlIGRvbid0IHdhbnQgaXRcbiAgICAgIC8vIHlldC4gIEluc2VydCBhIG5ldyByb3cgaW5zdGVhZC5cbiAgICAgIHZhciBuZXdOb2RlID0gdGhpcy5mZXRjaFJvd05vZGVfKHJvd0luZGV4KTtcbiAgICAgIGlmICghbmV3Tm9kZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkNvdWxkbid0IGZldGNoIHJvdyBpbmRleDogXCIgKyByb3dJbmRleCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJvd05vZGVzXy5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgbm9kZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBUaGVyZSBpcyBub3RoaW5nIHNwZWNpYWwgYWJvdXQgdGhpcyBub2RlLCBidXQgaXQncyBpbiBvdXIgd2F5LiAgUmVwbGFjZVxuICAgIC8vIGl0IHdpdGggdGhlIG5vZGUgdGhhdCBzaG91bGQgYmUgaGVyZS5cbiAgICB2YXIgbmV3Tm9kZSA9IHRoaXMuZmV0Y2hSb3dOb2RlXyhyb3dJbmRleCk7XG4gICAgaWYgKCFuZXdOb2RlKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkNvdWxkbid0IGZldGNoIHJvdyBpbmRleDogXCIgKyByb3dJbmRleCk7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAobm9kZSA9PSBuZXdOb2RlKSB7XG4gICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHRoaXMucm93Tm9kZXNfLmluc2VydEJlZm9yZShuZXdOb2RlLCBub2RlKTtcbiAgICBpZiAoIW5ld05vZGUubmV4dFNpYmxpbmcpIGRlYnVnZ2VyO1xuICAgIHRoaXMucm93Tm9kZXNfLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIG5vZGUgPSBuZXdOb2RlLm5leHRTaWJsaW5nO1xuICB9XG5cbiAgaWYgKG5vZGUgIT0gdGhpcy5ib3R0b21Gb2xkXykgcmVtb3ZlVW50aWxOb2RlKG5vZGUsIGJvdHRvbUZvbGQpO1xufTtcblxuLyoqXG4gKiBFbXB0eSBvdXQgYm90aCBzZWxlY3QgYmFncyBhbmQgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgZG9jdW1lbnQuXG4gKlxuICogVGhlc2Ugbm9kZXMgaG9sZCB0aGUgdGV4dCBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSBzZWxlY3Rpb25cbiAqIHdoZW4gdGhhdCB0ZXh0IGlzIG90aGVyd2lzZSBvZmYgc2NyZWVuLiAgVGhleSBhcmUgZmlsbGVkIG91dCBpbiB0aGVcbiAqIG9uQ29weV8gZXZlbnQuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnJlc2V0U2VsZWN0QmFnc18gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMudG9wU2VsZWN0QmFnXy5wYXJlbnROb2RlKSB7XG4gICAgdGhpcy50b3BTZWxlY3RCYWdfLnRleHRDb250ZW50ID0gJyc7XG4gICAgdGhpcy50b3BTZWxlY3RCYWdfLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy50b3BTZWxlY3RCYWdfKTtcbiAgfVxuXG4gIGlmICh0aGlzLmJvdHRvbVNlbGVjdEJhZ18ucGFyZW50Tm9kZSkge1xuICAgIHRoaXMuYm90dG9tU2VsZWN0QmFnXy50ZXh0Q29udGVudCA9ICcnO1xuICAgIHRoaXMuYm90dG9tU2VsZWN0QmFnXy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuYm90dG9tU2VsZWN0QmFnXyk7XG4gIH1cbn07XG5cbi8qKlxuICogUGxhY2UgYSByb3cgbm9kZSBpbiB0aGUgY2FjaGUgb2YgdmlzaWJsZSBub2Rlcy5cbiAqXG4gKiBUaGlzIG1ldGhvZCBtYXkgb25seSBiZSB1c2VkIGR1cmluZyBhIHJlZHJhd18uXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLmNhY2hlUm93Tm9kZV8gPSBmdW5jdGlvbihyb3dOb2RlKSB7XG4gIHRoaXMuY3VycmVudFJvd05vZGVDYWNoZV9bcm93Tm9kZS5yb3dJbmRleF0gPSByb3dOb2RlO1xufTtcblxuLyoqXG4gKiBGZXRjaCB0aGUgcm93IG5vZGUgZm9yIHRoZSBnaXZlbiBpbmRleC5cbiAqXG4gKiBUaGlzIHdpbGwgcmV0dXJuIGEgbm9kZSBmcm9tIHRoZSBjYWNoZSBpZiBwb3NzaWJsZSwgb3Igd2lsbCByZXF1ZXN0IG9uZVxuICogZnJvbSB0aGUgUm93UHJvdmlkZXIgaWYgbm90LlxuICpcbiAqIElmIGEgcmVkcmF3XyBpcyBpbiBwcm9ncmVzcyB0aGUgcm93IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGN1cnJlbnQgY2FjaGUuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLmZldGNoUm93Tm9kZV8gPSBmdW5jdGlvbihyb3dJbmRleCkge1xuICB2YXIgbm9kZTtcblxuICBpZiAodGhpcy5wcmV2aW91c1Jvd05vZGVDYWNoZV8gJiYgcm93SW5kZXggaW4gdGhpcy5wcmV2aW91c1Jvd05vZGVDYWNoZV8pIHtcbiAgICBub2RlID0gdGhpcy5wcmV2aW91c1Jvd05vZGVDYWNoZV9bcm93SW5kZXhdO1xuICB9IGVsc2Uge1xuICAgIG5vZGUgPSB0aGlzLnJvd1Byb3ZpZGVyXy5nZXRSb3dOb2RlKHJvd0luZGV4KTtcbiAgfVxuXG4gIGlmICh0aGlzLmN1cnJlbnRSb3dOb2RlQ2FjaGVfKSB0aGlzLmNhY2hlUm93Tm9kZV8obm9kZSk7XG5cbiAgcmV0dXJuIG5vZGU7XG59O1xuXG4vKipcbiAqIFNlbGVjdCBhbGwgcm93cyBpbiB0aGUgdmlld3BvcnQuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZmlyc3RSb3c7XG5cbiAgaWYgKHRoaXMudG9wRm9sZF8ubmV4dFNpYmxpbmcucm93SW5kZXggIT0gMCkge1xuICAgIHdoaWxlICh0aGlzLnRvcEZvbGRfLnByZXZpb3VzU2libGluZykge1xuICAgICAgdGhpcy5yb3dOb2Rlc18ucmVtb3ZlQ2hpbGQodGhpcy50b3BGb2xkXy5wcmV2aW91c1NpYmxpbmcpO1xuICAgIH1cblxuICAgIGZpcnN0Um93ID0gdGhpcy5mZXRjaFJvd05vZGVfKDApO1xuICAgIHRoaXMucm93Tm9kZXNfLmluc2VydEJlZm9yZShmaXJzdFJvdywgdGhpcy50b3BGb2xkXyk7XG4gICAgdGhpcy5zeW5jUm93Tm9kZXNEaW1lbnNpb25zXygpO1xuICB9IGVsc2Uge1xuICAgIGZpcnN0Um93ID0gdGhpcy50b3BGb2xkXy5uZXh0U2libGluZztcbiAgfVxuXG4gIHZhciBsYXN0Um93SW5kZXggPSB0aGlzLnJvd1Byb3ZpZGVyXy5nZXRSb3dDb3VudCgpIC0gMTtcbiAgdmFyIGxhc3RSb3c7XG5cbiAgaWYgKHRoaXMuYm90dG9tRm9sZF8ucHJldmlvdXNTaWJsaW5nLnJvd0luZGV4ICE9IGxhc3RSb3dJbmRleCkge1xuICAgIHdoaWxlICh0aGlzLmJvdHRvbUZvbGRfLm5leHRTaWJsaW5nKSB7XG4gICAgICB0aGlzLnJvd05vZGVzXy5yZW1vdmVDaGlsZCh0aGlzLmJvdHRvbUZvbGRfLm5leHRTaWJsaW5nKTtcbiAgICB9XG5cbiAgICBsYXN0Um93ID0gdGhpcy5mZXRjaFJvd05vZGVfKGxhc3RSb3dJbmRleCk7XG4gICAgdGhpcy5yb3dOb2Rlc18uYXBwZW5kQ2hpbGQobGFzdFJvdyk7XG4gIH0gZWxzZSB7XG4gICAgbGFzdFJvdyA9IHRoaXMuYm90dG9tRm9sZF8ucHJldmlvdXNTaWJsaW5nLnJvd0luZGV4O1xuICB9XG5cbiAgdmFyIHNlbGVjdGlvbiA9IHRoaXMuZG9jdW1lbnRfLmdldFNlbGVjdGlvbigpO1xuICBzZWxlY3Rpb24uY29sbGFwc2UoZmlyc3RSb3csIDApO1xuICBzZWxlY3Rpb24uZXh0ZW5kKGxhc3RSb3csIGxhc3RSb3cuY2hpbGROb2Rlcy5sZW5ndGgpO1xuXG4gIHRoaXMuc2VsZWN0aW9uLnN5bmMoKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBtYXhpbXVtIHNjcm9sbCBwb3NpdGlvbiBpbiBwaXhlbHMuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLmdldFNjcm9sbE1heF8gPSBmdW5jdGlvbihlKSB7XG4gIHJldHVybiAoXG4gICAgaHRlcm0uZ2V0Q2xpZW50SGVpZ2h0KHRoaXMuc2Nyb2xsQXJlYV8pICtcbiAgICB0aGlzLnZpc2libGVSb3dUb3BNYXJnaW4gK1xuICAgIHRoaXMudmlzaWJsZVJvd0JvdHRvbU1hcmdpbiAtXG4gICAgaHRlcm0uZ2V0Q2xpZW50SGVpZ2h0KHRoaXMuc2NyZWVuXylcbiAgKTtcbn07XG5cbi8qKlxuICogU2Nyb2xsIHRoZSBnaXZlbiByb3dJbmRleCB0byB0aGUgdG9wIG9mIHRoZSBodGVybS5TY3JvbGxQb3J0LlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gcm93SW5kZXggSW5kZXggb2YgdGhlIHRhcmdldCByb3cuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNjcm9sbFJvd1RvVG9wID0gZnVuY3Rpb24ocm93SW5kZXgpIHtcbiAgdGhpcy5zeW5jU2Nyb2xsSGVpZ2h0KCk7XG5cbiAgdGhpcy5pc1Njcm9sbGVkRW5kID0gcm93SW5kZXggKyB0aGlzLnZpc2libGVSb3dDb3VudCA+PSB0aGlzLmxhc3RSb3dDb3VudF87XG5cbiAgdmFyIHNjcm9sbFRvcCA9XG4gICAgcm93SW5kZXggKiB0aGlzLmNoYXJhY3RlclNpemUuaGVpZ2h0ICsgdGhpcy52aXNpYmxlUm93VG9wTWFyZ2luO1xuXG4gIHZhciBzY3JvbGxNYXggPSB0aGlzLmdldFNjcm9sbE1heF8oKTtcbiAgaWYgKHNjcm9sbFRvcCA+IHNjcm9sbE1heCkgc2Nyb2xsVG9wID0gc2Nyb2xsTWF4O1xuXG4gIGlmICh0aGlzLnNjcmVlbl8uc2Nyb2xsVG9wID09IHNjcm9sbFRvcCkgcmV0dXJuO1xuXG4gIHRoaXMuc2NyZWVuXy5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gIHRoaXMuc2NoZWR1bGVSZWRyYXcoKTtcbn07XG5cbi8qKlxuICogU2Nyb2xsIHRoZSBnaXZlbiByb3dJbmRleCB0byB0aGUgYm90dG9tIG9mIHRoZSBodGVybS5TY3JvbGxQb3J0LlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gcm93SW5kZXggSW5kZXggb2YgdGhlIHRhcmdldCByb3cuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNjcm9sbFJvd1RvQm90dG9tID0gZnVuY3Rpb24ocm93SW5kZXgpIHtcbiAgdGhpcy5zeW5jU2Nyb2xsSGVpZ2h0KCk7XG5cbiAgdGhpcy5pc1Njcm9sbGVkRW5kID0gcm93SW5kZXggKyB0aGlzLnZpc2libGVSb3dDb3VudCA+PSB0aGlzLmxhc3RSb3dDb3VudF87XG5cbiAgdmFyIHNjcm9sbFRvcCA9XG4gICAgcm93SW5kZXggKiB0aGlzLmNoYXJhY3RlclNpemUuaGVpZ2h0ICtcbiAgICB0aGlzLnZpc2libGVSb3dUb3BNYXJnaW4gK1xuICAgIHRoaXMudmlzaWJsZVJvd0JvdHRvbU1hcmdpbjtcbiAgc2Nyb2xsVG9wIC09IHRoaXMudmlzaWJsZVJvd0NvdW50ICogdGhpcy5jaGFyYWN0ZXJTaXplLmhlaWdodDtcblxuICBpZiAoc2Nyb2xsVG9wIDwgMCkgc2Nyb2xsVG9wID0gMDtcblxuICBpZiAodGhpcy5zY3JlZW5fLnNjcm9sbFRvcCA9PSBzY3JvbGxUb3ApIHJldHVybjtcblxuICB0aGlzLnNjcmVlbl8uc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHJvdyBpbmRleCBvZiB0aGUgZmlyc3QgdmlzaWJsZSByb3cuXG4gKlxuICogVGhpcyBpcyBiYXNlZCBvbiB0aGUgc2Nyb2xsIHBvc2l0aW9uLiAgSWYgYSByZWRyYXdfIGlzIGluIHByb2dyZXNzIHRoaXNcbiAqIHJldHVybnMgdGhlIHJvdyB0aGF0ICpzaG91bGQqIGJlIGF0IHRoZSB0b3AuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLmdldFRvcFJvd0luZGV4ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHRoaXMuc2NyZWVuXy5zY3JvbGxUb3AgLyB0aGlzLmNoYXJhY3RlclNpemUuaGVpZ2h0KTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSByb3cgaW5kZXggb2YgdGhlIGxhc3QgdmlzaWJsZSByb3cuXG4gKlxuICogVGhpcyBpcyBiYXNlZCBvbiB0aGUgc2Nyb2xsIHBvc2l0aW9uLiAgSWYgYSByZWRyYXdfIGlzIGluIHByb2dyZXNzIHRoaXNcbiAqIHJldHVybnMgdGhlIHJvdyB0aGF0ICpzaG91bGQqIGJlIGF0IHRoZSBib3R0b20uXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLmdldEJvdHRvbVJvd0luZGV4ID0gZnVuY3Rpb24odG9wUm93SW5kZXgpIHtcbiAgcmV0dXJuIHRvcFJvd0luZGV4ICsgdGhpcy52aXNpYmxlUm93Q291bnQgLSAxO1xufTtcblxuLyoqXG4gKiBIYW5kbGVyIGZvciBzY3JvbGwgZXZlbnRzLlxuICpcbiAqIFRoZSBvblNjcm9sbCBldmVudCBmaXJlcyB3aGVuIHNjcm9sbEFyZWEncyBzY3JvbGxUb3AgcHJvcGVydHkgY2hhbmdlcy4gIFRoaXNcbiAqIG1heSBiZSBkdWUgdG8gdGhlIHVzZXIgbWFudWFsbHkgbW92ZSB0aGUgc2Nyb2xsYmFyLCBvciBhIHByb2dyYW1tYXRpYyBjaGFuZ2UuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLm9uU2Nyb2xsXyA9IGZ1bmN0aW9uKGUpIHtcbiAgdmFyIHNjcmVlblNpemUgPSB0aGlzLmdldFNjcmVlblNpemUoKTtcbiAgaWYgKFxuICAgIHNjcmVlblNpemUud2lkdGggIT0gdGhpcy5sYXN0U2NyZWVuV2lkdGhfIHx8XG4gICAgc2NyZWVuU2l6ZS5oZWlnaHQgIT0gdGhpcy5sYXN0U2NyZWVuSGVpZ2h0X1xuICApIHtcbiAgICAvLyBUaGlzIGV2ZW50IG1heSBhbHNvIGZpcmUgZHVyaW5nIGEgcmVzaXplIChidXQgYmVmb3JlIHRoZSByZXNpemUgZXZlbnQhKS5cbiAgICAvLyBUaGlzIGhhcHBlbnMgd2hlbiB0aGUgYnJvd3NlciBtb3ZlcyB0aGUgc2Nyb2xsYmFyIGFzIHBhcnQgb2YgdGhlIHJlc2l6ZS5cbiAgICAvLyBJbiB0aGVzZSBjYXNlcywgd2Ugd2FudCB0byBpZ25vcmUgdGhlIHNjcm9sbCBldmVudCBhbmQgbGV0IG9uUmVzaXplXG4gICAgLy8gaGFuZGxlIHRoaW5ncy4gIElmIHdlIGRvbid0LCB0aGVuIHdlIGVuZCB1cCBzY3JvbGxpbmcgdG8gdGhlIHdyb25nXG4gICAgLy8gcG9zaXRpb24gYWZ0ZXIgYSByZXNpemUuXG4gICAgdGhpcy5yZXNpemUoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLnJlZHJhd18oKTtcbiAgdGhpcy5wdWJsaXNoKCdzY3JvbGwnLCB7IHNjcm9sbFBvcnQ6IHRoaXMgfSk7XG59O1xuXG4vKipcbiAqIENsaWVudHMgY2FuIG92ZXJyaWRlIHRoaXMgaWYgdGhleSB3YW50IHRvIGhlYXIgc2Nyb2xsd2hlZWwgZXZlbnRzLlxuICpcbiAqIENsaWVudHMgbWF5IGNhbGwgZXZlbnQucHJldmVudERlZmF1bHQoKSBpZiB0aGV5IHdhbnQgdG8ga2VlcCB0aGUgc2Nyb2xscG9ydFxuICogZnJvbSBhbHNvIGhhbmRsaW5nIHRoZSBldmVudHMuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLm9uU2Nyb2xsV2hlZWwgPSBmdW5jdGlvbihlKSB7fTtcblxuLyoqXG4gKiBIYW5kbGVyIGZvciBzY3JvbGwtd2hlZWwgZXZlbnRzLlxuICpcbiAqIFRoZSBvblNjcm9sbFdoZWVsIGV2ZW50IGZpcmVzIHdoZW4gdGhlIHVzZXIgbW92ZXMgdGhlaXIgc2Nyb2xsd2hlZWwgb3ZlciB0aGlzXG4gKiBodGVybS5TY3JvbGxQb3J0LiAgQmVjYXVzZSB0aGUgZnJvbnRtb3N0IGVsZW1lbnQgaW4gdGhlIGh0ZXJtLlNjcm9sbFBvcnQgaXNcbiAqIGEgZml4ZWQgcG9zaXRpb24gRElWLCB0aGUgc2Nyb2xsIHdoZWVsIGRvZXMgbm90aGluZyBieSBkZWZhdWx0LiAgSW5zdGVhZCwgd2VcbiAqIGhhdmUgdG8gaGFuZGxlIGl0IG1hbnVhbGx5LlxuICovXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5vblNjcm9sbFdoZWVsXyA9IGZ1bmN0aW9uKGUpIHtcbiAgdGhpcy5vblNjcm9sbFdoZWVsKGUpO1xuXG4gIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcblxuICAvLyBGaWd1cmUgb3V0IGhvdyBmYXIgdGhpcyBldmVudCB3YW50cyB1cyB0byBzY3JvbGwuXG4gIGNvbnN0IGRlbHRhID0gdGhpcy5zY3JvbGxXaGVlbERlbHRhKGUpO1xuXG4gIGxldCB0b3AgPSB0aGlzLnNjcmVlbl8uc2Nyb2xsVG9wIC0gZGVsdGEueTtcbiAgaWYgKHRvcCA8IDApIHRvcCA9IDA7XG5cbiAgdmFyIHNjcm9sbE1heCA9IHRoaXMuZ2V0U2Nyb2xsTWF4XygpO1xuICBpZiAodG9wID4gc2Nyb2xsTWF4KSB0b3AgPSBzY3JvbGxNYXg7XG5cbiAgaWYgKHRvcCAhPSB0aGlzLnNjcmVlbl8uc2Nyb2xsVG9wKSB7XG4gICAgLy8gTW92aW5nIHNjcm9sbFRvcCBjYXVzZXMgYSBzY3JvbGwgZXZlbnQsIHdoaWNoIHRyaWdnZXJzIHRoZSByZWRyYXcuXG4gICAgdGhpcy5zY3JlZW5fLnNjcm9sbFRvcCA9IHRvcDtcblxuICAgIC8vIE9ubHkgcHJldmVudERlZmF1bHQgd2hlbiB3ZSd2ZSBhY3R1YWxseSBzY3JvbGxlZC4gIElmIHRoZXJlJ3Mgbm90aGluZ1xuICAgIC8vIHRvIHNjcm9sbCB3ZSB3YW50IHRvIHBhc3MgdGhlIGV2ZW50IHRocm91Z2ggc28gQ2hyb21lIGNhbiBkZXRlY3QgdGhlXG4gICAgLy8gb3ZlcnNjcm9sbC5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlIGhvdyBmYXIgYSB3aGVlbCBldmVudCBzaG91bGQgc2Nyb2xsLlxuICpcbiAqIFRoaXMgbm9ybWFsaXplcyB0aGUgYnJvd3NlcidzIGNvbmNlcHQgb2YgYSBzY3JvbGwgKHBpeGVscywgbGluZXMsIGV0Yy4uLilcbiAqIGludG8gYSBzdGFuZGFyZCBwaXhlbCBkaXN0YW5jZS5cbiAqXG4gKiBAcGFyYW0ge1doZWVsRXZlbnR9IGUgVGhlIG1vdXNlIHdoZWVsIGV2ZW50IHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB4ICYgeSBvZiBob3cgZmFyIChpbiBwaXhlbHMpIHRvIHNjcm9sbC5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuc2Nyb2xsV2hlZWxEZWx0YSA9IGZ1bmN0aW9uKGUpIHtcbiAgY29uc3QgZGVsdGEgPSB7IHg6IDAsIHk6IDAgfTtcblxuICBzd2l0Y2ggKGUuZGVsdGFNb2RlKSB7XG4gICAgY2FzZSBXaGVlbEV2ZW50LkRPTV9ERUxUQV9QSVhFTDpcbiAgICAgIGRlbHRhLnggPSBlLmRlbHRhWCAqIHRoaXMuc2Nyb2xsV2hlZWxNdWx0aXBsaWVyXztcbiAgICAgIGRlbHRhLnkgPSBlLmRlbHRhWSAqIHRoaXMuc2Nyb2xsV2hlZWxNdWx0aXBsaWVyXztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgV2hlZWxFdmVudC5ET01fREVMVEFfTElORTpcbiAgICAgIGRlbHRhLnggPSBlLmRlbHRhWCAqIHRoaXMuY2hhcmFjdGVyU2l6ZS53aWR0aDtcbiAgICAgIGRlbHRhLnkgPSBlLmRlbHRhWSAqIHRoaXMuY2hhcmFjdGVyU2l6ZS5oZWlnaHQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFdoZWVsRXZlbnQuRE9NX0RFTFRBX1BBR0U6XG4gICAgICBkZWx0YS54ID0gZS5kZWx0YVggKiB0aGlzLmNoYXJhY3RlclNpemUud2lkdGggKiB0aGlzLnNjcmVlbl8uZ2V0V2lkdGgoKTtcbiAgICAgIGRlbHRhLnkgPSBlLmRlbHRhWSAqIHRoaXMuY2hhcmFjdGVyU2l6ZS5oZWlnaHQgKiB0aGlzLnNjcmVlbl8uZ2V0SGVpZ2h0KCk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIC8vIFRoZSBZIHNpZ24gaXMgaW52ZXJ0ZWQgZnJvbSB3aGF0IHdlIHdvdWxkIGV4cGVjdDogdXAvZG93biBhcmVcbiAgLy8gbmVnYXRpdmUvcG9zaXRpdmUgcmVzcGVjdGl2ZWx5LiAgVGhlIFggc2lnbiBpcyBzYW5lIHRob3VnaDogbGVmdC9yaWdodFxuICAvLyBhcmUgbmVnYXRpdmUvcG9zaXRpdmUgcmVzcGVjdGl2ZWx5LlxuICBkZWx0YS55ICo9IC0xO1xuXG4gIHJldHVybiBkZWx0YTtcbn07XG5cbi8qKlxuICogQ2xpZW50cyBjYW4gb3ZlcnJpZGUgdGhpcyBpZiB0aGV5IHdhbnQgdG8gaGVhciB0b3VjaCBldmVudHMuXG4gKlxuICogQ2xpZW50cyBtYXkgY2FsbCBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGlmIHRoZXkgd2FudCB0byBrZWVwIHRoZSBzY3JvbGxwb3J0XG4gKiBmcm9tIGFsc28gaGFuZGxpbmcgdGhlIGV2ZW50cy5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUub25Ub3VjaCA9IGZ1bmN0aW9uKGUpIHt9O1xuXG4vKipcbiAqIEhhbmRsZXIgZm9yIHRvdWNoIGV2ZW50cy5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUub25Ub3VjaF8gPSBmdW5jdGlvbihlKSB7XG4gIHRoaXMub25Ub3VjaChlKTtcblxuICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG5cbiAgLy8gRXh0cmFjdCB0aGUgZmllbGRzIGZyb20gdGhlIFRvdWNoIGV2ZW50IHRoYXQgd2UgbmVlZC4gIElmIHdlIHNhdmVkIHRoZVxuICAvLyBldmVudCBkaXJlY3RseSwgaXQgaGFzIHJlZmVyZW5jZXMgdG8gb3RoZXIgb2JqZWN0cyAobGlrZSB4LXJvdykgdGhhdFxuICAvLyBtaWdodCBzdGljayBhcm91bmQgZm9yIGEgbG9uZyB0aW1lLiAgVGhpcyB3YXkgd2Ugb25seSBoYXZlIHNtYWxsIG9iamVjdHNcbiAgLy8gaW4gb3VyIGxhc3RUb3VjaF8gc3RhdGUuXG4gIHZhciBzY3J1YlRvdWNoID0gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogdC5pZGVudGlmaWVyLFxuICAgICAgeTogdC5jbGllbnRZLFxuICAgICAgeDogdC5jbGllbnRYLFxuICAgIH07XG4gIH07XG5cbiAgdmFyIGksIHRvdWNoO1xuICBzd2l0Y2ggKGUudHlwZSkge1xuICAgIGNhc2UgJ3RvdWNoc3RhcnQnOlxuICAgICAgLy8gU2F2ZSB0aGUgY3VycmVudCBzZXQgb2YgdG91Y2hlcy5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHRvdWNoID0gc2NydWJUb3VjaChlLmNoYW5nZWRUb3VjaGVzW2ldKTtcbiAgICAgICAgdGhpcy5sYXN0VG91Y2hfW3RvdWNoLmlkXSA9IHRvdWNoO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0b3VjaGNhbmNlbCc6XG4gICAgY2FzZSAndG91Y2hlbmQnOlxuICAgICAgLy8gVGhyb3cgYXdheSBleGlzdGluZyB0b3VjaGVzIHRoYXQgd2UncmUgZmluaXNoZWQgd2l0aC5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgKytpKVxuICAgICAgICBkZWxldGUgdGhpcy5sYXN0VG91Y2hfW2UuY2hhbmdlZFRvdWNoZXNbaV0uaWRlbnRpZmllcl07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RvdWNobW92ZSc6XG4gICAgICAvLyBXYWxrIGFsbCBvZiB0aGUgdG91Y2hlcyBpbiB0aGlzIG9uZSBldmVudCBhbmQgbWVyZ2UgYWxsIG9mIHRoZWlyXG4gICAgICAvLyBjaGFuZ2VzIGludG8gb25lIGRlbHRhLiAgVGhpcyBsZXRzIG11bHRpcGxlIGZpbmdlcnMgc2Nyb2xsIGZhc3Rlci5cbiAgICAgIHZhciBkZWx0YSA9IDA7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB0b3VjaCA9IHNjcnViVG91Y2goZS5jaGFuZ2VkVG91Y2hlc1tpXSk7XG4gICAgICAgIGRlbHRhICs9IHRoaXMubGFzdFRvdWNoX1t0b3VjaC5pZF0ueSAtIHRvdWNoLnk7XG4gICAgICAgIHRoaXMubGFzdFRvdWNoX1t0b3VjaC5pZF0gPSB0b3VjaDtcbiAgICAgIH1cblxuICAgICAgLy8gSW52ZXJ0IHRvIG1hdGNoIHRoZSB0b3VjaHNjcmVlbiBzY3JvbGxpbmcgZGlyZWN0aW9uIG9mIGJyb3dzZXIgd2luZG93cy5cbiAgICAgIGRlbHRhICo9IC0xO1xuXG4gICAgICB2YXIgdG9wID0gdGhpcy5zY3JlZW5fLnNjcm9sbFRvcCAtIGRlbHRhO1xuICAgICAgaWYgKHRvcCA8IDApIHRvcCA9IDA7XG5cbiAgICAgIHZhciBzY3JvbGxNYXggPSB0aGlzLmdldFNjcm9sbE1heF8oKTtcbiAgICAgIGlmICh0b3AgPiBzY3JvbGxNYXgpIHRvcCA9IHNjcm9sbE1heDtcblxuICAgICAgaWYgKHRvcCAhPSB0aGlzLnNjcmVlbl8uc2Nyb2xsVG9wKSB7XG4gICAgICAgIC8vIE1vdmluZyBzY3JvbGxUb3AgY2F1c2VzIGEgc2Nyb2xsIGV2ZW50LCB3aGljaCB0cmlnZ2VycyB0aGUgcmVkcmF3LlxuICAgICAgICB0aGlzLnNjcmVlbl8uc2Nyb2xsVG9wID0gdG9wO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cblxuICAvLyBUbyBkaXNhYmxlIGdlc3R1cmVzIG9yIGFueXRoaW5nIGVsc2UgaW50ZXJmZXJpbmcgd2l0aCBvdXIgc2Nyb2xsaW5nLlxuICBlLnByZXZlbnREZWZhdWx0KCk7XG59O1xuXG4vKipcbiAqIEhhbmRsZXIgZm9yIHJlc2l6ZSBldmVudHMuXG4gKlxuICogVGhlIGJyb3dzZXIgd2lsbCByZXNpemUgdXMgc3VjaCB0aGF0IHRoZSB0b3Agcm93IHN0YXlzIGF0IHRoZSB0b3AsIGJ1dCB3ZVxuICogcHJlZmVyIHRvIHRoZSBib3R0b20gcm93IHRvIHN0YXkgYXQgdGhlIGJvdHRvbS5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUub25SZXNpemVfID0gZnVuY3Rpb24oZSkge1xuICAvLyBSZS1tZWFzdXJlLCBzaW5jZSBvblJlc2l6ZSBhbHNvIGhhcHBlbnMgZm9yIGJyb3dzZXIgem9vbSBjaGFuZ2VzLlxuICB0aGlzLnN5bmNDaGFyYWN0ZXJTaXplKCk7XG59O1xuXG4vKipcbiAqIENsaWVudHMgY2FuIG92ZXJyaWRlIHRoaXMgaWYgdGhleSB3YW50IHRvIGhlYXIgY29weSBldmVudHMuXG4gKlxuICogQ2xpZW50cyBtYXkgY2FsbCBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGlmIHRoZXkgd2FudCB0byBrZWVwIHRoZSBzY3JvbGxwb3J0XG4gKiBmcm9tIGFsc28gaGFuZGxpbmcgdGhlIGV2ZW50cy5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUub25Db3B5ID0gZnVuY3Rpb24oZSkge307XG5cbi8qKlxuICogSGFuZGxlciBmb3IgY29weS10by1jbGlwYm9hcmQgZXZlbnRzLlxuICpcbiAqIElmIHNvbWUgb3IgYWxsIG9mIHRoZSBzZWxlY3RlZCByb3dzIGFyZSBvZmYgc2NyZWVuIHdlIG1heSBuZWVkIHRvIGZpbGwgaW5cbiAqIHRoZSByb3dzIGJldHdlZW4gc2VsZWN0aW9uIHN0YXJ0IGFuZCBzZWxlY3Rpb24gZW5kLiAgVGhpcyBoYW5kbGVyIGRldGVybWluZXNcbiAqIGlmIHdlJ3JlIG1pc3Npbmcgc29tZSBvZiB0aGUgc2VsZWN0ZWQgdGV4dCwgYW5kIGlmIHNvIHBvcHVsYXRlcyBvbmUgb3IgYm90aFxuICogb2YgdGhlIFwic2VsZWN0IGJhZ3NcIiB3aXRoIHRoZSBtaXNzaW5nIHRleHQuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLm9uQ29weV8gPSBmdW5jdGlvbihlKSB7XG4gIHRoaXMub25Db3B5KGUpO1xuXG4gIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcblxuICB0aGlzLnJlc2V0U2VsZWN0QmFnc18oKTtcbiAgdGhpcy5zZWxlY3Rpb24uc3luYygpO1xuXG4gIGlmIChcbiAgICB0aGlzLnNlbGVjdGlvbi5pc0NvbGxhcHNlZCB8fFxuICAgIHRoaXMuc2VsZWN0aW9uLmVuZFJvdy5yb3dJbmRleCAtIHRoaXMuc2VsZWN0aW9uLnN0YXJ0Um93LnJvd0luZGV4IDwgMlxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdG9wUm93SW5kZXggPSB0aGlzLmdldFRvcFJvd0luZGV4KCk7XG4gIHZhciBib3R0b21Sb3dJbmRleCA9IHRoaXMuZ2V0Qm90dG9tUm93SW5kZXgodG9wUm93SW5kZXgpO1xuXG4gIGlmICh0aGlzLnNlbGVjdGlvbi5zdGFydFJvdy5yb3dJbmRleCA8IHRvcFJvd0luZGV4KSB7XG4gICAgLy8gU3RhcnQgb2Ygc2VsZWN0aW9uIGlzIGFib3ZlIHRoZSB0b3AgZm9sZC5cbiAgICB2YXIgZW5kQmFja2ZpbGxJbmRleDtcblxuICAgIGlmICh0aGlzLnNlbGVjdGlvbi5lbmRSb3cucm93SW5kZXggPCB0b3BSb3dJbmRleCkge1xuICAgICAgLy8gRW50aXJlIHNlbGVjdGlvbiBpcyBhYm92ZSB0aGUgdG9wIGZvbGQuXG4gICAgICBlbmRCYWNrZmlsbEluZGV4ID0gdGhpcy5zZWxlY3Rpb24uZW5kUm93LnJvd0luZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZWxlY3Rpb24gZXh0ZW5kcyBiZWxvdyB0aGUgdG9wIGZvbGQuXG4gICAgICBlbmRCYWNrZmlsbEluZGV4ID0gdGhpcy50b3BGb2xkXy5uZXh0U2libGluZy5yb3dJbmRleDtcbiAgICB9XG5cbiAgICB0aGlzLnRvcFNlbGVjdEJhZ18udGV4dENvbnRlbnQgPSB0aGlzLnJvd1Byb3ZpZGVyXy5nZXRSb3dzVGV4dChcbiAgICAgIHRoaXMuc2VsZWN0aW9uLnN0YXJ0Um93LnJvd0luZGV4ICsgMSxcbiAgICAgIGVuZEJhY2tmaWxsSW5kZXgsXG4gICAgKTtcbiAgICB0aGlzLnJvd05vZGVzXy5pbnNlcnRCZWZvcmUoXG4gICAgICB0aGlzLnRvcFNlbGVjdEJhZ18sXG4gICAgICB0aGlzLnNlbGVjdGlvbi5zdGFydFJvdy5uZXh0U2libGluZyxcbiAgICApO1xuICAgIHRoaXMuc3luY1Jvd05vZGVzRGltZW5zaW9uc18oKTtcbiAgfVxuXG4gIGlmICh0aGlzLnNlbGVjdGlvbi5lbmRSb3cucm93SW5kZXggPiBib3R0b21Sb3dJbmRleCkge1xuICAgIC8vIFNlbGVjdGlvbiBlbmRzIGJlbG93IHRoZSBib3R0b20gZm9sZC5cbiAgICB2YXIgc3RhcnRCYWNrZmlsbEluZGV4O1xuXG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uLnN0YXJ0Um93LnJvd0luZGV4ID4gYm90dG9tUm93SW5kZXgpIHtcbiAgICAgIC8vIEVudGlyZSBzZWxlY3Rpb24gaXMgYmVsb3cgdGhlIGJvdHRvbSBmb2xkLlxuICAgICAgc3RhcnRCYWNrZmlsbEluZGV4ID0gdGhpcy5zZWxlY3Rpb24uc3RhcnRSb3cucm93SW5kZXggKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZWxlY3Rpb24gc3RhcnRzIGFib3ZlIHRoZSBib3R0b20gZm9sZC5cbiAgICAgIHN0YXJ0QmFja2ZpbGxJbmRleCA9IHRoaXMuYm90dG9tRm9sZF8ucHJldmlvdXNTaWJsaW5nLnJvd0luZGV4ICsgMTtcbiAgICB9XG5cbiAgICB0aGlzLmJvdHRvbVNlbGVjdEJhZ18udGV4dENvbnRlbnQgPSB0aGlzLnJvd1Byb3ZpZGVyXy5nZXRSb3dzVGV4dChcbiAgICAgIHN0YXJ0QmFja2ZpbGxJbmRleCxcbiAgICAgIHRoaXMuc2VsZWN0aW9uLmVuZFJvdy5yb3dJbmRleCxcbiAgICApO1xuICAgIHRoaXMucm93Tm9kZXNfLmluc2VydEJlZm9yZSh0aGlzLmJvdHRvbVNlbGVjdEJhZ18sIHRoaXMuc2VsZWN0aW9uLmVuZFJvdyk7XG4gIH1cbn07XG5cbi8qKlxuICogRm9jdXNlcyBvbiB0aGUgcGFzdGUgdGFyZ2V0IG9uIGEgY3RybC12IGtleWRvd24gZXZlbnQsIGFzIGluXG4gKiBGRiBhIGNvbnRlbnQgZWRpdGFibGUgZWxlbWVudCBtdXN0IGJlIGZvY3VzZWQgYmVmb3JlIHRoZSBwYXN0ZSBldmVudC5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUub25Cb2R5S2V5RG93bl8gPSBmdW5jdGlvbihlKSB7XG4gIGlmICghdGhpcy5jdHJsVlBhc3RlKSByZXR1cm47XG5cbiAgaWYgKChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSAmJiBlLmtleUNvZGUgPT0gMTE4IC8qICd2JyAqLylcbiAgICB0aGlzLnBhc3RlVGFyZ2V0Xy5mb2N1cygpO1xufTtcblxuLyoqXG4gKiBIYW5kbGUgYSBwYXN0ZSBldmVudCBvbiB0aGUgdGhlIFNjcm9sbFBvcnQncyBzY3JlZW4gZWxlbWVudC5cbiAqXG4gKiBUT0RPOiBIYW5kbGUgQ2xpcGJvYXJkRGF0YS5maWxlcyB0cmFuc2ZlcnMuICBodHRwczovL2NyYnVnLmNvbS80MzM1ODEuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLm9uUGFzdGVfID0gZnVuY3Rpb24oZSkge1xuICB0aGlzLnBhc3RlVGFyZ2V0Xy5mb2N1cygpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBzZWxmLnB1Ymxpc2goJ3Bhc3RlJywgeyB0ZXh0OiBzZWxmLnBhc3RlVGFyZ2V0Xy52YWx1ZSB9KTtcbiAgICBzZWxmLnBhc3RlVGFyZ2V0Xy52YWx1ZSA9ICcnO1xuICAgIHNlbGYuZm9jdXMoKTtcbiAgfSwgMCk7XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYSB0ZXh0SW5wdXQgZXZlbnQgb24gdGhlIHBhc3RlIHRhcmdldC4gU3RvcHMgdGhpcyBmcm9tXG4gKiBwcm9wYWdhdGluZyBhcyB3ZSB3YW50IHRoaXMgdG8gYmUgaGFuZGxlZCBpbiB0aGUgb25QYXN0ZV8gbWV0aG9kLlxuICovXG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5oYW5kbGVQYXN0ZVRhcmdldFRleHRJbnB1dF8gPSBmdW5jdGlvbihlKSB7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG59O1xuXG4vKipcbiAqIEhhbmRsZSBhIGRyb3AgZXZlbnQgb24gdGhlIHRoZSBTY3JvbGxQb3J0J3Mgc2NyZWVuIGVsZW1lbnQuXG4gKlxuICogQnkgZGVmYXVsdCB3ZSB0cnkgdG8gY29weSBpbiB0aGUgc3RydWN0dXJlZCBmb3JtYXQgKEhUTUwvd2hhdGV2ZXIpLlxuICogVGhlIHNoaWZ0IGtleSBjYW4gc2VsZWN0IHBsYWluIHRleHQgdGhvdWdoLlxuICpcbiAqIFRPRE86IEhhbmRsZSBEYXRhVHJhbnNmZXIuZmlsZXMgdHJhbnNmZXJzLiAgaHR0cHM6Ly9jcmJ1Zy5jb20vNDMzNTgxLlxuICpcbiAqIEBwYXJhbSB7RHJhZ0V2ZW50fSBlIFRoZSBkcmFnIGV2ZW50IHRoYXQgZmlyZWQgdXMuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLm9uRHJhZ0FuZERyb3BfID0gZnVuY3Rpb24oZSkge1xuICBpZiAoIXRoaXMucGFzdGVPbkRyb3ApIHJldHVybjtcblxuICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgbGV0IGRhdGE7XG4gIGxldCBmb3JtYXQ7XG5cbiAgLy8gSWYgdGhlIHNoaWZ0IGtleSBhY3RpdmUsIHRyeSB0byBmaW5kIGEgXCJyaWNoXCIgdGV4dCBzb3VyY2UgKGJ1dCBub3QgcGxhaW5cbiAgLy8gdGV4dCkuICBlLmcuIHRleHQvaHRtbCBpcyBPSy5cbiAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICBlLmRhdGFUcmFuc2Zlci50eXBlcy5mb3JFYWNoKHQgPT4ge1xuICAgICAgaWYgKCFmb3JtYXQgJiYgdCAhPSAndGV4dC9wbGFpbicgJiYgdC5zdGFydHNXaXRoKCd0ZXh0LycpKSBmb3JtYXQgPSB0O1xuICAgIH0pO1xuXG4gICAgLy8gSWYgd2UgZm91bmQgYSBub24tcGxhaW4gdGV4dCBzb3VyY2UsIHRyeSBpdCBvdXQgZmlyc3QuXG4gICAgaWYgKGZvcm1hdCkgZGF0YSA9IGUuZGF0YVRyYW5zZmVyLmdldERhdGEoZm9ybWF0KTtcbiAgfVxuXG4gIC8vIElmIHdlIGhhdmVuJ3QgbG9hZGVkIGFueXRoaW5nIHVzZWZ1bCwgZmFsbCBiYWNrIHRvIHBsYWluIHRleHQuXG4gIGlmICghZGF0YSkgZGF0YSA9IGUuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQvcGxhaW4nKTtcblxuICBpZiAoZGF0YSkgdGhpcy5wdWJsaXNoKCdwYXN0ZScsIHsgdGV4dDogZGF0YSB9KTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSB2ZXJ0aWNhbCBzY3JvbGxiYXIgbW9kZSBvZiB0aGUgU2Nyb2xsUG9ydC5cbiAqL1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuc2V0U2Nyb2xsYmFyVmlzaWJsZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHRoaXMuc2NyZWVuXy5zdHlsZS5vdmVyZmxvd1kgPSBzdGF0ZSA/ICdzY3JvbGwnIDogJ2hpZGRlbic7XG59O1xuXG4vKipcbiAqIFNldCBzY3JvbGwgd2hlZWwgbXVsdGlwbGllci4gVGhpcyBhbHRlcnMgaG93IG11Y2ggdGhlIHNjcmVlbiBzY3JvbGxzIG9uXG4gKiBtb3VzZSB3aGVlbCBldmVudHMuXG4gKi9cbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNldFNjcm9sbFdoZWVsTW92ZU11bHRpcGxlciA9IGZ1bmN0aW9uKG11bHRpcGxpZXIpIHtcbiAgdGhpcy5zY3JvbGxXaGVlbE11bHRpcGxpZXJfID0gbXVsdGlwbGllcjtcbn07XG4vLyBTT1VSQ0UgRklMRTogaHRlcm0vanMvaHRlcm1fdGVybWluYWwuanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxpYi5ydGRlcChcbiAgJ2xpYi5jb2xvcnMnLFxuICAnbGliLlByZWZlcmVuY2VNYW5hZ2VyJyxcbiAgJ2xpYi5yZXNvdXJjZScsXG4gICdsaWIud2MnLFxuICAnbGliLmYnLFxuICAnaHRlcm0uQWNjZXNzaWJpbGl0eVJlYWRlcicsXG4gICdodGVybS5LZXlib2FyZCcsXG4gICdodGVybS5PcHRpb25zJyxcbiAgJ2h0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyJyxcbiAgJ2h0ZXJtLlNjcmVlbicsXG4gICdodGVybS5TY3JvbGxQb3J0JyxcbiAgJ2h0ZXJtLlNpemUnLFxuICAnaHRlcm0uVGV4dEF0dHJpYnV0ZXMnLFxuICAnaHRlcm0uVlQnLFxuKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmb3IgdGhlIFRlcm1pbmFsIGNsYXNzLlxuICpcbiAqIEEgVGVybWluYWwgcHVsbHMgdG9nZXRoZXIgdGhlIGh0ZXJtLlNjcm9sbFBvcnQsIGh0ZXJtLlNjcmVlbiBhbmQgaHRlcm0uVlQxMDBcbiAqIGNsYXNzZXMgdG8gcHJvdmlkZSB0aGUgY29tcGxldGUgdGVybWluYWwgZnVuY3Rpb25hbGl0eS5cbiAqXG4gKiBUaGVyZSBhcmUgYSBudW1iZXIgb2YgbG93ZXItbGV2ZWwgVGVybWluYWwgbWV0aG9kcyB0aGF0IGNhbiBiZSBjYWxsZWRcbiAqIGRpcmVjdGx5IHRvIG1hbmlwdWxhdGUgdGhlIGN1cnNvciwgdGV4dCwgc2Nyb2xsIHJlZ2lvbiwgYW5kIG90aGVyIHRlcm1pbmFsXG4gKiBhdHRyaWJ1dGVzLiAgSG93ZXZlciwgdGhlIHByaW1hcnkgbWV0aG9kIGlzIGludGVycHJldCgpLCB3aGljaCBwYXJzZXMgVlRcbiAqIGVzY2FwZSBzZXF1ZW5jZXMgYW5kIGludm9rZXMgdGhlIGFwcHJvcHJpYXRlIFRlcm1pbmFsIG1ldGhvZHMuXG4gKlxuICogVGhpcyBjbGFzcyB3YXMgaGVhdmlseSBpbmZsdWVuY2VkIGJ5IENvcnkgTWFjY2Fycm9uZSdzIEZyYW1lYnVmZmVyIGNsYXNzLlxuICpcbiAqIFRPRE8ocmdpbmRhKTogRXZlbnR1YWxseSB3ZSdyZSBnb2luZyB0byBuZWVkIHRvIHN1cHBvcnQgY2hhcmFjdGVycyB3aGljaCBhcmVcbiAqIGRpc3BsYXllZCB0d2ljZSBhcyB3aWRlIGFzIHN0YW5kYXJkIGxhdGluIGNoYXJhY3RlcnMuICBUaGlzIGlzIHRvIHN1cHBvcnRcbiAqIENKSyAoYW5kIHBvc3NpYmx5IG90aGVyIGNoYXJhY3RlciBzZXRzKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0X3Byb2ZpbGVJZCBPcHRpb25hbCBwcmVmZXJlbmNlIHByb2ZpbGUgbmFtZS4gIElmIG5vdFxuICogICAgIHByb3ZpZGVkLCBkZWZhdWx0cyB0byAnZGVmYXVsdCcuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsID0gZnVuY3Rpb24ob3B0X3Byb2ZpbGVJZCkge1xuICB0aGlzLnByb2ZpbGVJZF8gPSBudWxsO1xuXG4gIC8vIFR3byBzY3JlZW4gaW5zdGFuY2VzLlxuICB0aGlzLnByaW1hcnlTY3JlZW5fID0gbmV3IGh0ZXJtLlNjcmVlbigpO1xuICB0aGlzLmFsdGVybmF0ZVNjcmVlbl8gPSBuZXcgaHRlcm0uU2NyZWVuKCk7XG5cbiAgLy8gVGhlIFwiY3VycmVudFwiIHNjcmVlbi5cbiAgdGhpcy5zY3JlZW5fID0gdGhpcy5wcmltYXJ5U2NyZWVuXztcblxuICAvLyBUaGUgbG9jYWwgbm90aW9uIG9mIHRoZSBzY3JlZW4gc2l6ZS4gIFNjcmVlbkJ1ZmZlcnMgYWxzbyBoYXZlIGEgc2l6ZSB3aGljaFxuICAvLyBpbmRpY2F0ZXMgdGhlaXIgcHJlc2VudCBzaXplLiAgRHVyaW5nIHNpemUgY2hhbmdlcywgdGhlIHR3byBtYXkgZGlzYWdyZWUuXG4gIC8vIEFsc28sIHRoZSBpbmFjdGl2ZSBzY3JlZW4ncyBzaXplIGlzIG5vdCBhbHRlcmVkIHVudGlsIGl0IGlzIG1hZGUgdGhlIGFjdGl2ZVxuICAvLyBzY3JlZW4uXG4gIHRoaXMuc2NyZWVuU2l6ZSA9IG5ldyBodGVybS5TaXplKDAsIDApO1xuXG4gIC8vIFRoZSBzY3JvbGwgcG9ydCB3ZSdsbCBiZSB1c2luZyB0byBkaXNwbGF5IHRoZSB2aXNpYmxlIHJvd3MuXG4gIHRoaXMuc2Nyb2xsUG9ydF8gPSBuZXcgaHRlcm0uU2Nyb2xsUG9ydCh0aGlzKTtcbiAgdGhpcy5zY3JvbGxQb3J0Xy5zdWJzY3JpYmUoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemVfLmJpbmQodGhpcykpO1xuICB0aGlzLnNjcm9sbFBvcnRfLnN1YnNjcmliZSgnc2Nyb2xsJywgdGhpcy5vblNjcm9sbF8uYmluZCh0aGlzKSk7XG4gIHRoaXMuc2Nyb2xsUG9ydF8uc3Vic2NyaWJlKCdwYXN0ZScsIHRoaXMub25QYXN0ZV8uYmluZCh0aGlzKSk7XG4gIHRoaXMuc2Nyb2xsUG9ydF8uc3Vic2NyaWJlKCdmb2N1cycsIHRoaXMub25TY3JvbGxwb3J0Rm9jdXNfLmJpbmQodGhpcykpO1xuICB0aGlzLnNjcm9sbFBvcnRfLm9uQ29weSA9IHRoaXMub25Db3B5Xy5iaW5kKHRoaXMpO1xuXG4gIC8vIFRoZSBkaXYgdGhhdCBjb250YWlucyB0aGlzIHRlcm1pbmFsLlxuICB0aGlzLmRpdl8gPSBudWxsO1xuXG4gIC8vIFRoZSBkb2N1bWVudCB0aGF0IGNvbnRhaW5zIHRoZSBzY3JvbGxQb3J0LiAgRGVmYXVsdGVkIHRvIHRoZSBnbG9iYWxcbiAgLy8gZG9jdW1lbnQgaGVyZSBzbyB0aGF0IHRoZSB0ZXJtaW5hbCBpcyBmdW5jdGlvbmFsIGV2ZW4gaWYgaXQgaGFzbid0IGJlZW5cbiAgLy8gaW5zZXJ0ZWQgaW50byBhIGRvY3VtZW50IHlldCwgYnV0IHJlLXNldCBpbiBkZWNvcmF0ZSgpLlxuICB0aGlzLmRvY3VtZW50XyA9IHdpbmRvdy5kb2N1bWVudDtcblxuICAvLyBUaGUgcm93cyB0aGF0IGhhdmUgc2Nyb2xsZWQgb2ZmIHNjcmVlbiBhbmQgYXJlIG5vIGxvbmdlciBhZGRyZXNzYWJsZS5cbiAgdGhpcy5zY3JvbGxiYWNrUm93c18gPSBbXTtcblxuICAvLyBTYXZlZCB0YWIgc3RvcHMuXG4gIHRoaXMudGFiU3RvcHNfID0gW107XG5cbiAgLy8gS2VlcCB0cmFjayBvZiB3aGV0aGVyIGRlZmF1bHQgdGFiIHN0b3BzIGhhdmUgYmVlbiBlcmFzZWQ7IGFmdGVyIGEgVEJDXG4gIC8vIGNsZWFycyBhbGwgdGFiIHN0b3BzLCBkZWZhdWx0cyBhcmVuJ3QgcmVzdG9yZWQgb24gcmVzaXplIHVudGlsIGEgcmVzZXQuXG4gIHRoaXMuZGVmYXVsdFRhYlN0b3BzID0gdHJ1ZTtcblxuICAvLyBUaGUgVlQncyBub3Rpb24gb2YgdGhlIHRvcCBhbmQgYm90dG9tIHJvd3MuICBVc2VkIGR1cmluZyBzb21lIFZUXG4gIC8vIGN1cnNvciBwb3NpdGlvbmluZyBhbmQgc2Nyb2xsaW5nIGNvbW1hbmRzLlxuICB0aGlzLnZ0U2Nyb2xsVG9wXyA9IG51bGw7XG4gIHRoaXMudnRTY3JvbGxCb3R0b21fID0gbnVsbDtcblxuICAvLyBUaGUgRElWIGVsZW1lbnQgZm9yIHRoZSB2aXNpYmxlIGN1cnNvci5cbiAgdGhpcy5jdXJzb3JOb2RlXyA9IG51bGw7XG5cbiAgLy8gVGhlIGN1cnJlbnQgY3Vyc29yIHNoYXBlIG9mIHRoZSB0ZXJtaW5hbC5cbiAgdGhpcy5jdXJzb3JTaGFwZV8gPSBodGVybS5UZXJtaW5hbC5jdXJzb3JTaGFwZS5CTE9DSztcblxuICAvLyBDdXJzb3IgYmxpbmsgb24vb2ZmIGN5Y2xlIGluIG1zLCBvdmVyd3JpdHRlbiBieSBwcmVmcyBvbmNlIHRoZXkncmUgbG9hZGVkLlxuICB0aGlzLmN1cnNvckJsaW5rQ3ljbGVfID0gWzEwMCwgMTAwXTtcblxuICAvLyBQcmUtYm91bmQgb25DdXJzb3JCbGlua18gaGFuZGxlciwgc28gd2UgZG9uJ3QgaGF2ZSB0byBkbyB0aGlzIGZvciBlYWNoXG4gIC8vIGN1cnNvciBvbi9vZmYgc2VydmljaW5nLlxuICB0aGlzLm15T25DdXJzb3JCbGlua18gPSB0aGlzLm9uQ3Vyc29yQmxpbmtfLmJpbmQodGhpcyk7XG5cbiAgLy8gVGhlc2UgcHJlZnMgYXJlIGNhY2hlZCBzbyB3ZSBkb24ndCBoYXZlIHRvIHJlYWQgZnJvbSBsb2NhbCBzdG9yYWdlIHdpdGhcbiAgLy8gZWFjaCBvdXRwdXQgYW5kIGtleXN0cm9rZS4gIFRoZXkgYXJlIGluaXRpYWxpemVkIGJ5IHRoZSBwcmVmZXJlbmNlIG1hbmFnZXIuXG4gIHRoaXMuYmFja2dyb3VuZENvbG9yXyA9IG51bGw7XG4gIHRoaXMuZm9yZWdyb3VuZENvbG9yXyA9IG51bGw7XG4gIHRoaXMuc2Nyb2xsT25PdXRwdXRfID0gbnVsbDtcbiAgdGhpcy5zY3JvbGxPbktleXN0cm9rZV8gPSBudWxsO1xuICB0aGlzLnNjcm9sbFdoZWVsQXJyb3dLZXlzXyA9IG51bGw7XG5cbiAgLy8gVHJ1ZSBpZiB3ZSBzaG91bGQgb3ZlcnJpZGUgbW91c2UgZXZlbnQgcmVwb3J0aW5nIHRvIGFsbG93IGxvY2FsIHNlbGVjdGlvbi5cbiAgdGhpcy5kZWZlYXRNb3VzZVJlcG9ydHNfID0gZmFsc2U7XG5cbiAgLy8gV2hldGhlciB0byBhdXRvIGhpZGUgdGhlIG1vdXNlIGN1cnNvciB3aGVuIHR5cGluZy5cbiAgdGhpcy5zZXRBdXRvbWF0aWNNb3VzZUhpZGluZygpO1xuICAvLyBUaW1lciB0byBrZWVwIG1vdXNlIHZpc2libGUgd2hpbGUgaXQncyBiZWluZyB1c2VkLlxuICB0aGlzLm1vdXNlSGlkZURlbGF5XyA9IG51bGw7XG5cbiAgLy8gVGVybWluYWwgYmVsbCBzb3VuZC5cbiAgdGhpcy5iZWxsQXVkaW9fID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgdGhpcy5iZWxsQXVkaW9fLmlkID0gJ2h0ZXJtOmJlbGwtYXVkaW8nO1xuICB0aGlzLmJlbGxBdWRpb18uc2V0QXR0cmlidXRlKCdwcmVsb2FkJywgJ2F1dG8nKTtcblxuICAvLyBUaGUgQWNjZXNzaWJpbGl0eVJlYWRlciBvYmplY3QgZm9yIGFubm91bmNpbmcgY29tbWFuZCBvdXRwdXQuXG4gIHRoaXMuYWNjZXNzaWJpbGl0eVJlYWRlcl8gPSBudWxsO1xuXG4gIC8vIFRoZSBjb250ZXh0IG1lbnUgb2JqZWN0LlxuICB0aGlzLmNvbnRleHRNZW51ID0gbmV3IGh0ZXJtLkNvbnRleHRNZW51KCk7XG5cbiAgLy8gQWxsIHRlcm1pbmFsIGJlbGwgbm90aWZpY2F0aW9ucyB0aGF0IGhhdmUgYmVlbiBnZW5lcmF0ZWQgKG5vdCBuZWNlc3NhcmlseVxuICAvLyBzaG93bikuXG4gIHRoaXMuYmVsbE5vdGlmaWNhdGlvbkxpc3RfID0gW107XG5cbiAgLy8gV2hldGhlciB3ZSBoYXZlIHBlcm1pc3Npb24gdG8gZGlzcGxheSBub3RpZmljYXRpb25zLlxuICB0aGlzLmRlc2t0b3BOb3RpZmljYXRpb25CZWxsXyA9IGZhbHNlO1xuXG4gIC8vIEN1cnNvciBwb3NpdGlvbiBhbmQgYXR0cmlidXRlcyBzYXZlZCB3aXRoIERFQ1NDLlxuICB0aGlzLnNhdmVkT3B0aW9uc18gPSB7fTtcblxuICAvLyBUaGUgY3VycmVudCBtb2RlIGJpdHMgZm9yIHRoZSB0ZXJtaW5hbC5cbiAgdGhpcy5vcHRpb25zXyA9IG5ldyBodGVybS5PcHRpb25zKCk7XG5cbiAgLy8gVGltZW91dHMgd2UgbWlnaHQgbmVlZCB0byBjbGVhci5cbiAgdGhpcy50aW1lb3V0c18gPSB7fTtcblxuICAvLyBUaGUgVlQgZXNjYXBlIHNlcXVlbmNlIGludGVycHJldGVyLlxuICB0aGlzLnZ0ID0gbmV3IGh0ZXJtLlZUKHRoaXMpO1xuXG4gIHRoaXMuc2F2ZUN1cnNvckFuZFN0YXRlKHRydWUpO1xuXG4gIC8vIFRoZSBrZXlib2FyZCBoYW5kbGVyLlxuICB0aGlzLmtleWJvYXJkID0gbmV3IGh0ZXJtLktleWJvYXJkKHRoaXMpO1xuXG4gIC8vIEdlbmVyYWwgSU8gaW50ZXJmYWNlIHRoYXQgY2FuIGJlIGdpdmVuIHRvIHRoaXJkIHBhcnRpZXMgd2l0aG91dCBleHBvc2luZ1xuICAvLyB0aGUgZW50aXJlIHRlcm1pbmFsIG9iamVjdC5cbiAgdGhpcy5pbyA9IG5ldyBodGVybS5UZXJtaW5hbC5JTyh0aGlzKTtcblxuICAvLyBUcnVlIGlmIG1vdXNlLWNsaWNrLWRyYWcgc2hvdWxkIHNjcm9sbCB0aGUgdGVybWluYWwuXG4gIHRoaXMuZW5hYmxlTW91c2VEcmFnU2Nyb2xsID0gdHJ1ZTtcblxuICB0aGlzLmNvcHlPblNlbGVjdCA9IG51bGw7XG4gIHRoaXMubW91c2VSaWdodENsaWNrUGFzdGUgPSBudWxsO1xuICB0aGlzLm1vdXNlUGFzdGVCdXR0b24gPSBudWxsO1xuXG4gIC8vIFdoZXRoZXIgdG8gdXNlIHRoZSBkZWZhdWx0IHdpbmRvdyBjb3B5IGJlaGF2aW9yLlxuICB0aGlzLnVzZURlZmF1bHRXaW5kb3dDb3B5ID0gZmFsc2U7XG5cbiAgdGhpcy5jbGVhclNlbGVjdGlvbkFmdGVyQ29weSA9IHRydWU7XG5cbiAgdGhpcy5yZWFsaXplU2l6ZV8oODAsIDI0KTtcbiAgdGhpcy5zZXREZWZhdWx0VGFiU3RvcHMoKTtcblxuICAvLyBXaGV0aGVyIHdlIGFsbG93IGltYWdlcyB0byBiZSBzaG93bi5cbiAgdGhpcy5hbGxvd0ltYWdlc0lubGluZSA9IG51bGw7XG5cbiAgdGhpcy5yZXBvcnRGb2N1cyA9IGZhbHNlO1xuXG4gIHRoaXMuc2V0UHJvZmlsZShcbiAgICBvcHRfcHJvZmlsZUlkIHx8ICdkZWZhdWx0JyxcbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMub25UZXJtaW5hbFJlYWR5KCk7XG4gICAgfS5iaW5kKHRoaXMpLFxuICApO1xufTtcblxuLyoqXG4gKiBQb3NzaWJsZSBjdXJzb3Igc2hhcGVzLlxuICovXG5odGVybS5UZXJtaW5hbC5jdXJzb3JTaGFwZSA9IHtcbiAgQkxPQ0s6ICdCTE9DSycsXG4gIEJFQU06ICdCRUFNJyxcbiAgVU5ERVJMSU5FOiAnVU5ERVJMSU5FJyxcbn07XG5cbi8qKlxuICogQ2xpZW50cyBzaG91bGQgb3ZlcnJpZGUgdGhpcyB0byBiZSBub3RpZmllZCB3aGVuIHRoZSB0ZXJtaW5hbCBpcyByZWFkeVxuICogZm9yIHVzZS5cbiAqXG4gKiBUaGUgdGVybWluYWwgaW5pdGlhbGl6YXRpb24gaXMgYXN5bmNocm9ub3VzLCBhbmQgc2hvdWxkbid0IGJlIHVzZWQgYmVmb3JlXG4gKiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5vblRlcm1pbmFsUmVhZHkgPSBmdW5jdGlvbigpIHt9O1xuXG4vKipcbiAqIERlZmF1bHQgdGFiIHdpdGggb2YgOCB0byBtYXRjaCB4dGVybS5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnRhYldpZHRoID0gODtcblxuLyoqXG4gKiBTZWxlY3QgYSBwcmVmZXJlbmNlIHByb2ZpbGUuXG4gKlxuICogVGhpcyB3aWxsIGxvYWQgdGhlIHRlcm1pbmFsIHByZWZlcmVuY2VzIGZvciB0aGUgZ2l2ZW4gcHJvZmlsZSBuYW1lIGFuZFxuICogYXNzb2NpYXRlIHN1YnNlcXVlbnQgcHJlZmVyZW5jZSBjaGFuZ2VzIHdpdGggdGhlIG5ldyBwcmVmZXJlbmNlIHByb2ZpbGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb2ZpbGVJZCBUaGUgbmFtZSBvZiB0aGUgcHJlZmVyZW5jZSBwcm9maWxlLiAgRm9yd2FyZCBzbGFzaFxuICogICAgIGNoYXJhY3RlcnMgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIG5hbWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRfY2FsbGJhY2sgT3B0aW9uYWwgY2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gdGhlIHByb2ZpbGVcbiAqICAgICB0cmFuc2l0aW9uIGlzIGNvbXBsZXRlLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2V0UHJvZmlsZSA9IGZ1bmN0aW9uKHByb2ZpbGVJZCwgb3B0X2NhbGxiYWNrKSB7XG4gIHRoaXMucHJvZmlsZUlkXyA9IHByb2ZpbGVJZC5yZXBsYWNlKC9cXC8vZywgJycpO1xuXG4gIHZhciB0ZXJtaW5hbCA9IHRoaXM7XG5cbiAgaWYgKHRoaXMucHJlZnNfKSB0aGlzLnByZWZzXy5kZWFjdGl2YXRlKCk7XG5cbiAgdGhpcy5wcmVmc18gPSBuZXcgaHRlcm0uUHJlZmVyZW5jZU1hbmFnZXIodGhpcy5wcm9maWxlSWRfKTtcbiAgdGhpcy5wcmVmc18uYWRkT2JzZXJ2ZXJzKG51bGwsIHtcbiAgICAnYWx0LWdyLW1vZGUnOiBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAodiA9PSBudWxsKSB7XG4gICAgICAgIGlmIChuYXZpZ2F0b3IubGFuZ3VhZ2UudG9Mb3dlckNhc2UoKSA9PSAnZW4tdXMnKSB7XG4gICAgICAgICAgdiA9ICdub25lJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2ID0gJ3JpZ2h0LWFsdCc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdiA9IHYudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHYgPSAnbm9uZSc7XG4gICAgICB9XG5cbiAgICAgIGlmICghL14obm9uZXxjdHJsLWFsdHxsZWZ0LWFsdHxyaWdodC1hbHQpJC8udGVzdCh2KSkgdiA9ICdub25lJztcblxuICAgICAgdGVybWluYWwua2V5Ym9hcmQuYWx0R3JNb2RlID0gdjtcbiAgICB9LFxuXG4gICAgJ2FsdC1iYWNrc3BhY2UtaXMtbWV0YS1iYWNrc3BhY2UnOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5rZXlib2FyZC5hbHRCYWNrc3BhY2VJc01ldGFCYWNrc3BhY2UgPSB2O1xuICAgIH0sXG5cbiAgICAnYWx0LWlzLW1ldGEnOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5rZXlib2FyZC5hbHRJc01ldGEgPSB2O1xuICAgIH0sXG5cbiAgICAnYWx0LXNlbmRzLXdoYXQnOiBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIS9eKGVzY2FwZXw4LWJpdHxicm93c2VyLWtleSkkLy50ZXN0KHYpKSB2ID0gJ2VzY2FwZSc7XG5cbiAgICAgIHRlcm1pbmFsLmtleWJvYXJkLmFsdFNlbmRzV2hhdCA9IHY7XG4gICAgfSxcblxuICAgICdhdWRpYmxlLWJlbGwtc291bmQnOiBmdW5jdGlvbih2KSB7XG4gICAgICB2YXIgYXJ5ID0gdi5tYXRjaCgvXmxpYi1yZXNvdXJjZTooXFxTKykvKTtcbiAgICAgIGlmIChhcnkpIHtcbiAgICAgICAgdGVybWluYWwuYmVsbEF1ZGlvXy5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgJ3NyYycsXG4gICAgICAgICAgbGliLnJlc291cmNlLmdldERhdGFVcmwoYXJ5WzFdKSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRlcm1pbmFsLmJlbGxBdWRpb18uc2V0QXR0cmlidXRlKCdzcmMnLCB2KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgJ2Rlc2t0b3Atbm90aWZpY2F0aW9uLWJlbGwnOiBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAodiAmJiBOb3RpZmljYXRpb24pIHtcbiAgICAgICAgdGVybWluYWwuZGVza3RvcE5vdGlmaWNhdGlvbkJlbGxfID1cbiAgICAgICAgICBOb3RpZmljYXRpb24ucGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnO1xuICAgICAgICBpZiAoIXRlcm1pbmFsLmRlc2t0b3BOb3RpZmljYXRpb25CZWxsXykge1xuICAgICAgICAgIC8vIE5vdGU6IFdlIGRvbid0IGNhbGwgTm90aWZpY2F0aW9uLnJlcXVlc3RQZXJtaXNzaW9uIGhlcmUgYmVjYXVzZVxuICAgICAgICAgIC8vIENocm9tZSByZXF1aXJlcyB0aGUgY2FsbCBiZSB0aGUgcmVzdWx0IG9mIGEgdXNlciBhY3Rpb24gKHN1Y2ggYXMgYW5cbiAgICAgICAgICAvLyBvbmNsaWNrIGhhbmRsZXIpLCBhbmQgcHJlZiBsaXN0ZW5lcnMgYXJlIHJ1biBhc3luY2hyb25vdXNseS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIEEgd2F5IG9mIHdvcmtpbmcgYXJvdW5kIHRoaXMgd291bGQgYmUgdG8gZGlzcGxheSBhIGRpYWxvZyBpbiB0aGVcbiAgICAgICAgICAvLyB0ZXJtaW5hbCB3aXRoIGEgXCJjbGljay10by1yZXF1ZXN0LXBlcm1pc3Npb25cIiBidXR0b24uXG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgJ2Rlc2t0b3Atbm90aWZpY2F0aW9uLWJlbGwgaXMgdHJ1ZSBidXQgd2UgZG8gbm90IGhhdmUgJyArXG4gICAgICAgICAgICAgICdwZXJtaXNzaW9uIHRvIGRpc3BsYXkgbm90aWZpY2F0aW9ucy4nLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRlcm1pbmFsLmRlc2t0b3BOb3RpZmljYXRpb25CZWxsXyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAnYmFja2dyb3VuZC1jb2xvcic6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHRlcm1pbmFsLnNldEJhY2tncm91bmRDb2xvcih2KTtcbiAgICB9LFxuXG4gICAgJ2JhY2tncm91bmQtaW1hZ2UnOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5zY3JvbGxQb3J0Xy5zZXRCYWNrZ3JvdW5kSW1hZ2Uodik7XG4gICAgfSxcblxuICAgICdiYWNrZ3JvdW5kLXNpemUnOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5zY3JvbGxQb3J0Xy5zZXRCYWNrZ3JvdW5kU2l6ZSh2KTtcbiAgICB9LFxuXG4gICAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5zY3JvbGxQb3J0Xy5zZXRCYWNrZ3JvdW5kUG9zaXRpb24odik7XG4gICAgfSxcblxuICAgICdiYWNrc3BhY2Utc2VuZHMtYmFja3NwYWNlJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwua2V5Ym9hcmQuYmFja3NwYWNlU2VuZHNCYWNrc3BhY2UgPSB2O1xuICAgIH0sXG5cbiAgICAnY2hhcmFjdGVyLW1hcC1vdmVycmlkZXMnOiBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoISh2ID09IG51bGwgfHwgdiBpbnN0YW5jZW9mIE9iamVjdCkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdQcmVmZXJlbmNlIGNoYXJhY3Rlci1tYXAtbW9kaWZpY2F0aW9ucyBpcyBub3QgYW4gJyArICdvYmplY3Q6ICcgKyB2LFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRlcm1pbmFsLnZ0LmNoYXJhY3Rlck1hcHMucmVzZXQoKTtcbiAgICAgIHRlcm1pbmFsLnZ0LmNoYXJhY3Rlck1hcHMuc2V0T3ZlcnJpZGVzKHYpO1xuICAgIH0sXG5cbiAgICAnY3Vyc29yLWJsaW5rJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwuc2V0Q3Vyc29yQmxpbmsoISF2KTtcbiAgICB9LFxuXG4gICAgJ2N1cnNvci1ibGluay1jeWNsZSc6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdiBpbnN0YW5jZW9mIEFycmF5ICYmXG4gICAgICAgIHR5cGVvZiB2WzBdID09ICdudW1iZXInICYmXG4gICAgICAgIHR5cGVvZiB2WzFdID09ICdudW1iZXInXG4gICAgICApIHtcbiAgICAgICAgdGVybWluYWwuY3Vyc29yQmxpbmtDeWNsZV8gPSB2O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdiA9PSAnbnVtYmVyJykge1xuICAgICAgICB0ZXJtaW5hbC5jdXJzb3JCbGlua0N5Y2xlXyA9IFt2LCB2XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZhc3QgYmxpbmsgaW5kaWNhdGVzIGFuIGVycm9yLlxuICAgICAgICB0ZXJtaW5hbC5jdXJzb3JCbGlua0N5Y2xlXyA9IFsxMDAsIDEwMF07XG4gICAgICB9XG4gICAgfSxcblxuICAgICdjdXJzb3ItY29sb3InOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5zZXRDdXJzb3JDb2xvcih2KTtcbiAgICB9LFxuXG4gICAgJ2NvbG9yLXBhbGV0dGUtb3ZlcnJpZGVzJzogZnVuY3Rpb24odikge1xuICAgICAgaWYgKCEodiA9PSBudWxsIHx8IHYgaW5zdGFuY2VvZiBPYmplY3QgfHwgdiBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ1ByZWZlcmVuY2UgY29sb3ItcGFsZXR0ZS1vdmVycmlkZXMgaXMgbm90IGFuIGFycmF5IG9yICcgK1xuICAgICAgICAgICAgJ29iamVjdDogJyArXG4gICAgICAgICAgICB2LFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxpYi5jb2xvcnMuY29sb3JQYWxldHRlID0gbGliLmNvbG9ycy5zdG9ja0NvbG9yUGFsZXR0ZS5jb25jYXQoKTtcblxuICAgICAgaWYgKHYpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHYpIHtcbiAgICAgICAgICB2YXIgaSA9IHBhcnNlSW50KGtleSk7XG4gICAgICAgICAgaWYgKGlzTmFOKGkpIHx8IGkgPCAwIHx8IGkgPiAyNTUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJbnZhbGlkIHZhbHVlIGluIHBhbGV0dGU6ICcgKyBrZXkgKyAnOiAnICsgdltrZXldKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh2W2ldKSB7XG4gICAgICAgICAgICB2YXIgcmdiID0gbGliLmNvbG9ycy5ub3JtYWxpemVDU1ModltpXSk7XG4gICAgICAgICAgICBpZiAocmdiKSBsaWIuY29sb3JzLmNvbG9yUGFsZXR0ZVtpXSA9IHJnYjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGVybWluYWwucHJpbWFyeVNjcmVlbl8udGV4dEF0dHJpYnV0ZXMucmVzZXRDb2xvclBhbGV0dGUoKTtcbiAgICAgIHRlcm1pbmFsLmFsdGVybmF0ZVNjcmVlbl8udGV4dEF0dHJpYnV0ZXMucmVzZXRDb2xvclBhbGV0dGUoKTtcbiAgICB9LFxuXG4gICAgJ2NvcHktb24tc2VsZWN0JzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwuY29weU9uU2VsZWN0ID0gISF2O1xuICAgIH0sXG5cbiAgICAndXNlLWRlZmF1bHQtd2luZG93LWNvcHknOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC51c2VEZWZhdWx0V2luZG93Q29weSA9ICEhdjtcbiAgICB9LFxuXG4gICAgJ2NsZWFyLXNlbGVjdGlvbi1hZnRlci1jb3B5JzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwuY2xlYXJTZWxlY3Rpb25BZnRlckNvcHkgPSAhIXY7XG4gICAgfSxcblxuICAgICdjdHJsLXBsdXMtbWludXMtemVyby16b29tJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwua2V5Ym9hcmQuY3RybFBsdXNNaW51c1plcm9ab29tID0gdjtcbiAgICB9LFxuXG4gICAgJ2N0cmwtYy1jb3B5JzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwua2V5Ym9hcmQuY3RybENDb3B5ID0gdjtcbiAgICB9LFxuXG4gICAgJ2N0cmwtdi1wYXN0ZSc6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHRlcm1pbmFsLmtleWJvYXJkLmN0cmxWUGFzdGUgPSB2O1xuICAgICAgdGVybWluYWwuc2Nyb2xsUG9ydF8uc2V0Q3RybFZQYXN0ZSh2KTtcbiAgICB9LFxuXG4gICAgJ3Bhc3RlLW9uLWRyb3AnOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5zY3JvbGxQb3J0Xy5zZXRQYXN0ZU9uRHJvcCh2KTtcbiAgICB9LFxuXG4gICAgJ2Vhc3QtYXNpYW4tYW1iaWd1b3VzLWFzLXR3by1jb2x1bW4nOiBmdW5jdGlvbih2KSB7XG4gICAgICBsaWIud2MucmVnYXJkQ2prQW1iaWd1b3VzID0gdjtcbiAgICB9LFxuXG4gICAgJ2VuYWJsZS04LWJpdC1jb250cm9sJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwudnQuZW5hYmxlOEJpdENvbnRyb2wgPSAhIXY7XG4gICAgfSxcblxuICAgICdlbmFibGUtYm9sZCc6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHRlcm1pbmFsLnN5bmNCb2xkU2FmZVN0YXRlKCk7XG4gICAgfSxcblxuICAgICdlbmFibGUtYm9sZC1hcy1icmlnaHQnOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5wcmltYXJ5U2NyZWVuXy50ZXh0QXR0cmlidXRlcy5lbmFibGVCb2xkQXNCcmlnaHQgPSAhIXY7XG4gICAgICB0ZXJtaW5hbC5hbHRlcm5hdGVTY3JlZW5fLnRleHRBdHRyaWJ1dGVzLmVuYWJsZUJvbGRBc0JyaWdodCA9ICEhdjtcbiAgICB9LFxuXG4gICAgJ2VuYWJsZS1ibGluayc6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHRlcm1pbmFsLnNldFRleHRCbGluayghIXYpO1xuICAgIH0sXG5cbiAgICAnZW5hYmxlLWNsaXBib2FyZC13cml0ZSc6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHRlcm1pbmFsLnZ0LmVuYWJsZUNsaXBib2FyZFdyaXRlID0gISF2O1xuICAgIH0sXG5cbiAgICAnZW5hYmxlLWRlYzEyJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwudnQuZW5hYmxlRGVjMTIgPSAhIXY7XG4gICAgfSxcblxuICAgICdlbmFibGUtY3NpLWotMyc6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHRlcm1pbmFsLnZ0LmVuYWJsZUNzaUozID0gISF2O1xuICAgIH0sXG5cbiAgICAnZm9udC1mYW1pbHknOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5zeW5jRm9udEZhbWlseSgpO1xuICAgIH0sXG5cbiAgICAnZm9udC1zaXplJzogZnVuY3Rpb24odikge1xuICAgICAgdiA9IHBhcnNlSW50KHYpO1xuICAgICAgaWYgKHYgPD0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBJbnZhbGlkIGZvbnQgc2l6ZTogJHt2fWApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRlcm1pbmFsLnNldEZvbnRTaXplKHYpO1xuICAgIH0sXG5cbiAgICAnZm9udC1zbW9vdGhpbmcnOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5zeW5jRm9udEZhbWlseSgpO1xuICAgIH0sXG5cbiAgICAnZm9yZWdyb3VuZC1jb2xvcic6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHRlcm1pbmFsLnNldEZvcmVncm91bmRDb2xvcih2KTtcbiAgICB9LFxuXG4gICAgJ2hpZGUtbW91c2Utd2hpbGUtdHlwaW5nJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwuc2V0QXV0b21hdGljTW91c2VIaWRpbmcodik7XG4gICAgfSxcblxuICAgICdob21lLWtleXMtc2Nyb2xsJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwua2V5Ym9hcmQuaG9tZUtleXNTY3JvbGwgPSB2O1xuICAgIH0sXG5cbiAgICBrZXliaW5kaW5nczogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwua2V5Ym9hcmQuYmluZGluZ3MuY2xlYXIoKTtcblxuICAgICAgaWYgKCF2KSByZXR1cm47XG5cbiAgICAgIGlmICghKHYgaW5zdGFuY2VvZiBPYmplY3QpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGtleWJpbmRpbmdzIHByZWZlcmVuY2U6IEV4cGVjdGVkIG9iamVjdCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHRlcm1pbmFsLmtleWJvYXJkLmJpbmRpbmdzLmFkZEJpbmRpbmdzKHYpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4ga2V5YmluZGluZ3MgcHJlZmVyZW5jZTogJyArIGV4KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgJ21lZGlhLWtleXMtYXJlLWZrZXlzJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwua2V5Ym9hcmQubWVkaWFLZXlzQXJlRktleXMgPSB2O1xuICAgIH0sXG5cbiAgICAnbWV0YS1zZW5kcy1lc2NhcGUnOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5rZXlib2FyZC5tZXRhU2VuZHNFc2NhcGUgPSB2O1xuICAgIH0sXG5cbiAgICAnbW91c2UtcmlnaHQtY2xpY2stcGFzdGUnOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5tb3VzZVJpZ2h0Q2xpY2tQYXN0ZSA9IHY7XG4gICAgfSxcblxuICAgICdtb3VzZS1wYXN0ZS1idXR0b24nOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5zeW5jTW91c2VQYXN0ZUJ1dHRvbigpO1xuICAgIH0sXG5cbiAgICAncGFnZS1rZXlzLXNjcm9sbCc6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHRlcm1pbmFsLmtleWJvYXJkLnBhZ2VLZXlzU2Nyb2xsID0gdjtcbiAgICB9LFxuXG4gICAgJ3Bhc3MtYWx0LW51bWJlcic6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICh2ID09IG51bGwpIHtcbiAgICAgICAgLy8gTGV0IEFsdC0xLi45IHBhc3MgdG8gdGhlIGJyb3dzZXIgKHRvIGNvbnRyb2wgdGFiIHN3aXRjaGluZykgb25cbiAgICAgICAgLy8gbm9uLU9TIFggc3lzdGVtcywgb3IgaWYgaHRlcm0gaXMgbm90IG9wZW5lZCBpbiBhbiBhcHAgd2luZG93LlxuICAgICAgICB2ID0gaHRlcm0ub3MgIT0gJ21hYycgJiYgaHRlcm0ud2luZG93VHlwZSAhPSAncG9wdXAnO1xuICAgICAgfVxuXG4gICAgICB0ZXJtaW5hbC5wYXNzQWx0TnVtYmVyID0gdjtcbiAgICB9LFxuXG4gICAgJ3Bhc3MtY3RybC1udW1iZXInOiBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAodiA9PSBudWxsKSB7XG4gICAgICAgIC8vIExldCBDdHJsLTEuLjkgcGFzcyB0byB0aGUgYnJvd3NlciAodG8gY29udHJvbCB0YWIgc3dpdGNoaW5nKSBvblxuICAgICAgICAvLyBub24tT1MgWCBzeXN0ZW1zLCBvciBpZiBodGVybSBpcyBub3Qgb3BlbmVkIGluIGFuIGFwcCB3aW5kb3cuXG4gICAgICAgIHYgPSBodGVybS5vcyAhPSAnbWFjJyAmJiBodGVybS53aW5kb3dUeXBlICE9ICdwb3B1cCc7XG4gICAgICB9XG5cbiAgICAgIHRlcm1pbmFsLnBhc3NDdHJsTnVtYmVyID0gdjtcbiAgICB9LFxuXG4gICAgJ3Bhc3MtbWV0YS1udW1iZXInOiBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAodiA9PSBudWxsKSB7XG4gICAgICAgIC8vIExldCBNZXRhLTEuLjkgcGFzcyB0byB0aGUgYnJvd3NlciAodG8gY29udHJvbCB0YWIgc3dpdGNoaW5nKSBvblxuICAgICAgICAvLyBPUyBYIHN5c3RlbXMsIG9yIGlmIGh0ZXJtIGlzIG5vdCBvcGVuZWQgaW4gYW4gYXBwIHdpbmRvdy5cbiAgICAgICAgdiA9IGh0ZXJtLm9zID09ICdtYWMnICYmIGh0ZXJtLndpbmRvd1R5cGUgIT0gJ3BvcHVwJztcbiAgICAgIH1cblxuICAgICAgdGVybWluYWwucGFzc01ldGFOdW1iZXIgPSB2O1xuICAgIH0sXG5cbiAgICAncGFzcy1tZXRhLXYnOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5rZXlib2FyZC5wYXNzTWV0YVYgPSB2O1xuICAgIH0sXG5cbiAgICAncmVjZWl2ZS1lbmNvZGluZyc6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghL14odXRmLTh8cmF3KSQvLnRlc3QodikpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIHZhbHVlIGZvciBcInJlY2VpdmUtZW5jb2RpbmdcIjogJyArIHYpO1xuICAgICAgICB2ID0gJ3V0Zi04JztcbiAgICAgIH1cblxuICAgICAgdGVybWluYWwudnQuY2hhcmFjdGVyRW5jb2RpbmcgPSB2O1xuICAgIH0sXG5cbiAgICAnc2Nyb2xsLW9uLWtleXN0cm9rZSc6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHRlcm1pbmFsLnNjcm9sbE9uS2V5c3Ryb2tlXyA9IHY7XG4gICAgfSxcblxuICAgICdzY3JvbGwtb24tb3V0cHV0JzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwuc2Nyb2xsT25PdXRwdXRfID0gdjtcbiAgICB9LFxuXG4gICAgJ3Njcm9sbGJhci12aXNpYmxlJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwuc2V0U2Nyb2xsYmFyVmlzaWJsZSh2KTtcbiAgICB9LFxuXG4gICAgJ3Njcm9sbC13aGVlbC1tYXktc2VuZC1hcnJvdy1rZXlzJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwuc2Nyb2xsV2hlZWxBcnJvd0tleXNfID0gdjtcbiAgICB9LFxuXG4gICAgJ3Njcm9sbC13aGVlbC1tb3ZlLW11bHRpcGxpZXInOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5zZXRTY3JvbGxXaGVlbE1vdmVNdWx0aXBsZXIodik7XG4gICAgfSxcblxuICAgICdzZW5kLWVuY29kaW5nJzogZnVuY3Rpb24odikge1xuICAgICAgaWYgKCEvXih1dGYtOHxyYXcpJC8udGVzdCh2KSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgdmFsdWUgZm9yIFwic2VuZC1lbmNvZGluZ1wiOiAnICsgdik7XG4gICAgICAgIHYgPSAndXRmLTgnO1xuICAgICAgfVxuXG4gICAgICB0ZXJtaW5hbC5rZXlib2FyZC5jaGFyYWN0ZXJFbmNvZGluZyA9IHY7XG4gICAgfSxcblxuICAgICdzaGlmdC1pbnNlcnQtcGFzdGUnOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5rZXlib2FyZC5zaGlmdEluc2VydFBhc3RlID0gdjtcbiAgICB9LFxuXG4gICAgJ3Rlcm1pbmFsLWVuY29kaW5nJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwudnQuc2V0RW5jb2Rpbmcodik7XG4gICAgfSxcblxuICAgICd1c2VyLWNzcyc6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHRlcm1pbmFsLnNjcm9sbFBvcnRfLnNldFVzZXJDc3NVcmwodik7XG4gICAgfSxcblxuICAgICd1c2VyLWNzcy10ZXh0JzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwuc2Nyb2xsUG9ydF8uc2V0VXNlckNzc1RleHQodik7XG4gICAgfSxcblxuICAgICd3b3JkLWJyZWFrLW1hdGNoLWxlZnQnOiBmdW5jdGlvbih2KSB7XG4gICAgICB0ZXJtaW5hbC5wcmltYXJ5U2NyZWVuXy53b3JkQnJlYWtNYXRjaExlZnQgPSB2O1xuICAgICAgdGVybWluYWwuYWx0ZXJuYXRlU2NyZWVuXy53b3JkQnJlYWtNYXRjaExlZnQgPSB2O1xuICAgIH0sXG5cbiAgICAnd29yZC1icmVhay1tYXRjaC1yaWdodCc6IGZ1bmN0aW9uKHYpIHtcbiAgICAgIHRlcm1pbmFsLnByaW1hcnlTY3JlZW5fLndvcmRCcmVha01hdGNoUmlnaHQgPSB2O1xuICAgICAgdGVybWluYWwuYWx0ZXJuYXRlU2NyZWVuXy53b3JkQnJlYWtNYXRjaFJpZ2h0ID0gdjtcbiAgICB9LFxuXG4gICAgJ3dvcmQtYnJlYWstbWF0Y2gtbWlkZGxlJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwucHJpbWFyeVNjcmVlbl8ud29yZEJyZWFrTWF0Y2hNaWRkbGUgPSB2O1xuICAgICAgdGVybWluYWwuYWx0ZXJuYXRlU2NyZWVuXy53b3JkQnJlYWtNYXRjaE1pZGRsZSA9IHY7XG4gICAgfSxcblxuICAgICdhbGxvdy1pbWFnZXMtaW5saW5lJzogZnVuY3Rpb24odikge1xuICAgICAgdGVybWluYWwuYWxsb3dJbWFnZXNJbmxpbmUgPSB2O1xuICAgIH0sXG4gIH0pO1xuXG4gIHRoaXMucHJlZnNfLnJlYWRTdG9yYWdlKFxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5wcmVmc18ubm90aWZ5QWxsKCk7XG5cbiAgICAgIGlmIChvcHRfY2FsbGJhY2spIG9wdF9jYWxsYmFjaygpO1xuICAgIH0uYmluZCh0aGlzKSxcbiAgKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcHJlZmVyZW5jZXMgbWFuYWdlciB1c2VkIGZvciBjb25maWd1cmluZyB0aGlzIHRlcm1pbmFsLlxuICpcbiAqIEByZXR1cm4ge2h0ZXJtLlByZWZlcmVuY2VNYW5hZ2VyfVxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuZ2V0UHJlZnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucHJlZnNfO1xufTtcblxuLyoqXG4gKiBFbmFibGUgb3IgZGlzYWJsZSBicmFja2V0ZWQgcGFzdGUgbW9kZS5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRCcmFja2V0ZWRQYXN0ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHRoaXMub3B0aW9uc18uYnJhY2tldGVkUGFzdGUgPSBzdGF0ZTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBjb2xvciBmb3IgdGhlIGN1cnNvci5cbiAqXG4gKiBJZiB5b3Ugd2FudCB0aGlzIHNldHRpbmcgdG8gcGVyc2lzdCwgc2V0IGl0IHRocm91Z2ggcHJlZnNfLCByYXRoZXIgdGhhblxuICogd2l0aCB0aGlzIG1ldGhvZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGNvbG9yIFRoZSBjb2xvciB0byBzZXQuICBJZiBub3QgZGVmaW5lZCwgd2UgcmVzZXQgdG8gdGhlXG4gKiAgICAgc2F2ZWQgdXNlciBwcmVmZXJlbmNlLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2V0Q3Vyc29yQ29sb3IgPSBmdW5jdGlvbihjb2xvcikge1xuICBpZiAoY29sb3IgPT09IHVuZGVmaW5lZCkgY29sb3IgPSB0aGlzLnByZWZzXy5nZXQoJ2N1cnNvci1jb2xvcicpO1xuXG4gIHRoaXMuc2V0Q3NzVmFyKCdjdXJzb3ItY29sb3InLCBjb2xvcik7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgY3VycmVudCBjdXJzb3IgY29sb3IgYXMgYSBzdHJpbmcuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5nZXRDdXJzb3JDb2xvciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5nZXRDc3NWYXIoJ2N1cnNvci1jb2xvcicpO1xufTtcblxuLyoqXG4gKiBFbmFibGUgb3IgZGlzYWJsZSBtb3VzZSBiYXNlZCB0ZXh0IHNlbGVjdGlvbiBpbiB0aGUgdGVybWluYWwuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBzdGF0ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2V0U2VsZWN0aW9uRW5hYmxlZCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHRoaXMuZW5hYmxlTW91c2VEcmFnU2Nyb2xsID0gc3RhdGU7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgYmFja2dyb3VuZCBjb2xvci5cbiAqXG4gKiBJZiB5b3Ugd2FudCB0aGlzIHNldHRpbmcgdG8gcGVyc2lzdCwgc2V0IGl0IHRocm91Z2ggcHJlZnNfLCByYXRoZXIgdGhhblxuICogd2l0aCB0aGlzIG1ldGhvZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGNvbG9yIFRoZSBjb2xvciB0byBzZXQuICBJZiBub3QgZGVmaW5lZCwgd2UgcmVzZXQgdG8gdGhlXG4gKiAgICAgc2F2ZWQgdXNlciBwcmVmZXJlbmNlLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2V0QmFja2dyb3VuZENvbG9yID0gZnVuY3Rpb24oY29sb3IpIHtcbiAgaWYgKGNvbG9yID09PSB1bmRlZmluZWQpIGNvbG9yID0gdGhpcy5wcmVmc18uZ2V0KCdiYWNrZ3JvdW5kLWNvbG9yJyk7XG5cbiAgdGhpcy5iYWNrZ3JvdW5kQ29sb3JfID0gbGliLmNvbG9ycy5ub3JtYWxpemVDU1MoY29sb3IpO1xuICB0aGlzLnByaW1hcnlTY3JlZW5fLnRleHRBdHRyaWJ1dGVzLnNldERlZmF1bHRzKFxuICAgIHRoaXMuZm9yZWdyb3VuZENvbG9yXyxcbiAgICB0aGlzLmJhY2tncm91bmRDb2xvcl8sXG4gICk7XG4gIHRoaXMuYWx0ZXJuYXRlU2NyZWVuXy50ZXh0QXR0cmlidXRlcy5zZXREZWZhdWx0cyhcbiAgICB0aGlzLmZvcmVncm91bmRDb2xvcl8sXG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3JfLFxuICApO1xuICB0aGlzLnNjcm9sbFBvcnRfLnNldEJhY2tncm91bmRDb2xvcihjb2xvcik7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgY3VycmVudCB0ZXJtaW5hbCBiYWNrZ3JvdW5kIGNvbG9yLlxuICpcbiAqIEludGVuZGVkIGZvciB1c2UgYnkgb3RoZXIgY2xhc3Nlcywgc28gd2UgZG9uJ3QgaGF2ZSB0byBleHBvc2UgdGhlIGVudGlyZVxuICogcHJlZnNfIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5nZXRCYWNrZ3JvdW5kQ29sb3IgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuYmFja2dyb3VuZENvbG9yXztcbn07XG5cbi8qKlxuICogU2V0IHRoZSBmb3JlZ3JvdW5kIGNvbG9yLlxuICpcbiAqIElmIHlvdSB3YW50IHRoaXMgc2V0dGluZyB0byBwZXJzaXN0LCBzZXQgaXQgdGhyb3VnaCBwcmVmc18sIHJhdGhlciB0aGFuXG4gKiB3aXRoIHRoaXMgbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gY29sb3IgVGhlIGNvbG9yIHRvIHNldC4gIElmIG5vdCBkZWZpbmVkLCB3ZSByZXNldCB0byB0aGVcbiAqICAgICBzYXZlZCB1c2VyIHByZWZlcmVuY2UuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRGb3JlZ3JvdW5kQ29sb3IgPSBmdW5jdGlvbihjb2xvcikge1xuICBpZiAoY29sb3IgPT09IHVuZGVmaW5lZCkgY29sb3IgPSB0aGlzLnByZWZzXy5nZXQoJ2ZvcmVncm91bmQtY29sb3InKTtcblxuICB0aGlzLmZvcmVncm91bmRDb2xvcl8gPSBsaWIuY29sb3JzLm5vcm1hbGl6ZUNTUyhjb2xvcik7XG4gIHRoaXMucHJpbWFyeVNjcmVlbl8udGV4dEF0dHJpYnV0ZXMuc2V0RGVmYXVsdHMoXG4gICAgdGhpcy5mb3JlZ3JvdW5kQ29sb3JfLFxuICAgIHRoaXMuYmFja2dyb3VuZENvbG9yXyxcbiAgKTtcbiAgdGhpcy5hbHRlcm5hdGVTY3JlZW5fLnRleHRBdHRyaWJ1dGVzLnNldERlZmF1bHRzKFxuICAgIHRoaXMuZm9yZWdyb3VuZENvbG9yXyxcbiAgICB0aGlzLmJhY2tncm91bmRDb2xvcl8sXG4gICk7XG4gIHRoaXMuc2Nyb2xsUG9ydF8uc2V0Rm9yZWdyb3VuZENvbG9yKGNvbG9yKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBjdXJyZW50IHRlcm1pbmFsIGZvcmVncm91bmQgY29sb3IuXG4gKlxuICogSW50ZW5kZWQgZm9yIHVzZSBieSBvdGhlciBjbGFzc2VzLCBzbyB3ZSBkb24ndCBoYXZlIHRvIGV4cG9zZSB0aGUgZW50aXJlXG4gKiBwcmVmc18gb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmdldEZvcmVncm91bmRDb2xvciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5mb3JlZ3JvdW5kQ29sb3JfO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgYSB0ZXJtaW5hbCBjb21tYW5kIGFuZCBydW4gaXQgd2l0aCBhIGdpdmVuXG4gKiBhcmd1bWVudCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tbWFuZENsYXNzIFRoZSBjb25zdHJ1Y3RvciBmb3IgYSB0ZXJtaW5hbCBjb21tYW5kLlxuICogQHBhcmFtIHtzdHJpbmd9IGFyZ1N0cmluZyBUaGUgYXJndW1lbnQgc3RyaW5nIHRvIHBhc3MgdG8gdGhlIGNvbW1hbmQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5ydW5Db21tYW5kQ2xhc3MgPSBmdW5jdGlvbihjb21tYW5kQ2xhc3MsIGFyZ1N0cmluZykge1xuICB2YXIgZW52aXJvbm1lbnQgPSB0aGlzLnByZWZzXy5nZXQoJ2Vudmlyb25tZW50Jyk7XG4gIGlmICh0eXBlb2YgZW52aXJvbm1lbnQgIT0gJ29iamVjdCcgfHwgZW52aXJvbm1lbnQgPT0gbnVsbCkgZW52aXJvbm1lbnQgPSB7fTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuY29tbWFuZCA9IG5ldyBjb21tYW5kQ2xhc3Moe1xuICAgIGFyZ1N0cmluZzogYXJnU3RyaW5nIHx8ICcnLFxuICAgIGlvOiB0aGlzLmlvLnB1c2goKSxcbiAgICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnQsXG4gICAgb25FeGl0OiBmdW5jdGlvbihjb2RlKSB7XG4gICAgICBzZWxmLmlvLnBvcCgpO1xuICAgICAgc2VsZi51bmluc3RhbGxLZXlib2FyZCgpO1xuICAgICAgaWYgKHNlbGYucHJlZnNfLmdldCgnY2xvc2Utb24tZXhpdCcpKSB3aW5kb3cuY2xvc2UoKTtcbiAgICB9LFxuICB9KTtcblxuICB0aGlzLmluc3RhbGxLZXlib2FyZCgpO1xuICB0aGlzLmNvbW1hbmQucnVuKCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBzY3JlZW4gaXMgdGhlIHByaW1hcnkgc2NyZWVuLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmlzUHJpbWFyeVNjcmVlbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zY3JlZW5fID09IHRoaXMucHJpbWFyeVNjcmVlbl87XG59O1xuXG4vKipcbiAqIEluc3RhbGwgdGhlIGtleWJvYXJkIGhhbmRsZXIgZm9yIHRoaXMgdGVybWluYWwuXG4gKlxuICogVGhpcyB3aWxsIHByZXZlbnQgdGhlIGJyb3dzZXIgZnJvbSBzZWVpbmcgYW55IGtleXN0cm9rZXMgc2VudCB0byB0aGVcbiAqIHRlcm1pbmFsLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuaW5zdGFsbEtleWJvYXJkID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMua2V5Ym9hcmQuaW5zdGFsbEtleWJvYXJkKHRoaXMuc2Nyb2xsUG9ydF8uZ2V0RG9jdW1lbnQoKS5ib2R5KTtcbn07XG5cbi8qKlxuICogVW5pbnN0YWxsIHRoZSBrZXlib2FyZCBoYW5kbGVyIGZvciB0aGlzIHRlcm1pbmFsLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUudW5pbnN0YWxsS2V5Ym9hcmQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5rZXlib2FyZC5pbnN0YWxsS2V5Ym9hcmQobnVsbCk7XG59O1xuXG4vKipcbiAqIFNldCBhIENTUyB2YXJpYWJsZS5cbiAqXG4gKiBOb3JtYWxseSB0aGlzIGlzIHVzZWQgdG8gc2V0IHZhcmlhYmxlcyBpbiB0aGUgaHRlcm0gbmFtZXNwYWNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSB2YXJpYWJsZSB0byBzZXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbiB0byB0aGUgdmFyaWFibGUuXG4gKiBAcGFyYW0ge3N0cmluZz99IG9wdF9wcmVmaXggVGhlIHZhcmlhYmxlIG5hbWVzcGFjZS9wcmVmaXggdG8gdXNlLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2V0Q3NzVmFyID0gZnVuY3Rpb24oXG4gIG5hbWUsXG4gIHZhbHVlLFxuICBvcHRfcHJlZml4ID0gJy0taHRlcm0tJyxcbikge1xuICB0aGlzLmRvY3VtZW50Xy5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXG4gICAgYCR7b3B0X3ByZWZpeH0ke25hbWV9YCxcbiAgICB2YWx1ZSxcbiAgKTtcbn07XG5cbi8qKlxuICogR2V0IGEgQ1NTIHZhcmlhYmxlLlxuICpcbiAqIE5vcm1hbGx5IHRoaXMgaXMgdXNlZCB0byBnZXQgdmFyaWFibGVzIGluIHRoZSBodGVybSBuYW1lc3BhY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIHZhcmlhYmxlIHRvIHJlYWQuXG4gKiBAcGFyYW0ge3N0cmluZz99IG9wdF9wcmVmaXggVGhlIHZhcmlhYmxlIG5hbWVzcGFjZS9wcmVmaXggdG8gdXNlLlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgY3VycmVudCBzZXR0aW5nIGZvciB0aGlzIHZhcmlhYmxlLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuZ2V0Q3NzVmFyID0gZnVuY3Rpb24obmFtZSwgb3B0X3ByZWZpeCA9ICctLWh0ZXJtLScpIHtcbiAgcmV0dXJuIHRoaXMuZG9jdW1lbnRfLmRvY3VtZW50RWxlbWVudC5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFxuICAgIGAke29wdF9wcmVmaXh9JHtuYW1lfWAsXG4gICk7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgZm9udCBzaXplIGZvciB0aGlzIHRlcm1pbmFsLlxuICpcbiAqIENhbGwgc2V0Rm9udFNpemUoMCkgdG8gcmVzZXQgdG8gdGhlIGRlZmF1bHQgZm9udCBzaXplLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgbW9kaWZ5IHRoZSBmb250LXNpemUgcHJlZmVyZW5jZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gcHggVGhlIGRlc2lyZWQgZm9udCBzaXplLCBpbiBwaXhlbHMuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRGb250U2l6ZSA9IGZ1bmN0aW9uKHB4KSB7XG4gIGlmIChweCA8PSAwKSBweCA9IHRoaXMucHJlZnNfLmdldCgnZm9udC1zaXplJyk7XG5cbiAgdGhpcy5zY3JvbGxQb3J0Xy5zZXRGb250U2l6ZShweCk7XG4gIHRoaXMuc2V0Q3NzVmFyKCdjaGFyc2l6ZS13aWR0aCcsIHRoaXMuc2Nyb2xsUG9ydF8uY2hhcmFjdGVyU2l6ZS53aWR0aCArICdweCcpO1xuICB0aGlzLnNldENzc1ZhcihcbiAgICAnY2hhcnNpemUtaGVpZ2h0JyxcbiAgICB0aGlzLnNjcm9sbFBvcnRfLmNoYXJhY3RlclNpemUuaGVpZ2h0ICsgJ3B4JyxcbiAgKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IGZvbnQgc2l6ZS5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5nZXRGb250U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zY3JvbGxQb3J0Xy5nZXRGb250U2l6ZSgpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgZm9udCBmYW1pbHkuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuZ2V0Rm9udEZhbWlseSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zY3JvbGxQb3J0Xy5nZXRGb250RmFtaWx5KCk7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgQ1NTIFwiZm9udC1mYW1pbHlcIiBmb3IgdGhpcyB0ZXJtaW5hbC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnN5bmNGb250RmFtaWx5ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2Nyb2xsUG9ydF8uc2V0Rm9udEZhbWlseShcbiAgICB0aGlzLnByZWZzXy5nZXQoJ2ZvbnQtZmFtaWx5JyksXG4gICAgdGhpcy5wcmVmc18uZ2V0KCdmb250LXNtb290aGluZycpLFxuICApO1xuICB0aGlzLnN5bmNCb2xkU2FmZVN0YXRlKCk7XG59O1xuXG4vKipcbiAqIFNldCB0aGlzLm1vdXNlUGFzdGVCdXR0b24gYmFzZWQgb24gdGhlIG1vdXNlLXBhc3RlLWJ1dHRvbiBwcmVmLFxuICogYXV0b2RldGVjdGluZyBpZiBuZWNlc3NhcnkuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zeW5jTW91c2VQYXN0ZUJ1dHRvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYnV0dG9uID0gdGhpcy5wcmVmc18uZ2V0KCdtb3VzZS1wYXN0ZS1idXR0b24nKTtcbiAgaWYgKHR5cGVvZiBidXR0b24gPT0gJ251bWJlcicpIHtcbiAgICB0aGlzLm1vdXNlUGFzdGVCdXR0b24gPSBidXR0b247XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGh0ZXJtLm9zICE9ICdsaW51eCcpIHtcbiAgICB0aGlzLm1vdXNlUGFzdGVCdXR0b24gPSAxOyAvLyBNaWRkbGUgbW91c2UgYnV0dG9uLlxuICB9IGVsc2Uge1xuICAgIHRoaXMubW91c2VQYXN0ZUJ1dHRvbiA9IDI7IC8vIFJpZ2h0IG1vdXNlIGJ1dHRvbi5cbiAgfVxufTtcblxuLyoqXG4gKiBFbmFibGUgb3IgZGlzYWJsZSBib2xkIGJhc2VkIG9uIHRoZSBlbmFibGUtYm9sZCBwcmVmLCBhdXRvZGV0ZWN0aW5nIGlmXG4gKiBuZWNlc3NhcnkuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zeW5jQm9sZFNhZmVTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZW5hYmxlQm9sZCA9IHRoaXMucHJlZnNfLmdldCgnZW5hYmxlLWJvbGQnKTtcbiAgaWYgKGVuYWJsZUJvbGQgIT09IG51bGwpIHtcbiAgICB0aGlzLnByaW1hcnlTY3JlZW5fLnRleHRBdHRyaWJ1dGVzLmVuYWJsZUJvbGQgPSBlbmFibGVCb2xkO1xuICAgIHRoaXMuYWx0ZXJuYXRlU2NyZWVuXy50ZXh0QXR0cmlidXRlcy5lbmFibGVCb2xkID0gZW5hYmxlQm9sZDtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbm9ybWFsU2l6ZSA9IHRoaXMuc2Nyb2xsUG9ydF8ubWVhc3VyZUNoYXJhY3RlclNpemUoKTtcbiAgdmFyIGJvbGRTaXplID0gdGhpcy5zY3JvbGxQb3J0Xy5tZWFzdXJlQ2hhcmFjdGVyU2l6ZSgnYm9sZCcpO1xuXG4gIHZhciBpc0JvbGRTYWZlID0gbm9ybWFsU2l6ZS5lcXVhbHMoYm9sZFNpemUpO1xuICBpZiAoIWlzQm9sZFNhZmUpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnQm9sZCBjaGFyYWN0ZXJzIGRpc2FibGVkOiBTaXplIG9mIGJvbGQgd2VpZ2h0IGRpZmZlcnMgJyArXG4gICAgICAgICdmcm9tIG5vcm1hbC4gIEZvbnQgZmFtaWx5IGlzOiAnICtcbiAgICAgICAgdGhpcy5zY3JvbGxQb3J0Xy5nZXRGb250RmFtaWx5KCksXG4gICAgKTtcbiAgfVxuXG4gIHRoaXMucHJpbWFyeVNjcmVlbl8udGV4dEF0dHJpYnV0ZXMuZW5hYmxlQm9sZCA9IGlzQm9sZFNhZmU7XG4gIHRoaXMuYWx0ZXJuYXRlU2NyZWVuXy50ZXh0QXR0cmlidXRlcy5lbmFibGVCb2xkID0gaXNCb2xkU2FmZTtcbn07XG5cbi8qKlxuICogQ29udHJvbCB0ZXh0IGJsaW5raW5nIGJlaGF2aW9yLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHN0YXRlIFdoZXRoZXIgdG8gZW5hYmxlIHN1cHBvcnQgZm9yIGJsaW5raW5nIHRleHQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRUZXh0QmxpbmsgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBpZiAoc3RhdGUgPT09IHVuZGVmaW5lZCkgc3RhdGUgPSB0aGlzLnByZWZzXy5nZXQoJ2VuYWJsZS1ibGluaycpO1xuICB0aGlzLnNldENzc1ZhcignYmxpbmstbm9kZS1kdXJhdGlvbicsIHN0YXRlID8gJzAuN3MnIDogJzAnKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtb3VzZSBjdXJzb3Igc3R5bGUgYmFzZWQgb24gdGhlIGN1cnJlbnQgdGVybWluYWwgbW9kZS5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnN5bmNNb3VzZVN0eWxlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2V0Q3NzVmFyKFxuICAgICdtb3VzZS1jdXJzb3Itc3R5bGUnLFxuICAgIHRoaXMudnQubW91c2VSZXBvcnQgPT0gdGhpcy52dC5NT1VTRV9SRVBPUlRfRElTQUJMRURcbiAgICAgID8gJ3ZhcigtLWh0ZXJtLW1vdXNlLWN1cnNvci10ZXh0KSdcbiAgICAgIDogJ3ZhcigtLWh0ZXJtLW1vdXNlLWN1cnNvci1wb2ludGVyKScsXG4gICk7XG59O1xuXG4vKipcbiAqIFJldHVybiBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgY3Vyc29yIHBvc2l0aW9uLlxuICpcbiAqIEByZXR1cm4ge2h0ZXJtLlJvd0NvbH0gVGhlIFJvd0NvbCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2F2ZUN1cnNvciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLmNsb25lKCk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgY3VycmVudCB0ZXh0IGF0dHJpYnV0ZXMuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuZ2V0VGV4dEF0dHJpYnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2NyZWVuXy50ZXh0QXR0cmlidXRlcztcbn07XG5cbi8qKlxuICogU2V0IHRoZSB0ZXh0IGF0dHJpYnV0ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRBdHRyaWJ1dGVzIFRoZSBhdHRyaWJ1dGVzIHRvIHNldC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNldFRleHRBdHRyaWJ1dGVzID0gZnVuY3Rpb24odGV4dEF0dHJpYnV0ZXMpIHtcbiAgdGhpcy5zY3JlZW5fLnRleHRBdHRyaWJ1dGVzID0gdGV4dEF0dHJpYnV0ZXM7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgY3VycmVudCBicm93c2VyIHpvb20gZmFjdG9yIGFwcGxpZWQgdG8gdGhlIHRlcm1pbmFsLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGN1cnJlbnQgYnJvd3NlciB6b29tIGZhY3Rvci5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmdldFpvb21GYWN0b3IgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2Nyb2xsUG9ydF8uY2hhcmFjdGVyU2l6ZS56b29tRmFjdG9yO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIHRpdGxlIG9mIHRoaXMgdGVybWluYWwncyB3aW5kb3cuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlIFRoZSB0aXRsZSB0byBzZXQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRXaW5kb3dUaXRsZSA9IGZ1bmN0aW9uKHRpdGxlKSB7XG4gIHdpbmRvdy5kb2N1bWVudC50aXRsZSA9IHRpdGxlO1xufTtcblxuLyoqXG4gKiBSZXN0b3JlIGEgcHJldmlvdXNseSBzYXZlZCBjdXJzb3IgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtodGVybS5Sb3dDb2x9IGN1cnNvciBUaGUgcG9zaXRpb24gdG8gcmVzdG9yZS5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnJlc3RvcmVDdXJzb3IgPSBmdW5jdGlvbihjdXJzb3IpIHtcbiAgdmFyIHJvdyA9IGxpYi5mLmNsYW1wKGN1cnNvci5yb3csIDAsIHRoaXMuc2NyZWVuU2l6ZS5oZWlnaHQgLSAxKTtcbiAgdmFyIGNvbHVtbiA9IGxpYi5mLmNsYW1wKGN1cnNvci5jb2x1bW4sIDAsIHRoaXMuc2NyZWVuU2l6ZS53aWR0aCAtIDEpO1xuICB0aGlzLnNjcmVlbl8uc2V0Q3Vyc29yUG9zaXRpb24ocm93LCBjb2x1bW4pO1xuICBpZiAoY3Vyc29yLmNvbHVtbiA+IGNvbHVtbiB8fCAoY3Vyc29yLmNvbHVtbiA9PSBjb2x1bW4gJiYgY3Vyc29yLm92ZXJmbG93KSkge1xuICAgIHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5vdmVyZmxvdyA9IHRydWU7XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYXIgdGhlIGN1cnNvcidzIG92ZXJmbG93IGZsYWcuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5jbGVhckN1cnNvck92ZXJmbG93ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5vdmVyZmxvdyA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTYXZlIHRoZSBjdXJyZW50IGN1cnNvciBzdGF0ZSB0byB0aGUgY29ycmVzcG9uZGluZyBzY3JlZW5zLlxuICpcbiAqIFNlZSB0aGUgaHRlcm0uU2NyZWVuLkN1cnNvclN0YXRlIGNsYXNzIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gYm90aCBJZiB0cnVlLCB1cGRhdGUgYm90aCBzY3JlZW5zLCBlbHNlIG9ubHkgdXBkYXRlIHRoZVxuICogICAgIGN1cnJlbnQgc2NyZWVuLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2F2ZUN1cnNvckFuZFN0YXRlID0gZnVuY3Rpb24oYm90aCkge1xuICBpZiAoYm90aCkge1xuICAgIHRoaXMucHJpbWFyeVNjcmVlbl8uc2F2ZUN1cnNvckFuZFN0YXRlKHRoaXMudnQpO1xuICAgIHRoaXMuYWx0ZXJuYXRlU2NyZWVuXy5zYXZlQ3Vyc29yQW5kU3RhdGUodGhpcy52dCk7XG4gIH0gZWxzZSB0aGlzLnNjcmVlbl8uc2F2ZUN1cnNvckFuZFN0YXRlKHRoaXMudnQpO1xufTtcblxuLyoqXG4gKiBSZXN0b3JlIHRoZSBzYXZlZCBjdXJzb3Igc3RhdGUgaW4gdGhlIGNvcnJlc3BvbmRpbmcgc2NyZWVucy5cbiAqXG4gKiBTZWUgdGhlIGh0ZXJtLlNjcmVlbi5DdXJzb3JTdGF0ZSBjbGFzcyBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGJvdGggSWYgdHJ1ZSwgdXBkYXRlIGJvdGggc2NyZWVucywgZWxzZSBvbmx5IHVwZGF0ZSB0aGVcbiAqICAgICBjdXJyZW50IHNjcmVlbi5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnJlc3RvcmVDdXJzb3JBbmRTdGF0ZSA9IGZ1bmN0aW9uKGJvdGgpIHtcbiAgaWYgKGJvdGgpIHtcbiAgICB0aGlzLnByaW1hcnlTY3JlZW5fLnJlc3RvcmVDdXJzb3JBbmRTdGF0ZSh0aGlzLnZ0KTtcbiAgICB0aGlzLmFsdGVybmF0ZVNjcmVlbl8ucmVzdG9yZUN1cnNvckFuZFN0YXRlKHRoaXMudnQpO1xuICB9IGVsc2UgdGhpcy5zY3JlZW5fLnJlc3RvcmVDdXJzb3JBbmRTdGF0ZSh0aGlzLnZ0KTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY3Vyc29yIHNoYXBlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNoYXBlIFRoZSBzaGFwZSB0byBzZXQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRDdXJzb3JTaGFwZSA9IGZ1bmN0aW9uKHNoYXBlKSB7XG4gIHRoaXMuY3Vyc29yU2hhcGVfID0gc2hhcGU7XG4gIHRoaXMucmVzdHlsZUN1cnNvcl8oKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBjdXJzb3Igc2hhcGVcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5nZXRDdXJzb3JTaGFwZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jdXJzb3JTaGFwZV87XG59O1xuXG4vKipcbiAqIFNldCB0aGUgd2lkdGggb2YgdGhlIHRlcm1pbmFsLCByZXNpemluZyB0aGUgVUkgdG8gbWF0Y2guXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbkNvdW50XG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRXaWR0aCA9IGZ1bmN0aW9uKGNvbHVtbkNvdW50KSB7XG4gIGlmIChjb2x1bW5Db3VudCA9PSBudWxsKSB7XG4gICAgdGhpcy5kaXZfLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZGl2Xy5zdHlsZS53aWR0aCA9XG4gICAgTWF0aC5jZWlsKFxuICAgICAgdGhpcy5zY3JvbGxQb3J0Xy5jaGFyYWN0ZXJTaXplLndpZHRoICogY29sdW1uQ291bnQgK1xuICAgICAgICB0aGlzLnNjcm9sbFBvcnRfLmN1cnJlbnRTY3JvbGxiYXJXaWR0aFB4LFxuICAgICkgKyAncHgnO1xuICB0aGlzLnJlYWxpemVTaXplXyhjb2x1bW5Db3VudCwgdGhpcy5zY3JlZW5TaXplLmhlaWdodCk7XG4gIHRoaXMuc2NoZWR1bGVTeW5jQ3Vyc29yUG9zaXRpb25fKCk7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaGVpZ2h0IG9mIHRoZSB0ZXJtaW5hbCwgcmVzaXppbmcgdGhlIFVJIHRvIG1hdGNoLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSByb3dDb3VudCBUaGUgaGVpZ2h0IGluIHJvd3MuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbihyb3dDb3VudCkge1xuICBpZiAocm93Q291bnQgPT0gbnVsbCkge1xuICAgIHRoaXMuZGl2Xy5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5kaXZfLnN0eWxlLmhlaWdodCA9XG4gICAgdGhpcy5zY3JvbGxQb3J0Xy5jaGFyYWN0ZXJTaXplLmhlaWdodCAqIHJvd0NvdW50ICsgJ3B4JztcbiAgdGhpcy5yZWFsaXplU2l6ZV8odGhpcy5zY3JlZW5TaXplLndpZHRoLCByb3dDb3VudCk7XG4gIHRoaXMuc2NoZWR1bGVTeW5jQ3Vyc29yUG9zaXRpb25fKCk7XG59O1xuXG4vKipcbiAqIERlYWwgd2l0aCB0ZXJtaW5hbCBzaXplIGNoYW5nZXMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbkNvdW50IFRoZSBudW1iZXIgb2YgY29sdW1ucy5cbiAqIEBwYXJhbSB7bnVtYmVyfSByb3dDb3VudCBUaGUgbnVtYmVyIG9mIHJvd3MuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5yZWFsaXplU2l6ZV8gPSBmdW5jdGlvbihjb2x1bW5Db3VudCwgcm93Q291bnQpIHtcbiAgaWYgKGNvbHVtbkNvdW50ICE9IHRoaXMuc2NyZWVuU2l6ZS53aWR0aCkgdGhpcy5yZWFsaXplV2lkdGhfKGNvbHVtbkNvdW50KTtcblxuICBpZiAocm93Q291bnQgIT0gdGhpcy5zY3JlZW5TaXplLmhlaWdodCkgdGhpcy5yZWFsaXplSGVpZ2h0Xyhyb3dDb3VudCk7XG5cbiAgLy8gU2VuZCBuZXcgdGVybWluYWwgc2l6ZSB0byBwbHVnaW4uXG4gIHRoaXMuaW8ub25UZXJtaW5hbFJlc2l6ZV8oY29sdW1uQ291bnQsIHJvd0NvdW50KTtcbn07XG5cbi8qKlxuICogRGVhbCB3aXRoIHRlcm1pbmFsIHdpZHRoIGNoYW5nZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIHdoYXQgbmVlZHMgdG8gYmUgZG9uZSB3aGVuIHRoZSB0ZXJtaW5hbCB3aWR0aCBjaGFuZ2VzXG4gKiBvdXQgZnJvbSB1bmRlciB1cy4gIEl0IGhhcHBlbnMgaGVyZSByYXRoZXIgdGhhbiBpbiBvblJlc2l6ZV8oKSBiZWNhdXNlIHRoaXNcbiAqIGNvZGUgbWF5IG5lZWQgdG8gcnVuIHN5bmNocm9ub3VzbHkgdG8gaGFuZGxlIHByb2dyYW1tYXRpYyBjaGFuZ2VzIG9mXG4gKiB0ZXJtaW5hbCB3aWR0aC5cbiAqXG4gKiBSZWx5aW5nIG9uIHRoZSBicm93c2VyIHRvIHNlbmQgdXMgYW4gYXN5bmMgcmVzaXplIGV2ZW50IG1lYW5zIHdlIG1heSBub3QgYmVcbiAqIGluIHRoZSBjb3JyZWN0IHN0YXRlIHlldCB3aGVuIHRoZSBuZXh0IGVzY2FwZSBzZXF1ZW5jZSBoaXRzLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5Db3VudCBUaGUgbnVtYmVyIG9mIGNvbHVtbnMuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5yZWFsaXplV2lkdGhfID0gZnVuY3Rpb24oY29sdW1uQ291bnQpIHtcbiAgaWYgKGNvbHVtbkNvdW50IDw9IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0IHRvIHJlYWxpemUgYmFkIHdpZHRoOiAnICsgY29sdW1uQ291bnQpO1xuXG4gIHZhciBkZWx0YUNvbHVtbnMgPSBjb2x1bW5Db3VudCAtIHRoaXMuc2NyZWVuXy5nZXRXaWR0aCgpO1xuXG4gIHRoaXMuc2NyZWVuU2l6ZS53aWR0aCA9IGNvbHVtbkNvdW50O1xuICB0aGlzLnNjcmVlbl8uc2V0Q29sdW1uQ291bnQoY29sdW1uQ291bnQpO1xuXG4gIGlmIChkZWx0YUNvbHVtbnMgPiAwKSB7XG4gICAgaWYgKHRoaXMuZGVmYXVsdFRhYlN0b3BzKVxuICAgICAgdGhpcy5zZXREZWZhdWx0VGFiU3RvcHModGhpcy5zY3JlZW5TaXplLndpZHRoIC0gZGVsdGFDb2x1bW5zKTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gdGhpcy50YWJTdG9wc18ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGlmICh0aGlzLnRhYlN0b3BzX1tpXSA8IGNvbHVtbkNvdW50KSBicmVhaztcblxuICAgICAgdGhpcy50YWJTdG9wc18ucG9wKCk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5zY3JlZW5fLnNldENvbHVtbkNvdW50KHRoaXMuc2NyZWVuU2l6ZS53aWR0aCk7XG59O1xuXG4vKipcbiAqIERlYWwgd2l0aCB0ZXJtaW5hbCBoZWlnaHQgY2hhbmdlcy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgd2hhdCBuZWVkcyB0byBiZSBkb25lIHdoZW4gdGhlIHRlcm1pbmFsIGhlaWdodCBjaGFuZ2VzXG4gKiBvdXQgZnJvbSB1bmRlciB1cy4gIEl0IGhhcHBlbnMgaGVyZSByYXRoZXIgdGhhbiBpbiBvblJlc2l6ZV8oKSBiZWNhdXNlIHRoaXNcbiAqIGNvZGUgbWF5IG5lZWQgdG8gcnVuIHN5bmNocm9ub3VzbHkgdG8gaGFuZGxlIHByb2dyYW1tYXRpYyBjaGFuZ2VzIG9mXG4gKiB0ZXJtaW5hbCBoZWlnaHQuXG4gKlxuICogUmVseWluZyBvbiB0aGUgYnJvd3NlciB0byBzZW5kIHVzIGFuIGFzeW5jIHJlc2l6ZSBldmVudCBtZWFucyB3ZSBtYXkgbm90IGJlXG4gKiBpbiB0aGUgY29ycmVjdCBzdGF0ZSB5ZXQgd2hlbiB0aGUgbmV4dCBlc2NhcGUgc2VxdWVuY2UgaGl0cy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gcm93Q291bnQgVGhlIG51bWJlciBvZiByb3dzLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUucmVhbGl6ZUhlaWdodF8gPSBmdW5jdGlvbihyb3dDb3VudCkge1xuICBpZiAocm93Q291bnQgPD0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHQgdG8gcmVhbGl6ZSBiYWQgaGVpZ2h0OiAnICsgcm93Q291bnQpO1xuXG4gIHZhciBkZWx0YVJvd3MgPSByb3dDb3VudCAtIHRoaXMuc2NyZWVuXy5nZXRIZWlnaHQoKTtcblxuICB0aGlzLnNjcmVlblNpemUuaGVpZ2h0ID0gcm93Q291bnQ7XG5cbiAgdmFyIGN1cnNvciA9IHRoaXMuc2F2ZUN1cnNvcigpO1xuXG4gIGlmIChkZWx0YVJvd3MgPCAwKSB7XG4gICAgLy8gU2NyZWVuIGdvdCBzbWFsbGVyLlxuICAgIGRlbHRhUm93cyAqPSAtMTtcbiAgICB3aGlsZSAoZGVsdGFSb3dzKSB7XG4gICAgICB2YXIgbGFzdFJvdyA9IHRoaXMuZ2V0Um93Q291bnQoKSAtIDE7XG4gICAgICBpZiAobGFzdFJvdyAtIHRoaXMuc2Nyb2xsYmFja1Jvd3NfLmxlbmd0aCA9PSBjdXJzb3Iucm93KSBicmVhaztcblxuICAgICAgaWYgKHRoaXMuZ2V0Um93VGV4dChsYXN0Um93KSkgYnJlYWs7XG5cbiAgICAgIHRoaXMuc2NyZWVuXy5wb3BSb3coKTtcbiAgICAgIGRlbHRhUm93cy0tO1xuICAgIH1cblxuICAgIHZhciBhcnkgPSB0aGlzLnNjcmVlbl8uc2hpZnRSb3dzKGRlbHRhUm93cyk7XG4gICAgdGhpcy5zY3JvbGxiYWNrUm93c18ucHVzaC5hcHBseSh0aGlzLnNjcm9sbGJhY2tSb3dzXywgYXJ5KTtcblxuICAgIC8vIFdlIGp1c3QgcmVtb3ZlZCByb3dzIGZyb20gdGhlIHRvcCBvZiB0aGUgc2NyZWVuLCB3ZSBuZWVkIHRvIHVwZGF0ZVxuICAgIC8vIHRoZSBjdXJzb3IgdG8gbWF0Y2guXG4gICAgY3Vyc29yLnJvdyA9IE1hdGgubWF4KGN1cnNvci5yb3cgLSBkZWx0YVJvd3MsIDApO1xuICB9IGVsc2UgaWYgKGRlbHRhUm93cyA+IDApIHtcbiAgICAvLyBTY3JlZW4gZ290IGxhcmdlci5cblxuICAgIGlmIChkZWx0YVJvd3MgPD0gdGhpcy5zY3JvbGxiYWNrUm93c18ubGVuZ3RoKSB7XG4gICAgICB2YXIgc2Nyb2xsYmFja0NvdW50ID0gTWF0aC5taW4oZGVsdGFSb3dzLCB0aGlzLnNjcm9sbGJhY2tSb3dzXy5sZW5ndGgpO1xuICAgICAgdmFyIHJvd3MgPSB0aGlzLnNjcm9sbGJhY2tSb3dzXy5zcGxpY2UoXG4gICAgICAgIHRoaXMuc2Nyb2xsYmFja1Jvd3NfLmxlbmd0aCAtIHNjcm9sbGJhY2tDb3VudCxcbiAgICAgICAgc2Nyb2xsYmFja0NvdW50LFxuICAgICAgKTtcbiAgICAgIHRoaXMuc2NyZWVuXy51bnNoaWZ0Um93cyhyb3dzKTtcbiAgICAgIGRlbHRhUm93cyAtPSBzY3JvbGxiYWNrQ291bnQ7XG4gICAgICBjdXJzb3Iucm93ICs9IHNjcm9sbGJhY2tDb3VudDtcbiAgICB9XG5cbiAgICBpZiAoZGVsdGFSb3dzKSB0aGlzLmFwcGVuZFJvd3NfKGRlbHRhUm93cyk7XG4gIH1cblxuICB0aGlzLnNldFZUU2Nyb2xsUmVnaW9uKG51bGwsIG51bGwpO1xuICB0aGlzLnJlc3RvcmVDdXJzb3IoY3Vyc29yKTtcbn07XG5cbi8qKlxuICogU2Nyb2xsIHRoZSB0ZXJtaW5hbCB0byB0aGUgdG9wIG9mIHRoZSBzY3JvbGxiYWNrIGJ1ZmZlci5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNjcm9sbEhvbWUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zY3JvbGxQb3J0Xy5zY3JvbGxSb3dUb1RvcCgwKTtcbn07XG5cbi8qKlxuICogU2Nyb2xsIHRoZSB0ZXJtaW5hbCB0byB0aGUgZW5kLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2Nyb2xsRW5kID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2Nyb2xsUG9ydF8uc2Nyb2xsUm93VG9Cb3R0b20odGhpcy5nZXRSb3dDb3VudCgpKTtcbn07XG5cbi8qKlxuICogU2Nyb2xsIHRoZSB0ZXJtaW5hbCBvbmUgcGFnZSB1cCAobWludXMgb25lIGxpbmUpIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50XG4gKiBwb3NpdGlvbi5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNjcm9sbFBhZ2VVcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNjcm9sbFBvcnRfLnNjcm9sbFBhZ2VVcCgpO1xufTtcblxuLyoqXG4gKiBTY3JvbGwgdGhlIHRlcm1pbmFsIG9uZSBwYWdlIGRvd24gKG1pbnVzIG9uZSBsaW5lKSByZWxhdGl2ZSB0byB0aGUgY3VycmVudFxuICogcG9zaXRpb24uXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zY3JvbGxQYWdlRG93biA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNjcm9sbFBvcnRfLnNjcm9sbFBhZ2VEb3duKCk7XG59O1xuXG4vKipcbiAqIFNjcm9sbCB0aGUgdGVybWluYWwgb25lIGxpbmUgdXAgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zY3JvbGxMaW5lVXAgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGkgPSB0aGlzLnNjcm9sbFBvcnRfLmdldFRvcFJvd0luZGV4KCk7XG4gIHRoaXMuc2Nyb2xsUG9ydF8uc2Nyb2xsUm93VG9Ub3AoaSAtIDEpO1xufTtcblxuLyoqXG4gKiBTY3JvbGwgdGhlIHRlcm1pbmFsIG9uZSBsaW5lIGRvd24gcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zY3JvbGxMaW5lRG93biA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaSA9IHRoaXMuc2Nyb2xsUG9ydF8uZ2V0VG9wUm93SW5kZXgoKTtcbiAgdGhpcy5zY3JvbGxQb3J0Xy5zY3JvbGxSb3dUb1RvcChpICsgMSk7XG59O1xuXG4vKipcbiAqIENsZWFyIHByaW1hcnkgc2NyZWVuLCBzZWNvbmRhcnkgc2NyZWVuLCBhbmQgdGhlIHNjcm9sbGJhY2sgYnVmZmVyLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUud2lwZUNvbnRlbnRzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2xlYXJIb21lKHRoaXMucHJpbWFyeVNjcmVlbl8pO1xuICB0aGlzLmNsZWFySG9tZSh0aGlzLmFsdGVybmF0ZVNjcmVlbl8pO1xuXG4gIHRoaXMuY2xlYXJTY3JvbGxiYWNrKCk7XG59O1xuXG4vKipcbiAqIENsZWFyIHNjcm9sbGJhY2sgYnVmZmVyLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuY2xlYXJTY3JvbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIE1vdmUgdG8gdGhlIGVuZCBvZiB0aGUgYnVmZmVyIGluIGNhc2UgdGhlIHNjcmVlbiB3YXMgc2Nyb2xsZWQgYmFjay5cbiAgLy8gV2UncmUgZ29pbmcgdG8gdGhyb3cgaXQgYXdheSB3aGljaCB3b3VsZCBsZWF2ZSB0aGUgZGlzcGxheSBpbnZhbGlkLlxuICB0aGlzLnNjcm9sbEVuZCgpO1xuXG4gIHRoaXMuc2Nyb2xsYmFja1Jvd3NfLmxlbmd0aCA9IDA7XG4gIHRoaXMuc2Nyb2xsUG9ydF8ucmVzZXRDYWNoZSgpO1xuXG4gIFt0aGlzLnByaW1hcnlTY3JlZW5fLCB0aGlzLmFsdGVybmF0ZVNjcmVlbl9dLmZvckVhY2goc2NyZWVuID0+IHtcbiAgICBjb25zdCBib3R0b20gPSBzY3JlZW4uZ2V0SGVpZ2h0KCk7XG4gICAgdGhpcy5yZW51bWJlclJvd3NfKDAsIGJvdHRvbSwgc2NyZWVuKTtcbiAgfSk7XG5cbiAgdGhpcy5zeW5jQ3Vyc29yUG9zaXRpb25fKCk7XG4gIHRoaXMuc2Nyb2xsUG9ydF8uaW52YWxpZGF0ZSgpO1xufTtcblxuLyoqXG4gKiBGdWxsIHRlcm1pbmFsIHJlc2V0LlxuICpcbiAqIFBlcmZvcm0gYSBmdWxsIHJlc2V0IHRvIHRoZSBkZWZhdWx0IHZhbHVlcyBsaXN0ZWQgaW5cbiAqIGh0dHBzOi8vdnQxMDAubmV0L2RvY3MvdnQ1MTAtcm0vUklTLmh0bWxcbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudnQucmVzZXQoKTtcblxuICB0aGlzLmNsZWFyQWxsVGFiU3RvcHMoKTtcbiAgdGhpcy5zZXREZWZhdWx0VGFiU3RvcHMoKTtcblxuICBjb25zdCByZXNldFNjcmVlbiA9IHNjcmVlbiA9PiB7XG4gICAgLy8gV2Ugd2FudCB0byBtYWtlIHN1cmUgdG8gcmVzZXQgdGhlIGF0dHJpYnV0ZXMgYmVmb3JlIHdlIGNsZWFyIHRoZSBzY3JlZW4uXG4gICAgLy8gVGhlIGF0dHJpYnV0ZXMgbWlnaHQgYmUgdXNlZCB0byBpbml0aWFsaXplIGRlZmF1bHQvZW1wdHkgcm93cy5cbiAgICBzY3JlZW4udGV4dEF0dHJpYnV0ZXMucmVzZXQoKTtcbiAgICBzY3JlZW4udGV4dEF0dHJpYnV0ZXMucmVzZXRDb2xvclBhbGV0dGUoKTtcbiAgICB0aGlzLmNsZWFySG9tZShzY3JlZW4pO1xuICAgIHNjcmVlbi5zYXZlQ3Vyc29yQW5kU3RhdGUodGhpcy52dCk7XG4gIH07XG4gIHJlc2V0U2NyZWVuKHRoaXMucHJpbWFyeVNjcmVlbl8pO1xuICByZXNldFNjcmVlbih0aGlzLmFsdGVybmF0ZVNjcmVlbl8pO1xuXG4gIC8vIFJlc2V0IHRlcm1pbmFsIG9wdGlvbnMgdG8gdGhlaXIgZGVmYXVsdCB2YWx1ZXMuXG4gIHRoaXMub3B0aW9uc18gPSBuZXcgaHRlcm0uT3B0aW9ucygpO1xuICB0aGlzLnNldEN1cnNvckJsaW5rKCEhdGhpcy5wcmVmc18uZ2V0KCdjdXJzb3ItYmxpbmsnKSk7XG5cbiAgdGhpcy5zZXRWVFNjcm9sbFJlZ2lvbihudWxsLCBudWxsKTtcblxuICB0aGlzLnNldEN1cnNvclZpc2libGUodHJ1ZSk7XG59O1xuXG4vKipcbiAqIFNvZnQgdGVybWluYWwgcmVzZXQuXG4gKlxuICogUGVyZm9ybSBhIHNvZnQgcmVzZXQgdG8gdGhlIGRlZmF1bHQgdmFsdWVzIGxpc3RlZCBpblxuICogaHR0cDovL3d3dy52dDEwMC5uZXQvZG9jcy92dDUxMC1ybS9ERUNTVFIjVDUtOVxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc29mdFJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudnQucmVzZXQoKTtcblxuICAvLyBSZXNldCB0ZXJtaW5hbCBvcHRpb25zIHRvIHRoZWlyIGRlZmF1bHQgdmFsdWVzLlxuICB0aGlzLm9wdGlvbnNfID0gbmV3IGh0ZXJtLk9wdGlvbnMoKTtcblxuICAvLyBXZSBzaG93IHRoZSBjdXJzb3Igb24gc29mdCByZXNldCBidXQgZG8gbm90IGFsdGVyIHRoZSBibGluayBzdGF0ZS5cbiAgdGhpcy5vcHRpb25zXy5jdXJzb3JCbGluayA9ICEhdGhpcy50aW1lb3V0c18uY3Vyc29yQmxpbms7XG5cbiAgY29uc3QgcmVzZXRTY3JlZW4gPSBzY3JlZW4gPT4ge1xuICAgIC8vIFh0ZXJtIGFsc28gcmVzZXRzIHRoZSBjb2xvciBwYWxldHRlIG9uIHNvZnQgcmVzZXQsIGV2ZW4gdGhvdWdoIGl0IGRvZXNuJ3RcbiAgICAvLyBzZWVtIHRvIGJlIGRvY3VtZW50ZWQgYW55d2hlcmUuXG4gICAgc2NyZWVuLnRleHRBdHRyaWJ1dGVzLnJlc2V0KCk7XG4gICAgc2NyZWVuLnRleHRBdHRyaWJ1dGVzLnJlc2V0Q29sb3JQYWxldHRlKCk7XG4gICAgc2NyZWVuLnNhdmVDdXJzb3JBbmRTdGF0ZSh0aGlzLnZ0KTtcbiAgfTtcbiAgcmVzZXRTY3JlZW4odGhpcy5wcmltYXJ5U2NyZWVuXyk7XG4gIHJlc2V0U2NyZWVuKHRoaXMuYWx0ZXJuYXRlU2NyZWVuXyk7XG5cbiAgLy8gVGhlIHh0ZXJtIG1hbiBwYWdlIGV4cGxpY2l0bHkgc2F5cyB0aGlzIHdpbGwgaGFwcGVuIG9uIHNvZnQgcmVzZXQuXG4gIHRoaXMuc2V0VlRTY3JvbGxSZWdpb24obnVsbCwgbnVsbCk7XG5cbiAgLy8gWHRlcm0gYWxzbyBzaG93cyB0aGUgY3Vyc29yIG9uIHNvZnQgcmVzZXQsIGJ1dCBkb2VzIG5vdCBhbHRlciB0aGUgYmxpbmtcbiAgLy8gc3RhdGUuXG4gIHRoaXMuc2V0Q3Vyc29yVmlzaWJsZSh0cnVlKTtcbn07XG5cbi8qKlxuICogTW92ZSB0aGUgY3Vyc29yIGZvcndhcmQgdG8gdGhlIG5leHQgdGFiIHN0b3AsIG9yIHRvIHRoZSBsYXN0IGNvbHVtblxuICogaWYgbm8gbW9yZSB0YWIgc3RvcHMgYXJlIHNldC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmZvcndhcmRUYWJTdG9wID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb2x1bW4gPSB0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24uY29sdW1uO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50YWJTdG9wc18ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodGhpcy50YWJTdG9wc19baV0gPiBjb2x1bW4pIHtcbiAgICAgIHRoaXMuc2V0Q3Vyc29yQ29sdW1uKHRoaXMudGFiU3RvcHNfW2ldKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICAvLyB4dGVybSBkb2VzIG5vdCBjbGVhciB0aGUgb3ZlcmZsb3cgZmxhZyBvbiBIVCBvciBDSFQuXG4gIHZhciBvdmVyZmxvdyA9IHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5vdmVyZmxvdztcbiAgdGhpcy5zZXRDdXJzb3JDb2x1bW4odGhpcy5zY3JlZW5TaXplLndpZHRoIC0gMSk7XG4gIHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5vdmVyZmxvdyA9IG92ZXJmbG93O1xufTtcblxuLyoqXG4gKiBNb3ZlIHRoZSBjdXJzb3IgYmFja3dhcmQgdG8gdGhlIHByZXZpb3VzIHRhYiBzdG9wLCBvciB0byB0aGUgZmlyc3QgY29sdW1uXG4gKiBpZiBubyBwcmV2aW91cyB0YWIgc3RvcHMgYXJlIHNldC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmJhY2t3YXJkVGFiU3RvcCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29sdW1uID0gdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLmNvbHVtbjtcblxuICBmb3IgKHZhciBpID0gdGhpcy50YWJTdG9wc18ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAodGhpcy50YWJTdG9wc19baV0gPCBjb2x1bW4pIHtcbiAgICAgIHRoaXMuc2V0Q3Vyc29yQ29sdW1uKHRoaXMudGFiU3RvcHNfW2ldKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICB0aGlzLnNldEN1cnNvckNvbHVtbigxKTtcbn07XG5cbi8qKlxuICogU2V0IGEgdGFiIHN0b3AgYXQgdGhlIGdpdmVuIGNvbHVtbi5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGNvbHVtbiBaZXJvIGJhc2VkIGNvbHVtbi5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNldFRhYlN0b3AgPSBmdW5jdGlvbihjb2x1bW4pIHtcbiAgZm9yICh2YXIgaSA9IHRoaXMudGFiU3RvcHNfLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKHRoaXMudGFiU3RvcHNfW2ldID09IGNvbHVtbikgcmV0dXJuO1xuXG4gICAgaWYgKHRoaXMudGFiU3RvcHNfW2ldIDwgY29sdW1uKSB7XG4gICAgICB0aGlzLnRhYlN0b3BzXy5zcGxpY2UoaSArIDEsIDAsIGNvbHVtbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgdGhpcy50YWJTdG9wc18uc3BsaWNlKDAsIDAsIGNvbHVtbik7XG59O1xuXG4vKipcbiAqIENsZWFyIHRoZSB0YWIgc3RvcCBhdCB0aGUgY3VycmVudCBjdXJzb3IgcG9zaXRpb24uXG4gKlxuICogTm8gZWZmZWN0IGlmIHRoZXJlIGlzIG5vIHRhYiBzdG9wIGF0IHRoZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvbi5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmNsZWFyVGFiU3RvcEF0Q3Vyc29yID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb2x1bW4gPSB0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24uY29sdW1uO1xuXG4gIHZhciBpID0gdGhpcy50YWJTdG9wc18uaW5kZXhPZihjb2x1bW4pO1xuICBpZiAoaSA9PSAtMSkgcmV0dXJuO1xuXG4gIHRoaXMudGFiU3RvcHNfLnNwbGljZShpLCAxKTtcbn07XG5cbi8qKlxuICogQ2xlYXIgYWxsIHRhYiBzdG9wcy5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmNsZWFyQWxsVGFiU3RvcHMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy50YWJTdG9wc18ubGVuZ3RoID0gMDtcbiAgdGhpcy5kZWZhdWx0VGFiU3RvcHMgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0IHVwIHRoZSBkZWZhdWx0IHRhYiBzdG9wcywgc3RhcnRpbmcgZnJvbSBhIGdpdmVuIGNvbHVtbi5cbiAqXG4gKiBUaGlzIHNldHMgYSB0YWJzdG9wIGV2ZXJ5IChjb2x1bW4gJSB0aGlzLnRhYldpZHRoKSBjb2x1bW4sIHN0YXJ0aW5nXG4gKiBmcm9tIHRoZSBzcGVjaWZpZWQgY29sdW1uLCBvciAwIGlmIG5vIGNvbHVtbiBpcyBwcm92aWRlZC4gIEl0IGFsc28gZmxhZ3NcbiAqIGZ1dHVyZSByZXNpemVzIHRvIHNldCB0aGVtIHVwLlxuICpcbiAqIFRoaXMgZG9lcyBub3QgY2xlYXIgdGhlIGV4aXN0aW5nIHRhYiBzdG9wcyBmaXJzdCwgdXNlIGNsZWFyQWxsVGFiU3RvcHNcbiAqIGZvciB0aGF0LlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gb3B0X3N0YXJ0IE9wdGlvbmFsIHN0YXJ0aW5nIHplcm8gYmFzZWQgc3RhcnRpbmcgY29sdW1uLCB1c2VmdWxcbiAqICAgICBmb3IgZmlsbGluZyBvdXQgbWlzc2luZyB0YWIgc3RvcHMgd2hlbiB0aGUgdGVybWluYWwgaXMgcmVzaXplZC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNldERlZmF1bHRUYWJTdG9wcyA9IGZ1bmN0aW9uKG9wdF9zdGFydCkge1xuICB2YXIgc3RhcnQgPSBvcHRfc3RhcnQgfHwgMDtcbiAgdmFyIHcgPSB0aGlzLnRhYldpZHRoO1xuICAvLyBSb3VuZCBzdGFydCB1cCB0byBhIGRlZmF1bHQgdGFiIHN0b3AuXG4gIHN0YXJ0ID0gc3RhcnQgLSAxIC0gKChzdGFydCAtIDEpICUgdykgKyB3O1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCB0aGlzLnNjcmVlblNpemUud2lkdGg7IGkgKz0gdykge1xuICAgIHRoaXMuc2V0VGFiU3RvcChpKTtcbiAgfVxuXG4gIHRoaXMuZGVmYXVsdFRhYlN0b3BzID0gdHJ1ZTtcbn07XG5cbi8qKlxuICogSW50ZXJwcmV0IGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycy5cbiAqXG4gKiBJbmNvbXBsZXRlIGVzY2FwZSBzZXF1ZW5jZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSBuZXh0IGNhbGwuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIHRvIGludGVycHJldCBvciBwYXNzIHRocm91Z2guXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5pbnRlcnByZXQgPSBmdW5jdGlvbihzdHIpIHtcbiAgdGhpcy5zY2hlZHVsZVN5bmNDdXJzb3JQb3NpdGlvbl8oKTtcbiAgdGhpcy52dC5pbnRlcnByZXQoc3RyKTtcbn07XG5cbi8qKlxuICogVGFrZSBvdmVyIHRoZSBnaXZlbiBESVYgZm9yIHVzZSBhcyB0aGUgdGVybWluYWwgZGlzcGxheS5cbiAqXG4gKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBkaXYgVGhlIGRpdiB0byB1c2UgYXMgdGhlIHRlcm1pbmFsIGRpc3BsYXkuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5kZWNvcmF0ZSA9IGZ1bmN0aW9uKGRpdikge1xuICBjb25zdCBjaGFyc2V0ID0gZGl2Lm93bmVyRG9jdW1lbnQuY2hhcmFjdGVyU2V0LnRvTG93ZXJDYXNlKCk7XG4gIGlmIChjaGFyc2V0ICE9ICd1dGYtOCcpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgRG9jdW1lbnQgZW5jb2Rpbmcgc2hvdWxkIGJlIHNldCB0byB1dGYtOCwgbm90IFwiJHtjaGFyc2V0fVwiO2AgK1xuICAgICAgICBgIEFkZCA8bWV0YSBjaGFyc2V0PSd1dGYtOCcvPiB0byB5b3VyIEhUTUwgPGhlYWQ+IHRvIGZpeC5gLFxuICAgICk7XG4gIH1cblxuICB0aGlzLmRpdl8gPSBkaXY7XG5cbiAgdGhpcy5hY2Nlc3NpYmlsaXR5UmVhZGVyXyA9IG5ldyBodGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyKGRpdik7XG5cbiAgdGhpcy5zY3JvbGxQb3J0Xy5kZWNvcmF0ZShkaXYpO1xuICB0aGlzLnNjcm9sbFBvcnRfLnNldEJhY2tncm91bmRJbWFnZSh0aGlzLnByZWZzXy5nZXQoJ2JhY2tncm91bmQtaW1hZ2UnKSk7XG4gIHRoaXMuc2Nyb2xsUG9ydF8uc2V0QmFja2dyb3VuZFNpemUodGhpcy5wcmVmc18uZ2V0KCdiYWNrZ3JvdW5kLXNpemUnKSk7XG4gIHRoaXMuc2Nyb2xsUG9ydF8uc2V0QmFja2dyb3VuZFBvc2l0aW9uKFxuICAgIHRoaXMucHJlZnNfLmdldCgnYmFja2dyb3VuZC1wb3NpdGlvbicpLFxuICApO1xuICB0aGlzLnNjcm9sbFBvcnRfLnNldFVzZXJDc3NVcmwodGhpcy5wcmVmc18uZ2V0KCd1c2VyLWNzcycpKTtcbiAgdGhpcy5zY3JvbGxQb3J0Xy5zZXRVc2VyQ3NzVGV4dCh0aGlzLnByZWZzXy5nZXQoJ3VzZXItY3NzLXRleHQnKSk7XG4gIHRoaXMuc2Nyb2xsUG9ydF8uc2V0QWNjZXNzaWJpbGl0eVJlYWRlcih0aGlzLmFjY2Vzc2liaWxpdHlSZWFkZXJfKTtcblxuICB0aGlzLmRpdl8uZm9jdXMgPSB0aGlzLmZvY3VzLmJpbmQodGhpcyk7XG5cbiAgdGhpcy5zZXRGb250U2l6ZSh0aGlzLnByZWZzXy5nZXQoJ2ZvbnQtc2l6ZScpKTtcbiAgdGhpcy5zeW5jRm9udEZhbWlseSgpO1xuXG4gIHRoaXMuc2V0U2Nyb2xsYmFyVmlzaWJsZSh0aGlzLnByZWZzXy5nZXQoJ3Njcm9sbGJhci12aXNpYmxlJykpO1xuICB0aGlzLnNldFNjcm9sbFdoZWVsTW92ZU11bHRpcGxlcihcbiAgICB0aGlzLnByZWZzXy5nZXQoJ3Njcm9sbC13aGVlbC1tb3ZlLW11bHRpcGxpZXInKSxcbiAgKTtcblxuICB0aGlzLmRvY3VtZW50XyA9IHRoaXMuc2Nyb2xsUG9ydF8uZ2V0RG9jdW1lbnQoKTtcbiAgdGhpcy5hY2Nlc3NpYmlsaXR5UmVhZGVyXy5kZWNvcmF0ZSh0aGlzLmRvY3VtZW50Xyk7XG5cbiAgdGhpcy5kb2N1bWVudF8uYm9keS5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuICB0aGlzLmNvbnRleHRNZW51LnNldERvY3VtZW50KHRoaXMuZG9jdW1lbnRfKTtcblxuICB2YXIgb25Nb3VzZSA9IHRoaXMub25Nb3VzZV8uYmluZCh0aGlzKTtcbiAgdmFyIHNjcmVlbk5vZGUgPSB0aGlzLnNjcm9sbFBvcnRfLmdldFNjcmVlbk5vZGUoKTtcbiAgc2NyZWVuTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbk1vdXNlKTtcbiAgc2NyZWVuTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Nb3VzZSk7XG4gIHNjcmVlbk5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZSk7XG4gIHRoaXMuc2Nyb2xsUG9ydF8ub25TY3JvbGxXaGVlbCA9IG9uTW91c2U7XG5cbiAgc2NyZWVuTm9kZS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleWJvYXJkQWN0aXZpdHlfLmJpbmQodGhpcykpO1xuXG4gIHNjcmVlbk5vZGUuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLm9uRm9jdXNDaGFuZ2VfLmJpbmQodGhpcywgdHJ1ZSkpO1xuICAvLyBMaXN0ZW4gZm9yIG1vdXNlZG93biBldmVudHMgb24gdGhlIHNjcmVlbk5vZGUgYXMgaW4gRkYgdGhlIGZvY3VzXG4gIC8vIGV2ZW50cyBkb24ndCBidWJibGUuXG4gIHNjcmVlbk5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAnbW91c2Vkb3duJyxcbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5vbkZvY3VzQ2hhbmdlXy5iaW5kKHRoaXMsIHRydWUpKTtcbiAgICB9LmJpbmQodGhpcyksXG4gICk7XG5cbiAgc2NyZWVuTm9kZS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5vbkZvY3VzQ2hhbmdlXy5iaW5kKHRoaXMsIGZhbHNlKSk7XG5cbiAgdmFyIHN0eWxlID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUudGV4dENvbnRlbnQgPVxuICAgICcuY3Vyc29yLW5vZGVbZm9jdXM9XCJmYWxzZVwiXSB7JyArXG4gICAgJyAgYm94LXNpemluZzogYm9yZGVyLWJveDsnICtcbiAgICAnICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50OycgK1xuICAgICcgIGJvcmRlci13aWR0aDogMnB4OycgK1xuICAgICcgIGJvcmRlci1zdHlsZTogc29saWQ7JyArXG4gICAgJ30nICtcbiAgICAnbWVudSB7JyArXG4gICAgJyAgbWFyZ2luOiAwOycgK1xuICAgICcgIHBhZGRpbmc6IDA7JyArXG4gICAgJyAgY3Vyc29yOiB2YXIoLS1odGVybS1tb3VzZS1jdXJzb3ItcG9pbnRlcik7JyArXG4gICAgJ30nICtcbiAgICAnbWVudWl0ZW0geycgK1xuICAgICcgIHdoaXRlLXNwYWNlOiBub3dyYXA7JyArXG4gICAgJyAgYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZDsnICtcbiAgICAnICBkaXNwbGF5OiBibG9jazsnICtcbiAgICAnICBwYWRkaW5nOiAwLjNlbSAwLjNlbSAwIDAuM2VtOycgK1xuICAgICd9JyArXG4gICAgJ21lbnVpdGVtLnNlcGFyYXRvciB7JyArXG4gICAgJyAgYm9yZGVyLWJvdHRvbTogbm9uZTsnICtcbiAgICAnICBoZWlnaHQ6IDAuNWVtOycgK1xuICAgICcgIHBhZGRpbmc6IDA7JyArXG4gICAgJ30nICtcbiAgICAnbWVudWl0ZW06aG92ZXIgeycgK1xuICAgICcgIGNvbG9yOiB2YXIoLS1odGVybS1jdXJzb3ItY29sb3IpOycgK1xuICAgICd9JyArXG4gICAgJy53Yy1ub2RlIHsnICtcbiAgICAnICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7JyArXG4gICAgJyAgdGV4dC1hbGlnbjogY2VudGVyOycgK1xuICAgICcgIHdpZHRoOiBjYWxjKHZhcigtLWh0ZXJtLWNoYXJzaXplLXdpZHRoKSAqIDIpOycgK1xuICAgICcgIGxpbmUtaGVpZ2h0OiB2YXIoLS1odGVybS1jaGFyc2l6ZS1oZWlnaHQpOycgK1xuICAgICd9JyArXG4gICAgJzpyb290IHsnICtcbiAgICAnICAtLWh0ZXJtLWNoYXJzaXplLXdpZHRoOiAnICtcbiAgICB0aGlzLnNjcm9sbFBvcnRfLmNoYXJhY3RlclNpemUud2lkdGggK1xuICAgICdweDsnICtcbiAgICAnICAtLWh0ZXJtLWNoYXJzaXplLWhlaWdodDogJyArXG4gICAgdGhpcy5zY3JvbGxQb3J0Xy5jaGFyYWN0ZXJTaXplLmhlaWdodCArXG4gICAgJ3B4OycgK1xuICAgIC8vIERlZmF1bHQgcG9zaXRpb24gaGlkZXMgdGhlIGN1cnNvciBmb3Igd2hlbiB0aGUgd2luZG93IGlzIGluaXRpYWxpemluZy5cbiAgICAnICAtLWh0ZXJtLWN1cnNvci1vZmZzZXQtY29sOiAtMTsnICtcbiAgICAnICAtLWh0ZXJtLWN1cnNvci1vZmZzZXQtcm93OiAtMTsnICtcbiAgICAnICAtLWh0ZXJtLWJsaW5rLW5vZGUtZHVyYXRpb246IDAuN3M7JyArXG4gICAgJyAgLS1odGVybS1tb3VzZS1jdXJzb3ItdGV4dDogdGV4dDsnICtcbiAgICAnICAtLWh0ZXJtLW1vdXNlLWN1cnNvci1wb2ludGVyOiBkZWZhdWx0OycgK1xuICAgICcgIC0taHRlcm0tbW91c2UtY3Vyc29yLXN0eWxlOiB2YXIoLS1odGVybS1tb3VzZS1jdXJzb3ItdGV4dCk7JyArXG4gICAgJ30nICtcbiAgICAnLnVyaS1ub2RlOmhvdmVyIHsnICtcbiAgICAnICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsnICtcbiAgICAnICBjdXJzb3I6IHZhcigtLWh0ZXJtLW1vdXNlLWN1cnNvci1wb2ludGVyKSwgcG9pbnRlcjsnICtcbiAgICAnfScgK1xuICAgICdAa2V5ZnJhbWVzIGJsaW5rIHsnICtcbiAgICAnICBmcm9tIHsgb3BhY2l0eTogMS4wOyB9JyArXG4gICAgJyAgdG8geyBvcGFjaXR5OiAwLjA7IH0nICtcbiAgICAnfScgK1xuICAgICcuYmxpbmstbm9kZSB7JyArXG4gICAgJyAgYW5pbWF0aW9uLW5hbWU6IGJsaW5rOycgK1xuICAgICcgIGFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0taHRlcm0tYmxpbmstbm9kZS1kdXJhdGlvbik7JyArXG4gICAgJyAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7JyArXG4gICAgJyAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7JyArXG4gICAgJyAgYW5pbWF0aW9uLWRpcmVjdGlvbjogYWx0ZXJuYXRlOycgK1xuICAgICd9JztcbiAgLy8gSW5zZXJ0IHRoaXMgc3RvY2sgc3R5bGUgYXMgdGhlIGZpcnN0IG5vZGUgc28gdGhhdCBhbnkgdXNlciBzdHlsZXMgd2lsbFxuICAvLyBvdmVycmlkZSB3L291dCBoYXZpbmcgdG8gdXNlICFpbXBvcnRhbnQgZXZlcnl3aGVyZS4gIFRoZSBydWxlcyBhYm92ZSBtaXhcbiAgLy8gcnVudGltZSB2YXJpYWJsZXMgd2l0aCBkZWZhdWx0IG9uZXMgZGVzaWduZWQgdG8gYmUgb3ZlcnJpZGRlbiBieSB0aGUgdXNlcixcbiAgLy8gYnV0IHdlIGNhbiB3YWl0IGZvciBhIGNvbmNyZXRlIGNhc2UgZnJvbSB0aGUgdXNlcnMgdG8gZGV0ZXJtaW5lIHRoZSBiZXN0XG4gIC8vIHdheSB0byBzcGxpdCB0aGUgc2hlZXQgdXAgdG8gYmVmb3JlICYgYWZ0ZXIgdGhlIHVzZXItY3NzIHNldHRpbmdzLlxuICB0aGlzLmRvY3VtZW50Xy5oZWFkLmluc2VydEJlZm9yZShzdHlsZSwgdGhpcy5kb2N1bWVudF8uaGVhZC5maXJzdENoaWxkKTtcblxuICB0aGlzLmN1cnNvck5vZGVfID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRoaXMuY3Vyc29yTm9kZV8uaWQgPSAnaHRlcm06dGVybWluYWwtY3Vyc29yJztcbiAgdGhpcy5jdXJzb3JOb2RlXy5jbGFzc05hbWUgPSAnY3Vyc29yLW5vZGUnO1xuICB0aGlzLmN1cnNvck5vZGVfLnN0eWxlLmNzc1RleHQgPVxuICAgICdwb3NpdGlvbjogYWJzb2x1dGU7JyArXG4gICAgJ2xlZnQ6IGNhbGModmFyKC0taHRlcm0tY2hhcnNpemUtd2lkdGgpICogdmFyKC0taHRlcm0tY3Vyc29yLW9mZnNldC1jb2wpKTsnICtcbiAgICAndG9wOiBjYWxjKHZhcigtLWh0ZXJtLWNoYXJzaXplLWhlaWdodCkgKiB2YXIoLS1odGVybS1jdXJzb3Itb2Zmc2V0LXJvdykpOycgK1xuICAgICdkaXNwbGF5OiAnICtcbiAgICAodGhpcy5vcHRpb25zXy5jdXJzb3JWaXNpYmxlID8gJycgOiAnbm9uZScpICtcbiAgICAnOycgK1xuICAgICd3aWR0aDogdmFyKC0taHRlcm0tY2hhcnNpemUtd2lkdGgpOycgK1xuICAgICdoZWlnaHQ6IHZhcigtLWh0ZXJtLWNoYXJzaXplLWhlaWdodCk7JyArXG4gICAgJ2JhY2tncm91bmQtY29sb3I6IHZhcigtLWh0ZXJtLWN1cnNvci1jb2xvcik7JyArXG4gICAgJ2JvcmRlci1jb2xvcjogdmFyKC0taHRlcm0tY3Vyc29yLWNvbG9yKTsnICtcbiAgICAnLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5LCBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGxpbmVhcjsnICtcbiAgICAnLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5LCBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGxpbmVhcjsnO1xuXG4gIHRoaXMuc2V0Q3Vyc29yQ29sb3IoKTtcbiAgdGhpcy5zZXRDdXJzb3JCbGluayghIXRoaXMucHJlZnNfLmdldCgnY3Vyc29yLWJsaW5rJykpO1xuICB0aGlzLnJlc3R5bGVDdXJzb3JfKCk7XG5cbiAgdGhpcy5kb2N1bWVudF8uYm9keS5hcHBlbmRDaGlsZCh0aGlzLmN1cnNvck5vZGVfKTtcblxuICAvLyBXaGVuICdlbmFibGVNb3VzZURyYWdTY3JvbGwnIGlzIG9mZiB3ZSByZXBvc2l0aW9uIHRoaXMgZWxlbWVudCBkaXJlY3RseVxuICAvLyB1bmRlciB0aGUgbW91c2UgY3Vyc29yIGFmdGVyIGEgY2xpY2suICBUaGlzIG1ha2VzIENocm9tZSBhc3NvY2lhdGVcbiAgLy8gc3Vic2VxdWVudCBtb3VzZW1vdmUgZXZlbnRzIHdpdGggdGhlIHNjcm9sbC1ibG9ja2VyLiAgU2luY2UgdGhlXG4gIC8vIHNjcm9sbC1ibG9ja2VyIGlzIGEgcGVlciAobm90IGEgY2hpbGQpIG9mIHRoZSBzY3JvbGxwb3J0LCB0aGUgbW91c2Vtb3ZlXG4gIC8vIGV2ZW50cyBkbyBub3QgY2F1c2UgdGhlIHNjcm9sbHBvcnQgdG8gc2Nyb2xsLlxuICAvL1xuICAvLyBJdCdzIGEgaGFjaywgYnV0IGl0J3MgdGhlIGNsZWFuZXN0IHdheSBJIGNvdWxkIGZpbmQuXG4gIHRoaXMuc2Nyb2xsQmxvY2tlck5vZGVfID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRoaXMuc2Nyb2xsQmxvY2tlck5vZGVfLmlkID0gJ2h0ZXJtOm1vdXNlLWRyYWctc2Nyb2xsLWJsb2NrZXInO1xuICB0aGlzLnNjcm9sbEJsb2NrZXJOb2RlXy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgdGhpcy5zY3JvbGxCbG9ja2VyTm9kZV8uc3R5bGUuY3NzVGV4dCA9XG4gICAgJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsnICtcbiAgICAndG9wOiAtOTlweDsnICtcbiAgICAnZGlzcGxheTogYmxvY2s7JyArXG4gICAgJ3dpZHRoOiAxMHB4OycgK1xuICAgICdoZWlnaHQ6IDEwcHg7JztcbiAgdGhpcy5kb2N1bWVudF8uYm9keS5hcHBlbmRDaGlsZCh0aGlzLnNjcm9sbEJsb2NrZXJOb2RlXyk7XG5cbiAgdGhpcy5zY3JvbGxQb3J0Xy5vblNjcm9sbFdoZWVsID0gb25Nb3VzZTtcbiAgWydtb3VzZWRvd24nLCAnbW91c2V1cCcsICdtb3VzZW1vdmUnLCAnY2xpY2snLCAnZGJsY2xpY2snXS5mb3JFYWNoKFxuICAgIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB0aGlzLnNjcm9sbEJsb2NrZXJOb2RlXy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbk1vdXNlKTtcbiAgICAgIHRoaXMuY3Vyc29yTm9kZV8uYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25Nb3VzZSk7XG4gICAgICB0aGlzLmRvY3VtZW50Xy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbk1vdXNlKTtcbiAgICB9LmJpbmQodGhpcyksXG4gICk7XG5cbiAgdGhpcy5jdXJzb3JOb2RlXy5hZGRFdmVudExpc3RlbmVyKFxuICAgICdtb3VzZWRvd24nLFxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLmZvY3VzLmJpbmQodGhpcykpO1xuICAgIH0uYmluZCh0aGlzKSxcbiAgKTtcblxuICB0aGlzLnNldFJldmVyc2VWaWRlbyhmYWxzZSk7XG5cbiAgdGhpcy5zY3JvbGxQb3J0Xy5mb2N1cygpO1xuICB0aGlzLnNjcm9sbFBvcnRfLnNjaGVkdWxlUmVkcmF3KCk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgSFRNTCBkb2N1bWVudCB0aGF0IGNvbnRhaW5zIHRoZSB0ZXJtaW5hbCBET00gbm9kZXMuXG4gKlxuICogQHJldHVybiB7SFRNTERvY3VtZW50fVxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuZ2V0RG9jdW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZG9jdW1lbnRfO1xufTtcblxuLyoqXG4gKiBGb2N1cyB0aGUgdGVybWluYWwuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNjcm9sbFBvcnRfLmZvY3VzKCk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgSFRNTCBFbGVtZW50IGZvciBhIGdpdmVuIHJvdyBpbmRleC5cbiAqXG4gKiBUaGlzIGlzIGEgbWV0aG9kIGZyb20gdGhlIFJvd1Byb3ZpZGVyIGludGVyZmFjZS4gIFRoZSBTY3JvbGxQb3J0IHVzZXNcbiAqIGl0IHRvIGZldGNoIHJvd3Mgb24gZGVtYW5kIGFzIHRoZXkgYXJlIHNjcm9sbGVkIGludG8gdmlldy5cbiAqXG4gKiBUT0RPKHJnaW5kYSk6IENvbnNpZGVyIHNhdmluZyBzY3JvbGxiYWNrIHJvd3MgYXMgKEhUTUwgc291cmNlLCB0ZXh0IGNvbnRlbnQpXG4gKiBwYWlycyB0byBjb25zZXJ2ZSBtZW1vcnkuXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyfSBpbmRleCBUaGUgemVyby1iYXNlZCByb3cgaW5kZXgsIG1lYXN1cmVkIHJlbGF0aXZlIHRvIHRoZVxuICogICAgIHN0YXJ0IG9mIHRoZSBzY3JvbGxiYWNrIGJ1ZmZlci4gIE9uLXNjcmVlbiByb3dzIHdpbGwgYWx3YXlzIGhhdmUgdGhlXG4gKiAgICAgbGFyZ2VzdCBpbmRpY2VzLlxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9IFRoZSAneC1yb3cnIGVsZW1lbnQgY29udGFpbmluZyBmb3IgdGhlIHJlcXVlc3RlZCByb3cuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5nZXRSb3dOb2RlID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgaWYgKGluZGV4IDwgdGhpcy5zY3JvbGxiYWNrUm93c18ubGVuZ3RoKSByZXR1cm4gdGhpcy5zY3JvbGxiYWNrUm93c19baW5kZXhdO1xuXG4gIHZhciBzY3JlZW5JbmRleCA9IGluZGV4IC0gdGhpcy5zY3JvbGxiYWNrUm93c18ubGVuZ3RoO1xuICByZXR1cm4gdGhpcy5zY3JlZW5fLnJvd3NBcnJheVtzY3JlZW5JbmRleF07XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgdGV4dCBjb250ZW50IGZvciBhIGdpdmVuIHJhbmdlIG9mIHJvd3MuXG4gKlxuICogVGhpcyBpcyBhIG1ldGhvZCBmcm9tIHRoZSBSb3dQcm92aWRlciBpbnRlcmZhY2UuICBUaGUgU2Nyb2xsUG9ydCB1c2VzXG4gKiBpdCB0byBmZXRjaCB0ZXh0IGNvbnRlbnQgb24gZGVtYW5kIHdoZW4gdGhlIHVzZXIgYXR0ZW1wdHMgdG8gY29weSB0aGVpclxuICogc2VsZWN0aW9uIHRvIHRoZSBjbGlwYm9hcmQuXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyfSBzdGFydCBUaGUgemVyby1iYXNlZCByb3cgaW5kZXggdG8gc3RhcnQgZnJvbSwgbWVhc3VyZWRcbiAqICAgICByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhlIHNjcm9sbGJhY2sgYnVmZmVyLiAgT24tc2NyZWVuIHJvd3Mgd2lsbFxuICogICAgIGFsd2F5cyBoYXZlIHRoZSBsYXJnZXN0IGluZGljZXMuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGVuZCBUaGUgemVyby1iYXNlZCByb3cgaW5kZXggdG8gZW5kIG9uLCBtZWFzdXJlZFxuICogICAgIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBvZiB0aGUgc2Nyb2xsYmFjayBidWZmZXIuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgc2luZ2xlIHN0cmluZyBjb250YWluaW5nIHRoZSB0ZXh0IHZhbHVlIG9mIHRoZSByYW5nZSBvZlxuICogICAgIHJvd3MuICBMaW5lcyB3aWxsIGJlIG5ld2xpbmUgZGVsaW1pdGVkLCB3aXRoIG5vIHRyYWlsaW5nIG5ld2xpbmUuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5nZXRSb3dzVGV4dCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGFyeSA9IFtdO1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIHZhciBub2RlID0gdGhpcy5nZXRSb3dOb2RlKGkpO1xuICAgIGFyeS5wdXNoKG5vZGUudGV4dENvbnRlbnQpO1xuICAgIGlmIChpIDwgZW5kIC0gMSAmJiAhbm9kZS5nZXRBdHRyaWJ1dGUoJ2xpbmUtb3ZlcmZsb3cnKSkgYXJ5LnB1c2goJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIGFyeS5qb2luKCcnKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSB0ZXh0IGNvbnRlbnQgZm9yIGEgZ2l2ZW4gcm93LlxuICpcbiAqIFRoaXMgaXMgYSBtZXRob2QgZnJvbSB0aGUgUm93UHJvdmlkZXIgaW50ZXJmYWNlLiAgVGhlIFNjcm9sbFBvcnQgdXNlc1xuICogaXQgdG8gZmV0Y2ggdGV4dCBjb250ZW50IG9uIGRlbWFuZCB3aGVuIHRoZSB1c2VyIGF0dGVtcHRzIHRvIGNvcHkgdGhlaXJcbiAqIHNlbGVjdGlvbiB0byB0aGUgY2xpcGJvYXJkLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gaW5kZXggVGhlIHplcm8tYmFzZWQgcm93IGluZGV4IHRvIHJldHVybiwgbWVhc3VyZWRcbiAqICAgICByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhlIHNjcm9sbGJhY2sgYnVmZmVyLiAgT24tc2NyZWVuIHJvd3Mgd2lsbFxuICogICAgIGFsd2F5cyBoYXZlIHRoZSBsYXJnZXN0IGluZGljZXMuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHRleHQgdmFsdWUgb2YgdGhlIHNlbGVjdGVkIHJvdy5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmdldFJvd1RleHQgPSBmdW5jdGlvbihpbmRleCkge1xuICB2YXIgbm9kZSA9IHRoaXMuZ2V0Um93Tm9kZShpbmRleCk7XG4gIHJldHVybiBub2RlLnRleHRDb250ZW50O1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHRvdGFsIG51bWJlciBvZiByb3dzIGluIHRoZSBhZGRyZXNzYWJsZSBzY3JlZW4gYW5kIGluIHRoZVxuICogc2Nyb2xsYmFjayBidWZmZXIgb2YgdGhpcyB0ZXJtaW5hbC5cbiAqXG4gKiBUaGlzIGlzIGEgbWV0aG9kIGZyb20gdGhlIFJvd1Byb3ZpZGVyIGludGVyZmFjZS4gIFRoZSBTY3JvbGxQb3J0IHVzZXNcbiAqIGl0IHRvIGNvbXB1dGUgdGhlIHNpemUgb2YgdGhlIHNjcm9sbGJhci5cbiAqXG4gKiBAcmV0dXJuIHtpbnRlZ2VyfSBUaGUgbnVtYmVyIG9mIHJvd3MgaW4gdGhpcyB0ZXJtaW5hbC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmdldFJvd0NvdW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNjcm9sbGJhY2tSb3dzXy5sZW5ndGggKyB0aGlzLnNjcmVlbl8ucm93c0FycmF5Lmxlbmd0aDtcbn07XG5cbi8qKlxuICogQ3JlYXRlIERPTSBub2RlcyBmb3IgbmV3IHJvd3MgYW5kIGFwcGVuZCB0aGVtIHRvIHRoZSBlbmQgb2YgdGhlIHRlcm1pbmFsLlxuICpcbiAqIFRoaXMgaXMgdGhlIG9ubHkgY29ycmVjdCB3YXkgdG8gYWRkIGEgbmV3IERPTSBub2RlIGZvciBhIHJvdy4gIE5vdGljZSB0aGF0XG4gKiB0aGUgbmV3IHJvdyBpcyBhcHBlbmRlZCB0byB0aGUgYm90dG9tIG9mIHRoZSBsaXN0IG9mIHJvd3MsIGFuZCBkb2VzIG5vdFxuICogcmVxdWlyZSByZW51bWJlcmluZyAob2YgdGhlIHJvd0luZGV4IHByb3BlcnR5KSBvZiBwcmV2aW91cyByb3dzLlxuICpcbiAqIElmIHlvdSB0aGluayB5b3Ugd2FudCBhIG5ldyBibGFuayByb3cgc29tZXdoZXJlIGluIHRoZSBtaWRkbGUgb2YgdGhlXG4gKiB0ZXJtaW5hbCwgbG9vayBpbnRvIG1vdmVSb3dzXygpLlxuICpcbiAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHBheSBhdHRlbnRpb24gdG8gdnRTY3JvbGxUb3AvQm90dG9tLCBzaW5jZSB5b3Ugc2hvdWxkXG4gKiBiZSB1c2luZyBtb3ZlUm93cygpIGluIGNhc2VzIHdoZXJlIHRoZXkgd291bGQgbWF0dGVyLlxuICpcbiAqIFRoZSBjdXJzb3Igd2lsbCBiZSBwb3NpdGlvbmVkIGF0IGNvbHVtbiAwIG9mIHRoZSBmaXJzdCBpbnNlcnRlZCBsaW5lLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCBUaGUgbnVtYmVyIG9mIHJvd3MgdG8gY3JlYXRlZC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmFwcGVuZFJvd3NfID0gZnVuY3Rpb24oY291bnQpIHtcbiAgdmFyIGN1cnNvclJvdyA9IHRoaXMuc2NyZWVuXy5yb3dzQXJyYXkubGVuZ3RoO1xuICB2YXIgb2Zmc2V0ID0gdGhpcy5zY3JvbGxiYWNrUm93c18ubGVuZ3RoICsgY3Vyc29yUm93O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICB2YXIgcm93ID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgneC1yb3cnKTtcbiAgICByb3cuYXBwZW5kQ2hpbGQodGhpcy5kb2N1bWVudF8uY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgICByb3cucm93SW5kZXggPSBvZmZzZXQgKyBpO1xuICAgIHRoaXMuc2NyZWVuXy5wdXNoUm93KHJvdyk7XG4gIH1cblxuICB2YXIgZXh0cmFSb3dzID0gdGhpcy5zY3JlZW5fLnJvd3NBcnJheS5sZW5ndGggLSB0aGlzLnNjcmVlblNpemUuaGVpZ2h0O1xuICBpZiAoZXh0cmFSb3dzID4gMCkge1xuICAgIHZhciBhcnkgPSB0aGlzLnNjcmVlbl8uc2hpZnRSb3dzKGV4dHJhUm93cyk7XG4gICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5zY3JvbGxiYWNrUm93c18sIGFyeSk7XG4gICAgaWYgKHRoaXMuc2Nyb2xsUG9ydF8uaXNTY3JvbGxlZEVuZCkgdGhpcy5zY2hlZHVsZVNjcm9sbERvd25fKCk7XG4gIH1cblxuICBpZiAoY3Vyc29yUm93ID49IHRoaXMuc2NyZWVuXy5yb3dzQXJyYXkubGVuZ3RoKVxuICAgIGN1cnNvclJvdyA9IHRoaXMuc2NyZWVuXy5yb3dzQXJyYXkubGVuZ3RoIC0gMTtcblxuICB0aGlzLnNldEFic29sdXRlQ3Vyc29yUG9zaXRpb24oY3Vyc29yUm93LCAwKTtcbn07XG5cbi8qKlxuICogUmVsb2NhdGUgcm93cyBmcm9tIG9uZSBwYXJ0IG9mIHRoZSBhZGRyZXNzYWJsZSBzY3JlZW4gdG8gYW5vdGhlci5cbiAqXG4gKiBUaGlzIGlzIHVzZWQgdG8gcmVjeWNsZSByb3dzIGR1cmluZyBWVCBzY3JvbGxzICh0aG9zZSB3aGljaCBhcmUgZHJpdmVuXG4gKiBieSBWVCBjb21tYW5kcywgcmF0aGVyIHRoYW4gYnkgdGhlIHVzZXIgbWFuaXB1bGF0aW5nIHRoZSBzY3JvbGxiYXIuKVxuICpcbiAqIEluIHRoaXMgY2FzZSwgdGhlIGJsYW5rIGxpbmVzIHNjcm9sbGVkIGludG8gdGhlIHNjcm9sbCByZWdpb24gYXJlIG1hZGUgb2ZcbiAqIHRoZSBub2RlcyB3ZSBzY3JvbGxlZCBvZmYuICBUaGVzZSBoYXZlIHRoZWlyIHJvd0luZGV4IHByb3BlcnRpZXMgY2FyZWZ1bGx5XG4gKiByZW51bWJlcmVkIHNvIGFzIG5vdCB0byBjb25mdXNlIHRoZSBTY3JvbGxQb3J0LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIHN0YXJ0IGluZGV4LlxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IFRoZSBudW1iZXIgb2Ygcm93cyB0byBtb3ZlLlxuICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggVGhlIGRlc3RpbmF0aW9uIGluZGV4LlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUubW92ZVJvd3NfID0gZnVuY3Rpb24oZnJvbUluZGV4LCBjb3VudCwgdG9JbmRleCkge1xuICB2YXIgYXJ5ID0gdGhpcy5zY3JlZW5fLnJlbW92ZVJvd3MoZnJvbUluZGV4LCBjb3VudCk7XG4gIHRoaXMuc2NyZWVuXy5pbnNlcnRSb3dzKHRvSW5kZXgsIGFyeSk7XG5cbiAgdmFyIHN0YXJ0LCBlbmQ7XG4gIGlmIChmcm9tSW5kZXggPCB0b0luZGV4KSB7XG4gICAgc3RhcnQgPSBmcm9tSW5kZXg7XG4gICAgZW5kID0gdG9JbmRleCArIGNvdW50O1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gdG9JbmRleDtcbiAgICBlbmQgPSBmcm9tSW5kZXggKyBjb3VudDtcbiAgfVxuXG4gIHRoaXMucmVudW1iZXJSb3dzXyhzdGFydCwgZW5kKTtcbiAgdGhpcy5zY3JvbGxQb3J0Xy5zY2hlZHVsZUludmFsaWRhdGUoKTtcbn07XG5cbi8qKlxuICogUmVudW1iZXIgdGhlIHJvd0luZGV4IHByb3BlcnR5IG9mIHRoZSBnaXZlbiByYW5nZSBvZiByb3dzLlxuICpcbiAqIFRoZSBzdGFydCBhbmQgZW5kIGluZGljZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSBzY3JlZW4sIG5vdCB0aGUgc2Nyb2xsYmFjay5cbiAqIFJvd3MgaW4gdGhlIHNjcm9sbGJhY2sgYnVmZmVyIGNhbm5vdCBiZSByZW51bWJlcmVkLiAgU2luY2UgdGhleSBhcmUgbm90XG4gKiBhZGRyZXNzYWJsZSAoeW91IGNhbid0IGRlbGV0ZSB0aGVtLCBzY3JvbGwgdGhlbSwgZXRjKSwgeW91IHNob3VsZCBoYXZlXG4gKiBubyBuZWVkIHRvIHJlbnVtYmVyIHNjcm9sbGJhY2sgcm93cy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IGluZGV4LlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIGluZGV4LlxuICogQHBhcmFtIHtodGVybS5TY3JlZW59IG9wdF9zY3JlZW4gVGhlIHNjcmVlbiB0byByZW51bWJlci5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnJlbnVtYmVyUm93c18gPSBmdW5jdGlvbihzdGFydCwgZW5kLCBvcHRfc2NyZWVuKSB7XG4gIHZhciBzY3JlZW4gPSBvcHRfc2NyZWVuIHx8IHRoaXMuc2NyZWVuXztcblxuICB2YXIgb2Zmc2V0ID0gdGhpcy5zY3JvbGxiYWNrUm93c18ubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIHNjcmVlbi5yb3dzQXJyYXlbaV0ucm93SW5kZXggPSBvZmZzZXQgKyBpO1xuICB9XG59O1xuXG4vKipcbiAqIFByaW50IGEgc3RyaW5nIHRvIHRoZSB0ZXJtaW5hbC5cbiAqXG4gKiBUaGlzIHJlc3BlY3RzIHRoZSBjdXJyZW50IGluc2VydCBhbmQgd3JhcGFyb3VuZCBtb2Rlcy4gIEl0IHdpbGwgYWRkIG5ldyBsaW5lc1xuICogdG8gdGhlIGVuZCBvZiB0aGUgdGVybWluYWwsIHNjcm9sbGluZyBvZmYgdGhlIHRvcCBpbnRvIHRoZSBzY3JvbGxiYWNrIGJ1ZmZlclxuICogaWYgbmVjZXNzYXJ5LlxuICpcbiAqIFRoZSBzdHJpbmcgaXMgKm5vdCogcGFyc2VkIGZvciBlc2NhcGUgY29kZXMuICBVc2UgdGhlIGludGVycHJldCgpIG1ldGhvZCBpZlxuICogdGhhdCdzIHdoYXQgeW91J3JlIGFmdGVyLlxuICpcbiAqIEBwYXJhbXtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHByaW50LlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUucHJpbnQgPSBmdW5jdGlvbihzdHIpIHtcbiAgdGhpcy5zY2hlZHVsZVN5bmNDdXJzb3JQb3NpdGlvbl8oKTtcblxuICAvLyBCYXNpYyBhY2Nlc3NpYmlsaXR5IG91dHB1dCBmb3IgdGhlIHNjcmVlbiByZWFkZXIuXG4gIHRoaXMuYWNjZXNzaWJpbGl0eVJlYWRlcl8uYW5ub3VuY2Uoc3RyKTtcblxuICB2YXIgc3RhcnRPZmZzZXQgPSAwO1xuXG4gIHZhciBzdHJXaWR0aCA9IGxpYi53Yy5zdHJXaWR0aChzdHIpO1xuICAvLyBGdW4gZWRnZSBjYXNlOiBJZiB0aGUgc3RyaW5nIG9ubHkgY29udGFpbnMgemVybyB3aWR0aCBjb2RlcG9pbnRzIChsaWtlXG4gIC8vIGNvbWJpbmluZyBjaGFyYWN0ZXJzKSwgd2UgbWFrZSBzdXJlIHRvIGl0ZXJhdGUgYXQgbGVhc3Qgb25jZSBiZWxvdy5cbiAgaWYgKHN0cldpZHRoID09IDAgJiYgc3RyKSBzdHJXaWR0aCA9IDE7XG5cbiAgd2hpbGUgKHN0YXJ0T2Zmc2V0IDwgc3RyV2lkdGgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zXy53cmFwYXJvdW5kICYmIHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5vdmVyZmxvdykge1xuICAgICAgdGhpcy5zY3JlZW5fLmNvbW1pdExpbmVPdmVyZmxvdygpO1xuICAgICAgdGhpcy5uZXdMaW5lKHRydWUpO1xuICAgIH1cblxuICAgIHZhciBjb3VudCA9IHN0cldpZHRoIC0gc3RhcnRPZmZzZXQ7XG4gICAgdmFyIGRpZE92ZXJmbG93ID0gZmFsc2U7XG4gICAgdmFyIHN1YnN0cjtcblxuICAgIGlmICh0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24uY29sdW1uICsgY291bnQgPj0gdGhpcy5zY3JlZW5TaXplLndpZHRoKSB7XG4gICAgICBkaWRPdmVyZmxvdyA9IHRydWU7XG4gICAgICBjb3VudCA9IHRoaXMuc2NyZWVuU2l6ZS53aWR0aCAtIHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5jb2x1bW47XG4gICAgfVxuXG4gICAgaWYgKGRpZE92ZXJmbG93ICYmICF0aGlzLm9wdGlvbnNfLndyYXBhcm91bmQpIHtcbiAgICAgIC8vIElmIHRoZSBzdHJpbmcgb3ZlcmZsb3dlZCB0aGUgbGluZSBidXQgd3JhcGFyb3VuZCBpcyBvZmYsIHRoZW4gdGhlXG4gICAgICAvLyBsYXN0IHByaW50ZWQgY2hhcmFjdGVyIHNob3VsZCBiZSB0aGUgbGFzdCBvZiB0aGUgc3RyaW5nLlxuICAgICAgLy8gVE9ETzogVGhpcyB3aWxsIGFkZCB0byBvdXIgcHJvYmxlbXMgd2l0aCBtdWx0aWJ5dGUgVVRGLTE2IGNoYXJhY3RlcnMuXG4gICAgICBzdWJzdHIgPVxuICAgICAgICBsaWIud2Muc3Vic3RyKHN0ciwgc3RhcnRPZmZzZXQsIGNvdW50IC0gMSkgK1xuICAgICAgICBsaWIud2Muc3Vic3RyKHN0ciwgc3RyV2lkdGggLSAxKTtcbiAgICAgIGNvdW50ID0gc3RyV2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1YnN0ciA9IGxpYi53Yy5zdWJzdHIoc3RyLCBzdGFydE9mZnNldCwgY291bnQpO1xuICAgIH1cblxuICAgIHZhciB0b2tlbnMgPSBodGVybS5UZXh0QXR0cmlidXRlcy5zcGxpdFdpZGVjaGFyU3RyaW5nKHN1YnN0cik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuc2NyZWVuXy50ZXh0QXR0cmlidXRlcy53Y05vZGUgPSB0b2tlbnNbaV0ud2NOb2RlO1xuICAgICAgdGhpcy5zY3JlZW5fLnRleHRBdHRyaWJ1dGVzLmFzY2lpTm9kZSA9IHRva2Vuc1tpXS5hc2NpaU5vZGU7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnNfLmluc2VydE1vZGUpIHtcbiAgICAgICAgdGhpcy5zY3JlZW5fLmluc2VydFN0cmluZyh0b2tlbnNbaV0uc3RyLCB0b2tlbnNbaV0ud2NTdHJXaWR0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNjcmVlbl8ub3ZlcndyaXRlU3RyaW5nKHRva2Vuc1tpXS5zdHIsIHRva2Vuc1tpXS53Y1N0cldpZHRoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2NyZWVuXy50ZXh0QXR0cmlidXRlcy53Y05vZGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2NyZWVuXy50ZXh0QXR0cmlidXRlcy5hc2NpaU5vZGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuc2NyZWVuXy5tYXliZUNsaXBDdXJyZW50Um93KCk7XG4gICAgc3RhcnRPZmZzZXQgKz0gY291bnQ7XG4gIH1cblxuICBpZiAodGhpcy5zY3JvbGxPbk91dHB1dF8pXG4gICAgdGhpcy5zY3JvbGxQb3J0Xy5zY3JvbGxSb3dUb0JvdHRvbSh0aGlzLmdldFJvd0NvdW50KCkpO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIFZUIHNjcm9sbCByZWdpb24uXG4gKlxuICogVGhpcyBhbHNvIHJlc2V0cyB0aGUgY3Vyc29yIHBvc2l0aW9uIHRvIHRoZSBhYnNvbHV0ZSAoMCwgMCkgcG9zaXRpb24sIHNpbmNlXG4gKiB0aGF0J3Mgd2hhdCB4dGVybSBhcHBlYXJzIHRvIGRvLlxuICpcbiAqIFNldHRpbmcgdGhlIHNjcm9sbCByZWdpb24gdG8gdGhlIGZ1bGwgaGVpZ2h0IG9mIHRoZSB0ZXJtaW5hbCB3aWxsIGNsZWFyXG4gKiB0aGUgc2Nyb2xsIHJlZ2lvbi4gIFRoaXMgaXMgKk5PVCogd2hhdCBtb3N0IHRlcm1pbmFscyBkby4gIFdlJ3JlIGV4cGxpY2l0bHlcbiAqIGdvaW5nIFwib2ZmLXNwZWNcIiBoZXJlIGJlY2F1c2UgaXQgbWFrZXMgYHNjcmVlbmAgYW5kIGB0bXV4YCBvdmVyZmxvdyBpbnRvIHRoZVxuICogbG9jYWwgc2Nyb2xsYmFjayBidWZmZXIsIHdoaWNoIG1lYW5zIHRoZSBzY3JvbGxiYXJzIGFuZCBzaGlmdC1wZ3VwL3BnZG5cbiAqIGNvbnRpbnVlIHRvIHdvcmsgYXMgbW9zdCB1c2VycyB3b3VsZCBleHBlY3QuXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyfSBzY3JvbGxUb3AgVGhlIHplcm8tYmFzZWQgdG9wIG9mIHRoZSBzY3JvbGwgcmVnaW9uLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBzY3JvbGxCb3R0b20gVGhlIHplcm8tYmFzZWQgYm90dG9tIG9mIHRoZSBzY3JvbGwgcmVnaW9uLFxuICogICAgIGluY2x1c2l2ZS5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNldFZUU2Nyb2xsUmVnaW9uID0gZnVuY3Rpb24oc2Nyb2xsVG9wLCBzY3JvbGxCb3R0b20pIHtcbiAgaWYgKHNjcm9sbFRvcCA9PSAwICYmIHNjcm9sbEJvdHRvbSA9PSB0aGlzLnNjcmVlblNpemUuaGVpZ2h0IC0gMSkge1xuICAgIHRoaXMudnRTY3JvbGxUb3BfID0gbnVsbDtcbiAgICB0aGlzLnZ0U2Nyb2xsQm90dG9tXyA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy52dFNjcm9sbFRvcF8gPSBzY3JvbGxUb3A7XG4gICAgdGhpcy52dFNjcm9sbEJvdHRvbV8gPSBzY3JvbGxCb3R0b207XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSB0b3Agcm93IGluZGV4IGFjY29yZGluZyB0byB0aGUgVlQuXG4gKlxuICogVGhpcyB3aWxsIHJldHVybiAwIHVubGVzcyB0aGUgdGVybWluYWwgaGFzIGJlZW4gdG9sZCB0byByZXN0cmljdCBzY3JvbGxpbmdcbiAqIHRvIHNvbWUgbG93ZXIgcm93LiAgSXQgaXMgdXNlZCBmb3Igc29tZSBWVCBjdXJzb3IgcG9zaXRpb25pbmcgYW5kIHNjcm9sbGluZ1xuICogY29tbWFuZHMuXG4gKlxuICogQHJldHVybiB7aW50ZWdlcn0gVGhlIHRvcG1vc3Qgcm93IGluIHRoZSB0ZXJtaW5hbCdzIHNjcm9sbCByZWdpb24uXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5nZXRWVFNjcm9sbFRvcCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy52dFNjcm9sbFRvcF8gIT0gbnVsbCkgcmV0dXJuIHRoaXMudnRTY3JvbGxUb3BfO1xuXG4gIHJldHVybiAwO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGJvdHRvbSByb3cgaW5kZXggYWNjb3JkaW5nIHRvIHRoZSBWVC5cbiAqXG4gKiBUaGlzIHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHRlcm1pbmFsIHVubGVzcyB0aGUgaXQgaGFzIGJlZW4gdG9sZCB0b1xuICogcmVzdHJpY3Qgc2Nyb2xsaW5nIHRvIHNvbWUgaGlnaGVyIHJvdy4gIEl0IGlzIHVzZWQgZm9yIHNvbWUgVlQgY3Vyc29yXG4gKiBwb3NpdGlvbmluZyBhbmQgc2Nyb2xsaW5nIGNvbW1hbmRzLlxuICpcbiAqIEByZXR1cm4ge2ludGVnZXJ9IFRoZSBib3R0b20gbW9zdCByb3cgaW4gdGhlIHRlcm1pbmFsJ3Mgc2Nyb2xsIHJlZ2lvbi5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmdldFZUU2Nyb2xsQm90dG9tID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnZ0U2Nyb2xsQm90dG9tXyAhPSBudWxsKSByZXR1cm4gdGhpcy52dFNjcm9sbEJvdHRvbV87XG5cbiAgcmV0dXJuIHRoaXMuc2NyZWVuU2l6ZS5oZWlnaHQgLSAxO1xufTtcblxuLyoqXG4gKiBQcm9jZXNzIGEgJ1xcbicgY2hhcmFjdGVyLlxuICpcbiAqIElmIHRoZSBjdXJzb3IgaXMgb24gdGhlIGZpbmFsIHJvdyBvZiB0aGUgdGVybWluYWwgdGhpcyB3aWxsIGFwcGVuZCBhIG5ld1xuICogYmxhbmsgcm93IHRvIHRoZSBzY3JlZW4gYW5kIHNjcm9sbCB0aGUgdG9wbW9zdCByb3cgaW50byB0aGUgc2Nyb2xsYmFja1xuICogYnVmZmVyLlxuICpcbiAqIE90aGVyd2lzZSwgdGhpcyBtb3ZlcyB0aGUgY3Vyc29yIHRvIGNvbHVtbiB6ZXJvIG9mIHRoZSBuZXh0IHJvdy5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBkdWVUb092ZXJmbG93IFdoZXRoZXIgdGhlIG5ld2xpbmUgaXMgZHVlIHRvIHdyYXBhcm91bmQgb2ZcbiAqICAgICB0aGUgdGVybWluYWwuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5uZXdMaW5lID0gZnVuY3Rpb24oZHVlVG9PdmVyZmxvdyA9IGZhbHNlKSB7XG4gIGlmICghZHVlVG9PdmVyZmxvdykgdGhpcy5hY2Nlc3NpYmlsaXR5UmVhZGVyXy5uZXdMaW5lKCk7XG5cbiAgdmFyIGN1cnNvckF0RW5kT2ZTY3JlZW4gPVxuICAgIHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5yb3cgPT0gdGhpcy5zY3JlZW5fLnJvd3NBcnJheS5sZW5ndGggLSAxO1xuXG4gIGlmICh0aGlzLnZ0U2Nyb2xsQm90dG9tXyAhPSBudWxsKSB7XG4gICAgLy8gQSBWVCBTY3JvbGwgcmVnaW9uIGlzIGFjdGl2ZSwgd2UgbmV2ZXIgYXBwZW5kIG5ldyByb3dzLlxuICAgIGlmICh0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24ucm93ID09IHRoaXMudnRTY3JvbGxCb3R0b21fKSB7XG4gICAgICAvLyBXZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBWVCBTY3JvbGwgUmVnaW9uLCBwZXJmb3JtIGEgVlQgc2Nyb2xsLlxuICAgICAgdGhpcy52dFNjcm9sbFVwKDEpO1xuICAgICAgdGhpcy5zZXRBYnNvbHV0ZUN1cnNvclBvc2l0aW9uKHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5yb3csIDApO1xuICAgIH0gZWxzZSBpZiAoY3Vyc29yQXRFbmRPZlNjcmVlbikge1xuICAgICAgLy8gV2UncmUgYXQgdGhlIGVuZCBvZiB0aGUgc2NyZWVuLCB0aGUgb25seSB0aGluZyB0byBkbyBpcyBwdXQgdGhlXG4gICAgICAvLyBjdXJzb3IgdG8gY29sdW1uIDAuXG4gICAgICB0aGlzLnNldEFic29sdXRlQ3Vyc29yUG9zaXRpb24odGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLnJvdywgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFueXdoZXJlIGVsc2UsIGFkdmFuY2UgdGhlIGN1cnNvciByb3csIGFuZCByZXNldCB0aGUgY29sdW1uLlxuICAgICAgdGhpcy5zZXRBYnNvbHV0ZUN1cnNvclBvc2l0aW9uKHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5yb3cgKyAxLCAwKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY3Vyc29yQXRFbmRPZlNjcmVlbikge1xuICAgIC8vIFdlJ3JlIGF0IHRoZSBlbmQgb2YgdGhlIHNjcmVlbi4gIEFwcGVuZCBhIG5ldyByb3cgdG8gdGhlIHRlcm1pbmFsLFxuICAgIC8vIHNoaWZ0aW5nIHRoZSB0b3Agcm93IGludG8gdGhlIHNjcm9sbGJhY2suXG4gICAgdGhpcy5hcHBlbmRSb3dzXygxKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBBbnl3aGVyZSBlbHNlIGluIHRoZSBzY3JlZW4ganVzdCBtb3ZlcyB0aGUgY3Vyc29yLlxuICAgIHRoaXMuc2V0QWJzb2x1dGVDdXJzb3JQb3NpdGlvbih0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24ucm93ICsgMSwgMCk7XG4gIH1cbn07XG5cbi8qKlxuICogTGlrZSBuZXdMaW5lKCksIGV4Y2VwdCBtYWludGFpbiB0aGUgY3Vyc29yIGNvbHVtbi5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmxpbmVGZWVkID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb2x1bW4gPSB0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24uY29sdW1uO1xuICB0aGlzLm5ld0xpbmUoKTtcbiAgdGhpcy5zZXRDdXJzb3JDb2x1bW4oY29sdW1uKTtcbn07XG5cbi8qKlxuICogSWYgYXV0b0NhcnJpYWdlUmV0dXJuIGlzIHNldCB0aGVuIG5ld0xpbmUoKSwgZWxzZSBsaW5lRmVlZCgpLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuZm9ybUZlZWQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMub3B0aW9uc18uYXV0b0NhcnJpYWdlUmV0dXJuKSB7XG4gICAgdGhpcy5uZXdMaW5lKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5saW5lRmVlZCgpO1xuICB9XG59O1xuXG4vKipcbiAqIE1vdmUgdGhlIGN1cnNvciB1cCBvbmUgcm93LCBwb3NzaWJseSBpbnNlcnRpbmcgYSBibGFuayBsaW5lLlxuICpcbiAqIFRoZSBjdXJzb3IgY29sdW1uIGlzIG5vdCBjaGFuZ2VkLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUucmV2ZXJzZUxpbmVGZWVkID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzY3JvbGxUb3AgPSB0aGlzLmdldFZUU2Nyb2xsVG9wKCk7XG4gIHZhciBjdXJyZW50Um93ID0gdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLnJvdztcblxuICBpZiAoY3VycmVudFJvdyA9PSBzY3JvbGxUb3ApIHtcbiAgICB0aGlzLmluc2VydExpbmVzKDEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2V0QWJzb2x1dGVDdXJzb3JSb3coY3VycmVudFJvdyAtIDEpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlcGxhY2UgYWxsIGNoYXJhY3RlcnMgdG8gdGhlIGxlZnQgb2YgdGhlIGN1cnJlbnQgY3Vyc29yIHdpdGggdGhlIHNwYWNlXG4gKiBjaGFyYWN0ZXIuXG4gKlxuICogVE9ETyhyZ2luZGEpOiBUaGlzIHNob3VsZCBwcm9iYWJseSAqcmVtb3ZlKiB0aGUgY2hhcmFjdGVycyAobm90IGp1c3QgcmVwbGFjZVxuICogd2l0aCBhIHNwYWNlKSBpZiB0aGVyZSBhcmUgbm8gY2hhcmFjdGVycyBhdCBvciBiZXlvbmQgdGhlIGN1cnJlbnQgY3Vyc29yXG4gKiBwb3NpdGlvbi5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmVyYXNlVG9MZWZ0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjdXJzb3IgPSB0aGlzLnNhdmVDdXJzb3IoKTtcbiAgdGhpcy5zZXRDdXJzb3JDb2x1bW4oMCk7XG4gIGNvbnN0IGNvdW50ID0gY3Vyc29yLmNvbHVtbiArIDE7XG4gIHRoaXMuc2NyZWVuXy5vdmVyd3JpdGVTdHJpbmcobGliLmYuZ2V0V2hpdGVzcGFjZShjb3VudCksIGNvdW50KTtcbiAgdGhpcy5yZXN0b3JlQ3Vyc29yKGN1cnNvcik7XG59O1xuXG4vKipcbiAqIEVyYXNlIGEgZ2l2ZW4gbnVtYmVyIG9mIGNoYXJhY3RlcnMgdG8gdGhlIHJpZ2h0IG9mIHRoZSBjdXJzb3IuXG4gKlxuICogVGhlIGN1cnNvciBwb3NpdGlvbiBpcyB1bmNoYW5nZWQuXG4gKlxuICogSWYgdGhlIGN1cnJlbnQgYmFja2dyb3VuZCBjb2xvciBpcyBub3QgdGhlIGRlZmF1bHQgYmFja2dyb3VuZCBjb2xvciB0aGlzXG4gKiB3aWxsIGluc2VydCBzcGFjZXMgcmF0aGVyIHRoYW4gZGVsZXRlLiAgVGhpcyBpcyB1bmZvcnR1bmF0ZSBiZWNhdXNlIHRoZVxuICogdHJhaWxpbmcgc3BhY2Ugd2lsbCBhZmZlY3QgdGV4dCBzZWxlY3Rpb24sIGJ1dCBpdCdzIGRpZmZpY3VsdCB0byBjb21lIHVwXG4gKiB3aXRoIGEgd2F5IHRvIHN0eWxlIGVtcHR5IHNwYWNlIHRoYXQgd291bGRuJ3QgdHJpcCB1cCB0aGUgaHRlcm0uU2NyZWVuXG4gKiBjb2RlLlxuICpcbiAqIGVyYXNlVG9SaWdodCBpcyBpZ25vcmVkIGluIHRoZSBwcmVzZW5jZSBvZiBhIGN1cnNvciBvdmVyZmxvdy4gIFRoaXMgZGV2aWF0ZXNcbiAqIGZyb20geHRlcm0sIGJ1dCBhZ3JlZXMgd2l0aCBnbm9tZS10ZXJtaW5hbCBhbmQga29uc29sZSwgeGZjZTQtdGVybWluYWwuICBTZWVcbiAqIGNyYnVnLmNvbS8yMzIzOTAgZm9yIGRldGFpbHMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG9wdF9jb3VudCBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdG8gZXJhc2UuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5lcmFzZVRvUmlnaHQgPSBmdW5jdGlvbihvcHRfY291bnQpIHtcbiAgaWYgKHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5vdmVyZmxvdykgcmV0dXJuO1xuXG4gIHZhciBtYXhDb3VudCA9IHRoaXMuc2NyZWVuU2l6ZS53aWR0aCAtIHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5jb2x1bW47XG4gIHZhciBjb3VudCA9IG9wdF9jb3VudCA/IE1hdGgubWluKG9wdF9jb3VudCwgbWF4Q291bnQpIDogbWF4Q291bnQ7XG5cbiAgaWYgKFxuICAgIHRoaXMuc2NyZWVuXy50ZXh0QXR0cmlidXRlcy5iYWNrZ3JvdW5kID09PVxuICAgIHRoaXMuc2NyZWVuXy50ZXh0QXR0cmlidXRlcy5ERUZBVUxUX0NPTE9SXG4gICkge1xuICAgIHZhciBjdXJzb3JSb3cgPSB0aGlzLnNjcmVlbl8ucm93c0FycmF5W3RoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5yb3ddO1xuICAgIGlmIChcbiAgICAgIGh0ZXJtLlRleHRBdHRyaWJ1dGVzLm5vZGVXaWR0aChjdXJzb3JSb3cpIDw9XG4gICAgICB0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24uY29sdW1uICsgY291bnRcbiAgICApIHtcbiAgICAgIHRoaXMuc2NyZWVuXy5kZWxldGVDaGFycyhjb3VudCk7XG4gICAgICB0aGlzLmNsZWFyQ3Vyc29yT3ZlcmZsb3coKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICB2YXIgY3Vyc29yID0gdGhpcy5zYXZlQ3Vyc29yKCk7XG4gIHRoaXMuc2NyZWVuXy5vdmVyd3JpdGVTdHJpbmcobGliLmYuZ2V0V2hpdGVzcGFjZShjb3VudCksIGNvdW50KTtcbiAgdGhpcy5yZXN0b3JlQ3Vyc29yKGN1cnNvcik7XG4gIHRoaXMuY2xlYXJDdXJzb3JPdmVyZmxvdygpO1xufTtcblxuLyoqXG4gKiBFcmFzZSB0aGUgY3VycmVudCBsaW5lLlxuICpcbiAqIFRoZSBjdXJzb3IgcG9zaXRpb24gaXMgdW5jaGFuZ2VkLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuZXJhc2VMaW5lID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjdXJzb3IgPSB0aGlzLnNhdmVDdXJzb3IoKTtcbiAgdGhpcy5zY3JlZW5fLmNsZWFyQ3Vyc29yUm93KCk7XG4gIHRoaXMucmVzdG9yZUN1cnNvcihjdXJzb3IpO1xuICB0aGlzLmNsZWFyQ3Vyc29yT3ZlcmZsb3coKTtcbn07XG5cbi8qKlxuICogRXJhc2UgYWxsIGNoYXJhY3RlcnMgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIHNjcmVlbiB0byB0aGUgY3VycmVudCBjdXJzb3JcbiAqIHBvc2l0aW9uLCByZWdhcmRsZXNzIG9mIHNjcm9sbCByZWdpb24uXG4gKlxuICogVGhlIGN1cnNvciBwb3NpdGlvbiBpcyB1bmNoYW5nZWQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5lcmFzZUFib3ZlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjdXJzb3IgPSB0aGlzLnNhdmVDdXJzb3IoKTtcblxuICB0aGlzLmVyYXNlVG9MZWZ0KCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdXJzb3Iucm93OyBpKyspIHtcbiAgICB0aGlzLnNldEFic29sdXRlQ3Vyc29yUG9zaXRpb24oaSwgMCk7XG4gICAgdGhpcy5zY3JlZW5fLmNsZWFyQ3Vyc29yUm93KCk7XG4gIH1cblxuICB0aGlzLnJlc3RvcmVDdXJzb3IoY3Vyc29yKTtcbiAgdGhpcy5jbGVhckN1cnNvck92ZXJmbG93KCk7XG59O1xuXG4vKipcbiAqIEVyYXNlIGFsbCBjaGFyYWN0ZXJzIGZyb20gdGhlIGN1cnJlbnQgY3Vyc29yIHBvc2l0aW9uIHRvIHRoZSBlbmQgb2YgdGhlXG4gKiBzY3JlZW4sIHJlZ2FyZGxlc3Mgb2Ygc2Nyb2xsIHJlZ2lvbi5cbiAqXG4gKiBUaGUgY3Vyc29yIHBvc2l0aW9uIGlzIHVuY2hhbmdlZC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmVyYXNlQmVsb3cgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGN1cnNvciA9IHRoaXMuc2F2ZUN1cnNvcigpO1xuXG4gIHRoaXMuZXJhc2VUb1JpZ2h0KCk7XG5cbiAgdmFyIGJvdHRvbSA9IHRoaXMuc2NyZWVuU2l6ZS5oZWlnaHQgLSAxO1xuICBmb3IgKHZhciBpID0gY3Vyc29yLnJvdyArIDE7IGkgPD0gYm90dG9tOyBpKyspIHtcbiAgICB0aGlzLnNldEFic29sdXRlQ3Vyc29yUG9zaXRpb24oaSwgMCk7XG4gICAgdGhpcy5zY3JlZW5fLmNsZWFyQ3Vyc29yUm93KCk7XG4gIH1cblxuICB0aGlzLnJlc3RvcmVDdXJzb3IoY3Vyc29yKTtcbiAgdGhpcy5jbGVhckN1cnNvck92ZXJmbG93KCk7XG59O1xuXG4vKipcbiAqIEZpbGwgdGhlIHRlcm1pbmFsIHdpdGggYSBnaXZlbiBjaGFyYWN0ZXIuXG4gKlxuICogVGhpcyBtZXRob2RzIGRvZXMgbm90IHJlc3BlY3QgdGhlIFZUIHNjcm9sbCByZWdpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNoIFRoZSBjaGFyYWN0ZXIgdG8gdXNlIGZvciB0aGUgZmlsbC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbihjaCkge1xuICB2YXIgY3Vyc29yID0gdGhpcy5zYXZlQ3Vyc29yKCk7XG5cbiAgdGhpcy5zZXRBYnNvbHV0ZUN1cnNvclBvc2l0aW9uKDAsIDApO1xuICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCB0aGlzLnNjcmVlblNpemUuaGVpZ2h0OyByb3crKykge1xuICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMuc2NyZWVuU2l6ZS53aWR0aDsgY29sKyspIHtcbiAgICAgIHRoaXMuc2V0QWJzb2x1dGVDdXJzb3JQb3NpdGlvbihyb3csIGNvbCk7XG4gICAgICB0aGlzLnNjcmVlbl8ub3ZlcndyaXRlU3RyaW5nKGNoLCAxKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLnJlc3RvcmVDdXJzb3IoY3Vyc29yKTtcbn07XG5cbi8qKlxuICogRXJhc2UgdGhlIGVudGlyZSBkaXNwbGF5IGFuZCBsZWF2ZSB0aGUgY3Vyc29yIGF0ICgwLCAwKS5cbiAqXG4gKiBUaGlzIGRvZXMgbm90IHJlc3BlY3QgdGhlIHNjcm9sbCByZWdpb24uXG4gKlxuICogQHBhcmFtIHtodGVybS5TY3JlZW59IG9wdF9zY3JlZW4gT3B0aW9uYWwgc2NyZWVuIHRvIG9wZXJhdGUgb24uICBEZWZhdWx0c1xuICogICAgIHRvIHRoZSBjdXJyZW50IHNjcmVlbi5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmNsZWFySG9tZSA9IGZ1bmN0aW9uKG9wdF9zY3JlZW4pIHtcbiAgdmFyIHNjcmVlbiA9IG9wdF9zY3JlZW4gfHwgdGhpcy5zY3JlZW5fO1xuICB2YXIgYm90dG9tID0gc2NyZWVuLmdldEhlaWdodCgpO1xuXG4gIHRoaXMuYWNjZXNzaWJpbGl0eVJlYWRlcl8uY2xlYXIoKTtcblxuICBpZiAoYm90dG9tID09IDApIHtcbiAgICAvLyBFbXB0eSBzY3JlZW4sIG5vdGhpbmcgdG8gZG8uXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3R0b207IGkrKykge1xuICAgIHNjcmVlbi5zZXRDdXJzb3JQb3NpdGlvbihpLCAwKTtcbiAgICBzY3JlZW4uY2xlYXJDdXJzb3JSb3coKTtcbiAgfVxuXG4gIHNjcmVlbi5zZXRDdXJzb3JQb3NpdGlvbigwLCAwKTtcbn07XG5cbi8qKlxuICogRXJhc2UgdGhlIGVudGlyZSBkaXNwbGF5IHdpdGhvdXQgY2hhbmdpbmcgdGhlIGN1cnNvciBwb3NpdGlvbi5cbiAqXG4gKiBUaGUgY3Vyc29yIHBvc2l0aW9uIGlzIHVuY2hhbmdlZC4gIFRoaXMgZG9lcyBub3QgcmVzcGVjdCB0aGUgc2Nyb2xsXG4gKiByZWdpb24uXG4gKlxuICogQHBhcmFtIHtodGVybS5TY3JlZW59IG9wdF9zY3JlZW4gT3B0aW9uYWwgc2NyZWVuIHRvIG9wZXJhdGUgb24uICBEZWZhdWx0c1xuICogICAgIHRvIHRoZSBjdXJyZW50IHNjcmVlbi5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24ob3B0X3NjcmVlbikge1xuICB2YXIgc2NyZWVuID0gb3B0X3NjcmVlbiB8fCB0aGlzLnNjcmVlbl87XG4gIHZhciBjdXJzb3IgPSBzY3JlZW4uY3Vyc29yUG9zaXRpb24uY2xvbmUoKTtcbiAgdGhpcy5jbGVhckhvbWUoc2NyZWVuKTtcbiAgc2NyZWVuLnNldEN1cnNvclBvc2l0aW9uKGN1cnNvci5yb3csIGN1cnNvci5jb2x1bW4pO1xufTtcblxuLyoqXG4gKiBWVCBjb21tYW5kIHRvIGluc2VydCBsaW5lcyBhdCB0aGUgY3VycmVudCBjdXJzb3Igcm93LlxuICpcbiAqIFRoaXMgcmVzcGVjdHMgdGhlIGN1cnJlbnQgc2Nyb2xsIHJlZ2lvbi4gIFJvd3MgcHVzaGVkIG9mZiB0aGUgYm90dG9tIGFyZVxuICogbG9zdCAodGhleSB3b24ndCBzaG93IHVwIGluIHRoZSBzY3JvbGxiYWNrIGJ1ZmZlcikuXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyfSBjb3VudCBUaGUgbnVtYmVyIG9mIGxpbmVzIHRvIGluc2VydC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmluc2VydExpbmVzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgdmFyIGN1cnNvclJvdyA9IHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5yb3c7XG5cbiAgdmFyIGJvdHRvbSA9IHRoaXMuZ2V0VlRTY3JvbGxCb3R0b20oKTtcbiAgY291bnQgPSBNYXRoLm1pbihjb3VudCwgYm90dG9tIC0gY3Vyc29yUm93KTtcblxuICAvLyBUaGUgbW92ZUNvdW50IGlzIHRoZSBudW1iZXIgb2Ygcm93cyB3ZSBuZWVkIHRvIHJlbG9jYXRlIHRvIG1ha2Ugcm9vbSBmb3JcbiAgLy8gdGhlIG5ldyByb3cocykuICBUaGUgY291bnQgaXMgdGhlIGRpc3RhbmNlIHRvIG1vdmUgdGhlbS5cbiAgdmFyIG1vdmVDb3VudCA9IGJvdHRvbSAtIGN1cnNvclJvdyAtIGNvdW50ICsgMTtcbiAgaWYgKG1vdmVDb3VudCkgdGhpcy5tb3ZlUm93c18oY3Vyc29yUm93LCBtb3ZlQ291bnQsIGN1cnNvclJvdyArIGNvdW50KTtcblxuICBmb3IgKHZhciBpID0gY291bnQgLSAxOyBpID49IDA7IGktLSkge1xuICAgIHRoaXMuc2V0QWJzb2x1dGVDdXJzb3JQb3NpdGlvbihjdXJzb3JSb3cgKyBpLCAwKTtcbiAgICB0aGlzLnNjcmVlbl8uY2xlYXJDdXJzb3JSb3coKTtcbiAgfVxufTtcblxuLyoqXG4gKiBWVCBjb21tYW5kIHRvIGRlbGV0ZSBsaW5lcyBhdCB0aGUgY3VycmVudCBjdXJzb3Igcm93LlxuICpcbiAqIE5ldyByb3dzIGFyZSBhZGRlZCB0byB0aGUgYm90dG9tIG9mIHNjcm9sbCByZWdpb24gdG8gdGFrZSB0aGVpciBwbGFjZS4gIE5ld1xuICogcm93cyBhcmUgc3RyaWN0bHkgdGhlcmUgdG8gdGFrZSB1cCBzcGFjZSBhbmQgaGF2ZSBubyBjb250ZW50IG9yIHN0eWxlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCBUaGUgbnVtYmVyIG9mIGxpbmVzIHRvIGRlbGV0ZS5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmRlbGV0ZUxpbmVzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgdmFyIGN1cnNvciA9IHRoaXMuc2F2ZUN1cnNvcigpO1xuXG4gIHZhciB0b3AgPSBjdXJzb3Iucm93O1xuICB2YXIgYm90dG9tID0gdGhpcy5nZXRWVFNjcm9sbEJvdHRvbSgpO1xuXG4gIHZhciBtYXhDb3VudCA9IGJvdHRvbSAtIHRvcCArIDE7XG4gIGNvdW50ID0gTWF0aC5taW4oY291bnQsIG1heENvdW50KTtcblxuICB2YXIgbW92ZVN0YXJ0ID0gYm90dG9tIC0gY291bnQgKyAxO1xuICBpZiAoY291bnQgIT0gbWF4Q291bnQpIHRoaXMubW92ZVJvd3NfKHRvcCwgY291bnQsIG1vdmVTdGFydCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgdGhpcy5zZXRBYnNvbHV0ZUN1cnNvclBvc2l0aW9uKG1vdmVTdGFydCArIGksIDApO1xuICAgIHRoaXMuc2NyZWVuXy5jbGVhckN1cnNvclJvdygpO1xuICB9XG5cbiAgdGhpcy5yZXN0b3JlQ3Vyc29yKGN1cnNvcik7XG4gIHRoaXMuY2xlYXJDdXJzb3JPdmVyZmxvdygpO1xufTtcblxuLyoqXG4gKiBJbnNlcnRzIHRoZSBnaXZlbiBudW1iZXIgb2Ygc3BhY2VzIGF0IHRoZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvbi5cbiAqXG4gKiBUaGUgY3Vyc29yIHBvc2l0aW9uIGlzIG5vdCBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCBUaGUgbnVtYmVyIG9mIHNwYWNlcyB0byBpbnNlcnQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5pbnNlcnRTcGFjZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gIHZhciBjdXJzb3IgPSB0aGlzLnNhdmVDdXJzb3IoKTtcblxuICB2YXIgd3MgPSBsaWIuZi5nZXRXaGl0ZXNwYWNlKGNvdW50IHx8IDEpO1xuICB0aGlzLnNjcmVlbl8uaW5zZXJ0U3RyaW5nKHdzLCB3cy5sZW5ndGgpO1xuICB0aGlzLnNjcmVlbl8ubWF5YmVDbGlwQ3VycmVudFJvdygpO1xuXG4gIHRoaXMucmVzdG9yZUN1cnNvcihjdXJzb3IpO1xuICB0aGlzLmNsZWFyQ3Vyc29yT3ZlcmZsb3coKTtcbn07XG5cbi8qKlxuICogRm9yd2FyZC1kZWxldGUgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgY2hhcmFjdGVycyBzdGFydGluZyBhdCB0aGUgY3Vyc29yXG4gKiBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGNvdW50IFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0byBkZWxldGUuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5kZWxldGVDaGFycyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gIHZhciBkZWxldGVkID0gdGhpcy5zY3JlZW5fLmRlbGV0ZUNoYXJzKGNvdW50KTtcbiAgaWYgKGRlbGV0ZWQgJiYgIXRoaXMuc2NyZWVuXy50ZXh0QXR0cmlidXRlcy5pc0RlZmF1bHQoKSkge1xuICAgIHZhciBjdXJzb3IgPSB0aGlzLnNhdmVDdXJzb3IoKTtcbiAgICB0aGlzLnNldEN1cnNvckNvbHVtbih0aGlzLnNjcmVlblNpemUud2lkdGggLSBkZWxldGVkKTtcbiAgICB0aGlzLnNjcmVlbl8uaW5zZXJ0U3RyaW5nKGxpYi5mLmdldFdoaXRlc3BhY2UoZGVsZXRlZCkpO1xuICAgIHRoaXMucmVzdG9yZUN1cnNvcihjdXJzb3IpO1xuICB9XG5cbiAgdGhpcy5jbGVhckN1cnNvck92ZXJmbG93KCk7XG59O1xuXG4vKipcbiAqIFNoaWZ0IHJvd3MgaW4gdGhlIHNjcm9sbCByZWdpb24gdXB3YXJkcyBieSBhIGdpdmVuIG51bWJlciBvZiBsaW5lcy5cbiAqXG4gKiBOZXcgcm93cyBhcmUgaW5zZXJ0ZWQgYXQgdGhlIGJvdHRvbSBvZiB0aGUgc2Nyb2xsIHJlZ2lvbiB0byBmaWxsIHRoZVxuICogdmFjYXRlZCByb3dzLiAgVGhlIG5ldyByb3dzIG5vdCBmaWxsZWQgb3V0IHdpdGggdGhlIGN1cnJlbnQgdGV4dCBhdHRyaWJ1dGVzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgYWZmZWN0IHRoZSBzY3JvbGxiYWNrIHJvd3MgYXQgYWxsLiAgUm93cyBzaGlmdGVkXG4gKiBvZmYgdGhlIHRvcCBhcmUgbG9zdC5cbiAqXG4gKiBUaGUgY3Vyc29yIHBvc2l0aW9uIGlzIG5vdCBhbHRlcmVkLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gY291bnQgVGhlIG51bWJlciBvZiByb3dzIHRvIHNjcm9sbC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnZ0U2Nyb2xsVXAgPSBmdW5jdGlvbihjb3VudCkge1xuICB2YXIgY3Vyc29yID0gdGhpcy5zYXZlQ3Vyc29yKCk7XG5cbiAgdGhpcy5zZXRBYnNvbHV0ZUN1cnNvclJvdyh0aGlzLmdldFZUU2Nyb2xsVG9wKCkpO1xuICB0aGlzLmRlbGV0ZUxpbmVzKGNvdW50KTtcblxuICB0aGlzLnJlc3RvcmVDdXJzb3IoY3Vyc29yKTtcbn07XG5cbi8qKlxuICogU2hpZnQgcm93cyBiZWxvdyB0aGUgY3Vyc29yIGRvd24gYnkgYSBnaXZlbiBudW1iZXIgb2YgbGluZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXNwZWN0cyB0aGUgY3VycmVudCBzY3JvbGwgcmVnaW9uLlxuICpcbiAqIE5ldyByb3dzIGFyZSBpbnNlcnRlZCBhdCB0aGUgdG9wIG9mIHRoZSBzY3JvbGwgcmVnaW9uIHRvIGZpbGwgdGhlXG4gKiB2YWNhdGVkIHJvd3MuICBUaGUgbmV3IHJvd3Mgbm90IGZpbGxlZCBvdXQgd2l0aCB0aGUgY3VycmVudCB0ZXh0IGF0dHJpYnV0ZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBhZmZlY3QgdGhlIHNjcm9sbGJhY2sgcm93cyBhdCBhbGwuICBSb3dzIHNoaWZ0ZWRcbiAqIG9mZiB0aGUgYm90dG9tIGFyZSBsb3N0LlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gY291bnQgVGhlIG51bWJlciBvZiByb3dzIHRvIHNjcm9sbC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnZ0U2Nyb2xsRG93biA9IGZ1bmN0aW9uKG9wdF9jb3VudCkge1xuICB2YXIgY3Vyc29yID0gdGhpcy5zYXZlQ3Vyc29yKCk7XG5cbiAgdGhpcy5zZXRBYnNvbHV0ZUN1cnNvclBvc2l0aW9uKHRoaXMuZ2V0VlRTY3JvbGxUb3AoKSwgMCk7XG4gIHRoaXMuaW5zZXJ0TGluZXMob3B0X2NvdW50KTtcblxuICB0aGlzLnJlc3RvcmVDdXJzb3IoY3Vyc29yKTtcbn07XG5cbi8qKlxuICogRW5hYmxlIGFjY2Vzc2liaWxpdHktZnJpZW5kbHkgZmVhdHVyZXMgdGhhdCBoYXZlIGEgcGVyZm9ybWFuY2UgaW1wYWN0LlxuICpcbiAqIFRoaXMgd2lsbCBnZW5lcmF0ZSBhZGRpdGlvbmFsIERPTSBub2RlcyBpbiBhbiBhcmlhLWxpdmUgcmVnaW9uIHRoYXQgd2lsbFxuICogY2F1c2UgQXNzaXRpdmUgVGVjaG5vbG9neSB0byBhbm5vdW5jZSB0aGUgb3V0cHV0IG9mIHRoZSB0ZXJtaW5hbC4gSXQgYWxzb1xuICogZW5hYmxlcyBvdGhlciBmZWF0dXJlcyB0aGF0IGFpZCBhc3Npc3RpdmUgdGVjaG5vbG9neS4gQWxsIHRoZSBmZWF0dXJlcyBnYXRlZFxuICogYmVoaW5kIHRoaXMgZmxhZyBoYXZlIGEgcGVyZm9ybWFuY2UgaW1wYWN0IG9uIHRoZSB0ZXJtaW5hbCB3aGljaCBpcyB3aHkgdGhleVxuICogYXJlIG1hZGUgb3B0aW9uYWwuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBlbmFibGVkIFdoZXRoZXIgdG8gZW5hYmxlIGFjY2Vzc2liaWxpdHktZnJpZW5kbHkgZmVhdHVyZXMuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRBY2Nlc3NpYmlsaXR5RW5hYmxlZCA9IGZ1bmN0aW9uKGVuYWJsZWQpIHtcbiAgdGhpcy5hY2Nlc3NpYmlsaXR5UmVhZGVyXy5zZXRBY2Nlc3NpYmlsaXR5RW5hYmxlZChlbmFibGVkKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBjdXJzb3IgcG9zaXRpb24uXG4gKlxuICogVGhlIGN1cnNvciByb3cgaXMgcmVsYXRpdmUgdG8gdGhlIHNjcm9sbCByZWdpb24gaWYgdGhlIHRlcm1pbmFsIGhhc1xuICogJ29yaWdpbiBtb2RlJyBlbmFibGVkLCBvciByZWxhdGl2ZSB0byB0aGUgYWRkcmVzc2FibGUgc2NyZWVuIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IHJvdyBUaGUgbmV3IHplcm8tYmFzZWQgY3Vyc29yIHJvdy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gcm93IFRoZSBuZXcgemVyby1iYXNlZCBjdXJzb3IgY29sdW1uLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2V0Q3Vyc29yUG9zaXRpb24gPSBmdW5jdGlvbihyb3csIGNvbHVtbikge1xuICBpZiAodGhpcy5vcHRpb25zXy5vcmlnaW5Nb2RlKSB7XG4gICAgdGhpcy5zZXRSZWxhdGl2ZUN1cnNvclBvc2l0aW9uKHJvdywgY29sdW1uKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNldEFic29sdXRlQ3Vyc29yUG9zaXRpb24ocm93LCBjb2x1bW4pO1xuICB9XG59O1xuXG4vKipcbiAqIE1vdmUgdGhlIGN1cnNvciByZWxhdGl2ZSB0byBpdHMgY3VycmVudCBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gcm93XG4gKiBAcGFyYW0ge251bWJlcn0gY29sdW1uXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRSZWxhdGl2ZUN1cnNvclBvc2l0aW9uID0gZnVuY3Rpb24ocm93LCBjb2x1bW4pIHtcbiAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuZ2V0VlRTY3JvbGxUb3AoKTtcbiAgcm93ID0gbGliLmYuY2xhbXAocm93ICsgc2Nyb2xsVG9wLCBzY3JvbGxUb3AsIHRoaXMuZ2V0VlRTY3JvbGxCb3R0b20oKSk7XG4gIGNvbHVtbiA9IGxpYi5mLmNsYW1wKGNvbHVtbiwgMCwgdGhpcy5zY3JlZW5TaXplLndpZHRoIC0gMSk7XG4gIHRoaXMuc2NyZWVuXy5zZXRDdXJzb3JQb3NpdGlvbihyb3csIGNvbHVtbik7XG59O1xuXG4vKipcbiAqIE1vdmUgdGhlIGN1cnNvciB0byB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSByb3dcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNldEFic29sdXRlQ3Vyc29yUG9zaXRpb24gPSBmdW5jdGlvbihyb3csIGNvbHVtbikge1xuICByb3cgPSBsaWIuZi5jbGFtcChyb3csIDAsIHRoaXMuc2NyZWVuU2l6ZS5oZWlnaHQgLSAxKTtcbiAgY29sdW1uID0gbGliLmYuY2xhbXAoY29sdW1uLCAwLCB0aGlzLnNjcmVlblNpemUud2lkdGggLSAxKTtcbiAgdGhpcy5zY3JlZW5fLnNldEN1cnNvclBvc2l0aW9uKHJvdywgY29sdW1uKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBjdXJzb3IgY29sdW1uLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gY29sdW1uIFRoZSBuZXcgemVyby1iYXNlZCBjdXJzb3IgY29sdW1uLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2V0Q3Vyc29yQ29sdW1uID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gIHRoaXMuc2V0QWJzb2x1dGVDdXJzb3JQb3NpdGlvbih0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24ucm93LCBjb2x1bW4pO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGN1cnNvciBjb2x1bW4uXG4gKlxuICogQHJldHVybiB7aW50ZWdlcn0gVGhlIHplcm8tYmFzZWQgY3Vyc29yIGNvbHVtbi5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmdldEN1cnNvckNvbHVtbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLmNvbHVtbjtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBjdXJzb3Igcm93LlxuICpcbiAqIFRoZSBjdXJzb3Igcm93IGlzIHJlbGF0aXZlIHRvIHRoZSBzY3JvbGwgcmVnaW9uIGlmIHRoZSB0ZXJtaW5hbCBoYXNcbiAqICdvcmlnaW4gbW9kZScgZW5hYmxlZCwgb3IgcmVsYXRpdmUgdG8gdGhlIGFkZHJlc3NhYmxlIHNjcmVlbiBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyfSByb3cgVGhlIG5ldyBjdXJzb3Igcm93LlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2V0QWJzb2x1dGVDdXJzb3JSb3cgPSBmdW5jdGlvbihyb3cpIHtcbiAgdGhpcy5zZXRBYnNvbHV0ZUN1cnNvclBvc2l0aW9uKHJvdywgdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLmNvbHVtbik7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgY3Vyc29yIHJvdy5cbiAqXG4gKiBAcmV0dXJuIHtpbnRlZ2VyfSBUaGUgemVyby1iYXNlZCBjdXJzb3Igcm93LlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuZ2V0Q3Vyc29yUm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24ucm93O1xufTtcblxuLyoqXG4gKiBSZXF1ZXN0IHRoYXQgdGhlIFNjcm9sbFBvcnQgcmVkcmF3IGl0c2VsZiBzb29uLlxuICpcbiAqIFRoZSByZWRyYXcgd2lsbCBoYXBwZW4gYXN5bmNocm9ub3VzbHksIHNvb24gYWZ0ZXIgdGhlIGNhbGwgc3RhY2sgd2luZHMgZG93bi5cbiAqIE11bHRpcGxlIGNhbGxzIHdpbGwgYmUgY29hbGVzY2VkIGludG8gYSBzaW5nbGUgcmVkcmF3LlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2NoZWR1bGVSZWRyYXdfID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnRpbWVvdXRzXy5yZWRyYXcpIHJldHVybjtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMudGltZW91dHNfLnJlZHJhdyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHNlbGYudGltZW91dHNfLnJlZHJhdztcbiAgICBzZWxmLnNjcm9sbFBvcnRfLnJlZHJhd18oKTtcbiAgfSwgMCk7XG59O1xuXG4vKipcbiAqIFJlcXVlc3QgdGhhdCB0aGUgU2Nyb2xsUG9ydCBiZSBzY3JvbGxlZCB0byB0aGUgYm90dG9tLlxuICpcbiAqIFRoZSBzY3JvbGwgd2lsbCBoYXBwZW4gYXN5bmNocm9ub3VzbHksIHNvb24gYWZ0ZXIgdGhlIGNhbGwgc3RhY2sgd2luZHMgZG93bi5cbiAqIE11bHRpcGxlIGNhbGxzIHdpbGwgYmUgY29hbGVzY2VkIGludG8gYSBzaW5nbGUgc2Nyb2xsLlxuICpcbiAqIFRoaXMgYWZmZWN0cyB0aGUgc2Nyb2xsYmFyIHBvc2l0aW9uIG9mIHRoZSBTY3JvbGxQb3J0LCBhbmQgaGFzIG5vdGhpbmcgdG9cbiAqIGRvIHdpdGggdGhlIFZUIHNjcm9sbCBjb21tYW5kcy5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNjaGVkdWxlU2Nyb2xsRG93bl8gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMudGltZW91dHNfLnNjcm9sbERvd24pIHJldHVybjtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMudGltZW91dHNfLnNjcm9sbERvd24gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSBzZWxmLnRpbWVvdXRzXy5zY3JvbGxEb3duO1xuICAgIHNlbGYuc2Nyb2xsUG9ydF8uc2Nyb2xsUm93VG9Cb3R0b20oc2VsZi5nZXRSb3dDb3VudCgpKTtcbiAgfSwgMTApO1xufTtcblxuLyoqXG4gKiBNb3ZlIHRoZSBjdXJzb3IgdXAgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIHJvd3MuXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyfSBjb3VudCBUaGUgbnVtYmVyIG9mIHJvd3MgdG8gbW92ZSB0aGUgY3Vyc29yLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuY3Vyc29yVXAgPSBmdW5jdGlvbihjb3VudCkge1xuICByZXR1cm4gdGhpcy5jdXJzb3JEb3duKC0oY291bnQgfHwgMSkpO1xufTtcblxuLyoqXG4gKiBNb3ZlIHRoZSBjdXJzb3IgZG93biBhIHNwZWNpZmllZCBudW1iZXIgb2Ygcm93cy5cbiAqXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGNvdW50IFRoZSBudW1iZXIgb2Ygcm93cyB0byBtb3ZlIHRoZSBjdXJzb3IuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5jdXJzb3JEb3duID0gZnVuY3Rpb24oY291bnQpIHtcbiAgY291bnQgPSBjb3VudCB8fCAxO1xuICB2YXIgbWluSGVpZ2h0ID0gdGhpcy5vcHRpb25zXy5vcmlnaW5Nb2RlID8gdGhpcy5nZXRWVFNjcm9sbFRvcCgpIDogMDtcbiAgdmFyIG1heEhlaWdodCA9IHRoaXMub3B0aW9uc18ub3JpZ2luTW9kZVxuICAgID8gdGhpcy5nZXRWVFNjcm9sbEJvdHRvbSgpXG4gICAgOiB0aGlzLnNjcmVlblNpemUuaGVpZ2h0IC0gMTtcblxuICB2YXIgcm93ID0gbGliLmYuY2xhbXAoXG4gICAgdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLnJvdyArIGNvdW50LFxuICAgIG1pbkhlaWdodCxcbiAgICBtYXhIZWlnaHQsXG4gICk7XG4gIHRoaXMuc2V0QWJzb2x1dGVDdXJzb3JSb3cocm93KTtcbn07XG5cbi8qKlxuICogTW92ZSB0aGUgY3Vyc29yIGxlZnQgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIGNvbHVtbnMuXG4gKlxuICogSWYgcmV2ZXJzZSB3cmFwYXJvdW5kIG1vZGUgaXMgZW5hYmxlZCBhbmQgdGhlIHByZXZpb3VzIHJvdyB3cmFwcGVkIGludG9cbiAqIHRoZSBjdXJyZW50IHJvdyB0aGVuIHdlIGJhY2sgdXAgdGhyb3VnaCB0aGUgd3JhcGFyb3VuZCBhcyB3ZWxsLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gY291bnQgVGhlIG51bWJlciBvZiBjb2x1bW5zIHRvIG1vdmUgdGhlIGN1cnNvci5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmN1cnNvckxlZnQgPSBmdW5jdGlvbihjb3VudCkge1xuICBjb3VudCA9IGNvdW50IHx8IDE7XG5cbiAgaWYgKGNvdW50IDwgMSkgcmV0dXJuO1xuXG4gIHZhciBjdXJyZW50Q29sdW1uID0gdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLmNvbHVtbjtcbiAgaWYgKHRoaXMub3B0aW9uc18ucmV2ZXJzZVdyYXBhcm91bmQpIHtcbiAgICBpZiAodGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLm92ZXJmbG93KSB7XG4gICAgICAvLyBJZiB0aGlzIGN1cnNvciBpcyBpbiB0aGUgcmlnaHQgbWFyZ2luLCBjb25zdW1lIG9uZSBjb3VudCB0byBnZXQgaXRcbiAgICAgIC8vIGJhY2sgdG8gdGhlIGxhc3QgY29sdW1uLiAgVGhpcyBvbmx5IGFwcGxpZXMgd2hlbiB3ZSdyZSBpbiByZXZlcnNlXG4gICAgICAvLyB3cmFwYXJvdW5kIG1vZGUuXG4gICAgICBjb3VudC0tO1xuICAgICAgdGhpcy5jbGVhckN1cnNvck92ZXJmbG93KCk7XG5cbiAgICAgIGlmICghY291bnQpIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV3Um93ID0gdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLnJvdztcbiAgICB2YXIgbmV3Q29sdW1uID0gY3VycmVudENvbHVtbiAtIGNvdW50O1xuICAgIGlmIChuZXdDb2x1bW4gPCAwKSB7XG4gICAgICBuZXdSb3cgPSBuZXdSb3cgLSBNYXRoLmZsb29yKGNvdW50IC8gdGhpcy5zY3JlZW5TaXplLndpZHRoKSAtIDE7XG4gICAgICBpZiAobmV3Um93IDwgMCkge1xuICAgICAgICAvLyB4dGVybSBhbHNvIHdyYXBzIGZyb20gcm93IDAgdG8gdGhlIGxhc3Qgcm93LlxuICAgICAgICBuZXdSb3cgPSB0aGlzLnNjcmVlblNpemUuaGVpZ2h0ICsgKG5ld1JvdyAlIHRoaXMuc2NyZWVuU2l6ZS5oZWlnaHQpO1xuICAgICAgfVxuICAgICAgbmV3Q29sdW1uID0gdGhpcy5zY3JlZW5TaXplLndpZHRoICsgKG5ld0NvbHVtbiAlIHRoaXMuc2NyZWVuU2l6ZS53aWR0aCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRDdXJzb3JQb3NpdGlvbihNYXRoLm1heChuZXdSb3csIDApLCBuZXdDb2x1bW4pO1xuICB9IGVsc2Uge1xuICAgIHZhciBuZXdDb2x1bW4gPSBNYXRoLm1heChjdXJyZW50Q29sdW1uIC0gY291bnQsIDApO1xuICAgIHRoaXMuc2V0Q3Vyc29yQ29sdW1uKG5ld0NvbHVtbik7XG4gIH1cbn07XG5cbi8qKlxuICogTW92ZSB0aGUgY3Vyc29yIHJpZ2h0IGEgc3BlY2lmaWVkIG51bWJlciBvZiBjb2x1bW5zLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gY291bnQgVGhlIG51bWJlciBvZiBjb2x1bW5zIHRvIG1vdmUgdGhlIGN1cnNvci5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmN1cnNvclJpZ2h0ID0gZnVuY3Rpb24oY291bnQpIHtcbiAgY291bnQgPSBjb3VudCB8fCAxO1xuXG4gIGlmIChjb3VudCA8IDEpIHJldHVybjtcblxuICB2YXIgY29sdW1uID0gbGliLmYuY2xhbXAoXG4gICAgdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLmNvbHVtbiArIGNvdW50LFxuICAgIDAsXG4gICAgdGhpcy5zY3JlZW5TaXplLndpZHRoIC0gMSxcbiAgKTtcbiAgdGhpcy5zZXRDdXJzb3JDb2x1bW4oY29sdW1uKTtcbn07XG5cbi8qKlxuICogUmV2ZXJzZSB0aGUgZm9yZWdyb3VuZCBhbmQgYmFja2dyb3VuZCBjb2xvcnMgb2YgdGhlIHRlcm1pbmFsLlxuICpcbiAqIFRoaXMgb25seSBhZmZlY3RzIHRleHQgdGhhdCB3YXMgZHJhd24gd2l0aCBubyBhdHRyaWJ1dGVzLlxuICpcbiAqIFRPRE8ocmdpbmRhKTogVGVzdCB4dGVybSB0byBzZWUgaWYgcmV2ZXJzZSBpcyByZXNwZWN0ZWQgZm9yIHRleHQgdGhhdCBoYXNcbiAqIGJlZW4gZHJhd24gd2l0aCBhdHRyaWJ1dGVzIHRoYXQgaGFwcGVuIHRvIGNvaW5jaWRlIHdpdGggdGhlIGRlZmF1bHRcbiAqICduby1hdHRyaWJ1dGUnIGNvbG9ycy4gIE15IGd1ZXNzIGlzIHByb2JhYmx5IG5vdC5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIFRoZSBzdGF0ZSB0byBzZXQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRSZXZlcnNlVmlkZW8gPSBmdW5jdGlvbihzdGF0ZSkge1xuICB0aGlzLm9wdGlvbnNfLnJldmVyc2VWaWRlbyA9IHN0YXRlO1xuICBpZiAoc3RhdGUpIHtcbiAgICB0aGlzLnNjcm9sbFBvcnRfLnNldEZvcmVncm91bmRDb2xvcih0aGlzLnByZWZzXy5nZXQoJ2JhY2tncm91bmQtY29sb3InKSk7XG4gICAgdGhpcy5zY3JvbGxQb3J0Xy5zZXRCYWNrZ3JvdW5kQ29sb3IodGhpcy5wcmVmc18uZ2V0KCdmb3JlZ3JvdW5kLWNvbG9yJykpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2Nyb2xsUG9ydF8uc2V0Rm9yZWdyb3VuZENvbG9yKHRoaXMucHJlZnNfLmdldCgnZm9yZWdyb3VuZC1jb2xvcicpKTtcbiAgICB0aGlzLnNjcm9sbFBvcnRfLnNldEJhY2tncm91bmRDb2xvcih0aGlzLnByZWZzXy5nZXQoJ2JhY2tncm91bmQtY29sb3InKSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmluZyB0aGUgdGVybWluYWwgYmVsbC5cbiAqXG4gKiBUaGlzIHdpbGwgbm90IHBsYXkgdGhlIGJlbGwgYXVkaW8gbW9yZSB0aGFuIG9uY2UgcGVyIHNlY29uZC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnJpbmdCZWxsID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY3Vyc29yTm9kZV8uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gdGhpcy5zY3JvbGxQb3J0Xy5nZXRGb3JlZ3JvdW5kQ29sb3IoKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5yZXN0eWxlQ3Vyc29yXygpO1xuICB9LCAyMDApO1xuXG4gIC8vIGJlbGxTcXVlbGNoVGltZW91dF8gYWZmZWN0cyBib3RoIGF1ZGlvIGFuZCBub3RpZmljYXRpb24gYmVsbHMuXG4gIGlmICh0aGlzLmJlbGxTcXVlbGNoVGltZW91dF8pIHJldHVybjtcblxuICBpZiAodGhpcy5iZWxsQXVkaW9fLmdldEF0dHJpYnV0ZSgnc3JjJykpIHtcbiAgICB0aGlzLmJlbGxBdWRpb18ucGxheSgpO1xuICAgIHRoaXMuYmVsbFNlcXVlbGNoVGltZW91dF8gPSBzZXRUaW1lb3V0KFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmJlbGxTcXVlbGNoVGltZW91dF87XG4gICAgICB9LmJpbmQodGhpcyksXG4gICAgICA1MDAsXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBkZWxldGUgdGhpcy5iZWxsU3F1ZWxjaFRpbWVvdXRfO1xuICB9XG5cbiAgaWYgKHRoaXMuZGVza3RvcE5vdGlmaWNhdGlvbkJlbGxfICYmICF0aGlzLmRvY3VtZW50Xy5oYXNGb2N1cygpKSB7XG4gICAgdmFyIG4gPSBodGVybS5ub3RpZnkoKTtcbiAgICB0aGlzLmJlbGxOb3RpZmljYXRpb25MaXN0Xy5wdXNoKG4pO1xuICAgIC8vIFRPRE86IFNob3VsZCB3ZSB0cnkgdG8gcmFpc2UgdGhlIHdpbmRvdyBoZXJlP1xuICAgIG4ub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5jbG9zZUJlbGxOb3RpZmljYXRpb25zXygpO1xuICAgIH07XG4gIH1cbn07XG5cbi8qKlxuICogU2V0IHRoZSBvcmlnaW4gbW9kZSBiaXQuXG4gKlxuICogSWYgb3JpZ2luIG1vZGUgaXMgb24sIGNlcnRhaW4gVlQgY3Vyc29yIGFuZCBzY3JvbGxpbmcgY29tbWFuZHMgbWVhc3VyZSB0aGVpclxuICogcm93IHBhcmFtZXRlciByZWxhdGl2ZSB0byB0aGUgVlQgc2Nyb2xsIHJlZ2lvbi4gIE90aGVyd2lzZSwgcm93IDAgY29ycmVzcG9uZHNcbiAqIHRvIHRoZSB0b3Agb2YgdGhlIGFkZHJlc3NhYmxlIHNjcmVlbi5cbiAqXG4gKiBEZWZhdWx0cyB0byBvZmYuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBzdGF0ZSBUcnVlIHRvIHNldCBvcmlnaW4gbW9kZSwgZmFsc2UgdG8gdW5zZXQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRPcmlnaW5Nb2RlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdGhpcy5vcHRpb25zXy5vcmlnaW5Nb2RlID0gc3RhdGU7XG4gIHRoaXMuc2V0Q3Vyc29yUG9zaXRpb24oMCwgMCk7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaW5zZXJ0IG1vZGUgYml0LlxuICpcbiAqIElmIGluc2VydCBtb2RlIGlzIG9uLCBleGlzdGluZyB0ZXh0IGJleW9uZCB0aGUgY3Vyc29yIHBvc2l0aW9uIHdpbGwgYmVcbiAqIHNoaWZ0ZWQgcmlnaHQgdG8gbWFrZSByb29tIGZvciBuZXcgdGV4dC4gIE90aGVyd2lzZSwgbmV3IHRleHQgb3ZlcndyaXRlc1xuICogYW55IGV4aXN0aW5nIHRleHQuXG4gKlxuICogRGVmYXVsdHMgdG8gb2ZmLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUgVHJ1ZSB0byBzZXQgaW5zZXJ0IG1vZGUsIGZhbHNlIHRvIHVuc2V0LlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2V0SW5zZXJ0TW9kZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHRoaXMub3B0aW9uc18uaW5zZXJ0TW9kZSA9IHN0YXRlO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGF1dG8gY2FycmlhZ2UgcmV0dXJuIGJpdC5cbiAqXG4gKiBJZiBhdXRvIGNhcnJpYWdlIHJldHVybiBpcyBvbiB0aGVuIGEgZm9ybWZlZWQgY2hhcmFjdGVyIGlzIGludGVycHJldGVkXG4gKiBhcyBhIG5ld2xpbmUsIG90aGVyd2lzZSBpdCdzIHRoZSBzYW1lIGFzIGEgbGluZWZlZWQuICBUaGUgZGlmZmVyZW5jZSBib2lsc1xuICogZG93biB0byB3aGV0aGVyIG9yIG5vdCB0aGUgY3Vyc29yIGNvbHVtbiBpcyByZXNldC5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIFRoZSBzdGF0ZSB0byBzZXQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRBdXRvQ2FycmlhZ2VSZXR1cm4gPSBmdW5jdGlvbihzdGF0ZSkge1xuICB0aGlzLm9wdGlvbnNfLmF1dG9DYXJyaWFnZVJldHVybiA9IHN0YXRlO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHdyYXBhcm91bmQgbW9kZSBiaXQuXG4gKlxuICogSWYgd3JhcGFyb3VuZCBtb2RlIGlzIG9uLCBjZXJ0YWluIFZUIGNvbW1hbmRzIHdpbGwgYWxsb3cgdGhlIGN1cnNvciB0byB3cmFwXG4gKiB0byB0aGUgc3RhcnQgb2YgdGhlIGZvbGxvd2luZyByb3cuICBPdGhlcndpc2UsIHRoZSBjdXJzb3IgaXMgY2xhbXBlZCB0byB0aGVcbiAqIGVuZCBvZiB0aGUgc2NyZWVuIGFuZCBhdHRlbXB0cyB0byB3cml0ZSBwYXN0IGl0IGFyZSBpZ25vcmVkLlxuICpcbiAqIERlZmF1bHRzIHRvIG9uLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUgVHJ1ZSB0byBzZXQgd3JhcGFyb3VuZCBtb2RlLCBmYWxzZSB0byB1bnNldC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNldFdyYXBhcm91bmQgPSBmdW5jdGlvbihzdGF0ZSkge1xuICB0aGlzLm9wdGlvbnNfLndyYXBhcm91bmQgPSBzdGF0ZTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSByZXZlcnNlLXdyYXBhcm91bmQgbW9kZSBiaXQuXG4gKlxuICogSWYgd3JhcGFyb3VuZCBtb2RlIGlzIG9mZiwgY2VydGFpbiBWVCBjb21tYW5kcyB3aWxsIGFsbG93IHRoZSBjdXJzb3IgdG8gd3JhcFxuICogdG8gdGhlIGVuZCBvZiB0aGUgcHJldmlvdXMgcm93LiAgT3RoZXJ3aXNlLCB0aGUgY3Vyc29yIGlzIGNsYW1wZWQgdG8gY29sdW1uXG4gKiAwLlxuICpcbiAqIERlZmF1bHRzIHRvIG9mZi5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIFRydWUgdG8gc2V0IHJldmVyc2Utd3JhcGFyb3VuZCBtb2RlLCBmYWxzZSB0byB1bnNldC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNldFJldmVyc2VXcmFwYXJvdW5kID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdGhpcy5vcHRpb25zXy5yZXZlcnNlV3JhcGFyb3VuZCA9IHN0YXRlO1xufTtcblxuLyoqXG4gKiBTZWxlY3RzIGJldHdlZW4gdGhlIHByaW1hcnkgYW5kIGFsdGVybmF0ZSBzY3JlZW5zLlxuICpcbiAqIElmIGFsdGVybmF0ZSBtb2RlIGlzIG9uLCB0aGUgYWx0ZXJuYXRlIHNjcmVlbiBpcyBhY3RpdmUuICBPdGhlcndpc2UgdGhlXG4gKiBwcmltYXJ5IHNjcmVlbiBpcyBhY3RpdmUuXG4gKlxuICogU3dhcHBpbmcgc2NyZWVucyBoYXMgbm8gZWZmZWN0IG9uIHRoZSBzY3JvbGxiYWNrIGJ1ZmZlci5cbiAqXG4gKiBFYWNoIHNjcmVlbiBtYWludGFpbnMgaXRzIG93biBjdXJzb3IgcG9zaXRpb24uXG4gKlxuICogRGVmYXVsdHMgdG8gb2ZmLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUgVHJ1ZSB0byBzZXQgYWx0ZXJuYXRlIG1vZGUsIGZhbHNlIHRvIHVuc2V0LlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2V0QWx0ZXJuYXRlTW9kZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHZhciBjdXJzb3IgPSB0aGlzLnNhdmVDdXJzb3IoKTtcbiAgdGhpcy5zY3JlZW5fID0gc3RhdGUgPyB0aGlzLmFsdGVybmF0ZVNjcmVlbl8gOiB0aGlzLnByaW1hcnlTY3JlZW5fO1xuXG4gIGlmIChcbiAgICB0aGlzLnNjcmVlbl8ucm93c0FycmF5Lmxlbmd0aCAmJlxuICAgIHRoaXMuc2NyZWVuXy5yb3dzQXJyYXlbMF0ucm93SW5kZXggIT0gdGhpcy5zY3JvbGxiYWNrUm93c18ubGVuZ3RoXG4gICkge1xuICAgIC8vIElmIHRoZSBzY3JlZW4gY2hhbmdlZCBzaXplcyB3aGlsZSB3ZSB3ZXJlIGF3YXksIG91ciByb3dJbmRleGVzIG1heVxuICAgIC8vIGJlIGluY29ycmVjdC5cbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5zY3JvbGxiYWNrUm93c18ubGVuZ3RoO1xuICAgIHZhciBhcnkgPSB0aGlzLnNjcmVlbl8ucm93c0FycmF5O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnlbaV0ucm93SW5kZXggPSBvZmZzZXQgKyBpO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMucmVhbGl6ZVdpZHRoXyh0aGlzLnNjcmVlblNpemUud2lkdGgpO1xuICB0aGlzLnJlYWxpemVIZWlnaHRfKHRoaXMuc2NyZWVuU2l6ZS5oZWlnaHQpO1xuICB0aGlzLnNjcm9sbFBvcnRfLnN5bmNTY3JvbGxIZWlnaHQoKTtcbiAgdGhpcy5zY3JvbGxQb3J0Xy5pbnZhbGlkYXRlKCk7XG5cbiAgdGhpcy5yZXN0b3JlQ3Vyc29yKGN1cnNvcik7XG4gIHRoaXMuc2Nyb2xsUG9ydF8ucmVzaXplKCk7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgY3Vyc29yLWJsaW5rIG1vZGUgYml0LlxuICpcbiAqIElmIGN1cnNvci1ibGluayBpcyBvbiwgdGhlIGN1cnNvciB3aWxsIGJsaW5rIHdoZW4gaXQgaXMgdmlzaWJsZS4gIE90aGVyd2lzZVxuICogYSB2aXNpYmxlIGN1cnNvciBkb2VzIG5vdCBibGluay5cbiAqXG4gKiBZb3Ugc2hvdWxkIG1ha2Ugc3VyZSB0byB0dXJuIGJsaW5raW5nIG9mZiBpZiB5b3UncmUgZ29pbmcgdG8gZGlzcG9zZSBvZiBhXG4gKiB0ZXJtaW5hbCwgb3RoZXJ3aXNlIHlvdSdsbCBsZWFrIGEgdGltZW91dC5cbiAqXG4gKiBEZWZhdWx0cyB0byBvbi5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIFRydWUgdG8gc2V0IGN1cnNvci1ibGluayBtb2RlLCBmYWxzZSB0byB1bnNldC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNldEN1cnNvckJsaW5rID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgdGhpcy5vcHRpb25zXy5jdXJzb3JCbGluayA9IHN0YXRlO1xuXG4gIGlmICghc3RhdGUgJiYgdGhpcy50aW1lb3V0c18uY3Vyc29yQmxpbmspIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0c18uY3Vyc29yQmxpbmspO1xuICAgIGRlbGV0ZSB0aGlzLnRpbWVvdXRzXy5jdXJzb3JCbGluaztcbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnNfLmN1cnNvclZpc2libGUpIHRoaXMuc2V0Q3Vyc29yVmlzaWJsZSh0cnVlKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBjdXJzb3ItdmlzaWJsZSBtb2RlIGJpdC5cbiAqXG4gKiBJZiBjdXJzb3ItdmlzaWJsZSBpcyBvbiwgdGhlIGN1cnNvciB3aWxsIGJlIHZpc2libGUuICBPdGhlcndpc2UgaXQgd2lsbCBub3QuXG4gKlxuICogRGVmYXVsdHMgdG8gb24uXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBzdGF0ZSBUcnVlIHRvIHNldCBjdXJzb3ItdmlzaWJsZSBtb2RlLCBmYWxzZSB0byB1bnNldC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNldEN1cnNvclZpc2libGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICB0aGlzLm9wdGlvbnNfLmN1cnNvclZpc2libGUgPSBzdGF0ZTtcblxuICBpZiAoIXN0YXRlKSB7XG4gICAgaWYgKHRoaXMudGltZW91dHNfLmN1cnNvckJsaW5rKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0c18uY3Vyc29yQmxpbmspO1xuICAgICAgZGVsZXRlIHRoaXMudGltZW91dHNfLmN1cnNvckJsaW5rO1xuICAgIH1cbiAgICB0aGlzLmN1cnNvck5vZGVfLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5zeW5jQ3Vyc29yUG9zaXRpb25fKCk7XG5cbiAgdGhpcy5jdXJzb3JOb2RlXy5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuXG4gIGlmICh0aGlzLm9wdGlvbnNfLmN1cnNvckJsaW5rKSB7XG4gICAgaWYgKHRoaXMudGltZW91dHNfLmN1cnNvckJsaW5rKSByZXR1cm47XG5cbiAgICB0aGlzLm9uQ3Vyc29yQmxpbmtfKCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMudGltZW91dHNfLmN1cnNvckJsaW5rKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0c18uY3Vyc29yQmxpbmspO1xuICAgICAgZGVsZXRlIHRoaXMudGltZW91dHNfLmN1cnNvckJsaW5rO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBTeW5jaHJvbml6ZXMgdGhlIHZpc2libGUgY3Vyc29yIGFuZCBkb2N1bWVudCBzZWxlY3Rpb24gd2l0aCB0aGUgY3VycmVudFxuICogY3Vyc29yIGNvb3JkaW5hdGVzLlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGN1cnNvciBpcyBvbnNjcmVlbiBhbmQgc3luY2VkLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc3luY0N1cnNvclBvc2l0aW9uXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdG9wUm93SW5kZXggPSB0aGlzLnNjcm9sbFBvcnRfLmdldFRvcFJvd0luZGV4KCk7XG4gIHZhciBib3R0b21Sb3dJbmRleCA9IHRoaXMuc2Nyb2xsUG9ydF8uZ2V0Qm90dG9tUm93SW5kZXgodG9wUm93SW5kZXgpO1xuICB2YXIgY3Vyc29yUm93SW5kZXggPVxuICAgIHRoaXMuc2Nyb2xsYmFja1Jvd3NfLmxlbmd0aCArIHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5yb3c7XG5cbiAgbGV0IGZvcmNlU3luY1NlbGVjdGlvbiA9IGZhbHNlO1xuICBpZiAodGhpcy5hY2Nlc3NpYmlsaXR5UmVhZGVyXy5hY2Nlc3NpYmlsaXR5RW5hYmxlZCkge1xuICAgIC8vIFJlcG9ydCB0aGUgbmV3IHBvc2l0aW9uIG9mIHRoZSBjdXJzb3IgZm9yIGFjY2Vzc2liaWxpdHkgcHVycG9zZXMuXG4gICAgY29uc3QgY3Vyc29yQ29sdW1uSW5kZXggPSB0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24uY29sdW1uO1xuICAgIGNvbnN0IGN1cnNvckxpbmVUZXh0ID0gdGhpcy5zY3JlZW5fLnJvd3NBcnJheVtcbiAgICAgIHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5yb3dcbiAgICBdLmlubmVyVGV4dDtcbiAgICAvLyBUaGlzIHdpbGwgZm9yY2UgdGhlIHNlbGVjdGlvbiB0byBiZSBzeW5jJ2QgdG8gdGhlIGN1cnNvciBwb3NpdGlvbiBpZiB0aGVcbiAgICAvLyB1c2VyIGhhcyBwcmVzc2VkIGEga2V5LiBHZW5lcmFsbHkgd2Ugd291bGQgb25seSBzeW5jIHRoZSBjdXJzb3IgcG9zaXRpb25cbiAgICAvLyB3aGVuIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQgc28gdGhhdCBpZiB0aGUgdXNlciBoYXMgc2VsZWN0ZWQgc29tZXRoaW5nXG4gICAgLy8gd2UgZG9uJ3QgY2xlYXIgdGhlIHNlbGVjdGlvbiBieSBtb3ZpbmcgdGhlIHNlbGVjdGlvbi4gSG93ZXZlciB3aGVuIGFcbiAgICAvLyBzY3JlZW4gcmVhZGVyIGlzIHVzZWQsIGl0J3MgaW50dWl0aXZlIGZvciBlbnRlcmluZyBhIGtleSB0byBtb3ZlIHRoZVxuICAgIC8vIHNlbGVjdGlvbiB0byB0aGUgY3Vyc29yLlxuICAgIGZvcmNlU3luY1NlbGVjdGlvbiA9IHRoaXMuYWNjZXNzaWJpbGl0eVJlYWRlcl8uaGFzVXNlckdlc3R1cmU7XG4gICAgdGhpcy5hY2Nlc3NpYmlsaXR5UmVhZGVyXy5hZnRlckN1cnNvckNoYW5nZShcbiAgICAgIGN1cnNvckxpbmVUZXh0LFxuICAgICAgY3Vyc29yUm93SW5kZXgsXG4gICAgICBjdXJzb3JDb2x1bW5JbmRleCxcbiAgICApO1xuICB9XG5cbiAgaWYgKGN1cnNvclJvd0luZGV4ID4gYm90dG9tUm93SW5kZXgpIHtcbiAgICAvLyBDdXJzb3IgaXMgc2Nyb2xsZWQgb2ZmIHNjcmVlbiwgbW92ZSBpdCBvdXRzaWRlIG9mIHRoZSB2aXNpYmxlIGFyZWEuXG4gICAgdGhpcy5zZXRDc3NWYXIoJ2N1cnNvci1vZmZzZXQtcm93JywgJy0xJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMub3B0aW9uc18uY3Vyc29yVmlzaWJsZSAmJiB0aGlzLmN1cnNvck5vZGVfLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSB7XG4gICAgLy8gUmUtZGlzcGxheSB0aGUgdGVybWluYWwgY3Vyc29yIGlmIGl0IHdhcyBoaWRkZW4gYnkgdGhlIG1vdXNlIGN1cnNvci5cbiAgICB0aGlzLmN1cnNvck5vZGVfLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgfVxuXG4gIC8vIFBvc2l0aW9uIHRoZSBjdXJzb3IgdXNpbmcgQ1NTIHZhcmlhYmxlIG1hdGguICBJZiB3ZSBkbyB0aGUgbWF0aCBpbiBKUyxcbiAgLy8gdGhlIGZsb2F0IG1hdGggd2lsbCBlbmQgdXAgYmVpbmcgbW9yZSBwcmVjaXNlIHRoYW4gdGhlIENTUyB3aGljaCB3aWxsXG4gIC8vIGNhdXNlIHRoZSBjdXJzb3IgdHJhY2tpbmcgdG8gYmUgb2ZmLlxuICB0aGlzLnNldENzc1ZhcihcbiAgICAnY3Vyc29yLW9mZnNldC1yb3cnLFxuICAgIGAke2N1cnNvclJvd0luZGV4IC0gdG9wUm93SW5kZXh9ICsgYCArXG4gICAgICBgJHt0aGlzLnNjcm9sbFBvcnRfLnZpc2libGVSb3dUb3BNYXJnaW59cHhgLFxuICApO1xuICB0aGlzLnNldENzc1ZhcignY3Vyc29yLW9mZnNldC1jb2wnLCB0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24uY29sdW1uKTtcblxuICB0aGlzLmN1cnNvck5vZGVfLnNldEF0dHJpYnV0ZShcbiAgICAndGl0bGUnLFxuICAgICcoJyArXG4gICAgICB0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24uY29sdW1uICtcbiAgICAgICcsICcgK1xuICAgICAgdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLnJvdyArXG4gICAgICAnKScsXG4gICk7XG5cbiAgLy8gVXBkYXRlIHRoZSBjYXJldCBmb3IgYTExeSBwdXJwb3Nlcy5cbiAgdmFyIHNlbGVjdGlvbiA9IHRoaXMuZG9jdW1lbnRfLmdldFNlbGVjdGlvbigpO1xuICBpZiAoc2VsZWN0aW9uICYmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQgfHwgZm9yY2VTeW5jU2VsZWN0aW9uKSkge1xuICAgIHRoaXMuc2NyZWVuXy5zeW5jU2VsZWN0aW9uQ2FyZXQoc2VsZWN0aW9uKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQWRqdXN0cyB0aGUgc3R5bGUgb2YgdGhpcy5jdXJzb3JOb2RlXyBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgY3Vyc29yIHNoYXBlXG4gKiBhbmQgY2hhcmFjdGVyIGNlbGwgZGltZW5zaW9ucy5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnJlc3R5bGVDdXJzb3JfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzaGFwZSA9IHRoaXMuY3Vyc29yU2hhcGVfO1xuXG4gIGlmICh0aGlzLmN1cnNvck5vZGVfLmdldEF0dHJpYnV0ZSgnZm9jdXMnKSA9PSAnZmFsc2UnKSB7XG4gICAgLy8gQWx3YXlzIHNob3cgYSBibG9jayBjdXJzb3Igd2hlbiB1bmZvY3VzZWQuXG4gICAgc2hhcGUgPSBodGVybS5UZXJtaW5hbC5jdXJzb3JTaGFwZS5CTE9DSztcbiAgfVxuXG4gIHZhciBzdHlsZSA9IHRoaXMuY3Vyc29yTm9kZV8uc3R5bGU7XG5cbiAgc3dpdGNoIChzaGFwZSkge1xuICAgIGNhc2UgaHRlcm0uVGVybWluYWwuY3Vyc29yU2hhcGUuQkVBTTpcbiAgICAgIHN0eWxlLmhlaWdodCA9ICd2YXIoLS1odGVybS1jaGFyc2l6ZS1oZWlnaHQpJztcbiAgICAgIHN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd0cmFuc3BhcmVudCc7XG4gICAgICBzdHlsZS5ib3JkZXJCb3R0b21TdHlsZSA9IG51bGw7XG4gICAgICBzdHlsZS5ib3JkZXJMZWZ0U3R5bGUgPSAnc29saWQnO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIGh0ZXJtLlRlcm1pbmFsLmN1cnNvclNoYXBlLlVOREVSTElORTpcbiAgICAgIHN0eWxlLmhlaWdodCA9IHRoaXMuc2Nyb2xsUG9ydF8uY2hhcmFjdGVyU2l6ZS5iYXNlbGluZSArICdweCc7XG4gICAgICBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xuICAgICAgc3R5bGUuYm9yZGVyQm90dG9tU3R5bGUgPSAnc29saWQnO1xuICAgICAgLy8gY29ycmVjdCB0aGUgc2l6ZSB0byBwdXQgaXQgZXhhY3RseSBhdCB0aGUgYmFzZWxpbmVcbiAgICAgIHN0eWxlLmJvcmRlckxlZnRTdHlsZSA9IG51bGw7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBzdHlsZS5oZWlnaHQgPSAndmFyKC0taHRlcm0tY2hhcnNpemUtaGVpZ2h0KSc7XG4gICAgICBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndmFyKC0taHRlcm0tY3Vyc29yLWNvbG9yKSc7XG4gICAgICBzdHlsZS5ib3JkZXJCb3R0b21TdHlsZSA9IG51bGw7XG4gICAgICBzdHlsZS5ib3JkZXJMZWZ0U3R5bGUgPSBudWxsO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbi8qKlxuICogU3luY2hyb25pemVzIHRoZSB2aXNpYmxlIGN1cnNvciB3aXRoIHRoZSBjdXJyZW50IGN1cnNvciBjb29yZGluYXRlcy5cbiAqXG4gKiBUaGUgc3luYyB3aWxsIGhhcHBlbiBhc3luY2hyb25vdXNseSwgc29vbiBhZnRlciB0aGUgY2FsbCBzdGFjayB3aW5kcyBkb3duLlxuICogTXVsdGlwbGUgY2FsbHMgd2lsbCBiZSBjb2FsZXNjZWQgaW50byBhIHNpbmdsZSBzeW5jLiBUaGlzIHNob3VsZCBiZSBjYWxsZWRcbiAqIHByaW9yIHRvIHRoZSBjdXJzb3IgYWN0dWFsbHkgY2hhbmdpbmcgcG9zaXRpb24uXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zY2hlZHVsZVN5bmNDdXJzb3JQb3NpdGlvbl8gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMudGltZW91dHNfLnN5bmNDdXJzb3IpIHJldHVybjtcblxuICBpZiAodGhpcy5hY2Nlc3NpYmlsaXR5UmVhZGVyXy5hY2Nlc3NpYmlsaXR5RW5hYmxlZCkge1xuICAgIC8vIFJlcG9ydCB0aGUgcHJldmlvdXMgcG9zaXRpb24gb2YgdGhlIGN1cnNvciBmb3IgYWNjZXNzaWJpbGl0eSBwdXJwb3Nlcy5cbiAgICBjb25zdCBjdXJzb3JSb3dJbmRleCA9XG4gICAgICB0aGlzLnNjcm9sbGJhY2tSb3dzXy5sZW5ndGggKyB0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24ucm93O1xuICAgIGNvbnN0IGN1cnNvckNvbHVtbkluZGV4ID0gdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLmNvbHVtbjtcbiAgICBjb25zdCBjdXJzb3JMaW5lVGV4dCA9IHRoaXMuc2NyZWVuXy5yb3dzQXJyYXlbXG4gICAgICB0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24ucm93XG4gICAgXS5pbm5lclRleHQ7XG4gICAgdGhpcy5hY2Nlc3NpYmlsaXR5UmVhZGVyXy5iZWZvcmVDdXJzb3JDaGFuZ2UoXG4gICAgICBjdXJzb3JMaW5lVGV4dCxcbiAgICAgIGN1cnNvclJvd0luZGV4LFxuICAgICAgY3Vyc29yQ29sdW1uSW5kZXgsXG4gICAgKTtcbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy50aW1lb3V0c18uc3luY0N1cnNvciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5zeW5jQ3Vyc29yUG9zaXRpb25fKCk7XG4gICAgZGVsZXRlIHNlbGYudGltZW91dHNfLnN5bmNDdXJzb3I7XG4gIH0sIDApO1xufTtcblxuLyoqXG4gKiBTaG93IG9yIGhpZGUgdGhlIHpvb20gd2FybmluZy5cbiAqXG4gKiBUaGUgem9vbSB3YXJuaW5nIGlzIGEgbWVzc2FnZSB3YXJuaW5nIHRoZSB1c2VyIHRoYXQgdGhlaXIgYnJvd3NlciB6b29tIG11c3RcbiAqIGJlIHNldCB0byAxMDAlIGluIG9yZGVyIGZvciBodGVybSB0byBmdW5jdGlvbiBwcm9wZXJseS5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIFRydWUgdG8gc2hvdyB0aGUgbWVzc2FnZSwgZmFsc2UgdG8gaGlkZSBpdC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNob3dab29tV2FybmluZ18gPSBmdW5jdGlvbihzdGF0ZSkge1xuICBpZiAoIXRoaXMuem9vbVdhcm5pbmdOb2RlXykge1xuICAgIGlmICghc3RhdGUpIHJldHVybjtcblxuICAgIHRoaXMuem9vbVdhcm5pbmdOb2RlXyA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuem9vbVdhcm5pbmdOb2RlXy5pZCA9ICdodGVybTp6b29tLXdhcm5pbmcnO1xuICAgIHRoaXMuem9vbVdhcm5pbmdOb2RlXy5zdHlsZS5jc3NUZXh0ID1cbiAgICAgICdjb2xvcjogYmxhY2s7JyArXG4gICAgICAnYmFja2dyb3VuZC1jb2xvcjogI2ZmMjIyMjsnICtcbiAgICAgICdmb250LXNpemU6IGxhcmdlOycgK1xuICAgICAgJ2JvcmRlci1yYWRpdXM6IDhweDsnICtcbiAgICAgICdvcGFjaXR5OiAwLjc1OycgK1xuICAgICAgJ3BhZGRpbmc6IDAuMmVtIDAuNWVtIDAuMmVtIDAuNWVtOycgK1xuICAgICAgJ3RvcDogMC41ZW07JyArXG4gICAgICAncmlnaHQ6IDEuMmVtOycgK1xuICAgICAgJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsnICtcbiAgICAgICctd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IG5vbmU7JyArXG4gICAgICAnLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsnICtcbiAgICAgICctbW96LXRleHQtc2l6ZS1hZGp1c3Q6IG5vbmU7JyArXG4gICAgICAnLW1vei11c2VyLXNlbGVjdDogbm9uZTsnO1xuXG4gICAgdGhpcy56b29tV2FybmluZ05vZGVfLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgdGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgIH0pO1xuICB9XG5cbiAgdGhpcy56b29tV2FybmluZ05vZGVfLnRleHRDb250ZW50ID0gbGliLk1lc3NhZ2VNYW5hZ2VyLnJlcGxhY2VSZWZlcmVuY2VzKFxuICAgIGh0ZXJtLnpvb21XYXJuaW5nTWVzc2FnZSxcbiAgICBbcGFyc2VJbnQodGhpcy5zY3JvbGxQb3J0Xy5jaGFyYWN0ZXJTaXplLnpvb21GYWN0b3IgKiAxMDApXSxcbiAgKTtcblxuICB0aGlzLnpvb21XYXJuaW5nTm9kZV8uc3R5bGUuZm9udEZhbWlseSA9IHRoaXMucHJlZnNfLmdldCgnZm9udC1mYW1pbHknKTtcblxuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAoIXRoaXMuem9vbVdhcm5pbmdOb2RlXy5wYXJlbnROb2RlKVxuICAgICAgdGhpcy5kaXZfLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcy56b29tV2FybmluZ05vZGVfKTtcbiAgfSBlbHNlIGlmICh0aGlzLnpvb21XYXJuaW5nTm9kZV8ucGFyZW50Tm9kZSkge1xuICAgIHRoaXMuem9vbVdhcm5pbmdOb2RlXy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuem9vbVdhcm5pbmdOb2RlXyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2hvdyB0aGUgdGVybWluYWwgb3ZlcmxheSBmb3IgYSBnaXZlbiBhbW91bnQgb2YgdGltZS5cbiAqXG4gKiBUaGUgdGVybWluYWwgb3ZlcmxheSBhcHBlYXJzIGluIGludmVyc2UgdmlkZW8gaW4gYSBsYXJnZSBmb250LCBjZW50ZXJlZFxuICogb3ZlciB0aGUgdGVybWluYWwuICBZb3Ugc2hvdWxkIHByb2JhYmx5IGtlZXAgdGhlIG92ZXJsYXkgbWVzc2FnZSBicmllZixcbiAqIHNpbmNlIGl0J3MgaW4gYSBsYXJnZSBmb250IGFuZCB5b3UgcHJvYmFibHkgYXJlbid0IGdvaW5nIHRvIGNoZWNrIHRoZSBzaXplXG4gKiBvZiB0aGUgdGVybWluYWwgZmlyc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1zZyBUaGUgdGV4dCAobm90IEhUTUwpIG1lc3NhZ2UgdG8gZGlzcGxheSBpbiB0aGUgb3ZlcmxheS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRfdGltZW91dCBUaGUgYW1vdW50IG9mIHRpbWUgdG8gd2FpdCBiZWZvcmUgZmFkaW5nIG91dFxuICogICAgIHRoZSBvdmVybGF5LiAgRGVmYXVsdHMgdG8gMS41IHNlY29uZHMuICBQYXNzIG51bGwgdG8gaGF2ZSB0aGUgb3ZlcmxheVxuICogICAgIHN0YXkgdXAgZm9yZXZlciAob3IgdW50aWwgdGhlIG5leHQgb3ZlcmxheSkuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zaG93T3ZlcmxheSA9IGZ1bmN0aW9uKG1zZywgb3B0X3RpbWVvdXQpIHtcbiAgaWYgKCF0aGlzLm92ZXJsYXlOb2RlXykge1xuICAgIGlmICghdGhpcy5kaXZfKSByZXR1cm47XG5cbiAgICB0aGlzLm92ZXJsYXlOb2RlXyA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMub3ZlcmxheU5vZGVfLnN0eWxlLmNzc1RleHQgPVxuICAgICAgJ2JvcmRlci1yYWRpdXM6IDE1cHg7JyArXG4gICAgICAnZm9udC1zaXplOiB4eC1sYXJnZTsnICtcbiAgICAgICdvcGFjaXR5OiAwLjc1OycgK1xuICAgICAgJ3BhZGRpbmc6IDAuMmVtIDAuNWVtIDAuMmVtIDAuNWVtOycgK1xuICAgICAgJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsnICtcbiAgICAgICctd2Via2l0LXVzZXItc2VsZWN0OiBub25lOycgK1xuICAgICAgJy13ZWJraXQtdHJhbnNpdGlvbjogb3BhY2l0eSAxODBtcyBlYXNlLWluOycgK1xuICAgICAgJy1tb3otdXNlci1zZWxlY3Q6IG5vbmU7JyArXG4gICAgICAnLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDE4MG1zIGVhc2UtaW47JztcblxuICAgIHRoaXMub3ZlcmxheU5vZGVfLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnbW91c2Vkb3duJyxcbiAgICAgIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfSxcbiAgICAgIHRydWUsXG4gICAgKTtcbiAgfVxuXG4gIHRoaXMub3ZlcmxheU5vZGVfLnN0eWxlLmNvbG9yID0gdGhpcy5wcmVmc18uZ2V0KCdiYWNrZ3JvdW5kLWNvbG9yJyk7XG4gIHRoaXMub3ZlcmxheU5vZGVfLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHRoaXMucHJlZnNfLmdldCgnZm9yZWdyb3VuZC1jb2xvcicpO1xuICB0aGlzLm92ZXJsYXlOb2RlXy5zdHlsZS5mb250RmFtaWx5ID0gdGhpcy5wcmVmc18uZ2V0KCdmb250LWZhbWlseScpO1xuXG4gIHRoaXMub3ZlcmxheU5vZGVfLnRleHRDb250ZW50ID0gbXNnO1xuICB0aGlzLm92ZXJsYXlOb2RlXy5zdHlsZS5vcGFjaXR5ID0gJzAuNzUnO1xuXG4gIGlmICghdGhpcy5vdmVybGF5Tm9kZV8ucGFyZW50Tm9kZSkgdGhpcy5kaXZfLmFwcGVuZENoaWxkKHRoaXMub3ZlcmxheU5vZGVfKTtcblxuICB2YXIgZGl2U2l6ZSA9IGh0ZXJtLmdldENsaWVudFNpemUodGhpcy5kaXZfKTtcbiAgdmFyIG92ZXJsYXlTaXplID0gaHRlcm0uZ2V0Q2xpZW50U2l6ZSh0aGlzLm92ZXJsYXlOb2RlXyk7XG5cbiAgdGhpcy5vdmVybGF5Tm9kZV8uc3R5bGUudG9wID1cbiAgICAoZGl2U2l6ZS5oZWlnaHQgLSBvdmVybGF5U2l6ZS5oZWlnaHQpIC8gMiArICdweCc7XG4gIHRoaXMub3ZlcmxheU5vZGVfLnN0eWxlLmxlZnQgPVxuICAgIChkaXZTaXplLndpZHRoIC1cbiAgICAgIG92ZXJsYXlTaXplLndpZHRoIC1cbiAgICAgIHRoaXMuc2Nyb2xsUG9ydF8uY3VycmVudFNjcm9sbGJhcldpZHRoUHgpIC9cbiAgICAgIDIgK1xuICAgICdweCc7XG5cbiAgaWYgKHRoaXMub3ZlcmxheVRpbWVvdXRfKSBjbGVhclRpbWVvdXQodGhpcy5vdmVybGF5VGltZW91dF8pO1xuXG4gIHRoaXMuYWNjZXNzaWJpbGl0eVJlYWRlcl8uYXNzZXJ0aXZlQW5ub3VuY2UobXNnKTtcblxuICBpZiAob3B0X3RpbWVvdXQgPT09IG51bGwpIHJldHVybjtcblxuICB0aGlzLm92ZXJsYXlUaW1lb3V0XyA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHRoaXMub3ZlcmxheU5vZGVfLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgdGhpcy5vdmVybGF5VGltZW91dF8gPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuaGlkZU92ZXJsYXkoKSwgMjAwKTtcbiAgfSwgb3B0X3RpbWVvdXQgfHwgMTUwMCk7XG59O1xuXG4vKipcbiAqIEhpZGUgdGhlIHRlcm1pbmFsIG92ZXJsYXkgaW1tZWRpYXRlbHkuXG4gKlxuICogVXNlZnVsIHdoZW4gd2Ugc2hvdyBhbiBvdmVybGF5IGZvciBhbiBldmVudCB3aXRoIGFuIHVua25vd24gZW5kIHRpbWUuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5oaWRlT3ZlcmxheSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5vdmVybGF5VGltZW91dF8pIGNsZWFyVGltZW91dCh0aGlzLm92ZXJsYXlUaW1lb3V0Xyk7XG4gIHRoaXMub3ZlcmxheVRpbWVvdXRfID0gbnVsbDtcblxuICBpZiAodGhpcy5vdmVybGF5Tm9kZV8ucGFyZW50Tm9kZSlcbiAgICB0aGlzLm92ZXJsYXlOb2RlXy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMub3ZlcmxheU5vZGVfKTtcbiAgdGhpcy5vdmVybGF5Tm9kZV8uc3R5bGUub3BhY2l0eSA9ICcwLjc1Jztcbn07XG5cbi8qKlxuICogUGFzdGUgZnJvbSB0aGUgc3lzdGVtIGNsaXBib2FyZCB0byB0aGUgdGVybWluYWwuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5wYXN0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gaHRlcm0ucGFzdGVGcm9tQ2xpcGJvYXJkKHRoaXMuZG9jdW1lbnRfKTtcbn07XG5cbi8qKlxuICogQ29weSBhIHN0cmluZyB0byB0aGUgc3lzdGVtIGNsaXBib2FyZC5cbiAqXG4gKiBOb3RlOiBJZiB0aGVyZSBpcyBhIHNlbGVjdGVkIHJhbmdlIGluIHRoZSB0ZXJtaW5hbCwgaXQnbGwgYmUgY2xlYXJlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY29weS5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmNvcHlTdHJpbmdUb0NsaXBib2FyZCA9IGZ1bmN0aW9uKHN0cikge1xuICBpZiAodGhpcy5wcmVmc18uZ2V0KCdlbmFibGUtY2xpcGJvYXJkLW5vdGljZScpKVxuICAgIHNldFRpbWVvdXQodGhpcy5zaG93T3ZlcmxheS5iaW5kKHRoaXMsIGh0ZXJtLm5vdGlmeUNvcHlNZXNzYWdlLCA1MDApLCAyMDApO1xuXG4gIHZhciBjb3B5U291cmNlID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgncHJlJyk7XG4gIGNvcHlTb3VyY2UuaWQgPSAnaHRlcm06Y29weS10by1jbGlwYm9hcmQtc291cmNlJztcbiAgY29weVNvdXJjZS50ZXh0Q29udGVudCA9IHN0cjtcbiAgY29weVNvdXJjZS5zdHlsZS5jc3NUZXh0ID1cbiAgICAnLXdlYmtpdC11c2VyLXNlbGVjdDogdGV4dDsnICtcbiAgICAnLW1vei11c2VyLXNlbGVjdDogdGV4dDsnICtcbiAgICAncG9zaXRpb246IGFic29sdXRlOycgK1xuICAgICd0b3A6IC05OXB4JztcblxuICB0aGlzLmRvY3VtZW50Xy5ib2R5LmFwcGVuZENoaWxkKGNvcHlTb3VyY2UpO1xuXG4gIHZhciBzZWxlY3Rpb24gPSB0aGlzLmRvY3VtZW50Xy5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGFuY2hvck5vZGUgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcbiAgdmFyIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQ7XG4gIHZhciBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICB2YXIgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG5cbiAgLy8gRkYgc29tZXRpbWVzIHRocm93cyBOU19FUlJPUl9GQUlMVVJFIGV4Y2VwdGlvbnMgd2hlbiB3ZSBtYWtlIHRoaXMgY2FsbC5cbiAgLy8gQ2F0Y2ggaXQgYmVjYXVzZSBhIGZhaWx1cmUgaGVyZSBsZWFrcyB0aGUgY29weVNvdXJjZSBub2RlLlxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMTc4Njc2XG4gIHRyeSB7XG4gICAgc2VsZWN0aW9uLnNlbGVjdEFsbENoaWxkcmVuKGNvcHlTb3VyY2UpO1xuICB9IGNhdGNoIChleCkge31cblxuICBodGVybS5jb3B5U2VsZWN0aW9uVG9DbGlwYm9hcmQodGhpcy5kb2N1bWVudF8pO1xuXG4gIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBzZWxlY3Rpb24uZXh0ZW5kLiBUaGlzIG1lYW5zIHRoYXQgdGhlIHNlbGVjdGlvblxuICAvLyB3b24ndCByZXR1cm4gb24gSUUuXG4gIGlmIChzZWxlY3Rpb24uZXh0ZW5kKSB7XG4gICAgc2VsZWN0aW9uLmNvbGxhcHNlKGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCk7XG4gICAgc2VsZWN0aW9uLmV4dGVuZChmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KTtcbiAgfVxuXG4gIGNvcHlTb3VyY2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjb3B5U291cmNlKTtcbn07XG5cbi8qKlxuICogRGlzcGxheSBhbiBpbWFnZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBUaGUgaW1hZ2UgdG8gZGlzcGxheS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0aW9ucy5uYW1lIEEgaHVtYW4gcmVhZGFibGUgc3RyaW5nIGZvciB0aGUgaW1hZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXI9fSBvcHRpb25zLnNpemUgVGhlIHNpemUgKGluIGJ5dGVzKS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdGlvbnMucHJlc2VydmVBc3BlY3RSYXRpbyBXaGV0aGVyIHRvIHByZXNlcnZlIGFzcGVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdGlvbnMuaW5saW5lIFdoZXRoZXIgdG8gZGlzcGxheSB0aGUgaW1hZ2UgaW5saW5lLlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyPX0gb3B0aW9ucy53aWR0aCBUaGUgd2lkdGggb2YgdGhlIGltYWdlLlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyPX0gb3B0aW9ucy5oZWlnaHQgVGhlIGhlaWdodCBvZiB0aGUgaW1hZ2UuXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdGlvbnMuYWxpZ24gRGlyZWN0aW9uIHRvIGFsaWduIHRoZSBpbWFnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnVyaSBUaGUgc291cmNlIFVSSSBmb3IgdGhlIGltYWdlLlxuICogQHBhcmFtIHtmdW5jdGlvbj19IG9uTG9hZCBDYWxsYmFjayB3aGVuIGxvYWRpbmcgZmluaXNoZXMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEV2ZW50KT19IG9uRXJyb3IgQ2FsbGJhY2sgd2hlbiBsb2FkaW5nIGZhaWxzLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuZGlzcGxheUltYWdlID0gZnVuY3Rpb24ob3B0aW9ucywgb25Mb2FkLCBvbkVycm9yKSB7XG4gIC8vIE1ha2Ugc3VyZSB3ZSdyZSBhY3R1YWxseSBnaXZlbiBhIHJlc291cmNlIHRvIGRpc3BsYXkuXG4gIGlmIChvcHRpb25zLnVyaSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgLy8gU2V0IHVwIHRoZSBkZWZhdWx0cyB0byBzaW1wbGlmeSBjb2RlIGJlbG93LlxuICBpZiAoIW9wdGlvbnMubmFtZSkgb3B0aW9ucy5uYW1lID0gJyc7XG5cbiAgLy8gSGFzIHRoZSB1c2VyIGFwcHJvdmVkIGltYWdlIGRpc3BsYXkgeWV0P1xuICBpZiAodGhpcy5hbGxvd0ltYWdlc0lubGluZSAhPT0gdHJ1ZSkge1xuICAgIHRoaXMubmV3TGluZSgpO1xuICAgIGNvbnN0IHJvdyA9IHRoaXMuZ2V0Um93Tm9kZShcbiAgICAgIHRoaXMuc2Nyb2xsYmFja1Jvd3NfLmxlbmd0aCArIHRoaXMuZ2V0Q3Vyc29yUm93KCkgLSAxLFxuICAgICk7XG5cbiAgICBpZiAodGhpcy5hbGxvd0ltYWdlc0lubGluZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJvdy50ZXh0Q29udGVudCA9IGh0ZXJtLm1zZyhcbiAgICAgICAgJ1BPUFVQX0lOTElORV9JTUFHRV9ESVNBQkxFRCcsXG4gICAgICAgIFtdLFxuICAgICAgICAnSW5saW5lIEltYWdlcyBEaXNhYmxlZCcsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNob3cgYSBwcm9tcHQuXG4gICAgbGV0IGJ1dHRvbjtcbiAgICBjb25zdCBzcGFuID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHNwYW4uaW5uZXJUZXh0ID0gaHRlcm0ubXNnKCdQT1BVUF9JTkxJTkVfSU1BR0UnLCBbXSwgJ0lubGluZSBJbWFnZXMnKTtcbiAgICBzcGFuLnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7XG4gICAgc3Bhbi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHgnO1xuICAgIHNwYW4uc3R5bGUuYm9yZGVyU3R5bGUgPSAnZGFzaGVkJztcbiAgICBidXR0b24gPSB0aGlzLmRvY3VtZW50Xy5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgYnV0dG9uLmlubmVyVGV4dCA9IGh0ZXJtLm1zZygnQlVUVE9OX0JMT0NLJywgW10sICdibG9jaycpO1xuICAgIGJ1dHRvbi5zdHlsZS5tYXJnaW5MZWZ0ID0gJzFlbSc7XG4gICAgYnV0dG9uLnN0eWxlLmJvcmRlcldpZHRoID0gJzFweCc7XG4gICAgYnV0dG9uLnN0eWxlLmJvcmRlclN0eWxlID0gJ3NvbGlkJztcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLnByZWZzXy5zZXQoJ2FsbG93LWltYWdlcy1pbmxpbmUnLCBmYWxzZSk7XG4gICAgfSk7XG4gICAgc3Bhbi5hcHBlbmRDaGlsZChidXR0b24pO1xuICAgIGJ1dHRvbiA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBidXR0b24uaW5uZXJUZXh0ID0gaHRlcm0ubXNnKFxuICAgICAgJ0JVVFRPTl9BTExPV19TRVNTSU9OJyxcbiAgICAgIFtdLFxuICAgICAgJ2FsbG93IHRoaXMgc2Vzc2lvbicsXG4gICAgKTtcbiAgICBidXR0b24uc3R5bGUubWFyZ2luTGVmdCA9ICcxZW0nO1xuICAgIGJ1dHRvbi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHgnO1xuICAgIGJ1dHRvbi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5hbGxvd0ltYWdlc0lubGluZSA9IHRydWU7XG4gICAgfSk7XG4gICAgc3Bhbi5hcHBlbmRDaGlsZChidXR0b24pO1xuICAgIGJ1dHRvbiA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBidXR0b24uaW5uZXJUZXh0ID0gaHRlcm0ubXNnKCdCVVRUT05fQUxMT1dfQUxXQVlTJywgW10sICdhbHdheXMgYWxsb3cnKTtcbiAgICBidXR0b24uc3R5bGUubWFyZ2luTGVmdCA9ICcxZW0nO1xuICAgIGJ1dHRvbi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHgnO1xuICAgIGJ1dHRvbi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5wcmVmc18uc2V0KCdhbGxvdy1pbWFnZXMtaW5saW5lJywgdHJ1ZSk7XG4gICAgfSk7XG4gICAgc3Bhbi5hcHBlbmRDaGlsZChidXR0b24pO1xuXG4gICAgcm93LmFwcGVuZENoaWxkKHNwYW4pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFNlZSBpZiB3ZSBzaG91bGQgc2hvdyB0aGlzIG9iamVjdCBkaXJlY3RseSwgb3IgZG93bmxvYWQgaXQuXG4gIGlmIChvcHRpb25zLmlubGluZSkge1xuICAgIGNvbnN0IGlvID0gdGhpcy5pby5wdXNoKCk7XG4gICAgaW8uc2hvd092ZXJsYXkoXG4gICAgICBodGVybS5tc2coJ0xPQURJTkdfUkVTT1VSQ0VfU1RBUlQnLCBbb3B0aW9ucy5uYW1lXSwgJ0xvYWRpbmcgJDEgLi4uJyksXG4gICAgICBudWxsLFxuICAgICk7XG5cbiAgICAvLyBXaGlsZSB3ZSdyZSBsb2FkaW5nIHRoZSBpbWFnZSwgZWF0IGFsbCB0aGUgdXNlcidzIGlucHV0LlxuICAgIGlvLm9uVlRLZXlzdHJva2UgPSBpby5zZW5kU3RyaW5nID0gKCkgPT4ge307XG5cbiAgICAvLyBJbml0aWFsaXplIHRoaXMgbmV3IGltYWdlLlxuICAgIGNvbnN0IGltZyA9IC8qKiBAdHlwZSB7IUhUTUxJbWFnZUVsZW1lbnR9ICovICh0aGlzLmRvY3VtZW50Xy5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2ltZycsXG4gICAgKSk7XG4gICAgaW1nLnNyYyA9IG9wdGlvbnMudXJpO1xuICAgIGltZy50aXRsZSA9IGltZy5hbHQgPSBvcHRpb25zLm5hbWU7XG5cbiAgICAvLyBBdHRhY2ggdGhlIGltYWdlIHRvIHRoZSBwYWdlIHRvIGxldCBpdCBsb2FkL3JlbmRlci4gIEl0IHdvbid0IHN0YXkgaGVyZS5cbiAgICAvLyBUaGlzIGlzIG5lZWRlZCBzbyBpdCdzIHZpc2libGUgYW5kIHRoZSBET00gY2FuIGNhbGN1bGF0ZSB0aGUgaGVpZ2h0LiAgSWZcbiAgICAvLyB0aGUgaW1hZ2UgaXMgaGlkZGVuIG9yIG5vdCBpbiB0aGUgRE9NLCB0aGUgaGVpZ2h0IGlzIGFsd2F5cyAwLlxuICAgIHRoaXMuZG9jdW1lbnRfLmJvZHkuYXBwZW5kQ2hpbGQoaW1nKTtcblxuICAgIC8vIFdhaXQgZm9yIHRoZSBpbWFnZSB0byBmaW5pc2ggbG9hZGluZyBiZWZvcmUgd2UgdHJ5IG1vdmluZyBpdCB0byB0aGVcbiAgICAvLyByaWdodCBwbGFjZSBpbiB0aGUgdGVybWluYWwuXG4gICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIC8vIE5vdyB0aGF0IHdlIGhhdmUgdGhlIGltYWdlIGRpbWVuc2lvbnMsIGZpZ3VyZSBvdXQgaG93IHRvIHNob3cgaXQuXG4gICAgICBpbWcuc3R5bGUub2JqZWN0Rml0ID0gb3B0aW9ucy5wcmVzZXJ2ZUFzcGVjdFJhdGlvID8gJ3NjYWxlLWRvd24nIDogJ2ZpbGwnO1xuICAgICAgaW1nLnN0eWxlLm1heFdpZHRoID0gYCR7dGhpcy5kb2N1bWVudF8uYm9keS5jbGllbnRXaWR0aH1weGA7XG4gICAgICBpbWcuc3R5bGUubWF4SGVpZ2h0ID0gYCR7dGhpcy5kb2N1bWVudF8uYm9keS5jbGllbnRIZWlnaHR9cHhgO1xuXG4gICAgICAvLyBQYXJzZSBhIHdpZHRoL2hlaWdodCBzcGVjaWZpY2F0aW9uLlxuICAgICAgY29uc3QgcGFyc2VEaW0gPSAoZGltLCBtYXhEaW0sIGNzc1ZhcikgPT4ge1xuICAgICAgICBpZiAoIWRpbSB8fCBkaW0gPT0gJ2F1dG8nKSByZXR1cm4gJyc7XG5cbiAgICAgICAgY29uc3QgYXJ5ID0gZGltLm1hdGNoKC9eKFswLTldKykocHh8JSk/JC8pO1xuICAgICAgICBpZiAoYXJ5KSB7XG4gICAgICAgICAgaWYgKGFyeVsyXSA9PSAnJScpIHJldHVybiAobWF4RGltICogcGFyc2VJbnQoYXJ5WzFdKSkgLyAxMDAgKyAncHgnO1xuICAgICAgICAgIGVsc2UgaWYgKGFyeVsyXSA9PSAncHgnKSByZXR1cm4gZGltO1xuICAgICAgICAgIGVsc2UgcmV0dXJuIGBjYWxjKCR7ZGltfSAqIHZhcigke2Nzc1Zhcn0pKWA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9O1xuICAgICAgaW1nLnN0eWxlLndpZHRoID0gcGFyc2VEaW0oXG4gICAgICAgIG9wdGlvbnMud2lkdGgsXG4gICAgICAgIHRoaXMuZG9jdW1lbnRfLmJvZHkuY2xpZW50V2lkdGgsXG4gICAgICAgICctLWh0ZXJtLWNoYXJzaXplLXdpZHRoJyxcbiAgICAgICk7XG4gICAgICBpbWcuc3R5bGUuaGVpZ2h0ID0gcGFyc2VEaW0oXG4gICAgICAgIG9wdGlvbnMuaGVpZ2h0LFxuICAgICAgICB0aGlzLmRvY3VtZW50Xy5ib2R5LmNsaWVudEhlaWdodCxcbiAgICAgICAgJy0taHRlcm0tY2hhcnNpemUtaGVpZ2h0JyxcbiAgICAgICk7XG5cbiAgICAgIC8vIEZpZ3VyZSBvdXQgaG93IG1hbnkgcm93cyB0aGUgaW1hZ2Ugb2NjdXBpZXMsIHRoZW4gYWRkIHRoYXQgbWFueS5cbiAgICAgIC8vIFhYWDogVGhpcyBjb3VudCB3aWxsIGJlIGluYWNjdXJhdGUgaWYgdGhlIGZvbnQgc2l6ZSBjaGFuZ2VzIG9uIHVzLlxuICAgICAgY29uc3QgcGFkUm93cyA9IE1hdGguY2VpbChcbiAgICAgICAgaW1nLmNsaWVudEhlaWdodCAvIHRoaXMuc2Nyb2xsUG9ydF8uY2hhcmFjdGVyU2l6ZS5oZWlnaHQsXG4gICAgICApO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWRSb3dzOyArK2kpIHRoaXMubmV3TGluZSgpO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIG1heCBoZWlnaHQgaW4gY2FzZSB0aGUgdXNlciBzaHJpbmtzIHRoZSBjaGFyYWN0ZXIgc2l6ZS5cbiAgICAgIGltZy5zdHlsZS5tYXhIZWlnaHQgPSBgY2FsYygke3BhZFJvd3N9ICogdmFyKC0taHRlcm0tY2hhcnNpemUtaGVpZ2h0KSlgO1xuXG4gICAgICAvLyBNb3ZlIHRoZSBpbWFnZSB0byB0aGUgbGFzdCByb3cuICBUaGlzIHdheSB3aGVuIHdlIHNjcm9sbCB1cCwgaXQgZG9lc24ndFxuICAgICAgLy8gZGlzYXBwZWFyIHdoZW4gdGhlIGZpcnN0IHJvdyBnZXRzIGNsaXBwZWQuICBJdCB3aWxsIGRpc2FwcGVhciB3aGVuIHdlXG4gICAgICAvLyBzY3JvbGwgZG93biBhbmQgdGhlIGxhc3Qgcm93IGlzIGNsaXBwZWQgLi4uXG4gICAgICB0aGlzLmRvY3VtZW50Xy5ib2R5LnJlbW92ZUNoaWxkKGltZyk7XG4gICAgICAvLyBDcmVhdGUgYSB3cmFwcGVyIG5vZGUgc28gd2UgY2FuIGRvIGFuIGFic29sdXRlIGluIGEgcmVsYXRpdmUgcG9zaXRpb24uXG4gICAgICAvLyBUaGlzIGhlbHBzIHdpdGggcm91bmRpbmcgZXJyb3JzIGJldHdlZW4gSlMgJiBDU1MgY291bnRzLlxuICAgICAgY29uc3QgZGl2ID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBkaXYuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgICAgZGl2LnN0eWxlLnRleHRBbGlnbiA9IG9wdGlvbnMuYWxpZ247XG4gICAgICBpbWcuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgaW1nLnN0eWxlLmJvdHRvbSA9ICdjYWxjKDBweCAtIHZhcigtLWh0ZXJtLWNoYXJzaXplLWhlaWdodCkpJztcbiAgICAgIGRpdi5hcHBlbmRDaGlsZChpbWcpO1xuICAgICAgY29uc3Qgcm93ID0gdGhpcy5nZXRSb3dOb2RlKFxuICAgICAgICB0aGlzLnNjcm9sbGJhY2tSb3dzXy5sZW5ndGggKyB0aGlzLmdldEN1cnNvclJvdygpIC0gMSxcbiAgICAgICk7XG4gICAgICByb3cuYXBwZW5kQ2hpbGQoZGl2KTtcblxuICAgICAgaW8uaGlkZU92ZXJsYXkoKTtcbiAgICAgIGlvLnBvcCgpO1xuXG4gICAgICBpZiAob25Mb2FkKSBvbkxvYWQoKTtcbiAgICB9O1xuXG4gICAgLy8gSWYgd2UgZ290IGEgbWFsZm9ybWVkIGltYWdlLCBnaXZlIHVwLlxuICAgIGltZy5vbmVycm9yID0gZSA9PiB7XG4gICAgICB0aGlzLmRvY3VtZW50Xy5ib2R5LnJlbW92ZUNoaWxkKGltZyk7XG4gICAgICBpby5zaG93T3ZlcmxheShcbiAgICAgICAgaHRlcm0ubXNnKFxuICAgICAgICAgICdMT0FESU5HX1JFU09VUkNFX0ZBSUxFRCcsXG4gICAgICAgICAgW29wdGlvbnMubmFtZV0sXG4gICAgICAgICAgJ0xvYWRpbmcgJDEgZmFpbGVkJyxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgICBpby5wb3AoKTtcblxuICAgICAgaWYgKG9uRXJyb3IpIG9uRXJyb3IoZSk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXZSBjYW4ndCB1c2UgY2hyb21lLmRvd25sb2Fkcy5kb3dubG9hZCBhcyB0aGF0IHJlcXVpcmVzIFwiZG93bmxvYWRzXCJcbiAgICAvLyBwZXJtaXNzaW9ucywgYW5kIHRoYXQgd29ya3Mgb25seSBpbiBleHRlbnNpb25zLCBub3QgYXBwcy5cbiAgICBjb25zdCBhID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGEuaHJlZiA9IG9wdGlvbnMudXJpO1xuICAgIGEuZG93bmxvYWQgPSBvcHRpb25zLm5hbWU7XG4gICAgdGhpcy5kb2N1bWVudF8uYm9keS5hcHBlbmRDaGlsZChhKTtcbiAgICBhLmNsaWNrKCk7XG4gICAgYS5yZW1vdmUoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzZWxlY3RlZCB0ZXh0LCBvciBudWxsIGlmIG5vIHRleHQgaXMgc2VsZWN0ZWQuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfG51bGx9XG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5nZXRTZWxlY3Rpb25UZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxlY3Rpb24gPSB0aGlzLnNjcm9sbFBvcnRfLnNlbGVjdGlvbjtcbiAgc2VsZWN0aW9uLnN5bmMoKTtcblxuICBpZiAoc2VsZWN0aW9uLmlzQ29sbGFwc2VkKSByZXR1cm4gbnVsbDtcblxuICAvLyBTdGFydCBvZmZzZXQgbWVhc3VyZXMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaW5lLlxuICB2YXIgc3RhcnRPZmZzZXQgPSBzZWxlY3Rpb24uc3RhcnRPZmZzZXQ7XG4gIHZhciBub2RlID0gc2VsZWN0aW9uLnN0YXJ0Tm9kZTtcblxuICAvLyBJZiBhbiB4LXJvdyBpc24ndCBzZWxlY3RlZCwgfG5vZGV8IHdpbGwgYmUgbnVsbC5cbiAgaWYgKCFub2RlKSByZXR1cm4gbnVsbDtcblxuICBpZiAobm9kZS5ub2RlTmFtZSAhPSAnWC1ST1cnKSB7XG4gICAgLy8gSWYgdGhlIHNlbGVjdGlvbiBkb2Vzbid0IHN0YXJ0IG9uIGFuIHgtcm93IG5vZGUsIHRoZW4gaXQgbXVzdCBiZVxuICAgIC8vIHNvbWV3aGVyZSBpbnNpZGUgdGhlIHgtcm93LiAgQWRkIGFueSBjaGFyYWN0ZXJzIGZyb20gcHJldmlvdXMgc2libGluZ3NcbiAgICAvLyBpbnRvIHRoZSBzdGFydCBvZmZzZXQuXG5cbiAgICBpZiAobm9kZS5ub2RlTmFtZSA9PSAnI3RleHQnICYmIG5vZGUucGFyZW50Tm9kZS5ub2RlTmFtZSA9PSAnU1BBTicpIHtcbiAgICAgIC8vIElmIG5vZGUgaXMgdGhlIHRleHQgbm9kZSBpbiBhIHN0eWxlZCBzcGFuLCBtb3ZlIHVwIHRvIHRoZSBzcGFuIG5vZGUuXG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHdoaWxlIChub2RlLnByZXZpb3VzU2libGluZykge1xuICAgICAgbm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgICAgc3RhcnRPZmZzZXQgKz0gaHRlcm0uVGV4dEF0dHJpYnV0ZXMubm9kZVdpZHRoKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEVuZCBvZmZzZXQgbWVhc3VyZXMgZnJvbSB0aGUgZW5kIG9mIHRoZSBsaW5lLlxuICB2YXIgZW5kT2Zmc2V0ID1cbiAgICBodGVybS5UZXh0QXR0cmlidXRlcy5ub2RlV2lkdGgoc2VsZWN0aW9uLmVuZE5vZGUpIC0gc2VsZWN0aW9uLmVuZE9mZnNldDtcbiAgbm9kZSA9IHNlbGVjdGlvbi5lbmROb2RlO1xuXG4gIGlmIChub2RlLm5vZGVOYW1lICE9ICdYLVJPVycpIHtcbiAgICAvLyBJZiB0aGUgc2VsZWN0aW9uIGRvZXNuJ3QgZW5kIG9uIGFuIHgtcm93IG5vZGUsIHRoZW4gaXQgbXVzdCBiZVxuICAgIC8vIHNvbWV3aGVyZSBpbnNpZGUgdGhlIHgtcm93LiAgQWRkIGFueSBjaGFyYWN0ZXJzIGZyb20gZm9sbG93aW5nIHNpYmxpbmdzXG4gICAgLy8gaW50byB0aGUgZW5kIG9mZnNldC5cblxuICAgIGlmIChub2RlLm5vZGVOYW1lID09ICcjdGV4dCcgJiYgbm9kZS5wYXJlbnROb2RlLm5vZGVOYW1lID09ICdTUEFOJykge1xuICAgICAgLy8gSWYgbm9kZSBpcyB0aGUgdGV4dCBub2RlIGluIGEgc3R5bGVkIHNwYW4sIG1vdmUgdXAgdG8gdGhlIHNwYW4gbm9kZS5cbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgd2hpbGUgKG5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgZW5kT2Zmc2V0ICs9IGh0ZXJtLlRleHRBdHRyaWJ1dGVzLm5vZGVXaWR0aChub2RlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcnYgPSB0aGlzLmdldFJvd3NUZXh0KFxuICAgIHNlbGVjdGlvbi5zdGFydFJvdy5yb3dJbmRleCxcbiAgICBzZWxlY3Rpb24uZW5kUm93LnJvd0luZGV4ICsgMSxcbiAgKTtcbiAgcmV0dXJuIGxpYi53Yy5zdWJzdHJpbmcocnYsIHN0YXJ0T2Zmc2V0LCBsaWIud2Muc3RyV2lkdGgocnYpIC0gZW5kT2Zmc2V0KTtcbn07XG5cbi8qKlxuICogQ29weSB0aGUgY3VycmVudCBzZWxlY3Rpb24gdG8gdGhlIHN5c3RlbSBjbGlwYm9hcmQsIHRoZW4gY2xlYXIgaXQgYWZ0ZXIgYVxuICogc2hvcnQgZGVsYXkuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5jb3B5U2VsZWN0aW9uVG9DbGlwYm9hcmQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRleHQgPSB0aGlzLmdldFNlbGVjdGlvblRleHQoKTtcbiAgaWYgKHRleHQgIT0gbnVsbCkgdGhpcy5jb3B5U3RyaW5nVG9DbGlwYm9hcmQodGV4dCk7XG59O1xuXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUub3ZlcmxheVNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zaG93T3ZlcmxheSh0aGlzLnNjcmVlblNpemUud2lkdGggKyAneCcgKyB0aGlzLnNjcmVlblNpemUuaGVpZ2h0KTtcbn07XG5cbi8qKlxuICogSW52b2tlZCBieSBodGVybS5UZXJtaW5hbC5LZXlib2FyZCB3aGVuIGEgVlQga2V5c3Ryb2tlIGlzIGRldGVjdGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIFZUIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGtleXN0cm9rZSwgaW4gVVRGLTE2LlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUub25WVEtleXN0cm9rZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICBpZiAodGhpcy5zY3JvbGxPbktleXN0cm9rZV8pXG4gICAgdGhpcy5zY3JvbGxQb3J0Xy5zY3JvbGxSb3dUb0JvdHRvbSh0aGlzLmdldFJvd0NvdW50KCkpO1xuXG4gIHRoaXMuaW8ub25WVEtleXN0cm9rZSh0aGlzLmtleWJvYXJkLmVuY29kZShzdHJpbmcpKTtcbn07XG5cbi8qKlxuICogT3BlbiB0aGUgc2VsZWN0ZWQgdXJsLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUub3BlblNlbGVjdGVkVXJsXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RyID0gdGhpcy5nZXRTZWxlY3Rpb25UZXh0KCk7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gc2VsZWN0aW9uLCB0cnkgYW5kIGV4cGFuZCB3aGVyZXZlciB0aGV5IGNsaWNrZWQuXG4gIGlmIChzdHIgPT0gbnVsbCkge1xuICAgIHRoaXMuc2NyZWVuXy5leHBhbmRTZWxlY3Rpb25Gb3JVcmwodGhpcy5kb2N1bWVudF8uZ2V0U2VsZWN0aW9uKCkpO1xuICAgIHN0ciA9IHRoaXMuZ2V0U2VsZWN0aW9uVGV4dCgpO1xuXG4gICAgLy8gSWYgY2xpY2tpbmcgaW4gZW1wdHkgc3BhY2UsIHJldHVybi5cbiAgICBpZiAoc3RyID09IG51bGwpIHJldHVybjtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBVUkwgaXMgdmFsaWQgYmVmb3JlIG9wZW5pbmcuXG4gIGlmIChzdHIubGVuZ3RoID4gMjA0OCB8fCBzdHIuc2VhcmNoKC9bXFxzXFxbXFxdKCl7fTw+XCInXFxcXF5gXS8pID49IDApIHJldHVybjtcblxuICAvLyBJZiB0aGUgVVJJIGlzbid0IGFuY2hvcmVkLCBpdCdsbCBvcGVuIHJlbGF0aXZlIHRvIHRoZSBleHRlbnNpb24uXG4gIC8vIFdlIGhhdmUgbm8gd2F5IG9mIGtub3dpbmcgdGhlIGNvcnJlY3Qgc2NoZW1hLCBzbyBhc3N1bWUgaHR0cC5cbiAgaWYgKHN0ci5zZWFyY2goJ15bYS16QS1aXVthLXpBLVowLTkrLi1dKjovLycpIDwgMCkge1xuICAgIC8vIFdlIGhhdmUgdG8gd2hpdGVsaXN0IGEgZmV3IHByb3RvY29scyB0aGF0IGxhY2sgYXV0aG9yaXRpZXMgYW5kIHRodXNcbiAgICAvLyBuZXZlciB1c2UgdGhlIC8vLiAgTGlrZSBtYWlsdG8uXG4gICAgc3dpdGNoIChzdHIuc3BsaXQoJzonLCAxKVswXSkge1xuICAgICAgY2FzZSAnbWFpbHRvJzpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzdHIgPSAnaHR0cDovLycgKyBzdHI7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGh0ZXJtLm9wZW5Vcmwoc3RyKTtcbn07XG5cbi8qKlxuICogTWFuYWdlIHRoZSBhdXRvbWF0aWMgbW91c2UgaGlkaW5nIGJlaGF2aW9yIHdoaWxlIHR5cGluZy5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB2IFdoZXRoZXIgdG8gZW5hYmxlIGF1dG9tYXRpYyBoaWRpbmcuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zZXRBdXRvbWF0aWNNb3VzZUhpZGluZyA9IGZ1bmN0aW9uKHYgPSBudWxsKSB7XG4gIC8vIFNpbmNlIENocm9tZSBPUyAmIG1hY09TIGRvIHRoaXMgYnkgZGVmYXVsdCBldmVyeXdoZXJlLCB3ZSBkb24ndCBuZWVkIHRvLlxuICAvLyBMaW51eCAmIFdpbmRvd3Mgc2VlbSB0byBsZWF2ZSB0aGlzIHRvIHNwZWNpZmljIGFwcGxpY2F0aW9ucyB0byBtYW5hZ2UuXG4gIGlmICh2ID09PSBudWxsKSB2ID0gaHRlcm0ub3MgIT0gJ2Nyb3MnICYmIGh0ZXJtLm9zICE9ICdtYWMnO1xuXG4gIHRoaXMubW91c2VIaWRlV2hpbGVUeXBpbmdfID0gISF2O1xufTtcblxuLyoqXG4gKiBIYW5kbGVyIGZvciBtb25pdG9yaW5nIHVzZXIga2V5Ym9hcmQgYWN0aXZpdHkuXG4gKlxuICogVGhpcyBpc24ndCBmb3IgcHJvY2Vzc2luZyB0aGUga2V5c3Ryb2tlcyBkaXJlY3RseSwgYnV0IGZvciB1cGRhdGluZyBhbnlcbiAqIHN0YXRlIHRoYXQgbWlnaHQgdG9nZ2xlIGJhc2VkIG9uIHRoZSB1c2VyIHVzaW5nIHRoZSBrZXlib2FyZCBhdCBhbGwuXG4gKlxuICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBlIFRoZSBrZXlib2FyZCBldmVudCB0aGF0IHRyaWdnZXJlZCB1cy5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLm9uS2V5Ym9hcmRBY3Rpdml0eV8gPSBmdW5jdGlvbihlKSB7XG4gIC8vIFdoZW4gdGhlIHVzZXIgc3RhcnRzIHR5cGluZywgaGlkZSB0aGUgbW91c2UgY3Vyc29yLlxuICBpZiAodGhpcy5tb3VzZUhpZGVXaGlsZVR5cGluZ18gJiYgIXRoaXMubW91c2VIaWRlRGVsYXlfKVxuICAgIHRoaXMuc2V0Q3NzVmFyKCdtb3VzZS1jdXJzb3Itc3R5bGUnLCAnbm9uZScpO1xufTtcblxuLyoqXG4gKiBBZGQgdGhlIHRlcm1pbmFsUm93IGFuZCB0ZXJtaW5hbENvbHVtbiBwcm9wZXJ0aWVzIHRvIG1vdXNlIGV2ZW50cyBhbmRcbiAqIHRoZW4gZm9yd2FyZCBvbiB0byBvbk1vdXNlKCkuXG4gKlxuICogVGhlIHRlcm1pbmFsUm93IGFuZCB0ZXJtaW5hbENvbHVtbiBwcm9wZXJ0aWVzIGNvbnRhaW4gdGhlIChyb3csIGNvbHVtbilcbiAqIGNvb3JkaW5hdGVzIGZvciB0aGUgbW91c2UgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZSBUaGUgbW91c2UgZXZlbnQgdG8gaGFuZGxlLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUub25Nb3VzZV8gPSBmdW5jdGlvbihlKSB7XG4gIGlmIChlLnByb2Nlc3NlZEJ5VGVybWluYWxIYW5kbGVyXykge1xuICAgIC8vIFdlIHJlZ2lzdGVyIG91ciBldmVudCBoYW5kbGVycyBvbiB0aGUgZG9jdW1lbnQsIGFzIHdlbGwgYXMgdGhlIGN1cnNvclxuICAgIC8vIGFuZCB0aGUgc2Nyb2xsIGJsb2NrZXIuICBNb3VzZSBldmVudHMgdGhhdCBvY2N1ciBvbiB0aGUgY3Vyc29yIG9yXG4gICAgLy8gc2Nyb2xsIGJsb2NrZXIgd2lsbCBhbHNvIGFwcGVhciBvbiB0aGUgZG9jdW1lbnQsIGJ1dCB3ZSBkb24ndCB3YW50IHRvXG4gICAgLy8gcHJvY2VzcyB0aGVtIHR3aWNlLlxuICAgIC8vXG4gICAgLy8gV2UgY2FuJ3QganVzdCBwcmV2ZW50IGJ1YmJsaW5nIGJlY2F1c2UgdGhhdCBoYXMgb3RoZXIgc2lkZSBlZmZlY3RzLCBzb1xuICAgIC8vIHdlIGRlY29yYXRlIHRoZSBldmVudCBvYmplY3Qgd2l0aCB0aGlzIHByb3BlcnR5IGluc3RlYWQuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQ29uc3VtZSBuYXZpZ2F0aW9uIGV2ZW50cy4gIEJ1dHRvbiAzIGlzIHVzdWFsbHkgXCJicm93c2VyIGJhY2tcIiBhbmRcbiAgLy8gYnV0dG9uIDQgaXMgXCJicm93c2VyIGZvcndhcmRcIiB3aGljaCB3ZSBkb24ndCB3YW50IHRvIGhhcHBlbi5cbiAgaWYgKGUuYnV0dG9uID4gMikge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAvLyBXZSBkb24ndCByZXR1cm4gc28gY2xpY2sgZXZlbnRzIGNhbiBiZSBwYXNzZWQgdG8gdGhlIHJlbW90ZSBiZWxvdy5cbiAgfVxuXG4gIHZhciByZXBvcnRNb3VzZUV2ZW50cyA9XG4gICAgIXRoaXMuZGVmZWF0TW91c2VSZXBvcnRzXyAmJlxuICAgIHRoaXMudnQubW91c2VSZXBvcnQgIT0gdGhpcy52dC5NT1VTRV9SRVBPUlRfRElTQUJMRUQ7XG5cbiAgZS5wcm9jZXNzZWRCeVRlcm1pbmFsSGFuZGxlcl8gPSB0cnVlO1xuXG4gIC8vIEhhbmRsZSBhdXRvIGhpZGluZyBvZiBtb3VzZSBjdXJzb3Igd2hpbGUgdHlwaW5nLlxuICBpZiAodGhpcy5tb3VzZUhpZGVXaGlsZVR5cGluZ18gJiYgIXRoaXMubW91c2VIaWRlRGVsYXlfKSB7XG4gICAgLy8gTWFrZSBzdXJlIHRoZSBtb3VzZSBjdXJzb3IgaXMgdmlzaWJsZS5cbiAgICB0aGlzLnN5bmNNb3VzZVN0eWxlKCk7XG4gICAgLy8gVGhpcyBkZWJvdW5jZSBpc24ndCBwZXJmZWN0LCBidXQgc2hvdWxkIHdvcmsgd2VsbCBlbm91Z2ggZm9yIHN1Y2ggYVxuICAgIC8vIHNpbXBsZSBpbXBsZW1lbnRhdGlvbi4gIElmIHRoZSB1c2VyIG1vdmVkIHRoZSBtb3VzZSwgd2UgZW5hYmxlZCB0aGlzXG4gICAgLy8gZGVib3VuY2UsIGFuZCB0aGVuIG1vdmVkIHRoZSBtb3VzZSBqdXN0IGJlZm9yZSB0aGUgdGltZW91dCwgd2Ugd291bGRuJ3RcbiAgICAvLyBkZWJvdW5jZSB0aGF0IGxhdGVyIG1vdmVtZW50LlxuICAgIHRoaXMubW91c2VIaWRlRGVsYXlfID0gc2V0VGltZW91dChcbiAgICAgICgpID0+ICh0aGlzLm1vdXNlSGlkZURlbGF5XyA9IG51bGwpLFxuICAgICAgMTAwMCxcbiAgICApO1xuICB9XG5cbiAgLy8gT25lIGJhc2VkIHJvdy9jb2x1bW4gc3RvcmVkIG9uIHRoZSBtb3VzZSBldmVudC5cbiAgZS50ZXJtaW5hbFJvdyA9XG4gICAgcGFyc2VJbnQoXG4gICAgICAoZS5jbGllbnRZIC0gdGhpcy5zY3JvbGxQb3J0Xy52aXNpYmxlUm93VG9wTWFyZ2luKSAvXG4gICAgICAgIHRoaXMuc2Nyb2xsUG9ydF8uY2hhcmFjdGVyU2l6ZS5oZWlnaHQsXG4gICAgKSArIDE7XG4gIGUudGVybWluYWxDb2x1bW4gPVxuICAgIHBhcnNlSW50KGUuY2xpZW50WCAvIHRoaXMuc2Nyb2xsUG9ydF8uY2hhcmFjdGVyU2l6ZS53aWR0aCkgKyAxO1xuXG4gIGlmIChlLnR5cGUgPT0gJ21vdXNlZG93bicgJiYgZS50ZXJtaW5hbENvbHVtbiA+IHRoaXMuc2NyZWVuU2l6ZS53aWR0aCkge1xuICAgIC8vIE1vdXNlZG93biBpbiB0aGUgc2Nyb2xsYmFyIGFyZWEuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMub3B0aW9uc18uY3Vyc29yVmlzaWJsZSAmJiAhcmVwb3J0TW91c2VFdmVudHMpIHtcbiAgICAvLyBJZiB0aGUgY3Vyc29yIGlzIHZpc2libGUgYW5kIHdlJ3JlIG5vdCBzZW5kaW5nIG1vdXNlIGV2ZW50cyB0byB0aGVcbiAgICAvLyBob3N0IGFwcCwgdGhlbiB3ZSB3YW50IHRvIGhpZGUgdGhlIHRlcm1pbmFsIGN1cnNvciB3aGVuIHRoZSBtb3VzZVxuICAgIC8vIGN1cnNvciBpcyBvdmVyIHRvcC4gIFRoaXMga2VlcHMgdGhlIHRlcm1pbmFsIGN1cnNvciBmcm9tIGludGVyZmVyaW5nXG4gICAgLy8gd2l0aCBsb2NhbCB0ZXh0IHNlbGVjdGlvbi5cbiAgICBpZiAoXG4gICAgICBlLnRlcm1pbmFsUm93IC0gMSA9PSB0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24ucm93ICYmXG4gICAgICBlLnRlcm1pbmFsQ29sdW1uIC0gMSA9PSB0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24uY29sdW1uXG4gICAgKSB7XG4gICAgICB0aGlzLmN1cnNvck5vZGVfLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmN1cnNvck5vZGVfLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSB7XG4gICAgICB0aGlzLmN1cnNvck5vZGVfLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICB9XG4gIH1cblxuICBpZiAoZS50eXBlID09ICdtb3VzZWRvd24nKSB7XG4gICAgdGhpcy5jb250ZXh0TWVudS5oaWRlKGUpO1xuXG4gICAgaWYgKGUuYWx0S2V5IHx8ICFyZXBvcnRNb3VzZUV2ZW50cykge1xuICAgICAgLy8gSWYgVlQgbW91c2UgcmVwb3J0aW5nIGlzIGRpc2FibGVkLCBvciBoYXMgYmVlbiBkZWZlYXRlZCB3aXRoXG4gICAgICAvLyBhbHQtbW91c2Vkb3duLCB0aGVuIHRoZSBtb3VzZSB3aWxsIGFjdCBvbiB0aGUgbG9jYWwgc2VsZWN0aW9uLlxuICAgICAgdGhpcy5kZWZlYXRNb3VzZVJlcG9ydHNfID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2V0U2VsZWN0aW9uRW5hYmxlZCh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIHdlIGRlZmVyIG93bmVyc2hpcCBvZiB0aGUgbW91c2UgdG8gdGhlIFZULlxuICAgICAgdGhpcy5kZWZlYXRNb3VzZVJlcG9ydHNfID0gZmFsc2U7XG4gICAgICB0aGlzLmRvY3VtZW50Xy5nZXRTZWxlY3Rpb24oKS5jb2xsYXBzZVRvRW5kKCk7XG4gICAgICB0aGlzLnNldFNlbGVjdGlvbkVuYWJsZWQoZmFsc2UpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghcmVwb3J0TW91c2VFdmVudHMpIHtcbiAgICBpZiAoZS50eXBlID09ICdkYmxjbGljaycpIHtcbiAgICAgIHRoaXMuc2NyZWVuXy5leHBhbmRTZWxlY3Rpb24odGhpcy5kb2N1bWVudF8uZ2V0U2VsZWN0aW9uKCkpO1xuICAgICAgaWYgKHRoaXMuY29weU9uU2VsZWN0KSB0aGlzLmNvcHlTZWxlY3Rpb25Ub0NsaXBib2FyZCh0aGlzLmRvY3VtZW50Xyk7XG4gICAgfVxuXG4gICAgaWYgKGUudHlwZSA9PSAnY2xpY2snICYmICFlLnNoaWZ0S2V5ICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSkge1xuICAgICAgLy8gRGVib3VuY2UgdGhpcyBldmVudCB3aXRoIHRoZSBkYmxjbGljayBldmVudC4gIElmIHlvdSB0cnkgdG8gZG91YmxlY2xpY2tcbiAgICAgIC8vIGEgVVJMIHRvIG9wZW4gaXQsIENocm9tZSB3aWxsIGZpcmUgY2xpY2sgdGhlbiBkYmxjbGljaywgYnV0IHdlIHdvbid0XG4gICAgICAvLyBoYXZlIGV4cGFuZGVkIHRoZSBzZWxlY3Rpb24gdGV4dCBhdCB0aGUgZmlyc3QgY2xpY2sgZXZlbnQuXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0c18ub3BlblVybCk7XG4gICAgICB0aGlzLnRpbWVvdXRzXy5vcGVuVXJsID0gc2V0VGltZW91dChcbiAgICAgICAgdGhpcy5vcGVuU2VsZWN0ZWRVcmxfLmJpbmQodGhpcyksXG4gICAgICAgIDUwMCxcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGUudHlwZSA9PSAnbW91c2Vkb3duJykge1xuICAgICAgaWYgKGUuY3RybEtleSAmJiBlLmJ1dHRvbiA9PSAyIC8qIHJpZ2h0IGJ1dHRvbiAqLykge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuY29udGV4dE1lbnUuc2hvdyhlLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGUuYnV0dG9uID09IHRoaXMubW91c2VQYXN0ZUJ1dHRvbiB8fFxuICAgICAgICAodGhpcy5tb3VzZVJpZ2h0Q2xpY2tQYXN0ZSAmJiBlLmJ1dHRvbiA9PSAyKSAvKiByaWdodCBidXR0b24gKi9cbiAgICAgICkge1xuICAgICAgICBpZiAoIXRoaXMucGFzdGUoKSlcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBwYXN0ZSBtYW51YWxseSBkdWUgdG8gd2ViIHJlc3RyaWN0aW9ucycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGUudHlwZSA9PSAnbW91c2V1cCcgJiZcbiAgICAgIGUuYnV0dG9uID09IDAgJiZcbiAgICAgIHRoaXMuY29weU9uU2VsZWN0ICYmXG4gICAgICAhdGhpcy5kb2N1bWVudF8uZ2V0U2VsZWN0aW9uKCkuaXNDb2xsYXBzZWRcbiAgICApIHtcbiAgICAgIHRoaXMuY29weVNlbGVjdGlvblRvQ2xpcGJvYXJkKHRoaXMuZG9jdW1lbnRfKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAoZS50eXBlID09ICdtb3VzZW1vdmUnIHx8IGUudHlwZSA9PSAnbW91c2V1cCcpICYmXG4gICAgICB0aGlzLnNjcm9sbEJsb2NrZXJOb2RlXy5lbmdhZ2VkXG4gICAgKSB7XG4gICAgICAvLyBEaXNlbmdhZ2UgdGhlIHNjcm9sbC1ibG9ja2VyIGFmdGVyIG9uZSBvZiB0aGVzZSBldmVudHMuXG4gICAgICB0aGlzLnNjcm9sbEJsb2NrZXJOb2RlXy5lbmdhZ2VkID0gZmFsc2U7XG4gICAgICB0aGlzLnNjcm9sbEJsb2NrZXJOb2RlXy5zdHlsZS50b3AgPSAnLTk5cHgnO1xuICAgIH1cblxuICAgIC8vIEVtdWxhdGUgYXJyb3cga2V5IHByZXNzZXMgdmlhIHNjcm9sbCB3aGVlbCBldmVudHMuXG4gICAgaWYgKFxuICAgICAgdGhpcy5zY3JvbGxXaGVlbEFycm93S2V5c18gJiZcbiAgICAgICFlLnNoaWZ0S2V5ICYmXG4gICAgICB0aGlzLmtleWJvYXJkLmFwcGxpY2F0aW9uQ3Vyc29yICYmXG4gICAgICAhdGhpcy5pc1ByaW1hcnlTY3JlZW4oKVxuICAgICkge1xuICAgICAgaWYgKGUudHlwZSA9PSAnd2hlZWwnKSB7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gdGhpcy5zY3JvbGxQb3J0Xy5zY3JvbGxXaGVlbERlbHRhKGUpO1xuXG4gICAgICAgIC8vIEhlbHBlciB0byB0dXJuIGEgd2hlZWwgZXZlbnQgZGVsdGEgaW50byBhIHNlcmllcyBvZiBrZXkgcHJlc3Nlcy5cbiAgICAgICAgY29uc3QgZGVsdGFUb0Fycm93cyA9IChkaXN0YW5jZSwgY2hhclNpemUsIGFycm93UG9zLCBhcnJvd05lZykgPT4ge1xuICAgICAgICAgIGlmIChkaXN0YW5jZSA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQ29udmVydCB0aGUgc2Nyb2xsIGRpc3RhbmNlIGludG8gYSBudW1iZXIgb2Ygcm93cy9jb2xzLlxuICAgICAgICAgIGNvbnN0IGNlbGxzID0gbGliLmYuc21hcnRGbG9vckRpdmlkZShNYXRoLmFicyhkaXN0YW5jZSksIGNoYXJTaXplKTtcbiAgICAgICAgICBjb25zdCBkYXRhID0gJ1xceDFiTycgKyAoZGlzdGFuY2UgPCAwID8gYXJyb3dOZWcgOiBhcnJvd1Bvcyk7XG4gICAgICAgICAgcmV0dXJuIGRhdGEucmVwZWF0KGNlbGxzKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBUaGUgb3JkZXIgYmV0d2VlbiB1cC9kb3duIGFuZCBsZWZ0L3JpZ2h0IGRvZXNuJ3QgcmVhbGx5IG1hdHRlci5cbiAgICAgICAgdGhpcy5pby5zZW5kU3RyaW5nKFxuICAgICAgICAgIC8vIFVwL2Rvd24gYXJyb3cga2V5cy5cbiAgICAgICAgICBkZWx0YVRvQXJyb3dzKFxuICAgICAgICAgICAgZGVsdGEueSxcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsUG9ydF8uY2hhcmFjdGVyU2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICAnQScsXG4gICAgICAgICAgICAnQicsXG4gICAgICAgICAgKSArXG4gICAgICAgICAgICAvLyBMZWZ0L3JpZ2h0IGFycm93IGtleXMuXG4gICAgICAgICAgICBkZWx0YVRvQXJyb3dzKFxuICAgICAgICAgICAgICBkZWx0YS54LFxuICAgICAgICAgICAgICB0aGlzLnNjcm9sbFBvcnRfLmNoYXJhY3RlclNpemUud2lkdGgsXG4gICAgICAgICAgICAgICdDJyxcbiAgICAgICAgICAgICAgJ0QnLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKTtcblxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfVxuICB9IC8qIGlmICh0aGlzLnJlcG9ydE1vdXNlRXZlbnRzKSAqLyBlbHNlIHtcbiAgICBpZiAoIXRoaXMuc2Nyb2xsQmxvY2tlck5vZGVfLmVuZ2FnZWQpIHtcbiAgICAgIGlmIChlLnR5cGUgPT0gJ21vdXNlZG93bicpIHtcbiAgICAgICAgLy8gTW92ZSB0aGUgc2Nyb2xsLWJsb2NrZXIgaW50byBwbGFjZSBpZiB3ZSB3YW50IHRvIGtlZXAgdGhlIHNjcm9sbHBvcnRcbiAgICAgICAgLy8gZnJvbSBzY3JvbGxpbmcuXG4gICAgICAgIHRoaXMuc2Nyb2xsQmxvY2tlck5vZGVfLmVuZ2FnZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjcm9sbEJsb2NrZXJOb2RlXy5zdHlsZS50b3AgPSBlLmNsaWVudFkgLSA1ICsgJ3B4JztcbiAgICAgICAgdGhpcy5zY3JvbGxCbG9ja2VyTm9kZV8uc3R5bGUubGVmdCA9IGUuY2xpZW50WCAtIDUgKyAncHgnO1xuICAgICAgfSBlbHNlIGlmIChlLnR5cGUgPT0gJ21vdXNlbW92ZScpIHtcbiAgICAgICAgLy8gT2guICBUaGlzIG1lYW5zIHRoYXQgZHJhZy1zY3JvbGwgd2FzIGRpc2FibGVkIEFGVEVSIHRoZSBtb3VzZSBkb3duLFxuICAgICAgICAvLyBpbiB3aGljaCBjYXNlIGl0J3MgdG9vIGxhdGUgdG8gZW5nYWdlIHRoZSBzY3JvbGwtYmxvY2tlci5cbiAgICAgICAgdGhpcy5kb2N1bWVudF8uZ2V0U2VsZWN0aW9uKCkuY29sbGFwc2VUb0VuZCgpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vbk1vdXNlKGUpO1xuICB9XG5cbiAgaWYgKGUudHlwZSA9PSAnbW91c2V1cCcgJiYgdGhpcy5kb2N1bWVudF8uZ2V0U2VsZWN0aW9uKCkuaXNDb2xsYXBzZWQpIHtcbiAgICAvLyBSZXN0b3JlIHRoaXMgb24gbW91c2V1cCBpbiBjYXNlIGl0IHdhcyB0ZW1wb3JhcmlseSBkZWZlYXRlZCB3aXRoIGFcbiAgICAvLyBhbHQtbW91c2Vkb3duLiAgT25seSBkbyB0aGlzIHdoZW4gdGhlIHNlbGVjdGlvbiBpcyBlbXB0eSBzbyB0aGF0XG4gICAgLy8gd2UgZG9uJ3QgaW1tZWRpYXRlbHkga2lsbCB0aGUgdXNlcnMgc2VsZWN0aW9uLlxuICAgIHRoaXMuZGVmZWF0TW91c2VSZXBvcnRzXyA9IGZhbHNlO1xuICB9XG59O1xuXG4vKipcbiAqIENsaWVudHMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgaWYgdGhleSBjYXJlIHRvIGtub3cgYWJvdXQgbW91c2UgZXZlbnRzLlxuICpcbiAqIFRoZSBldmVudCBwYXJhbWV0ZXIgd2lsbCBiZSBhIG5vcm1hbCBET00gbW91c2UgY2xpY2sgZXZlbnQgd2l0aCBhZGRpdGlvbmFsXG4gKiAndGVybWluYWxSb3cnIGFuZCAndGVybWluYWxDb2x1bW4nIHByb3BlcnRpZXMuXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZSBUaGUgbW91c2UgZXZlbnQgdG8gaGFuZGxlLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUub25Nb3VzZSA9IGZ1bmN0aW9uKGUpIHt9O1xuXG4vKipcbiAqIFJlYWN0IHdoZW4gZm9jdXMgY2hhbmdlcy5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGZvY3VzZWQgVHJ1ZSBpZiBmb2N1c2VkLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5vbkZvY3VzQ2hhbmdlXyA9IGZ1bmN0aW9uKGZvY3VzZWQpIHtcbiAgdGhpcy5jdXJzb3JOb2RlXy5zZXRBdHRyaWJ1dGUoJ2ZvY3VzJywgZm9jdXNlZCk7XG4gIHRoaXMucmVzdHlsZUN1cnNvcl8oKTtcblxuICBpZiAodGhpcy5yZXBvcnRGb2N1cylcbiAgICB0aGlzLmlvLnNlbmRTdHJpbmcoZm9jdXNlZCA9PT0gdHJ1ZSA/ICdcXHgxYltJJyA6ICdcXHgxYltPJyk7XG5cbiAgaWYgKGZvY3VzZWQgPT09IHRydWUpIHRoaXMuY2xvc2VCZWxsTm90aWZpY2F0aW9uc18oKTtcbn07XG5cbi8qKlxuICogUmVhY3Qgd2hlbiB0aGUgU2Nyb2xsUG9ydCBpcyBzY3JvbGxlZC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLm9uU2Nyb2xsXyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNjaGVkdWxlU3luY0N1cnNvclBvc2l0aW9uXygpO1xufTtcblxuLyoqXG4gKiBSZWFjdCB3aGVuIHRleHQgaXMgcGFzdGVkIGludG8gdGhlIHNjcm9sbFBvcnQuXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZSBUaGUgRE9NIHBhc3RlIGV2ZW50IHRvIGhhbmRsZS5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLm9uUGFzdGVfID0gZnVuY3Rpb24oZSkge1xuICB2YXIgZGF0YSA9IGUudGV4dC5yZXBsYWNlKC9cXG4vZ20sICdcXHInKTtcbiAgZGF0YSA9IHRoaXMua2V5Ym9hcmQuZW5jb2RlKGRhdGEpO1xuICBpZiAodGhpcy5vcHRpb25zXy5icmFja2V0ZWRQYXN0ZSkge1xuICAgIC8vIFdlIHN0cmlwIG91dCBtb3N0IGVzY2FwZSBzZXF1ZW5jZXMgYXMgdGhleSBjYW4gY2F1c2UgaXNzdWVzIChsaWtlXG4gICAgLy8gaW5zZXJ0aW5nIGFuIFxceDFiWzIwMX4gbWlkc3RyZWFtKS4gIFdlIHBhc3MgdGhyb3VnaCB3aGl0ZXNwYWNlXG4gICAgLy8gdGhvdWdoOiAweDA4OlxcYiAweDA5OlxcdCAweDBhOlxcbiAweDBkOlxcci5cbiAgICAvLyBUaGlzIG1hdGNoZXMgeHRlcm0gYmVoYXZpb3IuXG4gICAgY29uc3QgZmlsdGVyID0gZGF0YSA9PiBkYXRhLnJlcGxhY2UoL1tcXHgwMC1cXHgwN1xceDBiLVxceDBjXFx4MGUtXFx4MWZdL2csICcnKTtcbiAgICBkYXRhID0gJ1xceDFiWzIwMH4nICsgZmlsdGVyKGRhdGEpICsgJ1xceDFiWzIwMX4nO1xuICB9XG5cbiAgdGhpcy5pby5zZW5kU3RyaW5nKGRhdGEpO1xufTtcblxuLyoqXG4gKiBSZWFjdCB3aGVuIHRoZSB1c2VyIHRyaWVzIHRvIGNvcHkgZnJvbSB0aGUgc2Nyb2xsUG9ydC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBET00gY29weSBldmVudC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLm9uQ29weV8gPSBmdW5jdGlvbihlKSB7XG4gIGlmICghdGhpcy51c2VEZWZhdWx0V2luZG93Q29weSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBzZXRUaW1lb3V0KHRoaXMuY29weVNlbGVjdGlvblRvQ2xpcGJvYXJkLmJpbmQodGhpcyksIDApO1xuICB9XG59O1xuXG4vKipcbiAqIFJlYWN0IHdoZW4gdGhlIFNjcm9sbFBvcnQgaXMgcmVzaXplZC5cbiAqXG4gKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBub3QgZGlyZWN0bHkgY29udGFpbiBjb2RlIHRoYXQgYWx0ZXJzIHRoZSBpbnRlcm5hbFxuICogc3RhdGUgb2YgdGhlIHRlcm1pbmFsLiAgVGhhdCBraW5kIG9mIGNvZGUgYmVsb25ncyBpbiByZWFsaXplV2lkdGggb3JcbiAqIHJlYWxpemVIZWlnaHQsIHNvIHRoYXQgaXQgY2FuIGJlIGV4ZWN1dGVkIHN5bmNocm9ub3VzbHkgaW4gdGhlIGNhc2Ugb2YgYVxuICogcHJvZ3JhbW1hdGljIHdpZHRoIGNoYW5nZS5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLm9uUmVzaXplXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29sdW1uQ291bnQgPVxuICAgIE1hdGguZmxvb3IoXG4gICAgICB0aGlzLnNjcm9sbFBvcnRfLmdldFNjcmVlbldpZHRoKCkgLyB0aGlzLnNjcm9sbFBvcnRfLmNoYXJhY3RlclNpemUud2lkdGgsXG4gICAgKSB8fCAwO1xuICB2YXIgcm93Q291bnQgPVxuICAgIGxpYi5mLnNtYXJ0Rmxvb3JEaXZpZGUoXG4gICAgICB0aGlzLnNjcm9sbFBvcnRfLmdldFNjcmVlbkhlaWdodCgpLFxuICAgICAgdGhpcy5zY3JvbGxQb3J0Xy5jaGFyYWN0ZXJTaXplLmhlaWdodCxcbiAgICApIHx8IDA7XG5cbiAgaWYgKGNvbHVtbkNvdW50IDw9IDAgfHwgcm93Q291bnQgPD0gMCkge1xuICAgIC8vIFdlIGF2b2lkIHRoZXNlIHNpdHVhdGlvbnMgc2luY2UgdGhleSBoYXBwZW4gc29tZXRpbWVzIHdoZW4gdGhlIHRlcm1pbmFsXG4gICAgLy8gZ2V0cyByZW1vdmVkIGZyb20gdGhlIGRvY3VtZW50IG9yIGR1cmluZyB0aGUgaW5pdGlhbCBsb2FkLCBhbmQgd2UgY2FuJ3RcbiAgICAvLyBkZWFsIHdpdGggdGhhdC5cbiAgICAvLyBUaGlzIGNhbiBhbHNvIGhhcHBlbiBpZiBjYWxsZWQgYmVmb3JlIHRoZSBzY3JvbGxQb3J0IGNhbGN1bGF0ZXMgdGhlXG4gICAgLy8gY2hhcmFjdGVyIHNpemUsIG1lYW5pbmcgd2UgZGl2ZWQgYnkgMCBhYm92ZSBhbmQgZGVmYXVsdCB0byAwIHZhbHVlcy5cbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaXNOZXdTaXplID1cbiAgICBjb2x1bW5Db3VudCAhPSB0aGlzLnNjcmVlblNpemUud2lkdGggfHwgcm93Q291bnQgIT0gdGhpcy5zY3JlZW5TaXplLmhlaWdodDtcblxuICAvLyBXZSBkbyB0aGlzIGV2ZW4gaWYgdGhlIHNpemUgZGlkbid0IGNoYW5nZSwganVzdCB0byBiZSBzdXJlIGV2ZXJ5dGhpbmcgaXNcbiAgLy8gaW4gc3luYy5cbiAgdGhpcy5yZWFsaXplU2l6ZV8oY29sdW1uQ291bnQsIHJvd0NvdW50KTtcbiAgdGhpcy5zaG93Wm9vbVdhcm5pbmdfKHRoaXMuc2Nyb2xsUG9ydF8uY2hhcmFjdGVyU2l6ZS56b29tRmFjdG9yICE9IDEpO1xuXG4gIGlmIChpc05ld1NpemUpIHRoaXMub3ZlcmxheVNpemUoKTtcblxuICB0aGlzLnJlc3R5bGVDdXJzb3JfKCk7XG4gIHRoaXMuc2NoZWR1bGVTeW5jQ3Vyc29yUG9zaXRpb25fKCk7XG59O1xuXG4vKipcbiAqIFNlcnZpY2UgdGhlIGN1cnNvciBibGluayB0aW1lb3V0LlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUub25DdXJzb3JCbGlua18gPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLm9wdGlvbnNfLmN1cnNvckJsaW5rKSB7XG4gICAgZGVsZXRlIHRoaXMudGltZW91dHNfLmN1cnNvckJsaW5rO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChcbiAgICB0aGlzLmN1cnNvck5vZGVfLmdldEF0dHJpYnV0ZSgnZm9jdXMnKSA9PSAnZmFsc2UnIHx8XG4gICAgdGhpcy5jdXJzb3JOb2RlXy5zdHlsZS5vcGFjaXR5ID09ICcwJ1xuICApIHtcbiAgICB0aGlzLmN1cnNvck5vZGVfLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgdGhpcy50aW1lb3V0c18uY3Vyc29yQmxpbmsgPSBzZXRUaW1lb3V0KFxuICAgICAgdGhpcy5teU9uQ3Vyc29yQmxpbmtfLFxuICAgICAgdGhpcy5jdXJzb3JCbGlua0N5Y2xlX1swXSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY3Vyc29yTm9kZV8uc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICB0aGlzLnRpbWVvdXRzXy5jdXJzb3JCbGluayA9IHNldFRpbWVvdXQoXG4gICAgICB0aGlzLm15T25DdXJzb3JCbGlua18sXG4gICAgICB0aGlzLmN1cnNvckJsaW5rQ3ljbGVfWzFdLFxuICAgICk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0IHRoZSBzY3JvbGxiYXItdmlzaWJsZSBtb2RlIGJpdC5cbiAqXG4gKiBJZiBzY3JvbGxiYXItdmlzaWJsZSBpcyBvbiwgdGhlIHZlcnRpY2FsIHNjcm9sbGJhciB3aWxsIGJlIHZpc2libGUuXG4gKiBPdGhlcndpc2UgaXQgd2lsbCBub3QuXG4gKlxuICogRGVmYXVsdHMgdG8gb24uXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBzdGF0ZSBUcnVlIHRvIHNldCBzY3JvbGxiYXItdmlzaWJsZSBtb2RlLCBmYWxzZSB0byB1bnNldC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNldFNjcm9sbGJhclZpc2libGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICB0aGlzLnNjcm9sbFBvcnRfLnNldFNjcm9sbGJhclZpc2libGUoc3RhdGUpO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHNjcm9sbCB3aGVlbCBtb3ZlIG11bHRpcGxpZXIuICBUaGlzIHdpbGwgYWZmZWN0IGhvdyBmYXN0IHRoZSBwYWdlXG4gKiBzY3JvbGxzIG9uIHdoZWVsIGV2ZW50cy5cbiAqXG4gKiBEZWZhdWx0cyB0byAxLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWVyIFRoZSBtdWx0aXBsaWVyIHRvIHNldC5cbiAqL1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNldFNjcm9sbFdoZWVsTW92ZU11bHRpcGxlciA9IGZ1bmN0aW9uKG11bHRpcGxpZXIpIHtcbiAgdGhpcy5zY3JvbGxQb3J0Xy5zZXRTY3JvbGxXaGVlbE1vdmVNdWx0aXBsZXIobXVsdGlwbGllcik7XG59O1xuXG4vKipcbiAqIENsb3NlIGFsbCB3ZWIgbm90aWZpY2F0aW9ucyBjcmVhdGVkIGJ5IHRlcm1pbmFsIGJlbGxzLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuY2xvc2VCZWxsTm90aWZpY2F0aW9uc18gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5iZWxsTm90aWZpY2F0aW9uTGlzdF8uZm9yRWFjaChmdW5jdGlvbihuKSB7XG4gICAgbi5jbG9zZSgpO1xuICB9KTtcbiAgdGhpcy5iZWxsTm90aWZpY2F0aW9uTGlzdF8ubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3luY3MgdGhlIGN1cnNvciBwb3NpdGlvbiB3aGVuIHRoZSBzY3JvbGxwb3J0IGdhaW5zIGZvY3VzLlxuICovXG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUub25TY3JvbGxwb3J0Rm9jdXNfID0gZnVuY3Rpb24oKSB7XG4gIC8vIElmIHRoZSBjdXJzb3IgaXMgb2Zmc2NyZWVuIHdlIHNldCBzZWxlY3Rpb24gdG8gdGhlIGxhc3Qgcm93IG9uIHRoZSBzY3JlZW4uXG4gIGNvbnN0IHRvcFJvd0luZGV4ID0gdGhpcy5zY3JvbGxQb3J0Xy5nZXRUb3BSb3dJbmRleCgpO1xuICBjb25zdCBib3R0b21Sb3dJbmRleCA9IHRoaXMuc2Nyb2xsUG9ydF8uZ2V0Qm90dG9tUm93SW5kZXgodG9wUm93SW5kZXgpO1xuICBjb25zdCBzZWxlY3Rpb24gPSB0aGlzLmRvY3VtZW50Xy5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKCF0aGlzLnN5bmNDdXJzb3JQb3NpdGlvbl8oKSAmJiBzZWxlY3Rpb24pIHtcbiAgICBzZWxlY3Rpb24uY29sbGFwc2UodGhpcy5nZXRSb3dOb2RlKGJvdHRvbVJvd0luZGV4KSk7XG4gIH1cbn07XG4vLyBTT1VSQ0UgRklMRTogaHRlcm0vanMvaHRlcm1fdGVybWluYWxfaW8uanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxpYi5ydGRlcCgnbGliLmVuY29kZVVURjgnKTtcblxuLyoqXG4gKiBJbnB1dC9PdXRwdXQgaW50ZXJmYWNlIHVzZWQgYnkgY29tbWFuZHMgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgdGVybWluYWwuXG4gKlxuICogQ29tbWFuZHMgbGlrZSBgbmFzc2hgIGFuZCBgY3Jvc2hgIHJlY2VpdmUgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBhc1xuICogcGFydCBvZiB0aGVpciBhcmd2IG9iamVjdC4gIFRoaXMgYWxsb3dzIHRoZW0gdG8gd3JpdGUgdG8gYW5kIHJlYWQgZnJvbSB0aGVcbiAqIHRlcm1pbmFsIHdpdGhvdXQgZXhwb3NpbmcgdGhlbSB0byBhbiBlbnRpcmUgaHRlcm0uVGVybWluYWwgaW5zdGFuY2UuXG4gKlxuICogVGhlIGFjdGl2ZSBjb21tYW5kIG11c3Qgb3ZlcnJpZGUgdGhlIG9uVlRLZXlzdHJva2UoKSBhbmQgc2VuZFN0cmluZygpIG1ldGhvZHNcbiAqIG9mIHRoaXMgY2xhc3MgaW4gb3JkZXIgdG8gcmVjZWl2ZSBrZXlzdHJva2VzIGFuZCBzZW5kIG91dHB1dCB0byB0aGUgY29ycmVjdFxuICogZGVzdGluYXRpb24uXG4gKlxuICogSXNvbGF0aW5nIGNvbW1hbmRzIGZyb20gdGhlIHRlcm1pbmFsIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgYmVuZWZpdHM6XG4gKiAtIFByb3ZpZGVzIGEgbWVjaGFuaXNtIHRvIHNhdmUgYW5kIHJlc3RvcmUgb25WVEtleXN0cm9rZSBhbmQgc2VuZFN0cmluZ1xuICogICBoYW5kbGVycyB3aGVuIGludm9raW5nIHN1YmNvbW1hbmRzIChzZWUgdGhlIHB1c2goKSBhbmQgcG9wKCkgbWV0aG9kcykuXG4gKiAtIFRoZSBpc29sYXRpb24gbWFrZXMgaXQgZWFzaWVyIHRvIG1ha2UgY2hhbmdlcyBpbiBUZXJtaW5hbCBhbmQgc3VwcG9ydGluZ1xuICogICBjbGFzc2VzIHdpdGhvdXQgYWZmZWN0aW5nIGNvbW1hbmRzLlxuICogLSBJbiBUaGUgRnV0dXJlIGNvbW1hbmRzIG1heSBydW4gaW4gd2ViIHdvcmtlcnMgd2hlcmUgdGhleSB3b3VsZCBvbmx5IGJlIGFibGVcbiAqICAgdG8gdGFsayB0byBhIFRlcm1pbmFsIGluc3RhbmNlIHRocm91Z2ggYW4gSVBDIG1lY2hhbmlzbS5cbiAqXG4gKiBAcGFyYW0ge2h0ZXJtLlRlcm1pbmFsfVxuICovXG5odGVybS5UZXJtaW5hbC5JTyA9IGZ1bmN0aW9uKHRlcm1pbmFsKSB7XG4gIHRoaXMudGVybWluYWxfID0gdGVybWluYWw7XG5cbiAgLy8gVGhlIElPIG9iamVjdCB0byByZXN0b3JlIG9uIElPLnBvcCgpLlxuICB0aGlzLnByZXZpb3VzSU9fID0gbnVsbDtcblxuICAvLyBBbnkgZGF0YSB0aGlzIG9iamVjdCBhY2N1bXVsYXRlZCB3aGlsZSBub3QgYWN0aXZlLlxuICB0aGlzLmJ1ZmZlcmVkXyA9ICcnO1xufTtcblxuLyoqXG4gKiBTaG93IHRoZSB0ZXJtaW5hbCBvdmVybGF5IGZvciBhIGdpdmVuIGFtb3VudCBvZiB0aW1lLlxuICpcbiAqIFRoZSB0ZXJtaW5hbCBvdmVybGF5IGFwcGVhcnMgaW4gaW52ZXJzZSB2aWRlbyBpbiBhIGxhcmdlIGZvbnQsIGNlbnRlcmVkXG4gKiBvdmVyIHRoZSB0ZXJtaW5hbC4gIFlvdSBzaG91bGQgcHJvYmFibHkga2VlcCB0aGUgb3ZlcmxheSBtZXNzYWdlIGJyaWVmLFxuICogc2luY2UgaXQncyBpbiBhIGxhcmdlIGZvbnQgYW5kIHlvdSBwcm9iYWJseSBhcmVuJ3QgZ29pbmcgdG8gY2hlY2sgdGhlIHNpemVcbiAqIG9mIHRoZSB0ZXJtaW5hbCBmaXJzdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbXNnIFRoZSB0ZXh0IChub3QgSFRNTCkgbWVzc2FnZSB0byBkaXNwbGF5IGluIHRoZSBvdmVybGF5LlxuICogQHBhcmFtIHtudW1iZXJ9IG9wdF90aW1lb3V0IFRoZSBhbW91bnQgb2YgdGltZSB0byB3YWl0IGJlZm9yZSBmYWRpbmcgb3V0XG4gKiAgICAgdGhlIG92ZXJsYXkuICBEZWZhdWx0cyB0byAxLjUgc2Vjb25kcy4gIFBhc3MgbnVsbCB0byBoYXZlIHRoZSBvdmVybGF5XG4gKiAgICAgc3RheSB1cCBmb3JldmVyIChvciB1bnRpbCB0aGUgbmV4dCBvdmVybGF5KS5cbiAqL1xuaHRlcm0uVGVybWluYWwuSU8ucHJvdG90eXBlLnNob3dPdmVybGF5ID0gZnVuY3Rpb24obWVzc2FnZSwgb3B0X3RpbWVvdXQpIHtcbiAgdGhpcy50ZXJtaW5hbF8uc2hvd092ZXJsYXkobWVzc2FnZSwgb3B0X3RpbWVvdXQpO1xufTtcblxuLyoqXG4gKiBIaWRlIHRoZSBjdXJyZW50IG92ZXJsYXkgaW1tZWRpYXRlbHkuXG4gKlxuICogVXNlZnVsIHdoZW4gd2Ugc2hvdyBhbiBvdmVybGF5IGZvciBhbiBldmVudCB3aXRoIGFuIHVua25vd24gZW5kIHRpbWUuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLklPLnByb3RvdHlwZS5oaWRlT3ZlcmxheSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnRlcm1pbmFsXy5oaWRlT3ZlcmxheSgpO1xufTtcblxuLyoqXG4gKiBPcGVuIGFuIGZyYW1lIGluIHRoZSBjdXJyZW50IHRlcm1pbmFsIHdpbmRvdywgcG9pbnRlZCB0byB0aGUgc3BlY2lmaWVkXG4gKiB1cmwuXG4gKlxuICogRXZlbnR1YWxseSB3ZSdsbCBwcm9iYWJseSBuZWVkIHNpemUvcG9zaXRpb24vZGVjb3JhdGlvbiBvcHRpb25zLlxuICogVGhlIHVzZXIgc2hvdWxkIGFsc28gYmUgYWJsZSB0byBtb3ZlL3Jlc2l6ZSB0aGUgZnJhbWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIGxvYWQgaW4gdGhlIGZyYW1lLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdF9vcHRpb25zIE9wdGlvbmFsIGZyYW1lIG9wdGlvbnMuICBOb3QgaW1wbGVtZW50ZWQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLklPLnByb3RvdHlwZS5jcmVhdGVGcmFtZSA9IGZ1bmN0aW9uKHVybCwgb3B0X29wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBodGVybS5GcmFtZSh0aGlzLnRlcm1pbmFsXywgdXJsLCBvcHRfb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIENoYW5nZSB0aGUgcHJlZmVyZW5jZSBwcm9maWxlIGZvciB0aGUgdGVybWluYWwuXG4gKlxuICogQHBhcmFtIHByb2ZpbGVOYW1lIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBwcmVmZXJlbmNlIHByb2ZpbGUgdG8gYWN0aXZhdGUuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLklPLnByb3RvdHlwZS5zZXRUZXJtaW5hbFByb2ZpbGUgPSBmdW5jdGlvbihwcm9maWxlTmFtZSkge1xuICB0aGlzLnRlcm1pbmFsXy5zZXRQcm9maWxlKHByb2ZpbGVOYW1lKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGh0ZXJtLlRlcm1pbmFsLklPIGluc3RhbmNlIGFuZCBtYWtlIGl0IGFjdGl2ZSBvbiB0aGUgVGVybWluYWxcbiAqIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBpbnN0YW5jZS5cbiAqXG4gKiBUaGlzIGlzIHVzZWQgdG8gcGFzcyBjb250cm9sIG9mIHRoZSB0ZXJtaW5hbCBJTyBvZmYgdG8gYSBzdWJjb21tYW5kLiAgVGhlXG4gKiBJTy5wb3AoKSBtZXRob2QgY2FuIGJlIHVzZWQgdG8gcmVzdG9yZSBjb250cm9sIHdoZW4gdGhlIHN1YmNvbW1hbmQgY29tcGxldGVzLlxuICovXG5odGVybS5UZXJtaW5hbC5JTy5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaW8gPSBuZXcgaHRlcm0uVGVybWluYWwuSU8odGhpcy50ZXJtaW5hbF8pO1xuICBpby5rZXlib2FyZENhcHR1cmVkXyA9IHRoaXMua2V5Ym9hcmRDYXB0dXJlZF87XG5cbiAgaW8uY29sdW1uQ291bnQgPSB0aGlzLmNvbHVtbkNvdW50O1xuICBpby5yb3dDb3VudCA9IHRoaXMucm93Q291bnQ7XG5cbiAgaW8ucHJldmlvdXNJT18gPSB0aGlzLnRlcm1pbmFsXy5pbztcbiAgdGhpcy50ZXJtaW5hbF8uaW8gPSBpbztcblxuICByZXR1cm4gaW87XG59O1xuXG4vKipcbiAqIFJlc3RvcmUgdGhlIFRlcm1pbmFsJ3MgcHJldmlvdXMgSU8gb2JqZWN0LlxuICpcbiAqIFdlJ2xsIGZsdXNoIG91dCBhbnkgcXVldWVkIGRhdGEuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLklPLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy50ZXJtaW5hbF8uaW8gPSB0aGlzLnByZXZpb3VzSU9fO1xuICB0aGlzLnByZXZpb3VzSU9fLmZsdXNoKCk7XG59O1xuXG4vKipcbiAqIEZsdXNoIGFjY3VtdWxhdGVkIGRhdGEuXG4gKlxuICogSWYgd2UncmUgbm90IHRoZSBhY3RpdmUgSU8sIHRoZSBjb25uZWN0ZWQgcHJvY2VzcyBtaWdodCBzdGlsbCBiZSB3cml0aW5nXG4gKiBkYXRhIHRvIHVzLCBidXQgd2Ugd29uJ3QgYmUgZGlzcGxheWluZyBpdC4gIEZsdXNoIGFueSBidWZmZXJlZCBkYXRhIG5vdy5cbiAqL1xuaHRlcm0uVGVybWluYWwuSU8ucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmJ1ZmZlcmVkXykge1xuICAgIHRoaXMudGVybWluYWxfLmludGVycHJldCh0aGlzLmJ1ZmZlcmVkXyk7XG4gICAgdGhpcy5idWZmZXJlZF8gPSAnJztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBkYXRhIG5lZWRzIHRvIGJlIHNlbnQgdG8gdGhlIGN1cnJlbnQgY29tbWFuZC5cbiAqXG4gKiBDbGllbnRzIHNob3VsZCBvdmVycmlkZSB0aGlzIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9uIG9mIHBlbmRpbmcgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBkYXRhIHRvIHNlbmQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLklPLnByb3RvdHlwZS5zZW5kU3RyaW5nID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gIC8vIE92ZXJyaWRlIHRoaXMuXG4gIGNvbnNvbGUubG9nKCdVbmhhbmRsZWQgc2VuZFN0cmluZzogJyArIHN0cmluZyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIGEgdGVybWluYWwga2V5c3Ryb2tlIGlzIGRldGVjdGVkLlxuICpcbiAqIENsaWVudHMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgdG8gcmVjZWl2ZSBub3RpZmljYXRpb24gb2Yga2V5c3Ryb2tlcy5cbiAqXG4gKiBUaGUga2V5c3Ryb2tlIGRhdGEgd2lsbCBiZSBlbmNvZGVkIGFjY29yZGluZyB0byB0aGUgJ3NlbmQtZW5jb2RpbmcnXG4gKiBwcmVmZXJlbmNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIFZUIGtleSBzZXF1ZW5jZS5cbiAqL1xuaHRlcm0uVGVybWluYWwuSU8ucHJvdG90eXBlLm9uVlRLZXlzdHJva2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgLy8gT3ZlcnJpZGUgdGhpcy5cbiAgY29uc29sZS5sb2coJ1Vub2JzZXJ2ZXJkIFZUIGtleXN0cm9rZTogJyArIEpTT04uc3RyaW5naWZ5KHN0cmluZykpO1xufTtcblxuaHRlcm0uVGVybWluYWwuSU8ucHJvdG90eXBlLm9uVGVybWluYWxSZXNpemVfID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICB2YXIgb2JqID0gdGhpcztcbiAgd2hpbGUgKG9iaikge1xuICAgIG9iai5jb2x1bW5Db3VudCA9IHdpZHRoO1xuICAgIG9iai5yb3dDb3VudCA9IGhlaWdodDtcbiAgICBvYmogPSBvYmoucHJldmlvdXNJT187XG4gIH1cblxuICB0aGlzLm9uVGVybWluYWxSZXNpemUod2lkdGgsIGhlaWdodCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHRlcm1pbmFsIHNpemUgaXMgY2hhbmdlZC5cbiAqXG4gKiBDbGllbnRzIHNob3VsZCBvdmVycmlkZSB0aGlzIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9uIG9mIHJlc2l6ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xpbnRlZ2VyfSB0ZXJtaW5hbCB3aWR0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfGludGVnZXJ9IHRlcm1pbmFsIGhlaWdodC5cbiAqL1xuaHRlcm0uVGVybWluYWwuSU8ucHJvdG90eXBlLm9uVGVybWluYWxSZXNpemUgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gIC8vIE92ZXJyaWRlIHRoaXMuXG59O1xuXG4vKipcbiAqIFdyaXRlIGEgVVRGLTggZW5jb2RlZCBieXRlIHN0cmluZyB0byB0aGUgdGVybWluYWwuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgVVRGLTggZW5jb2RlZCBzdHJpbmcgdG8gcHJpbnQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLklPLnByb3RvdHlwZS53cml0ZVVURjggPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgLy8gSWYgYW5vdGhlciBwcm9jZXNzIGhhcyB0aGUgZm9yZWdyb3VuZCBJTywgYnVmZmVyIG5ldyBkYXRhIHNlbnQgdG8gdGhpcyBJT1xuICAvLyAoc2luY2UgaXQncyBpbiB0aGUgYmFja2dyb3VuZCkuICBXaGVuIHdlJ3JlIG1hZGUgdGhlIGZvcmVncm91bmQgSU8gYWdhaW4sXG4gIC8vIHdlJ2xsIGZsdXNoIGV2ZXJ5dGhpbmcuXG4gIGlmICh0aGlzLnRlcm1pbmFsXy5pbyAhPSB0aGlzKSB7XG4gICAgdGhpcy5idWZmZXJlZF8gKz0gc3RyaW5nO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMudGVybWluYWxfLmludGVycHJldChzdHJpbmcpO1xufTtcblxuLyoqXG4gKiBXcml0ZSBhIFVURi04IGVuY29kZWQgYnl0ZSBzdHJpbmcgdG8gdGhlIHRlcm1pbmFsIGZvbGxvd2VkIGJ5IGNybGYuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgVVRGLTggZW5jb2RlZCBzdHJpbmcgdG8gcHJpbnQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLklPLnByb3RvdHlwZS53cml0ZWxuVVRGOCA9IGZ1bmN0aW9uKHN0cmluZykge1xuICB0aGlzLndyaXRlVVRGOChzdHJpbmcgKyAnXFxyXFxuJyk7XG59O1xuXG4vKipcbiAqIFdyaXRlIGEgVVRGLTE2IEphdmFTY3JpcHQgc3RyaW5nIHRvIHRoZSB0ZXJtaW5hbC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcHJpbnQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLklPLnByb3RvdHlwZS5wcmludCA9IGh0ZXJtLlRlcm1pbmFsLklPLnByb3RvdHlwZS53cml0ZVVURjE2ID0gZnVuY3Rpb24oXG4gIHN0cmluZyxcbikge1xuICB0aGlzLndyaXRlVVRGOChsaWIuZW5jb2RlVVRGOChzdHJpbmcpKTtcbn07XG5cbi8qKlxuICogUHJpbnQgYSBVVEYtMTYgSmF2YVNjcmlwdCBzdHJpbmcgdG8gdGhlIHRlcm1pbmFsIGZvbGxvd2VkIGJ5IGEgbmV3bGluZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcHJpbnQuXG4gKi9cbmh0ZXJtLlRlcm1pbmFsLklPLnByb3RvdHlwZS5wcmludGxuID0gaHRlcm0uVGVybWluYWwuSU8ucHJvdG90eXBlLndyaXRlbG5VVEYxNiA9IGZ1bmN0aW9uKFxuICBzdHJpbmcsXG4pIHtcbiAgdGhpcy53cml0ZWxuVVRGOChsaWIuZW5jb2RlVVRGOChzdHJpbmcpKTtcbn07XG4vLyBTT1VSQ0UgRklMRTogaHRlcm0vanMvaHRlcm1fdGV4dF9hdHRyaWJ1dGVzLmpzXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTIgVGhlIENocm9taXVtIE9TIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4vLyBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLlxuXG5saWIucnRkZXAoJ2xpYi5jb2xvcnMnKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmb3IgVGV4dEF0dHJpYnV0ZSBvYmplY3RzLlxuICpcbiAqIFRoZXNlIG9iamVjdHMgbWFuYWdlIGEgc2V0IG9mIHRleHQgYXR0cmlidXRlcyBzdWNoIGFzIGZvcmVncm91bmQvXG4gKiBiYWNrZ3JvdW5kIGNvbG9yLCBib2xkLCBmYWludCwgaXRhbGljLCBibGluaywgdW5kZXJsaW5lLCBhbmQgc3RyaWtldGhyb3VnaC5cbiAqXG4gKiBUZXh0QXR0cmlidXRlIGluc3RhbmNlcyBjYW4gYmUgdXNlZCB0byBjb25zdHJ1Y3QgYSBET00gY29udGFpbmVyIGltcGxlbWVudGluZ1xuICogdGhlIGN1cnJlbnQgYXR0cmlidXRlcywgb3IgdG8gdGVzdCBhbiBleGlzdGluZyBET00gY29udGFpbmVyIGZvclxuICogY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBjdXJyZW50IGF0dHJpYnV0ZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0hUTUxEb2N1bWVudH0gZG9jdW1lbnQgVGhlIHBhcmVudCBkb2N1bWVudCB0byB1c2Ugd2hlbiBjcmVhdGluZ1xuICogICAgIG5ldyBET00gY29udGFpbmVycy5cbiAqL1xuaHRlcm0uVGV4dEF0dHJpYnV0ZXMgPSBmdW5jdGlvbihkb2N1bWVudCkge1xuICB0aGlzLmRvY3VtZW50XyA9IGRvY3VtZW50O1xuICAvLyBUaGVzZSB2YXJpYWJsZXMgY29udGFpbiB0aGUgc291cmNlIG9mIHRoZSBjb2xvciBhcyBlaXRoZXI6XG4gIC8vIFNSQ19ERUZBVUxUICAodXNlIGNvbnRleHQgZGVmYXVsdClcbiAgLy8gcmdiKC4uLikgICAgICh0cnVlIGNvbG9yIGZvcm0pXG4gIC8vIG51bWJlciAgICAgICAocmVwcmVzZW50aW5nIHRoZSBpbmRleCBmcm9tIGNvbG9yIHBhbGV0dGUgdG8gdXNlKVxuICB0aGlzLmZvcmVncm91bmRTb3VyY2UgPSB0aGlzLlNSQ19ERUZBVUxUO1xuICB0aGlzLmJhY2tncm91bmRTb3VyY2UgPSB0aGlzLlNSQ19ERUZBVUxUO1xuICB0aGlzLnVuZGVybGluZVNvdXJjZSA9IHRoaXMuU1JDX0RFRkFVTFQ7XG5cbiAgLy8gVGhlc2UgcHJvcGVydGllcyBjYWNoZSB0aGUgdmFsdWUgaW4gdGhlIGNvbG9yIHRhYmxlLCBidXQgZm9yZWdyb3VuZFNvdXJjZVxuICAvLyBhbmQgYmFja2dyb3VuZFNvdXJjZSBjb250YWluIHRoZSBjYW5vbmljYWwgdmFsdWVzLlxuICB0aGlzLmZvcmVncm91bmQgPSB0aGlzLkRFRkFVTFRfQ09MT1I7XG4gIHRoaXMuYmFja2dyb3VuZCA9IHRoaXMuREVGQVVMVF9DT0xPUjtcbiAgdGhpcy51bmRlcmxpbmVDb2xvciA9IHRoaXMuREVGQVVMVF9DT0xPUjtcblxuICB0aGlzLmRlZmF1bHRGb3JlZ3JvdW5kID0gJ3JnYigyNTUsIDI1NSwgMjU1KSc7XG4gIHRoaXMuZGVmYXVsdEJhY2tncm91bmQgPSAncmdiKDAsIDAsIDApJztcblxuICAvLyBBbnkgYXR0cmlidXRlcyBhZGRlZCBoZXJlIHRoYXQgZG8gbm90IGRlZmF1bHQgdG8gZmFsc2V5IChlLmcuIHVuZGVmaW5lZCBvclxuICAvLyBudWxsKSByZXF1aXJlIGEgYml0IG1vcmUgY2FyZS4gIGNyZWF0ZUNvbnRhaW5lciBoYXMgdG8gYWx3YXlzIGF0dGFjaCB0aGVcbiAgLy8gYXR0cmlidXRlIHNvIG1hdGNoZXNDb250YWluZXIgY2FuIHdvcmsgY29ycmVjdGx5LlxuICB0aGlzLmJvbGQgPSBmYWxzZTtcbiAgdGhpcy5mYWludCA9IGZhbHNlO1xuICB0aGlzLml0YWxpYyA9IGZhbHNlO1xuICB0aGlzLmJsaW5rID0gZmFsc2U7XG4gIHRoaXMudW5kZXJsaW5lID0gZmFsc2U7XG4gIHRoaXMuc3RyaWtldGhyb3VnaCA9IGZhbHNlO1xuICB0aGlzLmludmVyc2UgPSBmYWxzZTtcbiAgdGhpcy5pbnZpc2libGUgPSBmYWxzZTtcbiAgdGhpcy53Y05vZGUgPSBmYWxzZTtcbiAgdGhpcy5hc2NpaU5vZGUgPSB0cnVlO1xuICB0aGlzLnRpbGVEYXRhID0gbnVsbDtcbiAgdGhpcy51cmkgPSBudWxsO1xuICB0aGlzLnVyaUlkID0gbnVsbDtcblxuICB0aGlzLmNvbG9yUGFsZXR0ZSA9IG51bGw7XG4gIHRoaXMucmVzZXRDb2xvclBhbGV0dGUoKTtcbn07XG5cbi8qKlxuICogSWYgZmFsc2UsIHdlIGlnbm9yZSB0aGUgYm9sZCBhdHRyaWJ1dGUuXG4gKlxuICogVGhpcyBpcyB1c2VkIGZvciBmb250cyB0aGF0IGhhdmUgYSBib2xkIHZlcnNpb24gdGhhdCBpcyBhIGRpZmZlcmVudCBzaXplXG4gKiB0aGFuIHRoZSBub3JtYWwgd2VpZ2h0IHZlcnNpb24uXG4gKi9cbmh0ZXJtLlRleHRBdHRyaWJ1dGVzLnByb3RvdHlwZS5lbmFibGVCb2xkID0gdHJ1ZTtcblxuLyoqXG4gKiBJZiB0cnVlLCB1c2UgYnJpZ2h0IGNvbG9ycyAoaWYgYXZhaWxhYmxlKSBmb3IgYm9sZCB0ZXh0LlxuICpcbiAqIFRoaXMgc2V0dGluZyBpcyBpbmRlcGVuZGVudCBvZiB0aGUgZW5hYmxlQm9sZCBzZXR0aW5nLlxuICovXG5odGVybS5UZXh0QXR0cmlidXRlcy5wcm90b3R5cGUuZW5hYmxlQm9sZEFzQnJpZ2h0ID0gdHJ1ZTtcblxuLyoqXG4gKiBBIHNlbnRpbmVsIGNvbnN0YW50IG1lYW5pbmcgXCJ3aGF0ZXZlciB0aGUgZGVmYXVsdCBjb2xvciBpcyBpbiB0aGlzIGNvbnRleHRcIi5cbiAqL1xuaHRlcm0uVGV4dEF0dHJpYnV0ZXMucHJvdG90eXBlLkRFRkFVTFRfQ09MT1IgPSBsaWIuZi5jcmVhdGVFbnVtKCcnKTtcblxuLyoqXG4gKiBBIGNvbnN0YW50IHN0cmluZyB1c2VkIHRvIHNwZWNpZnkgdGhhdCBzb3VyY2UgY29sb3IgaXMgY29udGV4dCBkZWZhdWx0LlxuICovXG5odGVybS5UZXh0QXR0cmlidXRlcy5wcm90b3R5cGUuU1JDX0RFRkFVTFQgPSAnZGVmYXVsdCc7XG5cbi8qKlxuICogVGhlIGRvY3VtZW50IG9iamVjdCB3aGljaCBzaG91bGQgb3duIHRoZSBET00gbm9kZXMgY3JlYXRlZCBieSB0aGlzIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7SFRNTERvY3VtZW50fSBkb2N1bWVudCBUaGUgcGFyZW50IGRvY3VtZW50LlxuICovXG5odGVybS5UZXh0QXR0cmlidXRlcy5wcm90b3R5cGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbihkb2N1bWVudCkge1xuICB0aGlzLmRvY3VtZW50XyA9IGRvY3VtZW50O1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBkZWVwIGNvcHkgb2YgdGhpcyBvYmplY3QuXG4gKlxuICogQHJldHVybiB7aHRlcm0uVGV4dEF0dHJpYnV0ZXN9IEEgZGVlcCBjb3B5IG9mIHRoaXMgb2JqZWN0LlxuICovXG5odGVybS5UZXh0QXR0cmlidXRlcy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJ2ID0gbmV3IGh0ZXJtLlRleHRBdHRyaWJ1dGVzKG51bGwpO1xuXG4gIGZvciAodmFyIGtleSBpbiB0aGlzKSB7XG4gICAgcnZba2V5XSA9IHRoaXNba2V5XTtcbiAgfVxuXG4gIHJ2LmNvbG9yUGFsZXR0ZSA9IHRoaXMuY29sb3JQYWxldHRlLmNvbmNhdCgpO1xuICByZXR1cm4gcnY7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBjdXJyZW50IHNldCBvZiBhdHRyaWJ1dGVzLlxuICpcbiAqIFRoaXMgZG9lcyBub3QgYWZmZWN0IHRoZSBwYWxldHRlLiAgVXNlIHJlc2V0Q29sb3JQYWxldHRlKCkgZm9yIHRoYXQuXG4gKiBJdCBhbHNvIGRvZXNuJ3QgYWZmZWN0IHRoZSB0aWxlIGRhdGEsIGl0J3Mgbm90IG1lYW50IHRvLlxuICovXG5odGVybS5UZXh0QXR0cmlidXRlcy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5mb3JlZ3JvdW5kU291cmNlID0gdGhpcy5TUkNfREVGQVVMVDtcbiAgdGhpcy5iYWNrZ3JvdW5kU291cmNlID0gdGhpcy5TUkNfREVGQVVMVDtcbiAgdGhpcy51bmRlcmxpbmVTb3VyY2UgPSB0aGlzLlNSQ19ERUZBVUxUO1xuICB0aGlzLmZvcmVncm91bmQgPSB0aGlzLkRFRkFVTFRfQ09MT1I7XG4gIHRoaXMuYmFja2dyb3VuZCA9IHRoaXMuREVGQVVMVF9DT0xPUjtcbiAgdGhpcy51bmRlcmxpbmVDb2xvciA9IHRoaXMuREVGQVVMVF9DT0xPUjtcbiAgdGhpcy5ib2xkID0gZmFsc2U7XG4gIHRoaXMuZmFpbnQgPSBmYWxzZTtcbiAgdGhpcy5pdGFsaWMgPSBmYWxzZTtcbiAgdGhpcy5ibGluayA9IGZhbHNlO1xuICB0aGlzLnVuZGVybGluZSA9IGZhbHNlO1xuICB0aGlzLnN0cmlrZXRocm91Z2ggPSBmYWxzZTtcbiAgdGhpcy5pbnZlcnNlID0gZmFsc2U7XG4gIHRoaXMuaW52aXNpYmxlID0gZmFsc2U7XG4gIHRoaXMud2NOb2RlID0gZmFsc2U7XG4gIHRoaXMuYXNjaWlOb2RlID0gdHJ1ZTtcbiAgdGhpcy51cmkgPSBudWxsO1xuICB0aGlzLnVyaUlkID0gbnVsbDtcbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIGNvbG9yIHBhbGV0dGUgdG8gdGhlIGRlZmF1bHQgc3RhdGUuXG4gKi9cbmh0ZXJtLlRleHRBdHRyaWJ1dGVzLnByb3RvdHlwZS5yZXNldENvbG9yUGFsZXR0ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNvbG9yUGFsZXR0ZSA9IGxpYi5jb2xvcnMuY29sb3JQYWxldHRlLmNvbmNhdCgpO1xuICB0aGlzLnN5bmNDb2xvcnMoKTtcbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcnxzdHJpbmd9IGluZGV4IFRoZSBjb2xvciBpbmRleCBpbiB0aGUgcGFsZXR0ZSB0byByZXNldC5cbiAqL1xuaHRlcm0uVGV4dEF0dHJpYnV0ZXMucHJvdG90eXBlLnJlc2V0Q29sb3IgPSBmdW5jdGlvbihpbmRleCkge1xuICBpbmRleCA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gIGlmIChpc05hTihpbmRleCkgfHwgaW5kZXggPj0gdGhpcy5jb2xvclBhbGV0dGUubGVuZ3RoKSByZXR1cm47XG5cbiAgdGhpcy5jb2xvclBhbGV0dGVbaW5kZXhdID0gbGliLmNvbG9ycy5zdG9ja0NvbG9yUGFsZXR0ZVtpbmRleF07XG4gIHRoaXMuc3luY0NvbG9ycygpO1xufTtcblxuLyoqXG4gKiBUZXN0IGlmIHRoZSBjdXJyZW50IGF0dHJpYnV0ZXMgZGVzY3JpYmUgdW5zdHlsZWQgdGV4dC5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBjdXJyZW50IGF0dHJpYnV0ZXMgZGVzY3JpYmUgdW5zdHlsZWQgdGV4dC5cbiAqL1xuaHRlcm0uVGV4dEF0dHJpYnV0ZXMucHJvdG90eXBlLmlzRGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKFxuICAgIHRoaXMuZm9yZWdyb3VuZFNvdXJjZSA9PSB0aGlzLlNSQ19ERUZBVUxUICYmXG4gICAgdGhpcy5iYWNrZ3JvdW5kU291cmNlID09IHRoaXMuU1JDX0RFRkFVTFQgJiZcbiAgICAhdGhpcy5ib2xkICYmXG4gICAgIXRoaXMuZmFpbnQgJiZcbiAgICAhdGhpcy5pdGFsaWMgJiZcbiAgICAhdGhpcy5ibGluayAmJlxuICAgICF0aGlzLnVuZGVybGluZSAmJlxuICAgICF0aGlzLnN0cmlrZXRocm91Z2ggJiZcbiAgICAhdGhpcy5pbnZlcnNlICYmXG4gICAgIXRoaXMuaW52aXNpYmxlICYmXG4gICAgIXRoaXMud2NOb2RlICYmXG4gICAgdGhpcy5hc2NpaU5vZGUgJiZcbiAgICB0aGlzLnRpbGVEYXRhID09IG51bGwgJiZcbiAgICB0aGlzLnVyaSA9PSBudWxsXG4gICk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIERPTSBjb250YWluZXIgKGEgc3BhbiBvciBhIHRleHQgbm9kZSkgd2l0aCBhIHN0eWxlIHRvIG1hdGNoIHRoZVxuICogY3VycmVudCBzZXQgb2YgYXR0cmlidXRlcy5cbiAqXG4gKiBUaGlzIG1ldGhvZCB3aWxsIGNyZWF0ZSBhIHBsYWluIHRleHQgbm9kZSBpZiB0aGUgdGV4dCBpcyB1bnN0eWxlZCwgb3JcbiAqIGFuIEhUTUwgc3BhbiBpZiB0aGUgdGV4dCBpcyBzdHlsZWQuICBEdWUgdG8gbGFjayBvZiBtb25vc3BhY2Ugd2lkZSBjaGFyYWN0ZXJcbiAqIGZvbnRzIG9uIGNlcnRhaW4gc3lzdGVtcyAoZS5nLiBDaHJvbWUgT1MpLCB3ZSBuZWVkIHRvIHB1dCBlYWNoIHdpZGUgY2hhcmFjdGVyXG4gKiBpbiBhIHNwYW4gb2YgQ1NTIGNsYXNzICcud2Mtbm9kZScgd2hpY2ggaGFzIGRvdWJsZSBjb2x1bW4gd2lkdGguXG4gKiBFYWNoIHZ0X3RpbGVkYXRhIHRpbGUgaXMgYWxzbyByZXByZXNlbnRlZCBieSBhIHNwYW4gd2l0aCBhIHNpbmdsZVxuICogY2hhcmFjdGVyLCB3aXRoIENTUyBjbGFzc2VzICcudGlsZScgYW5kICcudGlsZV88Z2x5cGggbnVtYmVyPicuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdF90ZXh0Q29udGVudCBPcHRpb25hbCB0ZXh0IGNvbnRlbnQgZm9yIHRoZSBuZXcgY29udGFpbmVyLlxuICogQHJldHVybiB7SFRNTE5vZGV9IEFuIEhUTUwgc3BhbiBvciB0ZXh0IG5vZGVzIHN0eWxlZCB0byBtYXRjaCB0aGUgY3VycmVudFxuICogICAgIGF0dHJpYnV0ZXMuXG4gKi9cbmh0ZXJtLlRleHRBdHRyaWJ1dGVzLnByb3RvdHlwZS5jcmVhdGVDb250YWluZXIgPSBmdW5jdGlvbihvcHRfdGV4dENvbnRlbnQpIHtcbiAgaWYgKHRoaXMuaXNEZWZhdWx0KCkpIHtcbiAgICAvLyBPbmx5IGF0dGFjaCBhdHRyaWJ1dGVzIHdoZXJlIHdlIG5lZWQgYW4gZXhwbGljaXQgZGVmYXVsdCBmb3IgdGhlXG4gICAgLy8gbWF0Y2hDb250YWluZXIgbG9naWMgYmVsb3cuXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZVRleHROb2RlKG9wdF90ZXh0Q29udGVudCk7XG4gICAgbm9kZS5hc2NpaU5vZGUgPSB0cnVlO1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgdmFyIHNwYW4gPSB0aGlzLmRvY3VtZW50Xy5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIHZhciBzdHlsZSA9IHNwYW4uc3R5bGU7XG4gIHZhciBjbGFzc2VzID0gW107XG5cbiAgaWYgKHRoaXMuZm9yZWdyb3VuZCAhPSB0aGlzLkRFRkFVTFRfQ09MT1IpIHN0eWxlLmNvbG9yID0gdGhpcy5mb3JlZ3JvdW5kO1xuXG4gIGlmICh0aGlzLmJhY2tncm91bmQgIT0gdGhpcy5ERUZBVUxUX0NPTE9SKVxuICAgIHN0eWxlLmJhY2tncm91bmRDb2xvciA9IHRoaXMuYmFja2dyb3VuZDtcblxuICBpZiAodGhpcy5lbmFibGVCb2xkICYmIHRoaXMuYm9sZCkgc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcblxuICBpZiAodGhpcy5mYWludCkgc3Bhbi5mYWludCA9IHRydWU7XG5cbiAgaWYgKHRoaXMuaXRhbGljKSBzdHlsZS5mb250U3R5bGUgPSAnaXRhbGljJztcblxuICBpZiAodGhpcy5ibGluaykge1xuICAgIGNsYXNzZXMucHVzaCgnYmxpbmstbm9kZScpO1xuICAgIHNwYW4uYmxpbmtOb2RlID0gdHJ1ZTtcbiAgfVxuXG4gIGxldCB0ZXh0RGVjb3JhdGlvbkxpbmUgPSAnJztcbiAgc3Bhbi51bmRlcmxpbmUgPSB0aGlzLnVuZGVybGluZTtcbiAgaWYgKHRoaXMudW5kZXJsaW5lKSB7XG4gICAgdGV4dERlY29yYXRpb25MaW5lICs9ICcgdW5kZXJsaW5lJztcbiAgICBzdHlsZS50ZXh0RGVjb3JhdGlvblN0eWxlID0gdGhpcy51bmRlcmxpbmU7XG4gIH1cbiAgaWYgKHRoaXMudW5kZXJsaW5lU291cmNlICE9IHRoaXMuU1JDX0RFRkFVTFQpXG4gICAgc3R5bGUudGV4dERlY29yYXRpb25Db2xvciA9IHRoaXMudW5kZXJsaW5lQ29sb3I7XG4gIGlmICh0aGlzLnN0cmlrZXRocm91Z2gpIHtcbiAgICB0ZXh0RGVjb3JhdGlvbkxpbmUgKz0gJyBsaW5lLXRocm91Z2gnO1xuICAgIHNwYW4uc3RyaWtldGhyb3VnaCA9IHRydWU7XG4gIH1cbiAgaWYgKHRleHREZWNvcmF0aW9uTGluZSkgc3R5bGUudGV4dERlY29yYXRpb25MaW5lID0gdGV4dERlY29yYXRpb25MaW5lO1xuXG4gIGlmICh0aGlzLndjTm9kZSkge1xuICAgIGNsYXNzZXMucHVzaCgnd2Mtbm9kZScpO1xuICAgIHNwYW4ud2NOb2RlID0gdHJ1ZTtcbiAgfVxuICBzcGFuLmFzY2lpTm9kZSA9IHRoaXMuYXNjaWlOb2RlO1xuXG4gIGlmICh0aGlzLnRpbGVEYXRhICE9IG51bGwpIHtcbiAgICBjbGFzc2VzLnB1c2goJ3RpbGUnKTtcbiAgICBjbGFzc2VzLnB1c2goJ3RpbGVfJyArIHRoaXMudGlsZURhdGEpO1xuICAgIHNwYW4udGlsZU5vZGUgPSB0cnVlO1xuICB9XG5cbiAgaWYgKG9wdF90ZXh0Q29udGVudCkgc3Bhbi50ZXh0Q29udGVudCA9IG9wdF90ZXh0Q29udGVudDtcblxuICBpZiAodGhpcy51cmkpIHtcbiAgICBjbGFzc2VzLnB1c2goJ3VyaS1ub2RlJyk7XG4gICAgc3Bhbi51cmlJZCA9IHRoaXMudXJpSWQ7XG4gICAgc3Bhbi50aXRsZSA9IHRoaXMudXJpO1xuICAgIHNwYW4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBodGVybS5vcGVuVXJsLmJpbmQodGhpcywgdGhpcy51cmkpKTtcbiAgfVxuXG4gIGlmIChjbGFzc2VzLmxlbmd0aCkgc3Bhbi5jbGFzc05hbWUgPSBjbGFzc2VzLmpvaW4oJyAnKTtcblxuICByZXR1cm4gc3Bhbjtcbn07XG5cbi8qKlxuICogVGVzdHMgaWYgdGhlIHByb3ZpZGVkIG9iamVjdCAoc3RyaW5nLCBzcGFuIG9yIHRleHQgbm9kZSkgaGFzIHRoZSBzYW1lXG4gKiBzdHlsZSBhcyB0aGlzIFRleHRBdHRyaWJ1dGVzIGluc3RhbmNlLlxuICpcbiAqIFRoaXMgaW5kaWNhdGVzIHRoYXQgdGV4dCB3aXRoIHRoZXNlIGF0dHJpYnV0ZXMgY291bGQgYmUgaW5zZXJ0ZWQgZGlyZWN0bHlcbiAqIGludG8gdGhlIHRhcmdldCBET00gbm9kZS5cbiAqXG4gKiBGb3IgdGhlIHB1cnBvc2VzIG9mIHRoaXMgbWV0aG9kLCBhIHN0cmluZyBpcyBjb25zaWRlcmVkIGEgdGV4dCBub2RlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfEhUTUxOb2RlfSBvYmogVGhlIG9iamVjdCB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvdmlkZWQgY29udGFpbmVyIGhhcyB0aGUgc2FtZSBzdHlsZSBhc1xuICogICAgIHRoaXMgYXR0cmlidXRlcyBpbnN0YW5jZS5cbiAqL1xuaHRlcm0uVGV4dEF0dHJpYnV0ZXMucHJvdG90eXBlLm1hdGNoZXNDb250YWluZXIgPSBmdW5jdGlvbihvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogPT0gJ3N0cmluZycgfHwgb2JqLm5vZGVUeXBlID09IE5vZGUuVEVYVF9OT0RFKVxuICAgIHJldHVybiB0aGlzLmlzRGVmYXVsdCgpO1xuXG4gIHZhciBzdHlsZSA9IG9iai5zdHlsZTtcblxuICAvLyBXZSBkb24ndCB3YW50IHRvIHB1dCBtdWx0aXBsZSBjaGFyYWN0ZXJzIGluIGEgd2NOb2RlIG9yIGEgdGlsZS5cbiAgLy8gU2VlIHRoZSBjb21tZW50cyBpbiBjcmVhdGVDb250YWluZXIuXG4gIC8vIEZvciBhdHRyaWJ1dGVzIHRoYXQgZGVmYXVsdCB0byBmYWxzZSwgd2UgZG8gbm90IHJlcXVpcmUgdGhhdCBvYmogaGF2ZSB0aGVtXG4gIC8vIGRlY2xhcmVkLCBzbyBhbHdheXMgbm9ybWFsaXplIHRoZW0gdXNpbmcgISEgKHRvIHR1cm4gdW5kZWZpbmVkIGludG8gZmFsc2UpXG4gIC8vIGluIHRoZSBjb21wYXJlcyBiZWxvdy5cbiAgcmV0dXJuIChcbiAgICAhKHRoaXMud2NOb2RlIHx8IG9iai53Y05vZGUpICYmXG4gICAgdGhpcy5hc2NpaU5vZGUgPT0gb2JqLmFzY2lpTm9kZSAmJlxuICAgICEodGhpcy50aWxlRGF0YSAhPSBudWxsIHx8IG9iai50aWxlTm9kZSkgJiZcbiAgICB0aGlzLnVyaUlkID09IG9iai51cmlJZCAmJlxuICAgIHRoaXMuZm9yZWdyb3VuZCA9PSBzdHlsZS5jb2xvciAmJlxuICAgIHRoaXMuYmFja2dyb3VuZCA9PSBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IgJiZcbiAgICB0aGlzLnVuZGVybGluZUNvbG9yID09IHN0eWxlLnRleHREZWNvcmF0aW9uQ29sb3IgJiZcbiAgICAodGhpcy5lbmFibGVCb2xkICYmIHRoaXMuYm9sZCkgPT0gISFzdHlsZS5mb250V2VpZ2h0ICYmXG4gICAgdGhpcy5ibGluayA9PSAhIW9iai5ibGlua05vZGUgJiZcbiAgICB0aGlzLml0YWxpYyA9PSAhIXN0eWxlLmZvbnRTdHlsZSAmJlxuICAgIHRoaXMudW5kZXJsaW5lID09IG9iai51bmRlcmxpbmUgJiZcbiAgICAhIXRoaXMuc3RyaWtldGhyb3VnaCA9PSAhIW9iai5zdHJpa2V0aHJvdWdoXG4gICk7XG59O1xuXG5odGVybS5UZXh0QXR0cmlidXRlcy5wcm90b3R5cGUuc2V0RGVmYXVsdHMgPSBmdW5jdGlvbihmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIHRoaXMuZGVmYXVsdEZvcmVncm91bmQgPSBmb3JlZ3JvdW5kO1xuICB0aGlzLmRlZmF1bHRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblxuICB0aGlzLnN5bmNDb2xvcnMoKTtcbn07XG5cbi8qKlxuICogVXBkYXRlcyBmb3JlZ3JvdW5kIGFuZCBiYWNrZ3JvdW5kIHByb3BlcnRpZXMgYmFzZWQgb24gY3VycmVudCBpbmRpY2VzIGFuZFxuICogb3RoZXIgc3RhdGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRlcm1pbmFsRm9yZWdyb3VuZCBUaGUgdGVybWluYWwgZm9yZWdyb3VuZCBjb2xvciBmb3IgdXNlIGFzXG4gKiAgICAgaW52ZXJzZSB0ZXh0IGJhY2tncm91bmQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGVybWluYWxCYWNrZ3JvdW5kIFRoZSB0ZXJtaW5hbCBiYWNrZ3JvdW5kIGNvbG9yIGZvciB1c2UgYXNcbiAqICAgICBpbnZlcnNlIHRleHQgZm9yZWdyb3VuZC5cbiAqXG4gKi9cbmh0ZXJtLlRleHRBdHRyaWJ1dGVzLnByb3RvdHlwZS5zeW5jQ29sb3JzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIGdldEJyaWdodEluZGV4KGkpIHtcbiAgICBpZiAoaSA8IDgpIHtcbiAgICAgIC8vIElmIHRoZSBjb2xvciBpcyBmcm9tIHRoZSBsb3dlciBoYWxmIG9mIHRoZSBBTlNJIDE2LCBhZGQgOC5cbiAgICAgIHJldHVybiBpICsgODtcbiAgICB9XG5cbiAgICAvLyBJZiBpdCdzIG5vdCBmcm9tIHRoZSAxNiBjb2xvciBwYWxldHRlLCBpZ25vcmUgYm9sZCByZXF1ZXN0cy4gIFRoaXNcbiAgICAvLyBtYXRjaGVzIHRoZSBiZWhhdmlvciBvZiBnbm9tZS10ZXJtaW5hbC5cbiAgICByZXR1cm4gaTtcbiAgfVxuXG4gIC8vIEV4cGFuZCB0aGUgZGVmYXVsdCBjb2xvciBhcyBtYWtlcyBzZW5zZS5cbiAgY29uc3QgZ2V0RGVmYXVsdENvbG9yID0gKGNvbG9yLCBkZWZhdWx0Q29sb3IpID0+IHtcbiAgICByZXR1cm4gY29sb3IgPT0gdGhpcy5ERUZBVUxUX0NPTE9SID8gZGVmYXVsdENvbG9yIDogY29sb3I7XG4gIH07XG5cbiAgdmFyIGZvcmVncm91bmRTb3VyY2UgPSB0aGlzLmZvcmVncm91bmRTb3VyY2U7XG4gIHZhciBiYWNrZ3JvdW5kU291cmNlID0gdGhpcy5iYWNrZ3JvdW5kU291cmNlO1xuXG4gIGlmICh0aGlzLmVuYWJsZUJvbGRBc0JyaWdodCAmJiB0aGlzLmJvbGQpIHtcbiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihmb3JlZ3JvdW5kU291cmNlKSkge1xuICAgICAgZm9yZWdyb3VuZFNvdXJjZSA9IGdldEJyaWdodEluZGV4KGZvcmVncm91bmRTb3VyY2UpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChmb3JlZ3JvdW5kU291cmNlID09IHRoaXMuU1JDX0RFRkFVTFQpXG4gICAgdGhpcy5mb3JlZ3JvdW5kID0gdGhpcy5ERUZBVUxUX0NPTE9SO1xuICBlbHNlIGlmIChOdW1iZXIuaXNJbnRlZ2VyKGZvcmVncm91bmRTb3VyY2UpKVxuICAgIHRoaXMuZm9yZWdyb3VuZCA9IHRoaXMuY29sb3JQYWxldHRlW2ZvcmVncm91bmRTb3VyY2VdO1xuICBlbHNlIHRoaXMuZm9yZWdyb3VuZCA9IGZvcmVncm91bmRTb3VyY2U7XG5cbiAgaWYgKHRoaXMuZmFpbnQpIHtcbiAgICBjb25zdCBjb2xvclRvTWFrZUZhaW50ID0gZ2V0RGVmYXVsdENvbG9yKFxuICAgICAgdGhpcy5mb3JlZ3JvdW5kLFxuICAgICAgdGhpcy5kZWZhdWx0Rm9yZWdyb3VuZCxcbiAgICApO1xuICAgIHRoaXMuZm9yZWdyb3VuZCA9IGxpYi5jb2xvcnMubWl4KGNvbG9yVG9NYWtlRmFpbnQsICdyZ2IoMCwgMCwgMCknLCAwLjMzMzMpO1xuICB9XG5cbiAgaWYgKGJhY2tncm91bmRTb3VyY2UgPT0gdGhpcy5TUkNfREVGQVVMVClcbiAgICB0aGlzLmJhY2tncm91bmQgPSB0aGlzLkRFRkFVTFRfQ09MT1I7XG4gIGVsc2UgaWYgKE51bWJlci5pc0ludGVnZXIoYmFja2dyb3VuZFNvdXJjZSkpXG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gdGhpcy5jb2xvclBhbGV0dGVbYmFja2dyb3VuZFNvdXJjZV07XG4gIGVsc2UgdGhpcy5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZFNvdXJjZTtcblxuICAvLyBPbmNlIHdlJ3ZlIHByb2Nlc3NlZCB0aGUgYm9sZC1hcy1icmlnaHQgYW5kIGZhaW50IGF0dHJpYnV0ZXMsIHN3YXAuXG4gIC8vIFRoaXMgbWF0Y2hlcyB4dGVybS9nbm9tZS10ZXJtaW5hbC5cbiAgaWYgKHRoaXMuaW52ZXJzZSkge1xuICAgIGNvbnN0IHN3cCA9IGdldERlZmF1bHRDb2xvcih0aGlzLmZvcmVncm91bmQsIHRoaXMuZGVmYXVsdEZvcmVncm91bmQpO1xuICAgIHRoaXMuZm9yZWdyb3VuZCA9IGdldERlZmF1bHRDb2xvcih0aGlzLmJhY2tncm91bmQsIHRoaXMuZGVmYXVsdEJhY2tncm91bmQpO1xuICAgIHRoaXMuYmFja2dyb3VuZCA9IHN3cDtcbiAgfVxuXG4gIC8vIFByb2Nlc3MgaW52aXNpYmxlIHNldHRpbmdzIGxhc3QgdG8ga2VlcCBpdCBzaW1wbGUuXG4gIGlmICh0aGlzLmludmlzaWJsZSkgdGhpcy5mb3JlZ3JvdW5kID0gdGhpcy5iYWNrZ3JvdW5kO1xuXG4gIGlmICh0aGlzLnVuZGVybGluZVNvdXJjZSA9PSB0aGlzLlNSQ19ERUZBVUxUKSB0aGlzLnVuZGVybGluZUNvbG9yID0gJyc7XG4gIGVsc2UgaWYgKE51bWJlci5pc0ludGVnZXIodGhpcy51bmRlcmxpbmVTb3VyY2UpKVxuICAgIHRoaXMudW5kZXJsaW5lQ29sb3IgPSB0aGlzLmNvbG9yUGFsZXR0ZVt0aGlzLnVuZGVybGluZVNvdXJjZV07XG4gIGVsc2UgdGhpcy51bmRlcmxpbmVDb2xvciA9IHRoaXMudW5kZXJsaW5lU291cmNlO1xufTtcblxuLyoqXG4gKiBTdGF0aWMgbWV0aG9kIHVzZWQgdG8gdGVzdCBpZiB0aGUgcHJvdmlkZWQgb2JqZWN0cyAoc3RyaW5ncywgc3BhbnMgb3JcbiAqIHRleHQgbm9kZXMpIGhhdmUgdGhlIHNhbWUgc3R5bGUuXG4gKlxuICogRm9yIHRoZSBwdXJwb3NlcyBvZiB0aGlzIG1ldGhvZCwgYSBzdHJpbmcgaXMgY29uc2lkZXJlZCBhIHRleHQgbm9kZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xIVE1MTm9kZX0gb2JqMSBBbiBvYmplY3QgdG8gdGVzdC5cbiAqIEBwYXJhbSB7c3RyaW5nfEhUTUxOb2RlfSBvYmoyIEFub3RoZXIgb2JqZWN0IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBjb250YWluZXJzIGhhdmUgdGhlIHNhbWUgc3R5bGUuXG4gKi9cbmh0ZXJtLlRleHRBdHRyaWJ1dGVzLmNvbnRhaW5lcnNNYXRjaCA9IGZ1bmN0aW9uKG9iajEsIG9iajIpIHtcbiAgaWYgKHR5cGVvZiBvYmoxID09ICdzdHJpbmcnKVxuICAgIHJldHVybiBodGVybS5UZXh0QXR0cmlidXRlcy5jb250YWluZXJJc0RlZmF1bHQob2JqMik7XG5cbiAgaWYgKG9iajEubm9kZVR5cGUgIT0gb2JqMi5ub2RlVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChvYmoxLm5vZGVUeXBlID09IE5vZGUuVEVYVF9OT0RFKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgc3R5bGUxID0gb2JqMS5zdHlsZTtcbiAgdmFyIHN0eWxlMiA9IG9iajIuc3R5bGU7XG5cbiAgcmV0dXJuIChcbiAgICBzdHlsZTEuY29sb3IgPT0gc3R5bGUyLmNvbG9yICYmXG4gICAgc3R5bGUxLmJhY2tncm91bmRDb2xvciA9PSBzdHlsZTIuYmFja2dyb3VuZENvbG9yICYmXG4gICAgc3R5bGUxLmJhY2tncm91bmRDb2xvciA9PSBzdHlsZTIuYmFja2dyb3VuZENvbG9yICYmXG4gICAgc3R5bGUxLmZvbnRXZWlnaHQgPT0gc3R5bGUyLmZvbnRXZWlnaHQgJiZcbiAgICBzdHlsZTEuZm9udFN0eWxlID09IHN0eWxlMi5mb250U3R5bGUgJiZcbiAgICBzdHlsZTEudGV4dERlY29yYXRpb24gPT0gc3R5bGUyLnRleHREZWNvcmF0aW9uICYmXG4gICAgc3R5bGUxLnRleHREZWNvcmF0aW9uQ29sb3IgPT0gc3R5bGUyLnRleHREZWNvcmF0aW9uQ29sb3IgJiZcbiAgICBzdHlsZTEudGV4dERlY29yYXRpb25TdHlsZSA9PSBzdHlsZTIudGV4dERlY29yYXRpb25TdHlsZSAmJlxuICAgIHN0eWxlMS50ZXh0RGVjb3JhdGlvbkxpbmUgPT0gc3R5bGUyLnRleHREZWNvcmF0aW9uTGluZVxuICApO1xufTtcblxuLyoqXG4gKiBTdGF0aWMgbWV0aG9kIHRvIHRlc3QgaWYgYSBnaXZlbiBET00gY29udGFpbmVyIHJlcHJlc2VudHMgdW5zdHlsZWQgdGV4dC5cbiAqXG4gKiBGb3IgdGhlIHB1cnBvc2VzIG9mIHRoaXMgbWV0aG9kLCBhIHN0cmluZyBpcyBjb25zaWRlcmVkIGEgdGV4dCBub2RlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfEhUTUxOb2RlfSBvYmoxIEFuIG9iamVjdCB0byB0ZXN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIHVuc3R5bGVkLlxuICovXG5odGVybS5UZXh0QXR0cmlidXRlcy5jb250YWluZXJJc0RlZmF1bHQgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT0gJ3N0cmluZycgfHwgb2JqLm5vZGVUeXBlID09IE5vZGUuVEVYVF9OT0RFO1xufTtcblxuLyoqXG4gKiBTdGF0aWMgbWV0aG9kIHRvIGdldCB0aGUgY29sdW1uIHdpZHRoIG9mIGEgbm9kZSdzIHRleHRDb250ZW50LlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGUgVGhlIEhUTUwgZWxlbWVudCB0byBnZXQgdGhlIHdpZHRoIG9mIHRleHRDb250ZW50XG4gKiAgICAgZnJvbS5cbiAqIEByZXR1cm4ge2ludGVnZXJ9IFRoZSBjb2x1bW4gd2lkdGggb2YgdGhlIG5vZGUncyB0ZXh0Q29udGVudC5cbiAqL1xuaHRlcm0uVGV4dEF0dHJpYnV0ZXMubm9kZVdpZHRoID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAoIW5vZGUuYXNjaWlOb2RlKSB7XG4gICAgcmV0dXJuIGxpYi53Yy5zdHJXaWR0aChub2RlLnRleHRDb250ZW50KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZS50ZXh0Q29udGVudC5sZW5ndGg7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhdGljIG1ldGhvZCB0byBnZXQgdGhlIHN1YnN0ciBvZiBhIG5vZGUncyB0ZXh0Q29udGVudC4gIFRoZSBzdGFydCBpbmRleFxuICogYW5kIHN1YnN0ciB3aWR0aCBhcmUgY29tcHV0ZWQgaW4gY29sdW1uIHdpZHRoLlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGUgVGhlIEhUTUwgZWxlbWVudCB0byBnZXQgdGhlIHN1YnN0ciBvZiB0ZXh0Q29udGVudFxuICogICAgIGZyb20uXG4gKiBAcGFyYW0ge2ludGVnZXJ9IHN0YXJ0IFRoZSBzdGFydGluZyBvZmZzZXQgaW4gY29sdW1uIHdpZHRoLlxuICogQHBhcmFtIHtpbnRlZ2VyfSB3aWR0aCBUaGUgd2lkdGggdG8gY2FwdHVyZSBpbiBjb2x1bW4gd2lkdGguXG4gKiBAcmV0dXJuIHtpbnRlZ2VyfSBUaGUgZXh0cmFjdGVkIHN1YnN0ciBvZiB0aGUgbm9kZSdzIHRleHRDb250ZW50LlxuICovXG5odGVybS5UZXh0QXR0cmlidXRlcy5ub2RlU3Vic3RyID0gZnVuY3Rpb24obm9kZSwgc3RhcnQsIHdpZHRoKSB7XG4gIGlmICghbm9kZS5hc2NpaU5vZGUpIHtcbiAgICByZXR1cm4gbGliLndjLnN1YnN0cihub2RlLnRleHRDb250ZW50LCBzdGFydCwgd2lkdGgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2RlLnRleHRDb250ZW50LnN1YnN0cihzdGFydCwgd2lkdGgpO1xuICB9XG59O1xuXG4vKipcbiAqIFN0YXRpYyBtZXRob2QgdG8gZ2V0IHRoZSBzdWJzdHJpbmcgYmFzZWQgb2YgYSBub2RlJ3MgdGV4dENvbnRlbnQuICBUaGVcbiAqIHN0YXJ0IGluZGV4IG9mIGVuZCBpbmRleCBhcmUgY29tcHV0ZWQgaW4gY29sdW1uIHdpZHRoLlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGUgVGhlIEhUTUwgZWxlbWVudCB0byBnZXQgdGhlIHN1YnN0ciBvZiB0ZXh0Q29udGVudFxuICogICAgIGZyb20uXG4gKiBAcGFyYW0ge2ludGVnZXJ9IHN0YXJ0IFRoZSBzdGFydGluZyBvZmZzZXQgaW4gY29sdW1uIHdpZHRoLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBlbmQgVGhlIGVuZGluZyBvZmZzZXQgaW4gY29sdW1uIHdpZHRoLlxuICogQHJldHVybiB7aW50ZWdlcn0gVGhlIGV4dHJhY3RlZCBzdWJzdHJpbmcgb2YgdGhlIG5vZGUncyB0ZXh0Q29udGVudC5cbiAqL1xuaHRlcm0uVGV4dEF0dHJpYnV0ZXMubm9kZVN1YnN0cmluZyA9IGZ1bmN0aW9uKG5vZGUsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFub2RlLmFzY2lpTm9kZSkge1xuICAgIHJldHVybiBsaWIud2Muc3Vic3RyaW5nKG5vZGUudGV4dENvbnRlbnQsIHN0YXJ0LCBlbmQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2RlLnRleHRDb250ZW50LnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTdGF0aWMgbWV0aG9kIHRvIHNwbGl0IGEgc3RyaW5nIGludG8gY29udGlndW91cyBydW5zIG9mIHNpbmdsZS13aWR0aFxuICogY2hhcmFjdGVycyBhbmQgcnVucyBvZiBkb3VibGUtd2lkdGggY2hhcmFjdGVycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gKiBAcmV0dXJuIHtBcnJheX0gQW4gYXJyYXkgb2Ygb2JqZWN0cyB0aGF0IGNvbnRhaW4gc3Vic3RyaW5ncyBvZiBzdHIsIHdoZXJlXG4gKiAgICAgZWFjaCBzdWJzdHJpbmcgaXMgZWl0aGVyIGEgY29udGlndW91cyBydW5zIG9mIHNpbmdsZS13aWR0aCBjaGFyYWN0ZXJzXG4gKiAgICAgb3IgYSBkb3VibGUtd2lkdGggY2hhcmFjdGVyLiAgRm9yIG9iamVjdHMgdGhhdCBjb250YWluIGEgZG91YmxlLXdpZHRoXG4gKiAgICAgY2hhcmFjdGVyLCBpdHMgd2NOb2RlIHByb3BlcnR5IGlzIHNldCB0byB0cnVlLiAgRm9yIG9iamVjdHMgdGhhdCBjb250YWluXG4gKiAgICAgb25seSBBU0NJSSBjb250ZW50LCBpdHMgYXNjaWlOb2RlIHByb3BlcnR5IGlzIHNldCB0byB0cnVlLlxuICovXG5odGVybS5UZXh0QXR0cmlidXRlcy5zcGxpdFdpZGVjaGFyU3RyaW5nID0gZnVuY3Rpb24oc3RyKSB7XG4gIHZhciBydiA9IFtdO1xuICB2YXIgYmFzZSA9IDAsXG4gICAgbGVuZ3RoID0gMCxcbiAgICB3Y1N0cldpZHRoID0gMCxcbiAgICB3Y0NoYXJXaWR0aDtcbiAgdmFyIGFzY2lpTm9kZSA9IHRydWU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyApIHtcbiAgICB2YXIgYyA9IHN0ci5jb2RlUG9pbnRBdChpKTtcbiAgICB2YXIgaW5jcmVtZW50O1xuICAgIGlmIChjIDwgMTI4KSB7XG4gICAgICB3Y1N0cldpZHRoICs9IDE7XG4gICAgICBsZW5ndGggKz0gMTtcbiAgICAgIGluY3JlbWVudCA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluY3JlbWVudCA9IGMgPD0gMHhmZmZmID8gMSA6IDI7XG4gICAgICB3Y0NoYXJXaWR0aCA9IGxpYi53Yy5jaGFyV2lkdGgoYyk7XG4gICAgICBpZiAod2NDaGFyV2lkdGggPD0gMSkge1xuICAgICAgICB3Y1N0cldpZHRoICs9IHdjQ2hhcldpZHRoO1xuICAgICAgICBsZW5ndGggKz0gaW5jcmVtZW50O1xuICAgICAgICBhc2NpaU5vZGUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICBydi5wdXNoKHtcbiAgICAgICAgICAgIHN0cjogc3RyLnN1YnN0cihiYXNlLCBsZW5ndGgpLFxuICAgICAgICAgICAgYXNjaWlOb2RlOiBhc2NpaU5vZGUsXG4gICAgICAgICAgICB3Y1N0cldpZHRoOiB3Y1N0cldpZHRoLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFzY2lpTm9kZSA9IHRydWU7XG4gICAgICAgICAgd2NTdHJXaWR0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcnYucHVzaCh7XG4gICAgICAgICAgc3RyOiBzdHIuc3Vic3RyKGksIGluY3JlbWVudCksXG4gICAgICAgICAgd2NOb2RlOiB0cnVlLFxuICAgICAgICAgIGFzY2lpTm9kZTogZmFsc2UsXG4gICAgICAgICAgd2NTdHJXaWR0aDogMixcbiAgICAgICAgfSk7XG4gICAgICAgIGJhc2UgPSBpICsgaW5jcmVtZW50O1xuICAgICAgICBsZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH1cbiAgICBpICs9IGluY3JlbWVudDtcbiAgfVxuXG4gIGlmIChsZW5ndGgpIHtcbiAgICBydi5wdXNoKHtcbiAgICAgIHN0cjogc3RyLnN1YnN0cihiYXNlLCBsZW5ndGgpLFxuICAgICAgYXNjaWlOb2RlOiBhc2NpaU5vZGUsXG4gICAgICB3Y1N0cldpZHRoOiB3Y1N0cldpZHRoLFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJ2O1xufTtcbi8vIFNPVVJDRSBGSUxFOiBodGVybS9qcy9odGVybV92dC5qc1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBPUyBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxubGliLnJ0ZGVwKCdsaWIuY29sb3JzJywgJ2xpYi5mJywgJ2xpYi5VVEY4RGVjb2RlcicsICdodGVybS5WVC5DaGFyYWN0ZXJNYXAnKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmb3IgdGhlIFZUIGVzY2FwZSBzZXF1ZW5jZSBpbnRlcnByZXRlci5cbiAqXG4gKiBUaGUgaW50ZXJwcmV0ZXIgb3BlcmF0ZXMgb24gYSB0ZXJtaW5hbCBvYmplY3QgY2FwYWJsZSBvZiBwZXJmb3JtaW5nIGN1cnNvclxuICogbW92ZSBvcGVyYXRpb25zLCBwYWludGluZyBjaGFyYWN0ZXJzLCBldGMuXG4gKlxuICogVGhpcyBpbnRlcnByZXRlciBpcyBpbnRlbmRlZCB0byBiZSBjb21wYXRpYmxlIHdpdGggeHRlcm0sIHRob3VnaCBpdFxuICogaWdub3JlcyBzb21lIG9mIHRoZSBtb3JlIGVzb3RlcmljIGVzY2FwZSBzZXF1ZW5jZXMuXG4gKlxuICogQ29udHJvbCBzZXF1ZW5jZXMgYXJlIGRvY3VtZW50ZWQgaW4gaHRlcm0vZG9jL0NvbnRyb2xTZXF1ZW5jZXMubWQuXG4gKlxuICogQHBhcmFtIHtodGVybS5UZXJtaW5hbH0gdGVybWluYWwgVGVybWluYWwgdG8gdXNlIHdpdGggdGhlIGludGVycHJldGVyLlxuICovXG5odGVybS5WVCA9IGZ1bmN0aW9uKHRlcm1pbmFsKSB7XG4gIC8qKlxuICAgKiBUaGUgZGlzcGxheSB0ZXJtaW5hbCBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdmlydHVhbCB0ZXJtaW5hbC5cbiAgICovXG4gIHRoaXMudGVybWluYWwgPSB0ZXJtaW5hbDtcblxuICB0ZXJtaW5hbC5vbk1vdXNlID0gdGhpcy5vblRlcm1pbmFsTW91c2VfLmJpbmQodGhpcyk7XG4gIHRoaXMubW91c2VSZXBvcnQgPSB0aGlzLk1PVVNFX1JFUE9SVF9ESVNBQkxFRDtcbiAgdGhpcy5tb3VzZUNvb3JkaW5hdGVzID0gdGhpcy5NT1VTRV9DT09SRElOQVRFU19YMTA7XG5cbiAgLy8gV2Ugb25seSB3YW50IHRvIHJlcG9ydCBtb3VzZSBtb3ZlcyBiZXR3ZWVuIGNlbGxzLCBub3QgYmV0d2VlbiBwaXhlbHMuXG4gIHRoaXMubGFzdE1vdXNlRHJhZ1Jlc3BvbnNlXyA9IG51bGw7XG5cbiAgLy8gUGFyc2Ugc3RhdGUgbGVmdCBvdmVyIGZyb20gdGhlIGxhc3QgcGFyc2UuICBZb3Ugc2hvdWxkIHVzZSB0aGUgcGFyc2VTdGF0ZVxuICAvLyBpbnN0YW5jZSBwYXNzZWQgaW50byB5b3VyIHBhcnNlIHJvdXRpbmUsIHJhdGhlciB0aGFuIHJlYWRpbmdcbiAgLy8gdGhpcy5wYXJzZVN0YXRlXyBkaXJlY3RseS5cbiAgdGhpcy5wYXJzZVN0YXRlXyA9IG5ldyBodGVybS5WVC5QYXJzZVN0YXRlKHRoaXMucGFyc2VVbmtub3duXyk7XG5cbiAgLy8gQW55IFwibGVhZGluZyBtb2RpZmllcnNcIiBmb3IgdGhlIGVzY2FwZSBzZXF1ZW5jZSwgc3VjaCBhcyAnPycsICcgJywgb3IgdGhlXG4gIC8vIG90aGVyIG1vZGlmaWVycyBoYW5kbGVkIGluIHRoaXMucGFyc2VDU0lfLlxuICB0aGlzLmxlYWRpbmdNb2RpZmllcl8gPSAnJztcblxuICAvLyBBbnkgXCJ0cmFpbGluZyBtb2RpZmllcnNcIi4gIFNhbWUgY2hhcmFjdGVyIHNldCBhcyBhIGxlYWRpbmcgbW9kaWZpZXIsXG4gIC8vIGV4Y2VwdCB0aGVzZSBhcmUgZm91bmQgYWZ0ZXIgdGhlIG51bWVyaWMgYXJndW1lbnRzLlxuICB0aGlzLnRyYWlsaW5nTW9kaWZpZXJfID0gJyc7XG5cbiAgLy8gV2hldGhlciBvciBub3QgdG8gcmVzcGVjdCB0aGUgZXNjYXBlIGNvZGVzIGZvciBzZXR0aW5nIHRlcm1pbmFsIHdpZHRoLlxuICB0aGlzLmFsbG93Q29sdW1uV2lkdGhDaGFuZ2VzXyA9IGZhbHNlO1xuXG4gIC8vIFRoZSBhbW91bnQgb2YgdGltZSB3ZSdyZSB3aWxsaW5nIHRvIHdhaXQgZm9yIHRoZSBlbmQgb2YgYW4gT1NDIHNlcXVlbmNlLlxuICB0aGlzLm9zY1RpbWVMaW1pdF8gPSAyMDAwMDtcblxuICAvLyBEZWNvZGVyIHRvIG1haW50YWluIFVURi04IGRlY29kZSBzdGF0ZS5cbiAgdGhpcy51dGY4RGVjb2Rlcl8gPSBuZXcgbGliLlVURjhEZWNvZGVyKCk7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gYWNjZXB0IHRoZSA4LWJpdCBjb250cm9sIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEFuIDgtYml0IGNvbnRyb2wgY2hhcmFjdGVyIGlzIG9uZSB3aXRoIHRoZSBlaWdodGggYml0IHNldC4gIFRoZXNlXG4gICAqIGRpZG4ndCB3b3JrIG9uIDctYml0IHRlcm1pbmFscyBzbyB0aGV5IGFsbCBoYXZlIHR3byBieXRlIGVxdWl2YWxlbnRzLlxuICAgKiBNb3N0IGhvc3RzIHN0aWxsIG9ubHkgdXNlIHRoZSB0d28tYnl0ZSB2ZXJzaW9ucy5cbiAgICpcbiAgICogV2UgaWdub3JlIDgtYml0IGNvbnRyb2wgY29kZXMgYnkgZGVmYXVsdC4gIFRoaXMgaXMgaW4gb3JkZXIgdG8gYXZvaWRcbiAgICogaXNzdWVzIHdpdGggXCJhY2NpZGVudGFsXCIgdXNhZ2Ugb2YgY29kZXMgdGhhdCBuZWVkIHRvIGJlIHRlcm1pbmF0ZWQuXG4gICAqIFRoZSBcImFjY2lkZW50XCIgdXN1YWxseSBpbnZvbHZlcyBjYXQnaW5nIGJpbmFyeSBkYXRhLlxuICAgKi9cbiAgdGhpcy5lbmFibGU4Qml0Q29udHJvbCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGFsbG93IHRoZSBPU0MgNTIgc2VxdWVuY2UgdG8gd3JpdGUgdG8gdGhlIHN5c3RlbSBjbGlwYm9hcmQuXG4gICAqL1xuICB0aGlzLmVuYWJsZUNsaXBib2FyZFdyaXRlID0gdHJ1ZTtcblxuICAvKipcbiAgICogUmVzcGVjdCB0aGUgaG9zdCdzIGF0dGVtcHQgdG8gY2hhbmdlIHRoZSBjdXJzb3IgYmxpbmsgc3RhdHVzIHVzaW5nXG4gICAqIHRoZSBERUMgUHJpdmF0ZSBtb2RlIDEyLlxuICAgKi9cbiAgdGhpcy5lbmFibGVEZWMxMiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBSZXNwZWN0IHRoZSBob3N0J3MgYXR0ZW1wdCB0byBjbGVhciB0aGUgc2Nyb2xsYmFjayBidWZmZXIgdXNpbmcgQ1NJLUotMy5cbiAgICovXG4gIHRoaXMuZW5hYmxlQ3NpSjMgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBUaGUgZXhwZWN0ZWQgZW5jb2RpbmcgbWV0aG9kIGZvciBkYXRhIHJlY2VpdmVkIGZyb20gdGhlIGhvc3QuXG4gICAqL1xuICB0aGlzLmNoYXJhY3RlckVuY29kaW5nID0gJ3V0Zi04JztcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgZW1pdCB3YXJuaW5ncyB3aGVuIHdlIGVuY291bnRlciBhIGNvbnRyb2wgY2hhcmFjdGVyIG9yIGVzY2FwZVxuICAgKiBzZXF1ZW5jZSB0aGF0IHdlIGRvbid0IHJlY29nbml6ZSBvciBleHBsaWNpdGx5IGlnbm9yZS5cbiAgICpcbiAgICogV2UgZGlzYWJsZSB0aGlzIGJ5IGRlZmF1bHQgYXMgdGhlIGNvbnNvbGUgbG9nZ2luZyBjYW4gYmUgZXhwZW5zaXZlIHdoZW5cbiAgICogZHVtcGluZyBiaW5hcnkgZmlsZXMgKGUuZy4gYGNhdCAvZGV2L3plcm9gKSB0byB0aGUgcG9pbnQgd2hlcmUgeW91IGNhbid0XG4gICAqIHJlY292ZXIgdy9vdXQgcmVzdGFydGluZy5cbiAgICovXG4gIHRoaXMud2FyblVuaW1wbGVtZW50ZWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogVGhlIHNldCBvZiBhdmFpbGFibGUgY2hhcmFjdGVyIG1hcHMgKHVzZWQgYnkgRzAuLi5HMyBiZWxvdykuXG4gICAqL1xuICB0aGlzLmNoYXJhY3Rlck1hcHMgPSBuZXcgaHRlcm0uVlQuQ2hhcmFjdGVyTWFwcygpO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBHMC4uLkczIGNoYXJhY3RlciBtYXBzLlxuICAgKiBXZSBkZWZhdWx0IHRvIHRoZSBVUy9BU0NJSSBtYXAgZXZlcnl3aGVyZSBhcyB0aGF0IGFsaWducyB3aXRoIG90aGVyXG4gICAqIHRlcm1pbmFscywgYW5kIGl0IG1ha2VzIGl0IGhhcmRlciB0byBhY2NpZGVudGFsbHkgc3dpdGNoIHRvIHRoZSBncmFwaGljc1xuICAgKiBjaGFyYWN0ZXIgbWFwIChDdHJsLU4pLiAgQW55IHByb2dyYW0gdGhhdCB3YW50cyB0byB1c2UgdGhlIGdyYXBoaWNzIG1hcFxuICAgKiB3aWxsIHVzdWFsbHkgc2VsZWN0IGl0IGFueXdheXMgc2luY2UgdGhlcmUncyBubyBndWFyYW50ZWUgd2hhdCBzdGF0ZSBhbnlcbiAgICogb2YgdGhlIG1hcHMgYXJlIGluIGF0IGFueSBwYXJ0aWN1bGFyIHRpbWUuXG4gICAqL1xuICB0aGlzLkcwID0gdGhpcy5HMSA9IHRoaXMuRzIgPSB0aGlzLkczID0gdGhpcy5jaGFyYWN0ZXJNYXBzLmdldE1hcCgnQicpO1xuXG4gIC8qKlxuICAgKiBUaGUgNy1iaXQgdmlzaWJsZSBjaGFyYWN0ZXIgc2V0LlxuICAgKlxuICAgKiBUaGlzIGlzIGEgbWFwcGluZyBmcm9tIGluYm91bmQgZGF0YSB0byBkaXNwbGF5IGdseXBoLiAgVGhlIEdMIHNldFxuICAgKiBjb250YWlucyB0aGUgOTQgYnl0ZXMgZnJvbSAweDIxIHRvIDB4N2UuXG4gICAqXG4gICAqIFRoZSBkZWZhdWx0IEdMIHNldCBpcyAnQicsIFVTIEFTQ0lJLlxuICAgKi9cbiAgdGhpcy5HTCA9ICdHMCc7XG5cbiAgLyoqXG4gICAqIFRoZSA4LWJpdCB2aXNpYmxlIGNoYXJhY3RlciBzZXQuXG4gICAqXG4gICAqIFRoaXMgaXMgYSBtYXBwaW5nIGZyb20gaW5ib3VuZCBkYXRhIHRvIGRpc3BsYXkgZ2x5cGguICBUaGUgR1Igc2V0XG4gICAqIGNvbnRhaW5zIHRoZSA5NCBieXRlcyBmcm9tIDB4YTEgdG8gMHhmZS5cbiAgICovXG4gIHRoaXMuR1IgPSAnRzAnO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBlbmNvZGluZyBvZiB0aGUgdGVybWluYWwuXG4gICAqXG4gICAqIFdlIG9ubHkgc3VwcG9ydCBFQ01BLTM1IGFuZCBVVEYtOCwgc28gZ28gd2l0aCBhIGJvb2xlYW4gaGVyZS5cbiAgICogVGhlIGVuY29kaW5nIGNhbiBiZSBsb2NrZWQgdG9vLlxuICAgKi9cbiAgdGhpcy5jb2RpbmdTeXN0ZW1VdGY4XyA9IGZhbHNlO1xuICB0aGlzLmNvZGluZ1N5c3RlbUxvY2tlZF8gPSBmYWxzZTtcblxuICAvLyBDb25zdHJ1Y3QgYSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggdGhlIGtub3duIG9uZS1ieXRlIGNvbnRyb2wgY2hhcnMuXG4gIC8vIFRoaXMgaXMgdXNlZCBpbiBwYXJzZVVua25vd25fIHRvIHF1aWNrbHkgc2NhbiBhIHN0cmluZyBmb3IgdGhlIG5leHRcbiAgLy8gY29udHJvbCBjaGFyYWN0ZXIuXG4gIHRoaXMuY2MxUGF0dGVybl8gPSBudWxsO1xuICB0aGlzLnVwZGF0ZUVuY29kaW5nU3RhdGVfKCk7XG59O1xuXG4vKipcbiAqIE5vIG1vdXNlIGV2ZW50cy5cbiAqL1xuaHRlcm0uVlQucHJvdG90eXBlLk1PVVNFX1JFUE9SVF9ESVNBQkxFRCA9IDA7XG5cbi8qKlxuICogREVDU0VUIG1vZGUgOS5cbiAqXG4gKiBSZXBvcnQgbW91c2UgZG93biBldmVudHMgb25seS5cbiAqL1xuaHRlcm0uVlQucHJvdG90eXBlLk1PVVNFX1JFUE9SVF9QUkVTUyA9IDE7XG5cbi8qKlxuICogREVDU0VUIG1vZGUgMTAwMC5cbiAqXG4gKiBSZXBvcnQgbW91c2UgZG93bi91cCBldmVudHMgb25seS5cbiAqL1xuaHRlcm0uVlQucHJvdG90eXBlLk1PVVNFX1JFUE9SVF9DTElDSyA9IDI7XG5cbi8qKlxuICogREVDU0VUIG1vZGUgMTAwMi5cbiAqXG4gKiBSZXBvcnQgbW91c2UgZG93bi91cCBhbmQgbW92ZW1lbnQgd2hpbGUgYSBidXR0b24gaXMgZG93bi5cbiAqL1xuaHRlcm0uVlQucHJvdG90eXBlLk1PVVNFX1JFUE9SVF9EUkFHID0gMztcblxuLyoqXG4gKiBERUMgbW9kZSBmb3IgWDEwIGNvb3JpbmRhdGVzICh0aGUgZGVmYXVsdCkuXG4gKi9cbmh0ZXJtLlZULnByb3RvdHlwZS5NT1VTRV9DT09SRElOQVRFU19YMTAgPSAwO1xuXG4vKipcbiAqIERFQyBtb2RlIDEwMDUgZm9yIFVURi04IGNvb3JpbmRhdGVzLlxuICovXG5odGVybS5WVC5wcm90b3R5cGUuTU9VU0VfQ09PUkRJTkFURVNfVVRGOCA9IDE7XG5cbi8qKlxuICogREVDIG1vZGUgMTAwNiBmb3IgU0dSIGNvb3JpbmRhdGVzLlxuICovXG5odGVybS5WVC5wcm90b3R5cGUuTU9VU0VfQ09PUkRJTkFURVNfU0dSID0gMjtcblxuLyoqXG4gKiBQYXJzZVN0YXRlIGNvbnN0cnVjdG9yLlxuICpcbiAqIFRoaXMgb2JqZWN0IHRyYWNrcyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgcGFyc2UuICBJdCBoYXMgZmllbGRzIGZvciB0aGVcbiAqIGN1cnJlbnQgYnVmZmVyLCBwb3NpdGlvbiBpbiB0aGUgYnVmZmVyLCBhbmQgdGhlIHBhcnNlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGRlZmF1bHRGdW5jIFRoZSBkZWZhdWx0IHBhcnNlciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRfYnVmIE9wdGlvbmFsIHN0cmluZyB0byB1c2UgYXMgdGhlIGN1cnJlbnQgYnVmZmVyLlxuICovXG5odGVybS5WVC5QYXJzZVN0YXRlID0gZnVuY3Rpb24oZGVmYXVsdEZ1bmN0aW9uLCBvcHRfYnVmKSB7XG4gIHRoaXMuZGVmYXVsdEZ1bmN0aW9uID0gZGVmYXVsdEZ1bmN0aW9uO1xuICB0aGlzLmJ1ZiA9IG9wdF9idWYgfHwgbnVsbDtcbiAgdGhpcy5wb3MgPSAwO1xuICB0aGlzLmZ1bmMgPSBkZWZhdWx0RnVuY3Rpb247XG4gIHRoaXMuYXJncyA9IFtdO1xuICAvLyBXaGV0aGVyIGFueSBvZiB0aGUgYXJndW1lbnRzIGluIHRoZSBhcmdzIGFycmF5IGhhdmUgc3ViYXJndW1lbnRzLlxuICAvLyBlLmcuIEFsbCBDU0kgc2VxdWVuY2VzIGFyZSBpbnRlZ2VyIGFyZ3VtZW50cyBzZXBhcmF0ZWQgYnkgc2VtaS1jb2xvbnMsXG4gIC8vIHNvIHN1YmFyZ3VtZW50cyBhcmUgZnVydGhlciBjb2xvbiBzZXBhcmF0ZWQuXG4gIHRoaXMuc3ViYXJncyA9IG51bGw7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBwYXJzZXIgZnVuY3Rpb24sIGJ1ZmZlciwgYW5kIHBvc2l0aW9uLlxuICovXG5odGVybS5WVC5QYXJzZVN0YXRlLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKG9wdF9idWYpIHtcbiAgdGhpcy5yZXNldFBhcnNlRnVuY3Rpb24oKTtcbiAgdGhpcy5yZXNldEJ1ZihvcHRfYnVmIHx8ICcnKTtcbiAgdGhpcy5yZXNldEFyZ3VtZW50cygpO1xufTtcblxuLyoqXG4gKiBSZXNldCB0aGUgcGFyc2VyIGZ1bmN0aW9uIG9ubHkuXG4gKi9cbmh0ZXJtLlZULlBhcnNlU3RhdGUucHJvdG90eXBlLnJlc2V0UGFyc2VGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmZ1bmMgPSB0aGlzLmRlZmF1bHRGdW5jdGlvbjtcbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIGJ1ZmZlciBhbmQgcG9zaXRpb24gb25seS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVmIE9wdGlvbmFsIG5ldyB2YWx1ZSBmb3IgYnVmLCBkZWZhdWx0cyB0byBudWxsLlxuICovXG5odGVybS5WVC5QYXJzZVN0YXRlLnByb3RvdHlwZS5yZXNldEJ1ZiA9IGZ1bmN0aW9uKG9wdF9idWYpIHtcbiAgdGhpcy5idWYgPSB0eXBlb2Ygb3B0X2J1ZiA9PSAnc3RyaW5nJyA/IG9wdF9idWYgOiBudWxsO1xuICB0aGlzLnBvcyA9IDA7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBhcmd1bWVudHMgbGlzdCBvbmx5LlxuICpcbiAqIFR5cGljYWxseSB3ZSByZXNldCBhcmd1bWVudHMgYmVmb3JlIHBhcnNpbmcgYSBzZXF1ZW5jZSB0aGF0IHVzZXMgdGhlbSByYXRoZXJcbiAqIHRoYW4gYWx3YXlzIHRyeWluZyB0byBtYWtlIHN1cmUgdGhleSdyZSBpbiBhIGdvb2Qgc3RhdGUuICBUaGlzIGNhbiBsZWFkIHRvXG4gKiBjb25mdXNpb24gZHVyaW5nIGRlYnVnZ2luZyB3aGVyZSBhcmdzIGZyb20gYSBwcmV2aW91cyBzZXF1ZW5jZSBhcHBlYXIgdG8gYmVcbiAqIFwic3RpY2tpbmcgYXJvdW5kXCIgaW4gb3RoZXIgc2VxdWVuY2VzICh3aGljaCBpbiByZWFsaXR5IGRvbid0IHVzZSBhcmdzKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0X2FyZ196ZXJvIE9wdGlvbmFsIGluaXRpYWwgdmFsdWUgZm9yIGFyZ3NbMF0uXG4gKi9cbmh0ZXJtLlZULlBhcnNlU3RhdGUucHJvdG90eXBlLnJlc2V0QXJndW1lbnRzID0gZnVuY3Rpb24ob3B0X2FyZ196ZXJvKSB7XG4gIHRoaXMuYXJncy5sZW5ndGggPSAwO1xuICBpZiAodHlwZW9mIG9wdF9hcmdfemVybyAhPSAndW5kZWZpbmVkJykgdGhpcy5hcmdzWzBdID0gb3B0X2FyZ196ZXJvO1xufTtcblxuLyoqXG4gKiBQYXJzZSBhbiBhcmd1bWVudCBhcyBhbiBpbnRlZ2VyLlxuICpcbiAqIFRoaXMgYXNzdW1lcyB0aGUgaW5wdXRzIGFyZSBhbHJlYWR5IGluIHRoZSBwcm9wZXIgZm9ybWF0LiAgZS5nLiBUaGlzIHdvbid0XG4gKiBoYW5kbGUgbm9uLW51bWVyaWMgYXJndW1lbnRzLlxuICpcbiAqIEFuIFwiMFwiIGFyZ3VtZW50IGlzIHRyZWF0ZWQgdGhlIHNhbWUgYXMgXCJcIiB3aGljaCBtZWFucyB0aGUgZGVmYXVsdCB2YWx1ZSB3aWxsXG4gKiBiZSBhcHBsaWVkLiAgVGhpcyBpcyB3aGF0IG1vc3QgdGVybWluYWwgc2VxdWVuY2VzIGV4cGVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXJnc3RyIFRoZSBhcmd1bWVudCB0byBwYXJzZSBkaXJlY3RseS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gZGVmYXVsdFZhbHVlIERlZmF1bHQgdmFsdWUgaWYgYXJnc3RyIGlzIGVtcHR5LlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgcGFyc2VkIHZhbHVlLlxuICovXG5odGVybS5WVC5QYXJzZVN0YXRlLnByb3RvdHlwZS5wYXJzZUludCA9IGZ1bmN0aW9uKGFyZ3N0ciwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChkZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCkgZGVmYXVsdFZhbHVlID0gMDtcblxuICBpZiAoYXJnc3RyKSB7XG4gICAgY29uc3QgcmV0ID0gcGFyc2VJbnQoYXJnc3RyLCAxMCk7XG4gICAgLy8gQW4gYXJndW1lbnQgb2YgemVybyBpcyB0cmVhdGVkIGFzIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgIHJldHVybiByZXQgPT0gMCA/IGRlZmF1bHRWYWx1ZSA6IHJldDtcbiAgfVxuICByZXR1cm4gZGVmYXVsdFZhbHVlO1xufTtcblxuLyoqXG4gKiBHZXQgYW4gYXJndW1lbnQgYXMgYW4gaW50ZWdlci5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gYXJnbnVtIFRoZSBhcmd1bWVudCBudW1iZXIgdG8gcmV0cmlldmUuXG4gKiBAcGFyYW0ge251bWJlcj19IGRlZmF1bHRWYWx1ZSBEZWZhdWx0IHZhbHVlIGlmIHRoZSBhcmd1bWVudCBpcyBlbXB0eS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHBhcnNlZCB2YWx1ZS5cbiAqL1xuaHRlcm0uVlQuUGFyc2VTdGF0ZS5wcm90b3R5cGUuaWFyZyA9IGZ1bmN0aW9uKGFyZ251bSwgZGVmYXVsdFZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnBhcnNlSW50KHRoaXMuYXJnc1thcmdudW1dLCBkZWZhdWx0VmFsdWUpO1xufTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIGFyZ3VtZW50IGhhcyBzdWJhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGFyZ251bSBUaGUgYXJndW1lbnQgbnVtYmVyIHRvIGNoZWNrLlxuICogQHJldHVybiB7bnVtYmVyfSBXaGV0aGVyIHRoZSBhcmd1bWVudCBoYXMgc3ViYXJndW1lbnRzLlxuICovXG5odGVybS5WVC5QYXJzZVN0YXRlLnByb3RvdHlwZS5hcmdIYXNTdWJhcmdzID0gZnVuY3Rpb24oYXJnbnVtKSB7XG4gIHJldHVybiB0aGlzLnN1YmFyZ3MgJiYgdGhpcy5zdWJhcmdzW2FyZ251bV07XG59O1xuXG4vKipcbiAqIE1hcmsgYW4gYXJndW1lbnQgYXMgaGF2aW5nIHN1YmFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gYXJnbnVtIFRoZSBhcmd1bWVudCBudW1iZXIgdGhhdCBoYXMgc3ViYXJndW1lbnRzLlxuICovXG5odGVybS5WVC5QYXJzZVN0YXRlLnByb3RvdHlwZS5hcmdTZXRTdWJhcmdzID0gZnVuY3Rpb24oYXJnbnVtKSB7XG4gIGlmICh0aGlzLnN1YmFyZ3MgPT09IG51bGwpIHRoaXMuc3ViYXJncyA9IHt9O1xuICB0aGlzLnN1YmFyZ3NbYXJnbnVtXSA9IHRydWU7XG59O1xuXG4vKipcbiAqIEFkdmFuY2UgdGhlIHBhcnNlIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gY291bnQgVGhlIG51bWJlciBvZiBieXRlcyB0byBhZHZhbmNlLlxuICovXG5odGVybS5WVC5QYXJzZVN0YXRlLnByb3RvdHlwZS5hZHZhbmNlID0gZnVuY3Rpb24oY291bnQpIHtcbiAgdGhpcy5wb3MgKz0gY291bnQ7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgcmVtYWluaW5nIHBvcnRpb24gb2YgdGhlIGJ1ZmZlciB3aXRob3V0IGFmZmVjdGluZyB0aGUgcGFyc2VcbiAqIHBvc2l0aW9uLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHJlbWFpbmluZyBwb3J0aW9uIG9mIHRoZSBidWZmZXIuXG4gKi9cbmh0ZXJtLlZULlBhcnNlU3RhdGUucHJvdG90eXBlLnBlZWtSZW1haW5pbmdCdWYgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuYnVmLnN1YnN0cih0aGlzLnBvcyk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbmV4dCBzaW5nbGUgY2hhcmFjdGVyIGluIHRoZSBidWZmZXIgd2l0aG91dCBhZmZlY3RpbmcgdGhlIHBhcnNlXG4gKiBwb3NpdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBuZXh0IGNoYXJhY3RlciBpbiB0aGUgYnVmZmVyLlxuICovXG5odGVybS5WVC5QYXJzZVN0YXRlLnByb3RvdHlwZS5wZWVrQ2hhciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5idWYuc3Vic3RyKHRoaXMucG9zLCAxKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBuZXh0IHNpbmdsZSBjaGFyYWN0ZXIgaW4gdGhlIGJ1ZmZlciBhbmQgYWR2YW5jZSB0aGUgcGFyc2VcbiAqIHBvc2l0aW9uIG9uZSBieXRlLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIG5leHQgY2hhcmFjdGVyIGluIHRoZSBidWZmZXIuXG4gKi9cbmh0ZXJtLlZULlBhcnNlU3RhdGUucHJvdG90eXBlLmNvbnN1bWVDaGFyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmJ1Zi5zdWJzdHIodGhpcy5wb3MrKywgMSk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIHRoZSBidWZmZXIgaXMgZW1wdHksIG9yIHRoZSBwb3NpdGlvbiBpcyBwYXN0IHRoZSBlbmQuXG4gKi9cbmh0ZXJtLlZULlBhcnNlU3RhdGUucHJvdG90eXBlLmlzQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuYnVmID09IG51bGwgfHwgdGhpcy5idWYubGVuZ3RoIDw9IHRoaXMucG9zO1xufTtcblxuLyoqXG4gKiBSZXNldCB0aGUgVlQgYmFjayB0byBiYXNlbGluZSBzdGF0ZS5cbiAqL1xuaHRlcm0uVlQucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuRzAgPSB0aGlzLkcxID0gdGhpcy5HMiA9IHRoaXMuRzMgPSB0aGlzLmNoYXJhY3Rlck1hcHMuZ2V0TWFwKCdCJyk7XG5cbiAgdGhpcy5HTCA9ICdHMCc7XG4gIHRoaXMuR1IgPSAnRzAnO1xuXG4gIHRoaXMubW91c2VSZXBvcnQgPSB0aGlzLk1PVVNFX1JFUE9SVF9ESVNBQkxFRDtcbiAgdGhpcy5tb3VzZUNvb3JkaW5hdGVzID0gdGhpcy5NT1VTRV9DT09SRElOQVRFU19YMTA7XG4gIHRoaXMubGFzdE1vdXNlRHJhZ1Jlc3BvbnNlXyA9IG51bGw7XG59O1xuXG4vKipcbiAqIEhhbmRsZSB0ZXJtaW5hbCBtb3VzZSBldmVudHMuXG4gKlxuICogU2VlIHRoZSBcIk1vdXNlIFRyYWNraW5nXCIgc2VjdGlvbiBvZiBbeHRlcm1dLlxuICovXG5odGVybS5WVC5wcm90b3R5cGUub25UZXJtaW5hbE1vdXNlXyA9IGZ1bmN0aW9uKGUpIHtcbiAgLy8gU2hvcnQgY2lyY3VpdCBhIGZldyBldmVudHMgdG8gYXZvaWQgdW5uZWNlc3NhcnkgcHJvY2Vzc2luZy5cbiAgaWYgKHRoaXMubW91c2VSZXBvcnQgPT0gdGhpcy5NT1VTRV9SRVBPUlRfRElTQUJMRUQpIHJldHVybjtcbiAgZWxzZSBpZiAodGhpcy5tb3VzZVJlcG9ydCAhPSB0aGlzLk1PVVNFX1JFUE9SVF9EUkFHICYmIGUudHlwZSA9PSAnbW91c2Vtb3ZlJylcbiAgICByZXR1cm47XG5cbiAgLy8gVGVtcG9yYXJ5IHN0b3JhZ2UgZm9yIG91ciByZXNwb25zZS5cbiAgdmFyIHJlc3BvbnNlO1xuXG4gIC8vIE1vZGlmaWVyIGtleSBzdGF0ZS5cbiAgdmFyIG1vZCA9IDA7XG4gIGlmICh0aGlzLm1vdXNlUmVwb3J0ICE9IHRoaXMuTU9VU0VfUkVQT1JUX1BSRVNTKSB7XG4gICAgaWYgKGUuc2hpZnRLZXkpIG1vZCB8PSA0O1xuICAgIGlmIChlLm1ldGFLZXkgfHwgKHRoaXMudGVybWluYWwua2V5Ym9hcmQuYWx0SXNNZXRhICYmIGUuYWx0S2V5KSkgbW9kIHw9IDg7XG4gICAgaWYgKGUuY3RybEtleSkgbW9kIHw9IDE2O1xuICB9XG5cbiAgLy8gWCAmIFkgY29vcmRpbmF0ZSByZXBvcnRpbmcuXG4gIGxldCB4O1xuICBsZXQgeTtcbiAgbGV0IGxpbWl0ID0gMjU1O1xuICBzd2l0Y2ggKHRoaXMubW91c2VDb29yZGluYXRlcykge1xuICAgIGNhc2UgdGhpcy5NT1VTRV9DT09SRElOQVRFU19VVEY4OlxuICAgICAgLy8gVVRGLTggbW9kZSBpcyB0aGUgc2FtZSBhcyBYMTAgYnV0IHdpdGggaGlnaGVyIGxpbWl0cy5cbiAgICAgIGxpbWl0ID0gMjA0NztcbiAgICBjYXNlIHRoaXMuTU9VU0VfQ09PUkRJTkFURVNfWDEwOlxuICAgICAgLy8gWDEwIHJlcG9ydHMgY29vcmRpbmF0ZXMgYnkgZW5jb2RpbmcgaW50byBzdHJpbmdzLlxuICAgICAgeCA9IFN0cmluZy5mcm9tQ2hhckNvZGUobGliLmYuY2xhbXAoZS50ZXJtaW5hbENvbHVtbiArIDMyLCAzMiwgbGltaXQpKTtcbiAgICAgIHkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxpYi5mLmNsYW1wKGUudGVybWluYWxSb3cgKyAzMiwgMzIsIGxpbWl0KSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIHRoaXMuTU9VU0VfQ09PUkRJTkFURVNfU0dSOlxuICAgICAgLy8gU0dSIHJlcG9ydHMgY29vcmRpbmF0ZXMgYnkgdHJhbnNtaXR0aW5nIHRoZSBudW1iZXJzIGRpcmVjdGx5LlxuICAgICAgeCA9IGUudGVybWluYWxDb2x1bW47XG4gICAgICB5ID0gZS50ZXJtaW5hbFJvdztcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgc3dpdGNoIChlLnR5cGUpIHtcbiAgICBjYXNlICd3aGVlbCc6XG4gICAgICAvLyBNb3VzZSB3aGVlbCBpcyB0cmVhdGVkIGFzIGJ1dHRvbiAxIG9yIDIgcGx1cyBhbiBhZGRpdGlvbmFsIDY0LlxuICAgICAgYiA9IChlLmRlbHRhWSAqIC0xID4gMCA/IDAgOiAxKSArIDY0O1xuICAgICAgYiB8PSBtb2Q7XG4gICAgICBpZiAodGhpcy5tb3VzZUNvb3JkaW5hdGVzID09IHRoaXMuTU9VU0VfQ09PUkRJTkFURVNfU0dSKSB7XG4gICAgICAgIHJlc3BvbnNlID0gYFxceDFiWzwke2J9OyR7eH07JHt5fU1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gWDEwIGJhc2VkIG1vZGVzIChpbmNsdWRpbmcgVVRGOCkgYWRkIDMyIGZvciBsZWdhY3kgZW5jb2RpbmcgcmVhc29ucy5cbiAgICAgICAgcmVzcG9uc2UgPSAnXFx4MWJbTScgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGIgKyAzMikgKyB4ICsgeTtcbiAgICAgIH1cblxuICAgICAgLy8gS2VlcCB0aGUgdGVybWluYWwgZnJvbSBzY3JvbGxpbmcuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ21vdXNlZG93bic6XG4gICAgICAvLyBCdXR0b25zIGFyZSBlbmNvZGVkIGFzIGJ1dHRvbiBudW1iZXIuXG4gICAgICB2YXIgYiA9IE1hdGgubWluKGUuYnV0dG9uLCAyKTtcbiAgICAgIC8vIFgxMCBiYXNlZCBtb2RlcyAoaW5jbHVkaW5nIFVURjgpIGFkZCAzMiBmb3IgbGVnYWN5IGVuY29kaW5nIHJlYXNvbnMuXG4gICAgICBpZiAodGhpcy5tb3VzZUNvb3JkaW5hdGVzICE9IHRoaXMuTU9VU0VfQ09PUkRJTkFURVNfU0dSKSBiICs9IDMyO1xuXG4gICAgICAvLyBBbmQgbWl4IGluIHRoZSBtb2RpZmllciBrZXlzLlxuICAgICAgYiB8PSBtb2Q7XG5cbiAgICAgIGlmICh0aGlzLm1vdXNlQ29vcmRpbmF0ZXMgPT0gdGhpcy5NT1VTRV9DT09SRElOQVRFU19TR1IpXG4gICAgICAgIHJlc3BvbnNlID0gYFxceDFiWzwke2J9OyR7eH07JHt5fU1gO1xuICAgICAgZWxzZSByZXNwb25zZSA9ICdcXHgxYltNJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoYikgKyB4ICsgeTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbW91c2V1cCc6XG4gICAgICBpZiAodGhpcy5tb3VzZVJlcG9ydCAhPSB0aGlzLk1PVVNFX1JFUE9SVF9QUkVTUykge1xuICAgICAgICBpZiAodGhpcy5tb3VzZUNvb3JkaW5hdGVzID09IHRoaXMuTU9VU0VfQ09PUkRJTkFURVNfU0dSKSB7XG4gICAgICAgICAgLy8gU0dSIG1vZGUgY2FuIHJlcG9ydCB0aGUgcmVsZWFzZWQgYnV0dG9uLlxuICAgICAgICAgIHJlc3BvbnNlID0gYFxceDFiWzwke2UuYnV0dG9ufTske3h9OyR7eX1tYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBYMTAgbW9kZSBoYXMgbm8gaW5kaWNhdGlvbiBvZiB3aGljaCBidXR0b24gd2FzIHJlbGVhc2VkLlxuICAgICAgICAgIHJlc3BvbnNlID0gJ1xceDFiW01cXHgyMycgKyB4ICsgeTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdtb3VzZW1vdmUnOlxuICAgICAgaWYgKHRoaXMubW91c2VSZXBvcnQgPT0gdGhpcy5NT1VTRV9SRVBPUlRfRFJBRyAmJiBlLmJ1dHRvbnMpIHtcbiAgICAgICAgLy8gU3RhbmRhcmQgYnV0dG9uIGJpdHMuICBUaGUgWFRlcm0gcHJvdG9jb2wgb25seSByZXBvcnRzIHRoZSBmaXJzdFxuICAgICAgICAvLyBidXR0b24gcHJlc3MgKGUuZy4gaWYgbGVmdCAmIHJpZ2h0IGFyZSBwcmVzc2VkLCByaWdodCBpcyBpZ25vcmVkKSxcbiAgICAgICAgLy8gYW5kIGl0IG9ubHkgc3VwcG9ydHMgdGhlIGZpcnN0IHRocmVlIGJ1dHRvbnMuICBJZiBub25lIG9mIHRoZW0gYXJlXG4gICAgICAgIC8vIHByZXNzZWQsIHRoZW4gWFRlcm0gZmxhZ3MgaXQgYXMgYSByZWxlYXNlLiAgV2UnbGwgZG8gdGhlIHNhbWUuXG4gICAgICAgIC8vIFgxMCBiYXNlZCBtb2RlcyAoaW5jbHVkaW5nIFVURjgpIGFkZCAzMiBmb3IgbGVnYWN5IGVuY29kaW5nIHJlYXNvbnMuXG4gICAgICAgIGIgPSB0aGlzLm1vdXNlQ29vcmRpbmF0ZXMgPT0gdGhpcy5NT1VTRV9DT09SRElOQVRFU19TR1IgPyAwIDogMzI7XG5cbiAgICAgICAgLy8gUHJpb3JpdHkgaGVyZSBtYXRjaGVzIFhUZXJtOiBsZWZ0LCBtaWRkbGUsIHJpZ2h0LlxuICAgICAgICBpZiAoZS5idXR0b25zICYgMHgxKSB7XG4gICAgICAgICAgLy8gUmVwb3J0IGxlZnQgYnV0dG9uLlxuICAgICAgICAgIGIgKz0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChlLmJ1dHRvbnMgJiAweDQpIHtcbiAgICAgICAgICAvLyBSZXBvcnQgbWlkZGxlIGJ1dHRvbi5cbiAgICAgICAgICBiICs9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5idXR0b25zICYgMHgyKSB7XG4gICAgICAgICAgLy8gUmVwb3J0IHJpZ2h0IGJ1dHRvbi5cbiAgICAgICAgICBiICs9IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUmVsZWFzZSBoaWdoZXIgYnV0dG9ucy5cbiAgICAgICAgICBiICs9IDM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgMzIgdG8gaW5kaWNhdGUgbW91c2UgbW90aW9uLlxuICAgICAgICBiICs9IDMyO1xuXG4gICAgICAgIC8vIEFuZCBtaXggaW4gdGhlIG1vZGlmaWVyIGtleXMuXG4gICAgICAgIGIgfD0gbW9kO1xuXG4gICAgICAgIGlmICh0aGlzLm1vdXNlQ29vcmRpbmF0ZXMgPT0gdGhpcy5NT1VTRV9DT09SRElOQVRFU19TR1IpXG4gICAgICAgICAgcmVzcG9uc2UgPSBgXFx4MWJbPCR7Yn07JHt4fTske3l9TWA7XG4gICAgICAgIGVsc2UgcmVzcG9uc2UgPSAnXFx4MWJbTScgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGIpICsgeCArIHk7XG5cbiAgICAgICAgLy8gSWYgd2Ugd2VyZSBnb2luZyB0byByZXBvcnQgdGhlIHNhbWUgY2VsbCBiZWNhdXNlIHdlIG1vdmVkIHBpeGVsc1xuICAgICAgICAvLyB3aXRoaW4sIHN1cHByZXNzIHRoZSByZXBvcnQuICBUaGlzIGlzIHdoYXQgeHRlcm0gZG9lcyBhbmQgY3V0c1xuICAgICAgICAvLyBkb3duIG9uIGR1cGxpY2F0ZSBtZXNzYWdlcy5cbiAgICAgICAgaWYgKHRoaXMubGFzdE1vdXNlRHJhZ1Jlc3BvbnNlXyA9PSByZXNwb25zZSkgcmVzcG9uc2UgPSAnJztcbiAgICAgICAgZWxzZSB0aGlzLmxhc3RNb3VzZURyYWdSZXNwb25zZV8gPSByZXNwb25zZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdjbGljayc6XG4gICAgY2FzZSAnZGJsY2xpY2snOlxuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgY29uc29sZS5lcnJvcignVW5rbm93biBtb3VzZSBldmVudDogJyArIGUudHlwZSwgZSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGlmIChyZXNwb25zZSkgdGhpcy50ZXJtaW5hbC5pby5zZW5kU3RyaW5nKHJlc3BvbnNlKTtcbn07XG5cbi8qKlxuICogSW50ZXJwcmV0IGEgc3RyaW5nIG9mIGNoYXJhY3RlcnMsIGRpc3BsYXlpbmcgdGhlIHJlc3VsdHMgb24gdGhlIGFzc29jaWF0ZWRcbiAqIHRlcm1pbmFsIG9iamVjdC5cbiAqXG4gKiBUaGUgYnVmZmVyIHdpbGwgYmUgZGVjb2RlZCBhY2NvcmRpbmcgdG8gdGhlICdyZWNlaXZlLWVuY29kaW5nJyBwcmVmZXJlbmNlLlxuICovXG5odGVybS5WVC5wcm90b3R5cGUuaW50ZXJwcmV0ID0gZnVuY3Rpb24oYnVmKSB7XG4gIHRoaXMucGFyc2VTdGF0ZV8ucmVzZXRCdWYodGhpcy5kZWNvZGUoYnVmKSk7XG5cbiAgd2hpbGUgKCF0aGlzLnBhcnNlU3RhdGVfLmlzQ29tcGxldGUoKSkge1xuICAgIHZhciBmdW5jID0gdGhpcy5wYXJzZVN0YXRlXy5mdW5jO1xuICAgIHZhciBwb3MgPSB0aGlzLnBhcnNlU3RhdGVfLnBvcztcbiAgICB2YXIgYnVmID0gdGhpcy5wYXJzZVN0YXRlXy5idWY7XG5cbiAgICB0aGlzLnBhcnNlU3RhdGVfLmZ1bmMuY2FsbCh0aGlzLCB0aGlzLnBhcnNlU3RhdGVfKTtcblxuICAgIGlmIChcbiAgICAgIHRoaXMucGFyc2VTdGF0ZV8uZnVuYyA9PSBmdW5jICYmXG4gICAgICB0aGlzLnBhcnNlU3RhdGVfLnBvcyA9PSBwb3MgJiZcbiAgICAgIHRoaXMucGFyc2VTdGF0ZV8uYnVmID09IGJ1ZlxuICAgICkge1xuICAgICAgdGhyb3cgJ1BhcnNlciBkaWQgbm90IGFsdGVyIHRoZSBzdGF0ZSEnO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBzdHJpbmcgYWNjb3JkaW5nIHRvIHRoZSAncmVjZWl2ZS1lbmNvZGluZycgcHJlZmVyZW5jZS5cbiAqL1xuaHRlcm0uVlQucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uKHN0cikge1xuICBpZiAodGhpcy5jaGFyYWN0ZXJFbmNvZGluZyA9PSAndXRmLTgnKSByZXR1cm4gdGhpcy5kZWNvZGVVVEY4KHN0cik7XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogRW5jb2RlIGEgVVRGLTE2IHN0cmluZyBhcyBVVEYtOC5cbiAqXG4gKiBTZWUgYWxzbzogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVVRGLTE2XG4gKi9cbmh0ZXJtLlZULnByb3RvdHlwZS5lbmNvZGVVVEY4ID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBsaWIuZW5jb2RlVVRGOChzdHIpO1xufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBVVEYtOCBzdHJpbmcgaW50byBVVEYtMTYuXG4gKi9cbmh0ZXJtLlZULnByb3RvdHlwZS5kZWNvZGVVVEY4ID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiB0aGlzLnV0ZjhEZWNvZGVyXy5kZWNvZGUoc3RyKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBlbmNvZGluZyBvZiB0aGUgdGVybWluYWwuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGVuY29kaW5nIFRoZSBuYW1lIG9mIHRoZSBlbmNvZGluZyB0byBzZXQuXG4gKi9cbmh0ZXJtLlZULnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICBkZWZhdWx0OlxuICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIHZhbHVlIGZvciBcInRlcm1pbmFsLWVuY29kaW5nXCI6ICcgKyBlbmNvZGluZyk7XG4gICAgLy8gRmFsbCB0aHJvdWdoLlxuICAgIGNhc2UgJ2lzby0yMDIyJzpcbiAgICAgIHRoaXMuY29kaW5nU3lzdGVtVXRmOF8gPSBmYWxzZTtcbiAgICAgIHRoaXMuY29kaW5nU3lzdGVtTG9ja2VkXyA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndXRmLTgtbG9ja2VkJzpcbiAgICAgIHRoaXMuY29kaW5nU3lzdGVtVXRmOF8gPSB0cnVlO1xuICAgICAgdGhpcy5jb2RpbmdTeXN0ZW1Mb2NrZWRfID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHRoaXMuY29kaW5nU3lzdGVtVXRmOF8gPSB0cnVlO1xuICAgICAgdGhpcy5jb2RpbmdTeXN0ZW1Mb2NrZWRfID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHRoaXMudXBkYXRlRW5jb2RpbmdTdGF0ZV8oKTtcbn07XG5cbi8qKlxuICogUmVmcmVzaCBpbnRlcm5hbCBzdGF0ZSB3aGVuIHRoZSBlbmNvZGluZyBjaGFuZ2VzLlxuICovXG5odGVybS5WVC5wcm90b3R5cGUudXBkYXRlRW5jb2RpbmdTdGF0ZV8gPSBmdW5jdGlvbigpIHtcbiAgLy8gSWYgd2UncmUgaW4gVVRGOCBtb2RlLCBkb24ndCBzdXBvcnQgOC1iaXQgZXNjYXBlIHNlcXVlbmNlcyBhcyB3ZSdsbCBuZXZlclxuICAvLyBzZWUgdGhvc2UgLS0gZXZlcnl0aGluZyBzaG91bGQgYmUgVVRGOCFcbiAgdmFyIGNjMSA9IE9iamVjdC5rZXlzKGh0ZXJtLlZULkNDMSlcbiAgICAuZmlsdGVyKGUgPT4gIXRoaXMuY29kaW5nU3lzdGVtVXRmOF8gfHwgZS5jaGFyQ29kZUF0KCkgPCAweDgwKVxuICAgIC5tYXAoZSA9PiAnXFxcXHgnICsgbGliLmYuenBhZChlLmNoYXJDb2RlQXQoKS50b1N0cmluZygxNiksIDIpKVxuICAgIC5qb2luKCcnKTtcbiAgdGhpcy5jYzFQYXR0ZXJuXyA9IG5ldyBSZWdFeHAoYFske2NjMX1dYCk7XG59O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHBhcnNlIGZ1bmN0aW9uLlxuICpcbiAqIFRoaXMgd2lsbCBzY2FuIHRoZSBzdHJpbmcgZm9yIHRoZSBmaXJzdCAxLWJ5dGUgY29udHJvbCBjaGFyYWN0ZXIgKEMwL0MxXG4gKiBjaGFyYWN0ZXJzIGZyb20gW0NUUkxdKS4gIEFueSBwbGFpbiB0ZXh0IGNvbWluZyBiZWZvcmUgdGhlIGNvZGUgd2lsbCBiZVxuICogcHJpbnRlZCB0byB0aGUgdGVybWluYWwsIHRoZW4gdGhlIGNvbnRyb2wgY2hhcmFjdGVyIHdpbGwgYmUgZGlzcGF0Y2hlZC5cbiAqL1xuaHRlcm0uVlQucHJvdG90eXBlLnBhcnNlVW5rbm93bl8gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBmdW5jdGlvbiBwcmludChzdHIpIHtcbiAgICBpZiAoIXNlbGYuY29kaW5nU3lzdGVtVXRmOF8gJiYgc2VsZltzZWxmLkdMXS5HTClcbiAgICAgIHN0ciA9IHNlbGZbc2VsZi5HTF0uR0woc3RyKTtcblxuICAgIHNlbGYudGVybWluYWwucHJpbnQoc3RyKTtcbiAgfVxuXG4gIC8vIFNlYXJjaCBmb3IgdGhlIG5leHQgY29udGlndW91cyBibG9jayBvZiBwbGFpbiB0ZXh0LlxuICB2YXIgYnVmID0gcGFyc2VTdGF0ZS5wZWVrUmVtYWluaW5nQnVmKCk7XG4gIHZhciBuZXh0Q29udHJvbCA9IGJ1Zi5zZWFyY2godGhpcy5jYzFQYXR0ZXJuXyk7XG5cbiAgaWYgKG5leHRDb250cm9sID09IDApIHtcbiAgICAvLyBXZSd2ZSBzdHVtYmxlZCByaWdodCBpbnRvIGEgY29udHJvbCBjaGFyYWN0ZXIuXG4gICAgdGhpcy5kaXNwYXRjaCgnQ0MxJywgYnVmLnN1YnN0cigwLCAxKSwgcGFyc2VTdGF0ZSk7XG4gICAgcGFyc2VTdGF0ZS5hZHZhbmNlKDEpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChuZXh0Q29udHJvbCA9PSAtMSkge1xuICAgIC8vIFRoZXJlIGFyZSBubyBjb250cm9sIGNoYXJhY3RlcnMgaW4gdGhpcyBzdHJpbmcuXG4gICAgcHJpbnQoYnVmKTtcbiAgICBwYXJzZVN0YXRlLnJlc2V0KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJpbnQoYnVmLnN1YnN0cigwLCBuZXh0Q29udHJvbCkpO1xuICB0aGlzLmRpc3BhdGNoKCdDQzEnLCBidWYuc3Vic3RyKG5leHRDb250cm9sLCAxKSwgcGFyc2VTdGF0ZSk7XG4gIHBhcnNlU3RhdGUuYWR2YW5jZShuZXh0Q29udHJvbCArIDEpO1xufTtcblxuLyoqXG4gKiBQYXJzZSBhIENvbnRyb2wgU2VxdWVuY2UgSW50cm9kdWNlciBjb2RlIGFuZCBkaXNwYXRjaCBpdC5cbiAqXG4gKiBTZWUgW0NTSV0gZm9yIHNvbWUgdXNlZnVsIGluZm9ybWF0aW9uIGFib3V0IHRoZXNlIGNvZGVzLlxuICovXG5odGVybS5WVC5wcm90b3R5cGUucGFyc2VDU0lfID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICB2YXIgY2ggPSBwYXJzZVN0YXRlLnBlZWtDaGFyKCk7XG4gIHZhciBhcmdzID0gcGFyc2VTdGF0ZS5hcmdzO1xuXG4gIGNvbnN0IGZpbmlzaFBhcnNpbmcgPSAoKSA9PiB7XG4gICAgLy8gUmVzZXR0aW5nIHRoZSBhcmd1bWVudHMgaXNuJ3Qgc3RyaWN0bHkgbmVjZXNzYXJ5LCBidXQgaXQgbWFrZXMgZGVidWdnaW5nXG4gICAgLy8gbGVzcyBjb25mdXNpbmcgKG90aGVyd2lzZSBhcmdzIHdpbGwgc3RpY2sgYXJvdW5kIHVudGlsIHRoZSBuZXh0IHNlcXVlbmNlXG4gICAgLy8gdGhhdCBuZWVkcyBhcmd1bWVudHMpLlxuICAgIHBhcnNlU3RhdGUucmVzZXRBcmd1bWVudHMoKTtcbiAgICAvLyBXZSBuZWVkIHRvIGNsZWFyIHN1YmFyZ3Mgc2luY2Ugd2UgZXhwbGljaXRseSBzZXQgaXQuXG4gICAgcGFyc2VTdGF0ZS5zdWJhcmdzID0gbnVsbDtcbiAgICBwYXJzZVN0YXRlLnJlc2V0UGFyc2VGdW5jdGlvbigpO1xuICB9O1xuXG4gIGlmIChjaCA+PSAnQCcgJiYgY2ggPD0gJ34nKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgZmluYWwgY2hhcmFjdGVyLlxuICAgIHRoaXMuZGlzcGF0Y2goXG4gICAgICAnQ1NJJyxcbiAgICAgIHRoaXMubGVhZGluZ01vZGlmaWVyXyArIHRoaXMudHJhaWxpbmdNb2RpZmllcl8gKyBjaCxcbiAgICAgIHBhcnNlU3RhdGUsXG4gICAgKTtcbiAgICBmaW5pc2hQYXJzaW5nKCk7XG4gIH0gZWxzZSBpZiAoY2ggPT0gJzsnKSB7XG4gICAgLy8gUGFyYW1ldGVyIGRlbGltaXRlci5cbiAgICBpZiAodGhpcy50cmFpbGluZ01vZGlmaWVyXykge1xuICAgICAgLy8gUGFyYW1ldGVyIGRlbGltaXRlciBhZnRlciB0aGUgdHJhaWxpbmcgbW9kaWZpZXIuICBUaGF0J3MgYSBwYWRkbGluJy5cbiAgICAgIGZpbmlzaFBhcnNpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgICAgICAvLyBUaGV5IG9taXR0ZWQgdGhlIGZpcnN0IHBhcmFtLCB3ZSBuZWVkIHRvIHN1cHBseSBpdC5cbiAgICAgICAgYXJncy5wdXNoKCcnKTtcbiAgICAgIH1cblxuICAgICAgYXJncy5wdXNoKCcnKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoKGNoID49ICcwJyAmJiBjaCA8PSAnOScpIHx8IGNoID09ICc6Jykge1xuICAgIC8vIE5leHQgYnl0ZSBpbiB0aGUgY3VycmVudCBwYXJhbWV0ZXIuXG5cbiAgICBpZiAodGhpcy50cmFpbGluZ01vZGlmaWVyXykge1xuICAgICAgLy8gTnVtZXJpYyBwYXJhbWV0ZXIgYWZ0ZXIgdGhlIHRyYWlsaW5nIG1vZGlmaWVyLiAgVGhhdCdzIGEgcGFkZGxpbicuXG4gICAgICBmaW5pc2hQYXJzaW5nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgYXJnc1swXSA9IGNoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJnc1thcmdzLmxlbmd0aCAtIDFdICs9IGNoO1xuICAgICAgfVxuXG4gICAgICAvLyBQb3NzaWJsZSBzdWItcGFyYW1ldGVycy5cbiAgICAgIGlmIChjaCA9PSAnOicpIHBhcnNlU3RhdGUuYXJnU2V0U3ViYXJncyhhcmdzLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjaCA+PSAnICcgJiYgY2ggPD0gJz8nKSB7XG4gICAgLy8gTW9kaWZpZXIgY2hhcmFjdGVyLlxuICAgIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubGVhZGluZ01vZGlmaWVyXyArPSBjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50cmFpbGluZ01vZGlmaWVyXyArPSBjaDtcbiAgICB9XG4gIH0gZWxzZSBpZiAodGhpcy5jYzFQYXR0ZXJuXy50ZXN0KGNoKSkge1xuICAgIC8vIENvbnRyb2wgY2hhcmFjdGVyLlxuICAgIHRoaXMuZGlzcGF0Y2goJ0NDMScsIGNoLCBwYXJzZVN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBVbmV4cGVjdGVkIGNoYXJhY3RlciBpbiBzZXF1ZW5jZSwgYmFpbCBvdXQuXG4gICAgZmluaXNoUGFyc2luZygpO1xuICB9XG5cbiAgcGFyc2VTdGF0ZS5hZHZhbmNlKDEpO1xufTtcblxuLyoqXG4gKiBTa2lwIG92ZXIgdGhlIHN0cmluZyB1bnRpbCB0aGUgbmV4dCBTdHJpbmcgVGVybWluYXRvciAoU1QsICdFU0MgXFwnKSBvclxuICogQmVsbCAoQkVMLCAnXFx4MDcnKS5cbiAqXG4gKiBUaGUgc3RyaW5nIGlzIGFjY3VtdWxhdGVkIGluIHBhcnNlU3RhdGUuYXJnc1swXS4gIE1ha2Ugc3VyZSB0byByZXNldCB0aGVcbiAqIGFyZ3VtZW50cyAod2l0aCBwYXJzZVN0YXRlLnJlc2V0QXJndW1lbnRzKSBiZWZvcmUgc3RhcnRpbmcgdGhlIHBhcnNlLlxuICpcbiAqIFlvdSBjYW4gZGV0ZWN0IHRoYXQgcGFyc2luZyBpbiBjb21wbGV0ZSBieSBjaGVja2luZyB0aGF0IHRoZSBwYXJzZVxuICogZnVuY3Rpb24gaGFzIGNoYW5nZWQgYmFjayB0byB0aGUgZGVmYXVsdCBwYXJzZSBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBJZiB0cnVlLCBwYXJzaW5nIGlzIG9uZ29pbmcgb3IgY29tcGxldGUuICBJZiBmYWxzZSwgd2UndmVcbiAqICAgICBleGNlZWRlZCB0aGUgbWF4IHN0cmluZyBzZXF1ZW5jZS5cbiAqL1xuaHRlcm0uVlQucHJvdG90eXBlLnBhcnNlVW50aWxTdHJpbmdUZXJtaW5hdG9yXyA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgdmFyIGJ1ZiA9IHBhcnNlU3RhdGUucGVla1JlbWFpbmluZ0J1ZigpO1xuICB2YXIgYXJncyA9IHBhcnNlU3RhdGUuYXJncztcbiAgLy8gU2luY2Ugd2UgbWlnaHQgbW9kaWZ5IHBhcnNlIHN0YXRlIGJ1ZmZlciBsb2NhbGx5LCBpZiB3ZSB3YW50IHRvIGFkdmFuY2VcbiAgLy8gdGhlIHBhcnNlIHN0YXRlIGJ1ZmZlciBsYXRlciBvbiwgd2UgbmVlZCB0byBrbm93IGhvdyBtYW55IGNoYXJzIHdlIGFkZGVkLlxuICBsZXQgYnVmSW5zZXJ0ZWQgPSAwO1xuXG4gIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICBhcmdzWzBdID0gJyc7XG4gICAgYXJnc1sxXSA9IG5ldyBEYXRlKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgb3VyIHNhdmVkIGJ1ZmZlciBlbmRzIHdpdGggYW4gZXNjYXBlLCBpdCdzIGJlY2F1c2Ugd2Ugd2VyZSBob3BpbmdcbiAgICAvLyBpdCdzIGFuIFNUIHNwbGl0IGFjcm9zcyB0d28gYnVmZmVycy4gIE1vdmUgaXQgZnJvbSBvdXIgc2F2ZWQgYnVmZmVyXG4gICAgLy8gdG8gdGhlIHN0YXJ0IG9mIG91ciBjdXJyZW50IGJ1ZmZlciBmb3IgcHJvY2Vzc2luZyBhbmV3LlxuICAgIGlmIChhcmdzWzBdLnNsaWNlKC0xKSA9PSAnXFx4MWInKSB7XG4gICAgICBhcmdzWzBdID0gYXJnc1swXS5zbGljZSgwLCAtMSk7XG4gICAgICBidWYgPSAnXFx4MWInICsgYnVmO1xuICAgICAgYnVmSW5zZXJ0ZWQgPSAxO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG5leHRUZXJtaW5hdG9yID0gYnVmLnNlYXJjaCgvW1xceDFiXFx4MDddLyk7XG4gIGNvbnN0IHRlcm1pbmF0b3IgPSBidWZbbmV4dFRlcm1pbmF0b3JdO1xuICBsZXQgZm91bmRUZXJtaW5hdG9yO1xuXG4gIC8vIElmIHRoZSBuZXh0IGVzY2FwZSB3ZSBzZWUgaXMgbm90IGEgc3RhcnQgb2YgYSBTVCwgZmFsbCB0aHJvdWdoLiAgVGhpcyB3aWxsXG4gIC8vIGVpdGhlciBiZSBpbnZhbGlkIChlbWJlZGRlZCBlc2NhcGUpLCBvciB3ZSdsbCBxdWV1ZSBpdCB1cCAod2FpdCBmb3IgXFxcXCkuXG4gIGlmICh0ZXJtaW5hdG9yID09ICdcXHgxYicgJiYgYnVmW25leHRUZXJtaW5hdG9yICsgMV0gIT0gJ1xcXFwnKVxuICAgIGZvdW5kVGVybWluYXRvciA9IGZhbHNlO1xuICBlbHNlIGZvdW5kVGVybWluYXRvciA9IG5leHRUZXJtaW5hdG9yICE9IC0xO1xuXG4gIGlmICghZm91bmRUZXJtaW5hdG9yKSB7XG4gICAgLy8gTm8gdGVybWluYXRvciBoZXJlLCBoYXZlIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHN0cmluZy5cblxuICAgIGFyZ3NbMF0gKz0gYnVmO1xuXG4gICAgdmFyIGFib3J0UmVhc29uO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlOiBJZiBvdXIgYnVmZmVyaW5nIGhhcHBlbnMgdG8gc3BsaXQgdGhlIFNUIChcXGVcXFxcKSwgd2UgaGF2ZSB0b1xuICAgIC8vIGJ1ZmZlciB0aGUgY29udGVudCB0ZW1wb3JhcmlseS4gIFNvIGRvbid0IHJlamVjdCBhIHRyYWlsaW5nIGVzY2FwZSBoZXJlLFxuICAgIC8vIGluc3RlYWQgd2UgbGV0IGl0IHRpbWVvdXQgb3IgYmUgcmVqZWN0ZWQgaW4gdGhlIG5leHQgcGFzcy5cbiAgICBpZiAodGVybWluYXRvciA9PSAnXFx4MWInICYmIG5leHRUZXJtaW5hdG9yICE9IGJ1Zi5sZW5ndGggLSAxKVxuICAgICAgYWJvcnRSZWFzb24gPSAnZW1iZWRkZWQgZXNjYXBlOiAnICsgbmV4dFRlcm1pbmF0b3I7XG5cbiAgICBpZiAobmV3IERhdGUoKSAtIGFyZ3NbMV0gPiB0aGlzLm9zY1RpbWVMaW1pdF8pXG4gICAgICBhYm9ydFJlYXNvbiA9ICd0aW1lb3V0IGV4cGlyZWQ6ICcgKyAobmV3IERhdGUoKSAtIGFyZ3NbMV0pO1xuXG4gICAgaWYgKGFib3J0UmVhc29uKSB7XG4gICAgICBpZiAodGhpcy53YXJuVW5pbXBsZW1lbnRlZClcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgJ3BhcnNlVW50aWxTdHJpbmdUZXJtaW5hdG9yXzogYWJvcnRpbmc6ICcgKyBhYm9ydFJlYXNvbixcbiAgICAgICAgICBhcmdzWzBdLFxuICAgICAgICApO1xuICAgICAgcGFyc2VTdGF0ZS5yZXNldChhcmdzWzBdKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwYXJzZVN0YXRlLmFkdmFuY2UoYnVmLmxlbmd0aCAtIGJ1Zkluc2VydGVkKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGFyZ3NbMF0gKz0gYnVmLnN1YnN0cigwLCBuZXh0VGVybWluYXRvcik7XG5cbiAgcGFyc2VTdGF0ZS5yZXNldFBhcnNlRnVuY3Rpb24oKTtcbiAgcGFyc2VTdGF0ZS5hZHZhbmNlKFxuICAgIG5leHRUZXJtaW5hdG9yICsgKHRlcm1pbmF0b3IgPT0gJ1xceDFiJyA/IDIgOiAxKSAtIGJ1Zkluc2VydGVkLFxuICApO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBEaXNwYXRjaCB0byB0aGUgZnVuY3Rpb24gdGhhdCBoYW5kbGVzIGEgZ2l2ZW4gQ0MxLCBFU0MsIG9yIENTSSBvciBWVDUyIGNvZGUuXG4gKi9cbmh0ZXJtLlZULnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uKHR5cGUsIGNvZGUsIHBhcnNlU3RhdGUpIHtcbiAgdmFyIGhhbmRsZXIgPSBodGVybS5WVFt0eXBlXVtjb2RlXTtcbiAgaWYgKCFoYW5kbGVyKSB7XG4gICAgaWYgKHRoaXMud2FyblVuaW1wbGVtZW50ZWQpXG4gICAgICBjb25zb2xlLndhcm4oJ1Vua25vd24gJyArIHR5cGUgKyAnIGNvZGU6ICcgKyBKU09OLnN0cmluZ2lmeShjb2RlKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGhhbmRsZXIgPT0gaHRlcm0uVlQuaWdub3JlKSB7XG4gICAgaWYgKHRoaXMud2FyblVuaW1wbGVtZW50ZWQpXG4gICAgICBjb25zb2xlLndhcm4oJ0lnbm9yZWQgJyArIHR5cGUgKyAnIGNvZGU6ICcgKyBKU09OLnN0cmluZ2lmeShjb2RlKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcnNlU3RhdGUuc3ViYXJncyAmJiAhaGFuZGxlci5zdXBwb3J0c1N1YmFyZ3MpIHtcbiAgICBpZiAodGhpcy53YXJuVW5pbXBsZW1lbnRlZClcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ0lnbm9yZWQgJyArIHR5cGUgKyAnIGNvZGUgdy9zdWJhcmdzOiAnICsgSlNPTi5zdHJpbmdpZnkoY29kZSksXG4gICAgICApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlID09ICdDQzEnICYmIGNvZGUgPiAnXFx4N2YnICYmICF0aGlzLmVuYWJsZThCaXRDb250cm9sKSB7XG4gICAgLy8gSXQncyBraW5kIG9mIGEgaGFjayB0byBwdXQgdGhpcyBoZXJlLCBidXQuLi5cbiAgICAvL1xuICAgIC8vIElmIHdlJ3JlIGRpc3BhdGNoaW5nIGEgJ0NDMScgY29kZSwgYW5kIGl0J3MgZ290IHRoZSBlaWdodGggYml0IHNldCxcbiAgICAvLyBidXQgd2UncmUgbm90IHN1cHBvc2VkIHRvIGhhbmRsZSA4LWJpdCBjb2Rlcz8gIEp1c3QgaWdub3JlIGl0LlxuICAgIC8vXG4gICAgLy8gVGhpcyBwcmV2ZW50cyBhbiBlcnJhbnQgKERDUywgJ1xceDkwJyksIChPU0MsICdcXHg5ZCcpLCAoUE0sICdcXHg5ZScpIG9yXG4gICAgLy8gKEFQQywgJ1xceDlmJykgZnJvbSBsb2NraW5nIHVwIHRoZSB0ZXJtaW5hbCB3YWl0aW5nIGZvciBpdHMgZXhwZWN0ZWRcbiAgICAvLyAoU1QsICdcXHg5YycpIG9yIChCRUwsICdcXHgwNycpLlxuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdJZ25vcmluZyA4LWJpdCBjb250cm9sIGNvZGU6IDB4JyArIGNvZGUuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNiksXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBoYW5kbGVyLmFwcGx5KHRoaXMsIFtwYXJzZVN0YXRlLCBjb2RlXSk7XG59O1xuXG4vKipcbiAqIFNldCBvbmUgb2YgdGhlIEFOU0kgZGVmaW5lZCB0ZXJtaW5hbCBtb2RlIGJpdHMuXG4gKlxuICogSW52b2tlZCBpbiByZXNwb25zZSB0byBTTS9STS5cbiAqXG4gKiBVbmV4cGVjdGVkIGFuZCB1bmltcGxlbWVudGVkIHZhbHVlcyBhcmUgc2lsZW50bHkgaWdub3JlZC5cbiAqL1xuaHRlcm0uVlQucHJvdG90eXBlLnNldEFOU0lNb2RlID0gZnVuY3Rpb24oY29kZSwgc3RhdGUpIHtcbiAgaWYgKGNvZGUgPT0gNCkge1xuICAgIC8vIEluc2VydCBNb2RlIChJUk0pXG4gICAgdGhpcy50ZXJtaW5hbC5zZXRJbnNlcnRNb2RlKHN0YXRlKTtcbiAgfSBlbHNlIGlmIChjb2RlID09IDIwKSB7XG4gICAgLy8gQXV0b21hdGljIE5ld2xpbmUgKExOTSlcbiAgICB0aGlzLnRlcm1pbmFsLnNldEF1dG9DYXJyaWFnZVJldHVybihzdGF0ZSk7XG4gIH0gZWxzZSBpZiAodGhpcy53YXJuVW5pbXBsZW1lbnRlZCkge1xuICAgIGNvbnNvbGUud2FybignVW5pbXBsZW1lbnRlZCBBTlNJIE1vZGU6ICcgKyBjb2RlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgb3IgcmVzZXQgb25lIG9mIHRoZSBERUMgUHJpdmF0ZSBtb2Rlcy5cbiAqXG4gKiBJbnZva2VkIGluIHJlc3BvbnNlIHRvIERFQ1NFVC9ERUNSU1QuXG4gKi9cbmh0ZXJtLlZULnByb3RvdHlwZS5zZXRERUNNb2RlID0gZnVuY3Rpb24oY29kZSwgc3RhdGUpIHtcbiAgc3dpdGNoIChwYXJzZUludChjb2RlLCAxMCkpIHtcbiAgICBjYXNlIDE6IC8vIERFQ0NLTVxuICAgICAgdGhpcy50ZXJtaW5hbC5rZXlib2FyZC5hcHBsaWNhdGlvbkN1cnNvciA9IHN0YXRlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDM6IC8vIERFQ0NPTE1cbiAgICAgIGlmICh0aGlzLmFsbG93Q29sdW1uV2lkdGhDaGFuZ2VzXykge1xuICAgICAgICB0aGlzLnRlcm1pbmFsLnNldFdpZHRoKHN0YXRlID8gMTMyIDogODApO1xuXG4gICAgICAgIHRoaXMudGVybWluYWwuY2xlYXJIb21lKCk7XG4gICAgICAgIHRoaXMudGVybWluYWwuc2V0VlRTY3JvbGxSZWdpb24obnVsbCwgbnVsbCk7XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgNTogLy8gREVDU0NOTVxuICAgICAgdGhpcy50ZXJtaW5hbC5zZXRSZXZlcnNlVmlkZW8oc3RhdGUpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDY6IC8vIERFQ09NXG4gICAgICB0aGlzLnRlcm1pbmFsLnNldE9yaWdpbk1vZGUoc3RhdGUpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDc6IC8vIERFQ0FXTVxuICAgICAgdGhpcy50ZXJtaW5hbC5zZXRXcmFwYXJvdW5kKHN0YXRlKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSA5OiAvLyBSZXBvcnQgb24gbW91c2UgZG93biBldmVudHMgb25seSAoWDEwKS5cbiAgICAgIHRoaXMubW91c2VSZXBvcnQgPSBzdGF0ZVxuICAgICAgICA/IHRoaXMuTU9VU0VfUkVQT1JUX1BSRVNTXG4gICAgICAgIDogdGhpcy5NT1VTRV9SRVBPUlRfRElTQUJMRUQ7XG4gICAgICB0aGlzLnRlcm1pbmFsLnN5bmNNb3VzZVN0eWxlKCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMTI6IC8vIFN0YXJ0IGJsaW5raW5nIGN1cnNvclxuICAgICAgaWYgKHRoaXMuZW5hYmxlRGVjMTIpIHRoaXMudGVybWluYWwuc2V0Q3Vyc29yQmxpbmsoc3RhdGUpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDI1OiAvLyBERUNUQ0VNXG4gICAgICB0aGlzLnRlcm1pbmFsLnNldEN1cnNvclZpc2libGUoc3RhdGUpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDMwOiAvLyBTaG93IHNjcm9sbGJhclxuICAgICAgdGhpcy50ZXJtaW5hbC5zZXRTY3JvbGxiYXJWaXNpYmxlKHN0YXRlKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSA0MDogLy8gQWxsb3cgODAgLSAxMzIgKERFQ0NPTE0pIE1vZGVcbiAgICAgIHRoaXMudGVybWluYWwuYWxsb3dDb2x1bW5XaWR0aENoYW5nZXNfID0gc3RhdGU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgNDU6IC8vIFJldmVyc2Utd3JhcGFyb3VuZCBNb2RlXG4gICAgICB0aGlzLnRlcm1pbmFsLnNldFJldmVyc2VXcmFwYXJvdW5kKHN0YXRlKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSA2NzogLy8gQmFja2Fycm93IGtleSBzZW5kcyBiYWNrc3BhY2UgKERFQ0JLTSlcbiAgICAgIHRoaXMudGVybWluYWwua2V5Ym9hcmQuYmFja3NwYWNlU2VuZHNCYWNrc3BhY2UgPSBzdGF0ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAxMDAwOiAvLyBSZXBvcnQgb24gbW91c2UgY2xpY2tzIG9ubHkgKFgxMSkuXG4gICAgICB0aGlzLm1vdXNlUmVwb3J0ID0gc3RhdGVcbiAgICAgICAgPyB0aGlzLk1PVVNFX1JFUE9SVF9DTElDS1xuICAgICAgICA6IHRoaXMuTU9VU0VfUkVQT1JUX0RJU0FCTEVEO1xuICAgICAgdGhpcy50ZXJtaW5hbC5zeW5jTW91c2VTdHlsZSgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDEwMDI6IC8vIFJlcG9ydCBvbiBtb3VzZSBjbGlja3MgYW5kIGRyYWdzXG4gICAgICB0aGlzLm1vdXNlUmVwb3J0ID0gc3RhdGVcbiAgICAgICAgPyB0aGlzLk1PVVNFX1JFUE9SVF9EUkFHXG4gICAgICAgIDogdGhpcy5NT1VTRV9SRVBPUlRfRElTQUJMRUQ7XG4gICAgICB0aGlzLnRlcm1pbmFsLnN5bmNNb3VzZVN0eWxlKCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMTAwNDogLy8gUmVwb3J0IG9uIHdpbmRvdyBmb2N1cyBjaGFuZ2UuXG4gICAgICB0aGlzLnRlcm1pbmFsLnJlcG9ydEZvY3VzID0gc3RhdGU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMTAwNTogLy8gRXh0ZW5kZWQgY29vcmRpbmF0ZXMgaW4gVVRGLTggbW9kZS5cbiAgICAgIHRoaXMubW91c2VDb29yZGluYXRlcyA9IHN0YXRlXG4gICAgICAgID8gdGhpcy5NT1VTRV9DT09SRElOQVRFU19VVEY4XG4gICAgICAgIDogdGhpcy5NT1VTRV9DT09SRElOQVRFU19YMTA7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMTAwNjogLy8gRXh0ZW5kZWQgY29vcmRpbmF0ZXMgaW4gU0dSIG1vZGUuXG4gICAgICB0aGlzLm1vdXNlQ29vcmRpbmF0ZXMgPSBzdGF0ZVxuICAgICAgICA/IHRoaXMuTU9VU0VfQ09PUkRJTkFURVNfU0dSXG4gICAgICAgIDogdGhpcy5NT1VTRV9DT09SRElOQVRFU19YMTA7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMTAwNzogLy8gRW5hYmxlIEFsdGVybmF0ZSBTY3JvbGwgTW9kZS5cbiAgICAgIHRoaXMudGVybWluYWwuc2Nyb2xsV2hlZWxBcnJvd0tleXNfID0gc3RhdGU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMTAxMDogLy8gU2Nyb2xsIHRvIGJvdHRvbSBvbiB0dHkgb3V0cHV0XG4gICAgICB0aGlzLnRlcm1pbmFsLnNjcm9sbE9uT3V0cHV0ID0gc3RhdGU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMTAxMTogLy8gU2Nyb2xsIHRvIGJvdHRvbSBvbiBrZXkgcHJlc3NcbiAgICAgIHRoaXMudGVybWluYWwuc2Nyb2xsT25LZXlzdHJva2UgPSBzdGF0ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAxMDM2OiAvLyBTZW5kIEVTQyB3aGVuIE1ldGEgbW9kaWZpZXMgYSBrZXlcbiAgICAgIHRoaXMudGVybWluYWwua2V5Ym9hcmQubWV0YVNlbmRzRXNjYXBlID0gc3RhdGU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMTAzOTogLy8gU2VuZCBFU0Mgd2hlbiBBbHQgbW9kaWZpZXMgYSBrZXlcbiAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICBpZiAoIXRoaXMudGVybWluYWwua2V5Ym9hcmQucHJldmlvdXNBbHRTZW5kc1doYXRfKSB7XG4gICAgICAgICAgdGhpcy50ZXJtaW5hbC5rZXlib2FyZC5wcmV2aW91c0FsdFNlbmRzV2hhdF8gPSB0aGlzLnRlcm1pbmFsLmtleWJvYXJkLmFsdFNlbmRzV2hhdDtcbiAgICAgICAgICB0aGlzLnRlcm1pbmFsLmtleWJvYXJkLmFsdFNlbmRzV2hhdCA9ICdlc2NhcGUnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMudGVybWluYWwua2V5Ym9hcmQucHJldmlvdXNBbHRTZW5kc1doYXRfKSB7XG4gICAgICAgIHRoaXMudGVybWluYWwua2V5Ym9hcmQuYWx0U2VuZHNXaGF0ID0gdGhpcy50ZXJtaW5hbC5rZXlib2FyZC5wcmV2aW91c0FsdFNlbmRzV2hhdF87XG4gICAgICAgIHRoaXMudGVybWluYWwua2V5Ym9hcmQucHJldmlvdXNBbHRTZW5kc1doYXRfID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSA0NzogLy8gVXNlIEFsdGVybmF0ZSBTY3JlZW4gQnVmZmVyXG4gICAgY2FzZSAxMDQ3OlxuICAgICAgdGhpcy50ZXJtaW5hbC5zZXRBbHRlcm5hdGVNb2RlKHN0YXRlKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAxMDQ4OiAvLyBTYXZlIGN1cnNvciBhcyBpbiBERUNTQy5cbiAgICAgIGlmIChzdGF0ZSkgdGhpcy50ZXJtaW5hbC5zYXZlQ3Vyc29yQW5kU3RhdGUoKTtcbiAgICAgIGVsc2UgdGhpcy50ZXJtaW5hbC5yZXN0b3JlQ3Vyc29yQW5kU3RhdGUoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAxMDQ5OiAvLyAxMDQ3ICsgMTA0OCArIGNsZWFyLlxuICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgIHRoaXMudGVybWluYWwuc2F2ZUN1cnNvckFuZFN0YXRlKCk7XG4gICAgICAgIHRoaXMudGVybWluYWwuc2V0QWx0ZXJuYXRlTW9kZShzdGF0ZSk7XG4gICAgICAgIHRoaXMudGVybWluYWwuY2xlYXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGVybWluYWwuc2V0QWx0ZXJuYXRlTW9kZShzdGF0ZSk7XG4gICAgICAgIHRoaXMudGVybWluYWwucmVzdG9yZUN1cnNvckFuZFN0YXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAyMDA0OiAvLyBCcmFja2V0ZWQgcGFzdGUgbW9kZS5cbiAgICAgIHRoaXMudGVybWluYWwuc2V0QnJhY2tldGVkUGFzdGUoc3RhdGUpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHRoaXMud2FyblVuaW1wbGVtZW50ZWQpXG4gICAgICAgIGNvbnNvbGUud2FybignVW5pbXBsZW1lbnRlZCBERUMgUHJpdmF0ZSBNb2RlOiAnICsgY29kZSk7XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuLyoqXG4gKiBGdW5jdGlvbiBzaGFyZWQgYnkgY29udHJvbCBjaGFyYWN0ZXJzIGFuZCBlc2NhcGUgc2VxdWVuY2VzIHRoYXQgYXJlXG4gKiBpZ25vcmVkLlxuICovXG5odGVybS5WVC5pZ25vcmUgPSBmdW5jdGlvbigpIHt9O1xuXG4vKipcbiAqIENvbGxlY3Rpb24gb2YgY29udHJvbCBjaGFyYWN0ZXJzIGV4cHJlc3NlZCBpbiBhIHNpbmdsZSBieXRlLlxuICpcbiAqIFRoaXMgaW5jbHVkZXMgdGhlIGNoYXJhY3RlcnMgZnJvbSB0aGUgQzAgYW5kIEMxIHNldHMgKHNlZSBbQ1RSTF0pIHRoYXQgd2VcbiAqIGNhcmUgYWJvdXQuICBUd28gYnl0ZSB2ZXJzaW9ucyBvZiB0aGUgQzEgY29kZXMgYXJlIGRlZmluZWQgaW4gdGhlXG4gKiBodGVybS5WVC5FU0MgY29sbGVjdGlvbi5cbiAqXG4gKiBUaGUgJ0NDMScgbW5lbW9uaWMgaGVyZSByZWZlcnMgdG8gdGhlIGZhY3QgdGhhdCB0aGVzZSBhcmUgb25lLWJ5dGUgQ29udHJvbFxuICogQ29kZXMuICBJdCdzIG9ubHkgdXNlZCBpbiB0aGlzIHNvdXJjZSBmaWxlIGFuZCBub3QgZGVmaW5lZCBpbiBhbnkgb2YgdGhlXG4gKiByZWZlcmVuY2VkIGRvY3VtZW50cy5cbiAqL1xuaHRlcm0uVlQuQ0MxID0ge307XG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiB0d28tYnl0ZSBhbmQgdGhyZWUtYnl0ZSBzZXF1ZW5jZXMgc3RhcnRpbmcgd2l0aCBFU0MuXG4gKi9cbmh0ZXJtLlZULkVTQyA9IHt9O1xuXG4vKipcbiAqIENvbGxlY3Rpb24gb2YgQ1NJIChDb250cm9sIFNlcXVlbmNlIEludHJvZHVjZXIpIHNlcXVlbmNlcy5cbiAqXG4gKiBUaGVzZSBzZXF1ZW5jZXMgYmVnaW4gd2l0aCAnRVNDIFsnLCBhbmQgbWF5IHRha2UgemVybyBvciBtb3JlIGFyZ3VtZW50cy5cbiAqL1xuaHRlcm0uVlQuQ1NJID0ge307XG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiBPU0MgKE9wZXJhdGluZyBTeXN0ZW0gQ29udHJvbCkgc2VxdWVuY2VzLlxuICpcbiAqIFRoZXNlIHNlcXVlbmNlcyBiZWdpbiB3aXRoICdFU0MgXScsIGZvbGxvd2VkIGJ5IGEgZnVuY3Rpb24gbnVtYmVyIGFuZCBhXG4gKiBzdHJpbmcgdGVybWluYXRlZCBieSBlaXRoZXIgU1Qgb3IgQkVMLlxuICovXG5odGVybS5WVC5PU0MgPSB7fTtcblxuLyoqXG4gKiBDb2xsZWN0aW9uIG9mIFZUNTIgc2VxdWVuY2VzLlxuICpcbiAqIFdoZW4gaW4gVlQ1MiBtb2RlLCBvdGhlciBzZXF1ZW5jZXMgYXJlIGRpc2FibGVkLlxuICovXG5odGVybS5WVC5WVDUyID0ge307XG5cbi8qKlxuICogTnVsbCAoTlVMKS5cbiAqXG4gKiBTaWxlbnRseSBpZ25vcmVkLlxuICovXG5odGVybS5WVC5DQzFbJ1xceDAwJ10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogRW5xdWlyeSAoRU5RKS5cbiAqXG4gKiBUcmFuc21pdCBhbnN3ZXJiYWNrIG1lc3NhZ2UuXG4gKlxuICogVGhlIGRlZmF1bHQgYW5zd2VyYmFjayBtZXNzYWdlIGluIHh0ZXJtIGlzIGFuIGVtcHR5IHN0cmluZywgc28gd2UganVzdFxuICogaWdub3JlIHRoaXMuXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4MDUnXSA9IGh0ZXJtLlZULmlnbm9yZTtcblxuLyoqXG4gKiBSaW5nIEJlbGwgKEJFTCkuXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4MDcnXSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnRlcm1pbmFsLnJpbmdCZWxsKCk7XG59O1xuXG4vKipcbiAqIEJhY2tzcGFjZSAoQlMpLlxuICpcbiAqIE1vdmUgdGhlIGN1cnNvciB0byB0aGUgbGVmdCBvbmUgY2hhcmFjdGVyIHBvc2l0aW9uLCB1bmxlc3MgaXQgaXMgYXQgdGhlXG4gKiBsZWZ0IG1hcmdpbiwgaW4gd2hpY2ggY2FzZSBubyBhY3Rpb24gb2NjdXJzLlxuICovXG5odGVybS5WVC5DQzFbJ1xceDA4J10gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy50ZXJtaW5hbC5jdXJzb3JMZWZ0KDEpO1xufTtcblxuLyoqXG4gKiBIb3Jpem9udGFsIFRhYiAoSFQpLlxuICpcbiAqIE1vdmUgdGhlIGN1cnNvciB0byB0aGUgbmV4dCB0YWIgc3RvcCwgb3IgdG8gdGhlIHJpZ2h0IG1hcmdpbiBpZiBubyBmdXJ0aGVyXG4gKiB0YWIgc3RvcHMgYXJlIHByZXNlbnQgb24gdGhlIGxpbmUuXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4MDknXSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnRlcm1pbmFsLmZvcndhcmRUYWJTdG9wKCk7XG59O1xuXG4vKipcbiAqIExpbmUgRmVlZCAoTEYpLlxuICpcbiAqIFRoaXMgY29kZSBjYXVzZXMgYSBsaW5lIGZlZWQgb3IgYSBuZXcgbGluZSBvcGVyYXRpb24uICBTZWUgQXV0b21hdGljXG4gKiBOZXdsaW5lIChMTk0pLlxuICovXG5odGVybS5WVC5DQzFbJ1xceDBhJ10gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy50ZXJtaW5hbC5mb3JtRmVlZCgpO1xufTtcblxuLyoqXG4gKiBWZXJ0aWNhbCBUYWIgKFZUKS5cbiAqXG4gKiBJbnRlcnByZXRlZCBhcyBMRi5cbiAqL1xuaHRlcm0uVlQuQ0MxWydcXHgwYiddID0gaHRlcm0uVlQuQ0MxWydcXHgwYSddO1xuXG4vKipcbiAqIEZvcm0gRmVlZCAoRkYpLlxuICpcbiAqIEludGVycHJldGVkIGFzIExGLlxuICovXG5odGVybS5WVC5DQzFbJ1xceDBjJ10gPSBodGVybS5WVC5DQzFbJ1xceDBhJ107XG5cbi8qKlxuICogQ2FycmlhZ2UgUmV0dXJuIChDUikuXG4gKlxuICogTW92ZSBjdXJzb3IgdG8gdGhlIGxlZnQgbWFyZ2luIG9uIHRoZSBjdXJyZW50IGxpbmUuXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4MGQnXSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnRlcm1pbmFsLnNldEN1cnNvckNvbHVtbigwKTtcbn07XG5cbi8qKlxuICogU2hpZnQgT3V0IChTTyksIGFrYSBMb2NrIFNoaWZ0IDAgKExTMSkuXG4gKlxuICogSW52b2tlIEcxIGNoYXJhY3RlciBzZXQgaW4gR0wuXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4MGUnXSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLkdMID0gJ0cxJztcbn07XG5cbi8qKlxuICogU2hpZnQgSW4gKFNJKSwgYWthIExvY2sgU2hpZnQgMCAoTFMwKS5cbiAqXG4gKiBJbnZva2UgRzAgY2hhcmFjdGVyIHNldCBpbiBHTC5cbiAqL1xuaHRlcm0uVlQuQ0MxWydcXHgwZiddID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuR0wgPSAnRzAnO1xufTtcblxuLyoqXG4gKiBUcmFuc21pdCBPbiAoWE9OKS5cbiAqXG4gKiBOb3QgY3VycmVudGx5IGltcGxlbWVudGVkLlxuICpcbiAqIFRPRE8ocmdpbmRhKTogSW1wbGVtZW50P1xuICovXG5odGVybS5WVC5DQzFbJ1xceDExJ10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogVHJhbnNtaXQgT2ZmIChYT0ZGKS5cbiAqXG4gKiBOb3QgY3VycmVudGx5IGltcGxlbWVudGVkLlxuICpcbiAqIFRPRE8ocmdpbmRhKTogSW1wbGVtZW50P1xuICovXG5odGVybS5WVC5DQzFbJ1xceDEzJ10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogQ2FuY2VsIChDQU4pLlxuICpcbiAqIElmIHNlbnQgZHVyaW5nIGEgY29udHJvbCBzZXF1ZW5jZSwgdGhlIHNlcXVlbmNlIGlzIGltbWVkaWF0ZWx5IHRlcm1pbmF0ZWRcbiAqIGFuZCBub3QgZXhlY3V0ZWQuXG4gKlxuICogSXQgYWxzbyBjYXVzZXMgdGhlIGVycm9yIGNoYXJhY3RlciB0byBiZSBkaXNwbGF5ZWQuXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4MTgnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgLy8gSWYgd2UndmUgc2hpZnRlZCBpbiB0aGUgRzEgY2hhcmFjdGVyIHNldCwgc2hpZnQgaXQgYmFjayBvdXQgdG9cbiAgLy8gdGhlIGRlZmF1bHQgY2hhcmFjdGVyIHNldC5cbiAgaWYgKHRoaXMuR0wgPT0gJ0cxJykge1xuICAgIHRoaXMuR0wgPSAnRzAnO1xuICB9XG4gIHBhcnNlU3RhdGUucmVzZXRQYXJzZUZ1bmN0aW9uKCk7XG4gIHRoaXMudGVybWluYWwucHJpbnQoJz8nKTtcbn07XG5cbi8qKlxuICogU3Vic3RpdHV0ZSAoU1VCKS5cbiAqXG4gKiBJbnRlcnByZXRlZCBhcyBDQU4uXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4MWEnXSA9IGh0ZXJtLlZULkNDMVsnXFx4MTgnXTtcblxuLyoqXG4gKiBFc2NhcGUgKEVTQykuXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4MWInXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgZnVuY3Rpb24gcGFyc2VFU0MocGFyc2VTdGF0ZSkge1xuICAgIHZhciBjaCA9IHBhcnNlU3RhdGUuY29uc3VtZUNoYXIoKTtcblxuICAgIGlmIChjaCA9PSAnXFx4MWInKSByZXR1cm47XG5cbiAgICB0aGlzLmRpc3BhdGNoKCdFU0MnLCBjaCwgcGFyc2VTdGF0ZSk7XG5cbiAgICBpZiAocGFyc2VTdGF0ZS5mdW5jID09IHBhcnNlRVNDKSBwYXJzZVN0YXRlLnJlc2V0UGFyc2VGdW5jdGlvbigpO1xuICB9XG5cbiAgcGFyc2VTdGF0ZS5mdW5jID0gcGFyc2VFU0M7XG59O1xuXG4vKipcbiAqIERlbGV0ZSAoREVMKS5cbiAqL1xuaHRlcm0uVlQuQ0MxWydcXHg3ZiddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vLyA4IGJpdCBjb250cm9sIGNoYXJhY3RlcnMgYW5kIHRoZWlyIHR3byBieXRlIGVxdWl2YWxlbnRzLCBiZWxvdy4uLlxuXG4vKipcbiAqIEluZGV4IChJTkQpLlxuICpcbiAqIExpa2UgbmV3bGluZSwgb25seSBrZWVwIHRoZSBYIHBvc2l0aW9uXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4ODQnXSA9IGh0ZXJtLlZULkVTQ1snRCddID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudGVybWluYWwubGluZUZlZWQoKTtcbn07XG5cbi8qKlxuICogTmV4dCBMaW5lIChORUwpLlxuICpcbiAqIExpa2UgbmV3bGluZSwgYnV0IGRvZXNuJ3QgYWRkIGxpbmVzLlxuICovXG5odGVybS5WVC5DQzFbJ1xceDg1J10gPSBodGVybS5WVC5FU0NbJ0UnXSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnRlcm1pbmFsLnNldEN1cnNvckNvbHVtbigwKTtcbiAgdGhpcy50ZXJtaW5hbC5jdXJzb3JEb3duKDEpO1xufTtcblxuLyoqXG4gKiBIb3Jpem9udGFsIFRhYnVsYXRpb24gU2V0IChIVFMpLlxuICovXG5odGVybS5WVC5DQzFbJ1xceDg4J10gPSBodGVybS5WVC5FU0NbJ0gnXSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnRlcm1pbmFsLnNldFRhYlN0b3AodGhpcy50ZXJtaW5hbC5nZXRDdXJzb3JDb2x1bW4oKSk7XG59O1xuXG4vKipcbiAqIFJldmVyc2UgSW5kZXggKFJJKS5cbiAqXG4gKiBNb3ZlIHVwIG9uZSBsaW5lLlxuICovXG5odGVybS5WVC5DQzFbJ1xceDhkJ10gPSBodGVybS5WVC5FU0NbJ00nXSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnRlcm1pbmFsLnJldmVyc2VMaW5lRmVlZCgpO1xufTtcblxuLyoqXG4gKiBTaW5nbGUgU2hpZnQgMiAoU1MyKS5cbiAqXG4gKiBTZWxlY3Qgb2YgRzIgQ2hhcmFjdGVyIFNldCBmb3IgdGhlIG5leHQgY2hhcmFjdGVyIG9ubHkuXG4gKlxuICogTm90IGN1cnJlbnRseSBpbXBsZW1lbnRlZC5cbiAqL1xuaHRlcm0uVlQuQ0MxWydcXHg4ZSddID0gaHRlcm0uVlQuRVNDWydOJ10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogU2luZ2xlIFNoaWZ0IDMgKFNTMykuXG4gKlxuICogU2VsZWN0IG9mIEczIENoYXJhY3RlciBTZXQgZm9yIHRoZSBuZXh0IGNoYXJhY3RlciBvbmx5LlxuICpcbiAqIE5vdCBjdXJyZW50bHkgaW1wbGVtZW50ZWQuXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4OGYnXSA9IGh0ZXJtLlZULkVTQ1snTyddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIERldmljZSBDb250cm9sIFN0cmluZyAoRENTKS5cbiAqXG4gKiBJbmRpY2F0ZSBhIERDUyBzZXF1ZW5jZS4gIFNlZSBEZXZpY2UtQ29udHJvbCBmdW5jdGlvbnMgaW4gW1hURVJNXS5cbiAqIE5vdCBjdXJyZW50bHkgaW1wbGVtZW50ZWQuXG4gKlxuICogVE9ETyhyZ2luZGEpOiBDb25zaWRlciBpbXBsZW1lbnRpbmcgREVDUlFTUywgdGhlIHJlc3QgZG9uJ3Qgc2VlbSBhcHBsaWNhYmxlLlxuICovXG5odGVybS5WVC5DQzFbJ1xceDkwJ10gPSBodGVybS5WVC5FU0NbJ1AnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgcGFyc2VTdGF0ZS5yZXNldEFyZ3VtZW50cygpO1xuICBwYXJzZVN0YXRlLmZ1bmMgPSB0aGlzLnBhcnNlVW50aWxTdHJpbmdUZXJtaW5hdG9yXztcbn07XG5cbi8qKlxuICogU3RhcnQgb2YgR3VhcmRlZCBBcmVhIChTUEEpLlxuICpcbiAqIFdpbGwgbm90IGltcGxlbWVudC5cbiAqL1xuaHRlcm0uVlQuQ0MxWydcXHg5NiddID0gaHRlcm0uVlQuRVNDWydWJ10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogRW5kIG9mIEd1YXJkZWQgQXJlYSAoRVBBKS5cbiAqXG4gKiBXaWxsIG5vdCBpbXBsZW1lbnQuXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4OTcnXSA9IGh0ZXJtLlZULkVTQ1snVyddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIFN0YXJ0IG9mIFN0cmluZyAoU09TKS5cbiAqXG4gKiBXaWxsIG5vdCBpbXBsZW1lbnQuXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4OTgnXSA9IGh0ZXJtLlZULkVTQ1snWCddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIFNpbmdsZSBDaGFyYWN0ZXIgSW50cm9kdWNlciAoU0NJLCBhbHNvIERFQ0lEKS5cbiAqXG4gKiBSZXR1cm4gVGVybWluYWwgSUQuICBPYnNvbGV0ZSBmb3JtIG9mICdFU0MgWyBjJyAoREEpLlxuICovXG5odGVybS5WVC5DQzFbJ1xceDlhJ10gPSBodGVybS5WVC5FU0NbJ1onXSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnRlcm1pbmFsLmlvLnNlbmRTdHJpbmcoJ1xceDFiWz8xOzJjJyk7XG59O1xuXG4vKipcbiAqIENvbnRyb2wgU2VxdWVuY2UgSW50cm9kdWNlciAoQ1NJKS5cbiAqXG4gKiBUaGUgbGVhZCBpbnRvIG1vc3QgZXNjYXBlIHNlcXVlbmNlcy4gIFNlZSBbQ1NJXS5cbiAqL1xuaHRlcm0uVlQuQ0MxWydcXHg5YiddID0gaHRlcm0uVlQuRVNDWydbJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIHBhcnNlU3RhdGUucmVzZXRBcmd1bWVudHMoKTtcbiAgdGhpcy5sZWFkaW5nTW9kaWZpZXJfID0gJyc7XG4gIHRoaXMudHJhaWxpbmdNb2RpZmllcl8gPSAnJztcbiAgcGFyc2VTdGF0ZS5mdW5jID0gdGhpcy5wYXJzZUNTSV87XG59O1xuXG4vKipcbiAqIFN0cmluZyBUZXJtaW5hdG9yIChTVCkuXG4gKlxuICogVXNlZCB0byB0ZXJtaW5hdGUgRENTL09TQy9QTS9BUEMgY29tbWFuZHMgd2hpY2ggbWF5IHRha2Ugc3RyaW5nIGFyZ3VtZW50cy5cbiAqXG4gKiBXZSBkb24ndCBkaXJlY3RseSBoYW5kbGUgaXQgaGVyZSwgYXMgaXQncyBvbmx5IHVzZWQgdG8gdGVybWluYXRlIG90aGVyXG4gKiBzZXF1ZW5jZXMuICBTZWUgdGhlICdwYXJzZVVudGlsU3RyaW5nVGVybWluYXRvcl8nIG1ldGhvZC5cbiAqL1xuaHRlcm0uVlQuQ0MxWydcXHg5YyddID0gaHRlcm0uVlQuRVNDWydcXFxcJ10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogT3BlcmF0aW5nIFN5c3RlbSBDb21tYW5kIChPU0MpLlxuICpcbiAqIENvbW1hbmRzIHJlbGF0aW5nIHRvIHRoZSBvcGVyYXRpbmcgc3lzdGVtLlxuICovXG5odGVybS5WVC5DQzFbJ1xceDlkJ10gPSBodGVybS5WVC5FU0NbJ10nXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgcGFyc2VTdGF0ZS5yZXNldEFyZ3VtZW50cygpO1xuXG4gIGZ1bmN0aW9uIHBhcnNlT1NDKHBhcnNlU3RhdGUpIHtcbiAgICBpZiAoIXRoaXMucGFyc2VVbnRpbFN0cmluZ1Rlcm1pbmF0b3JfKHBhcnNlU3RhdGUpKSB7XG4gICAgICAvLyBUaGUgc3RyaW5nIHNlcXVlbmNlIHdhcyB0b28gbG9uZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyc2VTdGF0ZS5mdW5jID09IHBhcnNlT1NDKSB7XG4gICAgICAvLyBXZSdyZSBub3QgZG9uZSBwYXJzaW5nIHRoZSBzdHJpbmcgeWV0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFdlJ3JlIGRvbmUuXG4gICAgdmFyIGFyeSA9IHBhcnNlU3RhdGUuYXJnc1swXS5tYXRjaCgvXihcXGQrKTsoLiopJC8pO1xuICAgIGlmIChhcnkpIHtcbiAgICAgIHBhcnNlU3RhdGUuYXJnc1swXSA9IGFyeVsyXTtcbiAgICAgIHRoaXMuZGlzcGF0Y2goJ09TQycsIGFyeVsxXSwgcGFyc2VTdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBPU0M6ICcgKyBKU09OLnN0cmluZ2lmeShwYXJzZVN0YXRlLmFyZ3NbMF0pKTtcbiAgICB9XG5cbiAgICAvLyBSZXNldHRpbmcgdGhlIGFyZ3VtZW50cyBpc24ndCBzdHJpY3RseSBuZWNlc3NhcnksIGJ1dCBpdCBtYWtlcyBkZWJ1Z2dpbmdcbiAgICAvLyBsZXNzIGNvbmZ1c2luZyAob3RoZXJ3aXNlIGFyZ3Mgd2lsbCBzdGljayBhcm91bmQgdW50aWwgdGhlIG5leHQgc2VxdWVuY2VcbiAgICAvLyB0aGF0IG5lZWRzIGFyZ3VtZW50cykuXG4gICAgcGFyc2VTdGF0ZS5yZXNldEFyZ3VtZW50cygpO1xuICB9XG5cbiAgcGFyc2VTdGF0ZS5mdW5jID0gcGFyc2VPU0M7XG59O1xuXG4vKipcbiAqIFByaXZhY3kgTWVzc2FnZSAoUE0pLlxuICpcbiAqIFdpbGwgbm90IGltcGxlbWVudC5cbiAqL1xuaHRlcm0uVlQuQ0MxWydcXHg5ZSddID0gaHRlcm0uVlQuRVNDWydeJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIHBhcnNlU3RhdGUucmVzZXRBcmd1bWVudHMoKTtcbiAgcGFyc2VTdGF0ZS5mdW5jID0gdGhpcy5wYXJzZVVudGlsU3RyaW5nVGVybWluYXRvcl87XG59O1xuXG4vKipcbiAqIEFwcGxpY2F0aW9uIFByb2dyYW0gQ29udHJvbCAoQVBDKS5cbiAqXG4gKiBXaWxsIG5vdCBpbXBsZW1lbnQuXG4gKi9cbmh0ZXJtLlZULkNDMVsnXFx4OWYnXSA9IGh0ZXJtLlZULkVTQ1snXyddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICBwYXJzZVN0YXRlLnJlc2V0QXJndW1lbnRzKCk7XG4gIHBhcnNlU3RhdGUuZnVuYyA9IHRoaXMucGFyc2VVbnRpbFN0cmluZ1Rlcm1pbmF0b3JfO1xufTtcblxuLyoqXG4gKiBFU0MgXFx4MjAgLSBVbmNsZWFyIHRvIG1lIHdoZXJlIHRoZXNlIG9yaWdpbmF0ZWQsIHBvc3NpYmx5IGluIHh0ZXJtLlxuICpcbiAqIE5vdCBjdXJyZW50bHkgaW1wbGVtZW50ZWQ6XG4gKiAgIEVTQyBcXHgyMCBGIC0gU2VsZWN0IDcgYml0IGVzY2FwZSBjb2RlcyBpbiByZXNwb25zZXMgKFM3QzFUKS5cbiAqICAgRVNDIFxceDIwIEcgLSBTZWxlY3QgOCBiaXQgZXNjYXBlIGNvZGVzIGluIHJlc3BvbnNlcyAoUzhDMVQpLlxuICogICAgICAgICAgICAgICAgTkI6IFdlIGN1cnJlbnRseSBhc3N1bWUgUzdDMVQgYWx3YXlzLlxuICpcbiAqIFdpbGwgbm90IGltcGxlbWVudDpcbiAqICAgRVNDIFxceDIwIEwgLSBTZXQgQU5TSSBjb25mb3JtYW5jZSBsZXZlbCAxLlxuICogICBFU0MgXFx4MjAgTSAtIFNldCBBTlNJIGNvbmZvcm1hbmNlIGxldmVsIDIuXG4gKiAgIEVTQyBcXHgyMCBOIC0gU2V0IEFOU0kgY29uZm9ybWFuY2UgbGV2ZWwgMy5cbiAqL1xuaHRlcm0uVlQuRVNDWydcXHgyMCddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICBwYXJzZVN0YXRlLmZ1bmMgPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gICAgdmFyIGNoID0gcGFyc2VTdGF0ZS5jb25zdW1lQ2hhcigpO1xuICAgIGlmICh0aGlzLndhcm5VbmltcGxlbWVudGVkKVxuICAgICAgY29uc29sZS53YXJuKCdVbmltcGxlbWVudGVkIHNlcXVlbmNlOiBFU0MgMHgyMCAnICsgY2gpO1xuICAgIHBhcnNlU3RhdGUucmVzZXRQYXJzZUZ1bmN0aW9uKCk7XG4gIH07XG59O1xuXG4vKipcbiAqIERFQyAnRVNDICMnIHNlcXVlbmNlcy5cbiAqL1xuaHRlcm0uVlQuRVNDWycjJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIHBhcnNlU3RhdGUuZnVuYyA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgICB2YXIgY2ggPSBwYXJzZVN0YXRlLmNvbnN1bWVDaGFyKCk7XG4gICAgaWYgKGNoID09ICc4Jykge1xuICAgICAgLy8gREVDIFNjcmVlbiBBbGlnbm1lbnQgVGVzdCAoREVDQUxOKS5cbiAgICAgIHRoaXMudGVybWluYWwuc2V0Q3Vyc29yUG9zaXRpb24oMCwgMCk7XG4gICAgICB0aGlzLnRlcm1pbmFsLmZpbGwoJ0UnKTtcbiAgICB9XG5cbiAgICBwYXJzZVN0YXRlLnJlc2V0UGFyc2VGdW5jdGlvbigpO1xuICB9O1xufTtcblxuLyoqXG4gKiBEZXNpZ25hdGUgT3RoZXIgQ29kaW5nIFN5c3RlbSAoRE9DUykuXG4gKi9cbmh0ZXJtLlZULkVTQ1snJSddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICBwYXJzZVN0YXRlLmZ1bmMgPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gICAgdmFyIGNoID0gcGFyc2VTdGF0ZS5jb25zdW1lQ2hhcigpO1xuXG4gICAgLy8gSWYgd2UndmUgbG9ja2VkIHRoZSBlbmNvZGluZywgdGhlbiBqdXN0IGVhdCB0aGUgYnl0ZXMgYW5kIHJldHVybi5cbiAgICBpZiAodGhpcy5jb2RpbmdTeXN0ZW1Mb2NrZWRfKSB7XG4gICAgICBpZiAoY2ggPT0gJy8nKSBwYXJzZVN0YXRlLmNvbnN1bWVDaGFyKCk7XG4gICAgICBwYXJzZVN0YXRlLnJlc2V0UGFyc2VGdW5jdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFByb2Nlc3MgdGhlIGVuY29kaW5nIHJlcXVlc3RzLlxuICAgIHN3aXRjaCAoY2gpIHtcbiAgICAgIGNhc2UgJ0AnOlxuICAgICAgICAvLyBTd2l0Y2ggdG8gRUNNQSAzNS5cbiAgICAgICAgdGhpcy5zZXRFbmNvZGluZygnaXNvLTIwMjInKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgICAvLyBTd2l0Y2ggdG8gVVRGLTguXG4gICAgICAgIHRoaXMuc2V0RW5jb2RpbmcoJ3V0Zi04Jyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICcvJzpcbiAgICAgICAgLy8gT25lIHdheSB0cmFuc2l0aW9uIHRvIHNvbWV0aGluZyBlbHNlLlxuICAgICAgICBjaCA9IHBhcnNlU3RhdGUuY29uc3VtZUNoYXIoKTtcbiAgICAgICAgc3dpdGNoIChjaCkge1xuICAgICAgICAgIGNhc2UgJ0cnOiAvLyBVVEYtOCBMZXZlbCAxLlxuICAgICAgICAgIGNhc2UgJ0gnOiAvLyBVVEYtOCBMZXZlbCAyLlxuICAgICAgICAgIGNhc2UgJ0knOiAvLyBVVEYtOCBMZXZlbCAzLlxuICAgICAgICAgICAgLy8gV2UgdHJlYXQgYWxsIFVURi04IGxldmVscyB0aGUgc2FtZS5cbiAgICAgICAgICAgIHRoaXMuc2V0RW5jb2RpbmcoJ3V0Zi04LWxvY2tlZCcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKHRoaXMud2FyblVuaW1wbGVtZW50ZWQpXG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybignVW5rbm93biBFU0MgJSAvIGFyZ3VtZW50OiAnICsgSlNPTi5zdHJpbmdpZnkoY2gpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAodGhpcy53YXJuVW5pbXBsZW1lbnRlZClcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1Vua25vd24gRVNDICUgYXJndW1lbnQ6ICcgKyBKU09OLnN0cmluZ2lmeShjaCkpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBwYXJzZVN0YXRlLnJlc2V0UGFyc2VGdW5jdGlvbigpO1xuICB9O1xufTtcblxuLyoqXG4gKiBDaGFyYWN0ZXIgU2V0IFNlbGVjdGlvbiAoU0NTKS5cbiAqXG4gKiAgIEVTQyAoIFBzIC0gU2V0IEcwIGNoYXJhY3RlciBzZXQgKFZUMTAwKS5cbiAqICAgRVNDICkgUHMgLSBTZXQgRzEgY2hhcmFjdGVyIHNldCAoVlQyMjApLlxuICogICBFU0MgKiBQcyAtIFNldCBHMiBjaGFyYWN0ZXIgc2V0IChWVDIyMCkuXG4gKiAgIEVTQyArIFBzIC0gU2V0IEczIGNoYXJhY3RlciBzZXQgKFZUMjIwKS5cbiAqICAgRVNDIC0gUHMgLSBTZXQgRzEgY2hhcmFjdGVyIHNldCAoVlQzMDApLlxuICogICBFU0MgLiBQcyAtIFNldCBHMiBjaGFyYWN0ZXIgc2V0IChWVDMwMCkuXG4gKiAgIEVTQyAvIFBzIC0gU2V0IEczIGNoYXJhY3RlciBzZXQgKFZUMzAwKS5cbiAqXG4gKiBBbGwgb3RoZXIgc2VxdWVuY2VzIGFyZSBlY2hvZWQgdG8gdGhlIHRlcm1pbmFsLlxuICovXG5odGVybS5WVC5FU0NbJygnXSA9IGh0ZXJtLlZULkVTQ1snKSddID0gaHRlcm0uVlQuRVNDWycqJ10gPSBodGVybS5WVC5FU0NbXG4gICcrJ1xuXSA9IGh0ZXJtLlZULkVTQ1snLSddID0gaHRlcm0uVlQuRVNDWycuJ10gPSBodGVybS5WVC5FU0NbJy8nXSA9IGZ1bmN0aW9uKFxuICBwYXJzZVN0YXRlLFxuICBjb2RlLFxuKSB7XG4gIHBhcnNlU3RhdGUuZnVuYyA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgICB2YXIgY2ggPSBwYXJzZVN0YXRlLmNvbnN1bWVDaGFyKCk7XG4gICAgaWYgKGNoID09ICdcXHgxYicpIHtcbiAgICAgIHBhcnNlU3RhdGUucmVzZXRQYXJzZUZ1bmN0aW9uKCk7XG4gICAgICBwYXJzZVN0YXRlLmZ1bmMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbWFwID0gdGhpcy5jaGFyYWN0ZXJNYXBzLmdldE1hcChjaCk7XG4gICAgaWYgKG1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29kZSA9PSAnKCcpIHtcbiAgICAgICAgdGhpcy5HMCA9IG1hcDtcbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PSAnKScgfHwgY29kZSA9PSAnLScpIHtcbiAgICAgICAgdGhpcy5HMSA9IG1hcDtcbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PSAnKicgfHwgY29kZSA9PSAnLicpIHtcbiAgICAgICAgdGhpcy5HMiA9IG1hcDtcbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PSAnKycgfHwgY29kZSA9PSAnLycpIHtcbiAgICAgICAgdGhpcy5HMyA9IG1hcDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMud2FyblVuaW1wbGVtZW50ZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdJbnZhbGlkIGNoYXJhY3RlciBzZXQgZm9yIFwiJyArIGNvZGUgKyAnXCI6ICcgKyBjaCk7XG4gICAgfVxuXG4gICAgcGFyc2VTdGF0ZS5yZXNldFBhcnNlRnVuY3Rpb24oKTtcbiAgfTtcbn07XG5cbi8qKlxuICogQmFjayBJbmRleCAoREVDQkkpLlxuICpcbiAqIFZUNDIwIGFuZCB1cC4gIE5vdCBjdXJyZW50bHkgaW1wbGVtZW50ZWQuXG4gKi9cbmh0ZXJtLlZULkVTQ1snNiddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIFNhdmUgQ3Vyc29yIChERUNTQykuXG4gKi9cbmh0ZXJtLlZULkVTQ1snNyddID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudGVybWluYWwuc2F2ZUN1cnNvckFuZFN0YXRlKCk7XG59O1xuXG4vKipcbiAqIFJlc3RvcmUgQ3Vyc29yIChERUNSQykuXG4gKi9cbmh0ZXJtLlZULkVTQ1snOCddID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudGVybWluYWwucmVzdG9yZUN1cnNvckFuZFN0YXRlKCk7XG59O1xuXG4vKipcbiAqIEZvcndhcmQgSW5kZXggKERFQ0ZJKS5cbiAqXG4gKiBWVDIxMCBhbmQgdXAuICBOb3QgY3VycmVudGx5IGltcGxlbWVudGVkLlxuICovXG5odGVybS5WVC5FU0NbJzknXSA9IGh0ZXJtLlZULmlnbm9yZTtcblxuLyoqXG4gKiBBcHBsaWNhdGlvbiBrZXlwYWQgKERFQ0tQQU0pLlxuICovXG5odGVybS5WVC5FU0NbJz0nXSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnRlcm1pbmFsLmtleWJvYXJkLmFwcGxpY2F0aW9uS2V5cGFkID0gdHJ1ZTtcbn07XG5cbi8qKlxuICogTm9ybWFsIGtleXBhZCAoREVDS1BOTSkuXG4gKi9cbmh0ZXJtLlZULkVTQ1snPiddID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudGVybWluYWwua2V5Ym9hcmQuYXBwbGljYXRpb25LZXlwYWQgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogQ3Vyc29yIHRvIGxvd2VyIGxlZnQgY29ybmVyIG9mIHNjcmVlbi5cbiAqXG4gKiBXaWxsIG5vdCBpbXBsZW1lbnQuXG4gKlxuICogVGhpcyBpcyBvbmx5IHJlY29nbml6ZWQgYnkgeHRlcm0gd2hlbiB0aGUgaHBMb3dlcmxlZnRCdWdDb21wYXQgcmVzb3VyY2UgaXNcbiAqIHNldC5cbiAqL1xuaHRlcm0uVlQuRVNDWydGJ10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogRnVsbCBSZXNldCAoUklTKS5cbiAqL1xuaHRlcm0uVlQuRVNDWydjJ10gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy50ZXJtaW5hbC5yZXNldCgpO1xufTtcblxuLyoqXG4gKiBNZW1vcnkgbG9jay91bmxvY2suXG4gKlxuICogV2lsbCBub3QgaW1wbGVtZW50LlxuICovXG5odGVybS5WVC5FU0NbJ2wnXSA9IGh0ZXJtLlZULkVTQ1snbSddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIExvY2sgU2hpZnQgMiAoTFMyKVxuICpcbiAqIEludm9rZSB0aGUgRzIgQ2hhcmFjdGVyIFNldCBhcyBHTC5cbiAqL1xuaHRlcm0uVlQuRVNDWyduJ10gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5HTCA9ICdHMic7XG59O1xuXG4vKipcbiAqIExvY2sgU2hpZnQgMyAoTFMzKVxuICpcbiAqIEludm9rZSB0aGUgRzMgQ2hhcmFjdGVyIFNldCBhcyBHTC5cbiAqL1xuaHRlcm0uVlQuRVNDWydvJ10gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5HTCA9ICdHMyc7XG59O1xuXG4vKipcbiAqIExvY2sgU2hpZnQgMiwgUmlnaHQgKExTM1IpXG4gKlxuICogSW52b2tlIHRoZSBHMyBDaGFyYWN0ZXIgU2V0IGFzIEdSLlxuICovXG5odGVybS5WVC5FU0NbJ3wnXSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLkdSID0gJ0czJztcbn07XG5cbi8qKlxuICogTG9jayBTaGlmdCAyLCBSaWdodCAoTFMyUilcbiAqXG4gKiBJbnZva2UgdGhlIEcyIENoYXJhY3RlciBTZXQgYXMgR1IuXG4gKi9cbmh0ZXJtLlZULkVTQ1snfSddID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuR1IgPSAnRzInO1xufTtcblxuLyoqXG4gKiBMb2NrIFNoaWZ0IDEsIFJpZ2h0IChMUzFSKVxuICpcbiAqIEludm9rZSB0aGUgRzEgQ2hhcmFjdGVyIFNldCBhcyBHUi5cbiAqL1xuaHRlcm0uVlQuRVNDWyd+J10gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5HUiA9ICdHMSc7XG59O1xuXG4vKipcbiAqIENoYW5nZSBpY29uIG5hbWUgYW5kIHdpbmRvdyB0aXRsZS5cbiAqXG4gKiBXZSBvbmx5IGNoYW5nZSB0aGUgd2luZG93IHRpdGxlLlxuICovXG5odGVybS5WVC5PU0NbJzAnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgdGhpcy50ZXJtaW5hbC5zZXRXaW5kb3dUaXRsZShwYXJzZVN0YXRlLmFyZ3NbMF0pO1xufTtcblxuLyoqXG4gKiBDaGFuZ2Ugd2luZG93IHRpdGxlLlxuICovXG5odGVybS5WVC5PU0NbJzInXSA9IGh0ZXJtLlZULk9TQ1snMCddO1xuXG4vKipcbiAqIFNldC9yZWFkIGNvbG9yIHBhbGV0dGUuXG4gKi9cbmh0ZXJtLlZULk9TQ1snNCddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICAvLyBBcmdzIGNvbWUgaW4gYXMgYSBzaW5nbGUgJ2luZGV4MTtyZ2IxIC4uLiA7aW5kZXhOO3JnYk4nIHN0cmluZy5cbiAgLy8gV2Ugc3BsaXQgb24gdGhlIHNlbWljb2xvbiBhbmQgaXRlcmF0ZSB0aHJvdWdoIHRoZSBwYWlycy5cbiAgdmFyIGFyZ3MgPSBwYXJzZVN0YXRlLmFyZ3NbMF0uc3BsaXQoJzsnKTtcblxuICB2YXIgcGFpckNvdW50ID0gcGFyc2VJbnQoYXJncy5sZW5ndGggLyAyKTtcbiAgdmFyIGNvbG9yUGFsZXR0ZSA9IHRoaXMudGVybWluYWwuZ2V0VGV4dEF0dHJpYnV0ZXMoKS5jb2xvclBhbGV0dGU7XG4gIHZhciByZXNwb25zZUFycmF5ID0gW107XG5cbiAgZm9yICh2YXIgcGFpck51bWJlciA9IDA7IHBhaXJOdW1iZXIgPCBwYWlyQ291bnQ7ICsrcGFpck51bWJlcikge1xuICAgIHZhciBjb2xvckluZGV4ID0gcGFyc2VJbnQoYXJnc1twYWlyTnVtYmVyICogMl0pO1xuICAgIHZhciBjb2xvclZhbHVlID0gYXJnc1twYWlyTnVtYmVyICogMiArIDFdO1xuXG4gICAgaWYgKGNvbG9ySW5kZXggPj0gY29sb3JQYWxldHRlLmxlbmd0aCkgY29udGludWU7XG5cbiAgICBpZiAoY29sb3JWYWx1ZSA9PSAnPycpIHtcbiAgICAgIC8vICc/JyBtZWFucyB3ZSBzaG91bGQgcmVwb3J0IGJhY2sgdGhlIGN1cnJlbnQgY29sb3IgdmFsdWUuXG4gICAgICBjb2xvclZhbHVlID0gbGliLmNvbG9ycy5yZ2JUb1gxMShjb2xvclBhbGV0dGVbY29sb3JJbmRleF0pO1xuICAgICAgaWYgKGNvbG9yVmFsdWUpIHJlc3BvbnNlQXJyYXkucHVzaChjb2xvckluZGV4ICsgJzsnICsgY29sb3JWYWx1ZSk7XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbG9yVmFsdWUgPSBsaWIuY29sb3JzLngxMVRvQ1NTKGNvbG9yVmFsdWUpO1xuICAgIGlmIChjb2xvclZhbHVlKSBjb2xvclBhbGV0dGVbY29sb3JJbmRleF0gPSBjb2xvclZhbHVlO1xuICB9XG5cbiAgaWYgKHJlc3BvbnNlQXJyYXkubGVuZ3RoKVxuICAgIHRoaXMudGVybWluYWwuaW8uc2VuZFN0cmluZygnXFx4MWJdNDsnICsgcmVzcG9uc2VBcnJheS5qb2luKCc7JykgKyAnXFx4MDcnKTtcbn07XG5cbi8qKlxuICogSHlwZXJsaW5rcy5cbiAqXG4gKiBUaGUgZmlyc3QgYXJndW1lbnQgaXMgb3B0aW9uYWwgYW5kIGNvbG9uIHNlcGFyYXRlZDpcbiAqICAgaWQ9PGlkPlxuICogVGhlIHNlY29uZCBhcmd1bWVudCBpcyB0aGUgbGluayBpdHNlbGYuXG4gKlxuICogQ2FsbGluZyB3aXRoIGEgbm9uLWJsYW5rIFVSSSBzdGFydHMgaXQuICBBIGJsYW5rIFVSSSBzdG9wcyBpdC5cbiAqXG4gKiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9lZ21vbnRrb2IvZWIxMTQyOTRlZmJjZDVhZGIxOTQ0YzlmM2NiNWZlZGFcbiAqL1xuaHRlcm0uVlQuT1NDWyc4J10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIGNvbnN0IGFyZ3MgPSBwYXJzZVN0YXRlLmFyZ3NbMF0uc3BsaXQoJzsnKTtcbiAgbGV0IGlkID0gbnVsbDtcbiAgbGV0IHVyaSA9IG51bGw7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoICE9IDIgfHwgYXJnc1sxXS5sZW5ndGggPT0gMCkge1xuICAgIC8vIFJlc2V0IGxpbmsuXG4gIH0gZWxzZSB7XG4gICAgLy8gUHVsbCBvdXQgYW55IGNvbG9uIHNlcGFyYXRlZCBwYXJhbWV0ZXJzIGluIHRoZSBmaXJzdCBhcmd1bWVudC5cbiAgICBjb25zdCBwYXJhbXMgPSBhcmdzWzBdLnNwbGl0KCc6Jyk7XG4gICAgaWQgPSAnJztcbiAgICBwYXJhbXMuZm9yRWFjaChwYXJhbSA9PiB7XG4gICAgICBjb25zdCBpZHggPSBwYXJhbS5pbmRleE9mKCc9Jyk7XG4gICAgICBpZiAoaWR4ID09IC0xKSByZXR1cm47XG5cbiAgICAgIGNvbnN0IGtleSA9IHBhcmFtLnNsaWNlKDAsIGlkeCk7XG4gICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtLnNsaWNlKGlkeCArIDEpO1xuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnaWQnOlxuICAgICAgICAgIGlkID0gdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gSWdub3JlIHVua25vd24ga2V5cy5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRoZSBVUkkgaXMgaW4gdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgICB1cmkgPSBhcmdzWzFdO1xuICB9XG5cbiAgY29uc3QgYXR0cnMgPSB0aGlzLnRlcm1pbmFsLmdldFRleHRBdHRyaWJ1dGVzKCk7XG4gIGF0dHJzLnVyaSA9IHVyaTtcbiAgYXR0cnMudXJpSWQgPSBpZDtcbn07XG5cbi8qKlxuICogaVRlcm0yIGdyb3dsIG5vdGlmaWNhdGlvbnMuXG4gKi9cbmh0ZXJtLlZULk9TQ1snOSddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICAvLyBUaGlzIGp1c3QgZHVtcHMgdGhlIGVudGlyZSBzdHJpbmcgYXMgdGhlIG1lc3NhZ2UuXG4gIGh0ZXJtLm5vdGlmeSh7IGJvZHk6IHBhcnNlU3RhdGUuYXJnc1swXSB9KTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIFZUMTAwIHRleHQgZm9yZWdyb3VuZCBjb2xvci5cbiAqL1xuaHRlcm0uVlQuT1NDWycxMCddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICAvLyBBcmdzIGNvbWUgaW4gYXMgYSBzaW5nbGUgc3RyaW5nLCBidXQgZXh0cmEgYXJncyB3aWxsIGNoYWluIHRvIHRoZSBmb2xsb3dpbmdcbiAgLy8gT1NDIHNlcXVlbmNlcy5cbiAgdmFyIGFyZ3MgPSBwYXJzZVN0YXRlLmFyZ3NbMF0uc3BsaXQoJzsnKTtcbiAgaWYgKCFhcmdzKSByZXR1cm47XG5cbiAgdmFyIGNvbG9yQXJnO1xuICB2YXIgY29sb3JYMTEgPSBsaWIuY29sb3JzLngxMVRvQ1NTKGFyZ3Muc2hpZnQoKSk7XG4gIGlmIChjb2xvclgxMSkgdGhpcy50ZXJtaW5hbC5zZXRGb3JlZ3JvdW5kQ29sb3IoY29sb3JYMTEpO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA+IDApIHtcbiAgICBwYXJzZVN0YXRlLmFyZ3NbMF0gPSBhcmdzLmpvaW4oJzsnKTtcbiAgICBodGVybS5WVC5PU0NbJzExJ10uYXBwbHkodGhpcywgW3BhcnNlU3RhdGVdKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGFuZ2UgVlQxMDAgdGV4dCBiYWNrZ3JvdW5kIGNvbG9yLlxuICovXG5odGVybS5WVC5PU0NbJzExJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIC8vIEFyZ3MgY29tZSBpbiBhcyBhIHNpbmdsZSBzdHJpbmcsIGJ1dCBleHRyYSBhcmdzIHdpbGwgY2hhaW4gdG8gdGhlIGZvbGxvd2luZ1xuICAvLyBPU0Mgc2VxdWVuY2VzLlxuICB2YXIgYXJncyA9IHBhcnNlU3RhdGUuYXJnc1swXS5zcGxpdCgnOycpO1xuICBpZiAoIWFyZ3MpIHJldHVybjtcblxuICB2YXIgY29sb3JBcmc7XG4gIHZhciBjb2xvclgxMSA9IGxpYi5jb2xvcnMueDExVG9DU1MoYXJncy5zaGlmdCgpKTtcbiAgaWYgKGNvbG9yWDExKSB0aGlzLnRlcm1pbmFsLnNldEJhY2tncm91bmRDb2xvcihjb2xvclgxMSk7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID4gMCkge1xuICAgIHBhcnNlU3RhdGUuYXJnc1swXSA9IGFyZ3Muam9pbignOycpO1xuICAgIGh0ZXJtLlZULk9TQ1snMTInXS5hcHBseSh0aGlzLCBbcGFyc2VTdGF0ZV0pO1xuICB9XG59O1xuXG4vKipcbiAqIENoYW5nZSB0ZXh0IGN1cnNvciBjb2xvci5cbiAqL1xuaHRlcm0uVlQuT1NDWycxMiddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICAvLyBBcmdzIGNvbWUgaW4gYXMgYSBzaW5nbGUgc3RyaW5nLCBidXQgZXh0cmEgYXJncyB3aWxsIGNoYWluIHRvIHRoZSBmb2xsb3dpbmdcbiAgLy8gT1NDIHNlcXVlbmNlcy5cbiAgdmFyIGFyZ3MgPSBwYXJzZVN0YXRlLmFyZ3NbMF0uc3BsaXQoJzsnKTtcbiAgaWYgKCFhcmdzKSByZXR1cm47XG5cbiAgdmFyIGNvbG9yQXJnO1xuICB2YXIgY29sb3JYMTEgPSBsaWIuY29sb3JzLngxMVRvQ1NTKGFyZ3Muc2hpZnQoKSk7XG4gIGlmIChjb2xvclgxMSkgdGhpcy50ZXJtaW5hbC5zZXRDdXJzb3JDb2xvcihjb2xvclgxMSk7XG5cbiAgLyogTm90ZTogSWYgd2Ugc3VwcG9ydCBPU0MgMTMrLCB3ZSdkIGNoYWluIGl0IGhlcmUuXG4gIGlmIChhcmdzLmxlbmd0aCA+IDApIHtcbiAgICBwYXJzZVN0YXRlLmFyZ3NbMF0gPSBhcmdzLmpvaW4oJzsnKTtcbiAgICBodGVybS5WVC5PU0NbJzEzJ10uYXBwbHkodGhpcywgW3BhcnNlU3RhdGVdKTtcbiAgfVxuICAqL1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGN1cnNvciBzaGFwZS5cbiAqXG4gKiBQYXJhbWV0ZXIgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gdGhlIGZvcm0gXCJDdXJzb3JTaGFwZT1udW1iZXJcIiwgd2hlcmUgbnVtYmVyIGlzXG4gKiBvbmUgb2Y6XG4gKlxuICogICAwIC0gQmxvY2tcbiAqICAgMSAtIEktQmVhbVxuICogICAyIC0gVW5kZXJsaW5lXG4gKlxuICogVGhpcyBpcyBhIGJpdCBvZiBhIGRlLWZhY3RvIHN0YW5kYXJkIHN1cHBvcnRlZCBieSBpVGVybSAyIGFuZCBLb25zb2xlLiAgU2VlXG4gKiBhbHNvOiBERUNTQ1VTUi5cbiAqXG4gKiBJbnZhbGlkIG51bWJlcnMgd2lsbCByZXN0b3JlIHRoZSBjdXJzb3IgdG8gdGhlIGJsb2NrIHNoYXBlLlxuICovXG5odGVybS5WVC5PU0NbJzUwJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIHZhciBhcmdzID0gcGFyc2VTdGF0ZS5hcmdzWzBdLm1hdGNoKC9DdXJzb3JTaGFwZT0oLikvaSk7XG4gIGlmICghYXJncykge1xuICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IHBhcnNlIE9TQyA1MCBhcmdzOiAnICsgcGFyc2VTdGF0ZS5hcmdzWzBdKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2l0Y2ggKGFyZ3NbMV0pIHtcbiAgICBjYXNlICcxJzogLy8gQ3Vyc29yU2hhcGU9MTogSS1CZWFtLlxuICAgICAgdGhpcy50ZXJtaW5hbC5zZXRDdXJzb3JTaGFwZShodGVybS5UZXJtaW5hbC5jdXJzb3JTaGFwZS5CRUFNKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnMic6IC8vIEN1cnNvclNoYXBlPTI6IFVuZGVybGluZS5cbiAgICAgIHRoaXMudGVybWluYWwuc2V0Q3Vyc29yU2hhcGUoaHRlcm0uVGVybWluYWwuY3Vyc29yU2hhcGUuVU5ERVJMSU5FKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIEN1cnNvclNoYXBlPTA6IEJsb2NrLlxuICAgICAgdGhpcy50ZXJtaW5hbC5zZXRDdXJzb3JTaGFwZShodGVybS5UZXJtaW5hbC5jdXJzb3JTaGFwZS5CTE9DSyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0L3JlYWQgc3lzdGVtIGNsaXBib2FyZC5cbiAqXG4gKiBSZWFkIGlzIG5vdCBpbXBsZW1lbnRlZCBkdWUgdG8gc2VjdXJpdHkgY29uc2lkZXJhdGlvbnMuICBBIHJlbW90ZSBhcHBcbiAqIHRoYXQgaXMgYWJsZSB0byBib3RoIHdyaXRlIGFuZCByZWFkIHRvIHRoZSBjbGlwYm9hcmQgY291bGQgZXNzZW50aWFsbHlcbiAqIHRha2Ugb3ZlciB5b3VyIHNlc3Npb24uXG4gKlxuICogVGhlIGNsaXBib2FyZCBkYXRhIHdpbGwgYmUgZGVjb2RlZCBhY2NvcmRpbmcgdG8gdGhlICdyZWNlaXZlLWVuY29kaW5nJ1xuICogcHJlZmVyZW5jZS5cbiAqL1xuaHRlcm0uVlQuT1NDWyc1MiddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICBpZiAoIXRoaXMuZW5hYmxlQ2xpcGJvYXJkV3JpdGUpIHJldHVybjtcblxuICAvLyBBcmdzIGNvbWUgaW4gYXMgYSBzaW5nbGUgJ2NsaXBib2FyZDtiNjQtZGF0YScgc3RyaW5nLiAgVGhlIGNsaXBib2FyZFxuICAvLyBwYXJhbWV0ZXIgaXMgdXNlZCB0byBzZWxlY3Qgd2hpY2ggb2YgdGhlIFggY2xpcGJvYXJkcyB0byBhZGRyZXNzLiAgU2luY2VcbiAgLy8gd2UncmUgbm90IGludGVncmF0aW5nIHdpdGggWCwgd2UgdHJlYXQgdGhlbSBhbGwgdGhlIHNhbWUuXG4gIHZhciBhcmdzID0gcGFyc2VTdGF0ZS5hcmdzWzBdLm1hdGNoKC9eW2NwczAxMjM0NTY3XSo7KC4qKS8pO1xuICBpZiAoIWFyZ3MpIHJldHVybjtcblxuICB2YXIgZGF0YSA9IHdpbmRvdy5hdG9iKGFyZ3NbMV0pO1xuICBpZiAoZGF0YSkgdGhpcy50ZXJtaW5hbC5jb3B5U3RyaW5nVG9DbGlwYm9hcmQodGhpcy5kZWNvZGUoZGF0YSkpO1xufTtcblxuLyoqXG4gKiBSZXNldCBjb2xvciBwYWxldHRlLlxuICovXG5odGVybS5WVC5PU0NbJzEwNCddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICBjb25zdCBhdHRycyA9IHRoaXMudGVybWluYWwuZ2V0VGV4dEF0dHJpYnV0ZXMoKTtcblxuICAvLyBJZiB0aGVyZSBhcmUgbm8gYXJncywgd2UgcmVzZXQgdGhlIGVudGlyZSBwYWxldHRlLlxuICBpZiAoIXBhcnNlU3RhdGUuYXJnc1swXSkge1xuICAgIGF0dHJzLnJlc2V0Q29sb3JQYWxldHRlKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQXJncyBjb21lIGluIGFzIGEgc2luZ2xlICdpbmRleDE7aW5kZXgyOy4uLjtpbmRleE4nIHN0cmluZy5cbiAgLy8gU3BsaXQgb24gdGhlIHNlbWljb2xvbiBhbmQgaXRlcmF0ZSB0aHJvdWdoIHRoZSBjb2xvcnMuXG4gIGNvbnN0IGFyZ3MgPSBwYXJzZVN0YXRlLmFyZ3NbMF0uc3BsaXQoJzsnKTtcbiAgYXJncy5mb3JFYWNoKGMgPT4gYXR0cnMucmVzZXRDb2xvcihjKSk7XG59O1xuXG4vKipcbiAqIFJlc2V0IGZvcmVncm91bmQgY29sb3IuXG4gKi9cbmh0ZXJtLlZULk9TQ1snMTEwJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIHRoaXMudGVybWluYWwuc2V0Rm9yZWdyb3VuZENvbG9yKCk7XG59O1xuXG4vKipcbiAqIFJlc2V0IGJhY2tncm91bmQgY29sb3IuXG4gKi9cbmh0ZXJtLlZULk9TQ1snMTExJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIHRoaXMudGVybWluYWwuc2V0QmFja2dyb3VuZENvbG9yKCk7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRleHQgY3Vyc29yIGNvbG9yLlxuICovXG5odGVybS5WVC5PU0NbJzExMiddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICB0aGlzLnRlcm1pbmFsLnNldEN1cnNvckNvbG9yKCk7XG59O1xuXG4vKipcbiAqIGlUZXJtMiBleHRlbmRlZCBzZXF1ZW5jZXMuXG4gKlxuICogV2Ugb25seSBzdXBwb3J0IGltYWdlIGRpc3BsYXkgYXRtLlxuICovXG5odGVybS5WVC5PU0NbJzEzMzcnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgLy8gQXJncyBjb21lIGluIGFzIGEgc2V0IG9mIGtleSB2YWx1ZSBwYWlycyBmb2xsb3dlZCBieSBkYXRhLlxuICAvLyBGaWxlPW5hbWU9PGJhc2U2ND47c2l6ZT0xMjM7aW5saW5lPTE6PGJhc2U2NCBkYXRhPlxuICBsZXQgYXJncyA9IHBhcnNlU3RhdGUuYXJnc1swXS5tYXRjaCgvXkZpbGU9KFteOl0qKTooW1xcc1xcU10qKSQvbSk7XG4gIGlmICghYXJncykge1xuICAgIGlmICh0aGlzLndhcm5VbmltcGxlbWVudGVkKVxuICAgICAgY29uc29sZS5sb2coYGlUZXJtMiAxMzM3OiB1bnN1cHBvcnRlZCBzZXF1ZW5jZTogJHthcmdzWzFdfWApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgbmFtZTogJycsXG4gICAgc2l6ZTogMCxcbiAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiB0cnVlLFxuICAgIGlubGluZTogZmFsc2UsXG4gICAgd2lkdGg6ICdhdXRvJyxcbiAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICBhbGlnbjogJ2xlZnQnLFxuICAgIHVyaTpcbiAgICAgICdkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsJyArXG4gICAgICBhcmdzWzJdLnJlcGxhY2UoL1tcXG5cXHJdKy9nbSwgJycpLFxuICB9O1xuICAvLyBXYWxrIHRoZSBcImtleT12YWx1ZTtcIiBzZXRzLlxuICBhcmdzWzFdLnNwbGl0KCc7JykuZm9yRWFjaChlbGUgPT4ge1xuICAgIGNvbnN0IGt2ID0gZWxlLm1hdGNoKC9eKFtePV0rKT0oLiopJC9tKTtcbiAgICBpZiAoIWt2KSByZXR1cm47XG5cbiAgICAvLyBTYW5pdGl6ZSB2YWx1ZXMgbmljZWx5LlxuICAgIHN3aXRjaCAoa3ZbMV0pIHtcbiAgICAgIGNhc2UgJ25hbWUnOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIG9wdGlvbnMubmFtZSA9IHdpbmRvdy5hdG9iKGt2WzJdKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzaXplJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvcHRpb25zLnNpemUgPSBwYXJzZUludChrdlsyXSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnd2lkdGgnOlxuICAgICAgICBvcHRpb25zLndpZHRoID0ga3ZbMl07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaGVpZ2h0JzpcbiAgICAgICAgb3B0aW9ucy5oZWlnaHQgPSBrdlsyXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJzpcbiAgICAgICAgb3B0aW9ucy5wcmVzZXJ2ZUFzcGVjdFJhdGlvID0gIShrdlsyXSA9PSAnMCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2lubGluZSc6XG4gICAgICAgIG9wdGlvbnMuaW5saW5lID0gIShrdlsyXSA9PSAnMCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIGh0ZXJtLXNwZWNpZmljIGtleXMuXG4gICAgICBjYXNlICdhbGlnbic6XG4gICAgICAgIG9wdGlvbnMuYWxpZ24gPSBrdlsyXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBJZ25vcmUgdW5rbm93biBrZXlzLiAgRG9uJ3Qgd2FudCByZW1vdGUgc3R1ZmZpbmcgb3VyIEpTIGVudi5cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9KTtcblxuICAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gIElmIHRoZSBidWZmZXIgaGFzIGRhdGEgZm9sbG93aW5nIHRoZSBpbWFnZSwgd2VcbiAgLy8gbmVlZCB0byBkZWxheSBwcm9jZXNzaW5nIG9mIGl0IHVudGlsIGFmdGVyIHdlJ3ZlIGZpbmlzaGVkIHdpdGggdGhlIGltYWdlLlxuICAvLyBPdGhlcndpc2Ugd2hpbGUgd2Ugd2FpdCBmb3IgdGhlIHRoZSBpbWFnZSB0byBsb2FkIGFzeW5jaHJvbm91c2x5LCB0aGUgbmV3XG4gIC8vIHRleHQgZGF0YSB3aWxsIGludGVybWluZ2xlIHdpdGggdGhlIGltYWdlLlxuICBpZiAob3B0aW9ucy5pbmxpbmUpIHtcbiAgICBjb25zdCBpbyA9IHRoaXMudGVybWluYWwuaW87XG4gICAgY29uc3QgcXVldWVkID0gcGFyc2VTdGF0ZS5wZWVrUmVtYWluaW5nQnVmKCk7XG4gICAgcGFyc2VTdGF0ZS5hZHZhbmNlKHF1ZXVlZC5sZW5ndGgpO1xuICAgIHRoaXMudGVybWluYWwuZGlzcGxheUltYWdlKG9wdGlvbnMpO1xuICAgIGlvLndyaXRlVVRGOChxdWV1ZWQpO1xuICB9IGVsc2UgdGhpcy50ZXJtaW5hbC5kaXNwbGF5SW1hZ2Uob3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIFVSeHZ0IHBlcmwgbW9kdWxlcy5cbiAqXG4gKiBUaGlzIGlzIHRoZSBlc2NhcGUgc3lzdGVtIHVzZWQgYnkgcnh2dC11bmljb2RlIGFuZCBpdHMgcGVybCBtb2R1bGVzLlxuICogT2J2aW91c2x5IHdlIGRvbid0IHN1cHBvcnQgcGVybCBvciBjdXN0b20gbW9kdWxlcywgc28gd2UgbGlzdCBhIGZldyBjb21tb25cbiAqIG9uZXMgdGhhdCB3ZSBmaW5kIHVzZWZ1bC5cbiAqXG4gKiBUZWNobmljYWxseSB0aGVyZSBpcyBubyBmb3JtYXQgaGVyZSwgYnV0IG1vc3QgbW9kdWxlcyBvYmV5OlxuICogPG1vZHVsZSBuYW1lPjs8bW9kdWxlIGFyZ3MsIHVzdWFsbHkgOyBkZWxpbWl0ZWQ+XG4gKi9cbmh0ZXJtLlZULk9TQ1snNzc3J10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIHZhciBhcnk7XG4gIHZhciB1cnh2dE1vZCA9IHBhcnNlU3RhdGUuYXJnc1swXS5zcGxpdCgnOycsIDEpWzBdO1xuXG4gIHN3aXRjaCAodXJ4dnRNb2QpIHtcbiAgICBjYXNlICdub3RpZnknOlxuICAgICAgLy8gRm9ybWF0OlxuICAgICAgLy8gbm90aWZ5O3RpdGxlO21lc3NhZ2VcbiAgICAgIHZhciB0aXRsZSwgbWVzc2FnZTtcbiAgICAgIGFyeSA9IHBhcnNlU3RhdGUuYXJnc1swXS5tYXRjaCgvXlteO10rOyhbXjtdKikoOyhbXFxzXFxTXSopKT8kLyk7XG4gICAgICBpZiAoYXJ5KSB7XG4gICAgICAgIHRpdGxlID0gYXJ5WzFdO1xuICAgICAgICBtZXNzYWdlID0gYXJ5WzNdO1xuICAgICAgfVxuICAgICAgaHRlcm0ubm90aWZ5KHsgdGl0bGU6IHRpdGxlLCBib2R5OiBtZXNzYWdlIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgY29uc29sZS53YXJuKCdVbmtub3duIHVyeHZ0IG1vZHVsZTogJyArIHBhcnNlU3RhdGUuYXJnc1swXSk7XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuLyoqXG4gKiBJbnNlcnQgKGJsYW5rKSBjaGFyYWN0ZXJzIChJQ0gpLlxuICovXG5odGVybS5WVC5DU0lbJ0AnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgdGhpcy50ZXJtaW5hbC5pbnNlcnRTcGFjZShwYXJzZVN0YXRlLmlhcmcoMCwgMSkpO1xufTtcblxuLyoqXG4gKiBDdXJzb3IgVXAgKENVVSkuXG4gKi9cbmh0ZXJtLlZULkNTSVsnQSddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICB0aGlzLnRlcm1pbmFsLmN1cnNvclVwKHBhcnNlU3RhdGUuaWFyZygwLCAxKSk7XG59O1xuXG4vKipcbiAqIEN1cnNvciBEb3duIChDVUQpLlxuICovXG5odGVybS5WVC5DU0lbJ0InXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgdGhpcy50ZXJtaW5hbC5jdXJzb3JEb3duKHBhcnNlU3RhdGUuaWFyZygwLCAxKSk7XG59O1xuXG4vKipcbiAqIEN1cnNvciBGb3J3YXJkIChDVUYpLlxuICovXG5odGVybS5WVC5DU0lbJ0MnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgdGhpcy50ZXJtaW5hbC5jdXJzb3JSaWdodChwYXJzZVN0YXRlLmlhcmcoMCwgMSkpO1xufTtcblxuLyoqXG4gKiBDdXJzb3IgQmFja3dhcmQgKENVQikuXG4gKi9cbmh0ZXJtLlZULkNTSVsnRCddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICB0aGlzLnRlcm1pbmFsLmN1cnNvckxlZnQocGFyc2VTdGF0ZS5pYXJnKDAsIDEpKTtcbn07XG5cbi8qKlxuICogQ3Vyc29yIE5leHQgTGluZSAoQ05MKS5cbiAqXG4gKiBUaGlzIGlzIGxpa2UgQ3Vyc29yIERvd24sIGV4Y2VwdCB0aGUgY3Vyc29yIG1vdmVzIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlXG4gKiBsaW5lIGFzIHdlbGwuXG4gKi9cbmh0ZXJtLlZULkNTSVsnRSddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICB0aGlzLnRlcm1pbmFsLmN1cnNvckRvd24ocGFyc2VTdGF0ZS5pYXJnKDAsIDEpKTtcbiAgdGhpcy50ZXJtaW5hbC5zZXRDdXJzb3JDb2x1bW4oMCk7XG59O1xuXG4vKipcbiAqIEN1cnNvciBQcmVjZWRpbmcgTGluZSAoQ1BMKS5cbiAqXG4gKiBUaGlzIGlzIGxpa2UgQ3Vyc29yIFVwLCBleGNlcHQgdGhlIGN1cnNvciBtb3ZlcyB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZVxuICogbGluZSBhcyB3ZWxsLlxuICovXG5odGVybS5WVC5DU0lbJ0YnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgdGhpcy50ZXJtaW5hbC5jdXJzb3JVcChwYXJzZVN0YXRlLmlhcmcoMCwgMSkpO1xuICB0aGlzLnRlcm1pbmFsLnNldEN1cnNvckNvbHVtbigwKTtcbn07XG5cbi8qKlxuICogQ3Vyc29yIEhvcml6b250YWwgQWJzb2x1dGUgKENIQSkuXG4gKlxuICogWHRlcm0gY2FsbHMgdGhpcyBDdXJzb3IgQ2hhcmFjdGVyIEFic29sdXRlLlxuICovXG5odGVybS5WVC5DU0lbJ0cnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgdGhpcy50ZXJtaW5hbC5zZXRDdXJzb3JDb2x1bW4ocGFyc2VTdGF0ZS5pYXJnKDAsIDEpIC0gMSk7XG59O1xuXG4vKipcbiAqIEN1cnNvciBQb3NpdGlvbiAoQ1VQKS5cbiAqL1xuaHRlcm0uVlQuQ1NJWydIJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIHRoaXMudGVybWluYWwuc2V0Q3Vyc29yUG9zaXRpb24oXG4gICAgcGFyc2VTdGF0ZS5pYXJnKDAsIDEpIC0gMSxcbiAgICBwYXJzZVN0YXRlLmlhcmcoMSwgMSkgLSAxLFxuICApO1xufTtcblxuLyoqXG4gKiBDdXJzb3IgRm9yd2FyZCBUYWJ1bGF0aW9uIChDSFQpLlxuICovXG5odGVybS5WVC5DU0lbJ0knXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgdmFyIGNvdW50ID0gcGFyc2VTdGF0ZS5pYXJnKDAsIDEpO1xuICBjb3VudCA9IGxpYi5mLmNsYW1wKGNvdW50LCAxLCB0aGlzLnRlcm1pbmFsLnNjcmVlblNpemUud2lkdGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICB0aGlzLnRlcm1pbmFsLmZvcndhcmRUYWJTdG9wKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRXJhc2UgaW4gRGlzcGxheSAoRUQsIERFQ1NFRCkuXG4gKi9cbmh0ZXJtLlZULkNTSVsnSiddID0gaHRlcm0uVlQuQ1NJWyc/SiddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSwgY29kZSkge1xuICB2YXIgYXJnID0gcGFyc2VTdGF0ZS5hcmdzWzBdO1xuXG4gIGlmICghYXJnIHx8IGFyZyA9PSAwKSB7XG4gICAgdGhpcy50ZXJtaW5hbC5lcmFzZUJlbG93KCk7XG4gIH0gZWxzZSBpZiAoYXJnID09IDEpIHtcbiAgICB0aGlzLnRlcm1pbmFsLmVyYXNlQWJvdmUoKTtcbiAgfSBlbHNlIGlmIChhcmcgPT0gMikge1xuICAgIHRoaXMudGVybWluYWwuY2xlYXIoKTtcbiAgfSBlbHNlIGlmIChhcmcgPT0gMykge1xuICAgIGlmICh0aGlzLmVuYWJsZUNzaUozKSB7XG4gICAgICB0aGlzLnRlcm1pbmFsLmNsZWFyU2Nyb2xsYmFjaygpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFcmFzZSBpbiBsaW5lIChFTCwgREVDU0VMKS5cbiAqL1xuaHRlcm0uVlQuQ1NJWydLJ10gPSBodGVybS5WVC5DU0lbJz9LJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlLCBjb2RlKSB7XG4gIHZhciBhcmcgPSBwYXJzZVN0YXRlLmFyZ3NbMF07XG5cbiAgaWYgKCFhcmcgfHwgYXJnID09IDApIHtcbiAgICB0aGlzLnRlcm1pbmFsLmVyYXNlVG9SaWdodCgpO1xuICB9IGVsc2UgaWYgKGFyZyA9PSAxKSB7XG4gICAgdGhpcy50ZXJtaW5hbC5lcmFzZVRvTGVmdCgpO1xuICB9IGVsc2UgaWYgKGFyZyA9PSAyKSB7XG4gICAgdGhpcy50ZXJtaW5hbC5lcmFzZUxpbmUoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBJbnNlcnQgTGluZXMgKElMKS5cbiAqL1xuaHRlcm0uVlQuQ1NJWydMJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIHRoaXMudGVybWluYWwuaW5zZXJ0TGluZXMocGFyc2VTdGF0ZS5pYXJnKDAsIDEpKTtcbn07XG5cbi8qKlxuICogRGVsZXRlIExpbmVzIChETCkuXG4gKi9cbmh0ZXJtLlZULkNTSVsnTSddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICB0aGlzLnRlcm1pbmFsLmRlbGV0ZUxpbmVzKHBhcnNlU3RhdGUuaWFyZygwLCAxKSk7XG59O1xuXG4vKipcbiAqIERlbGV0ZSBDaGFyYWN0ZXJzIChEQ0gpLlxuICpcbiAqIFRoaXMgY29tbWFuZCBzaGlmdHMgdGhlIGxpbmUgY29udGVudHMgbGVmdCwgc3RhcnRpbmcgYXQgdGhlIGN1cnNvciBwb3NpdGlvbi5cbiAqL1xuaHRlcm0uVlQuQ1NJWydQJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIHRoaXMudGVybWluYWwuZGVsZXRlQ2hhcnMocGFyc2VTdGF0ZS5pYXJnKDAsIDEpKTtcbn07XG5cbi8qKlxuICogU2Nyb2xsIFVwIChTVSkuXG4gKi9cbmh0ZXJtLlZULkNTSVsnUyddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICB0aGlzLnRlcm1pbmFsLnZ0U2Nyb2xsVXAocGFyc2VTdGF0ZS5pYXJnKDAsIDEpKTtcbn07XG5cbi8qKlxuICogU2Nyb2xsIERvd24gKFNEKS5cbiAqIEFsc28gJ0luaXRpYXRlIGhpZ2hsaWdodCBtb3VzZSB0cmFja2luZycuICBXaWxsIG5vdCBpbXBsZW1lbnQgdGhpcyBwYXJ0LlxuICovXG5odGVybS5WVC5DU0lbJ1QnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgaWYgKHBhcnNlU3RhdGUuYXJncy5sZW5ndGggPD0gMSlcbiAgICB0aGlzLnRlcm1pbmFsLnZ0U2Nyb2xsRG93bihwYXJzZVN0YXRlLmlhcmcoMCwgMSkpO1xufTtcblxuLyoqXG4gKiBSZXNldCBvbmUgb3IgbW9yZSBmZWF0dXJlcyBvZiB0aGUgdGl0bGUgbW9kZXMgdG8gdGhlIGRlZmF1bHQgdmFsdWUuXG4gKlxuICogICBFU0MgWyA+IFBzIFRcbiAqXG4gKiBOb3JtYWxseSwgXCJyZXNldFwiIGRpc2FibGVzIHRoZSBmZWF0dXJlLiBJdCBpcyBwb3NzaWJsZSB0byBkaXNhYmxlIHRoZVxuICogYWJpbGl0eSB0byByZXNldCBmZWF0dXJlcyBieSBjb21waWxpbmcgYSBkaWZmZXJlbnQgZGVmYXVsdCBmb3IgdGhlIHRpdGxlXG4gKiBtb2RlcyBpbnRvIHh0ZXJtLlxuICpcbiAqIFBzIHZhbHVlczpcbiAqICAgMCAtIERvIG5vdCBzZXQgd2luZG93L2ljb24gbGFiZWxzIHVzaW5nIGhleGFkZWNpbWFsLlxuICogICAxIC0gRG8gbm90IHF1ZXJ5IHdpbmRvdy9pY29uIGxhYmVscyB1c2luZyBoZXhhZGVjaW1hbC5cbiAqICAgMiAtIERvIG5vdCBzZXQgd2luZG93L2ljb24gbGFiZWxzIHVzaW5nIFVURi04LlxuICogICAzIC0gRG8gbm90IHF1ZXJ5IHdpbmRvdy9pY29uIGxhYmVscyB1c2luZyBVVEYtOC5cbiAqXG4gKiBXaWxsIG5vdCBpbXBsZW1lbnQuXG4gKi9cbmh0ZXJtLlZULkNTSVsnPlQnXSA9IGh0ZXJtLlZULmlnbm9yZTtcblxuLyoqXG4gKiBFcmFzZSBDaGFyYWN0ZXJzIChFQ0gpLlxuICovXG5odGVybS5WVC5DU0lbJ1gnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgdGhpcy50ZXJtaW5hbC5lcmFzZVRvUmlnaHQocGFyc2VTdGF0ZS5pYXJnKDAsIDEpKTtcbn07XG5cbi8qKlxuICogQ3Vyc29yIEJhY2t3YXJkIFRhYnVsYXRpb24gKENCVCkuXG4gKi9cbmh0ZXJtLlZULkNTSVsnWiddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICB2YXIgY291bnQgPSBwYXJzZVN0YXRlLmlhcmcoMCwgMSk7XG4gIGNvdW50ID0gbGliLmYuY2xhbXAoY291bnQsIDEsIHRoaXMudGVybWluYWwuc2NyZWVuU2l6ZS53aWR0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIHRoaXMudGVybWluYWwuYmFja3dhcmRUYWJTdG9wKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hhcmFjdGVyIFBvc2l0aW9uIEFic29sdXRlIChIUEEpLlxuICpcbiAqIFNhbWUgYXMgQ3Vyc29yIEhvcml6b250YWwgQWJzb2x1dGUgKENIQSkuXG4gKi9cbmh0ZXJtLlZULkNTSVsnYCddID0gaHRlcm0uVlQuQ1NJWydHJ107XG5cbi8qKlxuICogQ2hhcmFjdGVyIFBvc2l0aW9uIFJlbGF0aXZlIChIUFIpLlxuICovXG5odGVybS5WVC5DU0lbJ2EnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgdGhpcy50ZXJtaW5hbC5zZXRDdXJzb3JDb2x1bW4oXG4gICAgdGhpcy50ZXJtaW5hbC5nZXRDdXJzb3JDb2x1bW4oKSArIHBhcnNlU3RhdGUuaWFyZygwLCAxKSxcbiAgKTtcbn07XG5cbi8qKlxuICogUmVwZWF0IHRoZSBwcmVjZWRpbmcgZ3JhcGhpYyBjaGFyYWN0ZXIuXG4gKlxuICogTm90IGN1cnJlbnRseSBpbXBsZW1lbnRlZC5cbiAqL1xuaHRlcm0uVlQuQ1NJWydiJ10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogU2VuZCBEZXZpY2UgQXR0cmlidXRlcyAoUHJpbWFyeSBEQSkuXG4gKlxuICogVE9ETyhyZ2luZGEpOiBUaGlzIGlzIGhhcmRjb2RlZCB0byBzZW5kIGJhY2sgJ1ZUMTAwIHdpdGggQWR2YW5jZWQgVmlkZW9cbiAqIE9wdGlvbicsIGJ1dCBpdCBtYXkgYmUgbW9yZSBjb3JyZWN0IHRvIHNlbmQgYSBWVDIyMCByZXNwb25zZSBvbmNlXG4gKiB3ZSBmaWxsIG91dCB0aGUgJ05vdCBjdXJyZW50bHkgaW1wbGVtZW50ZWQnIHBhcnRzLlxuICovXG5odGVybS5WVC5DU0lbJ2MnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgaWYgKCFwYXJzZVN0YXRlLmFyZ3NbMF0gfHwgcGFyc2VTdGF0ZS5hcmdzWzBdID09IDApIHtcbiAgICB0aGlzLnRlcm1pbmFsLmlvLnNlbmRTdHJpbmcoJ1xceDFiWz8xOzJjJyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2VuZCBEZXZpY2UgQXR0cmlidXRlcyAoU2Vjb25kYXJ5IERBKS5cbiAqXG4gKiBUT0RPKHJnaW5kYSk6IFRoaXMgaXMgaGFyZGNvZGVkIHRvIHNlbmQgYmFjayAnVlQxMDAnIGJ1dCBpdCBtYXkgYmUgbW9yZVxuICogY29ycmVjdCB0byBzZW5kIGEgVlQyMjAgcmVzcG9uc2Ugb25jZSB3ZSBmaWxsIG91dCBtb3JlICdOb3QgY3VycmVudGx5XG4gKiBpbXBsZW1lbnRlZCcgcGFydHMuXG4gKi9cbmh0ZXJtLlZULkNTSVsnPmMnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgdGhpcy50ZXJtaW5hbC5pby5zZW5kU3RyaW5nKCdcXHgxYls+MDsyNTY7MGMnKTtcbn07XG5cbi8qKlxuICogTGluZSBQb3NpdGlvbiBBYnNvbHV0ZSAoVlBBKS5cbiAqL1xuaHRlcm0uVlQuQ1NJWydkJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIHRoaXMudGVybWluYWwuc2V0QWJzb2x1dGVDdXJzb3JSb3cocGFyc2VTdGF0ZS5pYXJnKDAsIDEpIC0gMSk7XG59O1xuXG4vKipcbiAqIEhvcml6b250YWwgYW5kIFZlcnRpY2FsIFBvc2l0aW9uIChIVlApLlxuICpcbiAqIFNhbWUgYXMgQ3Vyc29yIFBvc2l0aW9uIChDVVApLlxuICovXG5odGVybS5WVC5DU0lbJ2YnXSA9IGh0ZXJtLlZULkNTSVsnSCddO1xuXG4vKipcbiAqIFRhYiBDbGVhciAoVEJDKS5cbiAqL1xuaHRlcm0uVlQuQ1NJWydnJ10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIGlmICghcGFyc2VTdGF0ZS5hcmdzWzBdIHx8IHBhcnNlU3RhdGUuYXJnc1swXSA9PSAwKSB7XG4gICAgLy8gQ2xlYXIgdGFiIHN0b3AgYXQgY3Vyc29yLlxuICAgIHRoaXMudGVybWluYWwuY2xlYXJUYWJTdG9wQXRDdXJzb3IoZmFsc2UpO1xuICB9IGVsc2UgaWYgKHBhcnNlU3RhdGUuYXJnc1swXSA9PSAzKSB7XG4gICAgLy8gQ2xlYXIgYWxsIHRhYiBzdG9wcy5cbiAgICB0aGlzLnRlcm1pbmFsLmNsZWFyQWxsVGFiU3RvcHMoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgTW9kZSAoU00pLlxuICovXG5odGVybS5WVC5DU0lbJ2gnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJzZVN0YXRlLmFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLnNldEFOU0lNb2RlKHBhcnNlU3RhdGUuYXJnc1tpXSwgdHJ1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogREVDIFByaXZhdGUgTW9kZSBTZXQgKERFQ1NFVCkuXG4gKi9cbmh0ZXJtLlZULkNTSVsnP2gnXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJzZVN0YXRlLmFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLnNldERFQ01vZGUocGFyc2VTdGF0ZS5hcmdzW2ldLCB0cnVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBNZWRpYSBDb3B5IChNQykuXG4gKiBNZWRpYSBDb3B5IChNQywgREVDIFNwZWNpZmljKS5cbiAqXG4gKiBUaGVzZSBjb21tYW5kcyBjb250cm9sIHRoZSBwcmludGVyLiAgV2lsbCBub3QgaW1wbGVtZW50LlxuICovXG5odGVybS5WVC5DU0lbJ2knXSA9IGh0ZXJtLlZULkNTSVsnP2knXSA9IGh0ZXJtLlZULmlnbm9yZTtcblxuLyoqXG4gKiBSZXNldCBNb2RlIChSTSkuXG4gKi9cbmh0ZXJtLlZULkNTSVsnbCddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnNlU3RhdGUuYXJncy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuc2V0QU5TSU1vZGUocGFyc2VTdGF0ZS5hcmdzW2ldLCBmYWxzZSk7XG4gIH1cbn07XG5cbi8qKlxuICogREVDIFByaXZhdGUgTW9kZSBSZXNldCAoREVDUlNUKS5cbiAqL1xuaHRlcm0uVlQuQ1NJWyc/bCddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnNlU3RhdGUuYXJncy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuc2V0REVDTW9kZShwYXJzZVN0YXRlLmFyZ3NbaV0sIGZhbHNlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQYXJzZSBleHRlbmRlZCBTR1IgMzgvNDggc2VxdWVuY2VzLlxuICpcbiAqIFRoaXMgZGVhbHMgd2l0aCB0aGUgdmFyaW91cyBJU08gODYxMy02IGZvcm1zLCBhbmQgd2l0aCBsZWdhY3kgeHRlcm0gZm9ybXNcbiAqIHRoYXQgYXJlIGNvbW1vbiBpbiB0aGUgd2lkZXIgYXBwbGljYXRpb24gd29ybGQuXG4gKlxuICogQHBhcmFtIHtodGVybS5WVC5QYXJzZVN0YXRlfSBwYXJzZVN0YXRlIFRoZSBjdXJyZW50IGlucHV0IHN0YXRlLlxuICogQHBhcmFtIHtudW1iZXJ9IGkgVGhlIGFyZ3VtZW50IGluIHBhcnNlU3RhdGUgdG8gc3RhcnQgcHJvY2Vzc2luZy5cbiAqIEBwYXJhbSB7aHRlcm0uVGV4dEF0dHJpYnV0ZXN9IGF0dHJzIFRoZSBjdXJyZW50IHRleHQgYXR0cmlidXRlcy5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHNraXBDb3VudCBtZW1iZXIgZGVmaW5lcyBob3cgbWFueSBhcmd1bWVudHMgdG8gc2tpcFxuICogICAgIChpLmUuIGhvdyBtYW55IHdlcmUgcHJvY2Vzc2VkKSwgYW5kIHRoZSBjb2xvciBtZW1iZXIgaXMgdGhlIGNvbG9yIHRoYXRcbiAqICAgICB3YXMgc3VjY2Vzc2Z1bGx5IHByb2Nlc3NlZCwgb3IgdW5kZWZpbmVkIGlmIG5vdC5cbiAqL1xuaHRlcm0uVlQucHJvdG90eXBlLnBhcnNlU2dyRXh0ZW5kZWRDb2xvcnMgPSBmdW5jdGlvbihwYXJzZVN0YXRlLCBpLCBhdHRycykge1xuICBsZXQgYXJ5O1xuICBsZXQgdXNlZFN1YmFyZ3M7XG5cbiAgaWYgKHBhcnNlU3RhdGUuYXJnSGFzU3ViYXJncyhpKSkge1xuICAgIC8vIFRoZSBJU08gODYxMy02IGNvbXBsaWFudCBmb3JtLlxuICAgIC8vIGUuZy4gMzg6W2NvbG9yIGNob2ljZV06W2FyZzFdOlthcmcyXTouLi5cbiAgICBhcnkgPSBwYXJzZVN0YXRlLmFyZ3NbaV0uc3BsaXQoJzonKTtcbiAgICBhcnkuc2hpZnQoKTsgLy8gUmVtb3ZlIFwiMzhcIi5cbiAgICB1c2VkU3ViYXJncyA9IHRydWU7XG4gIH0gZWxzZSBpZiAocGFyc2VTdGF0ZS5hcmdIYXNTdWJhcmdzKGkgKyAxKSkge1xuICAgIC8vIFRoZSB4dGVybSBmb3JtIHdoaWNoIGlzbid0IElTTyA4NjEzLTYgY29tcGxpYW50LiAgTm90IG1hbnkgZW11bGF0b3JzXG4gICAgLy8gc3VwcG9ydCB0aGlzLCBhbmQgb3RoZXJzIGFjdGl2ZWx5IGRvIG5vdCB3YW50IHRvLiAgV2UnbGwgaWdub3JlIGl0IHNvXG4gICAgLy8gYXQgbGVhc3QgdGhlIHJlc3Qgb2YgdGhlIHN0cmVhbSB3b3JrcyBjb3JyZWN0bHkuICBlLmcuIDM4OzI6UjpHOkJcbiAgICAvLyBXZSByZXR1cm4gMCBoZXJlIHNvIHdlIG9ubHkgc2tpcCB0aGUgXCIzOFwiIC4uLiB3ZSBjYW4ndCBiZSBjb25maWRlbnQgdGhlXG4gICAgLy8gbmV4dCBhcmcgaXMgYWN0dWFsbHkgc3VwcG9zZWQgdG8gYmUgcGFydCBvZiBpdCB2cyBhIHR5cG8gd2hlcmUgdGhlIG5leHRcbiAgICAvLyBhcmcgaXMgbGVnaXQuXG4gICAgcmV0dXJuIHsgc2tpcENvdW50OiAwIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIHh0ZXJtIGZvcm0gd2hpY2ggaXNuJ3QgSVNPIDg2MTMtNiBjb21wbGlhbnQsIGJ1dCBtYW55IGVtdWxhdG9yc1xuICAgIC8vIHN1cHBvcnQsIGFuZCBtYW55IGFwcGxpY2F0aW9ucyByZWx5IG9uLlxuICAgIC8vIGUuZy4gMzg7MjtSO0c7QlxuICAgIGFyeSA9IHBhcnNlU3RhdGUuYXJncy5zbGljZShpICsgMSk7XG4gICAgdXNlZFN1YmFyZ3MgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIEZpZ3VyZSBvdXQgd2hpY2ggZm9ybSB0byBwYXJzZS5cbiAgc3dpdGNoIChwYXJzZUludChhcnlbMF0pKSB7XG4gICAgZGVmYXVsdDogLy8gVW5rbm93bi5cbiAgICBjYXNlIDA6IC8vIEltcGxlbWVudGF0aW9uIGRlZmluZWQuICBXZSBpZ25vcmUgaXQuXG4gICAgICByZXR1cm4geyBza2lwQ291bnQ6IDAgfTtcblxuICAgIGNhc2UgMToge1xuICAgICAgLy8gVHJhbnNwYXJlbnQgY29sb3IuXG4gICAgICAvLyBSZXF1aXJlIElTTyA4NjEzLTYgZm9ybS5cbiAgICAgIGlmICghdXNlZFN1YmFyZ3MpIHJldHVybiB7IHNraXBDb3VudDogMCB9O1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMCknLFxuICAgICAgICBza2lwQ291bnQ6IDAsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNhc2UgMjoge1xuICAgICAgLy8gUkdCIGNvbG9yLlxuICAgICAgLy8gU2tpcCBvdmVyIHRoZSBjb2xvciBzcGFjZSBpZGVudGlmaWVyLCBpZiBpdCBleGlzdHMuXG4gICAgICBsZXQgc3RhcnQ7XG4gICAgICBpZiAodXNlZFN1YmFyZ3MpIHtcbiAgICAgICAgLy8gVGhlIElTTyA4NjEzLTYgY29tcGxpYW50IGZvcm06XG4gICAgICAgIC8vICAgMzg6Mjo8Y29sb3Igc3BhY2UgaWQ+OlI6RzpCWzouLi5dXG4gICAgICAgIC8vIFRoZSB4dGVybSBmb3JtIGlzbid0IElTTyA4NjEzLTYgY29tcGxpYW50LlxuICAgICAgICAvLyAgIDM4OjI6UjpHOkJcbiAgICAgICAgLy8gU2luY2UgdGhlIElTTyA4NjEzLTYgZm9ybSByZXF1aXJlcyBhdCBsZWFzdCA1IGFyZ3VtZW50cyxcbiAgICAgICAgLy8gd2UgY2FuIHN0aWxsIHN1cHBvcnQgdGhlIHh0ZXJtIGZvcm0gdW5hbWJpZ3VvdXNseS5cbiAgICAgICAgaWYgKGFyeS5sZW5ndGggPT0gNCkgc3RhcnQgPSAxO1xuICAgICAgICBlbHNlIHN0YXJ0ID0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoZSBsZWdhY3kgeHRlcm0gZm9ybTogMzg7MjtSO0c7QlxuICAgICAgICBzdGFydCA9IDE7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIG5lZWQgYXQgbGVhc3QgMyBhcmdzIGZvciBSR0IuICBJZiB3ZSBkb24ndCBoYXZlIHRoZW0sIGFzc3VtZSB0aGlzXG4gICAgICAvLyBzZXF1ZW5jZSBpcyBjb3JydXB0ZWQsIHNvIGRvbid0IGVhdCBhbnl0aGluZyBtb3JlLlxuICAgICAgLy8gV2UgaWdub3JlIG1vcmUgdGhhbiAzIGFyZ3Mgb24gcHVycG9zZSBzaW5jZSBJU08gODYxMy02IGRlZmluZXMgc29tZSxcbiAgICAgIC8vIGFuZCB3ZSBkb24ndCBjYXJlIGFib3V0IHRoZW0uXG4gICAgICBpZiAoYXJ5Lmxlbmd0aCA8IHN0YXJ0ICsgMykgcmV0dXJuIHsgc2tpcENvdW50OiAwIH07XG5cbiAgICAgIGNvbnN0IHIgPSBwYXJzZVN0YXRlLnBhcnNlSW50KGFyeVtzdGFydCArIDBdKTtcbiAgICAgIGNvbnN0IGcgPSBwYXJzZVN0YXRlLnBhcnNlSW50KGFyeVtzdGFydCArIDFdKTtcbiAgICAgIGNvbnN0IGIgPSBwYXJzZVN0YXRlLnBhcnNlSW50KGFyeVtzdGFydCArIDJdKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbG9yOiBgcmdiKCR7cn0sICR7Z30sICR7Yn0pYCxcbiAgICAgICAgc2tpcENvdW50OiB1c2VkU3ViYXJncyA/IDAgOiA0LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjYXNlIDM6IHtcbiAgICAgIC8vIENNWSBjb2xvci5cbiAgICAgIC8vIE5vIG5lZWQgdG8gc3VwcG9ydCB4dGVybS9sZWdhY3kgZm9ybXMgYXMgeHRlcm0gZG9lc24ndCBzdXBwb3J0IENNWS5cbiAgICAgIGlmICghdXNlZFN1YmFyZ3MpIHJldHVybiB7IHNraXBDb3VudDogMCB9O1xuXG4gICAgICAvLyBXZSBuZWVkIGF0IGxlYXN0IDQgYXJncyBmb3IgQ01ZLiAgSWYgd2UgZG9uJ3QgaGF2ZSB0aGVtLCBhc3N1bWVcbiAgICAgIC8vIHRoaXMgc2VxdWVuY2UgaXMgY29ycnVwdGVkLiAgV2UgaWdub3JlIHRoZSBjb2xvciBzcGFjZSBpZGVudGlmaWVyLFxuICAgICAgLy8gdG9sZXJhbmNlLCBldGMuLi5cbiAgICAgIGlmIChhcnkubGVuZ3RoIDwgNCkgcmV0dXJuIHsgc2tpcENvdW50OiAwIH07XG5cbiAgICAgIC8vIFRPRE86IFNlZSBDTVlLIGJlbG93LlxuICAgICAgY29uc3QgYyA9IHBhcnNlU3RhdGUucGFyc2VJbnQoYXJ5WzFdKTtcbiAgICAgIGNvbnN0IG0gPSBwYXJzZVN0YXRlLnBhcnNlSW50KGFyeVsyXSk7XG4gICAgICBjb25zdCB5ID0gcGFyc2VTdGF0ZS5wYXJzZUludChhcnlbM10pO1xuICAgICAgcmV0dXJuIHsgc2tpcENvdW50OiAwIH07XG4gICAgfVxuXG4gICAgY2FzZSA0OiB7XG4gICAgICAvLyBDTVlLIGNvbG9yLlxuICAgICAgLy8gTm8gbmVlZCB0byBzdXBwb3J0IHh0ZXJtL2xlZ2FjeSBmb3JtcyBhcyB4dGVybSBkb2Vzbid0IHN1cHBvcnQgQ01ZSy5cbiAgICAgIGlmICghdXNlZFN1YmFyZ3MpIHJldHVybiB7IHNraXBDb3VudDogMCB9O1xuXG4gICAgICAvLyBXZSBuZWVkIGF0IGxlYXN0IDUgYXJncyBmb3IgQ01ZSy4gIElmIHdlIGRvbid0IGhhdmUgdGhlbSwgYXNzdW1lXG4gICAgICAvLyB0aGlzIHNlcXVlbmNlIGlzIGNvcnJ1cHRlZC4gIFdlIGlnbm9yZSB0aGUgY29sb3Igc3BhY2UgaWRlbnRpZmllcixcbiAgICAgIC8vIHRvbGVyYW5jZSwgZXRjLi4uXG4gICAgICBpZiAoYXJ5Lmxlbmd0aCA8IDUpIHJldHVybiB7IHNraXBDb3VudDogMCB9O1xuXG4gICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgdGhpcy5cbiAgICAgIC8vIE1pZ2h0IHdhaXQgdW50aWwgQ1NTNCBpcyBhZG9wdGVkIGZvciBkZXZpY2UtY215aygpOlxuICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1jb2xvci00LyNjbXlrLWNvbG9yc1xuICAgICAgLy8gT3Igbm9ybWFsaXplIGl0IHRvIFJHQiBvdXJzZWx2ZXM6XG4gICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLWNvbG9yLTQvI2NteWstcmdiXG4gICAgICBjb25zdCBjID0gcGFyc2VTdGF0ZS5wYXJzZUludChhcnlbMV0pO1xuICAgICAgY29uc3QgbSA9IHBhcnNlU3RhdGUucGFyc2VJbnQoYXJ5WzJdKTtcbiAgICAgIGNvbnN0IHkgPSBwYXJzZVN0YXRlLnBhcnNlSW50KGFyeVszXSk7XG4gICAgICBjb25zdCBrID0gcGFyc2VTdGF0ZS5wYXJzZUludChhcnlbNF0pO1xuICAgICAgcmV0dXJuIHsgc2tpcENvdW50OiAwIH07XG4gICAgfVxuXG4gICAgY2FzZSA1OiB7XG4gICAgICAvLyBDb2xvciBwYWxldHRlIGluZGV4LlxuICAgICAgLy8gSWYgd2UncmUgc2hvcnQgb24gYXJncywgYXNzdW1lIHRoaXMgc2VxdWVuY2UgaXMgY29ycnVwdGVkLCBzbyBkb24ndFxuICAgICAgLy8gZWF0IGFueXRoaW5nIG1vcmUuXG4gICAgICBpZiAoYXJ5Lmxlbmd0aCA8IDIpIHJldHVybiB7IHNraXBDb3VudDogMCB9O1xuXG4gICAgICAvLyBTdXBwb3J0IDM4OjU6UCAoSVNPIDg2MTMtNikgYW5kIDM4OzU7UCAoeHRlcm0vbGVnYWN5KS5cbiAgICAgIC8vIFdlIGFsc28gaWdub3JlIGV4dHJhIGFyZ3Mgd2l0aCAzODo1OlA6Wy4uLl0sIGJ1dCBtb3JlIGZvciBsYXppbmVzcy5cbiAgICAgIGNvbnN0IHJldCA9IHtcbiAgICAgICAgc2tpcENvdW50OiB1c2VkU3ViYXJncyA/IDAgOiAyLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IGNvbG9yID0gcGFyc2VTdGF0ZS5wYXJzZUludChhcnlbMV0pO1xuICAgICAgaWYgKGNvbG9yIDwgYXR0cnMuY29sb3JQYWxldHRlLmxlbmd0aCkgcmV0LmNvbG9yID0gY29sb3I7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDaGFyYWN0ZXIgQXR0cmlidXRlcyAoU0dSKS5cbiAqXG4gKiBJdGVyYXRlIHRocm91Z2ggdGhlIGxpc3Qgb2YgYXJndW1lbnRzLCBhcHBseWluZyB0aGUgYXR0cmlidXRlIGNoYW5nZXMgYmFzZWRcbiAqIG9uIHRoZSBhcmd1bWVudCB2YWx1ZS4uLlxuICovXG5odGVybS5WVC5DU0lbJ20nXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgdmFyIGF0dHJzID0gdGhpcy50ZXJtaW5hbC5nZXRUZXh0QXR0cmlidXRlcygpO1xuXG4gIGlmICghcGFyc2VTdGF0ZS5hcmdzLmxlbmd0aCkge1xuICAgIGF0dHJzLnJlc2V0KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJzZVN0YXRlLmFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBJZiB0aGlzIGFyZ3VtZW50IGhhcyBzdWJhcmdzIChpLmUuIGl0IGhhcyBhcmdzIGZvbGxvd2VkIGJ5IGNvbG9ucyksXG4gICAgLy8gdGhlIGlhcmcgbG9naWMgd2lsbCBpbXBsaWNpdGx5IHRydW5jYXRlIHRoYXQgb2ZmIGZvciB1cy5cbiAgICB2YXIgYXJnID0gcGFyc2VTdGF0ZS5pYXJnKGksIDApO1xuXG4gICAgaWYgKGFyZyA8IDMwKSB7XG4gICAgICBpZiAoYXJnID09IDApIHtcbiAgICAgICAgLy8gTm9ybWFsIChkZWZhdWx0KS5cbiAgICAgICAgYXR0cnMucmVzZXQoKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJnID09IDEpIHtcbiAgICAgICAgLy8gQm9sZC5cbiAgICAgICAgYXR0cnMuYm9sZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA9PSAyKSB7XG4gICAgICAgIC8vIEZhaW50LlxuICAgICAgICBhdHRycy5mYWludCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA9PSAzKSB7XG4gICAgICAgIC8vIEl0YWxpYy5cbiAgICAgICAgYXR0cnMuaXRhbGljID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoYXJnID09IDQpIHtcbiAgICAgICAgLy8gVW5kZXJsaW5lLlxuICAgICAgICBpZiAocGFyc2VTdGF0ZS5hcmdIYXNTdWJhcmdzKGkpKSB7XG4gICAgICAgICAgY29uc3QgdWFyZyA9IHBhcnNlU3RhdGUuYXJnc1tpXS5zcGxpdCgnOicpWzFdO1xuICAgICAgICAgIGlmICh1YXJnID09IDApIGF0dHJzLnVuZGVybGluZSA9IGZhbHNlO1xuICAgICAgICAgIGVsc2UgaWYgKHVhcmcgPT0gMSkgYXR0cnMudW5kZXJsaW5lID0gJ3NvbGlkJztcbiAgICAgICAgICBlbHNlIGlmICh1YXJnID09IDIpIGF0dHJzLnVuZGVybGluZSA9ICdkb3VibGUnO1xuICAgICAgICAgIGVsc2UgaWYgKHVhcmcgPT0gMykgYXR0cnMudW5kZXJsaW5lID0gJ3dhdnknO1xuICAgICAgICAgIGVsc2UgaWYgKHVhcmcgPT0gNCkgYXR0cnMudW5kZXJsaW5lID0gJ2RvdHRlZCc7XG4gICAgICAgICAgZWxzZSBpZiAodWFyZyA9PSA1KSBhdHRycy51bmRlcmxpbmUgPSAnZGFzaGVkJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdHRycy51bmRlcmxpbmUgPSAnc29saWQnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFyZyA9PSA1KSB7XG4gICAgICAgIC8vIEJsaW5rLlxuICAgICAgICBhdHRycy5ibGluayA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA9PSA3KSB7XG4gICAgICAgIC8vIEludmVyc2UuXG4gICAgICAgIGF0dHJzLmludmVyc2UgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPT0gOCkge1xuICAgICAgICAvLyBJbnZpc2libGUuXG4gICAgICAgIGF0dHJzLmludmlzaWJsZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA9PSA5KSB7XG4gICAgICAgIC8vIENyb3NzZWQgb3V0LlxuICAgICAgICBhdHRycy5zdHJpa2V0aHJvdWdoID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoYXJnID09IDIxKSB7XG4gICAgICAgIC8vIERvdWJsZSB1bmRlcmxpbmVkLlxuICAgICAgICBhdHRycy51bmRlcmxpbmUgPSAnZG91YmxlJztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID09IDIyKSB7XG4gICAgICAgIC8vIE5vdCBib2xkICYgbm90IGZhaW50LlxuICAgICAgICBhdHRycy5ib2xkID0gZmFsc2U7XG4gICAgICAgIGF0dHJzLmZhaW50ID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA9PSAyMykge1xuICAgICAgICAvLyBOb3QgaXRhbGljLlxuICAgICAgICBhdHRycy5pdGFsaWMgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoYXJnID09IDI0KSB7XG4gICAgICAgIC8vIE5vdCB1bmRlcmxpbmVkLlxuICAgICAgICBhdHRycy51bmRlcmxpbmUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoYXJnID09IDI1KSB7XG4gICAgICAgIC8vIE5vdCBibGluay5cbiAgICAgICAgYXR0cnMuYmxpbmsgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoYXJnID09IDI3KSB7XG4gICAgICAgIC8vIFN0ZWFkeS5cbiAgICAgICAgYXR0cnMuaW52ZXJzZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPT0gMjgpIHtcbiAgICAgICAgLy8gVmlzaWJsZS5cbiAgICAgICAgYXR0cnMuaW52aXNpYmxlID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA9PSAyOSkge1xuICAgICAgICAvLyBOb3QgY3Jvc3NlZCBvdXQuXG4gICAgICAgIGF0dHJzLnN0cmlrZXRocm91Z2ggPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFyZyA8IDUwKSB7XG4gICAgICAvLyBTZWxlY3QgZm9yZS9iYWNrZ3JvdW5kIGNvbG9yIGZyb20gYm90dG9tIGhhbGYgb2YgMTYgY29sb3IgcGFsZXR0ZVxuICAgICAgLy8gb3IgZnJvbSB0aGUgMjU2IGNvbG9yIHBhbGV0dGUgb3IgYWx0ZXJuYXRpdmUgc3BlY2lmeSBjb2xvciBpbiBmdWxseVxuICAgICAgLy8gcXVhbGlmaWVkIHJnYihyLCBnLCBiKSBmb3JtLlxuICAgICAgaWYgKGFyZyA8IDM4KSB7XG4gICAgICAgIGF0dHJzLmZvcmVncm91bmRTb3VyY2UgPSBhcmcgLSAzMDtcbiAgICAgIH0gZWxzZSBpZiAoYXJnID09IDM4KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucGFyc2VTZ3JFeHRlbmRlZENvbG9ycyhwYXJzZVN0YXRlLCBpLCBhdHRycyk7XG4gICAgICAgIGlmIChyZXN1bHQuY29sb3IgIT09IHVuZGVmaW5lZCkgYXR0cnMuZm9yZWdyb3VuZFNvdXJjZSA9IHJlc3VsdC5jb2xvcjtcbiAgICAgICAgaSArPSByZXN1bHQuc2tpcENvdW50O1xuICAgICAgfSBlbHNlIGlmIChhcmcgPT0gMzkpIHtcbiAgICAgICAgYXR0cnMuZm9yZWdyb3VuZFNvdXJjZSA9IGF0dHJzLlNSQ19ERUZBVUxUO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPCA0OCkge1xuICAgICAgICBhdHRycy5iYWNrZ3JvdW5kU291cmNlID0gYXJnIC0gNDA7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA9PSA0OCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnBhcnNlU2dyRXh0ZW5kZWRDb2xvcnMocGFyc2VTdGF0ZSwgaSwgYXR0cnMpO1xuICAgICAgICBpZiAocmVzdWx0LmNvbG9yICE9PSB1bmRlZmluZWQpIGF0dHJzLmJhY2tncm91bmRTb3VyY2UgPSByZXN1bHQuY29sb3I7XG4gICAgICAgIGkgKz0gcmVzdWx0LnNraXBDb3VudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dHJzLmJhY2tncm91bmRTb3VyY2UgPSBhdHRycy5TUkNfREVGQVVMVDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFyZyA9PSA1OCkge1xuICAgICAgLy8gVW5kZXJsaW5lIGNvbG9yaW5nLlxuICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wYXJzZVNnckV4dGVuZGVkQ29sb3JzKHBhcnNlU3RhdGUsIGksIGF0dHJzKTtcbiAgICAgIGlmIChyZXN1bHQuY29sb3IgIT09IHVuZGVmaW5lZCkgYXR0cnMudW5kZXJsaW5lU291cmNlID0gcmVzdWx0LmNvbG9yO1xuICAgICAgaSArPSByZXN1bHQuc2tpcENvdW50O1xuICAgIH0gZWxzZSBpZiAoYXJnID09IDU5KSB7XG4gICAgICAvLyBEaXNhYmxlIHVuZGVybGluZSBjb2xvcmluZy5cbiAgICAgIGF0dHJzLnVuZGVybGluZVNvdXJjZSA9IGF0dHJzLlNSQ19ERUZBVUxUO1xuICAgIH0gZWxzZSBpZiAoYXJnID49IDkwICYmIGFyZyA8PSA5Nykge1xuICAgICAgYXR0cnMuZm9yZWdyb3VuZFNvdXJjZSA9IGFyZyAtIDkwICsgODtcbiAgICB9IGVsc2UgaWYgKGFyZyA+PSAxMDAgJiYgYXJnIDw9IDEwNykge1xuICAgICAgYXR0cnMuYmFja2dyb3VuZFNvdXJjZSA9IGFyZyAtIDEwMCArIDg7XG4gICAgfVxuICB9XG5cbiAgYXR0cnMuc2V0RGVmYXVsdHMoXG4gICAgdGhpcy50ZXJtaW5hbC5nZXRGb3JlZ3JvdW5kQ29sb3IoKSxcbiAgICB0aGlzLnRlcm1pbmFsLmdldEJhY2tncm91bmRDb2xvcigpLFxuICApO1xufTtcblxuLy8gU0dSIGNhbGxzIGNhbiBoYW5kbGUgc3ViYXJncy5cbmh0ZXJtLlZULkNTSVsnbSddLnN1cHBvcnRzU3ViYXJncyA9IHRydWU7XG5cbi8qKlxuICogU2V0IHh0ZXJtLXNwZWNpZmljIGtleWJvYXJkIG1vZGVzLlxuICpcbiAqIFdpbGwgbm90IGltcGxlbWVudC5cbiAqL1xuaHRlcm0uVlQuQ1NJWyc+bSddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIERldmljZSBTdGF0dXMgUmVwb3J0IChEU1IsIERFQyBTcGVjaWZpYykuXG4gKlxuICogNSAtIFN0YXR1cyBSZXBvcnQuIFJlc3VsdCAoT0spIGlzIENTSSAwIG5cbiAqIDYgLSBSZXBvcnQgQ3Vyc29yIFBvc2l0aW9uIChDUFIpIFtyb3c7Y29sdW1uXS4gUmVzdWx0IGlzIENTSSByIDsgYyBSXG4gKi9cbmh0ZXJtLlZULkNTSVsnbiddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICBpZiAocGFyc2VTdGF0ZS5hcmdzWzBdID09IDUpIHtcbiAgICB0aGlzLnRlcm1pbmFsLmlvLnNlbmRTdHJpbmcoJ1xceDFiMG4nKTtcbiAgfSBlbHNlIGlmIChwYXJzZVN0YXRlLmFyZ3NbMF0gPT0gNikge1xuICAgIHZhciByb3cgPSB0aGlzLnRlcm1pbmFsLmdldEN1cnNvclJvdygpICsgMTtcbiAgICB2YXIgY29sID0gdGhpcy50ZXJtaW5hbC5nZXRDdXJzb3JDb2x1bW4oKSArIDE7XG4gICAgdGhpcy50ZXJtaW5hbC5pby5zZW5kU3RyaW5nKCdcXHgxYlsnICsgcm93ICsgJzsnICsgY29sICsgJ1InKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEaXNhYmxlIG1vZGlmaWVycyB3aGljaCBtYXkgYmUgZW5hYmxlZCB2aWEgQ1NJWyc+bSddLlxuICpcbiAqIFdpbGwgbm90IGltcGxlbWVudC5cbiAqL1xuaHRlcm0uVlQuQ1NJWyc+biddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIERldmljZSBTdGF0dXMgUmVwb3J0IChEU1IsIERFQyBTcGVjaWZpYykuXG4gKlxuICogNiAgLSBSZXBvcnQgQ3Vyc29yIFBvc2l0aW9uIChDUFIpIFtyb3c7Y29sdW1uXSBhcyBDU0kgPyByIDsgYyBSXG4gKiAxNSAtIFJlcG9ydCBQcmludGVyIHN0YXR1cyBhcyBDU0kgPyAxIDAgbiAocmVhZHkpIG9yXG4gKiAgICAgIENTSSA/IDEgMSBuIChub3QgcmVhZHkpLlxuICogMjUgLSBSZXBvcnQgVURLIHN0YXR1cyBhcyBDU0kgPyAyIDAgbiAodW5sb2NrZWQpIG9yIENTSSA/IDIgMSBuIChsb2NrZWQpLlxuICogMjYgLSBSZXBvcnQgS2V5Ym9hcmQgc3RhdHVzIGFzIENTSSA/IDIgNyA7IDEgOyAwIDsgMCBuIChOb3J0aCBBbWVyaWNhbikuXG4gKiAgICAgIFRoZSBsYXN0IHR3byBwYXJhbWV0ZXJzIGFwcGx5IHRvIFZUNDAwICYgdXAsIGFuZCBkZW5vdGUga2V5Ym9hcmQgcmVhZHlcbiAqICAgICAgYW5kIExLMDEgcmVzcGVjdGl2ZWx5LlxuICogNTMgLSBSZXBvcnQgTG9jYXRvciBzdGF0dXMgYXMgQ1NJID8gNSAzIG4gTG9jYXRvciBhdmFpbGFibGUsIGlmIGNvbXBpbGVkLWluLFxuICogICAgICBvciBDU0kgPyA1IDAgbiBObyBMb2NhdG9yLCBpZiBub3QuXG4gKi9cbmh0ZXJtLlZULkNTSVsnP24nXSA9IGZ1bmN0aW9uKHBhcnNlU3RhdGUpIHtcbiAgaWYgKHBhcnNlU3RhdGUuYXJnc1swXSA9PSA2KSB7XG4gICAgdmFyIHJvdyA9IHRoaXMudGVybWluYWwuZ2V0Q3Vyc29yUm93KCkgKyAxO1xuICAgIHZhciBjb2wgPSB0aGlzLnRlcm1pbmFsLmdldEN1cnNvckNvbHVtbigpICsgMTtcbiAgICB0aGlzLnRlcm1pbmFsLmlvLnNlbmRTdHJpbmcoJ1xceDFiWycgKyByb3cgKyAnOycgKyBjb2wgKyAnUicpO1xuICB9IGVsc2UgaWYgKHBhcnNlU3RhdGUuYXJnc1swXSA9PSAxNSkge1xuICAgIHRoaXMudGVybWluYWwuaW8uc2VuZFN0cmluZygnXFx4MWJbPzExbicpO1xuICB9IGVsc2UgaWYgKHBhcnNlU3RhdGUuYXJnc1swXSA9PSAyNSkge1xuICAgIHRoaXMudGVybWluYWwuaW8uc2VuZFN0cmluZygnXFx4MWJbPzIxbicpO1xuICB9IGVsc2UgaWYgKHBhcnNlU3RhdGUuYXJnc1swXSA9PSAyNikge1xuICAgIHRoaXMudGVybWluYWwuaW8uc2VuZFN0cmluZygnXFx4MWJbPzEyOzE7MDswbicpO1xuICB9IGVsc2UgaWYgKHBhcnNlU3RhdGUuYXJnc1swXSA9PSA1Mykge1xuICAgIHRoaXMudGVybWluYWwuaW8uc2VuZFN0cmluZygnXFx4MWJbPzUwbicpO1xuICB9XG59O1xuXG4vKipcbiAqIFRoaXMgaXMgdXNlZCBieSB4dGVybSB0byBkZWNpZGUgd2hldGhlciB0byBoaWRlIHRoZSBwb2ludGVyIGN1cnNvciBhcyB0aGVcbiAqIHVzZXIgdHlwZXMuXG4gKlxuICogVmFsaWQgdmFsdWVzIGZvciB0aGUgcGFyYW1ldGVyOlxuICogICAwIC0gTmV2ZXIgaGlkZSB0aGUgcG9pbnRlci5cbiAqICAgMSAtIEhpZGUgaWYgdGhlIG1vdXNlIHRyYWNraW5nIG1vZGUgaXMgbm90IGVuYWJsZWQuXG4gKiAgIDIgLSBBbHdheXMgaGlkZSB0aGUgcG9pbnRlci5cbiAqXG4gKiBJZiBubyBwYXJhbWV0ZXIgaXMgZ2l2ZW4sIHh0ZXJtIHVzZXMgdGhlIGRlZmF1bHQsIHdoaWNoIGlzIDEuXG4gKlxuICogTm90IGN1cnJlbnRseSBpbXBsZW1lbnRlZC5cbiAqL1xuaHRlcm0uVlQuQ1NJWyc+cCddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIFNvZnQgdGVybWluYWwgcmVzZXQgKERFQ1NUUikuXG4gKi9cbmh0ZXJtLlZULkNTSVsnIXAnXSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnRlcm1pbmFsLnNvZnRSZXNldCgpO1xufTtcblxuLyoqXG4gKiBSZXF1ZXN0IEFOU0kgTW9kZSAoREVDUlFNKS5cbiAqXG4gKiBOb3QgY3VycmVudGx5IGltcGxlbWVudGVkLlxuICovXG5odGVybS5WVC5DU0lbJyRwJ10gPSBodGVybS5WVC5pZ25vcmU7XG5odGVybS5WVC5DU0lbJz8kcCddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIFNldCBjb25mb3JtYW5jZSBsZXZlbCAoREVDU0NMKS5cbiAqXG4gKiBOb3QgY3VycmVudGx5IGltcGxlbWVudGVkLlxuICovXG5odGVybS5WVC5DU0lbJ1wicCddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIExvYWQgTEVEcyAoREVDTEwpLlxuICpcbiAqIE5vdCBjdXJyZW50bHkgaW1wbGVtZW50ZWQuICBDb3VsZCBiZSBpbXBsZW1lbnRlZCBhcyB2aXJ0dWFsIExFRHMgb3ZlcmxheWluZ1xuICogdGhlIHRlcm1pbmFsIGlmIGFueW9uZSBjYXJlcy5cbiAqL1xuaHRlcm0uVlQuQ1NJWydxJ10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogU2V0IGN1cnNvciBzdHlsZSAoREVDU0NVU1IsIFZUNTIwKS5cbiAqL1xuaHRlcm0uVlQuQ1NJWycgcSddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICB2YXIgYXJnID0gcGFyc2VTdGF0ZS5hcmdzWzBdO1xuXG4gIGlmIChhcmcgPT0gMCB8fCBhcmcgPT0gMSkge1xuICAgIHRoaXMudGVybWluYWwuc2V0Q3Vyc29yU2hhcGUoaHRlcm0uVGVybWluYWwuY3Vyc29yU2hhcGUuQkxPQ0spO1xuICAgIHRoaXMudGVybWluYWwuc2V0Q3Vyc29yQmxpbmsodHJ1ZSk7XG4gIH0gZWxzZSBpZiAoYXJnID09IDIpIHtcbiAgICB0aGlzLnRlcm1pbmFsLnNldEN1cnNvclNoYXBlKGh0ZXJtLlRlcm1pbmFsLmN1cnNvclNoYXBlLkJMT0NLKTtcbiAgICB0aGlzLnRlcm1pbmFsLnNldEN1cnNvckJsaW5rKGZhbHNlKTtcbiAgfSBlbHNlIGlmIChhcmcgPT0gMykge1xuICAgIHRoaXMudGVybWluYWwuc2V0Q3Vyc29yU2hhcGUoaHRlcm0uVGVybWluYWwuY3Vyc29yU2hhcGUuVU5ERVJMSU5FKTtcbiAgICB0aGlzLnRlcm1pbmFsLnNldEN1cnNvckJsaW5rKHRydWUpO1xuICB9IGVsc2UgaWYgKGFyZyA9PSA0KSB7XG4gICAgdGhpcy50ZXJtaW5hbC5zZXRDdXJzb3JTaGFwZShodGVybS5UZXJtaW5hbC5jdXJzb3JTaGFwZS5VTkRFUkxJTkUpO1xuICAgIHRoaXMudGVybWluYWwuc2V0Q3Vyc29yQmxpbmsoZmFsc2UpO1xuICB9IGVsc2UgaWYgKGFyZyA9PSA1KSB7XG4gICAgdGhpcy50ZXJtaW5hbC5zZXRDdXJzb3JTaGFwZShodGVybS5UZXJtaW5hbC5jdXJzb3JTaGFwZS5CRUFNKTtcbiAgICB0aGlzLnRlcm1pbmFsLnNldEN1cnNvckJsaW5rKHRydWUpO1xuICB9IGVsc2UgaWYgKGFyZyA9PSA2KSB7XG4gICAgdGhpcy50ZXJtaW5hbC5zZXRDdXJzb3JTaGFwZShodGVybS5UZXJtaW5hbC5jdXJzb3JTaGFwZS5CRUFNKTtcbiAgICB0aGlzLnRlcm1pbmFsLnNldEN1cnNvckJsaW5rKGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLndhcm4oJ1Vua25vd24gY3Vyc29yIHN0eWxlOiAnICsgYXJnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZWxlY3QgY2hhcmFjdGVyIHByb3RlY3Rpb24gYXR0cmlidXRlIChERUNTQ0EpLlxuICpcbiAqIFdpbGwgbm90IGltcGxlbWVudC5cbiAqL1xuaHRlcm0uVlQuQ1NJWydcInEnXSA9IGh0ZXJtLlZULmlnbm9yZTtcblxuLyoqXG4gKiBTZXQgU2Nyb2xsaW5nIFJlZ2lvbiAoREVDU1RCTSkuXG4gKi9cbmh0ZXJtLlZULkNTSVsnciddID0gZnVuY3Rpb24ocGFyc2VTdGF0ZSkge1xuICB2YXIgYXJncyA9IHBhcnNlU3RhdGUuYXJncztcbiAgdmFyIHNjcm9sbFRvcCA9IGFyZ3NbMF0gPyBwYXJzZUludChhcmdzWzBdLCAxMCkgLSAxIDogbnVsbDtcbiAgdmFyIHNjcm9sbEJvdHRvbSA9IGFyZ3NbMV0gPyBwYXJzZUludChhcmdzWzFdLCAxMCkgLSAxIDogbnVsbDtcbiAgdGhpcy50ZXJtaW5hbC5zZXRWVFNjcm9sbFJlZ2lvbihzY3JvbGxUb3AsIHNjcm9sbEJvdHRvbSk7XG4gIHRoaXMudGVybWluYWwuc2V0Q3Vyc29yUG9zaXRpb24oMCwgMCk7XG59O1xuXG4vKipcbiAqIFJlc3RvcmUgREVDIFByaXZhdGUgTW9kZSBWYWx1ZXMuXG4gKlxuICogV2lsbCBub3QgaW1wbGVtZW50LlxuICovXG5odGVybS5WVC5DU0lbJz9yJ10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogQ2hhbmdlIEF0dHJpYnV0ZXMgaW4gUmVjdGFuZ3VsYXIgQXJlYSAoREVDQ0FSQSlcbiAqXG4gKiBXaWxsIG5vdCBpbXBsZW1lbnQuXG4gKi9cbmh0ZXJtLlZULkNTSVsnJHInXSA9IGh0ZXJtLlZULmlnbm9yZTtcblxuLyoqXG4gKiBTYXZlIGN1cnNvciAoQU5TSS5TWVMpXG4gKi9cbmh0ZXJtLlZULkNTSVsncyddID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudGVybWluYWwuc2F2ZUN1cnNvckFuZFN0YXRlKCk7XG59O1xuXG4vKipcbiAqIFNhdmUgREVDIFByaXZhdGUgTW9kZSBWYWx1ZXMuXG4gKlxuICogV2lsbCBub3QgaW1wbGVtZW50LlxuICovXG5odGVybS5WVC5DU0lbJz9zJ10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogV2luZG93IG1hbmlwdWxhdGlvbiAoZnJvbSBkdHRlcm0sIGFzIHdlbGwgYXMgZXh0ZW5zaW9ucykuXG4gKlxuICogV2lsbCBub3QgaW1wbGVtZW50LlxuICovXG5odGVybS5WVC5DU0lbJ3QnXSA9IGh0ZXJtLlZULmlnbm9yZTtcblxuLyoqXG4gKiBSZXZlcnNlIEF0dHJpYnV0ZXMgaW4gUmVjdGFuZ3VsYXIgQXJlYSAoREVDUkFSQSkuXG4gKlxuICogV2lsbCBub3QgaW1wbGVtZW50LlxuICovXG5odGVybS5WVC5DU0lbJyR0J10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogU2V0IG9uZSBvciBtb3JlIGZlYXR1cmVzIG9mIHRoZSB0aXRsZSBtb2Rlcy5cbiAqXG4gKiBXaWxsIG5vdCBpbXBsZW1lbnQuXG4gKi9cbmh0ZXJtLlZULkNTSVsnPnQnXSA9IGh0ZXJtLlZULmlnbm9yZTtcblxuLyoqXG4gKiBTZXQgd2FybmluZy1iZWxsIHZvbHVtZSAoREVDU1dCViwgVlQ1MjApLlxuICpcbiAqIFdpbGwgbm90IGltcGxlbWVudC5cbiAqL1xuaHRlcm0uVlQuQ1NJWycgdCddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIFJlc3RvcmUgY3Vyc29yIChBTlNJLlNZUykuXG4gKi9cbmh0ZXJtLlZULkNTSVsndSddID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMudGVybWluYWwucmVzdG9yZUN1cnNvckFuZFN0YXRlKCk7XG59O1xuXG4vKipcbiAqIFNldCBtYXJnaW4tYmVsbCB2b2x1bWUgKERFQ1NNQlYsIFZUNTIwKS5cbiAqXG4gKiBXaWxsIG5vdCBpbXBsZW1lbnQuXG4gKi9cbmh0ZXJtLlZULkNTSVsnIHUnXSA9IGh0ZXJtLlZULmlnbm9yZTtcblxuLyoqXG4gKiBDb3B5IFJlY3Rhbmd1bGFyIEFyZWEgKERFQ0NSQSwgVlQ0MDAgYW5kIHVwKS5cbiAqXG4gKiBXaWxsIG5vdCBpbXBsZW1lbnQuXG4gKi9cbmh0ZXJtLlZULkNTSVsnJHYnXSA9IGh0ZXJtLlZULmlnbm9yZTtcblxuLyoqXG4gKiBFbmFibGUgRmlsdGVyIFJlY3RhbmdsZSAoREVDRUZSKS5cbiAqXG4gKiBXaWxsIG5vdCBpbXBsZW1lbnQuXG4gKi9cbmh0ZXJtLlZULkNTSVtcIid3XCJdID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIFJlcXVlc3QgVGVybWluYWwgUGFyYW1ldGVycyAoREVDUkVRVFBBUk0pLlxuICpcbiAqIE5vdCBjdXJyZW50bHkgaW1wbGVtZW50ZWQuXG4gKi9cbmh0ZXJtLlZULkNTSVsneCddID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIFNlbGVjdCBBdHRyaWJ1dGUgQ2hhbmdlIEV4dGVudCAoREVDU0FDRSkuXG4gKlxuICogV2lsbCBub3QgaW1wbGVtZW50LlxuICovXG5odGVybS5WVC5DU0lbJyp4J10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogRmlsbCBSZWN0YW5ndWxhciBBcmVhIChERUNGUkEpLCBWVDQyMCBhbmQgdXAuXG4gKlxuICogV2lsbCBub3QgaW1wbGVtZW50LlxuICovXG5odGVybS5WVC5DU0lbJyR4J10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogdnRfdGlsZWRhdGEgKGFzIHVzZWQgYnkgTkFPaGFjayBhbmQgVW5OZXRIYWNrKVxuICogKHNlZSBodHRwczovL25ldGhhY2t3aWtpLmNvbS93aWtpL1Z0X3RpbGVkYXRhIGZvciBtb3JlIGluZm8pXG4gKlxuICogSW1wbGVtZW50ZWQgYXMgZmFyIGFzIHdlIGNhcmUgKHN0YXJ0IGEgZ2x5cGggYW5kIGVuZCBhIGdseXBoKS5cbiAqL1xuaHRlcm0uVlQuQ1NJWyd6J10gPSBmdW5jdGlvbihwYXJzZVN0YXRlKSB7XG4gIGlmIChwYXJzZVN0YXRlLmFyZ3MubGVuZ3RoIDwgMSkgcmV0dXJuO1xuICB2YXIgYXJnID0gcGFyc2VTdGF0ZS5hcmdzWzBdO1xuICBpZiAoYXJnID09IDApIHtcbiAgICAvLyBTdGFydCBhIGdseXBoIChvbmUgcGFyYW1ldGVyLCB0aGUgZ2x5cGggbnVtYmVyKS5cbiAgICBpZiAocGFyc2VTdGF0ZS5hcmdzLmxlbmd0aCA8IDIpIHJldHVybjtcbiAgICB0aGlzLnRlcm1pbmFsLmdldFRleHRBdHRyaWJ1dGVzKCkudGlsZURhdGEgPSBwYXJzZVN0YXRlLmFyZ3NbMV07XG4gIH0gZWxzZSBpZiAoYXJnID09IDEpIHtcbiAgICAvLyBFbmQgYSBnbHlwaC5cbiAgICB0aGlzLnRlcm1pbmFsLmdldFRleHRBdHRyaWJ1dGVzKCkudGlsZURhdGEgPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEVuYWJsZSBMb2NhdG9yIFJlcG9ydGluZyAoREVDRUxSKS5cbiAqXG4gKiBOb3QgY3VycmVudGx5IGltcGxlbWVudGVkLlxuICovXG5odGVybS5WVC5DU0lbXCInelwiXSA9IGh0ZXJtLlZULmlnbm9yZTtcblxuLyoqXG4gKiBFcmFzZSBSZWN0YW5ndWxhciBBcmVhIChERUNFUkEpLCBWVDQwMCBhbmQgdXAuXG4gKlxuICogV2lsbCBub3QgaW1wbGVtZW50LlxuICovXG5odGVybS5WVC5DU0lbJyR6J10gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogU2VsZWN0IExvY2F0b3IgRXZlbnRzIChERUNTTEUpLlxuICpcbiAqIE5vdCBjdXJyZW50bHkgaW1wbGVtZW50ZWQuXG4gKi9cbmh0ZXJtLlZULkNTSVtcIid7XCJdID0gaHRlcm0uVlQuaWdub3JlO1xuXG4vKipcbiAqIFJlcXVlc3QgTG9jYXRvciBQb3NpdGlvbiAoREVDUlFMUCkuXG4gKlxuICogTm90IGN1cnJlbnRseSBpbXBsZW1lbnRlZC5cbiAqL1xuaHRlcm0uVlQuQ1NJW1wiJ3xcIl0gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogSW5zZXJ0IENvbHVtbnMgKERFQ0lDKSwgVlQ0MjAgYW5kIHVwLlxuICpcbiAqIFdpbGwgbm90IGltcGxlbWVudC5cbiAqL1xuaHRlcm0uVlQuQ1NJW1wiJ31cIl0gPSBodGVybS5WVC5pZ25vcmU7XG5cbi8qKlxuICogRGVsZXRlIFAgcyBDb2x1bW5zIChERUNEQyksIFZUNDIwIGFuZCB1cC5cbiAqXG4gKiBXaWxsIG5vdCBpbXBsZW1lbnQuXG4gKi9cbmh0ZXJtLlZULkNTSVtcIid+XCJdID0gaHRlcm0uVlQuaWdub3JlO1xuLy8gU09VUkNFIEZJTEU6IGh0ZXJtL2pzL2h0ZXJtX3Z0X2NoYXJhY3Rlcl9tYXAuanNcbi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbmxpYi5ydGRlcCgnbGliLmYnKTtcblxuLyoqXG4gKiBDaGFyYWN0ZXIgbWFwIG9iamVjdC5cbiAqXG4gKiBNYXBwaW5nIGZyb20gcmVjZWl2ZWQgdG8gZGlzcGxheSBjaGFyYWN0ZXIsIHVzZWQgZGVwZW5kaW5nIG9uIHRoZSBhY3RpdmVcbiAqIFZUIGNoYXJhY3RlciBzZXQuXG4gKlxuICogR1IgbWFwcyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGRlc2NyaXB0aW9uIEEgaHVtYW4gcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhpcyBtYXAuXG4gKiBAcGFyYW0ge09iamVjdH0gZ2xtYXAgVGhlIEdMIG1hcHBpbmcgZnJvbSBpbnB1dCB0byBvdXRwdXQgY2hhcmFjdGVycy5cbiAqL1xuaHRlcm0uVlQuQ2hhcmFjdGVyTWFwID0gZnVuY3Rpb24oZGVzY3JpcHRpb24sIGdsbWFwKSB7XG4gIC8qKlxuICAgKiBTaG9ydCBkZXNjcmlwdGlvbiBmb3IgdGhpcyBjaGFyYWN0ZXIgc2V0LCB1c2VmdWwgZm9yIGRlYnVnZ2luZy5cbiAgICovXG4gIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRvIGNhbGwgdG8gd2hlbiB0aGlzIG1hcCBpcyBpbnN0YWxsZWQgaW4gR0wuXG4gICAqL1xuICB0aGlzLkdMID0gbnVsbDtcblxuICAvLyBBbHdheXMga2VlcCBhbiB1bm1vZGlmaWVkIHJlZmVyZW5jZSB0byB0aGUgbWFwLlxuICAvLyBUaGlzIGFsbG93cyB1cyB0byBzYW5lbHkgcmVzZXQgYmFjayB0byB0aGUgb3JpZ2luYWwgc3RhdGUuXG4gIHRoaXMuZ2xtYXBCYXNlXyA9IGdsbWFwO1xuXG4gIC8vIE5vdyBzeW5jIHRoZSBpbnRlcm5hbCBzdGF0ZSBhcyBuZWVkZWQuXG4gIHRoaXMuc3luY18oKTtcbn07XG5cbi8qKlxuICogSW50ZXJuYWwgaGVscGVyIGZvciByZXN5bmNpbmcgaW50ZXJuYWwgc3RhdGUuXG4gKlxuICogVXNlZCB3aGVuIHRoZSBtYXBwaW5ncyBjaGFuZ2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q/fSBvcHRfZ2xtYXAgQWRkaXRpb25hbCBtYXBwaW5ncyB0byBvdmVybGF5IG9uIHRvcCBvZiB0aGVcbiAqICAgICBiYXNlIG1hcHBpbmcuXG4gKi9cbmh0ZXJtLlZULkNoYXJhY3Rlck1hcC5wcm90b3R5cGUuc3luY18gPSBmdW5jdGlvbihvcHRfZ2xtYXApIHtcbiAgLy8gSWYgdGhlcmUgYXJlIG5vIG1hcHMsIHRoZW4gcmVzZXQgdGhlIHN0YXRlIGJhY2suXG4gIGlmICghdGhpcy5nbG1hcEJhc2VfICYmICFvcHRfZ2xtYXApIHtcbiAgICB0aGlzLkdMID0gbnVsbDtcbiAgICBkZWxldGUgdGhpcy5nbG1hcF87XG4gICAgZGVsZXRlIHRoaXMuZ2xyZV87XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU2V0IHRoZSB0aGUgR0wgbWFwcGluZy4gIElmIHdlJ3JlIGdpdmVuIGEgY3VzdG9tIG1hcHBpbmcsIHRoZW4gY3JlYXRlIGFcbiAgLy8gbmV3IG9iamVjdCB0byBob2xkIHRoZSBtZXJnZWQgbWFwLiAgVGhpcyB3YXkgd2UgY2FuIGNsZWFubHkgcmVzZXQgYmFjay5cbiAgaWYgKG9wdF9nbG1hcCkgdGhpcy5nbG1hcF8gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmdsbWFwQmFzZV8sIG9wdF9nbG1hcCk7XG4gIGVsc2UgdGhpcy5nbG1hcF8gPSB0aGlzLmdsbWFwQmFzZV87XG5cbiAgdmFyIGdsY2hhcnMgPSBPYmplY3Qua2V5cyh0aGlzLmdsbWFwXykubWFwKFxuICAgIGtleSA9PiAnXFxcXHgnICsgbGliLmYuenBhZChrZXkuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLFxuICApO1xuICB0aGlzLmdscmVfID0gbmV3IFJlZ0V4cCgnWycgKyBnbGNoYXJzLmpvaW4oJycpICsgJ10nLCAnZycpO1xuXG4gIHRoaXMuR0wgPSBzdHIgPT4gc3RyLnJlcGxhY2UodGhpcy5nbHJlXywgY2ggPT4gdGhpcy5nbG1hcF9bY2hdKTtcbn07XG5cbi8qKlxuICogUmVzZXQgbWFwIGJhY2sgdG8gb3JpZ2luYWwgbWFwcGluZ3MgKGRpc2NhcmRpbmcgcnVudGltZSB1cGRhdGVzKS5cbiAqXG4gKiBTcGVjaWZpY2FsbHksIGFueSBjYWxscyB0byBzZXRPdmVycmlkZXMgd2lsbCBiZSBkaXNjYXJkZWQuXG4gKi9cbmh0ZXJtLlZULkNoYXJhY3Rlck1hcC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgLy8gSWYgd2UgaGF2ZW4ndCBiZWVuIGdpdmVuIGEgY3VzdG9tIG1hcHBpbmcsIHRoZW4gdGhlcmUncyBub3RoaW5nIHRvIHJlc2V0LlxuICBpZiAodGhpcy5nbG1hcF8gIT09IHRoaXMuZ2xtYXBCYXNlXykgdGhpcy5zeW5jXygpO1xufTtcblxuLyoqXG4gKiBNZXJnZSBjdXN0b20gY2hhbmdlcyB0byB0aGlzIG1hcC5cbiAqXG4gKiBUaGUgaW5wdXQgbWFwIG5lZWQgbm90IGR1cGxpY2F0ZSB0aGUgZXhpc3RpbmcgbWFwcGluZ3MgYXMgaXQgaXMgbWVyZ2VkIHdpdGhcbiAqIHRoZSBleGlzdGluZyBiYXNlIG1hcCAod2hhdCB3YXMgY3JlYXRlZCB3aXRoKS4gIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhpc1xuICogd2lsbCB0aHJvdyBhd2F5IHByZXZpb3VzIG92ZXJyaWRlIHNldHRpbmdzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBnbG1hcCBUaGUgY3VzdG9tIG1hcCB0byBvdmVycmlkZSBleGlzdGluZyBtYXBwaW5ncy5cbiAqL1xuaHRlcm0uVlQuQ2hhcmFjdGVyTWFwLnByb3RvdHlwZS5zZXRPdmVycmlkZXMgPSBmdW5jdGlvbihnbG1hcCkge1xuICB0aGlzLnN5bmNfKGdsbWFwKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIGEgY29weSBvZiB0aGlzIG1hcHBpbmcuXG4gKlxuICogQHJldHVybiB7aHRlcm0uVlQuQ2hhcmFjdGVyTWFwfSBBIG5ldyBodGVybS5WVC5DaGFyYWN0ZXJNYXAgaW5zdGFuY2UuXG4gKi9cbmh0ZXJtLlZULkNoYXJhY3Rlck1hcC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG1hcCA9IG5ldyBodGVybS5WVC5DaGFyYWN0ZXJNYXAodGhpcy5kZXNjcmlwdGlvbiwgdGhpcy5nbG1hcEJhc2VfKTtcbiAgaWYgKHRoaXMuZ2xtYXBfICE9PSB0aGlzLmdsbWFwQmFzZV8pIG1hcC5zZXRPdmVycmlkZXModGhpcy5nbG1hcF8pO1xuICByZXR1cm4gbWFwO1xufTtcblxuLyoqXG4gKiBUYWJsZSBvZiBjaGFyYWN0ZXIgbWFwcy5cbiAqL1xuaHRlcm0uVlQuQ2hhcmFjdGVyTWFwcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm1hcHNfID0gaHRlcm0uVlQuQ2hhcmFjdGVyTWFwcy5EZWZhdWx0TWFwcztcblxuICAvLyBBbHdheXMga2VlcCBhbiB1bm1vZGlmaWVkIHJlZmVyZW5jZSB0byB0aGUgbWFwLlxuICAvLyBUaGlzIGFsbG93cyB1cyB0byBzYW5lbHkgcmVzZXQgYmFjayB0byB0aGUgb3JpZ2luYWwgc3RhdGUuXG4gIHRoaXMubWFwc0Jhc2VfID0gdGhpcy5tYXBzXztcbn07XG5cbi8qKlxuICogTG9vayB1cCBhIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBtYXAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIG1hcCB0byBsb29rdXAuXG4gKiBAcmV0dXJuIHtodGVybS5WVC5DaGFyYWN0ZXJNYXB9IFRoZSBtYXAsIGlmIGl0J3MgYmVlbiByZWdpc3RlcmVkLlxuICovXG5odGVybS5WVC5DaGFyYWN0ZXJNYXBzLnByb3RvdHlwZS5nZXRNYXAgPSBmdW5jdGlvbihuYW1lKSB7XG4gIGlmICh0aGlzLm1hcHNfLmhhc093blByb3BlcnR5KG5hbWUpKSByZXR1cm4gdGhpcy5tYXBzX1tuYW1lXTtcbiAgZWxzZSByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuLyoqXG4gKiBSZWdpc3RlciBhIG5ldyBtYXAuXG4gKlxuICogQW55IHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBtYXBzIGJ5IHRoaXMgbmFtZSB3aWxsIGJlIGRpc2NhcmRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgbWFwLlxuICogQHBhcmFtIHtodGVybS5WVC5DaGFyYWN0ZXJNYXB9IG1hcCBUaGUgbWFwIHRvIHJlZ2lzdGVyLlxuICovXG5odGVybS5WVC5DaGFyYWN0ZXJNYXBzLnByb3RvdHlwZS5hZGRNYXAgPSBmdW5jdGlvbihuYW1lLCBtYXApIHtcbiAgaWYgKHRoaXMubWFwc18gPT09IHRoaXMubWFwc0Jhc2VfKVxuICAgIHRoaXMubWFwc18gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm1hcHNCYXNlXyk7XG4gIHRoaXMubWFwc19bbmFtZV0gPSBtYXA7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSB0YWJsZSBhbmQgYWxsIGl0cyBtYXBzIGJhY2sgdG8gb3JpZ2luYWwgc3RhdGUuXG4gKi9cbmh0ZXJtLlZULkNoYXJhY3Rlck1hcHMucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLm1hcHNfICE9PSBodGVybS5WVC5DaGFyYWN0ZXJNYXBzLkRlZmF1bHRNYXBzKVxuICAgIHRoaXMubWFwc18gPSBodGVybS5WVC5DaGFyYWN0ZXJNYXBzLkRlZmF1bHRNYXBzO1xufTtcblxuLyoqXG4gKiBNZXJnZSBjdXN0b20gY2hhbmdlcyB0byB0aGlzIHRhYmxlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXBzIEEgc2V0IG9mIGh0ZXJtLlZULkNoYXJhY3Rlck1hcCBvYmplY3RzLlxuICovXG5odGVybS5WVC5DaGFyYWN0ZXJNYXBzLnByb3RvdHlwZS5zZXRPdmVycmlkZXMgPSBmdW5jdGlvbihtYXBzKSB7XG4gIGlmICh0aGlzLm1hcHNfID09PSB0aGlzLm1hcHNCYXNlXylcbiAgICB0aGlzLm1hcHNfID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5tYXBzQmFzZV8pO1xuXG4gIGZvciAodmFyIG5hbWUgaW4gbWFwcykge1xuICAgIHZhciBtYXAgPSB0aGlzLmdldE1hcChuYW1lKTtcbiAgICBpZiAobWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMubWFwc19bbmFtZV0gPSBtYXAuY2xvbmUoKTtcbiAgICAgIHRoaXMubWFwc19bbmFtZV0uc2V0T3ZlcnJpZGVzKG1hcHNbbmFtZV0pO1xuICAgIH0gZWxzZVxuICAgICAgdGhpcy5hZGRNYXAobmFtZSwgbmV3IGh0ZXJtLlZULkNoYXJhY3Rlck1hcCgndXNlciAnICsgbmFtZSwgbWFwc1tuYW1lXSkpO1xuICB9XG59O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHNldCBvZiBzdXBwb3J0ZWQgY2hhcmFjdGVyIG1hcHMuXG4gKi9cbmh0ZXJtLlZULkNoYXJhY3Rlck1hcHMuRGVmYXVsdE1hcHMgPSB7fTtcblxuLyoqXG4gKiBWVDEwMCBHcmFwaGljIGNoYXJhY3RlciBtYXAuXG4gKiBodHRwOi8vdnQxMDAubmV0L2RvY3MvdnQyMjAtcm0vdGFibGUyLTQuaHRtbFxuICovXG5odGVybS5WVC5DaGFyYWN0ZXJNYXBzLkRlZmF1bHRNYXBzWycwJ10gPSBuZXcgaHRlcm0uVlQuQ2hhcmFjdGVyTWFwKCdncmFwaGljJywge1xuICAnXFx4NjAnOiAnXFx1MjVjNicsIC8vIGAgLT4gZGlhbW9uZFxuICBhOiAnXFx1MjU5MicsIC8vIGEgLT4gZ3JleS1ib3hcbiAgYjogJ1xcdTI0MDknLCAvLyBiIC0+IGgvdFxuICBjOiAnXFx1MjQwYycsIC8vIGMgLT4gZi9mXG4gIGQ6ICdcXHUyNDBkJywgLy8gZCAtPiBjL3JcbiAgZTogJ1xcdTI0MGEnLCAvLyBlIC0+IGwvZlxuICBmOiAnXFx1MDBiMCcsIC8vIGYgLT4gZGVncmVlXG4gIGc6ICdcXHUwMGIxJywgLy8gZyAtPiArLy1cbiAgaDogJ1xcdTI0MjQnLCAvLyBoIC0+IG4vbFxuICBpOiAnXFx1MjQwYicsIC8vIGkgLT4gdi90XG4gIGo6ICdcXHUyNTE4JywgLy8gaiAtPiBib3R0b20tcmlnaHRcbiAgazogJ1xcdTI1MTAnLCAvLyBrIC0+IHRvcC1yaWdodFxuICBsOiAnXFx1MjUwYycsIC8vIGwgLT4gdG9wLWxlZnRcbiAgbTogJ1xcdTI1MTQnLCAvLyBtIC0+IGJvdHRvbS1sZWZ0XG4gIG46ICdcXHUyNTNjJywgLy8gbiAtPiBsaW5lLWNyb3NzXG4gIG86ICdcXHUyM2JhJywgLy8gbyAtPiBzY2FuMVxuICBwOiAnXFx1MjNiYicsIC8vIHAgLT4gc2NhbjNcbiAgcTogJ1xcdTI1MDAnLCAvLyBxIC0+IHNjYW41XG4gIHI6ICdcXHUyM2JjJywgLy8gciAtPiBzY2FuN1xuICBzOiAnXFx1MjNiZCcsIC8vIHMgLT4gc2NhbjlcbiAgdDogJ1xcdTI1MWMnLCAvLyB0IC0+IGxlZnQtdGVlXG4gIHU6ICdcXHUyNTI0JywgLy8gdSAtPiByaWdodC10ZWVcbiAgdjogJ1xcdTI1MzQnLCAvLyB2IC0+IGJvdHRvbS10ZWVcbiAgdzogJ1xcdTI1MmMnLCAvLyB3IC0+IHRvcC10ZWVcbiAgeDogJ1xcdTI1MDInLCAvLyB4IC0+IHZlcnRpY2FsLWxpbmVcbiAgeTogJ1xcdTIyNjQnLCAvLyB5IC0+IGxlc3MtZXF1YWxcbiAgejogJ1xcdTIyNjUnLCAvLyB6IC0+IGdyZWF0ZXItZXF1YWxcbiAgJ1xceDdiJzogJ1xcdTAzYzAnLCAvLyB7IC0+IHBpXG4gICdcXHg3Yyc6ICdcXHUyMjYwJywgLy8gfCAtPiBub3QtZXF1YWxcbiAgJ1xceDdkJzogJ1xcdTAwYTMnLCAvLyB9IC0+IGJyaXRpc2gtcG91bmRcbiAgJ1xceDdlJzogJ1xcdTAwYjcnLCAvLyB+IC0+IGRvdFxufSk7XG5cbi8qKlxuICogQnJpdGlzaCBjaGFyYWN0ZXIgbWFwLlxuICogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi01Lmh0bWxcbiAqL1xuaHRlcm0uVlQuQ2hhcmFjdGVyTWFwcy5EZWZhdWx0TWFwc1snQSddID0gbmV3IGh0ZXJtLlZULkNoYXJhY3Rlck1hcCgnYnJpdGlzaCcsIHtcbiAgJ1xceDIzJzogJ1xcdTAwYTMnLCAvLyAjIC0+IGJyaXRpc2gtcG91bmRcbn0pO1xuXG4vKipcbiAqIFVTIEFTQ0lJIG1hcCwgbm8gY2hhbmdlcy5cbiAqL1xuaHRlcm0uVlQuQ2hhcmFjdGVyTWFwcy5EZWZhdWx0TWFwc1snQiddID0gbmV3IGh0ZXJtLlZULkNoYXJhY3Rlck1hcCgndXMnLCBudWxsKTtcblxuLyoqXG4gKiBEdXRjaCBjaGFyYWN0ZXIgbWFwLlxuICogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi02Lmh0bWxcbiAqL1xuaHRlcm0uVlQuQ2hhcmFjdGVyTWFwcy5EZWZhdWx0TWFwc1snNCddID0gbmV3IGh0ZXJtLlZULkNoYXJhY3Rlck1hcCgnZHV0Y2gnLCB7XG4gICdcXHgyMyc6ICdcXHUwMGEzJywgLy8gIyAtPiBicml0aXNoLXBvdW5kXG5cbiAgJ1xceDQwJzogJ1xcdTAwYmUnLCAvLyBAIC0+IDMvNFxuXG4gICdcXHg1Yic6ICdcXHUwMTMyJywgLy8gWyAtPiAnaWonIGxpZ2F0dXJlICh4dGVybSBnb2VzIHdpdGggXFx1MDBmZj8pXG4gICdcXHg1Yyc6ICdcXHUwMGJkJywgLy8gXFwgLT4gMS8yXG4gICdcXHg1ZCc6ICdcXHUwMDdjJywgLy8gXSAtPiB2ZXJ0aWNhbCBiYXJcblxuICAnXFx4N2InOiAnXFx1MDBhOCcsIC8vIHsgLT4gdHdvIGRvdHNcbiAgJ1xceDdjJzogJ1xcdTAwNjYnLCAvLyB8IC0+IGZcbiAgJ1xceDdkJzogJ1xcdTAwYmMnLCAvLyB9IC0+IDEvNFxuICAnXFx4N2UnOiAnXFx1MDBiNCcsIC8vIH4gLT4gYWN1dGVcbn0pO1xuXG4vKipcbiAqIEZpbm5pc2ggY2hhcmFjdGVyIG1hcC5cbiAqIGh0dHA6Ly92dDEwMC5uZXQvZG9jcy92dDIyMC1ybS90YWJsZTItNy5odG1sXG4gKi9cbmh0ZXJtLlZULkNoYXJhY3Rlck1hcHMuRGVmYXVsdE1hcHNbJ0MnXSA9IGh0ZXJtLlZULkNoYXJhY3Rlck1hcHMuRGVmYXVsdE1hcHNbXG4gICc1J1xuXSA9IG5ldyBodGVybS5WVC5DaGFyYWN0ZXJNYXAoJ2Zpbm5pc2gnLCB7XG4gICdcXHg1Yic6ICdcXHUwMGM0JywgLy8gWyAtPiAnQScgdW1sYXV0XG4gICdcXHg1Yyc6ICdcXHUwMGQ2JywgLy8gXFwgLT4gJ08nIHVtbGF1dFxuICAnXFx4NWQnOiAnXFx1MDBjNScsIC8vIF0gLT4gJ0EnIHJpbmdcbiAgJ1xceDVlJzogJ1xcdTAwZGMnLCAvLyB+IC0+ICd1JyB1bWxhdXRcblxuICAnXFx4NjAnOiAnXFx1MDBlOScsIC8vIGAgLT4gJ2UnIGFjdXRlXG5cbiAgJ1xceDdiJzogJ1xcdTAwZTQnLCAvLyB7IC0+ICdhJyB1bWxhdXRcbiAgJ1xceDdjJzogJ1xcdTAwZjYnLCAvLyB8IC0+ICdvJyB1bWxhdXRcbiAgJ1xceDdkJzogJ1xcdTAwZTUnLCAvLyB9IC0+ICdhJyByaW5nXG4gICdcXHg3ZSc6ICdcXHUwMGZjJywgLy8gfiAtPiAndScgdW1sYXV0XG59KTtcblxuLyoqXG4gKiBGcmVuY2ggY2hhcmFjdGVyIG1hcC5cbiAqIGh0dHA6Ly92dDEwMC5uZXQvZG9jcy92dDIyMC1ybS90YWJsZTItOC5odG1sXG4gKi9cbmh0ZXJtLlZULkNoYXJhY3Rlck1hcHMuRGVmYXVsdE1hcHNbJ1InXSA9IG5ldyBodGVybS5WVC5DaGFyYWN0ZXJNYXAoJ2ZyZW5jaCcsIHtcbiAgJ1xceDIzJzogJ1xcdTAwYTMnLCAvLyAjIC0+IGJyaXRpc2gtcG91bmRcblxuICAnXFx4NDAnOiAnXFx1MDBlMCcsIC8vIEAgLT4gJ2EnIGdyYXZlXG5cbiAgJ1xceDViJzogJ1xcdTAwYjAnLCAvLyBbIC0+IHJpbmdcbiAgJ1xceDVjJzogJ1xcdTAwZTcnLCAvLyBcXCAtPiAnYycgY2VkaWxsYVxuICAnXFx4NWQnOiAnXFx1MDBhNycsIC8vIF0gLT4gc2VjdGlvbiBzeW1ib2wgKGRvdWJsZSBzKVxuXG4gICdcXHg3Yic6ICdcXHUwMGU5JywgLy8geyAtPiAnZScgYWN1dGVcbiAgJ1xceDdjJzogJ1xcdTAwZjknLCAvLyB8IC0+ICd1JyBncmF2ZVxuICAnXFx4N2QnOiAnXFx1MDBlOCcsIC8vIH0gLT4gJ2UnIGdyYXZlXG4gICdcXHg3ZSc6ICdcXHUwMGE4JywgLy8gfiAtPiB1bWxhdXRcbn0pO1xuXG4vKipcbiAqIEZyZW5jaCBDYW5hZGlhbiBjaGFyYWN0ZXIgbWFwLlxuICogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi05Lmh0bWxcbiAqL1xuaHRlcm0uVlQuQ2hhcmFjdGVyTWFwcy5EZWZhdWx0TWFwc1snUSddID0gbmV3IGh0ZXJtLlZULkNoYXJhY3Rlck1hcChcbiAgJ2ZyZW5jaCBjYW5hZGlhbicsXG4gIHtcbiAgICAnXFx4NDAnOiAnXFx1MDBlMCcsIC8vIEAgLT4gJ2EnIGdyYXZlXG5cbiAgICAnXFx4NWInOiAnXFx1MDBlMicsIC8vIFsgLT4gJ2EnIGNpcmN1bWZsZXhcbiAgICAnXFx4NWMnOiAnXFx1MDBlNycsIC8vIFxcIC0+ICdjJyBjZWRpbGxhXG4gICAgJ1xceDVkJzogJ1xcdTAwZWEnLCAvLyBdIC0+ICdlJyBjaXJjdW1mbGV4XG4gICAgJ1xceDVlJzogJ1xcdTAwZWUnLCAvLyBeIC0+ICdpJyBjaXJjdW1mbGV4XG5cbiAgICAnXFx4NjAnOiAnXFx1MDBmNCcsIC8vIGAgLT4gJ28nIGNpcmN1bWZsZXhcblxuICAgICdcXHg3Yic6ICdcXHUwMGU5JywgLy8geyAtPiAnZScgYWN1dGVcbiAgICAnXFx4N2MnOiAnXFx1MDBmOScsIC8vIHwgLT4gJ3UnIGdyYXZlXG4gICAgJ1xceDdkJzogJ1xcdTAwZTgnLCAvLyB9IC0+ICdlJyBncmF2ZVxuICAgICdcXHg3ZSc6ICdcXHUwMGZiJywgLy8gfiAtPiAndScgY2lyY3VtZmxleFxuICB9LFxuKTtcblxuLyoqXG4gKiBHZXJtYW4gY2hhcmFjdGVyIG1hcC5cbiAqIGh0dHA6Ly92dDEwMC5uZXQvZG9jcy92dDIyMC1ybS90YWJsZTItMTAuaHRtbFxuICovXG5odGVybS5WVC5DaGFyYWN0ZXJNYXBzLkRlZmF1bHRNYXBzWydLJ10gPSBuZXcgaHRlcm0uVlQuQ2hhcmFjdGVyTWFwKCdnZXJtYW4nLCB7XG4gICdcXHg0MCc6ICdcXHUwMGE3JywgLy8gQCAtPiBzZWN0aW9uIHN5bWJvbCAoZG91YmxlIHMpXG5cbiAgJ1xceDViJzogJ1xcdTAwYzQnLCAvLyBbIC0+ICdBJyB1bWxhdXRcbiAgJ1xceDVjJzogJ1xcdTAwZDYnLCAvLyBcXCAtPiAnTycgdW1sYXV0XG4gICdcXHg1ZCc6ICdcXHUwMGRjJywgLy8gXSAtPiAnVScgdW1sYXV0XG5cbiAgJ1xceDdiJzogJ1xcdTAwZTQnLCAvLyB7IC0+ICdhJyB1bWxhdXRcbiAgJ1xceDdjJzogJ1xcdTAwZjYnLCAvLyB8IC0+ICdvJyB1bWxhdXRcbiAgJ1xceDdkJzogJ1xcdTAwZmMnLCAvLyB9IC0+ICd1JyB1bWxhdXRcbiAgJ1xceDdlJzogJ1xcdTAwZGYnLCAvLyB+IC0+IGVzemV0dFxufSk7XG5cbi8qKlxuICogSXRhbGlhbiBjaGFyYWN0ZXIgbWFwLlxuICogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi0xMS5odG1sXG4gKi9cbmh0ZXJtLlZULkNoYXJhY3Rlck1hcHMuRGVmYXVsdE1hcHNbJ1knXSA9IG5ldyBodGVybS5WVC5DaGFyYWN0ZXJNYXAoJ2l0YWxpYW4nLCB7XG4gICdcXHgyMyc6ICdcXHUwMGEzJywgLy8gIyAtPiBicml0aXNoLXBvdW5kXG5cbiAgJ1xceDQwJzogJ1xcdTAwYTcnLCAvLyBAIC0+IHNlY3Rpb24gc3ltYm9sIChkb3VibGUgcylcblxuICAnXFx4NWInOiAnXFx1MDBiMCcsIC8vIFsgLT4gcmluZ1xuICAnXFx4NWMnOiAnXFx1MDBlNycsIC8vIFxcIC0+ICdjJyBjZWRpbGxhXG4gICdcXHg1ZCc6ICdcXHUwMGU5JywgLy8gXSAtPiAnZScgYWN1dGVcblxuICAnXFx4NjAnOiAnXFx1MDBmOScsIC8vIGAgLT4gJ3UnIGdyYXZlXG5cbiAgJ1xceDdiJzogJ1xcdTAwZTAnLCAvLyB7IC0+ICdhJyBncmF2ZVxuICAnXFx4N2MnOiAnXFx1MDBmMicsIC8vIHwgLT4gJ28nIGdyYXZlXG4gICdcXHg3ZCc6ICdcXHUwMGU4JywgLy8gfSAtPiAnZScgZ3JhdmVcbiAgJ1xceDdlJzogJ1xcdTAwZWMnLCAvLyB+IC0+ICdpJyBncmF2ZVxufSk7XG5cbi8qKlxuICogTm9yd2VnaWFuL0RhbmlzaCBjaGFyYWN0ZXIgbWFwLlxuICogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi0xMi5odG1sXG4gKi9cbmh0ZXJtLlZULkNoYXJhY3Rlck1hcHMuRGVmYXVsdE1hcHNbJ0UnXSA9IGh0ZXJtLlZULkNoYXJhY3Rlck1hcHMuRGVmYXVsdE1hcHNbXG4gICc2J1xuXSA9IG5ldyBodGVybS5WVC5DaGFyYWN0ZXJNYXAoJ25vcndlZ2lhbi9kYW5pc2gnLCB7XG4gICdcXHg0MCc6ICdcXHUwMGM0JywgLy8gQCAtPiAnQScgdW1sYXV0XG5cbiAgJ1xceDViJzogJ1xcdTAwYzYnLCAvLyBbIC0+ICdBRScgbGlnYXR1cmVcbiAgJ1xceDVjJzogJ1xcdTAwZDgnLCAvLyBcXCAtPiAnTycgc3Ryb2tlXG4gICdcXHg1ZCc6ICdcXHUwMGM1JywgLy8gXSAtPiAnQScgcmluZ1xuICAnXFx4NWUnOiAnXFx1MDBkYycsIC8vIF4gLT4gJ1UnIHVtbGF1dFxuXG4gICdcXHg2MCc6ICdcXHUwMGU0JywgLy8gYCAtPiAnYScgdW1sYXV0XG5cbiAgJ1xceDdiJzogJ1xcdTAwZTYnLCAvLyB7IC0+ICdhZScgbGlnYXR1cmVcbiAgJ1xceDdjJzogJ1xcdTAwZjgnLCAvLyB8IC0+ICdvJyBzdHJva2VcbiAgJ1xceDdkJzogJ1xcdTAwZTUnLCAvLyB9IC0+ICdhJyByaW5nXG4gICdcXHg3ZSc6ICdcXHUwMGZjJywgLy8gfiAtPiAndScgdW1sYXV0XG59KTtcblxuLyoqXG4gKiBTcGFuaXNoIGNoYXJhY3RlciBtYXAuXG4gKiBodHRwOi8vdnQxMDAubmV0L2RvY3MvdnQyMjAtcm0vdGFibGUyLTEzLmh0bWxcbiAqL1xuaHRlcm0uVlQuQ2hhcmFjdGVyTWFwcy5EZWZhdWx0TWFwc1snWiddID0gbmV3IGh0ZXJtLlZULkNoYXJhY3Rlck1hcCgnc3BhbmlzaCcsIHtcbiAgJ1xceDIzJzogJ1xcdTAwYTMnLCAvLyAjIC0+IGJyaXRpc2gtcG91bmRcblxuICAnXFx4NDAnOiAnXFx1MDBhNycsIC8vIEAgLT4gc2VjdGlvbiBzeW1ib2wgKGRvdWJsZSBzKVxuXG4gICdcXHg1Yic6ICdcXHUwMGExJywgLy8gWyAtPiAnIScgaW52ZXJ0ZWRcbiAgJ1xceDVjJzogJ1xcdTAwZDEnLCAvLyBcXCAtPiAnTicgdGlsZGVcbiAgJ1xceDVkJzogJ1xcdTAwYmYnLCAvLyBdIC0+ICc/JyBpbnZlcnRlZFxuXG4gICdcXHg3Yic6ICdcXHUwMGIwJywgLy8geyAtPiByaW5nXG4gICdcXHg3Yyc6ICdcXHUwMGYxJywgLy8gfCAtPiAnbicgdGlsZGVcbiAgJ1xceDdkJzogJ1xcdTAwZTcnLCAvLyB9IC0+ICdjJyBjZWRpbGxhXG59KTtcblxuLyoqXG4gKiBTd2VkaXNoIGNoYXJhY3RlciBtYXAuXG4gKiBodHRwOi8vdnQxMDAubmV0L2RvY3MvdnQyMjAtcm0vdGFibGUyLTE0Lmh0bWxcbiAqL1xuaHRlcm0uVlQuQ2hhcmFjdGVyTWFwcy5EZWZhdWx0TWFwc1snNyddID0gaHRlcm0uVlQuQ2hhcmFjdGVyTWFwcy5EZWZhdWx0TWFwc1tcbiAgJ0gnXG5dID0gbmV3IGh0ZXJtLlZULkNoYXJhY3Rlck1hcCgnc3dlZGlzaCcsIHtcbiAgJ1xceDQwJzogJ1xcdTAwYzknLCAvLyBAIC0+ICdFJyBhY3V0ZVxuXG4gICdcXHg1Yic6ICdcXHUwMGM0JywgLy8gWyAtPiAnQScgdW1sYXV0XG4gICdcXHg1Yyc6ICdcXHUwMGQ2JywgLy8gXFwgLT4gJ08nIHVtbGF1dFxuICAnXFx4NWQnOiAnXFx1MDBjNScsIC8vIF0gLT4gJ0EnIHJpbmdcbiAgJ1xceDVlJzogJ1xcdTAwZGMnLCAvLyBeIC0+ICdVJyB1bWxhdXRcblxuICAnXFx4NjAnOiAnXFx1MDBlOScsIC8vIGAgLT4gJ2UnIGFjdXRlXG5cbiAgJ1xceDdiJzogJ1xcdTAwZTQnLCAvLyB7IC0+ICdhJyB1bWxhdXRcbiAgJ1xceDdjJzogJ1xcdTAwZjYnLCAvLyB8IC0+ICdvJyB1bWxhdXRcbiAgJ1xceDdkJzogJ1xcdTAwZTUnLCAvLyB9IC0+ICdhJyByaW5nXG4gICdcXHg3ZSc6ICdcXHUwMGZjJywgLy8gfiAtPiAndScgdW1sYXV0XG59KTtcblxuLyoqXG4gKiBTd2lzcyBjaGFyYWN0ZXIgbWFwLlxuICogaHR0cDovL3Z0MTAwLm5ldC9kb2NzL3Z0MjIwLXJtL3RhYmxlMi0xNS5odG1sXG4gKi9cbmh0ZXJtLlZULkNoYXJhY3Rlck1hcHMuRGVmYXVsdE1hcHNbJz0nXSA9IG5ldyBodGVybS5WVC5DaGFyYWN0ZXJNYXAoJ3N3aXNzJywge1xuICAnXFx4MjMnOiAnXFx1MDBmOScsIC8vICMgLT4gJ3UnIGdyYXZlXG5cbiAgJ1xceDQwJzogJ1xcdTAwZTAnLCAvLyBAIC0+ICdhJyBncmF2ZVxuXG4gICdcXHg1Yic6ICdcXHUwMGU5JywgLy8gWyAtPiAnZScgYWN1dGVcbiAgJ1xceDVjJzogJ1xcdTAwZTcnLCAvLyBcXCAtPiAnYycgY2VkaWxsYVxuICAnXFx4NWQnOiAnXFx1MDBlYScsIC8vIF0gLT4gJ2UnIGNpcmN1bWZsZXhcbiAgJ1xceDVlJzogJ1xcdTAwZWUnLCAvLyBeIC0+ICdpJyBjaXJjdW1mbGV4XG4gIF86ICdcXHUwMGU4JywgLy8gXyAtPiAnZScgZ3JhdmVcblxuICAnXFx4NjAnOiAnXFx1MDBmNCcsIC8vIGAgLT4gJ28nIGNpcmN1bWZsZXhcblxuICAnXFx4N2InOiAnXFx1MDBlNCcsIC8vIHsgLT4gJ2EnIHVtbGF1dFxuICAnXFx4N2MnOiAnXFx1MDBmNicsIC8vIHwgLT4gJ28nIHVtbGF1dFxuICAnXFx4N2QnOiAnXFx1MDBmYycsIC8vIH0gLT4gJ3UnIHVtbGF1dFxuICAnXFx4N2UnOiAnXFx1MDBmYicsIC8vIH4gLT4gJ3UnIGNpcmN1bWZsZXhcbn0pO1xubGliLnJlc291cmNlLmFkZChcbiAgJ2h0ZXJtL2F1ZGlvL2JlbGwnLFxuICAnYXVkaW8vb2dnO2Jhc2U2NCcsXG4gICdUMmRuVXdBQ0FBQUFBQUFBQUFEaHFXNUtBQUFBQU1GdkVqWUJIZ0YyYjNKaWFYTUFBQUFBQVlDN0FBQUFBQUFBQUhjQkFBQUFBQUM0JyArXG4gICAgJ0FVOW5aMU1BQUFBQUFBQUFBQUFBNGFsdVNnRUFBQUFBZXNJM0VDMy8vLy8vLy8vLy8vLy8vLy8vLzhrRGRtOXlZbWx6SFFBQUFGaHAnICtcbiAgICAnY0dndVQzSm5JR3hwWWxadmNtSnBjeUJKSURJd01Ea3dOekE1QUFBQUFBRUZkbTl5WW1sektVSkRWZ0VBQ0FBQUFERk1JTVdBMEpCVicgK1xuICAgICdBQUFRQUFCZ0pDa09rMlpKS2FXVW9TaDVtSlJJU1NtbGxNVXdpWmlVaWNVWVk0d3h4aGhqakRIR0dHT01JRFJrRlFBQUJBQ0FLQW1PJyArXG4gICAgJ28rWkphczQ1WnhnbmpuS2dPV2xPT0tjZ0I0cFI0RGtKd3ZVbVkyNm10S1pyYnM0cEpRZ05XUVVBQUFJQVFFZ2hoUlJTU0NHRkZHS0knICtcbiAgICAnSVlZWVlvZ2hoeHh5eUNHbm5ISUtLcWlnZ2dveXlDQ0RURExwcEpOT091bW9vNDQ2NmlpMDBFSUxMYlRTU2t3eDFWWmpycjBHWFh4eicgK1xuICAgICd6am5ubkhQT09lZWNjODRKUWtOV0FRQWdBQUFFUWdZWlpCQkNDQ0dGRkZLSUthYVljZ295eUlEUWtGVUFBQ0FBZ0FBQUFBQkhrUlJKJyArXG4gICAgJ3NSVExzUnpOMFNSUDhpeFJFelhSTTBWVFZFMVZWVlZWZFYxWGRtWFhkblhYZG4xWm1JVmJ1SDFadUlWYjJJVmQ5NFZoR0laaEdJWmgnICtcbiAgICAnR0laaCtIM2Y5MzNmOTMwZ05HUVZBQ0FCQUtBak9aYmpLYUlpR3FMaU9hSURoSWFzQWdCa0FBQUVBQ0FKa2lJcGtxTkpwbVpxcm1tYicgK1xuICAgICd0bWlydG0zTHNpekxzZ3lFaHF3Q0FBQUJBQVFBQUFBQUFLQnBtcVpwbXFacG1xWnBtcVpwbXFacG1xWnBtbVpabG1WWmxtVlpsbVZaJyArXG4gICAgJ2xtVlpsbVZabG1WWmxtVlpsbVZabG1WWmxtVlpsbVZabG1WWlFHaklLZ0JBQWdCQXgzRWN4M0VrUlZJa3gzSXNCd2dOV1FVQXlBQUEnICtcbiAgICAnQ0FCQVVpekZjalJIY3pUSGN6ekhjenhIZEVUSmxFek45RXdQQ0ExWkJRQUFBZ0FJQUFBQUFBQkFNUnpGY1J6SjBTUlBVaTNUY2pWWCcgK1xuICAgICdjejNYYzAzWGRWMVhWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZZSFFrRlVBQUFRQUFDR2RacFpxJyArXG4gICAgJ2dBZ3prR0VnTkdRVkFJQUFBQUFZb1FoRERBZ05XUVVBQUFRQUFJaWg1Q0NhMEpyenpUa09tdVdncVJTYjA4R0pWSnNudWFtWW0zUE8nICtcbiAgICAnT2VlY2JNNFo0NXh6emluS21jV2dtZENhYzg1SkRKcWxvSm5RbW5QT2VSS2JCNjJwMHBwenpobm5uQTdHR1dHY2M4NXAwcG9IcWRsWScgK1xuICAgICdtM1BPV2RDYTVxaTVGSnR6em9tVW15ZTF1VlNiYzg0NTU1eHp6am5ubkhQT3FWNmN6c0U1NFp4enpvbmFtMnU1Q1YyY2M4NzVaSnp1JyArXG4gICAgJ3pRbmhuSFBPT2VlY2M4NDU1NXh6emdsQ1ExWUJBRUFBQUFSaDJCakduWUlnZlk0R1loUWhwaUdUSG5TUERwT2dNY2dwcEI2TmprWksnICtcbiAgICAncVlOUVVoa25wWFNDMEpCVkFBQWdBQUNFRUZKSUlZVVVVa2doaFJSU1NDR0dHR0tJSWFlY2Nnb3FxS1NTaWlyS0tMUE1Nc3Nzczh3eScgK1xuICAgICd5NnpEempycnNNTVFRd3d4dE5KS0xEWFZWbU9OdGVhZWM2NDVTR3VsdGRaYUs2V1VVa29wcFNBMFpCVUFBQUlBUUNCa2tFRUdHWVVVJyArXG4gICAgJ1VrZ2hocGh5eWltbm9JSUtDQTFaQlFBQUFnQUlBQUFBOENUUEVSM1JFUjNSRVIzUkVSM1JFUjNQOFJ4UkVpVlJFaVhSTWkxVE16MVYnICtcbiAgICAnVkZWWGRtMVpsM1hidDRWZDJIWGYxMzNmMTQxZkY0WmxXWlpsV1pabFdaWmxXWlpsV1pabENVSkRWZ0VBSUFBQUFFSUlJWVFVVWtnaCcgK1xuICAgICdoWlJpakRISG5JTk9RZ21CMEpCVkFBQWdBSUFBQUFBQVIzRVV4NUVjeVpFa1M3SWtUZElzemZJMFQvTTAwUk5GVVRSTlV4VmQwUlYxJyArXG4gICAgJzB4WmxVelpkMHpWbDAxVmwxWFpsMmJabFc3ZDlXYlo5My9kOTMvZDkzL2Q5My9kOTM5ZDFJRFJrRlFBZ0FRQ2dJem1TSWltU0lqbU8nICtcbiAgICAnNDBpU0JJU0dyQUlBWkFBQUJBQ2dLSTdpT0k0alNaSWtXWkltZVpabmlacXBtWjdwcWFJS2hJYXNBZ0FBQVFBRUFBQUFBQUNnYUlxbicgK1xuICAgICdtSXFuaUlybmlJNG9pWlpwaVpxcXVhSnN5cTdydXE3cnVxN3J1cTdydXE3cnVxN3J1cTdydXE3cnVxN3J1cTdydXE3cnVxN3J1a0JvJyArXG4gICAgJ3lDb0FRQUlBUUVkeUpFZHlKRVZTSkVWeUpBY0lEVmtGQU1nQUFBZ0F3REVjUTFJa3g3SXNUZk0wVC9NMDBSTTkwVE05VlhSRkZ3Z04nICtcbiAgICAnV1FVQUFBSUFDQUFBQUFBQXdKQU1TN0VjemRFa1VWSXQxVkkxMVZJdFZWUTlWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVicgK1xuICAgICdWVlZWVlZWVlZWVlYxVFJOMHpTQjBKQ1ZBQUFaQUFBalFRWVpoQkNLY3BCQ2JqMVlDREhtSkFXaE9RYWh4QmlFcHhBekREa05JblNRJyArXG4gICAgJ1FTYzl1Skk1d3d6ejRGSW9GVVJNZzQwbE40NGdEY0ttWEVubE9BaENRMVlFQUZFQUFJQXh5REhFR0hMT1NjbWdSTTR4Q1oyVXlEa24nICtcbiAgICAncFpQU1NTa3RsaGd6S1NXbUVtUGpuS1BTU2Nta2xCaExpcDJrRW1PSnJRQUFnQUFIQUlBQUM2SFFrQlVCUUJRQUFHSU1VZ29waFpSUycgK1xuICAgICd6aW5ta0ZMS01lVWNVa281cDV4VHpqa0lIWVRLTVFhZGd4QXBwUnhUemluSEhJVE1RZVdjZzlCQktBQUFJTUFCQUNEQVFpZzBaRVVBJyArXG4gICAgJ0VDY0E0SEFrejVNMFN4UWxTeE5GenhSbDF4Tk4xNVUwelRRMVVWUlZ5eE5WMVZSVjJ4Wk5WYllsVFJOTlRmUlVWUk5GVlJWVjA1Wk4nICtcbiAgICAnVmJWdHp6UmwyVlJWM1JaVjFiWmwyeForVjVaMTN6Tk5XUlpWMWRaTlZiVjExNVo5WDladFhaZzB6VFExVVZSVlRSUlYxVlJWMnpaVicgK1xuICAgICcxN1kxVVhSVlVWVmxXVlJWV1habFdmZFZWOVo5U3hSVjFWTk4yUlZWVmJaVjJmVnRWWlo5NFhSVlhWZGwyZmRWV1JaK1c5ZUY0Zlo5JyArXG4gICAgJzRSaFYxZFpOMTlWMVZaWjlZZFpsWWJkMTN5aHBtbWxxb3FpcW1paXFxcW1xdG0ycXJxMWJvdWlxb3FyS3NtZXFycXpLc3ErcnJtenInICtcbiAgICAnbWlpcXJxaXFzaXlxcWl5cnNxejdxaXpydHFpcXVxM0tzckNicnF2cnR1OEx3eXpydW5DcXJxNnJzdXo3cWl6cnVxM3J4bkhydWpCOCcgK1xuICAgICdwaW5McHF2cXVxbTZ1bTdydW5ITXRtMGNvNnJxdmlyTHdyREtzdS9ydWkrMGRTRlJWWFhkbEYzalYyVlo5MjFmZDU1Yjk0V3liVHUvJyArXG4gICAgJ3JmdktjZXU2MHZnNXoyOGN1Ylp0SExOdUc3K3QrOGJ6S3o5aE9JNmxaNXEyYmFxcXJadXFxK3V5Yml2RHJPdENVVlY5WFpWbDN6ZGQnICtcbiAgICAnV1JkdTN6ZU9XOWVOb3FycXVpckx2ckRLc2pIY3htOGN1ekFjWGRzMmpsdlhuYkt0QzMxanlQY0p6MnZieG5IN091UDJkYU92REFuSCcgK1xuICAgICdqd0FBZ0FFSEFJQUFFOHBBb1NFckFvQTRBUUFHSWVjVVV4QXF4U0IwRUZMcUlLUlVNUVloYzA1S3hSeVVVRXBxSVpUVUtzWWdWSTVKJyArXG4gICAgJ3lKeVRFa3BvS1pUU1VnZWhwVkJLYTZHVTFsSnJzYWJVWXUwZ3BCWkthUzJVMGxwcXFjYlVXb3dSWXhBeTU2Umt6a2tKcGJRV1Nta3QnICtcbiAgICAnYzA1SzU2Q2tEa0pLcGFRVVMwb3RWc3hKeWFDajBrRklxYVFTVTBtcHRWQkthNldrRmt0S01iWVVXMjR4MWh4S2FTMmtFbHRKS2NZVScgK1xuICAgICdVMjB0eHBvanhpQmt6a25KbkpNU1Nta3RsTkphNVppVURrSkttWU9TU2txdGxaSlN6SnlUMGtGSXFZT09Ta2twdHBKS1RLR1Uxa3BLJyArXG4gICAgJ3NZVlNXbXd4MXB4U2JEV1UwbHBKS2NhU1Ntd3R4bHBiVExWMUVGb0xwYlFXU21tdHRWWnJhcTNHVUVwckphVVlTMHF4dFJacmJqSG0nICtcbiAgICAnR2twcHJhUVNXMG1weFJaYmppM0dtbE5yTmFiV2FtNHg1aHBiYlQzV21uTktyZGJVVW8wdHhwcGpiYjNWbW52dklLUVdTbWt0bE5KaScgK1xuICAgICdhaTNHMW1LdG9aVFdTaXF4bFpKYWJESG0ybHFNT1pUU1lrbXB4WkpTakMzR21sdHN1YWFXYW13eDVwcFNpN1htMm5Oc05mYlVXcXd0JyArXG4gICAgJ3hwcFRTN1hXV25PUHVmVldBQURBZ0FNQVFJQUpaYURRa0pVQVFCUUFBRUdJVXM1SmFSQnl6RGtxQ1VMTU9TZXBja3hDS1NsVnpFRUknICtcbiAgICAnSmJYT09Ta3B4ZFk1Q0NXbEZrc3FMY1ZXYXlrcHRSWnJMUUFBb01BQkFDREFCazJKeFFFS0RWa0pBRVFCQUNER0lNUVloQVlacFJpRCcgK1xuICAgICcwQmlrRkdNUUlxVVljMDVLcFJSanprbkpHSE1PUWlvWlk4NUJLQ21FVUVvcUtZVVFTa2tscFFJQUFBb2NBQUFDYk5DVVdCeWcwSkFWJyArXG4gICAgJ0FVQVVBQUJnREdJTU1ZWWdkRlF5S2hHRVRFb25xWUVRV2d1dGRkWlNhNlhGekZwcXJiVFlRQWl0aGRZeVN5WEcxRnBtcmNTWVdpc0EnICtcbiAgICAnQU96QUFRRHN3RUlvTkdRbEFKQUhBRUFZb3hSanpqbG5FR0xNT2VnY05BZ3g1aHlFRGlyR25JTU9RZ2dWWTg1QkNDR0V6RGtJSVlRUScgK1xuICAgICdRdVljaEJCQ0NLR0RFRUlJcFpUU1FRZ2hoRkpLNlNDRUVFSXBwWFFRUWdpaGxGSUtBQUFxY0FBQUNMQlJaSE9Da2FCQ1ExWUNBSGtBJyArXG4gICAgJ0FJQXhTamtIb1pSR0tjWWdsSkpTb3hSakVFcEpxWElNUWlrcHhWWTVCNkdVbEZyc0lKVFNXbXcxZGhCS2FTM0dXa05LcmNWWWE2NGgnICtcbiAgICAncGRaaXJEWFgxRnFNdGVhYWEwb3R4bHByemJrQUFOd0ZCd0N3QXh0Rk5pY1lDU28wWkNVQWtBY0FnQ0NrRkdPTU1ZWVVZb294NTV4RCcgK1xuICAgICdDQ25GbUhQT0thWVljODQ1NTVSaWpEbm5uSE9NTWVlY2M4NDV4cGh6empubkhIUE9PZWVjYzQ0NTU1eHp6am5ubkhQT09lZWNjODQ1JyArXG4gICAgJzU1eHp6Z2tBQUNwd0FBQUlzRkZrYzRLUm9FSkRWZ0lBcVFBQUFCRldZb3d4eGhnYkNESEdHR09NTVVZU1lvd3h4aGhqYkRIR0dHT00nICtcbiAgICAnTWNhWVlvd3h4aGhqakRIR0dHT01NY1lZWTR3eHhoaGpqREhHR0dPTU1jWVlZNHd4eGhoampESEdHR09NTWNZWVk0d3h4aGhqakRIRycgK1xuICAgICdHRnRycmJYV1dtdXR0ZFphYTYyMTFscHJyUUJBdndvSEFQOEhHMVpIT0NrYUN5dzBaQ1VBRUE0QUFCakRtSE9PT1FZZGhJWXA2S1NFJyArXG4gICAgJ0RrSUlvVU5LT1NnbGhGQktLU2x6VGtwS3BhU1VXa3FaYzFKU0tpV2xsbExxSUtUVVdrb3R0ZFphQnlXbDFsSnFyYlhXT2dpbHROUmEnICtcbiAgICAnYTYyMTJFRklLYVhXV29zdHhsQktTcTIxMkdLTU5ZWlNVbXF0eGRoaXJER2swbEpzTGNZWVk2eWhsTlphYXpIR0dHc3RLYlhXWW95MScgK1xuICAgICd4bHByU2FtMTFtS0xOZFphQ3dEZ2JuQUFnRWl3Y1lhVnBMUEMwZUJDUTFZQ0FDRUJBQVJDakRubm5ITVFRZ2doVW9veDU2Q0RFRUlJJyArXG4gICAgJ0lVUktNZVljZEJCQ0NDR0VqREhub0lNUVFnZ2hoSkF4NWh4MEVFSUlJWVFRT3VjY2hCQkNDS0dFVWtybkhIUVFRZ2dobEZCQzZTQ0UnICtcbiAgICAnRUVJSW9ZUlNTaWtkaEJCQ0tLR0VVa29wSllRUVFnbWxsRkpLS2FXRUVFSUlvWVFTU2ltbGxCQkNDS1dVVWtvcHBaUVNRZ2dobEZKSycgK1xuICAgICdLYVdVVWtJSW9aUlFTaW1sbEZKS0NDR0VVa29wcFpSU1Nna2hoRkJLS2FXVVVrb3BJWVFTU2ltbGxGSktLYVVBQUlBREJ3Q0FBQ1BvJyArXG4gICAgJ0pLUEtJbXcwNGNJRFVHaklTZ0NBREFBQWNkaHE2eW5XeUNERm5JU1dTNFNRY2hCaUxoRlNpamxIc1dWSUdjVVkxWlF4cFJSVFVtdm8nICtcbiAgICAnbkdLTVVVK2RZMG94dzZ5VVZrb29rWUxTY3F5MWRzd0JBQUFnQ0FBd0VDRXpnVUFCRkJqSUFJQURoQVFwQUtDd3dOQXhYQVFFNUJJeScgK1xuICAgICdDZ3dLeDRSejBta0RBQkNFeUF5UmlGZ01FaE9xZ2FKaU9nQllYR0RJQjRBTWpZMjBpd3ZvTXNBRlhkeDFJSVFnQkNHSXhRRVVrSUNEJyArXG4gICAgJ0UyNTQ0ZzFQdU1FSk9rV2xEZ0lBQUFBQTRBQUFIZ0FBa2cwZ0lpS2FPWTRPancrUUVKRVJraEtURTVRQUFBQUFBTEFCZ0E4QWdDUUYnICtcbiAgICAnaUlpSVpvNmp3K01ESkVSa2hLVEU1QVFsQUFBQUFBQUFBQUFBQ0FnSUFBQUFBQUFFQUFBQUNBaFBaMmRUQUFRWU93QUFBQUFBQU9HcCcgK1xuICAgICdia29DQUFBQW1jNzREUmd5TmpNNjlUQXpPVGs3NGRuTHViZXdzYmFnbVppTnA0ZDBLYnNFeFNZL0kzWFVUd0pna2VaZG4xSFk0em9qJyArXG4gICAgJzMzL3E5REZ0djNVaTEvam14N2xDVXRQdDE4L3NZZjlNa2dBc0FHUkJkM2dNR1A0c1UrcUNQWUJ5OVZyQTNZcUpvc1czVzIvZWYxaU8nICtcbiAgICAnL3UzY2c4WkcvNTdqVStwUG1iR0VKVWdrZm5hSTM5RGJQcXhkZFpwaGJNUm1DYzVyS2xrVU1reXg4aUlvdWc1ZEp2MU9ZSDlhNTljKycgK1xuICAgICczR2V2cWM3WjJYRmREakwvcUh6dFJmaldFV3hKL2FpR2V6am9odTlIc0NaZFFCS2JpSDBWdFUvM204NWxERzJULyt4a1pjWW5YK0UrJyArXG4gICAgJ2FxenYveFRnT29URkcreDdTTnFRNE4rb0FBQlN4dVZYdzc3SmQ1Ym1tVG11SmFrWDc1MDlISDBrR1lLdkFSUHB3Zk9TQVB5U1BBYzInICtcbiAgICAnRWtuZUR3QjJId0FBSmxRRFlLNTU4Nk43OUdKQ2p4NCtwNmFEVWQyN1hTdlJ5WExKa0lDNVlaMWpMdjVscE9oWlR6MHMrRG1uRjFkaScgK1xuICAgICdwdHJuTTZVRGdJVzExWGg4Y0hUZDAvU21iZ09BZHhjeVd3TUFBR0lyWjNmTlNmWmJ6S2lZcks0K3RQcXRuTVZMT2VXT0cya1Z2VVkrJyArXG4gICAgJ3AyUEovaGtDbDVhRlJPNFRMR1lQWmNJVTN2WU0xaG9oUzRqSEZsbnlXLzJUNUo3a0dzU2hYV1Q4TjA1ViszQy9HUHFKMVFkV2lzR1AnICtcbiAgICAneEV6SHFYSVNCUElpbldEVXQ3SWVKdi9mNU90ekJ4cFR6WlpRK0NZRWhIWGZxRzRhQUJRbGk3MkdKaE40b0p2K2hYY0FwQUpTRXJBVycgK1xuICAgICc4RzJyYUFYNE5VY0FCblZ0NzdDelpBQitMc0hjVmUrUTRoK1FCMXdoL1pySlRQeFNCZEk4bWdUZUFkVHNRT29GVUVuZzlCSGNWUGh4JyArXG4gICAgJ1NSUllrS1daSlhPRllQNlY0QUVyaXBKb0VqWGdBMndKUlpIU0V4bUpEbThGMEE2Z0VYc2c1YTRac0FMSXRyTUI3K2ZoN1VLTHZZV1MnICtcbiAgICAnZHRzRHdGZjFtell6UzFGODJOMWgyT3l0MmU3NkIxUWRTMFNBc1FpZ0xQTU9nSlM5SlJDN2hGWEE2a1VzTEZOS0Q1Y0E1Y1RSdmdTcScgK1xuICAgICdQYzNGbDk5eFczUVRpL01IUjhERW02V252YVZRQVR3UnFSS2p5d1E5QnJyaHVnUjJBS1RzUFFlUWNrckFPZ0RPaGJURVN5clhRNTBDJyArXG4gICAgJ2tOcFhkdFdqVzdXMi8zVWplWDNVOTVnSWRhbGZSQW9BbXFVRWl3cDUzaENkY0N3bGc0N2ZjYmZ6bG1RTUFnYUJraDdjK2ZjRGdGK2knICtcbiAgICAnZndEWGZ6ZWdMUGNMWUpzQUFKUUFyVFhqbmgvdVhHeTN2MUhrM3BWNi8zdDVydVc4MWY2cHJmYk0yUTNXTlZ5OThCd1V0YkN3aEZoQScgK1xuICAgICdXdVBldjZPZS80WmFGUVVjZ0tyVnM0ZGVmemgxVEFEQTFERWg1YjNWbERhRUN3NWIrYlBma0tvczN0SUF1ZTN2SlpPaWgzZ2EzbDZPJyArXG4gICAgJzNQU2ZJa3JMdjBQQVM4NlBQZEw3ZzhvYzJLdGVORktLektSZWhPdjJnSm9GTEJQWG1hWHZQQlFJTGdKb24wYmJXQnN6cllaWVl3RTcnICtcbiAgICAnamwyait2VGRVN1ZwazIxTGlVMFFhalBreXdBQUhxYlVDMC9Zc1lPZGI0ZTZCT3A3RTBjQ2kwNEFvL1RnRDhaVkFNaWQ2aC9BOEllQicgK1xuICAgICdOa3A2L3hzQUFDWkVMRVlJayt5dkk2UXoxTk42bElmdEIvNklNV2pXSk5PcVBUTWVkQW15YWo2RXMwUUJrbEpwaVNXV0huUTJDb1liJyArXG4gICAgJ0dXQW10KzBnTFFCRktDQm5wMlFVVVFaLzF0aHRaREJKVXBGV1k4MnozNG9jb3JCNjJvWDdxQjV5MG9QQXYvZm94SDI1d1ZtZ0lIZjInICtcbiAgICAneEZPcjhsZVpjQnExS3gzWnZDcTlCZ2E2MzlBeHVIdVBOTC83MVlDRjRFeXdKcHFIRkFYNlhGMHNqVmJ1QU5udnZkTGNydWZZd09NLycgK1xuICAgICdpRGE2aUE0NjhBWUFBQjZtTkJNWGNnVEQ4SFNScUo0dnc4Q2pBbENFUEFDQVNsWC9BUHdQT0pLbDl4UUFBQVBtbmV2MmVXcDMzWGd5JyArXG4gICAgJ3czRHZmejZteUdrM295UDhZVEtzQ092ekFnQUxRaTBvMWM2TnpzMk8yUGcyaDRBQ0lKQWdBR1AwYU5uNXgwQkRnVmZIN3UyVHR5ZkQnICtcbiAgICAnY1JJdVlBeVFoQkYvbHZTUkF0dGdBNlRQYldaQTlnYVVyWldBVUVBQStEeDQ3UTMvcjg3SHhVVXFabUIwQm1VdU1sb2pGakh0MWdEdScgK1xuICAgICdubnZ1WDhNSW1zalNxNVdrelN6R1M2Mk9FSWxPdWZXV2V6eFdwdjZGQmdEZ0pWbHRmWEZZdE5BQW5xVTB4UW9EMFlMaVhvNWNGNVFWJyArXG4gICAgJzRDblkxdEJMQWtaQ09BQkFoYmsvQU0rL0F3U0NDZGxXQUFBTWNGalM3b3diOEdWRHp2ZURpWnZ6bmJ0MnRGNGJMNW9kTjFZS2w4OFQnICtcbiAgICAnQUVBQkNadnVmcTlZQ1RCdE13VkFRVUVBd0d0Tmx0elNhSHZBRFlDM1R4TFZqcWlSQStPWkFNaHpjcUVnUmNBT3dvQ2d2ZFR4c1RITCcgK1xuICAgICdRRUY2K29PYjIrUEFJOGNpUFFjWGc3cE9ZK0xqeFFTdjJmam1GdWozNGdHd3ozMTAvYkdLNnozeGdUODg3ZW9tV1VMRWFEZDA0d0hlJyArXG4gICAgJ3RZeGRqY2dWMlN4dlN3bjBWb1pYSlJxa1JDNUFTUS9tdVZvQVVzWDdBZ0FRTUJOYVZ3QUFsQUJSeFQvMVBtZnFMcVNSTkRiaFhiMDcnICtcbiAgICAnYmVycEIzYjk0anB1V0VaakJDRDJPY2RYRnBDS0VnQ0RmY0ZQTXc4QUFBRFV3VDRsblVtNTBsbXdycE1NaFBRSUtqNnUwRThmcjJ2RycgK1xuICAgICdCbmdNTmRJbHJac2lnamFobGp1ZDZBRlZnK3R6WHdVblhMM1RKTHBhamFXS0E0VkFBQUFNaUZmcUpnS0FaMDhYcnRTM2R4dFFOWWNwJyArXG4gICAgJ1B2WUVHOENsdnJRUkpnQmVwaHduTldKanRHcW1wNlZFUFN2QmU3RUJpVTNxZ0piUUF3RDRMZThMQU1ETWhIYk5BQUFsZ0srdEZzNU8nICtcbiAgICAnK1l5SmM5eUNuSmEzcnhMUHVsR254d3NYVjlGc2syazRQaXNDQUhDOEZrd2JHRTlnSlFBQW9Nbnlrc2owQ2RGTVpMTGdvejhNK0Z4eicgK1xuICAgICdpd1lCZ0l4K3pIaUNCQUtBbEJLTnBGMXNPOUpwVmN5RWk5YXIxNVlsSGdydXQ1ZlBKbmtkSjZ2RXdaUHlBSFFCSUVEVXJsTWNCQUFkJyArXG4gICAgJzJLQVMwUXErSndSc0U0QUpadE1uQUQ2R25PWXdZbE9JWnZ0elVOZGpyZUI3ZmlNa1dJMENtQkI2QUlBS2MzOEE5b3NFRmxUU0dFQ0InICtcbiAgICAnK2NiZVJEQzBhUnBMSHFOUHBsY0svNzZMeG4ycnBtcXlYc1lKV1JpL0ZRQUFBS0JRazlNQ0FPaWJyUUJRQURDRHNxcG9vUHV0ZCswNScgK1xuICAgICdDZTlnNmlFZGlZWGdWbVFBSTQrNHdza0VCRWlCbG9OUTZLaTAvS1RRMFFqV2ZqeHppK0FldVhLb01qRVZmUU9aenIweTk0MXFMZ00yJyArXG4gICAgJ0FFeHZiWk9xY3haNko2a3Jscmo0eTJqOUFkZ0tEeDZHbkpzVkxoYmM0MnVxNTg0K291U2ROQnBvQ2lDVkhyeitXelVBL0REdEQ4QVQnICtcbiAgICAnZ0EzaDBsTUNBQXpjRnYrUytmU1NOa2VZV2xUcGIzNG1mMlJmbXFxSmVNZWtsaEhBZnU3Vm9BRUFDZ0FBcEtSa3RMK0trUURXTXdZQycgK1xuICAgICdVQUFBQUhDS3NwODB4aHA5MVVqcVFCdzN4NDVjZXRxa2pRRXl1M0c5QjZOK1I2NTBVcThPVmlnN3dPbTZXdW4wZWE0bEtEUG9hYkpzJyArXG4gICAgJzZhTHFnYmhQenB2NEtSNGlPRGlsdzg4WnBZN3ExSU9NY2JBU0FPQVZ0bWNDbm9iY3JrRzRLR1M3L1puc2tWV1JORjlKMFJVSEtPbkInICtcbiAgICAneXk5V0E4RHY2TDRBQUFSTUNRVUE0R3JpdGZWTTJsY1pmSDNRM1Qvdlo0N0oyWUhoY21CYXpqZmR5dVYyNWdMQXpyYzBjd0FBQUFBWScgK1xuICAgICdDaDZQZHdBQUFHeVdqRlc0eVNjamFXYTJtR2NvZkh4V3hld0tBTGdsV0JwTFV2d3drK1VPaDVlTkd5VU9zMS9FRitwWnIrdWQ1T3pvJyArXG4gICAgJ0d3WWRBQUJnMnA1MkxpU2dBWS9aVmxPbWlsRWdIbjZHM09jd1lqekk3dk9qMXQ2eHN4NFMzbEJZOTZFVVFCRjZBSUJBbVBZSDRQb0cnICtcbiAgICAnWUNvSkFBRFdlK09aSlppNy94NzYveUg3THpmOU01WHpSS25GUG12ZU1zaWxRSHdWQUFBQUFLQjNMUUQ4UENJQUFBRGdhMFF1akJMeScgK1xuICAgICd3emVKNGE2Wi9FUlZCQVVsQUVEcXZvTTdCUUJBdUFndXpGcUlMdG1qSDNLZDR3ZktvYm5PaEEzejg1cVdvUlBtOWh3b09Ib0RBQWxDJyArXG4gICAgJ2J3REFBNTZGSEF1WGZsSG8zZmUydHRHOVhVRGVBOVltWUNCUTBvUHIvMVFDOEl2dUN3QUFBcGJVQVFDSzIyTW1FM083OFZBYkhRVDknICtcbiAgICAnUElQTm9UOXpOYzNsMk9lN1RBVkxBTkJ1ZlQ4TUFRQUFBR3pUNFBTOEFRQUFvRUxHSGIydWFDd3dFdjFFV2hGcmlVa2JBYUFaMjcvZicgK1xuICAgICdWWm5UWlhiV3ozQndXcGpVYU1aS1JqN2RaMEovL2dVZVRkcFZFd0FBWk9Gc054S0FqUVNnQStBQlBvWThKajV5MndqZTgxanNYYy8xJyArXG4gICAgJ1RPUVdURFlaQm1Ba05EaXFWd3VBMk5KOUFRQUFFQktBdDlWcnNmcy8yTjE5TU85MVM5cmQ4RUhUWkhuekM1TVltZlFFQUN5L0ZCY0EnICtcbiAgICAnQUFEQTVjNGdpNHo4UkFOcy9tNkZOWFZvOURWNDZKRzFCQkR1a3Fsdy9WYTVHN1FidUdWU0krMmFaYW9MWEpyZFZqMnpsQzlaNVFFQScgK1xuICAgICdFRnovNVF6Z1Zad0FBQUFBL29YY3h5QzZXZlR1KzA5VmUvYzc2Nko0VlRBR1VGbUE1MStWQU5LaS9RUG9Qd1lnWUFrQTcxNU9INFMwJyArXG4gICAgJ3M1S0RIdmo5OU1NcThUUEZjM3JvS1puR09vVDFibUloVmdjN1hBTUJBQUFBQU1BVzFWYlF3M2dhcHpPcEpkK0tkMmZjNGlTTzYyZkonICtcbiAgICAndjkrbW92dWkxd1VOUEFqMDU5TjNPVnh6azRnVjczUG1FOEZJQTJGNW1ScTM3RXZjNzZ2TFhmRjRyRDVVSkpBdzQ2aFc2TFpDYjVzTicgK1xuICAgICdMZHgra3pNQ0FBQitoZnk5NSs5NjVaQ0xQN0IzL1ZsVEhDdkRFS3RRaFRtNEtpQ2dBRUFicmZiV1RQc3NBQUFBWHBlZTF0VnJvellZJyArXG4gICAgJ240MXdEMWFlWXRrS2Zzd041L1NYUE8wSkRuaE8vNGxhVW9ydHYvczQxMmZ5YmUvbk9OZG5jb0NIbkJWbGl1MENRR0JXbFBZLzVLd28nICtcbiAgICAnbTJML2tydVBNNlE3b3o0dHZEUXkrYlozSHpPaStnTkhBNERaRWdBPScsXG4pO1xuXG5saWIucmVzb3VyY2UuYWRkKFxuICAnaHRlcm0vaW1hZ2VzL2ljb24tOTYnLFxuICAnaW1hZ2UvcG5nO2Jhc2U2NCcsXG4gICdpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBR0FBQUFCZ0NBWUFBQURpbUhjNEFBQVN0a2xFUVZSNDJ1MWRCWGpydXBMK1J6SUdtaklmJyArXG4gICAgJ3ZBY3U0Mk5tWnViM2xwbVptWm1abVJrdU16UERZYVl5SkcwU2E5YjJwMnoxZVF0cDdiemVmcHYvbktua2tTdzdHZzFJc2hOc0R0cG8nICtcbiAgICAnbzQwMjJtaWpEV3AvdGxUZ3picEpTcVl2TW9GVEM5dmpSRDVKTGI5UllhUmtwazIyU1MyOFA4cGFjQWFQZFo0MUtZTUNJODlZQjZ3TicgK1xuICAgICczSnpRSk0zVUlHcXVyZlRsS1FUQVp0cUVOaWQ1U2xOZFU4MDRWbWJiV1F0QTZITWtBQWRBRHNCZUFKN214d0loSWhGU1hKOWlSUHc0JyArXG4gICAgJ0pZREVjcW1HV0VwMUhoQ0k4Z0F0cFhGN3NjQjFaUkg5RTNIT2JBTkNOeTFBb0dUZWdORG5DZEU0MXRmUURIMnQrQ0lOUUVwSjlYcDknICtcbiAgICAnN29VRGgzK25YSzQ4RFlBTUlXUW1BTklrTlRuNnZQNjllM2QvemN0ZmV1MG5YTmV4bVZuM0YwZ0RBTXhNbEJvSHVodDBxbnNFRWVrQycgK1xuICAgICc0MlNkR0htTnhnVmpnazRiUE4wNFl1aThiaGM1MzRjUUJIMzVSS3JQTjlzR2RMbkIxL1d1ditIVzRmKzYvdFp2QkhBYUFKdm1LcjBBJyArXG4gICAgJ2pKR3Z5UU13OHBMcnJ2cWVUMzc4QXg4VXdyS2Vldm9GZ0VoZmpjR0dPMkpPK2l1VHQxU1c1REh6eXJhREV4eVRsV3dIakNRL0NBSmMnICtcbiAgICAnZWNVK1hIbjV4V0RtVkNHUUZBS2xqc0xieDhZbnZ2M0JoeDcvRVFDenVyaW1VMDRqQURMc3ZLM3I3My83VzEvL2cxLzZoVSsrdVZxdCcgK1xuICAgICcwWC9kY0JjS3hSSXN5OUppMzREUG93MmV0NkZ6Z2NYRktrNmZPWTgzdnU0VkVGS2tEaVlIQjNyb1N6NzNzYytPajA4ZU9IemsrQjlvJyArXG4gICAgJ015UUFCR2swZ0NJeU90OXhIUHZhRDMvd25ULzVWVi8rbWV1bXBtYndELzk4QTBxZHZWRUJOaHZNRENKYVZYdE0wMUd0VmxFcytMQnQnICtcbiAgICAnQzFuZ3pXOTh0WC9tN0xsdi9lbWYrODNIYXJYNnZicmZHRUNRUmdCbWxMUDlJeDk2MTQ5OSt6ZC81WFZqNDVQNDA3LzhGeFE3dWlHbCcgK1xuICAgICdRSzFXdzFaQ3ZSNmdYcTNBc2dROHp3WXpVa01JZ1hlKy9RMURkOXg1LzZkdXYvUCtSN1FqcHJRYUlIUWQvOG9yTHZuQ0p6LzIvcGZtJyArXG4gICAgJ2NqNys2cmYrREs1WGdPdTZzVDNkUXRCYXdxalc2bGhZWElSbFNUQWpFL1QzOWVMU1MvWmVFd3FnRThDaVlVVjR2UUlnVFVMVHlGdmUnICtcbiAgICAnOU9yM1dKWk4vM245SFRoM2ZnckZqaEptWm1hd0ZhR1V3a0psRWZmYzl4aDgzd01ZcWNGZzdOb3hpbncrbDlPQmlraXJBYWJ6N2VqdScgK1xuICAgICc2c3hKS1RFN1c0Ym41K0Q3UHJZbXRJL2dBRkphc0N3YjRJemFCTUh6WEU4TGdCSkM0STFHUVJLQWE0WG82dXBFc1ppSDUzbklSWUxlJyArXG4gICAgJ29sRE1DSUlxK25xNzBkRlJBR2NrZ0ZLcEFEK1VnQmFBZ2ZSUmtHdmJsaXdVY29oOEFCSEZZU2ZXTW5CcnhPekwxMlB3S3VmelN2VjUnICtcbiAgICAnNVRwbWk1YTBJQVNCUUNnV2N1anM3QUJuNUFRaWMrYjVyaE5sQVZBbVRsaVRFd25BOTkwd0l4RUVkVVFZbnhqSGlkTW5BVUljQllBQicgK1xuICAgICdScU5EZEM3Qk04dDBWdGZUbkdSZDhGS2RSSWpKY1ZsQ3NBYlBQQTVVQUs0clhMSmpQN2FOYmtPOVhvUHJPckVRV0hFbTY5S3VhMGNhJyArXG4gICAgJ1lFc3B2Q0JRNXRvU3A5RUFTQ2t0MjdaRjFQbEN4Qk9aT1BvNWZlWTBYcGc4akhlLzdWM1lOamhxakRSYWMzbU1WbDFPbzQwdnRSRXQnICtcbiAgICAnVysyRll3ZHcvUzAzWUhKNkVrT0RRMWhjWElRVWNhZUJsVUlXc0N3WitRRExkWnhjdWJLQXRCcGdObXpabGlVYTZ5TE1LaVJHb0JSMicgK1xuICAgICc3OXlONjY2NkZsSllBQmd2UmhBSW5jVVNIbi9pQ2RRckFaampTQWlLRlFRUlZFaFpJUkpBU0pFQUNJQ21sQUtRVXRxaEJFVGp3NWlqJyArXG4gICAgJ3VGcXI0b1dqQndIbUY3L2pWVUhjNmFSTlh4QW9aQTNQZFlYcnV2bGxkSmZUYUlBVGFRQTRLVS9Dek53TURwODRET1lYZitoWlhpaWonICtcbiAgICAnaEp6K0RLMFFBRWQrUllUT09BY2dNdzBnMjRvc2tOWUFJb0NYeERwYm5zT3hNOGZCNXFhY3dLWkQrM1dRY1MrVnhRcllZWE5WTkdNaCcgK1xuICAgICdJMW9kaUlSUVNIYjhCbWJDcGdaWWptVkxZaTBBTm14UU5LcE9qNTBGRk9CM1duRHpFcE9uRmtHYnVPWFBpbUc1QXAwakxxWk9MaUtvJyArXG4gICAgJ015SXNWaGZCOWxMRXBGU1ErUzI2amgyRm8vbjBZYWdSQ1VsTFJocEFBSU1JeVdsOXZCaW5Ba2Jmb0lQWGYrMHducmx4QXMvZFBJbksnICtcbiAgICAnVkIxQ1VPc0ZrZGhENk5ucDQ5b1A5OEV2V2Zqdm56cUdhazBoVmx3d0ZKc2FvQURLOXZxMlkwZU9PS1VHSkxUQWpqUWdGZ0JBeS9nVCcgK1xuICAgICd2YkdJeVhDMG5YNjZqSmQrWWdDN1gxbkNvMzkvQWNjZm1VVlFVMUY1eTBkOXJzdkdKVy90eHVYdjdvR3FNeDcrMi9Pb1Z4V0l6RTVTJyArXG4gICAgJ09rZmFCQkd5aEdQSGM0RzhZWWpUK3dETERnVWdKYlFQV0RHdUwwL1ZjZWZ2bk1MUkIyZHczVWY3OGRadjM0NUQ5MHpqc1grK2dQR2onICtcbiAgICAnQzdwZUM4eU5JN0RqcFNWY0U0NzZybEVQQisrYXdtUC9kQ0VhRU10cWJBUDFGcXpraG4wVmFVQWVnTXpBQkprYUlNRzhlcE5FaUUzUicgK1xuICAgICcwZnVuY2U3NU1pNE5SK01WNyszQjZOVUZQUG52WTNqdXBzbElTSmtLb1c5UERsZC9zQSs3WHQ2QjhTTVYzUGp6eDNEaTBUa0VOUWFKJyArXG4gICAgJzVBMXFNOFZSbGpLUGdwZzU4cGNOSHlDejBBRFNUbmhORFRCQmdsQ1pydVBodnorUFk0L000SnF3ZzY3NzJBQjJ2cXdEZC96bUtZd2QnICtcbiAgICAnV1FBSnBNYWxiK3ZHU3o4MUFBNkFoLzc2SEo2OUtmSTd0ZWo2SzdSUFVLd2FXUVQxRm1pQWxKRUp5a1haWmg1Y0UwMkZvYUVKa3BZRScgK1xuICAgICd3R3NLd05RR0FuRGhRQVVQLzkxNVRKNVl3UENsZVpTRzNXd1d2d2dZdnJ5QVlyOFRtNXduLzJNYzVjbTQ4MWM5UnpYV29iUVB5QnBTJyArXG4gICAgJ2lrZ0RHZ0pBVnZNQVJ6WTBBQVJ3YzdZNUNrbjN2SzRUVjcrL0Q1WW5jTitmbnNXcEorY2dzbkRJQ25qMG44NURTT0NTVUJPNlJsMDgnICtcbiAgICAnOGc4WGNPYlorVmdqU0t3ZUtSRzF4Z2NJRVFuQTlRRTQ2YU1nd3dsSEFtQnVPRkZlcGVNUmQ4ckkxY1U0RkJ6WW44ZXhoMmJ3NkQ5ZScgK1xuICAgICd3TmloQ2pnclIwd0kyMXZBemI5eUlyVC9wZmhhNy95K25Yais1Z2s4RVdyRHpKbEYvV3hRVWdNVXdFdFJFR1cvNVJscGdKZGFBQnEwJyArXG4gICAgJ3BBR2ljWUZWRmFCenhNR1Y3K3ZGdnRkM1lmcHNGYmYrNm9rNEtxb3Z4cUZvcGgrWUJCQXNNZzdjUG9uVFQ4M2pzbmQyNDdKMzlJUVInICtcbiAgICAnVVVjY2VSMjhjeHJWY3JCVVgyc0FhMU5hcjdkQ0F3aGV2Q2tETjdVQURCOWdTeUVCYUJWWVllVDM3UFR3OXUvYUFiY2c4UGkvWE1BeicgK1xuICAgICcxMDlnZnFMaEZBa3RnWDQ2TGJyT2czOTVEc2NlbUFuRDBYNjgrc3VHUSszTDRZN2ZPaFZIUkEwMG5EQlJhM3dBRUd1QUE4RGJxQUJJJyArXG4gICAgJ2t5RUEyeEZTckJISE0yeGY0T3p6ODJISU9iNWtiZ1NoMVREdjY5d0xaZHowUzhkeFVUZ1JITHdrRDJIUmtnQ0lkQmk2TkJQbVZwZ2cnICtcbiAgICAnTDdrckJrcm5BNnhJQTBRamZsNHg5Qnc3WEluRHpIbzFoYmxKYlpZb05rdlAzenFGdy9mUElLZ3FHTkM3YU5vRXRVUURFSmtnMjNFYycgK1xuICAgICd2MXF0cmhrRmlXWWVUWXpDVUNFRWVJMTVRRFRTZ2pwbk1lclRteVVCMUNzS3JHQUN5dkFCUWIxVkFuQXQxM1Y4TkFIUnhHcW90RU1JJyArXG4gICAgJ1FVYkpGZ0d0TWhOdXFRYTRVaTlIYkVnREtGa25pb0tJaEM0a2JHVXdGQmhzT0dITy9BcWhDeEFoNWRPc0JaRkJNb3FDR2hwQVJKdjcnICtcbiAgICAnaWh1bDM1b0V0ODRFNlUwWkN2MUFQcDBUMXRBQ3NJaEVwcXVaUWhKc1QyQzlVQUdqdHFBMnZEblB6T0QvTlVFcXltY09KOTRUY1BKWicgK1xuICAgICd6WVNGSFlLSWpIbEEraVhrL2t2eWVPMVhERU5ZdEs2SjE2a241M0gzNzUrT0JiRnVrQmtGdFdvZXdIQWRKMXFRS3dBUVdjeUV0UWFRJyArXG4gICAgJzRRUFNtazZLWjZnWERsVkFjbjB4OXZUcHhUU2pkaGtCY09ZbVNPK0tOVFpsS0swR1dIWW9BU0prWm9KSUFCUEhGbkRiYjV6RUZ4dHMnICtcbiAgICAnaHFFdE1rRzJyZmNFdEFac0pBb2ltQnBnR1JxZzA2MktWbXNBbUJIMlYyTmZXS1oxd294WUF5SUJ3RkFCWG1hK25FMzB3eXRWNHJVLycgK1xuICAgICdPSzl4TFdhR1VtcEpBSEUrYXdFRFVzckdub0NFUnNvb3lKWUFMZlBhT0VITkJ5Qmw3Qkd3S1FzeThrWUxVWjFrT1RYeVpwcmdVWUpIJyArXG4gICAgJ1NCenJjdExIRFo2aHVmbENMdDYxcXRXRFdBTWF3c2dPV2dDZTUrditKWU40dlQ2QXRBYklwU0NJR3VFY1JvYUc4VHJYUmN3ekNlWjcnICtcbiAgICAndTJnY200UUlabjBRRXVkQzV3R1lkWXhVdDJQeWpSU0F5V3NjNm12VzZoVzBDbnBYekFkZ1E2TlpBZEJ5SnNnS0JRQVFHQ3Arb1FGUScgK1xuICAgICc4ZVBkaFVJQnhXSnhYZnJKWUtRSE5SVU1NSzlrdXdoemMzTzRlTytlZUxRcXBiTGZGZk1hQWdBbmhkRGNjclNwQVpZdEFVQXB4dWpJJyArXG4gICAgJ0VONzI1bGZnMy8vN2J2VDE5Y095TEpoZzQ0L1pDVG8xeTQweUk3OXFtVDQvNXVuMmpUeDArWEx0bUFPQWxVSlhWeDZ2ZTgzTGRGa3InICtcbiAgICAnZHNXTVRaa1VUcGlrakZ5QUpVeEhGcjZvRGM5MThjRERUNkt5TUI4eHpWRnBtQnBBR0daSGlDZ1ZaZ29ScGhTbFFrQ1FUdlh4RWhGaycgK1xuICAgICdsTW9sWG55c2VZMjhOTXRsSWpYYUN6c0hPN2FQb0ZESVE2bldDTUR6WFMyQWRKdnliTWw0SGlhU0x5Szg5UzJ2eFJ0ZS93clU2dlhHJyArXG4gICAgJ0lGcnpPeGRXVFpjYU1OdENncTE1YTl2TnRXeVRNalVuY3dFZ3VTdTJJU2VzTzN2cDNZRGtFMlpTeXBpeVFNTzBKTzMzMWdURnJ5b0onICtcbiAgICAnSVh5bFZMckZPQ3RFcEFIbWFHNWpiUTNRYjhyNDVYS0ZOMnFDT0NKcFNVc3hpL241U2xPUDhyWEIwV3BvVWdDOEhnR3dRWXFJN0FNSCcgK1xuICAgICdqMUc5emsyRWEyMHdnSTVpUGhxczhkTWs2LzI2R3JPeWlxaGFyYzE2bmxmZnZuM0VhV3RBYy9CY0J3OCsvT2pjK1Bqa0thTXZ1V2tOJyArXG4gICAgJ01FK1luWjE3K3JubkR4d2VIT2k5aUNNK2d6YkxPWExyRzhwaXU0NkpJTzUvNE5IRDlYcHdiRVBmRXFqSjAxUjBYZWNEWWN6OGx2aEYnICtcbiAgICAnTVNFa3dKSUJhVTc2QVpBK1NzU1Q1b0hPbWlkcXZzSFFpZVlrNnlhL3VjeXNUL3BQb242eUx1bS81dFhONHVWNDVvY0FLSEVlV0ZkUScgK1xuICAgICdZY3BLS2I0d05uSC94TVRVandHWUFyQm9mTEhmdWhmamVPK2VYYnUrL21zKzk0Nkp5V2wxNk5BeFdtVjgwQVpHSW1XK00wei9keFdVJyArXG4gICAgJ05idkpOUXphcU5LNHJvMTN2L05OOUMvL2RvUDRnei8rbXhLQVdXTlFiMmhIekwvczBuMVhEZlQzVzNmZTh3UkFWbUx5dENFNTZITTMnICtcbiAgICAnTEwvRStiUnFiK25pRlo5clN2RDBubkh6ZDJZK00zdnM1Q2t3Yy9TOVFRTUFCZ0djMGN2UzlmVThtaWdpMHVVRGV5N2FzZnZRNGVNUScgK1xuICAgICdsb3V1enM3NEFtMHNMNFRaUWhISFRwekc4RkIvcWRSUjNEVTlNL3NVZ0pxbXBoZmpoSmFhOUgxdjkvWnR3LzFQUG4wUXRXb05zN096JyArXG4gICAgJ1dCbHRBVGlPaXhNbnp1Q1MvYnZ0Z1RCd0NRWGc2czVmTkxkVG1ua3VTQUt3dzBXclM3cTZTdDdFNUF4NmVnYldXSHBvdzNFY25Ecy8nICtcbiAgICAnRVg4djZmRHc0SjRYRGh6eEFTd0FFT3ZTQUYyV3UyajNqc3NBUXFWU1E2K1VMVFEvVzMrcFF5L2RZSGF1RWk5U2Joc2QyZ0dncUIyeCcgK1xuICAgICdCRUROK2dDcHkzckNDR2pQNU9RMEZITzBpZEdlRFRleEhSa294dmpFSkhac0d4a0UwQVBnbk81VFljNngxaEtBSUtKdHUzZHRHenAxJyArXG4gICAgJytoeUt4WTVvQjZ3cERXaWJJUmVuVHAzRDZPaFFsNVJ5TUFpQzV3MFRSQ3RwQUNXK3JNOGFHUjdjUHpUWVgzemlxUVB3L2R6bW00Z3QnICtcbiAgICAnWU9hWUdaN240Y1RKczNqVks2N3h3KytsMjM3MjNBVnRVUkxoYUZJREV1R25HNDcrUzMzZm84bXBXWlE2WFV4UFQ2T050ZmVEN2RnUicgK1xuICAgICdqNk5ReU5IUTBNQ09VQUEyQU5tTUJwQWhoR0pvLy9lRnk2bGdGc2puODIzenN3NmNuaHlIVWh3NzRrY2ZlOG96Zk1DS0Frak9BWWIyJyArXG4gICAgJzd0azVjdWJzQlRpdUYzdjM1aDF3Mnh3cFJtZ3hackJqKy9BSWdBNEFZN3Bmc1pZR3lJaTZ1enYzaEhPQXJvY2VmUWJNd05UVVZGc0QnICtcbiAgICAnbWpkRElVbWNEZ2Z2Nk9od0g0Q0lqaWUwZ0pmVkFGM0oyYlZqV3pnQjY1VG5MMHlnczdOcm5ST3d0aFpVcXpXY1BIVU9WMXkydHhpdScgK1xuICAgICdKQS9QemMwL3NwWUpFb2I1eWUvWnMvTmlaa2E1WEVWUHI0ODIxZ2ZQOXhBTjNuQTl5QjRjNk50K2NHNWVMdlBHRENkTlVLTlM3NzY5JyArXG4gICAgJ3UzWkdYMU5mcXdmUitzLy9DL1BEbkg1VFJxK2t4dW44ZkJrZHhRSkdoZ2QySGp4MDFCQkF3Z1FsN0wvSTVmeWQ0UkpFMytUVWROakknICtcbiAgICAnUEtTYzBBSmcvVCtKeE5Obks1VWx5M1Z1dGVySk9wemgzaG10czVEV0tFeHkzL2o2bDJKNGVBQWpJNFBiakc5VUY2WVFyTWFCV1JDdScgK1xuICAgICdmdTRmSFJuMEJ2cDdVU3prVVM0dm1EOWFzK0lQM2NTSFdMNWVYR1RVaXprNnYvSUR1Ym9kTTcrKytxcytFTmJzZzJSeExsRS81cHIxJyArXG4gICAgJ0V3OEgyNWFGbnA2dTJDRnZHeDBlMEpIUUdkTUVKVFdna1RvN2Q0eGUzTmZYZzFLcGlMZTg2VFdnOU9OdGMzZUt1VlgzeWF0ZWk1bTEnICtcbiAgICAnQUlhNnBSVDlRYUNlYjJZcG9yQnp4N1pkMGNoblJrZ0tiYVNMc01MWmNLNi9yemVjVTUzbjVUU0FFa3cvSFBrRnk4NkJwSnRxM0xSQicgK1xuICAgICdJSzZqcTdORGhQT3FQaTBBMCtjdXV4cTZFTWFzNWJHSmFWUVdGV2dUYnJxVlRkRVg5ZjRadm1mQjkvM0lsNWJXMmhObW5aYkRCNG9tJyArXG4gICAgJ0xwdy9oN241UllDYSszRTBUb1k0SnA5WGlHU1lrL1dNdkhtbHhERW43eU41ZmZONG1UenJNODA4RyswbGVKcVZiRzgxbmpiZmpGSkgnICtcbiAgICAnSHI0bm80bFozZmpSVDA2R29XeFErZUZIbjdyVHovMVR2NVFTckJRcFpyQW1mVk1hUUp5Tk9YSE9QRVNqenRKZnM1NHV4RkpXbDVxMScgK1xuICAgICd6WXVaUnpEK1J6QVBFdWZvSkZsbjJUeU12OGF4d1VoZUpQR1JWU01GRUhlNFpja3FNeThjT1hMaW41Zjd4VlV5eVB5cHdoS0FIcDEzJyArXG4gICAgJ0lqSkNWVzRpSEdBejMwUTVtbXgzSStkd3l2YldFMzZ4MGNrMUFGVzlHYitnMDZxbVdrTVFWdUxFUUV0dVZsZHlqUi92RkpxeWp4TmInICtcbiAgICAnNittVEE2RFY5NkhNdmt4MGVqMnBBWlp4b0JMNVFKOG9ES0lXM2p4bmZBNXR3ajF4VWhQTWpqZDl3R3BPT0VnSWdVemF4Rkc4Ulo0RicgK1xuICAgICdUZ3hvczlOMWF0YWp0ZCtTMUx5dEEyNnA4TktiUUU3LzArQnRwTmFrTnRwb280MDIydmdmN2xSUHRLQ0UzOW9BQUFBQVNVVk9SSzVDJyArXG4gICAgJ1lJST0nLFxuKTtcblxubGliLnJlc291cmNlLmFkZChcbiAgJ2h0ZXJtL2NvbmNhdC9kYXRlJyxcbiAgJ3RleHQvcGxhaW4nLFxuICAnTW9uLCAyNiBOb3YgMjAxOCAwODo1MDoxMCArMDAwMCcsXG4pO1xuXG5saWIucmVzb3VyY2UuYWRkKCdodGVybS9jaGFuZ2Vsb2cvdmVyc2lvbicsICd0ZXh0L3BsYWluJywgJzIwMTgtMTAtMjQnKTtcblxubGliLnJlc291cmNlLmFkZCgnaHRlcm0vY2hhbmdlbG9nL2RhdGUnLCAndGV4dC9wbGFpbicsICcxLjgyJyk7XG5cbmxpYi5yZXNvdXJjZS5hZGQoXG4gICdodGVybS9naXQvSEVBRCcsXG4gICd0ZXh0L3BsYWluJyxcbiAgJzAzZWUwOTgwNDQ0YTM4YTk3ZWY5NDdiMjI3MmU0NGZkYjNiZGY1ZjUnLFxuKTtcbiIsIi8qKlxuICoga2V5cy5qcyAtIGVtaXQga2V5IHByZXNzZXNcbiAqIENvcHlyaWdodCAoYykgMjAxMC0yMDE1LCBKb3llbnQsIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyAoTUlUIExpY2Vuc2UpXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2hqai9ibGVzc2VkXG4gKi9cbi8vIE9yaWdpbmFsbHkgdGFrZW4gZnJvbSB0aGUgbm9kZS5qcyB0cmVlOlxuLy9cbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG9cbi8vIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlXG4vLyByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Jcbi8vIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HXG4vLyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTXG4vLyBJTiBUSEUgU09GVFdBUkUuXG4vKlxuICBTb21lIHBhdHRlcm5zIHNlZW4gaW4gdGVybWluYWwga2V5IGVzY2FwZSBjb2RlcywgZGVyaXZlZCBmcm9tIGNvbWJvcyBzZWVuXG4gIGF0IGh0dHA6Ly93d3cubWlkbmlnaHQtY29tbWFuZGVyLm9yZy9icm93c2VyL2xpYi90dHkva2V5LmNcblxuICBFU0MgbGV0dGVyXG4gIEVTQyBbIGxldHRlclxuICBFU0MgWyBtb2RpZmllciBsZXR0ZXJcbiAgRVNDIFsgMSA7IG1vZGlmaWVyIGxldHRlclxuICBFU0MgWyBudW0gY2hhclxuICBFU0MgWyBudW0gOyBtb2RpZmllciBjaGFyXG4gIEVTQyBPIGxldHRlclxuICBFU0MgTyBtb2RpZmllciBsZXR0ZXJcbiAgRVNDIE8gMSA7IG1vZGlmaWVyIGxldHRlclxuICBFU0MgTiBsZXR0ZXJcbiAgRVNDIFsgWyBudW0gOyBtb2RpZmllciBjaGFyXG4gIEVTQyBbIFsgMSA7IG1vZGlmaWVyIGxldHRlclxuICBFU0MgRVNDIFsgbnVtIGNoYXJcbiAgRVNDIEVTQyBPIGxldHRlclxuXG4gIC0gY2hhciBpcyB1c3VhbGx5IH4gYnV0ICQgYW5kIF4gYWxzbyBoYXBwZW4gd2l0aCByeHZ0XG4gIC0gbW9kaWZpZXIgaXMgMSArXG4gICAgICAgICAgICAgICAgKHNoaWZ0ICAgICAqIDEpICtcbiAgICAgICAgICAgICAgICAobGVmdF9hbHQgICogMikgK1xuICAgICAgICAgICAgICAgIChjdHJsICAgICAgKiA0KSArXG4gICAgICAgICAgICAgICAgKHJpZ2h0X2FsdCAqIDgpXG4gIC0gdHdvIGxlYWRpbmcgRVNDcyBhcHBhcmVudGx5IG1lYW4gdGhlIHNhbWUgYXMgb25lIGxlYWRpbmcgRVNDXG4qL1xuLy8gUmVnZXhlcyB1c2VkIGZvciBhbnNpIGVzY2FwZSBjb2RlIHNwbGl0dGluZ1xudmFyIG1ldGFLZXlDb2RlUmVBbnl3aGVyZSA9IC8oPzpcXHgxYikoW2AwLTlcXC09fiFAIyQlXiYqXFwoXFwpXytcXFtcXF1cXFxce318Oyc6XCIsLi8vPD4/YS16QS1aXSkvO1xudmFyIG1ldGFLZXlDb2RlUmUgPSBuZXcgUmVnRXhwKCdeJyArIG1ldGFLZXlDb2RlUmVBbnl3aGVyZS5zb3VyY2UgKyAnJCcpO1xudmFyIGZ1bmN0aW9uS2V5Q29kZVJlQW55d2hlcmUgPSBuZXcgUmVnRXhwKCcoPzpcXHgxYispKE98TnxcXFxcW3xcXFxcW1xcXFxbKSg/OicgK1xuICAgIFtcbiAgICAgICAgJyhcXFxcZCspKD86OyhcXFxcZCspKT8oW35eJF0pJyxcbiAgICAgICAgJyg/Ok0oW0AgIyFhYF0pKC4pKC4pKScsXG4gICAgICAgICcoPzoxOyk/KFxcXFxkKyk/KFthLXpBLVpdKScsXG4gICAgXS5qb2luKCd8JykgK1xuICAgICcpJyk7XG52YXIgZnVuY3Rpb25LZXlDb2RlUmUgPSBuZXcgUmVnRXhwKCdeJyArIGZ1bmN0aW9uS2V5Q29kZVJlQW55d2hlcmUuc291cmNlKTtcbnZhciBlc2NhcGVDb2RlUmVBbnl3aGVyZSA9IG5ldyBSZWdFeHAoW1xuICAgIGZ1bmN0aW9uS2V5Q29kZVJlQW55d2hlcmUuc291cmNlLFxuICAgIG1ldGFLZXlDb2RlUmVBbnl3aGVyZS5zb3VyY2UsXG4gICAgL1xceDFiLi8uc291cmNlLFxuXS5qb2luKCd8JykpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvY2Vzc0tleXMocywgY2FsbGJhY2spIHtcbiAgICBpZiAoX2lzTW91c2UocykpIHtcbiAgICAgICAgLy8gVE9ETzogcHJvZHVjZSBtb3VzZSBldmVudHMgdG9vXG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgIHZhciBtYXRjaDtcbiAgICB3aGlsZSAoKG1hdGNoID0gZXNjYXBlQ29kZVJlQW55d2hlcmUuZXhlYyhzKSkpIHtcbiAgICAgICAgYnVmZmVyID0gYnVmZmVyLmNvbmNhdChzLnNsaWNlKDAsIG1hdGNoLmluZGV4KS5zcGxpdCgnJykpO1xuICAgICAgICBidWZmZXIucHVzaChtYXRjaFswXSk7XG4gICAgICAgIHMgPSBzLnNsaWNlKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICB9XG4gICAgYnVmZmVyID0gYnVmZmVyLmNvbmNhdChzLnNwbGl0KCcnKSk7XG4gICAgYnVmZmVyLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgdmFyIGtleSA9IHtcbiAgICAgICAgICAgIHNlcXVlbmNlOiBzLFxuICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgIGN0cmw6IGZhbHNlLFxuICAgICAgICAgICAgbWV0YTogZmFsc2UsXG4gICAgICAgICAgICBzaGlmdDogZmFsc2UsXG4gICAgICAgICAgICBmdWxsTmFtZTogJycsXG4gICAgICAgICAgICBjb2RlOiBudWxsLFxuICAgICAgICAgICAgY2g6IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIHZhciBwYXJ0cztcbiAgICAgICAgaWYgKHMgPT09ICdcXHInKSB7XG4gICAgICAgICAgICAvLyBjYXJyaWFnZSByZXR1cm5cbiAgICAgICAgICAgIGtleS5uYW1lID0gJ3JldHVybic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocyA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIC8vIGVudGVyLCBzaG91bGQgaGF2ZSBiZWVuIGNhbGxlZCBsaW5lZmVlZFxuICAgICAgICAgICAgLy8ga2V5Lm5hbWUgPSBcImVudGVyXCI7XG4gICAgICAgICAgICAvLyBsaW5lZmVlZFxuICAgICAgICAgICAga2V5Lm5hbWUgPSAnbGluZWZlZWQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHMgPT09ICdcXHQnKSB7XG4gICAgICAgICAgICAvLyB0YWJcbiAgICAgICAgICAgIGtleS5uYW1lID0gJ3RhYic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocyA9PT0gJ1xcYicgfHxcbiAgICAgICAgICAgIHMgPT09ICdcXHg3ZicgfHxcbiAgICAgICAgICAgIHMgPT09ICdcXHgxYlxceDdmJyB8fFxuICAgICAgICAgICAgcyA9PT0gJ1xceDFiXFxiJykge1xuICAgICAgICAgICAgLy8gYmFja3NwYWNlIG9yIGN0cmwraFxuICAgICAgICAgICAga2V5Lm5hbWUgPSAnYmFja3NwYWNlJztcbiAgICAgICAgICAgIGtleS5tZXRhID0gcy5jaGFyQXQoMCkgPT09ICdcXHgxYic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocyA9PT0gJ1xceDFiJyB8fCBzID09PSAnXFx4MWJcXHgxYicpIHtcbiAgICAgICAgICAgIC8vIGVzY2FwZSBrZXlcbiAgICAgICAgICAgIGtleS5uYW1lID0gJ2VzY2FwZSc7XG4gICAgICAgICAgICBrZXkubWV0YSA9IHMubGVuZ3RoID09PSAyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHMgPT09ICcgJyB8fCBzID09PSAnXFx4MWIgJykge1xuICAgICAgICAgICAga2V5Lm5hbWUgPSAnc3BhY2UnO1xuICAgICAgICAgICAga2V5Lm1ldGEgPSBzLmxlbmd0aCA9PT0gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzLmxlbmd0aCA9PT0gMSAmJiBzIDw9ICdcXHgxZicpIHtcbiAgICAgICAgICAgIC8vIGN0cmwrbGV0dGVyXG4gICAgICAgICAgICBrZXkubmFtZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUocy5jaGFyQ29kZUF0KDApICsgNjQpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBrZXkuY3RybCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocy5sZW5ndGggPT09IDEgJiYgcyA+PSAnYScgJiYgcyA8PSAneicpIHtcbiAgICAgICAgICAgIC8vIGxvd2VyY2FzZSBsZXR0ZXJcbiAgICAgICAgICAgIGtleS5uYW1lID0gcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzLmxlbmd0aCA9PT0gMSAmJiBzID49ICdBJyAmJiBzIDw9ICdaJykge1xuICAgICAgICAgICAgLy8gc2hpZnQrbGV0dGVyXG4gICAgICAgICAgICBrZXkubmFtZSA9IHMudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGtleS5zaGlmdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHBhcnRzID0gbWV0YUtleUNvZGVSZS5leGVjKHMpKSkge1xuICAgICAgICAgICAgLy8gbWV0YStjaGFyYWN0ZXIga2V5XG4gICAgICAgICAgICBrZXkubmFtZSA9IHBhcnRzWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBrZXkubWV0YSA9IHRydWU7XG4gICAgICAgICAgICBrZXkuc2hpZnQgPSAvXltBLVpdJC8udGVzdChwYXJ0c1sxXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHBhcnRzID0gZnVuY3Rpb25LZXlDb2RlUmUuZXhlYyhzKSkpIHtcbiAgICAgICAgICAgIC8vIGFuc2kgZXNjYXBlIHNlcXVlbmNlXG4gICAgICAgICAgICAvLyByZWFzc2VtYmxlIHRoZSBrZXkgY29kZSBsZWF2aW5nIG91dCBsZWFkaW5nIFxceDFiJ3MsXG4gICAgICAgICAgICAvLyB0aGUgbW9kaWZpZXIga2V5IGJpdGZsYWcgYW5kIGFueSBtZWFuaW5nbGVzcyBcIjE7XCIgc2VxdWVuY2VcbiAgICAgICAgICAgIHZhciBjb2RlID0gKHBhcnRzWzFdIHx8ICcnKSArXG4gICAgICAgICAgICAgICAgKHBhcnRzWzJdIHx8ICcnKSArXG4gICAgICAgICAgICAgICAgKHBhcnRzWzRdIHx8ICcnKSArXG4gICAgICAgICAgICAgICAgKHBhcnRzWzldIHx8ICcnKTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHZhciBtb2RpZmllciA9IChwYXJ0c1szXSB8fCBwYXJ0c1s4XSB8fCAxKSAtIDE7XG4gICAgICAgICAgICAvLyBQYXJzZSB0aGUga2V5IG1vZGlmaWVyXG4gICAgICAgICAgICBrZXkuY3RybCA9ICEhKG1vZGlmaWVyICYgNCk7XG4gICAgICAgICAgICBrZXkubWV0YSA9ICEhKG1vZGlmaWVyICYgMTApO1xuICAgICAgICAgICAga2V5LnNoaWZ0ID0gISEobW9kaWZpZXIgJiAxKTtcbiAgICAgICAgICAgIGtleS5jb2RlID0gY29kZTtcbiAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBrZXkgaXRzZWxmXG4gICAgICAgICAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgICAgICAgICAvKiB4dGVybS9nbm9tZSBFU0MgTyBsZXR0ZXIgKi9cbiAgICAgICAgICAgICAgICBjYXNlICdPUCc6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2YxJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnT1EnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmMic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ09SJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAnZjMnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdPUyc6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2Y0JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLyogeHRlcm0vcnh2dCBFU0MgWyBudW1iZXIgfiAqL1xuICAgICAgICAgICAgICAgIGNhc2UgJ1sxMX4nOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmMSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1sxMn4nOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmMic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1sxM34nOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmMyc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1sxNH4nOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmNCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIC8qIGZyb20gQ3lnd2luIGFuZCB1c2VkIGluIGxpYnV2ICovXG4gICAgICAgICAgICAgICAgY2FzZSAnW1tBJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAnZjEnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdbW0InOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmMic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1tbQyc6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2YzJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnW1tEJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAnZjQnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdbW0UnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmNSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIC8qIGNvbW1vbiAqL1xuICAgICAgICAgICAgICAgIGNhc2UgJ1sxNX4nOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmNSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1sxN34nOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmNic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1sxOH4nOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmNyc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1sxOX4nOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmOCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1syMH4nOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmOSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1syMX4nOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdmMTAnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdbMjN+JzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAnZjExJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnWzI0fic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2YxMic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIC8qIHh0ZXJtIEVTQyBbIGxldHRlciAqL1xuICAgICAgICAgICAgICAgIGNhc2UgJ1tBJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAndXAnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdbQic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2Rvd24nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdbQyc6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnW0QnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnW0UnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdjbGVhcic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1tGJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAnZW5kJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnW0gnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdob21lJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLyogeHRlcm0vZ25vbWUgRVNDIE8gbGV0dGVyICovXG4gICAgICAgICAgICAgICAgY2FzZSAnT0EnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICd1cCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ09CJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAnZG93bic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ09DJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdPRCc6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdPRSc6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2NsZWFyJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnT0YnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdlbmQnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdPSCc6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2hvbWUnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAvKiB4dGVybS9yeHZ0IEVTQyBbIG51bWJlciB+ICovXG4gICAgICAgICAgICAgICAgY2FzZSAnWzF+JzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAnaG9tZSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1syfic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2luc2VydCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1szfic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2RlbGV0ZSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1s0fic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2VuZCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1s1fic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ3BhZ2V1cCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1s2fic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ3BhZ2Vkb3duJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLyogcHV0dHkgKi9cbiAgICAgICAgICAgICAgICBjYXNlICdbWzV+JzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAncGFnZXVwJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnW1s2fic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ3BhZ2Vkb3duJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLyogcnh2dCAqL1xuICAgICAgICAgICAgICAgIGNhc2UgJ1s3fic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2hvbWUnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdbOH4nOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdlbmQnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAvKiByeHZ0IGtleXMgd2l0aCBtb2RpZmllcnMgKi9cbiAgICAgICAgICAgICAgICBjYXNlICdbYSc6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ3VwJztcbiAgICAgICAgICAgICAgICAgICAga2V5LnNoaWZ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnW2InOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdkb3duJztcbiAgICAgICAgICAgICAgICAgICAga2V5LnNoaWZ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnW2MnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgIGtleS5zaGlmdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1tkJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIGtleS5zaGlmdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1tlJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAnY2xlYXInO1xuICAgICAgICAgICAgICAgICAgICBrZXkuc2hpZnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdbMiQnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdpbnNlcnQnO1xuICAgICAgICAgICAgICAgICAgICBrZXkuc2hpZnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdbMyQnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdkZWxldGUnO1xuICAgICAgICAgICAgICAgICAgICBrZXkuc2hpZnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdbNSQnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdwYWdldXAnO1xuICAgICAgICAgICAgICAgICAgICBrZXkuc2hpZnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdbNiQnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdwYWdlZG93bic7XG4gICAgICAgICAgICAgICAgICAgIGtleS5zaGlmdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1s3JCc6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2hvbWUnO1xuICAgICAgICAgICAgICAgICAgICBrZXkuc2hpZnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdbOCQnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdlbmQnO1xuICAgICAgICAgICAgICAgICAgICBrZXkuc2hpZnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdPYSc6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ3VwJztcbiAgICAgICAgICAgICAgICAgICAga2V5LmN0cmwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdPYic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2Rvd24nO1xuICAgICAgICAgICAgICAgICAgICBrZXkuY3RybCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ09jJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICBrZXkuY3RybCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ09kJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIGtleS5jdHJsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnT2UnOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdjbGVhcic7XG4gICAgICAgICAgICAgICAgICAgIGtleS5jdHJsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnWzJeJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAnaW5zZXJ0JztcbiAgICAgICAgICAgICAgICAgICAga2V5LmN0cmwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdbM14nOlxuICAgICAgICAgICAgICAgICAgICBrZXkubmFtZSA9ICdkZWxldGUnO1xuICAgICAgICAgICAgICAgICAgICBrZXkuY3RybCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1s1Xic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ3BhZ2V1cCc7XG4gICAgICAgICAgICAgICAgICAgIGtleS5jdHJsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnWzZeJzpcbiAgICAgICAgICAgICAgICAgICAga2V5Lm5hbWUgPSAncGFnZWRvd24nO1xuICAgICAgICAgICAgICAgICAgICBrZXkuY3RybCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1s3Xic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2hvbWUnO1xuICAgICAgICAgICAgICAgICAgICBrZXkuY3RybCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1s4Xic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ2VuZCc7XG4gICAgICAgICAgICAgICAgICAgIGtleS5jdHJsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLyogbWlzYy4gKi9cbiAgICAgICAgICAgICAgICBjYXNlICdbWic6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gJ3RhYic7XG4gICAgICAgICAgICAgICAgICAgIGtleS5zaGlmdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGtleS5uYW1lID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBrZXkuY2ggPSBzO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmdWxsTmFtZSA9IGtleS5uYW1lIHx8ICcnO1xuICAgICAgICBpZiAoa2V5LnNoaWZ0KSB7XG4gICAgICAgICAgICBmdWxsTmFtZSA9ICdTLScgKyBmdWxsTmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5Lm1ldGEpIHtcbiAgICAgICAgICAgIGZ1bGxOYW1lID0gJ00tJyArIGZ1bGxOYW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXkuY3RybCkge1xuICAgICAgICAgICAgZnVsbE5hbWUgPSAnQy0nICsgZnVsbE5hbWU7XG4gICAgICAgIH1cbiAgICAgICAga2V5LmZ1bGxOYW1lID0gZnVsbE5hbWU7XG4gICAgICAgIGNhbGxiYWNrKGtleSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBfaXNNb3VzZShzKSB7XG4gICAgcmV0dXJuICgvXFx4MWJcXFtNLy50ZXN0KHMpIHx8XG4gICAgICAgIC9cXHgxYlxcW00oW1xceDAwXFx1MDAyMC1cXHVmZmZmXXszfSkvLnRlc3QocykgfHxcbiAgICAgICAgL1xceDFiXFxbKFxcZCs7XFxkKztcXGQrKU0vLnRlc3QocykgfHxcbiAgICAgICAgL1xceDFiXFxbPChcXGQrO1xcZCs7XFxkKykoW21NXSkvLnRlc3QocykgfHxcbiAgICAgICAgL1xceDFiXFxbPChcXGQrO1xcZCs7XFxkKztcXGQrKSZ3Ly50ZXN0KHMpIHx8XG4gICAgICAgIC9cXHgxYlxcWzI0KFswMTM1XSl+XFxbKFxcZCspLChcXGQrKVxcXVxcci8udGVzdChzKSB8fFxuICAgICAgICAvXFx4MWJcXFsoT3xJKS8udGVzdChzKSk7XG59XG4iLCJpbXBvcnQga2V5cyBmcm9tICcuL2tleXMnO1xuY29uc3QgREVGQVVMVF9PUFRJT05TID0ge1xuICAgIGtleVN0cm9rZURlbGF5OiAyMDAsXG4gICAgbGluZ2VyRGVsYXk6IDEwMDAsXG4gICAgZmFkZUR1cmF0aW9uOiAxMDAwLFxuICAgIGJlemVsQ29sb3I6ICcjMDAwJyxcbiAgICB0ZXh0Q29sb3I6ICcjZmZmJyxcbiAgICBwb3NpdGlvbjogJ3RvcC1yaWdodCcsXG59O1xubGV0IF9jb252ZXJzaW9uQ29tbW9uID0ge1xuICAgIHJpZ2h0OiAn4oaSJyxcbiAgICBsZWZ0OiAn4oaQJyxcbiAgICB1cDogJ+KGkScsXG4gICAgZG93bjogJ+KGkycsXG4gICAgc3BhY2U6ICfikKMnLFxuICAgIGVudGVyOiAn4oapJyxcbiAgICByZXR1cm46ICfihqknLFxuICAgIGxpbmVmZWVkOiAnQy1qJyxcbiAgICAvL3NoaWZ0OiBcIuKHp1wiLFxuICAgIHNoaWZ0OiAnUy0nLFxuICAgIGN0cmw6ICdDLScsXG4gICAgdGFiOiAn4oelJyxcbiAgICBlc2NhcGU6ICfijosnLFxuICAgIHBhZ2Vkb3duOiAn4oefJyxcbiAgICBwYWdldXA6ICfih54nLFxuICAgIGhvbWU6ICfihpYnLFxuICAgIGVuZDogJ+KGmCcsXG4gICAgZGVsZXRlOiAn4oymJyxcbiAgICBiYWNrc3BhY2U6ICfijKsnLFxuICAgIG1ldGE6ICdNLScsXG59O1xuY2xhc3MgS2V5c3Ryb2tlVmlzdWFsaXplciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnN0eWxlID0gbnVsbDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gREVGQVVMVF9PUFRJT05TO1xuICAgICAgICB0aGlzLmN1cnJlbnRDaHVuayA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uS2V5ID0gKGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5jdXJyZW50Q2h1bmspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDaHVuayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wb3NpdGlvbi5pbmRleE9mKCd0b3AnKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5pbnNlcnRCZWZvcmUodGhpcy5jdXJyZW50Q2h1bmssIHRoaXMuY29udGFpbmVyLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5jdXJyZW50Q2h1bmspO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtb2RpZmllciA9ICcnO1xuICAgICAgICAgICAgaWYgKGtleS5jdHJsKSB7XG4gICAgICAgICAgICAgICAgbW9kaWZpZXIgKz0gX2NvbnZlcnNpb25Db21tb25bJ2N0cmwnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrZXkubWV0YSkge1xuICAgICAgICAgICAgICAgIG1vZGlmaWVyICs9IF9jb252ZXJzaW9uQ29tbW9uWydtZXRhJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2V5LnNoaWZ0KSB7XG4gICAgICAgICAgICAgICAgbW9kaWZpZXIgKz0gX2NvbnZlcnNpb25Db21tb25bJ3NoaWZ0J107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbmFtZSA9IChrZXkubmFtZSB8fCAnJykucmVwbGFjZSgvXltDTVNdLS8sICcnKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENodW5rLnRleHRDb250ZW50ICs9XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIG1vZGlmaWVyICsgKF9jb252ZXJzaW9uQ29tbW9uW25hbWVdIHx8IG5hbWUgfHwga2V5LmNoKTtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMua2V5U3Ryb2tlVGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLmtleVN0cm9rZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHByZXZpb3VzQ2h1bmspIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NodW5rLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ2h1bmsucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChwcmV2aW91c0NodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMuZmFkZUR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9ucy5saW5nZXJEZWxheSk7XG4gICAgICAgICAgICAgICAgfSkodGhpcy5jdXJyZW50Q2h1bmspO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENodW5rID0gbnVsbDtcbiAgICAgICAgICAgIH0sIG9wdGlvbnMua2V5U3Ryb2tlRGVsYXkpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjbGVhblVwKCkge1xuICAgICAgICBmdW5jdGlvbiByZW1vdmVOb2RlKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlICYmIG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZW1vdmVOb2RlKHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgcmVtb3ZlTm9kZSh0aGlzLnN0eWxlKTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMua2V5U3Ryb2tlVGltZW91dCk7XG4gICAgICAgIHRoaXMuY3VycmVudENodW5rID0gbnVsbDtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSB0aGlzLnN0eWxlID0gbnVsbDtcbiAgICB9XG4gICAgaW5qZWN0Q29tcG9uZW50cygpIHtcbiAgICAgICAgLy8gQWRkIGNvbnRhaW5lclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgICAgIGxldCBub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigneC1zY3JlZW4nKTtcbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9ICdrZXlzdHJva2VzJztcbiAgICAgICAgY29uc3QgcG9zaXRpb25zID0ge1xuICAgICAgICAgICAgJ2JvdHRvbS1sZWZ0JzogJ2JvdHRvbTogMDsnLFxuICAgICAgICAgICAgJ2JvdHRvbS1yaWdodCc6ICdib3R0b206IDA7IGRpcmVjdGlvbjogcnRsOycsXG4gICAgICAgICAgICAndG9wLWxlZnQnOiAndG9wOiAwOycsXG4gICAgICAgICAgICAndG9wLXJpZ2h0JzogJ3RvcDogMDsgZGlyZWN0aW9uOiBydGw7JyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFwb3NpdGlvbnNbdGhpcy5vcHRpb25zLnBvc2l0aW9uXSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBJbnZhbGlkIHBvc2l0aW9uICcke3RoaXMub3B0aW9ucy5wb3NpdGlvbn0nLCB1c2luZyBkZWZhdWx0ICdib3R0b20tbGVmdCcuIFZhbGlkIHBvc2l0aW9uczogYCwgT2JqZWN0LmtleXMocG9zaXRpb25zKSk7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMucG9zaXRpb24gPSAnYm90dG9tLWxlZnQnO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCBjbGFzc2VzXG4gICAgICAgIHRoaXMuc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICB0aGlzLnN0eWxlLmlubmVySFRNTCA9IGBcbiAgICAgIHVsLmtleXN0cm9rZXMge1xuICAgICAgICBwYWRkaW5nOiAwIDEwcHg7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgICR7cG9zaXRpb25zW3RoaXMub3B0aW9ucy5wb3NpdGlvbl19XG4gICAgICB9XG5cbiAgICAgIHVsLmtleXN0cm9rZXMgbGkge1xuICAgICAgICBkaXJlY3Rpb246IGx0cjtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0aGlzLm9wdGlvbnMuYmV6ZWxDb2xvcn07XG4gICAgICAgIG9wYWNpdHk6IDAuOTtcbiAgICAgICAgY29sb3I6ICR7dGhpcy5vcHRpb25zLnRleHRDb2xvcn07XG4gICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIGRpc3BsYXk6IHRhYmxlO1xuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgJHt0aGlzLm9wdGlvbnMuZmFkZUR1cmF0aW9ufW1zIGxpbmVhcjtcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAke3RoaXMub3B0aW9ucy5mYWRlRHVyYXRpb259bXMgbGluZWFyO1xuICAgICAgfWA7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5zdHlsZSk7XG4gICAgfVxuICAgIHByb2Nlc3NJbnB1dChzdHIpIHtcbiAgICAgICAga2V5cyhzdHIsIHRoaXMuX29uS2V5KTtcbiAgICB9XG4gICAgZW5hYmxlKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jbGVhblVwKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUywgb3B0aW9ucyB8fCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLmluamVjdENvbXBvbmVudHMoKTtcbiAgICB9XG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5jbGVhblVwKCk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgbmV3IEtleXN0cm9rZVZpc3VhbGl6ZXIoKTtcbiIsIi8vIENvcHlyaWdodCAoYykgMjAxMiBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5pbXBvcnQgeyBodGVybSwgbGliIH0gZnJvbSAnLi4vaHRlcm1fYWxsJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuLyoqXG4gKiBTa2lwIG92ZXIgdGhlIHN0cmluZyB1bnRpbCB0aGUgbmV4dCBTdHJpbmcgVGVybWluYXRvciAoU1QsICdFU0MgXFwnKSBvclxuICogQmVsbCAoQkVMLCAnXFx4MDcnKS5cbiAqXG4gKiBUaGUgc3RyaW5nIGlzIGFjY3VtdWxhdGVkIGluIHBhcnNlU3RhdGUuYXJnc1swXS4gIE1ha2Ugc3VyZSB0byByZXNldCB0aGVcbiAqIGFyZ3VtZW50cyAod2l0aCBwYXJzZVN0YXRlLnJlc2V0QXJndW1lbnRzKSBiZWZvcmUgc3RhcnRpbmcgdGhlIHBhcnNlLlxuICpcbiAqIFlvdSBjYW4gZGV0ZWN0IHRoYXQgcGFyc2luZyBpbiBjb21wbGV0ZSBieSBjaGVja2luZyB0aGF0IHRoZSBwYXJzZVxuICogZnVuY3Rpb24gaGFzIGNoYW5nZWQgYmFjayB0byB0aGUgZGVmYXVsdCBwYXJzZSBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufSBJZiB0cnVlLCBwYXJzaW5nIGlzIG9uZ29pbmcgb3IgY29tcGxldGUuICBJZiBmYWxzZSwgd2UndmVcbiAqICAgICBleGNlZWRlZCB0aGUgbWF4IHN0cmluZyBzZXF1ZW5jZS5cbiAqL1xudmFyIF9jb2RlUmVnZXggPSAvW1xceDFiXFx4MDddLztcbmh0ZXJtLlZULnByb3RvdHlwZS5wYXJzZVVudGlsU3RyaW5nVGVybWluYXRvcl8gPSBmdW5jdGlvbiAocGFyc2VTdGF0ZSkge1xuICAgIHZhciBidWYgPSBwYXJzZVN0YXRlLnBlZWtSZW1haW5pbmdCdWYoKTtcbiAgICB2YXIgYXJncyA9IHBhcnNlU3RhdGUuYXJncztcbiAgICAvLyBTaW5jZSB3ZSBtaWdodCBtb2RpZnkgcGFyc2Ugc3RhdGUgYnVmZmVyIGxvY2FsbHksIGlmIHdlIHdhbnQgdG8gYWR2YW5jZVxuICAgIC8vIHRoZSBwYXJzZSBzdGF0ZSBidWZmZXIgbGF0ZXIgb24sIHdlIG5lZWQgdG8ga25vdyBob3cgbWFueSBjaGFycyB3ZSBhZGRlZC5cbiAgICBsZXQgYnVmSW5zZXJ0ZWQgPSAwO1xuICAgIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgYXJnc1swXSA9ICcnO1xuICAgICAgICBhcmdzWzFdID0gbmV3IERhdGUoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIElmIG91ciBzYXZlZCBidWZmZXIgZW5kcyB3aXRoIGFuIGVzY2FwZSwgaXQncyBiZWNhdXNlIHdlIHdlcmUgaG9waW5nXG4gICAgICAgIC8vIGl0J3MgYW4gU1Qgc3BsaXQgYWNyb3NzIHR3byBidWZmZXJzLiAgTW92ZSBpdCBmcm9tIG91ciBzYXZlZCBidWZmZXJcbiAgICAgICAgLy8gdG8gdGhlIHN0YXJ0IG9mIG91ciBjdXJyZW50IGJ1ZmZlciBmb3IgcHJvY2Vzc2luZyBhbmV3LlxuICAgICAgICBpZiAoYXJnc1swXS5zbGljZSgtMSkgPT0gJ1xceDFiJykge1xuICAgICAgICAgICAgYXJnc1swXSA9IGFyZ3NbMF0uc2xpY2UoMCwgLTEpO1xuICAgICAgICAgICAgYnVmID0gJ1xceDFiJyArIGJ1ZjtcbiAgICAgICAgICAgIGJ1Zkluc2VydGVkID0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBuZXh0VGVybWluYXRvciA9IGJ1Zi5zZWFyY2goX2NvZGVSZWdleCk7XG4gICAgY29uc3QgdGVybWluYXRvciA9IGJ1Zi5jaGFyQXQobmV4dFRlcm1pbmF0b3IpO1xuICAgIGxldCBmb3VuZFRlcm1pbmF0b3I7XG4gICAgLy8gSWYgdGhlIG5leHQgZXNjYXBlIHdlIHNlZSBpcyBub3QgYSBzdGFydCBvZiBhIFNULCBmYWxsIHRocm91Z2guICBUaGlzIHdpbGxcbiAgICAvLyBlaXRoZXIgYmUgaW52YWxpZCAoZW1iZWRkZWQgZXNjYXBlKSwgb3Igd2UnbGwgcXVldWUgaXQgdXAgKHdhaXQgZm9yIFxcXFwpLlxuICAgIGlmICh0ZXJtaW5hdG9yID09ICdcXHgxYicgJiYgYnVmLmNoYXJBdChuZXh0VGVybWluYXRvciArIDEpICE9PSAnXFxcXCcpIHtcbiAgICAgICAgZm91bmRUZXJtaW5hdG9yID0gZmFsc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3VuZFRlcm1pbmF0b3IgPSBuZXh0VGVybWluYXRvciAhPT0gLTE7XG4gICAgfVxuICAgIGlmICghZm91bmRUZXJtaW5hdG9yKSB7XG4gICAgICAgIC8vIE5vIHRlcm1pbmF0b3IgaGVyZSwgaGF2ZSB0byB3YWl0IGZvciB0aGUgbmV4dCBzdHJpbmcuXG4gICAgICAgIGFyZ3NbMF0gKz0gYnVmO1xuICAgICAgICB2YXIgYWJvcnRSZWFzb247XG4gICAgICAgIC8vIFNwZWNpYWwgY2FzZTogSWYgb3VyIGJ1ZmZlcmluZyBoYXBwZW5zIHRvIHNwbGl0IHRoZSBTVCAoXFxlXFxcXCksIHdlIGhhdmUgdG9cbiAgICAgICAgLy8gYnVmZmVyIHRoZSBjb250ZW50IHRlbXBvcmFyaWx5LiAgU28gZG9uJ3QgcmVqZWN0IGEgdHJhaWxpbmcgZXNjYXBlIGhlcmUsXG4gICAgICAgIC8vIGluc3RlYWQgd2UgbGV0IGl0IHRpbWVvdXQgb3IgYmUgcmVqZWN0ZWQgaW4gdGhlIG5leHQgcGFzcy5cbiAgICAgICAgaWYgKHRlcm1pbmF0b3IgPT0gJ1xceDFiJyAmJiBuZXh0VGVybWluYXRvciAhPSBidWYubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgIGFib3J0UmVhc29uID0gJ2VtYmVkZGVkIGVzY2FwZTogJyArIG5leHRUZXJtaW5hdG9yO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChuZXcgRGF0ZSgpIC0gYXJnc1sxXSA+IHRoaXMub3NjVGltZUxpbWl0XylcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGFib3J0UmVhc29uID0gJ3RpbWVvdXQgZXhwaXJlZDogJyArIChuZXcgRGF0ZSgpIC0gYXJnc1sxXSk7XG4gICAgICAgIGlmIChhYm9ydFJlYXNvbikge1xuICAgICAgICAgICAgaWYgKHRoaXMud2FyblVuaW1wbGVtZW50ZWQpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3BhcnNlVW50aWxTdHJpbmdUZXJtaW5hdG9yXzogYWJvcnRpbmc6ICcgKyBhYm9ydFJlYXNvbiwgYXJnc1swXSk7XG4gICAgICAgICAgICBwYXJzZVN0YXRlLnJlc2V0KGFyZ3NbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlU3RhdGUuYWR2YW5jZShidWYubGVuZ3RoIC0gYnVmSW5zZXJ0ZWQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgYXJnc1swXSArPSBidWYuc3Vic3RyKDAsIG5leHRUZXJtaW5hdG9yKTtcbiAgICBwYXJzZVN0YXRlLnJlc2V0UGFyc2VGdW5jdGlvbigpO1xuICAgIHBhcnNlU3RhdGUuYWR2YW5jZShuZXh0VGVybWluYXRvciArICh0ZXJtaW5hdG9yID09ICdcXHgxYicgPyAyIDogMSkgLSBidWZJbnNlcnRlZCk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG4gKiBEaXNwYXRjaCB0byB0aGUgZnVuY3Rpb24gdGhhdCBoYW5kbGVzIGEgZ2l2ZW4gQ0MxLCBFU0MsIG9yIENTSSBvciBWVDUyIGNvZGUuXG4gKi9cbi8vIEB0cy1pZ25vcmVcbmh0ZXJtLlZULnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uICh0eXBlLCBjb2RlLCBwYXJzZVN0YXRlKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBoYW5kbGVyID0gX1ZUTWFwcy5nZXQodHlwZSkuZ2V0KGNvZGUpO1xuICAgIGlmICghaGFuZGxlcikge1xuICAgICAgICBpZiAodGhpcy53YXJuVW5pbXBsZW1lbnRlZClcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignVW5rbm93biAnICsgdHlwZSArICcgY29kZTogJyArIEpTT04uc3RyaW5naWZ5KGNvZGUpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaGFuZGxlciA9PT0gaHRlcm0uVlQuaWdub3JlKSB7XG4gICAgICAgIGlmICh0aGlzLndhcm5VbmltcGxlbWVudGVkKVxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdJZ25vcmVkICcgKyB0eXBlICsgJyBjb2RlOiAnICsgSlNPTi5zdHJpbmdpZnkoY29kZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAocGFyc2VTdGF0ZS5zdWJhcmdzICYmICFoYW5kbGVyLnN1cHBvcnRzU3ViYXJncykge1xuICAgICAgICBpZiAodGhpcy53YXJuVW5pbXBsZW1lbnRlZClcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignSWdub3JlZCAnICsgdHlwZSArICcgY29kZSB3L3N1YmFyZ3M6ICcgKyBKU09OLnN0cmluZ2lmeShjb2RlKSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdDQzEnICYmIGNvZGUgPiAnXFx4N2YnICYmICF0aGlzLmVuYWJsZThCaXRDb250cm9sKSB7XG4gICAgICAgIC8vIEl0J3Mga2luZCBvZiBhIGhhY2sgdG8gcHV0IHRoaXMgaGVyZSwgYnV0Li4uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIElmIHdlJ3JlIGRpc3BhdGNoaW5nIGEgJ0NDMScgY29kZSwgYW5kIGl0J3MgZ290IHRoZSBlaWdodGggYml0IHNldCxcbiAgICAgICAgLy8gYnV0IHdlJ3JlIG5vdCBzdXBwb3NlZCB0byBoYW5kbGUgOC1iaXQgY29kZXM/ICBKdXN0IGlnbm9yZSBpdC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBwcmV2ZW50cyBhbiBlcnJhbnQgKERDUywgJ1xceDkwJyksIChPU0MsICdcXHg5ZCcpLCAoUE0sICdcXHg5ZScpIG9yXG4gICAgICAgIC8vIChBUEMsICdcXHg5ZicpIGZyb20gbG9ja2luZyB1cCB0aGUgdGVybWluYWwgd2FpdGluZyBmb3IgaXRzIGV4cGVjdGVkXG4gICAgICAgIC8vIChTVCwgJ1xceDljJykgb3IgKEJFTCwgJ1xceDA3JykuXG4gICAgICAgIGNvbnNvbGUud2FybignSWdub3JpbmcgOC1iaXQgY29udHJvbCBjb2RlOiAweCcgKyBjb2RlLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBoYW5kbGVyLmNhbGwodGhpcywgcGFyc2VTdGF0ZSwgY29kZSk7XG4gICAgLy9pZiAoIWhhbmRsZXIuX2JpbmRlZCkge1xuICAgIC8vaGFuZGxlci5fYmluZGVkID0gaGFuZGxlci5iaW5kKHRoaXMpO1xuICAgIC8vfVxuICAgIC8vaGFuZGxlci5fYmluZGVkKHBhcnNlU3RhdGUsIGNvZGUpO1xufTtcbmh0ZXJtLlZULlBhcnNlU3RhdGUucHJvdG90eXBlLnBlZWtSZW1haW5pbmdCdWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVmLnN1YnN0cih0aGlzLnBvcyk7XG59O1xuaHRlcm0uVlQuUGFyc2VTdGF0ZS5wcm90b3R5cGUucGVla0NoYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVmLmNoYXJBdCh0aGlzLnBvcyk7XG59O1xuLyoqXG4gKiBSZXR1cm4gdGhlIG5leHQgc2luZ2xlIGNoYXJhY3RlciBpbiB0aGUgYnVmZmVyIGFuZCBhZHZhbmNlIHRoZSBwYXJzZVxuICogcG9zaXRpb24gb25lIGJ5dGUuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgbmV4dCBjaGFyYWN0ZXIgaW4gdGhlIGJ1ZmZlci5cbiAqL1xuaHRlcm0uVlQuUGFyc2VTdGF0ZS5wcm90b3R5cGUuY29uc3VtZUNoYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVmLmNoYXJBdCh0aGlzLnBvcysrKTtcbn07XG5mdW5jdGlvbiBfX3ByaW50KHNlbGYsIHN0cikge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoIXNlbGYuY29kaW5nU3lzdGVtVXRmOF8gJiYgc2VsZltzZWxmLkdMXS5HTCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHN0ciA9IHNlbGZbc2VsZi5HTF0uR0woc3RyKTtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHNlbGYudGVybWluYWwucHJpbnQoc3RyKTtcbn1cbi8vIEB0cy1pZ25vcmVcbmh0ZXJtLlZULnByb3RvdHlwZS5wYXJzZVVua25vd25fID0gZnVuY3Rpb24gKHBhcnNlU3RhdGUpIHtcbiAgICAvLyBTZWFyY2ggZm9yIHRoZSBuZXh0IGNvbnRpZ3VvdXMgYmxvY2sgb2YgcGxhaW4gdGV4dC5cbiAgICB2YXIgYnVmID0gcGFyc2VTdGF0ZS5wZWVrUmVtYWluaW5nQnVmKCk7XG4gICAgdmFyIG5leHRDb250cm9sID0gYnVmLnNlYXJjaCh0aGlzLmNjMVBhdHRlcm5fKTtcbiAgICBpZiAobmV4dENvbnRyb2wgPT09IDApIHtcbiAgICAgICAgLy8gV2UndmUgc3R1bWJsZWQgcmlnaHQgaW50byBhIGNvbnRyb2wgY2hhcmFjdGVyLlxuICAgICAgICB0aGlzLmRpc3BhdGNoKCdDQzEnLCBidWYuY2hhckF0KDApLCBwYXJzZVN0YXRlKTtcbiAgICAgICAgcGFyc2VTdGF0ZS5hZHZhbmNlKDEpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChuZXh0Q29udHJvbCA9PT0gLTEpIHtcbiAgICAgICAgLy8gVGhlcmUgYXJlIG5vIGNvbnRyb2wgY2hhcmFjdGVycyBpbiB0aGlzIHN0cmluZy5cbiAgICAgICAgX19wcmludCh0aGlzLCBidWYpO1xuICAgICAgICBwYXJzZVN0YXRlLnJlc2V0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX19wcmludCh0aGlzLCBidWYuc3Vic3RyKDAsIG5leHRDb250cm9sKSk7XG4gICAgdGhpcy5kaXNwYXRjaCgnQ0MxJywgYnVmLmNoYXJBdChuZXh0Q29udHJvbCksIHBhcnNlU3RhdGUpO1xuICAgIHBhcnNlU3RhdGUuYWR2YW5jZShuZXh0Q29udHJvbCArIDEpO1xufTtcbi8qKlxuICogSW50ZXJwcmV0IGEgc3RyaW5nIG9mIGNoYXJhY3RlcnMsIGRpc3BsYXlpbmcgdGhlIHJlc3VsdHMgb24gdGhlIGFzc29jaWF0ZWRcbiAqIHRlcm1pbmFsIG9iamVjdC5cbiAqXG4gKiBUaGUgYnVmZmVyIHdpbGwgYmUgZGVjb2RlZCBhY2NvcmRpbmcgdG8gdGhlICdyZWNlaXZlLWVuY29kaW5nJyBwcmVmZXJlbmNlLlxuICovXG4vLyBAdHMtaWdub3JlXG52YXIgX19idWZmUXVldWUgPSBbXTtcbi8vIEB0cy1pZ25vcmVcbnZhciBfX2N1cnJlbnRQYXJzZVN0YXRlID0gbnVsbDtcbnZhciBfX2J1c3kgPSBmYWxzZTtcbi8vIEB0cy1pZ25vcmVcbnZhciBfX3Z0O1xuZnVuY3Rpb24gX19kZWZlcnJlZEludGVycGV0KCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBSZWFjdERPTS51bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMoX19pbnRlcnByZXQpO1xufVxuZnVuY3Rpb24gX19pbnRlcnByZXQoKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciB2dCA9IF9fdnQ7XG4gICAgdmFyIHRpbWVCdWRnZXQgPSBEYXRlLm5vdygpICsgMTA7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoX19jdXJyZW50UGFyc2VTdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdmFyIGJ1ZiA9IF9fYnVmZlF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAoYnVmID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZ0LnBhcnNlU3RhdGVfLnJlc2V0QnVmKGJ1Zik7XG4gICAgICAgICAgICBfX2N1cnJlbnRQYXJzZVN0YXRlID0gdnQucGFyc2VTdGF0ZV87XG4gICAgICAgIH1cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB3aGlsZSAoIV9fY3VycmVudFBhcnNlU3RhdGUuaXNDb21wbGV0ZSgpKSB7XG4gICAgICAgICAgICB2YXIgZnVuYyA9IHZ0LnBhcnNlU3RhdGVfLmZ1bmM7XG4gICAgICAgICAgICB2YXIgcG9zID0gdnQucGFyc2VTdGF0ZV8ucG9zO1xuICAgICAgICAgICAgdmFyIGJ1ZiA9IHZ0LnBhcnNlU3RhdGVfLmJ1ZjtcbiAgICAgICAgICAgIHZ0LnBhcnNlU3RhdGVfLmZ1bmMuY2FsbCh2dCwgdnQucGFyc2VTdGF0ZV8pO1xuICAgICAgICAgICAgaWYgKHZ0LnBhcnNlU3RhdGVfLmZ1bmMgPT0gZnVuYyAmJlxuICAgICAgICAgICAgICAgIHZ0LnBhcnNlU3RhdGVfLnBvcyA9PSBwb3MgJiZcbiAgICAgICAgICAgICAgICB2dC5wYXJzZVN0YXRlXy5idWYgPT0gYnVmKSB7XG4gICAgICAgICAgICAgICAgX19idXN5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX19jdXJyZW50UGFyc2VTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1BhcnNlciBkaWQgbm90IGFsdGVyIHRoZSBzdGF0ZSEnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpbWVCdWRnZXQgPCBEYXRlLm5vdygpKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF9fZGVmZXJyZWRJbnRlcnBldCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9fY3VycmVudFBhcnNlU3RhdGUgPSBudWxsO1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgd2luZG93LnQuc3luY0N1cnNvclBvc2l0aW9uXygpO1xuICAgIF9fYnVzeSA9IGZhbHNlO1xufVxuLy8gQHRzLWlnbm9yZVxuaHRlcm0uVlQucHJvdG90eXBlLmludGVycHJldCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICBfX3Z0ID0gdGhpcztcbiAgICBfX2J1ZmZRdWV1ZS5wdXNoKHRoaXMuZGVjb2RlKGJ1ZikpO1xuICAgIGlmIChfX2J1c3kpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfX2J1c3kgPSB0cnVlO1xuICAgIF9fZGVmZXJyZWRJbnRlcnBldCgpO1xufTtcbi8vIEB0cy1pZ25vcmVcbmZ1bmN0aW9uIF9fZmluaXNoUGFyc2luZyhwYXJzZVN0YXRlKSB7XG4gICAgLy8gUmVzZXR0aW5nIHRoZSBhcmd1bWVudHMgaXNuJ3Qgc3RyaWN0bHkgbmVjZXNzYXJ5LCBidXQgaXQgbWFrZXMgZGVidWdnaW5nXG4gICAgLy8gbGVzcyBjb25mdXNpbmcgKG90aGVyd2lzZSBhcmdzIHdpbGwgc3RpY2sgYXJvdW5kIHVudGlsIHRoZSBuZXh0IHNlcXVlbmNlXG4gICAgLy8gdGhhdCBuZWVkcyBhcmd1bWVudHMpLlxuICAgIHBhcnNlU3RhdGUucmVzZXRBcmd1bWVudHMoKTtcbiAgICAvLyBXZSBuZWVkIHRvIGNsZWFyIHN1YmFyZ3Mgc2luY2Ugd2UgZXhwbGljaXRseSBzZXQgaXQuXG4gICAgcGFyc2VTdGF0ZS5zdWJhcmdzID0gbnVsbDtcbiAgICBwYXJzZVN0YXRlLnJlc2V0UGFyc2VGdW5jdGlvbigpO1xufVxuLy8gQHRzLWlnbm9yZVxuaHRlcm0uVlQucHJvdG90eXBlLnBhcnNlQ1NJXyA9IGZ1bmN0aW9uIChwYXJzZVN0YXRlKSB7XG4gICAgdmFyIGNoID0gcGFyc2VTdGF0ZS5wZWVrQ2hhcigpO1xuICAgIHZhciBhcmdzID0gcGFyc2VTdGF0ZS5hcmdzO1xuICAgIGlmIChjaCA+PSAnQCcgJiYgY2ggPD0gJ34nKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpbmFsIGNoYXJhY3Rlci5cbiAgICAgICAgdGhpcy5kaXNwYXRjaCgnQ1NJJywgdGhpcy5sZWFkaW5nTW9kaWZpZXJfICsgdGhpcy50cmFpbGluZ01vZGlmaWVyXyArIGNoLCBwYXJzZVN0YXRlKTtcbiAgICAgICAgX19maW5pc2hQYXJzaW5nKHBhcnNlU3RhdGUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaCA9PT0gJzsnKSB7XG4gICAgICAgIC8vIFBhcmFtZXRlciBkZWxpbWl0ZXIuXG4gICAgICAgIGlmICh0aGlzLnRyYWlsaW5nTW9kaWZpZXJfKSB7XG4gICAgICAgICAgICAvLyBQYXJhbWV0ZXIgZGVsaW1pdGVyIGFmdGVyIHRoZSB0cmFpbGluZyBtb2RpZmllci4gIFRoYXQncyBhIHBhZGRsaW4nLlxuICAgICAgICAgICAgX19maW5pc2hQYXJzaW5nKHBhcnNlU3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZXkgb21pdHRlZCB0aGUgZmlyc3QgcGFyYW0sIHdlIG5lZWQgdG8gc3VwcGx5IGl0LlxuICAgICAgICAgICAgICAgIGFyZ3MucHVzaCgnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcmdzLnB1c2goJycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKChjaCA+PSAnMCcgJiYgY2ggPD0gJzknKSB8fCBjaCA9PT0gJzonKSB7XG4gICAgICAgIC8vIE5leHQgYnl0ZSBpbiB0aGUgY3VycmVudCBwYXJhbWV0ZXIuXG4gICAgICAgIGlmICh0aGlzLnRyYWlsaW5nTW9kaWZpZXJfKSB7XG4gICAgICAgICAgICAvLyBOdW1lcmljIHBhcmFtZXRlciBhZnRlciB0aGUgdHJhaWxpbmcgbW9kaWZpZXIuICBUaGF0J3MgYSBwYWRkbGluJy5cbiAgICAgICAgICAgIF9fZmluaXNoUGFyc2luZyhwYXJzZVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFyZ3NbYXJncy5sZW5ndGggLSAxXSArPSBjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFyZ3NbMF0gPSBjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIHN1Yi1wYXJhbWV0ZXJzLlxuICAgICAgICAgICAgaWYgKGNoID09PSAnOicpIHtcbiAgICAgICAgICAgICAgICBwYXJzZVN0YXRlLmFyZ1NldFN1YmFyZ3MoYXJncy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChjaCA+PSAnICcgJiYgY2ggPD0gJz8nKSB7XG4gICAgICAgIC8vIE1vZGlmaWVyIGNoYXJhY3Rlci5cbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnRyYWlsaW5nTW9kaWZpZXJfICs9IGNoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sZWFkaW5nTW9kaWZpZXJfICs9IGNoO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuY2MxUGF0dGVybl8udGVzdChjaCkpIHtcbiAgICAgICAgLy8gQ29udHJvbCBjaGFyYWN0ZXIuXG4gICAgICAgIHRoaXMuZGlzcGF0Y2goJ0NDMScsIGNoLCBwYXJzZVN0YXRlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGluIHNlcXVlbmNlLCBiYWlsIG91dC5cbiAgICAgICAgX19maW5pc2hQYXJzaW5nKHBhcnNlU3RhdGUpO1xuICAgIH1cbiAgICBwYXJzZVN0YXRlLmFkdmFuY2UoMSk7XG59O1xudmFyIF9WVE1hcHMgPSBuZXcgTWFwKCk7XG4vLyBAdHMtaWdub3JlXG5mdW5jdGlvbiBfX3BhcnNlRVNDKHBhcnNlU3RhdGUpIHtcbiAgICB2YXIgY2ggPSBwYXJzZVN0YXRlLmNvbnN1bWVDaGFyKCk7XG4gICAgaWYgKGNoID09ICdcXHgxYicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdGhpcy5kaXNwYXRjaCgnRVNDJywgY2gsIHBhcnNlU3RhdGUpO1xuICAgIGlmIChwYXJzZVN0YXRlLmZ1bmMgPT0gX19wYXJzZUVTQykge1xuICAgICAgICBwYXJzZVN0YXRlLnJlc2V0UGFyc2VGdW5jdGlvbigpO1xuICAgIH1cbn1cbmh0ZXJtLlZULlBhcnNlU3RhdGUucHJvdG90eXBlLnJlc2V0QXJndW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXJncyA9IFtdO1xuICAgIC8vdGhpcy5hcmdzLmxlbmd0aCA9IDA7XG4gICAgLy9pZiAodHlwZW9mIG9wdF9hcmdfemVybyAhPSAndW5kZWZpbmVkJykgdGhpcy5hcmdzWzBdID0gb3B0X2FyZ196ZXJvO1xufTtcbi8vIEB0cy1pZ25vcmVcbmh0ZXJtLlZULlBhcnNlU3RhdGUucHJvdG90eXBlLnBhcnNlSW50ID0gZnVuY3Rpb24gKGFyZ3N0ciwgZGVmYXVsdFZhbHVlKSB7XG4gICAgY29uc3QgcmV0ID0gYXJnc3RyID4+IDA7XG4gICAgaWYgKHJldCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQgPyByZXQgOiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuZnVuY3Rpb24gX19wYXJzZUluZGV4Q29sb3IoYXJncywgaSwgYXR0cnMpIHtcbiAgICAvLyBDb2xvciBwYWxldHRlIGluZGV4LlxuICAgIC8vIElmIHdlJ3JlIHNob3J0IG9uIGFyZ3MsIGFzc3VtZSB0aGlzIHNlcXVlbmNlIGlzIGNvcnJ1cHRlZCwgc28gZG9uJ3RcbiAgICAvLyBlYXQgYW55dGhpbmcgbW9yZS5cbiAgICBpZiAoYXJncy5sZW5ndGggLSBpICsgMSA8IDIpIHtcbiAgICAgICAgcmV0dXJuIHsgc2tpcENvdW50OiAwIH07XG4gICAgfVxuICAgIC8vIFN1cHBvcnQgMzg6NTpQIChJU08gODYxMy02KSBhbmQgMzg7NTtQICh4dGVybS9sZWdhY3kpLlxuICAgIC8vIFdlIGFsc28gaWdub3JlIGV4dHJhIGFyZ3Mgd2l0aCAzODo1OlA6Wy4uLl0sIGJ1dCBtb3JlIGZvciBsYXppbmVzcy5cbiAgICBjb25zdCBjb2xvciA9IGFyZ3NbaSArIDJdID4+IDA7XG4gICAgaWYgKGNvbG9yIDwgYXR0cnMuY29sb3JQYWxldHRlLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2tpcENvdW50OiAyLFxuICAgICAgICAgICAgY29sb3IsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNraXBDb3VudDogMixcbiAgICB9O1xufVxuLy8gQHRzLWlnbm9yZVxuaHRlcm0uVlQucHJvdG90eXBlLnBhcnNlU2dyRXh0ZW5kZWRDb2xvcnMgPSBmdW5jdGlvbiAocGFyc2VTdGF0ZSwgaSwgYXR0cnMpIHtcbiAgICBsZXQgYXJ5O1xuICAgIGxldCB1c2VkU3ViYXJncztcbiAgICBpZiAocGFyc2VTdGF0ZS5hcmdIYXNTdWJhcmdzKGkpKSB7XG4gICAgICAgIC8vIFRoZSBJU08gODYxMy02IGNvbXBsaWFudCBmb3JtLlxuICAgICAgICAvLyBlLmcuIDM4Oltjb2xvciBjaG9pY2VdOlthcmcxXTpbYXJnMl06Li4uXG4gICAgICAgIGFyeSA9IHBhcnNlU3RhdGUuYXJnc1tpXS5zcGxpdCgnOicpO1xuICAgICAgICBhcnkuc2hpZnQoKTsgLy8gUmVtb3ZlIFwiMzhcIi5cbiAgICAgICAgdXNlZFN1YmFyZ3MgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChwYXJzZVN0YXRlLmFyZ0hhc1N1YmFyZ3MoaSArIDEpKSB7XG4gICAgICAgIC8vIFRoZSB4dGVybSBmb3JtIHdoaWNoIGlzbid0IElTTyA4NjEzLTYgY29tcGxpYW50LiAgTm90IG1hbnkgZW11bGF0b3JzXG4gICAgICAgIC8vIHN1cHBvcnQgdGhpcywgYW5kIG90aGVycyBhY3RpdmVseSBkbyBub3Qgd2FudCB0by4gIFdlJ2xsIGlnbm9yZSBpdCBzb1xuICAgICAgICAvLyBhdCBsZWFzdCB0aGUgcmVzdCBvZiB0aGUgc3RyZWFtIHdvcmtzIGNvcnJlY3RseS4gIGUuZy4gMzg7MjpSOkc6QlxuICAgICAgICAvLyBXZSByZXR1cm4gMCBoZXJlIHNvIHdlIG9ubHkgc2tpcCB0aGUgXCIzOFwiIC4uLiB3ZSBjYW4ndCBiZSBjb25maWRlbnQgdGhlXG4gICAgICAgIC8vIG5leHQgYXJnIGlzIGFjdHVhbGx5IHN1cHBvc2VkIHRvIGJlIHBhcnQgb2YgaXQgdnMgYSB0eXBvIHdoZXJlIHRoZSBuZXh0XG4gICAgICAgIC8vIGFyZyBpcyBsZWdpdC5cbiAgICAgICAgcmV0dXJuIHsgc2tpcENvdW50OiAwIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBUaGUgeHRlcm0gZm9ybSB3aGljaCBpc24ndCBJU08gODYxMy02IGNvbXBsaWFudCwgYnV0IG1hbnkgZW11bGF0b3JzXG4gICAgICAgIC8vIHN1cHBvcnQsIGFuZCBtYW55IGFwcGxpY2F0aW9ucyByZWx5IG9uLlxuICAgICAgICAvLyBlLmcuIDM4OzI7UjtHO0JcbiAgICAgICAgLy8gdHJ5IHRvIGF2b2lkIHNsaWNlXG4gICAgICAgIGlmIChwYXJzZVN0YXRlLmFyZ3NbaSArIDFdID4+IDAgPT09IDUpIHtcbiAgICAgICAgICAgIHJldHVybiBfX3BhcnNlSW5kZXhDb2xvcihwYXJzZVN0YXRlLmFyZ3MsIGksIGF0dHJzKTtcbiAgICAgICAgfVxuICAgICAgICBhcnkgPSBwYXJzZVN0YXRlLmFyZ3Muc2xpY2UoaSArIDEpO1xuICAgICAgICB1c2VkU3ViYXJncyA9IGZhbHNlO1xuICAgIH1cbiAgICAvLyBGaWd1cmUgb3V0IHdoaWNoIGZvcm0gdG8gcGFyc2UuXG4gICAgc3dpdGNoIChhcnlbMF0gPj4gMCkge1xuICAgICAgICBkZWZhdWx0OiAvLyBVbmtub3duLlxuICAgICAgICBjYXNlIDA6IC8vIEltcGxlbWVudGF0aW9uIGRlZmluZWQuICBXZSBpZ25vcmUgaXQuXG4gICAgICAgICAgICByZXR1cm4geyBza2lwQ291bnQ6IDAgfTtcbiAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgICAvLyBUcmFuc3BhcmVudCBjb2xvci5cbiAgICAgICAgICAgIC8vIFJlcXVpcmUgSVNPIDg2MTMtNiBmb3JtLlxuICAgICAgICAgICAgaWYgKCF1c2VkU3ViYXJncylcbiAgICAgICAgICAgICAgICByZXR1cm4geyBza2lwQ291bnQ6IDAgfTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDApJyxcbiAgICAgICAgICAgICAgICBza2lwQ291bnQ6IDAsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjoge1xuICAgICAgICAgICAgLy8gUkdCIGNvbG9yLlxuICAgICAgICAgICAgLy8gU2tpcCBvdmVyIHRoZSBjb2xvciBzcGFjZSBpZGVudGlmaWVyLCBpZiBpdCBleGlzdHMuXG4gICAgICAgICAgICBsZXQgc3RhcnQ7XG4gICAgICAgICAgICBpZiAodXNlZFN1YmFyZ3MpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgSVNPIDg2MTMtNiBjb21wbGlhbnQgZm9ybTpcbiAgICAgICAgICAgICAgICAvLyAgIDM4OjI6PGNvbG9yIHNwYWNlIGlkPjpSOkc6Qls6Li4uXVxuICAgICAgICAgICAgICAgIC8vIFRoZSB4dGVybSBmb3JtIGlzbid0IElTTyA4NjEzLTYgY29tcGxpYW50LlxuICAgICAgICAgICAgICAgIC8vICAgMzg6MjpSOkc6QlxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHRoZSBJU08gODYxMy02IGZvcm0gcmVxdWlyZXMgYXQgbGVhc3QgNSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgLy8gd2UgY2FuIHN0aWxsIHN1cHBvcnQgdGhlIHh0ZXJtIGZvcm0gdW5hbWJpZ3VvdXNseS5cbiAgICAgICAgICAgICAgICBpZiAoYXJ5Lmxlbmd0aCA9PSA0KVxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IDE7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgbGVnYWN5IHh0ZXJtIGZvcm06IDM4OzI7UjtHO0JcbiAgICAgICAgICAgICAgICBzdGFydCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBuZWVkIGF0IGxlYXN0IDMgYXJncyBmb3IgUkdCLiAgSWYgd2UgZG9uJ3QgaGF2ZSB0aGVtLCBhc3N1bWUgdGhpc1xuICAgICAgICAgICAgLy8gc2VxdWVuY2UgaXMgY29ycnVwdGVkLCBzbyBkb24ndCBlYXQgYW55dGhpbmcgbW9yZS5cbiAgICAgICAgICAgIC8vIFdlIGlnbm9yZSBtb3JlIHRoYW4gMyBhcmdzIG9uIHB1cnBvc2Ugc2luY2UgSVNPIDg2MTMtNiBkZWZpbmVzIHNvbWUsXG4gICAgICAgICAgICAvLyBhbmQgd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGVtLlxuICAgICAgICAgICAgaWYgKGFyeS5sZW5ndGggPCBzdGFydCArIDMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc2tpcENvdW50OiAwIH07XG4gICAgICAgICAgICBjb25zdCByID0gYXJ5W3N0YXJ0ICsgMF0gPj4gMDtcbiAgICAgICAgICAgIGNvbnN0IGcgPSBhcnlbc3RhcnQgKyAxXSA+PiAwO1xuICAgICAgICAgICAgY29uc3QgYiA9IGFyeVtzdGFydCArIDJdID4+IDA7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBgcmdiKCR7cn0sICR7Z30sICR7Yn0pYCxcbiAgICAgICAgICAgICAgICBza2lwQ291bnQ6IHVzZWRTdWJhcmdzID8gMCA6IDQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzoge1xuICAgICAgICAgICAgLy8gQ01ZIGNvbG9yLlxuICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBzdXBwb3J0IHh0ZXJtL2xlZ2FjeSBmb3JtcyBhcyB4dGVybSBkb2Vzbid0IHN1cHBvcnQgQ01ZLlxuICAgICAgICAgICAgaWYgKCF1c2VkU3ViYXJncylcbiAgICAgICAgICAgICAgICByZXR1cm4geyBza2lwQ291bnQ6IDAgfTtcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgYXQgbGVhc3QgNCBhcmdzIGZvciBDTVkuICBJZiB3ZSBkb24ndCBoYXZlIHRoZW0sIGFzc3VtZVxuICAgICAgICAgICAgLy8gdGhpcyBzZXF1ZW5jZSBpcyBjb3JydXB0ZWQuICBXZSBpZ25vcmUgdGhlIGNvbG9yIHNwYWNlIGlkZW50aWZpZXIsXG4gICAgICAgICAgICAvLyB0b2xlcmFuY2UsIGV0Yy4uLlxuICAgICAgICAgICAgaWYgKGFyeS5sZW5ndGggPCA0KVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHNraXBDb3VudDogMCB9O1xuICAgICAgICAgICAgLy8gVE9ETzogU2VlIENNWUsgYmVsb3cuXG4gICAgICAgICAgICBjb25zdCBjID0gYXJ5WzFdID4+IDA7XG4gICAgICAgICAgICBjb25zdCBtID0gYXJ5WzJdID4+IDA7XG4gICAgICAgICAgICBjb25zdCB5ID0gYXJ5WzNdID4+IDA7XG4gICAgICAgICAgICByZXR1cm4geyBza2lwQ291bnQ6IDAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDQ6IHtcbiAgICAgICAgICAgIC8vIENNWUsgY29sb3IuXG4gICAgICAgICAgICAvLyBObyBuZWVkIHRvIHN1cHBvcnQgeHRlcm0vbGVnYWN5IGZvcm1zIGFzIHh0ZXJtIGRvZXNuJ3Qgc3VwcG9ydCBDTVlLLlxuICAgICAgICAgICAgaWYgKCF1c2VkU3ViYXJncylcbiAgICAgICAgICAgICAgICByZXR1cm4geyBza2lwQ291bnQ6IDAgfTtcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgYXQgbGVhc3QgNSBhcmdzIGZvciBDTVlLLiAgSWYgd2UgZG9uJ3QgaGF2ZSB0aGVtLCBhc3N1bWVcbiAgICAgICAgICAgIC8vIHRoaXMgc2VxdWVuY2UgaXMgY29ycnVwdGVkLiAgV2UgaWdub3JlIHRoZSBjb2xvciBzcGFjZSBpZGVudGlmaWVyLFxuICAgICAgICAgICAgLy8gdG9sZXJhbmNlLCBldGMuLi5cbiAgICAgICAgICAgIGlmIChhcnkubGVuZ3RoIDwgNSlcbiAgICAgICAgICAgICAgICByZXR1cm4geyBza2lwQ291bnQ6IDAgfTtcbiAgICAgICAgICAgIC8vIFRPRE86IEltcGxlbWVudCB0aGlzLlxuICAgICAgICAgICAgLy8gTWlnaHQgd2FpdCB1bnRpbCBDU1M0IGlzIGFkb3B0ZWQgZm9yIGRldmljZS1jbXlrKCk6XG4gICAgICAgICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLWNvbG9yLTQvI2NteWstY29sb3JzXG4gICAgICAgICAgICAvLyBPciBub3JtYWxpemUgaXQgdG8gUkdCIG91cnNlbHZlczpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtY29sb3ItNC8jY215ay1yZ2JcbiAgICAgICAgICAgIGNvbnN0IGMgPSBhcnlbMV0gPj4gMDtcbiAgICAgICAgICAgIGNvbnN0IG0gPSBhcnlbMl0gPj4gMDtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBhcnlbM10gPj4gMDtcbiAgICAgICAgICAgIGNvbnN0IGsgPSBhcnlbNF0gPj4gMDtcbiAgICAgICAgICAgIHJldHVybiB7IHNraXBDb3VudDogMCB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgNToge1xuICAgICAgICAgICAgLy8gQ29sb3IgcGFsZXR0ZSBpbmRleC5cbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIHNob3J0IG9uIGFyZ3MsIGFzc3VtZSB0aGlzIHNlcXVlbmNlIGlzIGNvcnJ1cHRlZCwgc28gZG9uJ3RcbiAgICAgICAgICAgIC8vIGVhdCBhbnl0aGluZyBtb3JlLlxuICAgICAgICAgICAgaWYgKGFyeS5sZW5ndGggPCAyKVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHNraXBDb3VudDogMCB9O1xuICAgICAgICAgICAgLy8gU3VwcG9ydCAzODo1OlAgKElTTyA4NjEzLTYpIGFuZCAzODs1O1AgKHh0ZXJtL2xlZ2FjeSkuXG4gICAgICAgICAgICAvLyBXZSBhbHNvIGlnbm9yZSBleHRyYSBhcmdzIHdpdGggMzg6NTpQOlsuLi5dLCBidXQgbW9yZSBmb3IgbGF6aW5lc3MuXG4gICAgICAgICAgICBjb25zdCByZXQgPSB7XG4gICAgICAgICAgICAgICAgc2tpcENvdW50OiB1c2VkU3ViYXJncyA/IDAgOiAyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gYXJ5WzFdID4+IDA7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpZiAoY29sb3IgPCBhdHRycy5jb2xvclBhbGV0dGUubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHJldC5jb2xvciA9IGNvbG9yO1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5odGVybS5WVC5DQzFbJ1xceDFiJ10gPSBmdW5jdGlvbiAocGFyc2VTdGF0ZSkge1xuICAgIHBhcnNlU3RhdGUuZnVuYyA9IF9fcGFyc2VFU0M7XG59O1xuaHRlcm0uVlQuT1NDWyc1MiddID0gZnVuY3Rpb24gKHBhcnNlU3RhdGUpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKCF0aGlzLmVuYWJsZUNsaXBib2FyZFdyaXRlKVxuICAgICAgICByZXR1cm47XG4gICAgLy8gQXJncyBjb21lIGluIGFzIGEgc2luZ2xlICdjbGlwYm9hcmQ7YjY0LWRhdGEnIHN0cmluZy4gIFRoZSBjbGlwYm9hcmRcbiAgICAvLyBwYXJhbWV0ZXIgaXMgdXNlZCB0byBzZWxlY3Qgd2hpY2ggb2YgdGhlIFggY2xpcGJvYXJkcyB0byBhZGRyZXNzLiAgU2luY2VcbiAgICAvLyB3ZSdyZSBub3QgaW50ZWdyYXRpbmcgd2l0aCBYLCB3ZSB0cmVhdCB0aGVtIGFsbCB0aGUgc2FtZS5cbiAgICB2YXIgYXJncyA9IHBhcnNlU3RhdGUuYXJnc1swXS5tYXRjaCgvXltjcHMwMTIzNDU2N10qOyguKikvKTtcbiAgICBpZiAoIWFyZ3MpXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgZGF0YTtcbiAgICB0cnkge1xuICAgICAgICBkYXRhID0gd2luZG93LmF0b2IoYXJnc1sxXSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChkYXRhKVxuICAgICAgICB0aGlzLnRlcm1pbmFsLmNvcHlTdHJpbmdUb0NsaXBib2FyZCh0aGlzLmRlY29kZShkYXRhKSk7XG59O1xuaHRlcm0uVlQuT1NDWycxMzM3J10gPSBmdW5jdGlvbiAocGFyc2VTdGF0ZSkge1xuICAgIC8vIEJsaW5rIGV4dGVuc2lvblxuICAgIGlmIChwYXJzZVN0YXRlLmFyZ3NbMF0gPT09ICdCbGlua0F1dG9DUj0xJykge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMudGVybWluYWwuc2V0QXV0b0NhcnJpYWdlUmV0dXJuKHRydWUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2UgaWYgKHBhcnNlU3RhdGUuYXJnc1swXSA9PT0gJ0JsaW5rQXV0b0NSPTAnKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy50ZXJtaW5hbC5zZXRBdXRvQ2FycmlhZ2VSZXR1cm4oZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBibGlua1Byb21wdCA9IHBhcnNlU3RhdGUuYXJnc1swXS5tYXRjaCgvXkJsaW5rUHJvbXB0PSguKikkL20pO1xuICAgIGlmIChibGlua1Byb21wdCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMudGVybWluYWwucHJvbXB0LnByb21wdEI2NChibGlua1Byb21wdFsxXSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQXJncyBjb21lIGluIGFzIGEgc2V0IG9mIGtleSB2YWx1ZSBwYWlycyBmb2xsb3dlZCBieSBkYXRhLlxuICAgIC8vIEZpbGU9bmFtZT08YmFzZTY0PjtzaXplPTEyMztpbmxpbmU9MTo8YmFzZTY0IGRhdGE+XG4gICAgbGV0IGFyZ3MgPSBwYXJzZVN0YXRlLmFyZ3NbMF0ubWF0Y2goL15GaWxlPShbXjpdKik6KFtcXHNcXFNdKikkL20pO1xuICAgIGlmICghYXJncykge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0aGlzLndhcm5VbmltcGxlbWVudGVkKVxuICAgICAgICAgICAgY29uc29sZS5sb2coYGlUZXJtMiAxMzM3OiB1bnN1cHBvcnRlZCBzZXF1ZW5jZTogJHthcmdzWzFdfWApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICBzaXplOiAwLFxuICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiB0cnVlLFxuICAgICAgICBpbmxpbmU6IGZhbHNlLFxuICAgICAgICB3aWR0aDogJ2F1dG8nLFxuICAgICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgICAgYWxpZ246ICdsZWZ0JyxcbiAgICAgICAgdXJpOiAnZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LCcgK1xuICAgICAgICAgICAgYXJnc1syXS5yZXBsYWNlKC9bXFxuXFxyXSsvZ20sICcnKSxcbiAgICB9O1xuICAgIC8vIFdhbGsgdGhlIFwia2V5PXZhbHVlO1wiIHNldHMuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFyZ3NbMV0uc3BsaXQoJzsnKS5mb3JFYWNoKGVsZSA9PiB7XG4gICAgICAgIGNvbnN0IGt2ID0gZWxlLm1hdGNoKC9eKFtePV0rKT0oLiopJC9tKTtcbiAgICAgICAgaWYgKCFrdilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gU2FuaXRpemUgdmFsdWVzIG5pY2VseS5cbiAgICAgICAgc3dpdGNoIChrdlsxXSkge1xuICAgICAgICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5uYW1lID0gd2luZG93LmF0b2Ioa3ZbMl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzaXplJzpcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNpemUgPSBwYXJzZUludChrdlsyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dpZHRoJzpcbiAgICAgICAgICAgICAgICBvcHRpb25zLndpZHRoID0ga3ZbMl07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdoZWlnaHQnOlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuaGVpZ2h0ID0ga3ZbMl07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJzpcbiAgICAgICAgICAgICAgICBvcHRpb25zLnByZXNlcnZlQXNwZWN0UmF0aW8gPSAhKGt2WzJdID09ICcwJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpbmxpbmUnOlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuaW5saW5lID0gIShrdlsyXSA9PSAnMCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8gaHRlcm0tc3BlY2lmaWMga2V5cy5cbiAgICAgICAgICAgIGNhc2UgJ2FsaWduJzpcbiAgICAgICAgICAgICAgICBvcHRpb25zLmFsaWduID0ga3ZbMl07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIElnbm9yZSB1bmtub3duIGtleXMuICBEb24ndCB3YW50IHJlbW90ZSBzdHVmZmluZyBvdXIgSlMgZW52LlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suICBJZiB0aGUgYnVmZmVyIGhhcyBkYXRhIGZvbGxvd2luZyB0aGUgaW1hZ2UsIHdlXG4gICAgLy8gbmVlZCB0byBkZWxheSBwcm9jZXNzaW5nIG9mIGl0IHVudGlsIGFmdGVyIHdlJ3ZlIGZpbmlzaGVkIHdpdGggdGhlIGltYWdlLlxuICAgIC8vIE90aGVyd2lzZSB3aGlsZSB3ZSB3YWl0IGZvciB0aGUgdGhlIGltYWdlIHRvIGxvYWQgYXN5bmNocm9ub3VzbHksIHRoZSBuZXdcbiAgICAvLyB0ZXh0IGRhdGEgd2lsbCBpbnRlcm1pbmdsZSB3aXRoIHRoZSBpbWFnZS5cbiAgICBpZiAob3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCBpbyA9IHRoaXMudGVybWluYWwuaW87XG4gICAgICAgIGNvbnN0IHF1ZXVlZCA9IHBhcnNlU3RhdGUucGVla1JlbWFpbmluZ0J1ZigpO1xuICAgICAgICBwYXJzZVN0YXRlLmFkdmFuY2UocXVldWVkLmxlbmd0aCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy50ZXJtaW5hbC5kaXNwbGF5SW1hZ2Uob3B0aW9ucyk7XG4gICAgICAgIGlvLndyaXRlVVRGOChxdWV1ZWQpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgdGhpcy50ZXJtaW5hbC5kaXNwbGF5SW1hZ2Uob3B0aW9ucyk7XG59O1xuLyoqXG4gKiBTZXQvcmVhZCBjb2xvciBwYWxldHRlLlxuICovXG5odGVybS5WVC5PU0NbJzQnXSA9IGZ1bmN0aW9uIChwYXJzZVN0YXRlKSB7XG4gICAgLy8gQXJncyBjb21lIGluIGFzIGEgc2luZ2xlICdpbmRleDE7cmdiMSAuLi4gO2luZGV4TjtyZ2JOJyBzdHJpbmcuXG4gICAgLy8gV2Ugc3BsaXQgb24gdGhlIHNlbWljb2xvbiBhbmQgaXRlcmF0ZSB0aHJvdWdoIHRoZSBwYWlycy5cbiAgICB2YXIgYXJncyA9IHBhcnNlU3RhdGUuYXJnc1swXS5zcGxpdCgnOycpO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgcGFpckNvdW50ID0gcGFyc2VJbnQoYXJncy5sZW5ndGggLyAyKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIGNvbG9yUGFsZXR0ZSA9IHRoaXMudGVybWluYWwuZ2V0VGV4dEF0dHJpYnV0ZXMoKS5jb2xvclBhbGV0dGU7XG4gICAgdmFyIHJlc3BvbnNlQXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBwYWlyTnVtYmVyID0gMDsgcGFpck51bWJlciA8IHBhaXJDb3VudDsgKytwYWlyTnVtYmVyKSB7XG4gICAgICAgIHZhciBjb2xvckluZGV4ID0gcGFyc2VJbnQoYXJnc1twYWlyTnVtYmVyICogMl0pO1xuICAgICAgICB2YXIgY29sb3JWYWx1ZSA9IGFyZ3NbcGFpck51bWJlciAqIDIgKyAxXTtcbiAgICAgICAgaWYgKGNvbG9ySW5kZXggPj0gY29sb3JQYWxldHRlLmxlbmd0aClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoY29sb3JWYWx1ZSA9PSAnPycpIHtcbiAgICAgICAgICAgIC8vICc/JyBtZWFucyB3ZSBzaG91bGQgcmVwb3J0IGJhY2sgdGhlIGN1cnJlbnQgY29sb3IgdmFsdWUuXG4gICAgICAgICAgICBjb2xvclZhbHVlID0gbGliLmNvbG9ycy5yZ2JUb1gxMShjb2xvclBhbGV0dGVbY29sb3JJbmRleF0pO1xuICAgICAgICAgICAgaWYgKGNvbG9yVmFsdWUpXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VBcnJheS5wdXNoKGNvbG9ySW5kZXggKyAnOycgKyBjb2xvclZhbHVlKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbG9yVmFsdWUgPSBsaWIuY29sb3JzLngxMVRvQ1NTKGNvbG9yVmFsdWUpO1xuICAgICAgICBpZiAoY29sb3JWYWx1ZSlcbiAgICAgICAgICAgIGNvbG9yUGFsZXR0ZVtjb2xvckluZGV4XSA9IGNvbG9yVmFsdWU7XG4gICAgfVxuICAgIGlmIChyZXNwb25zZUFycmF5Lmxlbmd0aClcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLnRlcm1pbmFsLmlvLnNlbmRTdHJpbmcoJ1xceDFiXTQ7JyArIHJlc3BvbnNlQXJyYXkuam9pbignOycpICsgJ1xceDA3Jyk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRoaXMudGVybWluYWwuZ2V0VGV4dEF0dHJpYnV0ZXMoKS5yZWZyZXNoQ1NTUGFsZXR0ZSgpO1xufTtcbi8qKlxuICogQ2hhbmdlL1JlYWQgVlQxMDAgdGV4dCBmb3JlZ3JvdW5kIGNvbG9yLlxuICovXG5odGVybS5WVC5PU0NbJzEwJ10gPSBmdW5jdGlvbiAocGFyc2VTdGF0ZSkge1xuICAgIC8vIEFyZ3MgY29tZSBpbiBhcyBhIHNpbmdsZSBzdHJpbmcsIGJ1dCBleHRyYSBhcmdzIHdpbGwgY2hhaW4gdG8gdGhlIGZvbGxvd2luZ1xuICAgIC8vIE9TQyBzZXF1ZW5jZXMuXG4gICAgdmFyIGFyZ3MgPSBwYXJzZVN0YXRlLmFyZ3NbMF0uc3BsaXQoJzsnKTtcbiAgICBpZiAoIWFyZ3MpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgY29sb3JBcmcgPSBhcmdzLnNoaWZ0KCk7XG4gICAgaWYgKGNvbG9yQXJnID09ICc/Jykge1xuICAgICAgICAvLyAnPycgbWVhbnMgd2Ugc2hvdWxkIHJlcG9ydCBiYWNrIHRoZSBjdXJyZW50IGNvbG9yIHZhbHVlLlxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHZhciBjb2xvclZhbHVlID0gbGliLmNvbG9ycy5yZ2JUb1gxMSh0aGlzLnRlcm1pbmFsLmdldEZvcmVncm91bmRDb2xvcigpKTtcbiAgICAgICAgaWYgKGNvbG9yVmFsdWUpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRoaXMudGVybWluYWwuaW8uc2VuZFN0cmluZygnXFx4MWJdMTA7JyArIGNvbG9yVmFsdWUgKyAnXFx4MDcnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIGNvbG9yWDExID0gbGliLmNvbG9ycy54MTFUb0NTUyhjb2xvckFyZyk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGNvbG9yWDExKVxuICAgICAgICAgICAgdGhpcy50ZXJtaW5hbC5zZXRGb3JlZ3JvdW5kQ29sb3IoY29sb3JYMTEpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMudGVybWluYWwuZ2V0VGV4dEF0dHJpYnV0ZXMoKS5yZWZyZXNoQ1NTUGFsZXR0ZSgpO1xuICAgIH1cbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHBhcnNlU3RhdGUuYXJnc1swXSA9IGFyZ3Muam9pbignOycpO1xuICAgICAgICBodGVybS5WVC5PU0NbJzExJ10uYXBwbHkodGhpcywgW3BhcnNlU3RhdGVdKTtcbiAgICB9XG59O1xuLyoqXG4gKiBDaGFuZ2UvUmVhZCBWVDEwMCB0ZXh0IGJhY2tncm91bmQgY29sb3IuXG4gKi9cbmh0ZXJtLlZULk9TQ1snMTEnXSA9IGZ1bmN0aW9uIChwYXJzZVN0YXRlKSB7XG4gICAgLy8gQXJncyBjb21lIGluIGFzIGEgc2luZ2xlIHN0cmluZywgYnV0IGV4dHJhIGFyZ3Mgd2lsbCBjaGFpbiB0byB0aGUgZm9sbG93aW5nXG4gICAgLy8gT1NDIHNlcXVlbmNlcy5cbiAgICB2YXIgYXJncyA9IHBhcnNlU3RhdGUuYXJnc1swXS5zcGxpdCgnOycpO1xuICAgIGlmICghYXJncylcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBjb2xvckFyZyA9IGFyZ3Muc2hpZnQoKTtcbiAgICBpZiAoY29sb3JBcmcgPT0gJz8nKSB7XG4gICAgICAgIC8vICc/JyBtZWFucyB3ZSBzaG91bGQgcmVwb3J0IGJhY2sgdGhlIGN1cnJlbnQgY29sb3IgdmFsdWUuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdmFyIGNvbG9yVmFsdWUgPSBsaWIuY29sb3JzLnJnYlRvWDExKHRoaXMudGVybWluYWwuZ2V0QmFja2dyb3VuZENvbG9yKCkpO1xuICAgICAgICBpZiAoY29sb3JWYWx1ZSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGhpcy50ZXJtaW5hbC5pby5zZW5kU3RyaW5nKCdcXHgxYl0xMTsnICsgY29sb3JWYWx1ZSArICdcXHgwNycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgY29sb3JYMTEgPSBsaWIuY29sb3JzLngxMVRvQ1NTKGNvbG9yQXJnKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoY29sb3JYMTEpXG4gICAgICAgICAgICB0aGlzLnRlcm1pbmFsLnNldEJhY2tncm91bmRDb2xvcihjb2xvclgxMSk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy50ZXJtaW5hbC5nZXRUZXh0QXR0cmlidXRlcygpLnJlZnJlc2hDU1NQYWxldHRlKCk7XG4gICAgfVxuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcGFyc2VTdGF0ZS5hcmdzWzBdID0gYXJncy5qb2luKCc7Jyk7XG4gICAgICAgIGh0ZXJtLlZULk9TQ1snMTInXS5hcHBseSh0aGlzLCBbcGFyc2VTdGF0ZV0pO1xuICAgIH1cbn07XG5bJ0NDMScsICdFU0MnLCAnQ1NJJywgJ09TQycsICdWVDUyJ10uZm9yRWFjaCh0eXBlID0+IHtcbiAgICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgb2JqID0gaHRlcm0uVlRbdHlwZV07XG4gICAgT2JqZWN0LmtleXMob2JqKS5tYXAoayA9PiB7XG4gICAgICAgIG1hcC5zZXQoaywgb2JqW2tdKTtcbiAgICB9KTtcbiAgICBfVlRNYXBzLnNldCh0eXBlLCBtYXApO1xufSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgQ09MT1JTID0gMjU2O1xuZXhwb3J0IGNvbnN0IFdDX1BSRUNBTENVTEFURURfQ0xBU1NFUyA9IDMwMDtcbnZhciBfX2ZjID0gbmV3IEFycmF5KENPTE9SUyk7IC8vIGZvcmVncm91bmQgY29sb3JcbnZhciBfX2JjID0gbmV3IEFycmF5KENPTE9SUyk7IC8vIGJhY2tncm91bmQgY29sb3JcbnZhciBfX3VjID0gbmV3IEFycmF5KENPTE9SUyk7IC8vIHVuZGVybGluZSBjb2xvclxudmFyIF9fYiA9ICdiJzsgLy8gYm9sZFxudmFyIF9faSA9ICdpJzsgLy8gaXRhbGljXG52YXIgX19ibGluayA9ICdibGluay1ub2RlJztcbnZhciBfX3UgPSAndSc7IC8vIHVuZGVybGluZVxudmFyIF9fcyA9ICdzJzsgLy8gc3RyaWtldGhyb3VnaFxudmFyIF9fdXMgPSAndXMnOyAvLyB1bmRlcmxpbmUgYW5kIHN0cmlrZXRocm91Z2hcbnZhciBfX3V1ID0ge1xuICAgIHNvbGlkOiAndTEnLFxuICAgIGRvdWJsZTogJ3UyJyxcbiAgICB3YXZ5OiAndTMnLFxuICAgIGRvdHRlZDogJ3U0JyxcbiAgICBkYXNoZWQ6ICd1NScsXG59OyAvLyB1bmRlcmxpbmVcbmZvciAodmFyIGkgPSAwOyBpIDwgQ09MT1JTOyBpKyspIHtcbiAgICBfX2ZjW2ldID0gJ2MnICsgaTtcbiAgICBfX2JjW2ldID0gJ2JjJyArIGk7XG4gICAgX191Y1tpXSA9ICd1YycgKyBpO1xufVxuLy8gaHR0cHM6Ly9tZWRpdW0uY29tL3JlYWN0bmF0aXZlL2Vtb2ppcy1pbi1qYXZhc2NyaXB0LWY2OTNkMGViNzlmYlxuY29uc3QgX2Vtb2ppUmVnZXggPSAvKD86W1xcdTI3MDAtXFx1MjdiZl18KD86XFx1ZDgzY1tcXHVkZGU2LVxcdWRkZmZdKXsyfXxbXFx1ZDgwMC1cXHVkYmZmXVtcXHVkYzAwLVxcdWRmZmZdfFtcXHUwMDIzLVxcdTAwMzldXFx1ZmUwZj9cXHUyMGUzfFxcdTMyOTl8XFx1MzI5N3xcXHUzMDNkfFxcdTMwMzB8XFx1MjRjMnxcXHVkODNjW1xcdWRkNzAtXFx1ZGQ3MV18XFx1ZDgzY1tcXHVkZDdlLVxcdWRkN2ZdfFxcdWQ4M2NcXHVkZDhlfFxcdWQ4M2NbXFx1ZGQ5MS1cXHVkZDlhXXxcXHVkODNjW1xcdWRkZTYtXFx1ZGRmZl18W1xcdWQ4M2NbXFx1ZGUwMS1cXHVkZTAyXXxcXHVkODNjXFx1ZGUxYXxcXHVkODNjXFx1ZGUyZnxbXFx1ZDgzY1tcXHVkZTMyLVxcdWRlM2FdfFtcXHVkODNjW1xcdWRlNTAtXFx1ZGU1MV18XFx1MjAzY3xcXHUyMDQ5fFtcXHUyNWFhLVxcdTI1YWJdfFxcdTI1YjZ8XFx1MjVjMHxbXFx1MjVmYi1cXHUyNWZlXXxcXHUwMGE5fFxcdTAwYWV8XFx1MjEyMnxcXHUyMTM5fFxcdWQ4M2NcXHVkYzA0fFtcXHUyNjAwLVxcdTI2RkZdfFxcdTJiMDV8XFx1MmIwNnxcXHUyYjA3fFxcdTJiMWJ8XFx1MmIxY3xcXHUyYjUwfFxcdTJiNTV8XFx1MjMxYXxcXHUyMzFifFxcdTIzMjh8XFx1MjNjZnxbXFx1MjNlOS1cXHUyM2YzXXxbXFx1MjNmOC1cXHUyM2ZhXXxcXHVkODNjXFx1ZGNjZnxcXHUyOTM0fFxcdTI5MzV8W1xcdTIxOTAtXFx1MjFmZl0pLztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJOb2RlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fdiA9IC0xO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnByb3BzLm5vZGU7XG4gICAgICAgIGNvbnN0IGF0dHJzID0gbm9kZS5hdHRycztcbiAgICAgICAgdGhpcy5fdiA9IG5vZGUudjtcbiAgICAgICAgLy8gRmFzdCBwYXRoXG4gICAgICAgIGlmIChhdHRycy5pc0RlZmF1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnR4dDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY2xhc3NlcyA9IFtdO1xuICAgICAgICAvLyBpZiBjb2xvcnMgPCAyNTYgd2UgaGF2ZSB0aGVtIGluIGNsYXNzTmFtZVxuICAgICAgICAvLyBvdGhlcndpc2Ugc2V0IHRoZW0gd2l0aCBzdHlsZVxuICAgICAgICB2YXIgc3R5bGUgPSBudWxsO1xuICAgICAgICBpZiAoYXR0cnMuZmNpID49IDApIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaChfX2ZjW2F0dHJzLmZjaV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGF0dHJzLmZjcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdHlsZSA9IHN0eWxlIHx8IHt9O1xuICAgICAgICAgICAgc3R5bGUuY29sb3IgPSBhdHRycy5mY3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dHJzLmJjaSA+PSAwKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goX19iY1thdHRycy5iY2ldKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhdHRycy5iY3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3R5bGUgPSBzdHlsZSB8fCB7fTtcbiAgICAgICAgICAgIHN0eWxlLmJhY2tncm91bmRDb2xvciA9IGF0dHJzLmJjcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXR0cnMudWNpID49IDApIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaChfX3VjW2F0dHJzLnVjaV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGF0dHJzLnVjcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdHlsZSA9IHN0eWxlIHx8IHt9O1xuICAgICAgICAgICAgc3R5bGUudGV4dERlY29yYXRpb25Db2xvciA9IGF0dHJzLnVjcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXR0cnMuYm9sZCkge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKF9fYik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dHJzLml0YWxpYykge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKF9faSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dHJzLmJsaW5rKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goX19ibGluayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dHJzLnVuZGVybGluZSkge1xuICAgICAgICAgICAgaWYgKGF0dHJzLnN0cmlrZXRocm91Z2gpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goX191cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goX191KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaChfX3V1W2F0dHJzLnVuZGVybGluZV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGF0dHJzLnN0cmlrZXRocm91Z2gpIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaChfX3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXR0cnMuYXNjaWlOb2RlKSB7XG4gICAgICAgICAgICBpZiAoYXR0cnMud2NOb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF9lbW9qaVJlZ2V4LnRlc3Qobm9kZS50eHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnd2Mgd2Mtbm9kZSBlbW9qaScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCd3YyB3Yy1ub2RlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobm9kZS53Y3cgPCBXQ19QUkVDQUxDVUxBVEVEX0NMQVNTRVMpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ3djIHdjJyArIG5vZGUud2N3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnd2MnKTtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IHN0eWxlIHx8IHt9O1xuICAgICAgICAgICAgICAgIHN0eWxlLndpZHRoID0gJ2NhbGModmFyKC0taHRlcm0tY2hhcnNpemUtd2lkdGgpICogJyArIG5vZGUud2N3ICsgJyknO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb3BzID0ge307XG4gICAgICAgIGlmIChjbGFzc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgcHJvcHMuY2xhc3NOYW1lID0gY2xhc3Nlcy5qb2luKCcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0eWxlKSB7XG4gICAgICAgICAgICBwcm9wcy5zdHlsZSA9IHN0eWxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgcHJvcHMsIG5vZGUudHh0KTtcbiAgICB9XG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgICByZXR1cm4gdGhpcy5fdiAhPT0gbmV4dFByb3BzLm5vZGUudjtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJOb2RlIGZyb20gJy4vUk5vZGUnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUlJvdyBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX3YgPSAtMTtcbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuX3YgPSB0aGlzLnByb3BzLnJvdy52O1xuICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMucHJvcHMucm93Lm5vZGVzO1xuICAgICAgICBjb25zdCBsZW4gPSBub2Rlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gbmV3IEFycmF5KGxlbik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgIGVsZW1lbnRzW2ldID0gUmVhY3QuY3JlYXRlRWxlbWVudChSTm9kZSwgeyBrZXk6IG5vZGUua2V5LCBub2RlIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnJvdy5pbWcpIHtcbiAgICAgICAgICAgIGVsZW1lbnRzLnB1c2godGhpcy5fcmVuZGVySW1hZ2UodGhpcy5wcm9wcy5yb3cuaW1nKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3gtcm93JywgbnVsbCwgZWxlbWVudHMpO1xuICAgIH1cbiAgICBfcmVuZGVySW1hZ2UoaW1nKSB7XG4gICAgICAgIHZhciBpbWFnZUVsZW1lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7XG4gICAgICAgICAgICBzcmM6IGltZy5zcmMsXG4gICAgICAgICAgICBhbHQ6IGltZy5hbHQsXG4gICAgICAgICAgICB0aXRsZTogaW1nLnRpdGxlLFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICBvYmplY3RGaXQ6IGltZy5vYmplY3RGaXQsXG4gICAgICAgICAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGBjYWxjKCR7aW1nLnBhZFJvd3N9ICogdmFyKC0taHRlcm0tY2hhcnNpemUtaGVpZ2h0KSlgLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgICAga2V5OiAnaW1hZ2UnLFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IGltZy50ZXh0QWxpZ24sXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnY2FsYyh2YXIoLS1odGVybS1jaGFyc2l6ZS1oZWlnaHQpKScsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LCBpbWFnZUVsZW1lbnQpO1xuICAgIH1cbiAgICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92ICE9PSBuZXh0UHJvcHMucm93LnY7XG4gICAgfVxuICAgIHRvdWNoKCkge1xuICAgICAgICBpZiAodGhpcy5fZGlydHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJSb3cgZnJvbSAnLi9SUm93JztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJSb3dMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yb3dzID0gW107XG4gICAgICAgIHRoaXMuX3Jvd3NNYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qgcm93cyA9IHRoaXMuX3Jvd3M7XG4gICAgICAgIGNvbnN0IGxlbiA9IHJvd3MubGVuZ3RoO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gbmV3IEFycmF5KGxlbik7XG4gICAgICAgIGNvbnN0IHJvd3NNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IHJvd3NbaV07XG4gICAgICAgICAgICBjb25zdCBrZXkgPSByb3cua2V5O1xuICAgICAgICAgICAgY29uc3QgcmVmID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBlbGVtZW50c1tpXSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUlJvdywgeyBrZXksIHJlZiwgcm93IH0pO1xuICAgICAgICAgICAgcm93c01hcC5zZXQoa2V5LCByZWYpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jvd3NNYXAgPSByb3dzTWFwO1xuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgfVxuICAgIHNldFJvd3Mocm93cykge1xuICAgICAgICB0aGlzLl9yb3dzID0gcm93cztcbiAgICAgICAgdGhpcy50b3VjaCgpO1xuICAgIH1cbiAgICB0b3VjaFJvdyhyb3cpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RpcnR5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlZiA9IHRoaXMuX3Jvd3NNYXAuZ2V0KHJvdy5rZXkpO1xuICAgICAgICBpZiAocmVmICYmIHJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICByZWYuY3VycmVudC50b3VjaCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvdWNoKCkge1xuICAgICAgICBpZiAodGhpcy5fZGlydHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICB9XG59XG4iLCJmdW5jdGlvbiBfX25zRW5jb2RlQ0dTaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICByZXR1cm4gYHske3dpZHRofSwgJHtoZWlnaHR9fWA7XG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXS1Njcm9sbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl94ID0gLTE7XG4gICAgICAgIHRoaXMuX3kgPSAtMTtcbiAgICAgICAgdGhpcy5fdmlld1dpZHRoID0gMDtcbiAgICAgICAgdGhpcy5fdmlld0hlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRXaWR0aCA9IDA7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRIZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLl9jYWxsYmFjayA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuICAgIF9wb3N0TWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIGxldCBoYW5kbGVyID0gd2luZG93LndlYmtpdC5tZXNzYWdlSGFuZGxlcnMud2tTY3JvbGxlcjtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGhhbmRsZXIucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXREaW1lbnNpb25zKHZpZXdXaWR0aCwgdmlld0hlaWdodCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0KSB7XG4gICAgICAgIGxldCBuZWVkVG9Qb3N0ID0gZmFsc2U7XG4gICAgICAgIGlmICh2aWV3V2lkdGggIT0gbnVsbCAmJiB0aGlzLl92aWV3V2lkdGggIT09IHZpZXdXaWR0aCkge1xuICAgICAgICAgICAgdGhpcy5fdmlld1dpZHRoID0gdmlld1dpZHRoO1xuICAgICAgICAgICAgbmVlZFRvUG9zdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpZXdIZWlnaHQgIT0gbnVsbCAmJiB0aGlzLl92aWV3SGVpZ2h0ICE9PSB2aWV3SGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLl92aWV3SGVpZ2h0ID0gdmlld0hlaWdodDtcbiAgICAgICAgICAgIG5lZWRUb1Bvc3QgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZW50V2lkdGggIT0gbnVsbCAmJiB0aGlzLl9jb250ZW50V2lkdGggIT09IGNvbnRlbnRXaWR0aCkge1xuICAgICAgICAgICAgdGhpcy5fY29udGVudFdpZHRoID0gY29udGVudFdpZHRoO1xuICAgICAgICAgICAgbmVlZFRvUG9zdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRlbnRIZWlnaHQgIT0gbnVsbCAmJiB0aGlzLl9jb250ZW50SGVpZ2h0ICE9PSBjb250ZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZW50SGVpZ2h0ID0gY29udGVudEhlaWdodDtcbiAgICAgICAgICAgIG5lZWRUb1Bvc3QgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbmVlZFRvUG9zdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Bvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIG9wOiAncmVzaXplJyxcbiAgICAgICAgICAgIHZpZXdTaXplOiBfX25zRW5jb2RlQ0dTaXplKHRoaXMuX3ZpZXdXaWR0aCwgdGhpcy5fdmlld0hlaWdodCksXG4gICAgICAgICAgICBjb250ZW50U2l6ZTogX19uc0VuY29kZUNHU2l6ZSh0aGlzLl9jb250ZW50V2lkdGgsIHRoaXMuX2NvbnRlbnRIZWlnaHQpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVwb3J0U2Nyb2xsKHgsIHksIHopIHtcbiAgICAgICAgdGhpcy5feCA9IHg7XG4gICAgICAgIHRoaXMuX3kgPSB5O1xuICAgICAgICBpZiAodGhpcy5fY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrKHgsIHksIHopO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNjcm9sbFRvKHgsIHksIGFuaW1hdGVkKSB7XG4gICAgICAgIGlmICh0aGlzLl94ID09PSB4ICYmIHRoaXMuX3kgPT09IHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl94ID0geDtcbiAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgIHRoaXMuX3Bvc3RNZXNzYWdlKHsgb3A6ICdzY3JvbGxUbycsIHgsIHksIGFuaW1hdGVkIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IGh0ZXJtLCBsaWIgfSBmcm9tICcuLi9odGVybV9hbGwnO1xuaW1wb3J0IFJSb3dMaXN0IGZyb20gJy4vUlJvd0xpc3QnO1xuaW1wb3J0IFdLU2Nyb2xsZXIgZnJvbSAnLi9zY3JvbGxlci9XS1Njcm9sbGVyJztcbmxldCBfX3NjcmVlblNpemUgPSB7IGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0LCB3aWR0aDogd2luZG93LmlubmVyV2lkdGggfTtcbmxldCBfX3BhZ2VZT2Zmc2V0ID0gMDtcbnZhciBfX2ZpbmRSZWFjdENvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGVsKSB7XG4gICAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnX19yZWFjdEludGVybmFsSW5zdGFuY2UkJykpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpYmVyTm9kZSA9IGVsW2tleV07XG4gICAgICAgICAgICByZXR1cm4gZmliZXJOb2RlICYmIGZpYmVyTm9kZS5yZXR1cm4gJiYgZmliZXJOb2RlLnJldHVybi5zdGF0ZU5vZGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuaHRlcm0uU2Nyb2xsUG9ydC5TZWxlY3Rpb24ucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIC8vIFRoZSBkb20gc2VsZWN0aW9uIG9iamVjdCBoYXMgbm8gd2F5IHRvIHRlbGwgd2hpY2ggbm9kZXMgY29tZSBmaXJzdCBpblxuICAgIC8vIHRoZSBkb2N1bWVudCwgc28gd2UgaGF2ZSB0byBmaWd1cmUgdGhhdCBvdXQuXG4gICAgLy9cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hlbiB3ZSBkZXRlY3QgdGhhdCB0aGUgXCJhbmNob3JcIiBub2RlIGlzIGZpcnN0LlxuICAgIGZ1bmN0aW9uIGFuY2hvckZpcnN0KCkge1xuICAgICAgICBzZWxmLnN0YXJ0Um93ID0gYW5jaG9yUm93O1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHNlbGYuc3RhcnROb2RlID0gc2VsZWN0aW9uLmFuY2hvck5vZGU7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgc2VsZi5zdGFydE9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQ7XG4gICAgICAgIHNlbGYuZW5kUm93ID0gZm9jdXNSb3c7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgc2VsZi5lbmROb2RlID0gc2VsZWN0aW9uLmZvY3VzTm9kZTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBzZWxmLmVuZE9mZnNldCA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcbiAgICB9XG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHdoZW4gd2UgZGV0ZWN0IHRoYXQgdGhlIFwiZm9jdXNcIiBub2RlIGlzIGZpcnN0LlxuICAgIGZ1bmN0aW9uIGZvY3VzRmlyc3QoKSB7XG4gICAgICAgIHNlbGYuc3RhcnRSb3cgPSBmb2N1c1JvdztcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBzZWxmLnN0YXJ0Tm9kZSA9IHNlbGVjdGlvbi5mb2N1c05vZGU7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgc2VsZi5zdGFydE9mZnNldCA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcbiAgICAgICAgc2VsZi5lbmRSb3cgPSBhbmNob3JSb3c7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgc2VsZi5lbmROb2RlID0gc2VsZWN0aW9uLmFuY2hvck5vZGU7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgc2VsZi5lbmRPZmZzZXQgPSBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xuICAgIH1cbiAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgIHRoaXMuc3RhcnRSb3cgPSBudWxsO1xuICAgIHRoaXMuZW5kUm93ID0gbnVsbDtcbiAgICB0aGlzLmlzTXVsdGlsaW5lID0gbnVsbDtcbiAgICB0aGlzLmlzQ29sbGFwc2VkID0gIXNlbGVjdGlvbiB8fCBzZWxlY3Rpb24uaXNDb2xsYXBzZWQ7XG4gICAgaWYgKHRoaXMuaXNDb2xsYXBzZWQpXG4gICAgICAgIHJldHVybjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdmFyIGFuY2hvclJvdyA9IHNlbGVjdGlvbi5hbmNob3JOb2RlO1xuICAgIHdoaWxlIChhbmNob3JSb3cgJiYgYW5jaG9yUm93Lm5vZGVOYW1lICE9PSAnWC1ST1cnKSB7XG4gICAgICAgIGFuY2hvclJvdyA9IGFuY2hvclJvdy5wYXJlbnROb2RlO1xuICAgIH1cbiAgICBpZiAoIWFuY2hvclJvdykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdTZWxlY3Rpb24gYW5jaG9yIGlzIG5vdCByb290ZWQgaW4gYSByb3cgbm9kZTogJyArXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBzZWxlY3Rpb24uYW5jaG9yTm9kZS5ub2RlTmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFuY2hvclJvdy5yb3dJbmRleCA9IF9fZmluZFJlYWN0Q29tcG9uZW50KGFuY2hvclJvdykucHJvcHMucm93Lm47XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBmb2N1c1JvdyA9IHNlbGVjdGlvbi5mb2N1c05vZGU7XG4gICAgd2hpbGUgKGZvY3VzUm93ICYmIGZvY3VzUm93Lm5vZGVOYW1lICE9PSAnWC1ST1cnKSB7XG4gICAgICAgIGZvY3VzUm93ID0gZm9jdXNSb3cucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgaWYgKCFmb2N1c1Jvdykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdTZWxlY3Rpb24gZm9jdXMgaXMgbm90IHJvb3RlZCBpbiBhIHJvdyBub2RlOiAnICtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHNlbGVjdGlvbi5mb2N1c05vZGUubm9kZU5hbWUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBmb2N1c1Jvdy5yb3dJbmRleCA9IF9fZmluZFJlYWN0Q29tcG9uZW50KGZvY3VzUm93KS5wcm9wcy5yb3cubjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKGFuY2hvclJvdy5yb3dJbmRleCA8IGZvY3VzUm93LnJvd0luZGV4KSB7XG4gICAgICAgIGFuY2hvckZpcnN0KCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICB9XG4gICAgZWxzZSBpZiAoYW5jaG9yUm93LnJvd0luZGV4ID4gZm9jdXNSb3cucm93SW5kZXgpIHtcbiAgICAgICAgZm9jdXNGaXJzdCgpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgfVxuICAgIGVsc2UgaWYgKHNlbGVjdGlvbi5mb2N1c05vZGUgPT0gc2VsZWN0aW9uLmFuY2hvck5vZGUpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoc2VsZWN0aW9uLmFuY2hvck9mZnNldCA8IHNlbGVjdGlvbi5mb2N1c09mZnNldCkge1xuICAgICAgICAgICAgYW5jaG9yRmlyc3QoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvY3VzRmlyc3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gVGhlIHNlbGVjdGlvbiBzdGFydHMgYW5kIGVuZHMgaW4gdGhlIHNhbWUgcm93LCBidXQgaXNuJ3QgY29udGFpbmVkIGFsbFxuICAgICAgICAvLyBpbiBhIHNpbmdsZSBub2RlLlxuICAgICAgICB2YXIgZmlyc3ROb2RlID0gdGhpcy5maW5kRmlyc3RDaGlsZChhbmNob3JSb3csIFtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgc2VsZWN0aW9uLmZvY3VzTm9kZSxcbiAgICAgICAgXSk7XG4gICAgICAgIGlmICghZmlyc3ROb2RlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGVycm9yIHN5bmNpbmcgc2VsZWN0aW9uLicpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChmaXJzdE5vZGUgPT0gc2VsZWN0aW9uLmFuY2hvck5vZGUpIHtcbiAgICAgICAgICAgIGFuY2hvckZpcnN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb2N1c0ZpcnN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHRoaXMuaXNNdWx0aWxpbmUgPSBhbmNob3JSb3cucm93SW5kZXggIT0gZm9jdXNSb3cucm93SW5kZXg7XG59O1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuZGVjb3JhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kaXZfID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZGl2Xyk7XG4gICAgLy90aGlzLmlmcmFtZV8gPSB3aW5kb3cuZG9jdW1lbnQuYm9keTsgLy9kaXYub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAvL3RoaXMuaWZyYW1lXy5zdHlsZS5jc3NUZXh0ID1cbiAgICAvLydib3JkZXI6IDA7JyArICdoZWlnaHQ6IDEwMCU7JyArICdwb3NpdGlvbjogYWJzb2x1dGU7JyArICd3aWR0aDogMTAwJSc7XG4gICAgLy8vL2Rpdi5hcHBlbmRDaGlsZCh0aGlzLmlmcmFtZV8pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplXy5iaW5kKHRoaXMpKTtcbiAgICB2YXIgZG9jID0gd2luZG93LmRvY3VtZW50O1xuICAgIHRoaXMuZG9jdW1lbnRfID0gZG9jO1xuICAgIGRvYy5ib2R5LnN0eWxlLmNzc1RleHQgPVxuICAgICAgICAnbWFyZ2luOiAwcHg7JyArXG4gICAgICAgICAgICAncGFkZGluZzogMHB4OycgK1xuICAgICAgICAgICAgJ2hlaWdodDogMTAwJTsnICtcbiAgICAgICAgICAgICd3aWR0aDogMTAwJTsnICtcbiAgICAgICAgICAgICdvdmVyZmxvdzogaGlkZGVuOycgK1xuICAgICAgICAgICAgJ2N1cnNvcjogdmFyKC0taHRlcm0tbW91c2UtY3Vyc29yLXN0eWxlKTsnICtcbiAgICAgICAgICAgICctd2Via2l0LXVzZXItc2VsZWN0OiBub25lOycgK1xuICAgICAgICAgICAgJy1tb3otdXNlci1zZWxlY3Q6IG5vbmU7JztcbiAgICB2YXIgc3R5bGUgPSBkb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzdHlsZS50ZXh0Q29udGVudCA9XG4gICAgICAgICd4LXJvdyB7JyArXG4gICAgICAgICAgICAnICBkaXNwbGF5OiBibG9jazsnICtcbiAgICAgICAgICAgICcgIGhlaWdodDogdmFyKC0taHRlcm0tY2hhcnNpemUtaGVpZ2h0KTsnICtcbiAgICAgICAgICAgICcgIGxpbmUtaGVpZ2h0OiB2YXIoLS1odGVybS1jaGFyc2l6ZS1oZWlnaHQpOycgK1xuICAgICAgICAgICAgJyAgaXNvbGF0aW9uOiBpc29sYXRlOycgK1xuICAgICAgICAgICAgJ30nO1xuICAgIGRvYy5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB0aGlzLnVzZXJDc3NMaW5rXyA9IGRvYy5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgdGhpcy51c2VyQ3NzTGlua18uc2V0QXR0cmlidXRlKCdyZWwnLCAnc3R5bGVzaGVldCcpO1xuICAgIHRoaXMudXNlckNzc1RleHRfID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQodGhpcy51c2VyQ3NzVGV4dF8pO1xuICAgIC8vIFRPRE8ocmdpbmRhKTogU29ycnksIHRoaXMgJ3NjcmVlbl8nIGlzbid0IHRoZSBzYW1lIHRoaW5nIGFzIGh0ZXJtLlNjcmVlblxuICAgIC8vIGZyb20gc2NyZWVuLmpzLiAgSSBuZWVkIHRvIHBpY2sgYSBiZXR0ZXIgbmFtZSBmb3Igb25lIG9mIHRoZW0gdG8gYXZvaWRcbiAgICAvLyB0aGUgY29sbGlzaW9uLlxuICAgIC8vIFdlIG1ha2UgdGhpcyBmaWVsZCBlZGl0YWJsZSBldmVuIHRob3VnaCB3ZSBkb24ndCBhY3R1YWxseSBhbGxvdyBhbnl0aGluZ1xuICAgIC8vIHRvIGJlIGVkaXRlZCBoZXJlIHNvIHRoYXQgQ2hyb21lIHdpbGwgZG8gdGhlIHJpZ2h0IHRoaW5nIHdpdGggdmlydHVhbFxuICAgIC8vIGtleWJvYXJkcyBhbmQgSU1Fcy4gIEJ1dCBtYWtlIHN1cmUgd2UgdHVybiBvZmYgYWxsIHRoZSBpbnB1dCBoZWxwZXIgbG9naWNcbiAgICAvLyB0aGF0IGRvZXNuJ3QgbWFrZSBzZW5zZSBoZXJlLCBhbmQgbWlnaHQgaW5hZHZlcnRlbnRseSBtdW5nIG9yIHNhdmUgaW5wdXQuXG4gICAgLy8gU29tZSBvZiB0aGVzZSBhdHRyaWJ1dGVzIGFyZSBzdGFuZGFyZCB3aGlsZSBvdGhlcnMgYXJlIGJyb3dzZXIgc3BlY2lmaWMsXG4gICAgLy8gYnV0IHNob3VsZCBiZSBzYWZlbHkgaWdub3JlZCBieSBvdGhlciBicm93c2Vycy5cbiAgICB0aGlzLnNjcmVlbl8gPSBkb2MuY3JlYXRlRWxlbWVudCgneC1zY3JlZW4nKTtcbiAgICB0aGlzLnNjcmVlbl8uc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICAgIHRoaXMuc2NyZWVuXy5zdHlsZS5jc3NUZXh0ID1cbiAgICAgICAgLy8gJ2NhcmV0LWNvbG9yOiB0cmFuc3BhcmVudDsnICtcbiAgICAgICAgJ2Rpc3BsYXk6IGJsb2NrOycgK1xuICAgICAgICAgICAgJ2ZvbnQtZmFtaWx5OiBtb25vc3BhY2U7JyArXG4gICAgICAgICAgICAnZm9udC1zaXplOiAxNXB4OycgK1xuICAgICAgICAgICAgJ292ZXJmbG93OiBoaWRkZW47JyArXG4gICAgICAgICAgICAnd2hpdGUtc3BhY2U6IHByZTsnICtcbiAgICAgICAgICAgICd3aWR0aDogMTAwJTsnICtcbiAgICAgICAgICAgICdtYXJnaW46IDBweDsnICtcbiAgICAgICAgICAgICdwYWRkaW5nOiAwcHg7JyArXG4gICAgICAgICAgICAnaGVpZ2h0OiAxMDAlOycgK1xuICAgICAgICAgICAgJ3dpZHRoOiAxMDAlOycgK1xuICAgICAgICAgICAgJ3RvdWNoLWF0Y2lvbjogbWFuaXB1bGF0aW9uOycgK1xuICAgICAgICAgICAgJ2N1cnNvcjogdmFyKC0taHRlcm0tbW91c2UtY3Vyc29yLXN0eWxlKTsnICtcbiAgICAgICAgICAgICdvdXRsaW5lOiBub25lICFpbXBvcnRhbnQnO1xuICAgIGRvYy5ib2R5LmFwcGVuZENoaWxkKHRoaXMuc2NyZWVuXyk7XG4gICAgLy93aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblNjcm9sbF8uYmluZCh0aGlzKSk7XG4gICAgLy93aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLm9uU2Nyb2xsV2hlZWxfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuc2NyZWVuXy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbl90b3VjaHN0YXJ0Xy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnNjcmVlbl8uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vbl90b3VjaG1vdmVfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuc2NyZWVuXy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25fdG91Y2hlbmRfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuc2NyZWVuXy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRoaXMub25fdG91Y2hjYW5jZWxfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuc2NyZWVuXy5hZGRFdmVudExpc3RlbmVyKCdjb3B5JywgdGhpcy5vbkNvcHlfLmJpbmQodGhpcykpO1xuICAgIHRoaXMuc2NyZWVuXy5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIHRoaXMub25QYXN0ZV8uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5zY3JlZW5fLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCB0aGlzLm9uRHJhZ0FuZERyb3BfLmJpbmQodGhpcykpO1xuICAgIGRvYy5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uQm9keUtleURvd25fLmJpbmQodGhpcykpO1xuICAgIC8vIEFkZCBidXR0b25zIHRvIG1ha2UgYWNjZXNzaWJsZSBzY3JvbGxpbmcgdGhyb3VnaCB0ZXJtaW5hbCBoaXN0b3J5IHdvcmtcbiAgICAvLyB3ZWxsLiBUaGVzZSBhcmUgcG9zaXRpb25lZCBvZmYtc2NyZWVuIHVudGlsIHRoZXkgYXJlIHNlbGVjdGVkLCBhdCB3aGljaFxuICAgIC8vIHBvaW50IHRoZXkgYXJlIG1vdmVkIG9uLXNjcmVlbi5cbiAgICBjb25zdCBzY3JvbGxCdXR0b25IZWlnaHQgPSAzMDtcbiAgICBjb25zdCBzY3JvbGxCdXR0b25Cb3JkZXIgPSAxO1xuICAgIGNvbnN0IHNjcm9sbEJ1dHRvblRvdGFsSGVpZ2h0ID0gc2Nyb2xsQnV0dG9uSGVpZ2h0ICsgMiAqIHNjcm9sbEJ1dHRvbkJvcmRlcjtcbiAgICBjb25zdCBzY3JvbGxCdXR0b25TdHlsZSA9IGByaWdodDogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjpmaXhlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtzY3JvbGxCdXR0b25IZWlnaHR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMTBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6ICR7c2Nyb2xsQnV0dG9uSGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6ICR7c2Nyb2xsQnV0dG9uQm9yZGVyfXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtgO1xuICAgIC8vIE5vdGU6IHdlIHVzZSBhIDxkaXY+IHJhdGhlciB0aGFuIGEgPGJ1dHRvbj4gYmVjYXVzZSB3ZSBkb24ndCB3YW50IGl0IHRvIGJlXG4gICAgLy8gZm9jdXNhYmxlLiBJZiBpdCdzIGZvY3VzYWJsZSB0aGlzIGludGVyZmVyZXMgd2l0aCB0aGUgY29udGVudGVkaXRhYmxlXG4gICAgLy8gZm9jdXMuXG4gICAgdGhpcy5zY3JvbGxVcEJ1dHRvbl8gPSB0aGlzLmRvY3VtZW50Xy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLnNjcm9sbFVwQnV0dG9uXy5pZCA9ICdodGVybTphMTF5OnBhZ2UtdXAnO1xuICAgIHRoaXMuc2Nyb2xsVXBCdXR0b25fLmlubmVyVGV4dCA9IGh0ZXJtLm1zZygnQlVUVE9OX1BBR0VfVVAnLCBbXSwgJ1BhZ2UgdXAnKTtcbiAgICB0aGlzLnNjcm9sbFVwQnV0dG9uXy5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnYnV0dG9uJyk7XG4gICAgdGhpcy5zY3JvbGxVcEJ1dHRvbl8uc3R5bGUuY3NzVGV4dCA9IHNjcm9sbEJ1dHRvblN0eWxlO1xuICAgIHRoaXMuc2Nyb2xsVXBCdXR0b25fLnN0eWxlLnRvcCA9IC1zY3JvbGxCdXR0b25Ub3RhbEhlaWdodCArICdweCc7XG4gICAgdGhpcy5zY3JvbGxVcEJ1dHRvbl8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnNjcm9sbFBhZ2VVcC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnNjcm9sbERvd25CdXR0b25fID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5zY3JvbGxEb3duQnV0dG9uXy5pZCA9ICdodGVybTphMTF5OnBhZ2UtZG93bic7XG4gICAgdGhpcy5zY3JvbGxEb3duQnV0dG9uXy5pbm5lclRleHQgPSBodGVybS5tc2coJ0JVVFRPTl9QQUdFX0RPV04nLCBbXSwgJ1BhZ2UgZG93bicpO1xuICAgIHRoaXMuc2Nyb2xsRG93bkJ1dHRvbl8uc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICAgIHRoaXMuc2Nyb2xsRG93bkJ1dHRvbl8uc3R5bGUuY3NzVGV4dCA9IHNjcm9sbEJ1dHRvblN0eWxlO1xuICAgIHRoaXMuc2Nyb2xsRG93bkJ1dHRvbl8uc3R5bGUuYm90dG9tID0gLXNjcm9sbEJ1dHRvblRvdGFsSGVpZ2h0ICsgJ3B4JztcbiAgICB0aGlzLnNjcm9sbERvd25CdXR0b25fLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zY3JvbGxQYWdlRG93bi5iaW5kKHRoaXMpKTtcbiAgICAvLyBXZSBvbmx5IGFsbG93IHRoZSBzY3JvbGwgYnV0dG9ucyB0byBkaXNwbGF5IGFmdGVyIGEgZGVsYXksIG90aGVyd2lzZSB0aGVcbiAgICAvLyBwYWdlIHVwIGJ1dHRvbiBjYW4gZmxhc2ggb250byB0aGUgc2NyZWVuIGR1cmluZyB0aGUgaW50aWFsIGNoYW5nZSBpbiBmb2N1cy5cbiAgICAvLyBUaGlzIHNlZW1zIHRvIGJlIGJlY2F1c2UgaXQgaXMgdGhlIGZpcnN0IGVsZW1lbnQgaW5zaWRlIHRoZSA8eC1zY3JlZW4+XG4gICAgLy8gZWxlbWVudCwgd2hpY2ggd2lsbCBnZXQgZm9jdXNzZWQgb24gcGFnZSBsb2FkLlxuICAgIHRoaXMuYWxsb3dTY3JvbGxCdXR0b25zVG9EaXNwbGF5XyA9IGZhbHNlO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmFsbG93U2Nyb2xsQnV0dG9uc1RvRGlzcGxheV8gPSB0cnVlO1xuICAgIH0sIDUwMCk7XG4gICAgdGhpcy5kb2N1bWVudF8uYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnNlbGVjdGlvbi5zeW5jKCk7XG4gICAgICAgIGlmICghdGhpcy5hbGxvd1Njcm9sbEJ1dHRvbnNUb0Rpc3BsYXlfKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBhY2Nlc3NpYmlsaXR5RW5hYmxlZCA9IHRoaXMuYWNjZXNzaWJpbGl0eVJlYWRlcl8gJiZcbiAgICAgICAgICAgIHRoaXMuYWNjZXNzaWJpbGl0eVJlYWRlcl8uYWNjZXNzaWJpbGl0eUVuYWJsZWQ7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMuZG9jdW1lbnRfLmdldFNlbGVjdGlvbigpO1xuICAgICAgICBsZXQgc2VsZWN0ZWRFbGVtZW50O1xuICAgICAgICBpZiAoc2VsZWN0aW9uLmFuY2hvck5vZGUgJiYgc2VsZWN0aW9uLmFuY2hvck5vZGUucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50ID0gc2VsZWN0aW9uLmFuY2hvck5vZGUucGFyZW50RWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWNjZXNzaWJpbGl0eUVuYWJsZWQgJiYgc2VsZWN0ZWRFbGVtZW50ID09IHRoaXMuc2Nyb2xsVXBCdXR0b25fKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFVwQnV0dG9uXy5zdHlsZS50b3AgPSAnMHB4JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVXBCdXR0b25fLnN0eWxlLnRvcCA9IC1zY3JvbGxCdXR0b25Ub3RhbEhlaWdodCArICdweCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjY2Vzc2liaWxpdHlFbmFibGVkICYmIHNlbGVjdGVkRWxlbWVudCA9PSB0aGlzLnNjcm9sbERvd25CdXR0b25fKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbERvd25CdXR0b25fLnN0eWxlLmJvdHRvbSA9ICcwcHgnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxEb3duQnV0dG9uXy5zdHlsZS5ib3R0b20gPSAtc2Nyb2xsQnV0dG9uVG90YWxIZWlnaHQgKyAncHgnO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5zY3JlZW5fLmFwcGVuZENoaWxkKHRoaXMuc2Nyb2xsVXBCdXR0b25fKTtcbiAgICAvLyBUaGlzIGlzIHRoZSBtYWluIGNvbnRhaW5lciBmb3IgdGhlIGZpeGVkIHJvd3MuXG4gICAgdGhpcy5yb3dOb2Rlc18gPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5yb3dOb2Rlc18uaWQgPSAnaHRlcm06cm93LW5vZGVzJztcbiAgICB0aGlzLnJvd05vZGVzXy5zdHlsZS5jc3NUZXh0ID1cbiAgICAgICAgJ2Rpc3BsYXk6IGJsb2NrOycgK1xuICAgICAgICAgICAgJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsnICtcbiAgICAgICAgICAgICd0b3A6IDA7JyArXG4gICAgICAgICAgICAnbGVmdDogMDsnICtcbiAgICAgICAgICAgICdyaWdodDogMDsnICtcbiAgICAgICAgICAgICdib3R0b206IDA7JyArXG4gICAgICAgICAgICAnYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDsnICtcbiAgICAgICAgICAgICdvdmVyZmxvdzogaGlkZGVuOycgK1xuICAgICAgICAgICAgJy13ZWJraXQtdXNlci1zZWxlY3Q6IHRleHQ7JyArXG4gICAgICAgICAgICAnLW1vei11c2VyLXNlbGVjdDogdGV4dDsnO1xuICAgIHRoaXMuc2NyZWVuXy5hcHBlbmRDaGlsZCh0aGlzLnJvd05vZGVzXyk7XG4gICAgLy8gVHdvIG5vZGVzIHRvIGhvbGQgb2Zmc2NyZWVuIHRleHQgZHVyaW5nIHRoZSBjb3B5IGV2ZW50LlxuICAgIHRoaXMudG9wU2VsZWN0QmFnXyA9IGRvYy5jcmVhdGVFbGVtZW50KCd4LXNlbGVjdC1iYWcnKTtcbiAgICB0aGlzLnRvcFNlbGVjdEJhZ18uc3R5bGUuY3NzVGV4dCA9XG4gICAgICAgICdkaXNwbGF5OiBibG9jazsnICtcbiAgICAgICAgICAgICdvdmVyZmxvdzogaGlkZGVuOycgK1xuICAgICAgICAgICAgJ2hlaWdodDogdmFyKC0taHRlcm0tY2hhcnNpemUtaGVpZ2h0KTsnICtcbiAgICAgICAgICAgICd3aGl0ZS1zcGFjZTogcHJlOyc7XG4gICAgdGhpcy5ib3R0b21TZWxlY3RCYWdfID0gdGhpcy50b3BTZWxlY3RCYWdfLmNsb25lTm9kZSgpO1xuICAgIC8vIE5vZGVzIGFib3ZlIHRoZSB0b3AgZm9sZCBhbmQgYmVsb3cgdGhlIGJvdHRvbSBmb2xkIGFyZSBoaWRkZW4uICBUaGV5IGFyZVxuICAgIC8vIG9ubHkgdXNlZCB0byBob2xkIHJvd3MgdGhhdCBhcmUgcGFydCBvZiB0aGUgc2VsZWN0aW9uIGJ1dCBhcmUgY3VycmVudGx5XG4gICAgLy8gc2Nyb2xsZWQgb2ZmIHRoZSB0b3Agb3IgYm90dG9tIG9mIHRoZSB2aXNpYmxlIHJhbmdlLlxuICAgIHRoaXMudG9wRm9sZF8gPSBkb2MuY3JlYXRlRWxlbWVudCgneC1mb2xkJyk7XG4gICAgdGhpcy50b3BGb2xkXy5pZCA9ICdodGVybTp0b3AtZm9sZC1mb3Itcm93LXNlbGVjdGlvbic7XG4gICAgdGhpcy50b3BGb2xkXy5zdHlsZS5jc3NUZXh0ID0gJ2Rpc3BsYXk6IGJsb2NrOyc7XG4gICAgdGhpcy5yb3dOb2Rlc18uYXBwZW5kQ2hpbGQodGhpcy50b3BGb2xkXyk7XG4gICAgdGhpcy5fcmVuZGVyRG9tID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuX3JlbmRlckRvbS5pZCA9ICdodGVybTpyZW5kZXJlcic7XG4gICAgdGhpcy5yb3dOb2Rlc18uYXBwZW5kQ2hpbGQodGhpcy5fcmVuZGVyRG9tKTtcbiAgICB0aGlzLnJlbmRlclJlZiA9IFJlYWN0RE9NLnJlbmRlcihSZWFjdC5jcmVhdGVFbGVtZW50KFJSb3dMaXN0KSwgdGhpcy5fcmVuZGVyRG9tKTtcbiAgICB0aGlzLmJvdHRvbUZvbGRfID0gdGhpcy50b3BGb2xkXy5jbG9uZU5vZGUoKTtcbiAgICB0aGlzLmJvdHRvbUZvbGRfLmlkID0gJ2h0ZXJtOmJvdHRvbS1mb2xkLWZvci1yb3ctc2VsZWN0aW9uJztcbiAgICB0aGlzLnJvd05vZGVzXy5hcHBlbmRDaGlsZCh0aGlzLmJvdHRvbUZvbGRfKTtcbiAgICAvLyBUaGlzIGhpZGRlbiBkaXYgYWNjb3VudHMgZm9yIHRoZSB2ZXJ0aWNhbCBzcGFjZSB0aGF0IHdvdWxkIGJlIGNvbnN1bWVkIGJ5XG4gICAgLy8gYWxsIHRoZSByb3dzIGluIHRoZSBidWZmZXIgaWYgdGhleSB3ZXJlIHZpc2libGUuICBJdCdzIHdoYXQgY2F1c2VzIHRoZVxuICAgIC8vIHNjcm9sbGJhciB0byBhcHBlYXIgb24gdGhlICd4LXNjcmVlbicsIGFuZCBpdCBtb3ZlcyB3aXRoaW4gdGhlIHNjcmVlbiB3aGVuXG4gICAgLy8gdGhlIHNjcm9sbGJhciBpcyBtb3ZlZC5cbiAgICAvL1xuICAgIC8vIEl0IGlzIHNldCAndmlzaWJpbGl0eTogaGlkZGVuJyB0byBrZWVwIHRoZSBicm93c2VyIGZyb20gdHJ5aW5nIHRvIGluY2x1ZGVcbiAgICAvLyBpdCBpbiB0aGUgc2VsZWN0aW9uIHdoZW4gYSB1c2VyICdkcmFnIHNlbGVjdHMnIHVwd2FyZHMgKGRyYWcgdGhlIG1vdXNlIHRvXG4gICAgLy8gc2VsZWN0IGFuZCBzY3JvbGwgYXQgdGhlIHNhbWUgdGltZSkuICBXaXRob3V0IHRoaXMsIHRoZSBzZWxlY3Rpb24gZ2V0c1xuICAgIC8vIG91dCBvZiB3aGFjay5cbiAgICAvL3RoaXMuc2Nyb2xsQXJlYV8gPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgLy90aGlzLnNjcm9sbEFyZWFfLmlkID0gJ2h0ZXJtOnNjcm9sbGFyZWEnO1xuICAgIC8vdGhpcy5zY3JvbGxBcmVhXy5zdHlsZS5jc3NUZXh0ID0gJ3dpZHRoOjA7aGVpZ2h0OjA7JztcbiAgICAvL3RoaXMuc2NyZWVuXy5hcHBlbmRDaGlsZCh0aGlzLnNjcm9sbEFyZWFfKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgX19zY3JlZW5TaXplID0gaHRlcm0uZ2V0Q2xpZW50U2l6ZSh0aGlzLnNjcmVlbl8pO1xuICAgIHRoaXMuc2Nyb2xsZXJfID0gbmV3IFdLU2Nyb2xsZXIoXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGZ1bmN0aW9uIHJlbmRlcihsZWZ0LCB0b3AsIHpvb20pIHtcbiAgICAgICAgaWYgKF9fcGFnZVlPZmZzZXQgPT09IHRvcCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF9fcGFnZVlPZmZzZXQgPSB0b3AgfHwgMDtcbiAgICAgICAgc2VsZi5vblNjcm9sbF8oKTtcbiAgICB9LCBcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgeyBzY3JvbGxpbmdYOiBmYWxzZSB9KTtcbiAgICB0aGlzLnNjcm9sbGVyXy5zZXREaW1lbnNpb25zKF9fc2NyZWVuU2l6ZS53aWR0aCwgX19zY3JlZW5TaXplLmhlaWdodCwgX19zY3JlZW5TaXplLndpZHRoLCBfX3NjcmVlblNpemUuaGVpZ2h0KTtcbiAgICAvLyBUaGlzIHN2ZyBlbGVtZW50IGlzIHVzZWQgdG8gZGV0ZWN0IHdoZW4gdGhlIGJyb3dzZXIgaXMgem9vbWVkLiAgSXQgbXVzdCBiZVxuICAgIC8vIHBsYWNlZCBpbiB0aGUgb3V0ZXJtb3N0IGRvY3VtZW50IGZvciBjdXJyZW50U2NhbGUgdG8gYmUgY29ycmVjdC5cbiAgICAvLyBUT0RPKHJnaW5kYSk6IFRoaXMgbWVhbnMgdGhhdCBodGVybSBuZXN0ZWQgaW4gYW4gaWZyYW1lIHdpbGwgbm90IGNvcnJlY3RseVxuICAgIC8vIGRldGVjdCBicm93c2VyIHpvb20gbGV2ZWwuICBXZSBzaG91bGQgY29tZSB1cCB3aXRoIGEgYmV0dGVyIHNvbHV0aW9uLlxuICAgIC8vIE5vdGU6IFRoaXMgbXVzdCBiZSBodHRwOi8vIGVsc2UgQ2hyb21lIGNhbm5vdCBjcmVhdGUgdGhlIGVsZW1lbnQgY29ycmVjdGx5LlxuICAgIHZhciB4bWxucyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG4gICAgdGhpcy5zdmdfID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh4bWxucywgJ3N2ZycpO1xuICAgIHRoaXMuc3ZnXy5pZCA9ICdodGVybTp6b29tLWRldGVjdG9yJztcbiAgICB0aGlzLnN2Z18uc2V0QXR0cmlidXRlKCd4bWxucycsIHhtbG5zKTtcbiAgICB0aGlzLnN2Z18uc2V0QXR0cmlidXRlKCd2ZXJzaW9uJywgJzEuMScpO1xuICAgIHRoaXMuc3ZnXy5zdHlsZS5jc3NUZXh0ID1cbiAgICAgICAgJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsnICsgJ3RvcDogMDsnICsgJ2xlZnQ6IDA7JyArICd2aXNpYmlsaXR5OiBoaWRkZW4nO1xuICAgIC8vIFdlIHNlbmQgZm9jdXMgdG8gdGhpcyBlbGVtZW50IGp1c3QgYmVmb3JlIGEgcGFzdGUgaGFwcGVucywgc28gd2UgY2FuXG4gICAgLy8gY2FwdHVyZSB0aGUgcGFzdGVkIHRleHQgYW5kIGZvcndhcmQgaXQgb24gdG8gc29tZW9uZSB3aG8gY2FyZXMuXG4gICAgdGhpcy5wYXN0ZVRhcmdldF8gPSBkb2MuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgICB0aGlzLnBhc3RlVGFyZ2V0Xy5pZCA9ICdodGVybTpjdHJsLXYtcGFzdGUtdGFyZ2V0JztcbiAgICB0aGlzLnBhc3RlVGFyZ2V0Xy5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgdGhpcy5wYXN0ZVRhcmdldF8uc3R5bGUuY3NzVGV4dCA9XG4gICAgICAgICdwb3NpdGlvbjogYWJzb2x1dGU7JyArXG4gICAgICAgICAgICAnaGVpZ2h0OiAxcHg7JyArXG4gICAgICAgICAgICAnd2lkdGg6IDFweDsnICtcbiAgICAgICAgICAgICdsZWZ0OiAwcHg7ICcgK1xuICAgICAgICAgICAgJ2JvdHRvbTogMHB4OycgK1xuICAgICAgICAgICAgJ29wYWNpdHk6IDAnO1xuICAgIHRoaXMucGFzdGVUYXJnZXRfLmNvbnRlbnRFZGl0YWJsZSA9IHRydWU7XG4gICAgdGhpcy5zY3JlZW5fLmFwcGVuZENoaWxkKHRoaXMucGFzdGVUYXJnZXRfKTtcbiAgICB0aGlzLnBhc3RlVGFyZ2V0Xy5hZGRFdmVudExpc3RlbmVyKCd0ZXh0SW5wdXQnLCB0aGlzLmhhbmRsZVBhc3RlVGFyZ2V0VGV4dElucHV0Xy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnJlc2l6ZSgpO1xufTtcbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLm9uX3RvdWNoc3RhcnRfID0gZnVuY3Rpb24gKGUpIHtcbiAgICAvL3RoaXMuc2Nyb2xsZXJfLmRvVG91Y2hTdGFydChlLnRvdWNoZXMsIGUudGltZVN0YW1wKTtcbn07XG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5vbl90b3VjaG1vdmVfID0gZnVuY3Rpb24gKGUpIHtcbiAgICAvL3RoaXMuc2Nyb2xsZXJfLmRvVG91Y2hNb3ZlKGUudG91Y2hlcywgZS50aW1lU3RhbXAsIGUuc2NhbGUpO1xuICAgIC8vaWYgKHRoaXMuc2Nyb2xsZXJfLl9faXNEcmFnZ2luZykge1xuICAgIC8vZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIC8vfVxufTtcbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLm9uX3RvdWNoZW5kXyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgLy8gdGhpcy5zY3JvbGxlcl8uZG9Ub3VjaEVuZChlLnRpbWVTdGFtcCk7XG59O1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUub25fdG91Y2hjYW5jZWxfID0gZnVuY3Rpb24gKGUpIHtcbiAgICAvLyAgdGhpcy5zY3JvbGxlcl8uZG9Ub3VjaEVuZChlLnRpbWVTdGFtcCk7XG59O1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuZm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy90aGlzLmlmcmFtZV8uZm9jdXMoKTtcbiAgICAvL3RoaXMuc2NyZWVuXy5mb2N1cygpO1xufTtcbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLmdldFNjcmVlblNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9fc2NyZWVuU2l6ZTtcbn07XG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5yZXNldENhY2hlID0gZnVuY3Rpb24gKCkgeyB9O1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuc2V0Um93UHJvdmlkZXIgPSBmdW5jdGlvbiAocm93UHJvdmlkZXIpIHtcbiAgICB0aGlzLnJlc2V0Q2FjaGUoKTtcbiAgICB0aGlzLnJvd1Byb3ZpZGVyXyA9IHJvd1Byb3ZpZGVyO1xuICAgIHRoaXMuc2NoZWR1bGVSZWRyYXcoKTtcbn07XG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5pbnZhbGlkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0b3BSb3dJbmRleCA9IHRoaXMuZ2V0VG9wUm93SW5kZXgoKTtcbiAgICB2YXIgYm90dG9tUm93SW5kZXggPSB0aGlzLmdldEJvdHRvbVJvd0luZGV4KHRvcFJvd0luZGV4KTtcbiAgICB0aGlzLmRyYXdWaXNpYmxlUm93c18odG9wUm93SW5kZXgsIGJvdHRvbVJvd0luZGV4KTtcbn07XG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5zY2hlZHVsZUludmFsaWRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudGltZW91dHNfLmludmFsaWRhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy50aW1lb3V0c18uaW52YWxpZGF0ZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnRpbWVvdXRzXy5pbnZhbGlkYXRlID0gMDtcbiAgICAgICAgc2VsZi5pbnZhbGlkYXRlKCk7XG4gICAgfSwgMCk7XG59O1xudmFyIF9fY3VycmVudFRyYW5zZm9ybSA9ICcnO1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuc3luY1Jvd05vZGVzRGltZW5zaW9uc18gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcmVlblNpemUgPSB0aGlzLmdldFNjcmVlblNpemUoKTtcbiAgICB0aGlzLmxhc3RTY3JlZW5XaWR0aF8gPSBzY3JlZW5TaXplLndpZHRoO1xuICAgIHRoaXMubGFzdFNjcmVlbkhlaWdodF8gPSBzY3JlZW5TaXplLmhlaWdodDtcbiAgICAvLyBXZSBkb24ndCB3YW50IHRvIHNob3cgYSBwYXJ0aWFsIHJvdyBiZWNhdXNlIGl0IHdvdWxkIGJlIGRpc3RyYWN0aW5nXG4gICAgLy8gaW4gYSB0ZXJtaW5hbCwgc28gd2UgZmxvb3IgYW55IGZyYWN0aW9uYWwgcm93IGNvdW50LlxuICAgIHRoaXMudmlzaWJsZVJvd0NvdW50ID0gbGliLmYuc21hcnRGbG9vckRpdmlkZShzY3JlZW5TaXplLmhlaWdodCwgdGhpcy5jaGFyYWN0ZXJTaXplLmhlaWdodCk7XG4gICAgLy8gVGhlbiBjb21wdXRlIHRoZSBoZWlnaHQgb2Ygb3VyIGludGVncmFsIG51bWJlciBvZiByb3dzLlxuICAgIHZhciB2aXNpYmxlUm93c0hlaWdodCA9IHRoaXMudmlzaWJsZVJvd0NvdW50ICogdGhpcy5jaGFyYWN0ZXJTaXplLmhlaWdodDtcbiAgICAvLyBUaGVuIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHNjcmVlbiBoZWlnaHQgYW5kIHRvdGFsIHJvdyBoZWlnaHQgbmVlZHMgdG9cbiAgICAvLyBiZSBtYWRlIHVwIGZvciBhcyB0b3AgbWFyZ2luLiAgV2UgbmVlZCB0byByZWNvcmQgdGhpcyB2YWx1ZSBzbyBpdFxuICAgIC8vIGNhbiBiZSB1c2VkIGxhdGVyIHRvIGRldGVybWluZSB0aGUgdG9wUm93SW5kZXguXG4gICAgdGhpcy52aXNpYmxlUm93VG9wTWFyZ2luID0gMDtcbiAgICB0aGlzLnZpc2libGVSb3dCb3R0b21NYXJnaW4gPSBzY3JlZW5TaXplLmhlaWdodCAtIHZpc2libGVSb3dzSGVpZ2h0O1xuICAgIHZhciB0cmFuc2Zvcm0gPSAnJztcbiAgICBpZiAoX19wYWdlWU9mZnNldCA8IDApIHtcbiAgICAgICAgdHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDAsICcgKyAtX19wYWdlWU9mZnNldCArICdweCwgMCknO1xuICAgIH1cbiAgICBpZiAodHJhbnNmb3JtICE9PSBfX2N1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgX19jdXJyZW50VHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICB0aGlzLnJvd05vZGVzXy5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICAgIGlmICh0aGlzLnJvd1Byb3ZpZGVyXy5jdXJzb3JPdmVybGF5Tm9kZV8pIHtcbiAgICAgICAgICAgIHRoaXMucm93UHJvdmlkZXJfLmN1cnNvck92ZXJsYXlOb2RlXy5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICAgIH1cbiAgICB9XG59O1xudmFyIF9fcHJldkhlaWdodCA9IDA7XG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5zeW5jU2Nyb2xsSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFJlc2l6ZSB0aGUgc2Nyb2xsIGFyZWEgdG8gYXBwZWFyIGFzIHRob3VnaCBpdCBjb250YWlucyBldmVyeSByb3cuXG4gICAgdGhpcy5sYXN0Um93Q291bnRfID0gdGhpcy5yb3dQcm92aWRlcl8uZ2V0Um93Q291bnQoKTtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy5jaGFyYWN0ZXJTaXplLmhlaWdodCAqIHRoaXMubGFzdFJvd0NvdW50XyArXG4gICAgICAgIHRoaXMudmlzaWJsZVJvd1RvcE1hcmdpbiArXG4gICAgICAgIHRoaXMudmlzaWJsZVJvd0JvdHRvbU1hcmdpbjtcbiAgICBpZiAoX19wcmV2SGVpZ2h0ID09PSBoZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfX3ByZXZIZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5zY3JvbGxlcl8uc2V0RGltZW5zaW9ucyhfX3NjcmVlblNpemUud2lkdGgsIF9fc2NyZWVuU2l6ZS5oZWlnaHQsIF9fc2NyZWVuU2l6ZS53aWR0aCwgX19wcmV2SGVpZ2h0KTtcbn07XG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5zY2hlZHVsZVJlZHJhdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0c18ucmVkcmF3KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMudGltZW91dHNfLnJlZHJhdyA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYudGltZW91dHNfLnJlZHJhdyA9IDA7XG4gICAgICAgIHNlbGYucmVkcmF3XygpO1xuICAgIH0pO1xufTtcbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnJlZHJhd18gPSBmdW5jdGlvbiAoKSB7XG4gICAgLy90aGlzLnJlc2V0U2VsZWN0QmFnc18oKTtcbiAgICAvL3RoaXMuc2VsZWN0aW9uLnN5bmMoKTtcbiAgICB0aGlzLnN5bmNTY3JvbGxIZWlnaHQoKTtcbiAgICB2YXIgdG9wUm93SW5kZXggPSB0aGlzLmdldFRvcFJvd0luZGV4KCk7XG4gICAgdmFyIGJvdHRvbVJvd0luZGV4ID0gdGhpcy5nZXRCb3R0b21Sb3dJbmRleCh0b3BSb3dJbmRleCk7XG4gICAgLy90aGlzLmRyYXdUb3BGb2xkXyh0b3BSb3dJbmRleCk7XG4gICAgLy90aGlzLmRyYXdCb3R0b21Gb2xkXyhib3R0b21Sb3dJbmRleCk7XG4gICAgdGhpcy5kcmF3VmlzaWJsZVJvd3NfKHRvcFJvd0luZGV4LCBib3R0b21Sb3dJbmRleCk7XG4gICAgdGhpcy5zeW5jUm93Tm9kZXNEaW1lbnNpb25zXygpO1xuICAgIHRoaXMuaXNTY3JvbGxlZEVuZCA9XG4gICAgICAgIHRoaXMuZ2V0VG9wUm93SW5kZXgoKSArIHRoaXMudmlzaWJsZVJvd0NvdW50ID49IHRoaXMubGFzdFJvd0NvdW50Xztcbn07XG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5kcmF3VmlzaWJsZVJvd3NfID0gZnVuY3Rpb24gKHRvcFJvd0luZGV4LCBib3R0b21Sb3dJbmRleCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAvLyBTaG9ydGhhbmQgZm9yIHRoaW5ncyB3ZSdyZSBnb2luZyB0byB1c2UgYSBsb3QuXG4gICAgdmFyIHNlbGVjdGlvblN0YXJ0Um93ID0gdGhpcy5zZWxlY3Rpb24uc3RhcnRSb3c7XG4gICAgdmFyIHNlbGVjdGlvbkVuZFJvdyA9IHRoaXMuc2VsZWN0aW9uLmVuZFJvdztcbiAgICB2YXIgYm90dG9tRm9sZCA9IHRoaXMuYm90dG9tRm9sZF87XG4gICAgLy8gVGhlIG5vZGUgd2UncmUgZXhhbWluaW5nIGR1cmluZyB0aGUgY3VycmVudCBpdGVyYXRpb24uXG4gICAgdmFyIG5vZGUgPSB0aGlzLnRvcEZvbGRfLm5leHRTaWJsaW5nO1xuICAgIHZhciB0YXJnZXREcmF3Q291bnQgPSBNYXRoLm1pbih0aGlzLnZpc2libGVSb3dDb3VudCwgdGhpcy5yb3dQcm92aWRlcl8uZ2V0Um93Q291bnQoKSk7XG4gICAgdmFyIHJvd3MgPSBbXTtcbiAgICBmb3IgKHZhciBkcmF3Q291bnQgPSAwOyBkcmF3Q291bnQgPCB0YXJnZXREcmF3Q291bnQ7IGRyYXdDb3VudCsrKSB7XG4gICAgICAgIHZhciByb3dJbmRleCA9IHRvcFJvd0luZGV4ICsgZHJhd0NvdW50O1xuICAgICAgICB2YXIgbmV3Tm9kZSA9IHRoaXMuZmV0Y2hSb3dOb2RlXyhyb3dJbmRleCk7XG4gICAgICAgIGlmIChuZXdOb2RlKSB7XG4gICAgICAgICAgICByb3dzLnB1c2gobmV3Tm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZW5kZXJSZWYuc2V0Um93cyhyb3dzKTtcbn07XG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5mZXRjaFJvd05vZGVfID0gZnVuY3Rpb24gKHJvd0luZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMucm93UHJvdmlkZXJfLmdldFJvd05vZGUocm93SW5kZXgpO1xufTtcbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLmdldFNjcm9sbE1heF8gPSBmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiAoX19wcmV2SGVpZ2h0ICtcbiAgICAgICAgdGhpcy52aXNpYmxlUm93VG9wTWFyZ2luICtcbiAgICAgICAgdGhpcy52aXNpYmxlUm93Qm90dG9tTWFyZ2luIC1cbiAgICAgICAgX19zY3JlZW5TaXplLmhlaWdodCk7XG59O1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUuc2Nyb2xsUm93VG9Ub3AgPSBmdW5jdGlvbiAocm93SW5kZXgpIHtcbiAgICB0aGlzLnN5bmNTY3JvbGxIZWlnaHQoKTtcbiAgICB0aGlzLmlzU2Nyb2xsZWRFbmQgPSByb3dJbmRleCArIHRoaXMudmlzaWJsZVJvd0NvdW50ID49IHRoaXMubGFzdFJvd0NvdW50XztcbiAgICB2YXIgc2Nyb2xsVG9wID0gcm93SW5kZXggKiB0aGlzLmNoYXJhY3RlclNpemUuaGVpZ2h0ICsgdGhpcy52aXNpYmxlUm93VG9wTWFyZ2luO1xuICAgIHZhciBzY3JvbGxNYXggPSB0aGlzLmdldFNjcm9sbE1heF8oKTtcbiAgICBpZiAoc2Nyb2xsVG9wID4gc2Nyb2xsTWF4KVxuICAgICAgICBzY3JvbGxUb3AgPSBzY3JvbGxNYXg7XG4gICAgaWYgKF9fcGFnZVlPZmZzZXQgPT09IHNjcm9sbFRvcCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2Nyb2xsZXJfLnNjcm9sbFRvKDAsIHNjcm9sbFRvcCk7XG4gICAgdGhpcy5zY2hlZHVsZVJlZHJhdygpO1xufTtcbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNjcm9sbFJvd1RvQm90dG9tID0gZnVuY3Rpb24gKHJvd0luZGV4KSB7XG4gICAgdGhpcy5zeW5jU2Nyb2xsSGVpZ2h0KCk7XG4gICAgdGhpcy5pc1Njcm9sbGVkRW5kID0gcm93SW5kZXggKyB0aGlzLnZpc2libGVSb3dDb3VudCA+PSB0aGlzLmxhc3RSb3dDb3VudF87XG4gICAgdmFyIHNjcm9sbFRvcCA9IHJvd0luZGV4ICogdGhpcy5jaGFyYWN0ZXJTaXplLmhlaWdodCArXG4gICAgICAgIHRoaXMudmlzaWJsZVJvd1RvcE1hcmdpbiArXG4gICAgICAgIHRoaXMudmlzaWJsZVJvd0JvdHRvbU1hcmdpbjtcbiAgICBzY3JvbGxUb3AgLT0gdGhpcy52aXNpYmxlUm93Q291bnQgKiB0aGlzLmNoYXJhY3RlclNpemUuaGVpZ2h0O1xuICAgIGlmIChzY3JvbGxUb3AgPCAwKSB7XG4gICAgICAgIHNjcm9sbFRvcCA9IDA7XG4gICAgfVxuICAgIGlmIChfX3BhZ2VZT2Zmc2V0ID09PSBzY3JvbGxUb3ApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNjcm9sbGVyXy5zY3JvbGxUbygwLCBzY3JvbGxUb3ApO1xufTtcbmh0ZXJtLlNjcm9sbFBvcnQucHJvdG90eXBlLnNjcm9sbFRvQm90dG9tID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc3luY1Njcm9sbEhlaWdodCgpO1xuICAgIHRoaXMuc2Nyb2xsZXJfLnNjcm9sbFRvKDAsIF9fcHJldkhlaWdodCAtIF9fc2NyZWVuU2l6ZS5oZWlnaHQsIGZhbHNlKTtcbn07XG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5nZXRUb3BSb3dJbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWR4ID0gTWF0aC5yb3VuZChfX3BhZ2VZT2Zmc2V0IC8gdGhpcy5jaGFyYWN0ZXJTaXplLmhlaWdodCk7XG4gICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiBpZHg7XG59O1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUub25TY3JvbGxfID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc2NyZWVuU2l6ZSA9IHRoaXMuZ2V0U2NyZWVuU2l6ZSgpO1xuICAgIGlmIChzY3JlZW5TaXplLndpZHRoICE9IHRoaXMubGFzdFNjcmVlbldpZHRoXyB8fFxuICAgICAgICBzY3JlZW5TaXplLmhlaWdodCAhPSB0aGlzLmxhc3RTY3JlZW5IZWlnaHRfKSB7XG4gICAgICAgIC8vIFRoaXMgZXZlbnQgbWF5IGFsc28gZmlyZSBkdXJpbmcgYSByZXNpemUgKGJ1dCBiZWZvcmUgdGhlIHJlc2l6ZSBldmVudCEpLlxuICAgICAgICAvLyBUaGlzIGhhcHBlbnMgd2hlbiB0aGUgYnJvd3NlciBtb3ZlcyB0aGUgc2Nyb2xsYmFyIGFzIHBhcnQgb2YgdGhlIHJlc2l6ZS5cbiAgICAgICAgLy8gSW4gdGhlc2UgY2FzZXMsIHdlIHdhbnQgdG8gaWdub3JlIHRoZSBzY3JvbGwgZXZlbnQgYW5kIGxldCBvblJlc2l6ZVxuICAgICAgICAvLyBoYW5kbGUgdGhpbmdzLiAgSWYgd2UgZG9uJ3QsIHRoZW4gd2UgZW5kIHVwIHNjcm9sbGluZyB0byB0aGUgd3JvbmdcbiAgICAgICAgLy8gcG9zaXRpb24gYWZ0ZXIgYSByZXNpemUuXG4gICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5yZWRyYXdfKCk7XG4gICAgdGhpcy5wdWJsaXNoKCdzY3JvbGwnLCB7IHNjcm9sbFBvcnQ6IHRoaXMgfSk7XG59O1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUub25TY3JvbGxXaGVlbCA9IGZ1bmN0aW9uIChlKSB7IH07XG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5vblJlc2l6ZV8gPSBmdW5jdGlvbiAoZSkge1xuICAgIF9fc2NyZWVuU2l6ZSA9IGh0ZXJtLmdldENsaWVudFNpemUodGhpcy5zY3JlZW5fKTtcbiAgICB0aGlzLnNjcm9sbGVyXy5zZXREaW1lbnNpb25zKF9fc2NyZWVuU2l6ZS53aWR0aCwgX19zY3JlZW5TaXplLmhlaWdodCwgbnVsbCwgX19wcmV2SGVpZ2h0KTtcbiAgICAvLyBSZS1tZWFzdXJlLCBzaW5jZSBvblJlc2l6ZSBhbHNvIGhhcHBlbnMgZm9yIGJyb3dzZXIgem9vbSBjaGFuZ2VzLlxuICAgIHRoaXMuc3luY0NoYXJhY3RlclNpemUoKTtcbn07XG5odGVybS5TY3JvbGxQb3J0LnByb3RvdHlwZS5vbkNvcHlfID0gZnVuY3Rpb24gKGUpIHtcbiAgICB0aGlzLm9uQ29weShlKTtcbiAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5yZXNldFNlbGVjdEJhZ3NfKCk7XG4gICAgdGhpcy5zZWxlY3Rpb24uc3luYygpO1xuICAgIGlmICghdGhpcy5zZWxlY3Rpb24uc3RhcnRSb3cgfHxcbiAgICAgICAgdGhpcy5zZWxlY3Rpb24uZW5kUm93LnJvd0luZGV4IC0gdGhpcy5zZWxlY3Rpb24uc3RhcnRSb3cucm93SW5kZXggPCAyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRvcFJvd0luZGV4ID0gdGhpcy5nZXRUb3BSb3dJbmRleCgpO1xuICAgIHZhciBib3R0b21Sb3dJbmRleCA9IHRoaXMuZ2V0Qm90dG9tUm93SW5kZXgodG9wUm93SW5kZXgpO1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbi5zdGFydFJvdy5yb3dJbmRleCA8IHRvcFJvd0luZGV4KSB7XG4gICAgICAgIC8vIFN0YXJ0IG9mIHNlbGVjdGlvbiBpcyBhYm92ZSB0aGUgdG9wIGZvbGQuXG4gICAgICAgIHZhciBlbmRCYWNrZmlsbEluZGV4O1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb24uZW5kUm93LnJvd0luZGV4IDwgdG9wUm93SW5kZXgpIHtcbiAgICAgICAgICAgIC8vIEVudGlyZSBzZWxlY3Rpb24gaXMgYWJvdmUgdGhlIHRvcCBmb2xkLlxuICAgICAgICAgICAgZW5kQmFja2ZpbGxJbmRleCA9IHRoaXMuc2VsZWN0aW9uLmVuZFJvdy5yb3dJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFNlbGVjdGlvbiBleHRlbmRzIGJlbG93IHRoZSB0b3AgZm9sZC5cbiAgICAgICAgICAgIGVuZEJhY2tmaWxsSW5kZXggPSB0aGlzLnRvcEZvbGRfLm5leHRTaWJsaW5nLnJvd0luZGV4O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9wU2VsZWN0QmFnXy50ZXh0Q29udGVudCA9IHRoaXMucm93UHJvdmlkZXJfLmdldFJvd3NUZXh0KHRoaXMuc2VsZWN0aW9uLnN0YXJ0Um93LnJvd0luZGV4ICsgMSwgZW5kQmFja2ZpbGxJbmRleCk7XG4gICAgICAgIHRoaXMucm93Tm9kZXNfLmluc2VydEJlZm9yZSh0aGlzLnRvcFNlbGVjdEJhZ18sIHRoaXMuc2VsZWN0aW9uLnN0YXJ0Um93Lm5leHRTaWJsaW5nKTtcbiAgICAgICAgdGhpcy5zeW5jUm93Tm9kZXNEaW1lbnNpb25zXygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zZWxlY3Rpb24uZW5kUm93LnJvd0luZGV4ID4gYm90dG9tUm93SW5kZXgpIHtcbiAgICAgICAgLy8gU2VsZWN0aW9uIGVuZHMgYmVsb3cgdGhlIGJvdHRvbSBmb2xkLlxuICAgICAgICB2YXIgc3RhcnRCYWNrZmlsbEluZGV4O1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb24uc3RhcnRSb3cucm93SW5kZXggPiBib3R0b21Sb3dJbmRleCkge1xuICAgICAgICAgICAgLy8gRW50aXJlIHNlbGVjdGlvbiBpcyBiZWxvdyB0aGUgYm90dG9tIGZvbGQuXG4gICAgICAgICAgICBzdGFydEJhY2tmaWxsSW5kZXggPSB0aGlzLnNlbGVjdGlvbi5zdGFydFJvdy5yb3dJbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBTZWxlY3Rpb24gc3RhcnRzIGFib3ZlIHRoZSBib3R0b20gZm9sZC5cbiAgICAgICAgICAgIHN0YXJ0QmFja2ZpbGxJbmRleCA9IHRoaXMuYm90dG9tRm9sZF8ucHJldmlvdXNTaWJsaW5nLnJvd0luZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJvdHRvbVNlbGVjdEJhZ18udGV4dENvbnRlbnQgPSB0aGlzLnJvd1Byb3ZpZGVyXy5nZXRSb3dzVGV4dChzdGFydEJhY2tmaWxsSW5kZXgsIHRoaXMuc2VsZWN0aW9uLmVuZFJvdy5yb3dJbmRleCk7XG4gICAgICAgIHRoaXMucm93Tm9kZXNfLmluc2VydEJlZm9yZSh0aGlzLmJvdHRvbVNlbGVjdEJhZ18sIHRoaXMuc2VsZWN0aW9uLmVuZFJvdyk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIF9fZ2V0VGV4dFdpZHRoKHRleHQsIGZvbnQpIHtcbiAgICAvLyBpZiBnaXZlbiwgdXNlIGNhY2hlZCBjYW52YXMgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICAgIC8vIGVsc2UsIGNyZWF0ZSBuZXcgY2FudmFzXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBjYW52YXMgPSBfX2dldFRleHRXaWR0aC5jYW52YXMgfHxcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAoX19nZXRUZXh0V2lkdGguY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykpO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNvbnRleHQuZm9udCA9IGZvbnQ7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHZhciBtZXRyaWNzID0gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogbWV0cmljcy53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBtZXRyaWNzLmZvbnRCb3VuZGluZ0JveEFzY2VudCArIG1ldHJpY3MuZm9udEJvdW5kaW5nQm94RGVzY2VudCxcbiAgICB9O1xufVxuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUubWVhc3VyZUNoYXJhY3RlclNpemUgPSBmdW5jdGlvbiAob3B0X3dlaWdodCkge1xuICAgIC8vIE51bWJlciBvZiBsaW5lcyB1c2VkIHRvIGF2ZXJhZ2UgdGhlIGhlaWdodCBvZiBhIHNpbmdsZSBjaGFyYWN0ZXIuXG4gICAgdmFyIG51bWJlck9mTGluZXMgPSAxMDA7XG4gICAgLy8gTnVtYmVyIG9mIGNoYXJzIHBlciBsaW5lIHVzZWQgdG8gYXZlcmFnZSB0aGUgd2lkdGggb2YgYSBzaW5nbGUgY2hhcmFjdGVyLlxuICAgIHZhciBsaW5lTGVuZ3RoID0gMTAwO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgZG9tTWV0aG9kID0gd2luZG93LmZvbnRTaXplRGV0ZWN0aW9uTWV0aG9kICE9PSAnY2FudmFzJztcbiAgICBpZiAoIXRoaXMucnVsZXJfKSB7XG4gICAgICAgIHRoaXMucnVsZXJfID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMucnVsZXJfLmlkID0gJ2h0ZXJtOnJ1bGVyLWNoYXJhY3Rlci1zaXplJztcbiAgICAgICAgdGhpcy5ydWxlcl8uc3R5bGUuY3NzVGV4dCA9XG4gICAgICAgICAgICAncG9zaXRpb246IGFic29sdXRlOycgK1xuICAgICAgICAgICAgICAgICd0b3A6IDA7JyArXG4gICAgICAgICAgICAgICAgJ2xlZnQ6IDA7JyArXG4gICAgICAgICAgICAgICAgJ3Zpc2liaWxpdHk6IGhpZGRlbjsnICtcbiAgICAgICAgICAgICAgICAnaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7JyArXG4gICAgICAgICAgICAgICAgJ3dpZHRoOiBhdXRvICFpbXBvcnRhbnQ7JztcbiAgICAgICAgLy8gV2UgbmVlZCB0byBwdXQgdGhlIHRleHQgaW4gYSBzcGFuIHRvIG1ha2UgdGhlIHNpemUgY2FsY3VsYXRpb25cbiAgICAgICAgLy8gd29yayBwcm9wZXJseSBpbiBGaXJlZm94XG4gICAgICAgIGlmIChkb21NZXRob2QpIHtcbiAgICAgICAgICAgIHRoaXMucnVsZXJTcGFuXyA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgIHRoaXMucnVsZXJTcGFuXy5pZCA9ICdodGVybTpydWxlci1zcGFuLXdvcmthcm91bmQnO1xuICAgICAgICAgICAgdGhpcy5ydWxlclNwYW5fLmlubmVySFRNTCA9ICgnWCcucmVwZWF0KGxpbmVMZW5ndGgpICsgJ1xccicpLnJlcGVhdChudW1iZXJPZkxpbmVzKTtcbiAgICAgICAgICAgIHRoaXMucnVsZXJfLmFwcGVuZENoaWxkKHRoaXMucnVsZXJTcGFuXyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ydWxlckJhc2VsaW5lXyA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgdGhpcy5ydWxlckJhc2VsaW5lXy5pZCA9ICdodGVybTpydWxlci1iYXNlbGluZSc7XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY29sbGFwc2UgaXQgb24gdGhlIGJhc2VsaW5lXG4gICAgICAgIHRoaXMucnVsZXJCYXNlbGluZV8uc3R5bGUuZm9udFNpemUgPSAnMHB4JztcbiAgICAgICAgdGhpcy5ydWxlckJhc2VsaW5lXy50ZXh0Q29udGVudCA9ICdYJztcbiAgICB9XG4gICAgaWYgKHRoaXMucnVsZXJTcGFuXykge1xuICAgICAgICB0aGlzLnJ1bGVyU3Bhbl8uc3R5bGUuZm9udFdlaWdodCA9IG9wdF93ZWlnaHQgfHwgJyc7XG4gICAgfVxuICAgIHRoaXMucm93Tm9kZXNfLmFwcGVuZENoaWxkKHRoaXMucnVsZXJfKTtcbiAgICB2YXIgc2l6ZTtcbiAgICBpZiAoZG9tTWV0aG9kKSB7XG4gICAgICAgIHZhciBydWxlclNpemUgPSBodGVybS5nZXRDbGllbnRTaXplKHRoaXMucnVsZXJTcGFuXyk7XG4gICAgICAgIHNpemUgPSBuZXcgaHRlcm0uU2l6ZShydWxlclNpemUud2lkdGggLyBsaW5lTGVuZ3RoLCBydWxlclNpemUuaGVpZ2h0IC8gbnVtYmVyT2ZMaW5lcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZm9udCA9IHRoaXMuc2NyZWVuXy5zdHlsZS5mb250O1xuICAgICAgICB2YXIgcyA9IF9fZ2V0VGV4dFdpZHRoKCdRV0VSMVlVSU9YJy5yZXBlYXQoMTApLCBmb250KTtcbiAgICAgICAgc2l6ZSA9IG5ldyBodGVybS5TaXplKHMud2lkdGggLyAxMDAsIHMuaGVpZ2h0KTtcbiAgICB9XG4gICAgdGhpcy5ydWxlcl8uaW5zZXJ0QmVmb3JlKHRoaXMucnVsZXJCYXNlbGluZV8sIHRoaXMucnVsZXJfLmNoaWxkTm9kZXNbMF0pO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBzaXplLmJhc2VsaW5lID0gdGhpcy5ydWxlckJhc2VsaW5lXy5vZmZzZXRUb3A7XG4gICAgdGhpcy5ydWxlcl8ucmVtb3ZlQ2hpbGQodGhpcy5ydWxlckJhc2VsaW5lXyk7XG4gICAgdGhpcy5yb3dOb2Rlc18ucmVtb3ZlQ2hpbGQodGhpcy5ydWxlcl8pO1xuICAgIHRoaXMuZGl2Xy5vd25lckRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5zdmdfKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgc2l6ZS56b29tRmFjdG9yID0gdGhpcy5zdmdfLmN1cnJlbnRTY2FsZTtcbiAgICB0aGlzLmRpdl8ub3duZXJEb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMuc3ZnXyk7XG4gICAgcmV0dXJuIHNpemU7XG59O1xuaHRlcm0uU2Nyb2xsUG9ydC5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY3VycmVudFNjcm9sbGJhcldpZHRoUHggPVxuICAgICAgICBodGVybS5nZXRDbGllbnRXaWR0aCh0aGlzLnNjcmVlbl8pIC0gdGhpcy5zY3JlZW5fLmNsaWVudFdpZHRoO1xuICAgIHRoaXMuc3luY1Njcm9sbEhlaWdodCgpO1xuICAgIHRoaXMuc3luY1Jvd05vZGVzRGltZW5zaW9uc18oKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5wdWJsaXNoKCdyZXNpemUnLCB7IHNjcm9sbFBvcnQ6IHRoaXMgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvKlxuICAgICAgICBzZWxmLnNjcm9sbGVyXy5fX2NhbGxiYWNrID0gKCkgPT4ge307XG4gICAgICAgIHNlbGYuc2Nyb2xsZXJfID0gbmV3IFdLU2Nyb2xsZXIoXG4gICAgICAgICAgZnVuY3Rpb24gcmVuZGVyKGxlZnQsIHRvcCwgem9vbSkge1xuICAgICAgICAgICAgaWYgKF9fcGFnZVlPZmZzZXQgPT09IHRvcCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfX3BhZ2VZT2Zmc2V0ID0gdG9wIHx8IDA7XG4gICAgICAgICAgICBzZWxmLm9uU2Nyb2xsXygpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBzY3JvbGxpbmdYOiBmYWxzZSB9XG4gICAgICAgICk7XG4gICAgICAgICovXG4gICAgICAgIHNlbGYuc2Nyb2xsZXJfLnNldERpbWVuc2lvbnMoX19zY3JlZW5TaXplLndpZHRoLCBfX3NjcmVlblNpemUuaGVpZ2h0LCBfX3NjcmVlblNpemUud2lkdGgsIF9fcHJldkhlaWdodCk7XG4gICAgICAgIHZhciBwb3MgPSBfX3ByZXZIZWlnaHQgLSBfX3NjcmVlblNpemUuaGVpZ2h0O1xuICAgICAgICBpZiAocG9zIDwgMCkge1xuICAgICAgICAgICAgcG9zID0gMDtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnNjcm9sbGVyXy5zY3JvbGxUbygwLCBwb3MsIGZhbHNlKTtcbiAgICAgICAgLy9zZWxmLnNjcm9sbFJvd1RvQm90dG9tKHNlbGYucm93UHJvdmlkZXJfLmdldFJvd0NvdW50KCkpO1xuICAgICAgICBzZWxmLnNjaGVkdWxlUmVkcmF3KCk7XG4gICAgfSk7XG59O1xuIiwiaW1wb3J0IHsgbGliIH0gZnJvbSAnLi4vaHRlcm1fYWxsJztcbnZhciBfX25vZGVLZXkgPSAwO1xuZXhwb3J0IGZ1bmN0aW9uIHRvdWNoKG4pIHtcbiAgICBuLnYgPSAobi52ICsgMSkgJSAxMDAwMDAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdlbktleSgpIHtcbiAgICByZXR1cm4gX19ub2RlS2V5KysgJSAxMDAwMDAwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5vZGVTdWJzdHIobm9kZSwgc3RhcnQsIHdpZHRoKSB7XG4gICAgaWYgKG5vZGUuYXR0cnMuYXNjaWlOb2RlKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIG5vZGUudHh0LnN1YnN0cihzdGFydCwgd2lkdGgpO1xuICAgIH1cbiAgICByZXR1cm4gbGliLndjLnN1YnN0cihub2RlLnR4dCwgc3RhcnQsIHdpZHRoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByb3dXaWR0aChyb3cpIHtcbiAgICB2YXIgcmVzdWx0ID0gMDtcbiAgICBjb25zdCBub2RlcyA9IHJvdy5ub2RlcztcbiAgICB2YXIgbGVuID0gbm9kZXMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9IG5vZGVzW2ldLndjdztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiByb3dUZXh0KHJvdykge1xuICAgIGxldCB0ZXh0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJvdy5ub2Rlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0ZXh0ICs9IHJvdy5ub2Rlc1tpXS50eHQ7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0O1xufVxuIiwiaW1wb3J0IHsgaHRlcm0sIGxpYiB9IGZyb20gJy4uL2h0ZXJtX2FsbCc7XG5pbXBvcnQgeyBnZW5LZXksIHRvdWNoIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBXQ19QUkVDQUxDVUxBVEVEX0NMQVNTRVMgfSBmcm9tICcuL1JOb2RlJztcbnZhciBfX2Nzc1N0eWxlU2hlZXQgPSBudWxsO1xuaHRlcm0uVGV4dEF0dHJpYnV0ZXMucHJvdG90eXBlLkRFRkFVTFRfQ09MT1IgPSAnJztcbmZ1bmN0aW9uIF9fZGVmYXVsdEF0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNEZWZhdWx0OiB0cnVlLFxuICAgICAgICB3Y05vZGU6IGZhbHNlLFxuICAgICAgICBhc2NpaU5vZGU6IHRydWUsXG4gICAgICAgIGZjaTogLTEsXG4gICAgICAgIGJjaTogLTEsXG4gICAgICAgIHVjaTogLTEsXG4gICAgfTtcbn1cbmNvbnN0IF9fZGVmYXVsdEF0dHJzID0gT2JqZWN0LmZyZWV6ZShfX2RlZmF1bHRBdHRyaWJ1dGVzKCkpO1xuZXhwb3J0IGZ1bmN0aW9uIHNldE5vZGVUZXh0KG5vZGUsIHRleHQsIHdjd2lkdGgpIHtcbiAgICBub2RlLnR4dCA9IHRleHQ7XG4gICAgaWYgKHdjd2lkdGggIT0gbnVsbCkge1xuICAgICAgICBub2RlLndjdyA9IHdjd2lkdGg7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUuYXR0cnMuYXNjaWlOb2RlKSB7XG4gICAgICAgIG5vZGUud2N3ID0gdGV4dC5sZW5ndGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBub2RlLndjdyA9IGxpYi53Yy5zdHJXaWR0aCh0ZXh0KTtcbiAgICB9XG4gICAgdG91Y2gobm9kZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0Tm9kZUF0dHJpYnV0ZWRUZXh0KGF0dHJzLCBub2RlLCB0ZXh0LCB3Y3dpZHRoKSB7XG4gICAgbm9kZS50eHQgPSB0ZXh0O1xuICAgIGlmICghYXR0cnMuYXNjaWlOb2RlICYmIG5vZGUuYXR0cnMuYXNjaWlOb2RlKSB7XG4gICAgICAgIG5vZGUuYXR0cnMgPSBhdHRycztcbiAgICB9XG4gICAgaWYgKHdjd2lkdGggIT0gbnVsbCkge1xuICAgICAgICBub2RlLndjdyA9IHdjd2lkdGg7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUuYXR0cnMuYXNjaWlOb2RlKSB7XG4gICAgICAgIG5vZGUud2N3ID0gdGV4dC5sZW5ndGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBub2RlLndjdyA9IGxpYi53Yy5zdHJXaWR0aCh0ZXh0KTtcbiAgICB9XG4gICAgdG91Y2gobm9kZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdE5vZGUodGV4dCwgd2N3aWR0aCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHY6IDAsXG4gICAgICAgIHR4dDogdGV4dCxcbiAgICAgICAgd2N3OiB3Y3dpZHRoLFxuICAgICAgICBrZXk6IGdlbktleSgpLFxuICAgICAgICBhdHRyczogX19kZWZhdWx0QXR0cnMsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb2RlKHRleHQsIHdjd2lkdGgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB2OiAwLFxuICAgICAgICB0eHQ6IHRleHQsXG4gICAgICAgIHdjdzogd2N3aWR0aCxcbiAgICAgICAga2V5OiBnZW5LZXkoKSxcbiAgICAgICAgYXR0cnM6IF9fZGVmYXVsdEF0dHJpYnV0ZXMoKSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUF0dHJpYnV0ZWROb2RlKGF0dHJzLCB0eHQsIHdjdykge1xuICAgIGlmICh3Y3cgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXR0cnMuYXNjaWlOb2RlKSB7XG4gICAgICAgICAgICB3Y3cgPSB0eHQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2N3ID0gbGliLndjLnN0cldpZHRoKHR4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdjogMCxcbiAgICAgICAgdHh0LFxuICAgICAgICAvLyBUT0RPOiBSRUNIRUNLXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgd2N3LFxuICAgICAgICBrZXk6IGdlbktleSgpLFxuICAgICAgICBhdHRycyxcbiAgICB9O1xufVxuaHRlcm0uVGV4dEF0dHJpYnV0ZXMucHJvdG90eXBlLnJlc2V0Q29sb3JQYWxldHRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY29sb3JQYWxldHRlID0gbGliLmNvbG9ycy5jb2xvclBhbGV0dGUuY29uY2F0KCk7XG4gICAgdGhpcy5yZWZyZXNoQ1NTUGFsZXR0ZSgpO1xuICAgIHRoaXMuc3luY0NvbG9ycygpO1xufTtcbmh0ZXJtLlRleHRBdHRyaWJ1dGVzLnByb3RvdHlwZS5yZWZyZXNoQ1NTUGFsZXR0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIV9fY3NzU3R5bGVTaGVldCkge1xuICAgICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgdGhpcy5kb2N1bWVudF8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgIF9fY3NzU3R5bGVTaGVldCA9IHN0eWxlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZGVib3VuY2UpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2RlYm91bmNlKTtcbiAgICAgICAgdGhpcy5fZGVib3VuY2UgPSBudWxsO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5fZGVib3VuY2UgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF9fY3NzU3R5bGVTaGVldCkge1xuICAgICAgICAgICAgX19jc3NTdHlsZVNoZWV0LmlubmVySFRNTCA9IF9fZ2VuZXJhdGVBdHRyaWJ1dGVzU3R5bGVTaGVldChzZWxmKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLl9kZWJvdW5jZSA9IG51bGw7XG4gICAgfSwgMTApO1xufTtcbmZ1bmN0aW9uIF9fZ2V0QnJpZ2h0SW5kZXgoaSkge1xuICAgIGlmIChpIDwgOCkge1xuICAgICAgICAvLyBJZiB0aGUgY29sb3IgaXMgZnJvbSB0aGUgbG93ZXIgaGFsZiBvZiB0aGUgQU5TSSAxNiwgYWRkIDguXG4gICAgICAgIHJldHVybiBpICsgODtcbiAgICB9XG4gICAgLy8gSWYgaXQncyBub3QgZnJvbSB0aGUgMTYgY29sb3IgcGFsZXR0ZSwgaWdub3JlIGJvbGQgcmVxdWVzdHMuICBUaGlzXG4gICAgLy8gbWF0Y2hlcyB0aGUgYmVoYXZpb3Igb2YgZ25vbWUtdGVybWluYWwuXG4gICAgcmV0dXJuIGk7XG59XG5odGVybS5UZXh0QXR0cmlidXRlcy5wcm90b3R5cGUuYXR0cnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNEZWZhdWx0KCkpIHtcbiAgICAgICAgcmV0dXJuIF9fZGVmYXVsdEF0dHJzO1xuICAgIH1cbiAgICB2YXIgYXR0cnMgPSB7XG4gICAgICAgIGlzRGVmYXVsdDogZmFsc2UsXG4gICAgICAgIHdjTm9kZTogdGhpcy53Y05vZGUsXG4gICAgICAgIGFzY2lpTm9kZTogdGhpcy5hc2NpaU5vZGUsXG4gICAgICAgIGZjaTogLTEsXG4gICAgICAgIGJjaTogLTEsXG4gICAgICAgIHVjaTogLTEsXG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHRoaXMuZm9yZWdyb3VuZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgYXR0cnMuZmNpID0gdGhpcy5mb3JlZ3JvdW5kO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmZvcmVncm91bmQgIT09IHRoaXMuREVGQVVMVF9DT0xPUikge1xuICAgICAgICBhdHRycy5mY3MgPSB0aGlzLmZvcmVncm91bmQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5iYWNrZ3JvdW5kID09PSAnbnVtYmVyJykge1xuICAgICAgICBhdHRycy5iY2kgPSB0aGlzLmJhY2tncm91bmQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuYmFja2dyb3VuZCAhPT0gdGhpcy5ERUZBVUxUX0NPTE9SKSB7XG4gICAgICAgIGF0dHJzLmJjcyA9IHRoaXMuYmFja2dyb3VuZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0aGlzLnVuZGVybGluZUNvbG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICBhdHRycy51Y2kgPSB0aGlzLnVuZGVybGluZUNvbG9yO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLnVuZGVybGluZUNvbG9yICE9PSB0aGlzLkRFRkFVTFRfQ09MT1IpIHtcbiAgICAgICAgYXR0cnMudWNzID0gdGhpcy51bmRlcmxpbmVDb2xvcjtcbiAgICB9XG4gICAgaWYgKHRoaXMuZW5hYmxlQm9sZCAmJiB0aGlzLmJvbGQpIHtcbiAgICAgICAgYXR0cnMuYm9sZCA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLml0YWxpYykge1xuICAgICAgICBhdHRycy5pdGFsaWMgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5ibGluaykge1xuICAgICAgICBhdHRycy5ibGluayA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnVuZGVybGluZSkge1xuICAgICAgICBhdHRycy51bmRlcmxpbmUgPSB0aGlzLnVuZGVybGluZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RyaWtldGhyb3VnaCkge1xuICAgICAgICBhdHRycy5zdHJpa2V0aHJvdWdoID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGF0dHJzO1xufTtcbmh0ZXJtLlRleHRBdHRyaWJ1dGVzLnByb3RvdHlwZS5zeW5jQ29sb3JzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBmb3JlZ3JvdW5kU291cmNlID0gdGhpcy5mb3JlZ3JvdW5kU291cmNlO1xuICAgIHZhciBiYWNrZ3JvdW5kU291cmNlID0gdGhpcy5iYWNrZ3JvdW5kU291cmNlO1xuICAgIHZhciBkZWZhdWx0Rm9yZWdyb3VuZCA9IHRoaXMuREVGQVVMVF9DT0xPUjtcbiAgICB2YXIgZGVmYXVsdEJhY2tncm91bmQgPSB0aGlzLkRFRkFVTFRfQ09MT1I7XG4gICAgaWYgKHRoaXMuaW52ZXJzZSkge1xuICAgICAgICBmb3JlZ3JvdW5kU291cmNlID0gdGhpcy5iYWNrZ3JvdW5kU291cmNlO1xuICAgICAgICBiYWNrZ3JvdW5kU291cmNlID0gdGhpcy5mb3JlZ3JvdW5kU291cmNlO1xuICAgICAgICAvLyBXZSBjYW4ndCBpbmhlcml0IHRoZSBjb250YWluZXIncyBjb2xvciBhbnltb3JlLlxuICAgICAgICBkZWZhdWx0Rm9yZWdyb3VuZCA9IHRoaXMuZGVmYXVsdEJhY2tncm91bmQ7XG4gICAgICAgIGRlZmF1bHRCYWNrZ3JvdW5kID0gdGhpcy5kZWZhdWx0Rm9yZWdyb3VuZDtcbiAgICB9XG4gICAgaWYgKHRoaXMuZW5hYmxlQm9sZEFzQnJpZ2h0ICYmIHRoaXMuYm9sZCkge1xuICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihmb3JlZ3JvdW5kU291cmNlKSkge1xuICAgICAgICAgICAgZm9yZWdyb3VuZFNvdXJjZSA9IF9fZ2V0QnJpZ2h0SW5kZXgoZm9yZWdyb3VuZFNvdXJjZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZvcmVncm91bmRTb3VyY2UgPT09IHRoaXMuU1JDX0RFRkFVTFQpIHtcbiAgICAgICAgdGhpcy5mb3JlZ3JvdW5kID0gZGVmYXVsdEZvcmVncm91bmQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmZvcmVncm91bmQgPSBmb3JlZ3JvdW5kU291cmNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5mYWludCkge1xuICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcih0aGlzLmZvcmVncm91bmQpKSB7XG4gICAgICAgICAgICB0aGlzLmZvcmVncm91bmQgPSB0aGlzLmNvbG9yUGFsZXR0ZVt0aGlzLmZvcmVncm91bmRdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb2xvclRvTWFrZUZhaW50ID0gdGhpcy5mb3JlZ3JvdW5kID09PSB0aGlzLkRFRkFVTFRfQ09MT1JcbiAgICAgICAgICAgID8gdGhpcy5kZWZhdWx0Rm9yZWdyb3VuZFxuICAgICAgICAgICAgOiB0aGlzLmZvcmVncm91bmQ7XG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZCA9IGxpYi5jb2xvcnMubWl4KGNvbG9yVG9NYWtlRmFpbnQsICdyZ2IoMCwgMCwgMCknLCAwLjMzMzMpO1xuICAgIH1cbiAgICBpZiAoYmFja2dyb3VuZFNvdXJjZSA9PT0gdGhpcy5TUkNfREVGQVVMVCkge1xuICAgICAgICB0aGlzLmJhY2tncm91bmQgPSBkZWZhdWx0QmFja2dyb3VuZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IGJhY2tncm91bmRTb3VyY2U7XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgaW52aXNpYmxlIHNldHRpbmdzIGxhc3QgdG8ga2VlcCBpdCBzaW1wbGUuXG4gICAgaWYgKHRoaXMuaW52aXNpYmxlKSB7XG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZCA9IHRoaXMuYmFja2dyb3VuZDtcbiAgICB9XG4gICAgaWYgKHRoaXMudW5kZXJsaW5lU291cmNlID09PSB0aGlzLlNSQ19ERUZBVUxUKSB7XG4gICAgICAgIHRoaXMudW5kZXJsaW5lQ29sb3IgPSB0aGlzLkRFRkFVTFRfQ09MT1I7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnVuZGVybGluZUNvbG9yID0gdGhpcy51bmRlcmxpbmVTb3VyY2U7XG4gICAgfVxufTtcbmZ1bmN0aW9uIF9fZ2VuZXJhdGVBdHRyaWJ1dGVzU3R5bGVTaGVldChhdHRycykge1xuICAgIHZhciByb3dzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgICB2YXIgY29sb3IgPSBhdHRycy5jb2xvclBhbGV0dGVbaV07XG4gICAgICAgIHJvd3MucHVzaCgnc3Bhbi5jJyArIGkgKyAnIHsgY29sb3I6ICcgKyBjb2xvciArICc7fScpO1xuICAgICAgICByb3dzLnB1c2goJ3NwYW4uYmMnICsgaSArICcgeyBiYWNrZ3JvdW5kOiAnICsgY29sb3IgKyAnO30nKTtcbiAgICAgICAgcm93cy5wdXNoKCdzcGFuLnVjJyArIGkgKyAnIHsgLXdlYmtpdC10ZXh0LWRlY29yYXRpb24tY29sb3I6ICcgKyBjb2xvciArICc7fScpO1xuICAgIH1cbiAgICByb3dzLnB1c2goJy51IHsgLXdlYmtpdC10ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTt9Jyk7XG4gICAgcm93cy5wdXNoKCcucyB7IC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7fScpO1xuICAgIHJvd3MucHVzaCgnLnVzIHsgLXdlYmtpdC10ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBsaW5lLXRocm91Z2g7fScpO1xuICAgIHJvd3MucHVzaCgnLnUxIHsgLXdlYmtpdC10ZXh0LWRlY29yYXRpb24tc3R5bGU6IHNvbGlkO30nKTtcbiAgICByb3dzLnB1c2goJy51MiB7IC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uLXN0eWxlOiBkb3VibGU7fScpO1xuICAgIHJvd3MucHVzaCgnLnUzIHsgLXdlYmtpdC10ZXh0LWRlY29yYXRpb24tc3R5bGU6IHdhdnk7fScpO1xuICAgIHJvd3MucHVzaCgnLnU0IHsgLXdlYmtpdC10ZXh0LWRlY29yYXRpb24tc3R5bGU6IGRvdHRlZDt9Jyk7XG4gICAgcm93cy5wdXNoKCcudTUgeyAtd2Via2l0LXRleHQtZGVjb3JhdGlvbi1zdHlsZTogZGFzaGVkO30nKTtcbiAgICByb3dzLnB1c2goJ3NwYW4uYiB7IGZvbnQtd2VpZ2h0OiBib2xkO30nKTtcbiAgICByb3dzLnB1c2goJ3NwYW4uaSB7IGZvbnQtc3R5bGU6IGl0YWxpYzt9Jyk7XG4gICAgcm93cy5wdXNoKCdzcGFuLndjIHsgZGlzcGxheTogaW5saW5lLWJsb2NrOyBvdmVyZmxvdy14OmhpZGRlbjsgfScpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBXQ19QUkVDQUxDVUxBVEVEX0NMQVNTRVM7IGkrKykge1xuICAgICAgICByb3dzLnB1c2goJ3NwYW4ud2MnICtcbiAgICAgICAgICAgIGkgK1xuICAgICAgICAgICAgJyB7IHdpZHRoOiBjYWxjKHZhcigtLWh0ZXJtLWNoYXJzaXplLXdpZHRoKSAqICcgK1xuICAgICAgICAgICAgaSArXG4gICAgICAgICAgICAnKTt9Jyk7XG4gICAgfVxuICAgIHJldHVybiByb3dzLmpvaW4oJ1xcbicpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5vZGVNYXRjaGVzQXR0cnMobm9kZSwgYXR0cnMpIHtcbiAgICBpZiAoYXR0cnMuaXNEZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiBub2RlLmF0dHJzLmlzRGVmYXVsdDtcbiAgICB9XG4gICAgdmFyIGEgPSBub2RlLmF0dHJzO1xuICAgIHJldHVybiAoIShhLndjTm9kZSB8fCBhdHRycy53Y05vZGUpICYmXG4gICAgICAgIGEuZmNpID09PSBhdHRycy5mY2kgJiZcbiAgICAgICAgYS5iY2kgPT09IGF0dHJzLmJjaSAmJlxuICAgICAgICBhLnVjaSA9PT0gYXR0cnMudWNpICYmXG4gICAgICAgIGEuZmNzID09PSBhdHRycy5mY3MgJiZcbiAgICAgICAgYS5iY3MgPT09IGF0dHJzLmJjcyAmJlxuICAgICAgICBhLnVjcyA9PT0gYXR0cnMudWNzICYmXG4gICAgICAgIGEuYm9sZCA9PT0gYXR0cnMuYm9sZCAmJlxuICAgICAgICBhLmJsaW5rID09PSBhdHRycy5ibGluayAmJlxuICAgICAgICBhLml0YWxpYyA9PT0gYXR0cnMuaXRhbGljICYmXG4gICAgICAgIGEudW5kZXJsaW5lID09PSBhdHRycy51bmRlcmxpbmUgJiZcbiAgICAgICAgYS5zdHJpa2V0aHJvdWdoID09PSBhdHRycy5zdHJpa2V0aHJvdWdoKTtcbn1cbmh0ZXJtLlRleHRBdHRyaWJ1dGVzLnByb3RvdHlwZS5pc0RlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gUmVvcmRlclxuICAgIHJldHVybiAodGhpcy5hc2NpaU5vZGUgJiZcbiAgICAgICAgIXRoaXMud2NOb2RlICYmXG4gICAgICAgIHRoaXMuZm9yZWdyb3VuZFNvdXJjZSA9PSB0aGlzLlNSQ19ERUZBVUxUICYmXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZFNvdXJjZSA9PSB0aGlzLlNSQ19ERUZBVUxUICYmXG4gICAgICAgICF0aGlzLnVuZGVybGluZSAmJlxuICAgICAgICAhdGhpcy5ib2xkICYmXG4gICAgICAgICF0aGlzLml0YWxpYyAmJlxuICAgICAgICAhdGhpcy5mYWludCAmJlxuICAgICAgICAhdGhpcy5ibGluayAmJlxuICAgICAgICAhdGhpcy5zdHJpa2V0aHJvdWdoICYmXG4gICAgICAgICF0aGlzLmludmVyc2UgJiZcbiAgICAgICAgIXRoaXMuaW52aXNpYmxlICYmXG4gICAgICAgIHRoaXMudGlsZURhdGEgPT0gbnVsbCAmJlxuICAgICAgICB0aGlzLnVyaSA9PSBudWxsKTtcbn07XG52YXIgX25vbkFTQ0lJUmVnZXggPSAvW15cXHgwMC1cXHg3Rl0vO1xuaHRlcm0uVGV4dEF0dHJpYnV0ZXMuc3BsaXRXaWRlY2hhclN0cmluZyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB2YXIgcnYgPSBbXSwgYmFzZSA9IDAsIGxlbmd0aCA9IDAsIHdjU3RyV2lkdGggPSAwLCB3Y0NoYXJXaWR0aCA9IDAsIGFzY2lpTm9kZSA9IHRydWUsIGxlbiA9IHN0ci5sZW5ndGg7XG4gICAgdmFyIGkgPSBzdHIuc2VhcmNoKF9ub25BU0NJSVJlZ2V4KTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHIsXG4gICAgICAgICAgICAgICAgd2NOb2RlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhc2NpaU5vZGUsXG4gICAgICAgICAgICAgICAgd2NTdHJXaWR0aDogbGVuLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgbGVuZ3RoID0gd2NTdHJXaWR0aCA9IGk7XG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgdmFyIGluY3JlbWVudDtcbiAgICAgICAgdmFyIGMgPSBzdHIuY29kZVBvaW50QXQoaSk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICAgIHZhciBzdWJzdHIgPSBzdHIuc3Vic3RyKGkpO1xuICAgICAgICAgICAgdmFyIGlkeCA9IHN1YnN0ci5zZWFyY2goX25vbkFTQ0lJUmVnZXgpO1xuICAgICAgICAgICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ2LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyOiBzdHIuc3Vic3RyKGJhc2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2NOb2RlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzY2lpTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdjU3RyV2lkdGg6IHdjU3RyV2lkdGggKyAobGVuIC0gaSksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcnYucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHI6IHN1YnN0cixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdjTm9kZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBhc2NpaU5vZGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB3Y1N0cldpZHRoOiBzdWJzdHIubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJ2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgd2NTdHJXaWR0aCArPSBpZHg7XG4gICAgICAgICAgICAgICAgbGVuZ3RoICs9IGlkeDtcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBpZHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpbmNyZW1lbnQgPSBjIDw9IDB4ZmZmZiA/IDEgOiAyO1xuICAgICAgICAgICAgd2NDaGFyV2lkdGggPSBsaWIud2MuY2hhcldpZHRoKGMpO1xuICAgICAgICAgICAgaWYgKHdjQ2hhcldpZHRoIDw9IDEpIHtcbiAgICAgICAgICAgICAgICB3Y1N0cldpZHRoICs9IHdjQ2hhcldpZHRoO1xuICAgICAgICAgICAgICAgIGxlbmd0aCArPSBpbmNyZW1lbnQ7XG4gICAgICAgICAgICAgICAgYXNjaWlOb2RlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ2LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyOiBzdHIuc3Vic3RyKGJhc2UsIGxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgICAgICB3Y05vZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNjaWlOb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2NTdHJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGFzY2lpTm9kZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHdjU3RyV2lkdGggPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBydi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgc3RyOiBzdHIuc3Vic3RyKGksIGluY3JlbWVudCksXG4gICAgICAgICAgICAgICAgICAgIHdjTm9kZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYXNjaWlOb2RlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgd2NTdHJXaWR0aDogMixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBiYXNlID0gaSArIGluY3JlbWVudDtcbiAgICAgICAgICAgICAgICBsZW5ndGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGkgKz0gaW5jcmVtZW50O1xuICAgIH1cbiAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHJ2LnB1c2goe1xuICAgICAgICAgICAgc3RyOiBzdHIuc3Vic3RyKGJhc2UsIGxlbmd0aCksXG4gICAgICAgICAgICB3Y05vZGU6IGZhbHNlLFxuICAgICAgICAgICAgYXNjaWlOb2RlLFxuICAgICAgICAgICAgd2NTdHJXaWR0aCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBydjtcbn07XG5saWIud2Muc3Vic3RyID0gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIG9wdF93aWR0aCkge1xuICAgIGlmICghX25vbkFTQ0lJUmVnZXgudGVzdChzdHIpKSB7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBvcHRfd2lkdGgpO1xuICAgIH1cbiAgICB2YXIgc3RhcnRJbmRleCA9IDA7XG4gICAgdmFyIGVuZEluZGV4LCB3aWR0aDtcbiAgICAvLyBGdW4gZWRnZSBjYXNlOiBOb3JtYWxseSB3ZSBhc3NvY2lhdGUgemVybyB3aWR0aCBjb2RlcG9pbnRzIChsaWtlIGNvbWJpbmluZ1xuICAgIC8vIGNoYXJhY3RlcnMpIHdpdGggdGhlIHByZXZpb3VzIGNvZGVwb2ludCwgc28gd2Ugc2tpcCBhbnkgbGVhZGluZyBvbmVzIHdoaWxlXG4gICAgLy8gaW5jbHVkaW5nIHRyYWlsaW5nIG9uZXMuICBIb3dldmVyLCBpZiB0aGVyZSBhcmUgemVybyB3aWR0aCBjb2RlcG9pbnRzIGF0XG4gICAgLy8gdGhlIHN0YXJ0IG9mIHRoZSBzdHJpbmcsIGFuZCB0aGUgc3Vic3RyaW5nIHN0YXJ0cyBhdCAwLCBsZXRzIGluY2x1ZGUgdGhlbVxuICAgIC8vIGluIHRoZSByZXN1bHQuICBUaGlzIGFsc28gbWFrZXMgZm9yIGEgc2ltcGxlIG9wdGltaXphdGlvbiBmb3IgYSBjb21tb25cbiAgICAvLyByZXF1ZXN0LlxuICAgIGlmIChzdGFydCkge1xuICAgICAgICBmb3IgKHdpZHRoID0gMDsgc3RhcnRJbmRleCA8IHN0ci5sZW5ndGg7KSB7XG4gICAgICAgICAgICBjb25zdCBjb2RlUG9pbnQgPSBzdHIuY29kZVBvaW50QXQoc3RhcnRJbmRleCk7XG4gICAgICAgICAgICB3aWR0aCArPSBsaWIud2MuY2hhcldpZHRoKGNvZGVQb2ludCk7XG4gICAgICAgICAgICBpZiAod2lkdGggPiBzdGFydClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHN0YXJ0SW5kZXggKz0gY29kZVBvaW50IDw9IDB4ZmZmZiA/IDEgOiAyO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRfd2lkdGggIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvciAoZW5kSW5kZXggPSBzdGFydEluZGV4LCB3aWR0aCA9IDA7IGVuZEluZGV4IDwgc3RyLmxlbmd0aDspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvZGVQb2ludCA9IHN0ci5jb2RlUG9pbnRBdChlbmRJbmRleCk7XG4gICAgICAgICAgICB3aWR0aCArPSBsaWIud2MuY2hhcldpZHRoKGNvZGVQb2ludCk7XG4gICAgICAgICAgICBpZiAod2lkdGggPiBvcHRfd2lkdGgpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGVuZEluZGV4ICs9IGNvZGVQb2ludCA8PSAweGZmZmYgPyAxIDogMjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cmluZyhzdGFydEluZGV4LCBlbmRJbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0SW5kZXgpO1xufTtcbmxpYi53Yy5zdHJXaWR0aCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB2YXIgd2lkdGgsIGxlbiA9IHN0ci5sZW5ndGgsIHJ2ID0gMDtcbiAgICB2YXIgaWR4ID0gc3RyLnNlYXJjaChfbm9uQVNDSUlSZWdleCk7XG4gICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGxlbjtcbiAgICB9XG4gICAgdmFyIGkgPSBpZHg7XG4gICAgcnYgPSBpZHg7XG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgdmFyIGNvZGVQb2ludCA9IHN0ci5jb2RlUG9pbnRBdChpKTtcbiAgICAgICAgd2lkdGggPSBsaWIud2MuY2hhcldpZHRoKGNvZGVQb2ludCk7XG4gICAgICAgIGlmICh3aWR0aCA8IDApXG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIHJ2ICs9IHdpZHRoO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGkgKz0gY29kZVBvaW50IDw9IDB4ZmZmZiA/IDEgOiAyO1xuICAgIH1cbiAgICByZXR1cm4gcnY7XG59O1xubGV0IF9fY2hhckNhY2hlID0gbmV3IE1hcCgpO1xuY29uc3QgX19jaGFyV2lkdGggPSBsaWIud2MuY2hhcldpZHRoO1xubGliLndjLmNoYXJXaWR0aCA9IGZ1bmN0aW9uICh1Y3MpIHtcbiAgICBsZXQgcmVzID0gX19jaGFyQ2FjaGUuZ2V0KHVjcyk7XG4gICAgaWYgKHJlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlcyA9IF9fY2hhcldpZHRoKHVjcyk7XG4gICAgICAgIGlmIChfX2NoYXJDYWNoZS5zaXplID4gMjAwMDApIHtcbiAgICAgICAgICAgIF9fY2hhckNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgX19jaGFyQ2FjaGUuc2V0KHVjcywgcmVzKTtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiByZXM7XG59O1xuIiwiaW1wb3J0IHsgdG91Y2gsIGdlbktleSwgbm9kZVN1YnN0ciwgcm93V2lkdGgsIHJvd1RleHQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZU5vZGUsIGNyZWF0ZURlZmF1bHROb2RlLCBzZXROb2RlVGV4dCwgc2V0Tm9kZUF0dHJpYnV0ZWRUZXh0LCBub2RlTWF0Y2hlc0F0dHJzLCBjcmVhdGVBdHRyaWJ1dGVkTm9kZSwgfSBmcm9tICcuL1RleHRBdHRyaWJ1dGVzJztcbmltcG9ydCB7IGh0ZXJtLCBsaWIgfSBmcm9tICcuLi9odGVybV9hbGwuanMnO1xuZnVuY3Rpb24gX19pbnNlcnROb2RlKG5vZGUsIG9mZnNldCwgc2VwYXJhdG9yKSB7XG4gICAgdmFyIGFmdGVyTm9kZSA9IHtcbiAgICAgICAga2V5OiBnZW5LZXkoKSxcbiAgICAgICAgdHh0OiBub2RlLnR4dCxcbiAgICAgICAgd2N3OiBub2RlLndjdyxcbiAgICAgICAgYXR0cnM6IG5vZGUuYXR0cnMsXG4gICAgICAgIHY6IDAsXG4gICAgfTtcbiAgICB2YXIgdHh0ID0gbm9kZS50eHQ7XG4gICAgc2V0Tm9kZVRleHQobm9kZSwgbm9kZVN1YnN0cihub2RlLCAwLCBvZmZzZXQpKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgc2V0Tm9kZVRleHQoYWZ0ZXJOb2RlLCBsaWIud2Muc3Vic3RyKHR4dCwgb2Zmc2V0KSk7XG4gICAgdmFyIG5vZGVzID0gW107XG4gICAgaWYgKG5vZGUudHh0KSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgfVxuICAgIGlmIChhZnRlck5vZGUudHh0KSB7XG4gICAgICAgIGlmIChub2RlLmF0dHJzLndjTm9kZSAmJiBhZnRlck5vZGUudHh0ID09PSB0eHQpIHtcbiAgICAgICAgICAgIG5vZGVzLnB1c2goY3JlYXRlTm9kZSgnICcsIDEpKTtcbiAgICAgICAgICAgIG5vZGVzLnB1c2goc2VwYXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVzLnB1c2goc2VwYXJhdG9yKTtcbiAgICAgICAgICAgIG5vZGVzLnB1c2goYWZ0ZXJOb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbm9kZXMucHVzaChzZXBhcmF0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZXM7XG59XG5odGVybS5TY3JlZW4ucHJvdG90eXBlLmludmFsaWRhdGVDdXJzb3JQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmN1cnNvclBvc2l0aW9uLm1vdmUoMCwgMCk7XG4gICAgdGhpcy5jdXJzb3JSb3dJZHhfID0gMDtcbiAgICB0aGlzLmN1cnNvck5vZGVJZHhfID0gMDtcbiAgICB0aGlzLmN1cnNvck9mZnNldF8gPSAwO1xufTtcbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuY2xlYXJDdXJzb3JSb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gMDtcbiAgICB0aGlzLmN1cnNvclBvc2l0aW9uLmNvbHVtbiA9IDA7XG4gICAgdGhpcy5jdXJzb3JQb3NpdGlvbi5vdmVyZmxvdyA9IGZhbHNlO1xuICAgIHZhciB0ZXh0O1xuICAgIGlmICh0aGlzLnRleHRBdHRyaWJ1dGVzLmlzRGVmYXVsdCgpKSB7XG4gICAgICAgIHRleHQgPSAnJztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRleHQgPSBsaWIuZi5nZXRXaGl0ZXNwYWNlKHRoaXMuY29sdW1uQ291bnRfKTtcbiAgICB9XG4gICAgLy8gV2Ugc2hvdWxkbid0IGhvbm9yIGludmVyc2UgY29sb3JzIHdoZW4gY2xlYXJpbmcgYW4gYXJlYSwgdG8gbWF0Y2hcbiAgICAvLyB4dGVybSdzIGJhY2sgY29sb3IgZXJhc2UgYmVoYXZpb3IuXG4gICAgdmFyIGludmVyc2UgPSB0aGlzLnRleHRBdHRyaWJ1dGVzLmludmVyc2U7XG4gICAgdGhpcy50ZXh0QXR0cmlidXRlcy5pbnZlcnNlID0gZmFsc2U7XG4gICAgdGhpcy50ZXh0QXR0cmlidXRlcy5zeW5jQ29sb3JzKCk7XG4gICAgdmFyIG5vZGUgPSBjcmVhdGVBdHRyaWJ1dGVkTm9kZSh0aGlzLnRleHRBdHRyaWJ1dGVzLmF0dHJzKCksIHRleHQsIHRleHQubGVuZ3RoKTtcbiAgICB2YXIgcm93ID0gdGhpcy5yb3dzQXJyYXlbdGhpcy5jdXJzb3JSb3dJZHhfXTtcbiAgICByb3cubm9kZXMgPSBbbm9kZV07XG4gICAgcm93Lm8gPSBmYWxzZTtcbiAgICBkZWxldGUgcm93LmltZztcbiAgICB0b3VjaChyb3cpO1xuICAgIHRoaXMuY3Vyc29yTm9kZUlkeF8gPSAwO1xuICAgIHRoaXMudGV4dEF0dHJpYnV0ZXMuaW52ZXJzZSA9IGludmVyc2U7XG4gICAgdGhpcy50ZXh0QXR0cmlidXRlcy5zeW5jQ29sb3JzKCk7XG59O1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5jb21taXRMaW5lT3ZlcmZsb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJvdyA9IHRoaXMucm93c0FycmF5W3RoaXMuY3Vyc29yUm93SWR4X107XG4gICAgcm93Lm8gPSB0cnVlO1xuICAgIHRvdWNoKHJvdyk7XG59O1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5zZXRDdXJzb3JQb3NpdGlvbiA9IGZ1bmN0aW9uIChyb3csIGNvbHVtbikge1xuICAgIGlmICghdGhpcy5yb3dzQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQXR0ZW1wdCB0byBzZXQgY3Vyc29yIHBvc2l0aW9uIG9uIGVtcHR5IHNjcmVlbi4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocm93ID49IHRoaXMucm93c0FycmF5Lmxlbmd0aCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdSb3cgb3V0IG9mIGJvdW5kczogJyArIHJvdyk7XG4gICAgICAgIHJvdyA9IHRoaXMucm93c0FycmF5Lmxlbmd0aCAtIDE7XG4gICAgfVxuICAgIGlmIChyb3cgPCAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1JvdyBvdXQgb2YgYm91bmRzOiAnICsgcm93KTtcbiAgICAgICAgcm93ID0gMDtcbiAgICB9XG4gICAgaWYgKGNvbHVtbiA+PSB0aGlzLmNvbHVtbkNvdW50Xykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdDb2x1bW4gb3V0IG9mIGJvdW5kczogJyArIGNvbHVtbik7XG4gICAgICAgIGNvbHVtbiA9IHRoaXMuY29sdW1uQ291bnRfIC0gMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29sdW1uIDwgMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdDb2x1bW4gb3V0IG9mIGJvdW5kczogJyArIGNvbHVtbik7XG4gICAgICAgIGNvbHVtbiA9IDA7XG4gICAgfVxuICAgIHRoaXMuY3Vyc29yUG9zaXRpb24ub3ZlcmZsb3cgPSBmYWxzZTtcbiAgICB2YXIgcm93Tm9kZSA9IHRoaXMucm93c0FycmF5W3Jvd107XG4gICAgdmFyIG5vZGVJZHggPSAwO1xuICAgIHZhciBub2RlID0gcm93Tm9kZS5ub2Rlc1swXTtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgbm9kZSA9IGNyZWF0ZU5vZGUoJycsIDApO1xuICAgICAgICByb3dOb2RlLm5vZGVzID0gW25vZGVdO1xuICAgICAgICB0b3VjaChyb3dOb2RlKTtcbiAgICB9XG4gICAgdmFyIGN1cnJlbnRDb2x1bW4gPSAwO1xuICAgIGlmIChyb3cgPT09IHRoaXMuY3Vyc29yUm93SWR4Xykge1xuICAgICAgICBpZiAoY29sdW1uID49IHRoaXMuY3Vyc29yUG9zaXRpb24uY29sdW1uIC0gdGhpcy5jdXJzb3JPZmZzZXRfKSB7XG4gICAgICAgICAgICBub2RlSWR4ID0gdGhpcy5jdXJzb3JOb2RlSWR4XztcbiAgICAgICAgICAgIG5vZGUgPSByb3dOb2RlLm5vZGVzW25vZGVJZHhdO1xuICAgICAgICAgICAgY3VycmVudENvbHVtbiA9IHRoaXMuY3Vyc29yUG9zaXRpb24uY29sdW1uIC0gdGhpcy5jdXJzb3JPZmZzZXRfO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmN1cnNvclJvd0lkeF8gPSByb3c7XG4gICAgfVxuICAgIHRoaXMuY3Vyc29yUG9zaXRpb24ubW92ZShyb3csIGNvbHVtbik7XG4gICAgaWYgKGNvbHVtbiA9PT0gMCkge1xuICAgICAgICB0aGlzLmN1cnNvck5vZGVJZHhfID0gMDtcbiAgICAgICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gMDtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gY29sdW1uIC0gY3VycmVudENvbHVtbjtcbiAgICAgICAgaWYgKCFyb3dOb2RlLm5vZGVzW25vZGVJZHggKyAxXSB8fCBub2RlLndjdyA+IG9mZnNldCkge1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JOb2RlSWR4XyA9IG5vZGVJZHg7XG4gICAgICAgICAgICB0aGlzLmN1cnNvck9mZnNldF8gPSBvZmZzZXQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudENvbHVtbiArPSBub2RlLndjdztcbiAgICAgICAgbm9kZSA9IHJvd05vZGUubm9kZXNbKytub2RlSWR4XTtcbiAgICB9XG59O1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5zeW5jU2VsZWN0aW9uQ2FyZXQgPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgbGV0IGNhcmV0ID0gd2luZG93Ll9rYi5jYXJldDtcbiAgICBpZiAoY2FyZXQpIHtcbiAgICAgICAgLy8gY2FyZXQuaW5uZXJUZXh0ID0gJyAnO1xuICAgICAgICBzZWxlY3Rpb24uY29sbGFwc2UoY2FyZXQsIDApO1xuICAgICAgICAvLyBjYXJldC5pbm5lclRleHQgPSAnJztcbiAgICB9XG4gICAgLy8gVE9ETzpcbiAgICAvL3RyeSB7XG4gICAgLy9zZWxlY3Rpb24uY29sbGFwc2UodGhpcy5jdXJzb3JOb2RlXywgdGhpcy5jdXJzb3JPZmZzZXRfKTtcbiAgICAvL30gY2F0Y2ggKGZpcmVmb3hJZ25vcmVkRXhjZXB0aW9uKSB7XG4gICAgLy8vLyBGRiBjYW4gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIHRoZSByYW5nZSBpcyBvZmYsIHJhdGhlciB0aGFuIGp1c3Qgbm90XG4gICAgLy8vLyBwZXJmb3JtaW5nIHRoZSBjb2xsYXBzZS5cbiAgICAvL31cbn07XG5odGVybS5TY3JlZW4ucHJvdG90eXBlLmN1cnNvclJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5yb3dzQXJyYXlbdGhpcy5jdXJzb3JSb3dJZHhfXTtcbn07XG5odGVybS5TY3JlZW4ucHJvdG90eXBlLm1heWJlQ2xpcEN1cnJlbnRSb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnNvclJvdyA9IHRoaXMuY3Vyc29yUm93KCk7XG4gICAgdmFyIHdpZHRoID0gcm93V2lkdGgoY3Vyc29yUm93KTtcbiAgICBpZiAod2lkdGggPD0gdGhpcy5jb2x1bW5Db3VudF8pIHtcbiAgICAgICAgLy8gQ3VycmVudCByb3cgZG9lcyBub3QgbmVlZCBjbGlwcGluZywgYnV0IG1heSBuZWVkIGNsYW1waW5nLlxuICAgICAgICBpZiAodGhpcy5jdXJzb3JQb3NpdGlvbi5jb2x1bW4gPj0gdGhpcy5jb2x1bW5Db3VudF8pIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3Vyc29yUG9zaXRpb24odGhpcy5jdXJzb3JQb3NpdGlvbi5yb3csIHRoaXMuY29sdW1uQ291bnRfIC0gMSk7XG4gICAgICAgICAgICB0aGlzLmN1cnNvclBvc2l0aW9uLm92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFNhdmUgb2ZmIHRoZSBjdXJyZW50IGNvbHVtbiBzbyB3ZSBjYW4gbWF5YmUgcmVzdG9yZSBpdCBsYXRlci5cbiAgICB2YXIgY3VycmVudENvbHVtbiA9IHRoaXMuY3Vyc29yUG9zaXRpb24uY29sdW1uO1xuICAgIC8vIE1vdmUgdGhlIGN1cnNvciB0byB0aGUgZmluYWwgY29sdW1uLlxuICAgIHRoaXMuc2V0Q3Vyc29yUG9zaXRpb24odGhpcy5jdXJzb3JQb3NpdGlvbi5yb3csIHRoaXMuY29sdW1uQ291bnRfIC0gMSk7XG4gICAgLy8gUmVtb3ZlIGFueSB0ZXh0IHRoYXQgcGFydGlhbGx5IG92ZXJmbG93cy5cbiAgICB2YXIgY3Vyc29yTm9kZSA9IHRoaXMucm93c0FycmF5W3RoaXMuY3Vyc29yUm93SWR4X10ubm9kZXNbdGhpcy5jdXJzb3JOb2RlSWR4X107XG4gICAgd2lkdGggPSBjdXJzb3JOb2RlLndjdztcbiAgICBpZiAodGhpcy5jdXJzb3JPZmZzZXRfIDwgd2lkdGggLSAxKSB7XG4gICAgICAgIHNldE5vZGVUZXh0KGN1cnNvck5vZGUsIG5vZGVTdWJzdHIoY3Vyc29yTm9kZSwgMCwgdGhpcy5jdXJzb3JPZmZzZXRfICsgMSkpO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgYWxsIG5vZGVzIGFmdGVyIHRoZSBjdXJzb3IuXG4gICAgY3Vyc29yUm93Lm5vZGVzLnNwbGljZSh0aGlzLmN1cnNvck5vZGVJZHhfICsgMSk7XG4gICAgaWYgKGN1cnJlbnRDb2x1bW4gPCB0aGlzLmNvbHVtbkNvdW50Xykge1xuICAgICAgICAvLyBJZiB0aGUgY3Vyc29yIHdhcyB3aXRoaW4gdGhlIHNjcmVlbiBiZWZvcmUgd2Ugc3RhcnRlZCB0aGVuIHJlc3RvcmUgaXRzXG4gICAgICAgIC8vIHBvc2l0aW9uLlxuICAgICAgICB0aGlzLnNldEN1cnNvclBvc2l0aW9uKHRoaXMuY3Vyc29yUG9zaXRpb24ucm93LCBjdXJyZW50Q29sdW1uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSBsZWF2ZSBpdCBhdCB0aGUgdGhlIGxhc3QgY29sdW1uIGluIHRoZSBvdmVyZmxvdyBzdGF0ZS5cbiAgICAgICAgdGhpcy5jdXJzb3JQb3NpdGlvbi5vdmVyZmxvdyA9IHRydWU7XG4gICAgfVxufTtcbmZ1bmN0aW9uIF9fZmxhdHRlbk5vZGVzKHJvdywgc3RhcnROb2RlSWR4KSB7XG4gICAgdmFyIHNwbGljZUNvdW50ID0gMDtcbiAgICB2YXIgc3RhcnROb2RlID0gcm93Lm5vZGVzW3N0YXJ0Tm9kZUlkeF07XG4gICAgdmFyIHRleHQgPSBzdGFydE5vZGUudHh0O1xuICAgIHZhciB3Y3cgPSBzdGFydE5vZGUud2N3O1xuICAgIHZhciBhdHRycyA9IHN0YXJ0Tm9kZS5hdHRycztcbiAgICB2YXIgaWR4ID0gc3RhcnROb2RlSWR4ICsgMTtcbiAgICB2YXIgbm9kZSA9IHJvdy5ub2Rlc1tpZHhdO1xuICAgIHdoaWxlIChub2RlICYmIG5vZGVNYXRjaGVzQXR0cnMobm9kZSwgYXR0cnMpKSB7XG4gICAgICAgIHRleHQgKz0gbm9kZS50eHQ7XG4gICAgICAgIHdjdyArPSBub2RlLndjdztcbiAgICAgICAgaWYgKCFub2RlLmF0dHJzLmFzY2lpTm9kZSkge1xuICAgICAgICAgICAgYXR0cnMgPSBub2RlLmF0dHJzO1xuICAgICAgICB9XG4gICAgICAgIHNwbGljZUNvdW50Kys7XG4gICAgICAgIGlkeCsrO1xuICAgICAgICBub2RlID0gcm93Lm5vZGVzW2lkeF07XG4gICAgfVxuICAgIGlmIChzcGxpY2VDb3VudCA+IDApIHtcbiAgICAgICAgc2V0Tm9kZUF0dHJpYnV0ZWRUZXh0KGF0dHJzLCBzdGFydE5vZGUsIHRleHQsIHdjdyk7XG4gICAgICAgIHJvdy5ub2Rlcy5zcGxpY2Uoc3RhcnROb2RlSWR4ICsgMSwgc3BsaWNlQ291bnQpO1xuICAgICAgICB0b3VjaChyb3cpO1xuICAgIH1cbn1cbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUub3ZlcndyaXRlTm9kZSA9IGZ1bmN0aW9uIChzdHIsIHdjd2lkdGgsIGF0dHJzKSB7XG4gICAgdmFyIGN1cnNvclJvdyA9IHRoaXMucm93c0FycmF5W3RoaXMuY3Vyc29yUm93SWR4X107XG4gICAgdmFyIGN1cnNvck5vZGUgPSBjdXJzb3JSb3cubm9kZXNbdGhpcy5jdXJzb3JOb2RlSWR4X107XG4gICAgbGV0IHdjd2lkdGhMZWZ0ID0gd2N3aWR0aDtcbiAgICB2YXIgY3Vyc29yTm9kZVRleHQgPSBjdXJzb3JOb2RlLnR4dDtcbiAgICBjdXJzb3JSb3cubyA9IGZhbHNlO1xuICAgIC8vIE5vIG1hdHRlciB3aGF0LCBiZWZvcmUgdGhpcyBmdW5jdGlvbiBleGl0cyB0aGUgY3Vyc29yIGNvbHVtbiB3aWxsIGhhdmVcbiAgICAvLyBtb3ZlZCB0aGlzIG11Y2guXG4gICAgdGhpcy5jdXJzb3JQb3NpdGlvbi5jb2x1bW4gKz0gd2N3aWR0aDtcbiAgICAvLyBMb2NhbCBjYWNoZSBvZiB0aGUgY3Vyc29yIG9mZnNldC5cbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5jdXJzb3JPZmZzZXRfO1xuICAgIC8vIFJldmVyc2Ugb2Zmc2V0IGlzIHRoZSBvZmZzZXQgbWVhc3VyZWQgZnJvbSB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4gICAgLy8gWmVybyBpbXBsaWVzIHRoYXQgdGhlIGN1cnNvciBpcyBhdCB0aGUgZW5kIG9mIHRoZSBjdXJzb3Igbm9kZS5cbiAgICB2YXIgcmV2ZXJzZU9mZnNldCA9IGN1cnNvck5vZGUud2N3IC0gb2Zmc2V0O1xuICAgIGlmIChyZXZlcnNlT2Zmc2V0IDwgMCkge1xuICAgICAgICAvLyBBIG5lZ2F0aXZlIHJldmVyc2Ugb2Zmc2V0IG1lYW5zIHRoZSBjdXJzb3IgaXMgcG9zaXRpb25lZCBwYXN0IHRoZSBlbmRcbiAgICAgICAgLy8gb2YgdGhlIGNoYXJhY3RlcnMgb24gdGhpcyBsaW5lLiAgV2UnbGwgbmVlZCB0byBpbnNlcnQgdGhlIG1pc3NpbmdcbiAgICAgICAgLy8gd2hpdGVzcGFjZS5cbiAgICAgICAgdmFyIHdzID0gbGliLmYuZ2V0V2hpdGVzcGFjZSgtcmV2ZXJzZU9mZnNldCk7XG4gICAgICAgIC8vIFRoaXMgd2hpdGVzcGFjZSBzaG91bGQgYmUgY29tcGxldGVseSB1bnN0eWxlZC4gIFVuZGVybGluZSwgYmFja2dyb3VuZFxuICAgICAgICAvLyBjb2xvciwgYW5kIHN0cmlrZXRocm91Z2ggd291bGQgYmUgdmlzaWJsZSBvbiB3aGl0ZXNwYWNlLCBzbyB3ZSBjYW4ndCB1c2VcbiAgICAgICAgLy8gb25lIG9mIHRob3NlIHNwYW5zIHRvIGhvbGQgdGhlIHRleHQuXG4gICAgICAgIGlmIChjdXJzb3JOb2RlLmF0dHJzLmlzRGVmYXVsdCB8fFxuICAgICAgICAgICAgISghY3Vyc29yTm9kZS5hdHRycy5hc2NpaU5vZGUgfHxcbiAgICAgICAgICAgICAgICBjdXJzb3JOb2RlLmF0dHJzLndjTm9kZSB8fFxuICAgICAgICAgICAgICAgIGN1cnNvck5vZGUuYXR0cnMuYmNpID49IDAgfHxcbiAgICAgICAgICAgICAgICBjdXJzb3JOb2RlLmF0dHJzLmJjcyB8fFxuICAgICAgICAgICAgICAgIGN1cnNvck5vZGUuYXR0cnMudW5kZXJsaW5lIHx8XG4gICAgICAgICAgICAgICAgY3Vyc29yTm9kZS5hdHRycy5zdHJpa2V0aHJvdWdoKSkge1xuICAgICAgICAgICAgLy8gU2Vjb25kIGJlc3QgY2FzZSwgdGhlIGN1cnJlbnQgbm9kZSBpcyBhYmxlIHRvIGhvbGQgdGhlIHdoaXRlc3BhY2UuXG4gICAgICAgICAgICBzZXROb2RlVGV4dChjdXJzb3JOb2RlLCAoY3Vyc29yTm9kZVRleHQgKz0gd3MpLCBjdXJzb3JOb2RlLndjdyAtIHJldmVyc2VPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gV29yc3QgY2FzZSwgd2UgaGF2ZSB0byBjcmVhdGUgYSBuZXcgbm9kZSB0byBob2xkIHRoZSB3aGl0ZXNwYWNlLlxuICAgICAgICAgICAgdmFyIHdzTm9kZSA9IGNyZWF0ZURlZmF1bHROb2RlKHdzLCAtcmV2ZXJzZU9mZnNldCk7XG4gICAgICAgICAgICB0aGlzLmN1cnNvck5vZGVJZHhfKys7XG4gICAgICAgICAgICBjdXJzb3JSb3cubm9kZXMuc3BsaWNlKHRoaXMuY3Vyc29yTm9kZUlkeF8sIDAsIHdzTm9kZSk7XG4gICAgICAgICAgICBjdXJzb3JOb2RlID0gd3NOb2RlO1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gb2Zmc2V0ID0gLXJldmVyc2VPZmZzZXQ7XG4gICAgICAgICAgICBjdXJzb3JOb2RlVGV4dCA9IHdzO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIG5vdyBrbm93IGZvciBzdXJlIHRoYXQgd2UncmUgYXQgdGhlIGxhc3QgY2hhcmFjdGVyIG9mIHRoZSBjdXJzb3Igbm9kZS5cbiAgICAgICAgcmV2ZXJzZU9mZnNldCA9IDA7XG4gICAgfVxuICAgIGlmIChub2RlTWF0Y2hlc0F0dHJzKGN1cnNvck5vZGUsIGF0dHJzKSkge1xuICAgICAgICAvLyBUaGUgbmV3IHRleHQgY2FuIGJlIHBsYWNlZCBkaXJlY3RseSBpbiB0aGUgY3Vyc29yIG5vZGUuXG4gICAgICAgIGlmIChyZXZlcnNlT2Zmc2V0ID09PSAwKSB7XG4gICAgICAgICAgICBzZXROb2RlQXR0cmlidXRlZFRleHQoYXR0cnMsIGN1cnNvck5vZGUsIGN1cnNvck5vZGVUZXh0ICsgc3RyKTtcbiAgICAgICAgICAgIC8vIE5vIG5vZGVzIGFmdGVyIGN1cnNvck5vZGUsIHNvIG5vdGhpbmcgdG8gZGVsZXRlXG4gICAgICAgICAgICBpZiAoIWN1cnNvclJvdy5ub2Rlc1t0aGlzLmN1cnNvck5vZGVJZHhfICsgMV0pIHtcbiAgICAgICAgICAgICAgICB3Y3dpZHRoTGVmdCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCB3Y2RpZmYgPSB3Y3dpZHRoIC0gY3Vyc29yTm9kZS53Y3c7XG4gICAgICAgICAgICBpZiAod2NkaWZmID49IDApIHtcbiAgICAgICAgICAgICAgICBzZXROb2RlQXR0cmlidXRlZFRleHQoYXR0cnMsIGN1cnNvck5vZGUsIHN0ciwgd2N3aWR0aCk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnNvclJvdy5ub2Rlc1t0aGlzLmN1cnNvck5vZGVJZHhfICsgMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgd2N3aWR0aExlZnQgPSB3Y2RpZmY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3Y3dpZHRoTGVmdCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0Tm9kZUF0dHJpYnV0ZWRUZXh0KGF0dHJzLCBjdXJzb3JOb2RlLCBzdHIgKyBub2RlU3Vic3RyKGN1cnNvck5vZGUsIHdjd2lkdGgpKTtcbiAgICAgICAgICAgICAgICB3Y3dpZHRoTGVmdCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB3Y2RpZmYgPSB3Y3dpZHRoICsgb2Zmc2V0IC0gY3Vyc29yTm9kZS53Y3c7XG4gICAgICAgICAgICBpZiAod2NkaWZmID49IDApIHtcbiAgICAgICAgICAgICAgICBzZXROb2RlQXR0cmlidXRlZFRleHQoYXR0cnMsIGN1cnNvck5vZGUsIG5vZGVTdWJzdHIoY3Vyc29yTm9kZSwgMCwgb2Zmc2V0KSArIHN0cik7XG4gICAgICAgICAgICAgICAgd2N3aWR0aExlZnQgPSB3Y2RpZmY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG5vZGVTdWJzdHIoY3Vyc29yTm9kZSwgMCwgb2Zmc2V0KSArXG4gICAgICAgICAgICAgICAgICAgIHN0ciArXG4gICAgICAgICAgICAgICAgICAgIG5vZGVTdWJzdHIoY3Vyc29yTm9kZSwgb2Zmc2V0ICsgd2N3aWR0aCk7XG4gICAgICAgICAgICAgICAgc2V0Tm9kZUF0dHJpYnV0ZWRUZXh0KGF0dHJzLCBjdXJzb3JOb2RlLCBzKTtcbiAgICAgICAgICAgICAgICB3Y3dpZHRoTGVmdCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJzb3JPZmZzZXRfICs9IHdjd2lkdGg7XG4gICAgICAgIHJldHVybiB3Y3dpZHRoTGVmdDtcbiAgICB9XG4gICAgLy8gVGhlIGN1cnNvciBub2RlIGlzIHRoZSB3cm9uZyBzdHlsZSBmb3IgdGhlIG5ldyB0ZXh0LiAgSWYgd2UncmUgYXQgdGhlXG4gICAgLy8gYmVnaW5uaW5nIG9yIGVuZCBvZiB0aGUgY3Vyc29yIG5vZGUsIHRoZW4gdGhlIGFkamFjZW50IG5vZGUgaXMgYWxzbyBhXG4gICAgLy8gcG90ZW50aWFsIGNhbmRpZGF0ZS5cbiAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgIC8vIEF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGN1cnNvciBub2RlLCB0aGUgY2hlY2sgdGhlIHByZXZpb3VzIHNpYmxpbmcuXG4gICAgICAgIHZhciBwcmV2aW91c1NpYmxpbmcgPSBjdXJzb3JSb3cubm9kZXNbdGhpcy5jdXJzb3JOb2RlSWR4XyAtIDFdO1xuICAgICAgICBpZiAocHJldmlvdXNTaWJsaW5nICYmIG5vZGVNYXRjaGVzQXR0cnMocHJldmlvdXNTaWJsaW5nLCBhdHRycykpIHtcbiAgICAgICAgICAgIHNldE5vZGVBdHRyaWJ1dGVkVGV4dChhdHRycywgcHJldmlvdXNTaWJsaW5nLCBwcmV2aW91c1NpYmxpbmcudHh0ICsgc3RyKTtcbiAgICAgICAgICAgIGNvbnN0IHdjZGlmZiA9IHdjd2lkdGggLSBjdXJzb3JOb2RlLndjdztcbiAgICAgICAgICAgIGlmICh3Y2RpZmYgPj0gMCkge1xuICAgICAgICAgICAgICAgIGN1cnNvclJvdy5ub2Rlcy5zcGxpY2UodGhpcy5jdXJzb3JOb2RlSWR4XywgMSk7XG4gICAgICAgICAgICAgICAgd2N3aWR0aExlZnQgPSB3Y2RpZmY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghY3Vyc29yTm9kZS5hdHRycy53Y05vZGUpIHtcbiAgICAgICAgICAgICAgICBzZXROb2RlVGV4dChjdXJzb3JOb2RlLCBub2RlU3Vic3RyKGN1cnNvck5vZGUsIHdjd2lkdGgpKTtcbiAgICAgICAgICAgICAgICB3Y3dpZHRoTGVmdCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN1cnNvck5vZGVJZHhfID0gdGhpcy5jdXJzb3JOb2RlSWR4XyAtIDE7XG4gICAgICAgICAgICB0aGlzLmN1cnNvck9mZnNldF8gPSBwcmV2aW91c1NpYmxpbmcud2N3O1xuICAgICAgICAgICAgcmV0dXJuIHdjd2lkdGhMZWZ0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdOb2RlID0gY3JlYXRlQXR0cmlidXRlZE5vZGUoYXR0cnMsIHN0ciwgd2N3aWR0aCk7XG4gICAgICAgIC8vY3Vyc29yTm9kZSA9IG5ld05vZGU7XG4gICAgICAgIHRoaXMuY3Vyc29yT2Zmc2V0XyA9IHdjd2lkdGg7XG4gICAgICAgIGNvbnN0IHdjZGlmZiA9IHdjd2lkdGggLSBjdXJzb3JOb2RlLndjdztcbiAgICAgICAgaWYgKHdjZGlmZiA+PSAwKSB7XG4gICAgICAgICAgICBjdXJzb3JSb3cubm9kZXMuc3BsaWNlKHRoaXMuY3Vyc29yTm9kZUlkeF8sIDEsIG5ld05vZGUpO1xuICAgICAgICAgICAgd2N3aWR0aExlZnQgPSB3Y2RpZmY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjdXJzb3JSb3cubm9kZXMuc3BsaWNlKHRoaXMuY3Vyc29yTm9kZUlkeF8sIDAsIG5ld05vZGUpO1xuICAgICAgICAgICAgc2V0Tm9kZVRleHQoY3Vyc29yTm9kZSwgbm9kZVN1YnN0cihjdXJzb3JOb2RlLCB3Y3dpZHRoKSk7XG4gICAgICAgICAgICB3Y3dpZHRoTGVmdCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdjd2lkdGhMZWZ0O1xuICAgIH1cbiAgICBpZiAocmV2ZXJzZU9mZnNldCA9PT0gMCkge1xuICAgICAgICAvLyBBdCB0aGUgZW5kIG9mIHRoZSBjdXJzb3Igbm9kZSwgdGhlIGNoZWNrIHRoZSBuZXh0IHNpYmxpbmcuXG4gICAgICAgIHZhciBuZXh0U2libGluZyA9IGN1cnNvclJvdy5ub2Rlc1t0aGlzLmN1cnNvck5vZGVJZHhfICsgMV07XG4gICAgICAgIGlmIChuZXh0U2libGluZyAmJiBub2RlTWF0Y2hlc0F0dHJzKG5leHRTaWJsaW5nLCBhdHRycykpIHtcbiAgICAgICAgICAgIGNvbnN0IHdjZGlmZiA9IHdjd2lkdGggLSBuZXh0U2libGluZy53Y3c7XG4gICAgICAgICAgICBpZiAod2NkaWZmID49IDApIHtcbiAgICAgICAgICAgICAgICBzZXROb2RlQXR0cmlidXRlZFRleHQoYXR0cnMsIG5leHRTaWJsaW5nLCBzdHIsIHdjd2lkdGgpO1xuICAgICAgICAgICAgICAgIHdjd2lkdGhMZWZ0ID0gd2NkaWZmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0Tm9kZUF0dHJpYnV0ZWRUZXh0KGF0dHJzLCBuZXh0U2libGluZywgc3RyICsgbm9kZVN1YnN0cihuZXh0U2libGluZywgd2N3aWR0aCkpO1xuICAgICAgICAgICAgICAgIHdjd2lkdGhMZWZ0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY3Vyc29yTm9kZUlkeF8rKztcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yT2Zmc2V0XyA9IHdjd2lkdGg7IC8vbGliLndjLnN0cldpZHRoKHN0cik7XG4gICAgICAgICAgICByZXR1cm4gd2N3aWR0aExlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgbmV3Tm9kZSA9IGNyZWF0ZUF0dHJpYnV0ZWROb2RlKGF0dHJzLCBzdHIsIHdjd2lkdGgpO1xuICAgICAgICBjdXJzb3JSb3cubm9kZXMuc3BsaWNlKHRoaXMuY3Vyc29yTm9kZUlkeF8gKyAxLCAwLCBuZXdOb2RlKTtcbiAgICAgICAgdGhpcy5jdXJzb3JOb2RlSWR4XysrO1xuICAgICAgICBpZiAoIW5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICB3Y3dpZHRoTGVmdCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2Ugc3BlY2lmaWNhbGx5IG5lZWQgdG8gaW5jbHVkZSBhbnkgbWlzc2luZyB3aGl0ZXNwYWNlIGhlcmUsIHNpbmNlIGl0J3NcbiAgICAgICAgLy8gZ29pbmcgaW4gYSBuZXcgbm9kZS5cbiAgICAgICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gbmV3Tm9kZS53Y3c7XG4gICAgICAgIHJldHVybiB3Y3dpZHRoTGVmdDtcbiAgICB9XG4gICAgY29uc3Qgd2NkaWZmID0gb2Zmc2V0ICsgd2N3aWR0aCAtIGN1cnNvck5vZGUud2N3O1xuICAgIGlmICh3Y2RpZmYgPj0gMCkge1xuICAgICAgICBzZXROb2RlVGV4dChjdXJzb3JOb2RlLCBub2RlU3Vic3RyKGN1cnNvck5vZGUsIDAsIG9mZnNldCkpO1xuICAgICAgICB2YXIgbmV3Tm9kZSA9IGNyZWF0ZUF0dHJpYnV0ZWROb2RlKGF0dHJzLCBzdHIsIHdjd2lkdGgpO1xuICAgICAgICB0aGlzLmN1cnNvck5vZGVJZHhfKys7XG4gICAgICAgIGN1cnNvclJvdy5ub2Rlcy5zcGxpY2UodGhpcy5jdXJzb3JOb2RlSWR4XywgMCwgbmV3Tm9kZSk7XG4gICAgICAgIHRoaXMuY3Vyc29yT2Zmc2V0XyA9IHdjd2lkdGg7XG4gICAgICAgIHdjd2lkdGhMZWZ0ID0gd2NkaWZmO1xuICAgICAgICByZXR1cm4gd2N3aWR0aExlZnQ7XG4gICAgfVxuICAgIC8vIFdvcnN0IGNhc2UsIHdlJ3JlIHNvbWV3aGVyZSBpbiB0aGUgbWlkZGxlIG9mIHRoZSBjdXJzb3Igbm9kZS4gIFdlJ2xsXG4gICAgLy8gaGF2ZSB0byBzcGxpdCBpdCBpbnRvIHR3byBub2RlcyBhbmQgaW5zZXJ0IG91ciBuZXcgY29udGFpbmVyIGluIGJldHdlZW4uXG4gICAgdmFyIG5ld05vZGUgPSBjcmVhdGVBdHRyaWJ1dGVkTm9kZShhdHRycywgc3RyLCB3Y3dpZHRoKTtcbiAgICB2YXIgbm9kZXMgPSBfX2luc2VydE5vZGUoY3Vyc29yTm9kZSwgb2Zmc2V0LCBuZXdOb2RlKTtcbiAgICB2YXIgbm9kZXNDb3VudCA9IG5vZGVzLmxlbmd0aDtcbiAgICBpZiAobm9kZXNDb3VudCA9PT0gMSkge1xuICAgICAgICBjdXJzb3JSb3cubm9kZXMuc3BsaWNlKHRoaXMuY3Vyc29yTm9kZUlkeF8sIDEsIG5vZGVzWzBdKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZXNDb3VudCA9PT0gMikge1xuICAgICAgICBjdXJzb3JSb3cubm9kZXMuc3BsaWNlKHRoaXMuY3Vyc29yTm9kZUlkeF8sIDEsIG5vZGVzWzBdLCBub2Rlc1sxXSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGVzQ291bnQgPT09IDMpIHtcbiAgICAgICAgY3Vyc29yUm93Lm5vZGVzLnNwbGljZSh0aGlzLmN1cnNvck5vZGVJZHhfLCAxLCBub2Rlc1swXSwgbm9kZXNbMV0sIG5vZGVzWzJdKTtcbiAgICAgICAgdGhpcy5jdXJzb3JOb2RlSWR4XysrO1xuICAgIH1cbiAgICB0aGlzLmN1cnNvck5vZGVJZHhfKys7XG4gICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gMDtcbiAgICByZXR1cm4gd2N3aWR0aExlZnQ7XG59O1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5pbnNlcnRTdHJpbmcgPSBmdW5jdGlvbiAoc3RyLCB3Y3dpZHRoKSB7XG4gICAgdmFyIGN1cnNvclJvdyA9IHRoaXMucm93c0FycmF5W3RoaXMuY3Vyc29yUm93SWR4X107XG4gICAgdmFyIGN1cnNvck5vZGUgPSBjdXJzb3JSb3cubm9kZXNbdGhpcy5jdXJzb3JOb2RlSWR4X107XG4gICAgdmFyIGN1cnNvck5vZGVUZXh0ID0gY3Vyc29yTm9kZS50eHQ7XG4gICAgY29uc3QgYXR0cnMgPSB0aGlzLnRleHRBdHRyaWJ1dGVzLmF0dHJzKCk7XG4gICAgY3Vyc29yUm93Lm8gPSBmYWxzZTtcbiAgICAvLyBObyBtYXR0ZXIgd2hhdCwgYmVmb3JlIHRoaXMgZnVuY3Rpb24gZXhpdHMgdGhlIGN1cnNvciBjb2x1bW4gd2lsbCBoYXZlXG4gICAgLy8gbW92ZWQgdGhpcyBtdWNoLlxuICAgIHRoaXMuY3Vyc29yUG9zaXRpb24uY29sdW1uICs9IHdjd2lkdGg7XG4gICAgLy8gTG9jYWwgY2FjaGUgb2YgdGhlIGN1cnNvciBvZmZzZXQuXG4gICAgdmFyIG9mZnNldCA9IHRoaXMuY3Vyc29yT2Zmc2V0XztcbiAgICAvLyBSZXZlcnNlIG9mZnNldCBpcyB0aGUgb2Zmc2V0IG1lYXN1cmVkIGZyb20gdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuICAgIC8vIFplcm8gaW1wbGllcyB0aGF0IHRoZSBjdXJzb3IgaXMgYXQgdGhlIGVuZCBvZiB0aGUgY3Vyc29yIG5vZGUuXG4gICAgdmFyIHJldmVyc2VPZmZzZXQgPSBjdXJzb3JOb2RlLndjdyAtIG9mZnNldDtcbiAgICBpZiAocmV2ZXJzZU9mZnNldCA8IDApIHtcbiAgICAgICAgLy8gQSBuZWdhdGl2ZSByZXZlcnNlIG9mZnNldCBtZWFucyB0aGUgY3Vyc29yIGlzIHBvc2l0aW9uZWQgcGFzdCB0aGUgZW5kXG4gICAgICAgIC8vIG9mIHRoZSBjaGFyYWN0ZXJzIG9uIHRoaXMgbGluZS4gIFdlJ2xsIG5lZWQgdG8gaW5zZXJ0IHRoZSBtaXNzaW5nXG4gICAgICAgIC8vIHdoaXRlc3BhY2UuXG4gICAgICAgIHZhciB3cyA9IGxpYi5mLmdldFdoaXRlc3BhY2UoLXJldmVyc2VPZmZzZXQpO1xuICAgICAgICAvLyBUaGlzIHdoaXRlc3BhY2Ugc2hvdWxkIGJlIGNvbXBsZXRlbHkgdW5zdHlsZWQuICBVbmRlcmxpbmUsIGJhY2tncm91bmRcbiAgICAgICAgLy8gY29sb3IsIGFuZCBzdHJpa2V0aHJvdWdoIHdvdWxkIGJlIHZpc2libGUgb24gd2hpdGVzcGFjZSwgc28gd2UgY2FuJ3QgdXNlXG4gICAgICAgIC8vIG9uZSBvZiB0aG9zZSBzcGFucyB0byBob2xkIHRoZSB0ZXh0LlxuICAgICAgICBpZiAoY3Vyc29yTm9kZS5hdHRycy5pc0RlZmF1bHQgfHxcbiAgICAgICAgICAgICEoIWN1cnNvck5vZGUuYXR0cnMuYXNjaWlOb2RlIHx8XG4gICAgICAgICAgICAgICAgY3Vyc29yTm9kZS5hdHRycy53Y05vZGUgfHxcbiAgICAgICAgICAgICAgICBjdXJzb3JOb2RlLmF0dHJzLmJjaSA+PSAwIHx8XG4gICAgICAgICAgICAgICAgY3Vyc29yTm9kZS5hdHRycy5iY3MgfHxcbiAgICAgICAgICAgICAgICBjdXJzb3JOb2RlLmF0dHJzLnVuZGVybGluZSB8fFxuICAgICAgICAgICAgICAgIGN1cnNvck5vZGUuYXR0cnMuc3RyaWtldGhyb3VnaCkpIHtcbiAgICAgICAgICAgIC8vIFNlY29uZCBiZXN0IGNhc2UsIHRoZSBjdXJyZW50IG5vZGUgaXMgYWJsZSB0byBob2xkIHRoZSB3aGl0ZXNwYWNlLlxuICAgICAgICAgICAgc2V0Tm9kZVRleHQoY3Vyc29yTm9kZSwgKGN1cnNvck5vZGVUZXh0ICs9IHdzKSwgY3Vyc29yTm9kZS53Y3cgLSByZXZlcnNlT2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdvcnN0IGNhc2UsIHdlIGhhdmUgdG8gY3JlYXRlIGEgbmV3IG5vZGUgdG8gaG9sZCB0aGUgd2hpdGVzcGFjZS5cbiAgICAgICAgICAgIHZhciB3c05vZGUgPSBjcmVhdGVEZWZhdWx0Tm9kZSh3cywgLXJldmVyc2VPZmZzZXQpO1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JOb2RlSWR4XysrO1xuICAgICAgICAgICAgY3Vyc29yUm93Lm5vZGVzLnNwbGljZSh0aGlzLmN1cnNvck5vZGVJZHhfLCAwLCB3c05vZGUpO1xuICAgICAgICAgICAgY3Vyc29yTm9kZSA9IHdzTm9kZTtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yT2Zmc2V0XyA9IG9mZnNldCA9IC1yZXZlcnNlT2Zmc2V0O1xuICAgICAgICAgICAgY3Vyc29yTm9kZVRleHQgPSB3cztcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBub3cga25vdyBmb3Igc3VyZSB0aGF0IHdlJ3JlIGF0IHRoZSBsYXN0IGNoYXJhY3RlciBvZiB0aGUgY3Vyc29yIG5vZGUuXG4gICAgICAgIHJldmVyc2VPZmZzZXQgPSAwO1xuICAgIH1cbiAgICBpZiAobm9kZU1hdGNoZXNBdHRycyhjdXJzb3JOb2RlLCBhdHRycykpIHtcbiAgICAgICAgLy8gVGhlIG5ldyB0ZXh0IGNhbiBiZSBwbGFjZWQgZGlyZWN0bHkgaW4gdGhlIGN1cnNvciBub2RlLlxuICAgICAgICBpZiAocmV2ZXJzZU9mZnNldCA9PT0gMCkge1xuICAgICAgICAgICAgc2V0Tm9kZUF0dHJpYnV0ZWRUZXh0KGF0dHJzLCBjdXJzb3JOb2RlLCBjdXJzb3JOb2RlVGV4dCArIHN0cik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgICAgICBzZXROb2RlQXR0cmlidXRlZFRleHQoYXR0cnMsIGN1cnNvck5vZGUsIHN0ciArIGN1cnNvck5vZGVUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzID0gbm9kZVN1YnN0cihjdXJzb3JOb2RlLCAwLCBvZmZzZXQpICtcbiAgICAgICAgICAgICAgICBzdHIgK1xuICAgICAgICAgICAgICAgIG5vZGVTdWJzdHIoY3Vyc29yTm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIHNldE5vZGVBdHRyaWJ1dGVkVGV4dChhdHRycywgY3Vyc29yTm9kZSwgcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJzb3JPZmZzZXRfICs9IHdjd2lkdGg7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gVGhlIGN1cnNvciBub2RlIGlzIHRoZSB3cm9uZyBzdHlsZSBmb3IgdGhlIG5ldyB0ZXh0LiAgSWYgd2UncmUgYXQgdGhlXG4gICAgLy8gYmVnaW5uaW5nIG9yIGVuZCBvZiB0aGUgY3Vyc29yIG5vZGUsIHRoZW4gdGhlIGFkamFjZW50IG5vZGUgaXMgYWxzbyBhXG4gICAgLy8gcG90ZW50aWFsIGNhbmRpZGF0ZS5cbiAgICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgICAgIC8vIEF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGN1cnNvciBub2RlLCB0aGUgY2hlY2sgdGhlIHByZXZpb3VzIHNpYmxpbmcuXG4gICAgICAgIHZhciBwcmV2aW91c1NpYmxpbmcgPSBjdXJzb3JSb3cubm9kZXNbdGhpcy5jdXJzb3JOb2RlSWR4XyAtIDFdO1xuICAgICAgICBpZiAocHJldmlvdXNTaWJsaW5nICYmIG5vZGVNYXRjaGVzQXR0cnMocHJldmlvdXNTaWJsaW5nLCBhdHRycykpIHtcbiAgICAgICAgICAgIHNldE5vZGVBdHRyaWJ1dGVkVGV4dChhdHRycywgcHJldmlvdXNTaWJsaW5nLCBwcmV2aW91c1NpYmxpbmcudHh0ICsgc3RyKTtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yTm9kZUlkeF8gPSB0aGlzLmN1cnNvck5vZGVJZHhfIC0gMTtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yT2Zmc2V0XyA9IHByZXZpb3VzU2libGluZy53Y3c7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5ld05vZGUgPSBjcmVhdGVBdHRyaWJ1dGVkTm9kZShhdHRycywgc3RyLCB3Y3dpZHRoKTtcbiAgICAgICAgY3Vyc29yUm93Lm5vZGVzLnNwbGljZSh0aGlzLmN1cnNvck5vZGVJZHhfLCAwLCBuZXdOb2RlKTtcbiAgICAgICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gd2N3aWR0aDtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocmV2ZXJzZU9mZnNldCA9PT0gMCkge1xuICAgICAgICAvLyBBdCB0aGUgZW5kIG9mIHRoZSBjdXJzb3Igbm9kZSwgdGhlIGNoZWNrIHRoZSBuZXh0IHNpYmxpbmcuXG4gICAgICAgIHZhciBuZXh0U2libGluZyA9IGN1cnNvclJvdy5ub2Rlc1t0aGlzLmN1cnNvck5vZGVJZHhfICsgMV07XG4gICAgICAgIGlmIChuZXh0U2libGluZyAmJiBub2RlTWF0Y2hlc0F0dHJzKG5leHRTaWJsaW5nLCBhdHRycykpIHtcbiAgICAgICAgICAgIHNldE5vZGVBdHRyaWJ1dGVkVGV4dChhdHRycywgbmV4dFNpYmxpbmcsIHN0ciArIG5leHRTaWJsaW5nLnR4dCk7XG4gICAgICAgICAgICB0aGlzLmN1cnNvck5vZGVJZHhfKys7XG4gICAgICAgICAgICB0aGlzLmN1cnNvck9mZnNldF8gPSB3Y3dpZHRoOyAvL2xpYi53Yy5zdHJXaWR0aChzdHIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5ld05vZGUgPSBjcmVhdGVBdHRyaWJ1dGVkTm9kZShhdHRycywgc3RyLCB3Y3dpZHRoKTtcbiAgICAgICAgY3Vyc29yUm93Lm5vZGVzLnNwbGljZSh0aGlzLmN1cnNvck5vZGVJZHhfICsgMSwgMCwgbmV3Tm9kZSk7XG4gICAgICAgIHRoaXMuY3Vyc29yTm9kZUlkeF8rKztcbiAgICAgICAgLy8gV2Ugc3BlY2lmaWNhbGx5IG5lZWQgdG8gaW5jbHVkZSBhbnkgbWlzc2luZyB3aGl0ZXNwYWNlIGhlcmUsIHNpbmNlIGl0J3NcbiAgICAgICAgLy8gZ29pbmcgaW4gYSBuZXcgbm9kZS5cbiAgICAgICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gbmV3Tm9kZS53Y3c7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gV29yc3QgY2FzZSwgd2UncmUgc29tZXdoZXJlIGluIHRoZSBtaWRkbGUgb2YgdGhlIGN1cnNvciBub2RlLiAgV2UnbGxcbiAgICAvLyBoYXZlIHRvIHNwbGl0IGl0IGludG8gdHdvIG5vZGVzIGFuZCBpbnNlcnQgb3VyIG5ldyBjb250YWluZXIgaW4gYmV0d2Vlbi5cbiAgICB2YXIgbmV3Tm9kZSA9IGNyZWF0ZUF0dHJpYnV0ZWROb2RlKGF0dHJzLCBzdHIsIHdjd2lkdGgpO1xuICAgIHZhciBub2RlcyA9IF9faW5zZXJ0Tm9kZShjdXJzb3JOb2RlLCBvZmZzZXQsIG5ld05vZGUpO1xuICAgIHZhciBub2Rlc0NvdW50ID0gbm9kZXMubGVuZ3RoO1xuICAgIGlmIChub2Rlc0NvdW50ID09PSAxKSB7XG4gICAgICAgIGN1cnNvclJvdy5ub2Rlcy5zcGxpY2UodGhpcy5jdXJzb3JOb2RlSWR4XywgMSwgbm9kZXNbMF0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChub2Rlc0NvdW50ID09PSAyKSB7XG4gICAgICAgIGN1cnNvclJvdy5ub2Rlcy5zcGxpY2UodGhpcy5jdXJzb3JOb2RlSWR4XywgMSwgbm9kZXNbMF0sIG5vZGVzWzFdKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZXNDb3VudCA9PT0gMykge1xuICAgICAgICBjdXJzb3JSb3cubm9kZXMuc3BsaWNlKHRoaXMuY3Vyc29yTm9kZUlkeF8sIDEsIG5vZGVzWzBdLCBub2Rlc1sxXSwgbm9kZXNbMl0pO1xuICAgICAgICB0aGlzLmN1cnNvck5vZGVJZHhfKys7XG4gICAgfVxuICAgIHRoaXMuY3Vyc29yTm9kZUlkeF8rKztcbiAgICB0aGlzLmN1cnNvck9mZnNldF8gPSAwO1xufTtcbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUub3ZlcndyaXRlU3RyaW5nID0gZnVuY3Rpb24gKHN0ciwgd2N3aWR0aCkge1xuICAgIHZhciBtYXhMZW5ndGggPSB0aGlzLmNvbHVtbkNvdW50XyAtIHRoaXMuY3Vyc29yUG9zaXRpb24uY29sdW1uO1xuICAgIGlmICghbWF4TGVuZ3RoKVxuICAgICAgICByZXR1cm4gW3N0cl07XG4gICAgdmFyIGN1cnNvclJvd05vZGUgPSB0aGlzLnJvd3NBcnJheVt0aGlzLmN1cnNvclJvd0lkeF9dO1xuICAgIHZhciBjdXJzb3JOb2RlID0gY3Vyc29yUm93Tm9kZS5ub2Rlc1t0aGlzLmN1cnNvck5vZGVJZHhfXTtcbiAgICB2YXIgYXR0cnMgPSB0aGlzLnRleHRBdHRyaWJ1dGVzLmF0dHJzKCk7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMuY3Vyc29yT2Zmc2V0XztcbiAgICBjb25zdCB3Y2RpZmYgPSB3Y3dpZHRoICsgb2Zmc2V0IC0gY3Vyc29yTm9kZS53Y3c7XG4gICAgaWYgKHdjZGlmZiA8PSAwICYmIG5vZGVNYXRjaGVzQXR0cnMoY3Vyc29yTm9kZSwgYXR0cnMpKSB7XG4gICAgICAgIHRoaXMuY3Vyc29yT2Zmc2V0XyArPSB3Y3dpZHRoO1xuICAgICAgICB0aGlzLmN1cnNvclBvc2l0aW9uLmNvbHVtbiArPSB3Y3dpZHRoO1xuICAgICAgICBpZiAod2NkaWZmID09PSAwICYmIGN1cnNvck5vZGUudHh0LnN1YnN0cihvZmZzZXQpID09PSBzdHIpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgb3ZlcndyaXRlIHdvdWxkIGJlIGEgbm8tb3AsIGp1c3QgbW92ZSB0aGUgY3Vyc29yIGFuZCByZXR1cm4uXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod2NkaWZmID09PSAwKSB7XG4gICAgICAgICAgICBzZXROb2RlQXR0cmlidXRlZFRleHQoYXR0cnMsIGN1cnNvck5vZGUsIG5vZGVTdWJzdHIoY3Vyc29yTm9kZSwgMCwgb2Zmc2V0KSArIHN0cik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgcyA9IG5vZGVTdWJzdHIoY3Vyc29yTm9kZSwgMCwgb2Zmc2V0KSArXG4gICAgICAgICAgICAgICAgc3RyICtcbiAgICAgICAgICAgICAgICBub2RlU3Vic3RyKGN1cnNvck5vZGUsIG9mZnNldCArIHdjd2lkdGgpO1xuICAgICAgICAgICAgc2V0Tm9kZUF0dHJpYnV0ZWRUZXh0KGF0dHJzLCBjdXJzb3JOb2RlLCBzKTtcbiAgICAgICAgfVxuICAgICAgICB0b3VjaChjdXJzb3JSb3dOb2RlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgd2N3aWR0aExlZnQgPSB0aGlzLm92ZXJ3cml0ZU5vZGUoc3RyLCB3Y3dpZHRoLCBhdHRycyk7XG4gICAgaWYgKHdjd2lkdGhMZWZ0ID4gMCkge1xuICAgICAgICB0aGlzLmRlbGV0ZUNoYXJzKHdjd2lkdGhMZWZ0KTtcbiAgICB9XG4gICAgX19mbGF0dGVuTm9kZXMoY3Vyc29yUm93Tm9kZSwgdGhpcy5jdXJzb3JOb2RlSWR4Xyk7XG4gICAgdG91Y2goY3Vyc29yUm93Tm9kZSk7XG59O1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5kZWxldGVDaGFycyA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgIHZhciBjdXJzb3JSb3dOb2RlID0gdGhpcy5yb3dzQXJyYXlbdGhpcy5jdXJzb3JSb3dJZHhfXTtcbiAgICB2YXIgc3BsaWNlSWR4ID0gdGhpcy5jdXJzb3JOb2RlSWR4XztcbiAgICB2YXIgc3BsaWNlRGVsZXRlQ291bnQgPSAwO1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLmN1cnNvck9mZnNldF87XG4gICAgdmFyIGxlbiA9IGN1cnNvclJvd05vZGUubm9kZXMubGVuZ3RoO1xuICAgIHZhciBydiA9IGNvdW50O1xuICAgIGZvciAodmFyIG5vZGVJZHggPSB0aGlzLmN1cnNvck5vZGVJZHhfOyBub2RlSWR4IDwgbGVuOyBub2RlSWR4KyspIHtcbiAgICAgICAgaWYgKGNvdW50IDwgMCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRGVsZXRpbmcgJHtydn0gY2hhcnMgd2VudCBuZWdhdGl2ZTogJHtjb3VudH1gKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vZGUgPSBjdXJzb3JSb3dOb2RlLm5vZGVzW25vZGVJZHhdO1xuICAgICAgICB2YXIgc3RhcnRXaWR0aCA9IG5vZGUud2N3O1xuICAgICAgICBpZiAob2Zmc2V0ID4gMCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0V2lkdGggLSBvZmZzZXQgPT09IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgc2V0Tm9kZVRleHQobm9kZSwgbm9kZVN1YnN0cihub2RlLCAwLCBvZmZzZXQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhcnRXaWR0aCAtIG9mZnNldCA+IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgc2V0Tm9kZVRleHQobm9kZSwgbm9kZVN1YnN0cihub2RlLCAwLCBvZmZzZXQpICsgbm9kZVN1YnN0cihub2RlLCBvZmZzZXQgKyBjb3VudCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBydjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldE5vZGVUZXh0KG5vZGUsIG5vZGVTdWJzdHIobm9kZSwgMCwgb2Zmc2V0KSk7XG4gICAgICAgICAgICB2YXIgaXNMYXN0Tm9kZSA9ICFjdXJzb3JSb3dOb2RlLm5vZGVzW25vZGVJZHggKyAxXTtcbiAgICAgICAgICAgIGlmIChpc0xhc3ROb2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJ2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY291bnQgLT0gc3RhcnRXaWR0aCAtIG9mZnNldDtcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgICAgICBzcGxpY2VJZHgrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9mZnNldCA9PT0gMFxuICAgICAgICAvLyBKdXN0IHJlbW92ZSBub2RlXG4gICAgICAgIGlmIChzdGFydFdpZHRoIDw9IGNvdW50KSB7XG4gICAgICAgICAgICBzcGxpY2VEZWxldGVDb3VudCsrO1xuICAgICAgICAgICAgY291bnQgLT0gc3RhcnRXaWR0aDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxhc3QgbW9kaWZpY2F0aW9uXG4gICAgICAgIHNldE5vZGVUZXh0KG5vZGUsIG5vZGVTdWJzdHIobm9kZSwgY291bnQpKTtcbiAgICAgICAgLy8gd2UgZGlkbid0IGRlbGV0ZSBhbnl0aGluZy4gcmVwbGFjZSB3aXRoIG9uZSBjaGFyIHdpZHRoXG4gICAgICAgIGlmIChub2RlLmF0dHJzLndjTm9kZSAmJiBzdGFydFdpZHRoID09PSBub2RlLndjdykge1xuICAgICAgICAgICAgdmFyIHNwYWNlTm9kZSA9IGNyZWF0ZU5vZGUoJyAnLCAxKTtcbiAgICAgICAgICAgIGNvdW50IC09IDE7XG4gICAgICAgICAgICBjdXJzb3JSb3dOb2RlLm5vZGVzLnNwbGljZShub2RlSWR4LCAxLCBzcGFjZU5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoc3BsaWNlRGVsZXRlQ291bnQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgIH1cbiAgICBjdXJzb3JSb3dOb2RlLm5vZGVzLnNwbGljZShzcGxpY2VJZHgsIHNwbGljZURlbGV0ZUNvdW50KTtcbiAgICBpZiAoc3BsaWNlSWR4ID4gdGhpcy5jdXJzb3JOb2RlSWR4Xykge1xuICAgICAgICByZXR1cm4gcnY7XG4gICAgfVxuICAgIC8vIFdlIGRlbGV0ZWQgY3Vyc29yLlxuICAgIGxlbiA9IGN1cnNvclJvd05vZGUubm9kZXMubGVuZ3RoO1xuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgY3Vyc29yUm93Tm9kZS5ub2RlcyA9IFtjcmVhdGVOb2RlKCcnLCAwKV07XG4gICAgICAgIHRoaXMuY3Vyc29yTm9kZUlkeF8gPSAwO1xuICAgICAgICB0aGlzLmN1cnNvck9mZnNldF8gPSAwO1xuICAgICAgICByZXR1cm4gcnY7XG4gICAgfVxuICAgIGlmIChsZW4gPD0gdGhpcy5jdXJzb3JOb2RlSWR4Xykge1xuICAgICAgICB0aGlzLmN1cnNvck5vZGVJZHhfID0gbGVuIC0gMTtcbiAgICAgICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gY3Vyc29yUm93Tm9kZS5ub2Rlc1tsZW4gLSAxXS53Y3c7XG4gICAgICAgIHJldHVybiBydjtcbiAgICB9XG4gICAgdGhpcy5jdXJzb3JPZmZzZXRfID0gMDtcbiAgICByZXR1cm4gcnY7XG59O1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5wb3BSb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucm93c0FycmF5LnBvcCgpO1xufTtcbi8qKlxuICogUmVtb3ZlIHJvd3MgZnJvbSB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gYW5kIHJldHVybiB0aGVtIGFzIGFuIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gY291bnQgVGhlIG51bWJlciBvZiByb3dzIHRvIHJlbW92ZS5cbiAqIEByZXR1cm4ge0FycmF5LjxIVE1MRWxlbWVudD59IFRoZSBzZWxlY3RlZCByb3dzLlxuICovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLnBvcFJvd3MgPSBmdW5jdGlvbiAoY291bnQpIHtcbiAgICByZXR1cm4gdGhpcy5yb3dzQXJyYXkuc3BsaWNlKHRoaXMucm93c0FycmF5Lmxlbmd0aCAtIGNvdW50LCBjb3VudCk7XG59O1xuLyoqXG4gKiBJbnNlcnQgYSByb3cgYXQgdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuLlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvdyBUaGUgcm93IHRvIGluc2VydC5cbiAqL1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5wdXNoUm93ID0gZnVuY3Rpb24gKHJvdykge1xuICAgIHRoaXMucm93c0FycmF5W3RoaXMucm93c0FycmF5Lmxlbmd0aF0gPSByb3c7XG59O1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5zZXRSb3cgPSBmdW5jdGlvbiAocm93LCBpbmRleCkge1xuICAgIHRoaXMucm93c0FycmF5W2luZGV4XSA9IHJvdztcbn07XG4vKipcbiAqIEluc2VydCByb3dzIGF0IHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxIVE1MRWxlbWVudD59IHJvd3MgVGhlIHJvd3MgdG8gaW5zZXJ0LlxuICovXG5odGVybS5TY3JlZW4ucHJvdG90eXBlLnB1c2hSb3dzID0gZnVuY3Rpb24gKHJvd3MpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgayA9IHRoaXMucm93c0FycmF5Lmxlbmd0aCwgbGVuID0gcm93cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aGlzLnJvd3NBcnJheVtpICsga10gPSByb3dzW2ldO1xuICAgIH1cbn07XG5odGVybS5TY3JlZW4ucHJvdG90eXBlLmdldExpbmVTdGFydFJvd18gPSBmdW5jdGlvbiAocm93KSB7XG4gICAgdmFyIHJvd0lkeCA9IHRoaXMucm93c0FycmF5LmluZGV4T2Yocm93KTtcbiAgICBpZiAocm93SWR4IDw9IDApIHtcbiAgICAgICAgcmV0dXJuIHJvdztcbiAgICB9XG4gICAgd2hpbGUgKHRoaXMucm93c0FycmF5W3Jvd0lkeCAtIDFdICYmIHRoaXMucm93c0FycmF5W3Jvd0lkeCAtIDFdLm8pIHtcbiAgICAgICAgcm93ID0gdGhpcy5yb3dzQXJyYXlbcm93SWR4IC0gMV07XG4gICAgICAgIHJvd0lkeC0tO1xuICAgIH1cbiAgICByZXR1cm4gcm93O1xufTtcbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuZ2V0TGluZVRleHRfID0gZnVuY3Rpb24gKHJvdykge1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgcm93SWR4ID0gdGhpcy5yb3dzQXJyYXkuaW5kZXhPZihyb3cpO1xuICAgIGlmIChyb3dJZHggPCAwKSB7XG4gICAgICAgIHJldHVybiByb3dUZXh0KHJvdyk7XG4gICAgfVxuICAgIHdoaWxlIChyb3cpIHtcbiAgICAgICAgcmVzdWx0ICs9IHJvd1RleHQocm93KTtcbiAgICAgICAgaWYgKHJvdy5vKSB7XG4gICAgICAgICAgICByb3dJZHgrKztcbiAgICAgICAgICAgIHJvdyA9IHRoaXMucm93c0FycmF5W3Jvd0lkeF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbmh0ZXJtLlNjcmVlbi5wcm90b3R5cGUuZ2V0UG9zaXRpb25XaXRoT3ZlcmZsb3dfID0gZnVuY3Rpb24gKHJvdywgbm9kZSwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIDA7XG59O1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5nZXRQb3NpdGlvbldpdGhpblJvd18gPSBmdW5jdGlvbiAocm93LCBub2RlLCBvZmZzZXQpIHtcbiAgICByZXR1cm4gMDtcbn07XG5odGVybS5TY3JlZW4ucHJvdG90eXBlLmdldE5vZGVBbmRPZmZzZXRXaXRoT3ZlcmZsb3dfID0gZnVuY3Rpb24gKHJvdywgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gLTE7XG59O1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5nZXROb2RlQW5kT2Zmc2V0V2l0aGluUm93XyA9IGZ1bmN0aW9uIChyb3csIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIG51bGw7XG59O1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5zZXRSYW5nZV8gPSBmdW5jdGlvbiAocm93LCBzdGFydCwgZW5kLCByYW5nZSkgeyB9O1xuaHRlcm0uU2NyZWVuLnByb3RvdHlwZS5leHBhbmRTZWxlY3Rpb24gPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7IH07XG4iLCJpbXBvcnQgeyBodGVybSwgbGliIH0gZnJvbSBcIi4uL2h0ZXJtX2FsbFwiO1xuXG4vLyBDb3B5cmlnaHQgMjAxOCBUaGUgQ2hyb21pdW0gT1MgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbihcInVzZSBzdHJpY3RcIik7XG5cbi8qKlxuICogQWNjZXNzaWJpbGl0eVJlYWRlciByZXNwb25zaWJsZSBmb3IgcmVuZGVyaW5nIGNvbW1hbmQgb3V0cHV0IGZvciBBVC5cbiAqXG4gKiBSZW5kZXJzIGNvbW1hbmQgb3V0cHV0IGZvciBBc3Npc3RpdmUgVGVjaG5vbG9neSB1c2luZyBhIGxpdmUgcmVnaW9uLiBXZSBkb24ndFxuICogdXNlIHRoZSB2aXNpYmxlIHJvd3Mgb2YgdGhlIHRlcm1pbmFsIGZvciByZW5kZXJpbmcgY29tbWFuZCBvdXRwdXQgdG8gdGhlXG4gKiBzY3JlZW4gcmVhZGVyIGJlY2F1c2UgdGhlIHJlbmRlcmVkIGNvbnRlbnQgbWF5IGJlIGRpZmZlcmVudCBmcm9tIHdoYXQgd2Ugd2FudFxuICogcmVhZCBvdXQgYnkgYSBzY3JlZW4gcmVhZGVyLiBGb3IgZXhhbXBsZSwgd2UgbWF5IG5vdCBhY3R1YWxseSByZW5kZXIgZXZlcnlcbiAqIHJvdyBvZiBhIGxhcmdlIHBpZWNlIG9mIG91dHB1dCB0byB0aGUgc2NyZWVuIGFzIGl0IHdvdWxkbid0IGJlIHBlcmZvcm1hbnQuXG4gKiBCdXQgd2Ugd2FudCB0aGUgc2NyZWVuIHJlYWRlciB0byByZWFkIGl0IGFsbCBvdXQgaW4gb3JkZXIuXG4gKlxuICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gZGl2IFRoZSBkaXYgZWxlbWVudCB3aGVyZSB0aGUgbGl2ZSByZWdpb24gc2hvdWxkIGJlXG4gKiAgICAgYWRkZWQuXG4gKi9cbmh0ZXJtLkFjY2Vzc2liaWxpdHlSZWFkZXIgPSBmdW5jdGlvbihkaXYpIHtcbiAgdGhpcy5kb2N1bWVudF8gPSBkaXYub3duZXJEb2N1bWVudDtcblxuICAvLyBUaGUgbGl2ZSByZWdpb24gZWxlbWVudCB0byBhZGQgdGV4dCB0by5cbiAgY29uc3QgbGl2ZVJlZ2lvbiA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGxpdmVSZWdpb24uaWQgPSBcImh0ZXJtOmFjY2Vzc2liaWxpdHktbGl2ZS1yZWdpb25cIjtcbiAgbGl2ZVJlZ2lvbi5zdHlsZS5jc3NUZXh0ID0gYHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAwOyBoZWlnaHQ6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogLTEwMDA7IHRvcDogLTEwMDA7YDtcbiAgZGl2LmFwcGVuZENoaWxkKGxpdmVSZWdpb24pO1xuXG4gIC8vIFdoZXRoZXIgY29tbWFuZCBvdXRwdXQgc2hvdWxkIGJlIHJlbmRlcmVkIGZvciBBc3Npc3RpdmUgVGVjaG5vbG9neS5cbiAgLy8gVGhpcyBpc24ndCBhbHdheXMgZW5hYmxlZCBiZWNhdXNlIGl0IGhhcyBhbiBpbXBhY3Qgb24gcGVyZm9ybWFuY2UuXG4gIHRoaXMuYWNjZXNzaWJpbGl0eUVuYWJsZWQgPSBmYWxzZTtcblxuICAvLyBUaGlzIGxpdmUgZWxlbWVudCBpcyB1c2VkIGZvciBjb21tYW5kIG91dHB1dC5cbiAgdGhpcy5saXZlRWxlbWVudF8gPSB0aGlzLmRvY3VtZW50Xy5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgdGhpcy5saXZlRWxlbWVudF8uc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImxvZ1wiKTtcbiAgbGl2ZVJlZ2lvbi5hcHBlbmRDaGlsZCh0aGlzLmxpdmVFbGVtZW50Xyk7XG5cbiAgLy8gVGhpcyBsaXZlIGVsZW1lbnQgaXMgdXNlZCBmb3Igc3BlYWtpbmcgb3V0IHRoZSBjdXJyZW50IHNjcmVlbiB3aGVuXG4gIC8vIG5hdmlnYXRpbmcgdGhyb3VnaCB0aGUgc2Nyb2xsYmFjayBidWZmZXIuIEl0IHdpbGwgaW50ZXJydXB0IGV4aXN0aW5nXG4gIC8vIGFubm91bmNlbWVudHMuXG4gIHRoaXMuYXNzZXJ0aXZlTGl2ZUVsZW1lbnRfID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudChcInBcIik7XG4gIHRoaXMuYXNzZXJ0aXZlTGl2ZUVsZW1lbnRfLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJhbGVydFwiKTtcbiAgdGhpcy5hc3NlcnRpdmVMaXZlRWxlbWVudF8uc2V0QXR0cmlidXRlKFwiYXJlYS1yZWxldmFudFwiLCBcImFsbFwiKTtcbiAgbGl2ZVJlZ2lvbi5hcHBlbmRDaGlsZCh0aGlzLmFzc2VydGl2ZUxpdmVFbGVtZW50Xyk7XG5cbiAgLy8gQSBxdWV1ZSBvZiB1cGRhdGVzIHRvIGFubm91bmNlLlxuICB0aGlzLnF1ZXVlXyA9IFtdO1xuXG4gIC8vIEEgdGltZXIgd2hpY2ggdHJhY2tzIHdoZW4gbmV4dCB0byBhZGQgaXRlbXMgdG8gdGhlIGxpdmUgcmVnaW9uLiBudWxsIHdoZW5cbiAgLy8gbm90IHJ1bm5pbmcuIFRoaXMgaXMgdXNlZCB0byBjb21iaW5lIHVwZGF0ZXMgdGhhdCBvY2N1ciBpbiBhIHNtYWxsIHdpbmRvdyxcbiAgLy8gYXMgd2VsbCBhcyB0byBhdm9pZCB0b28gbXVjaCBvdXRwdXQgYmVpbmcgYWRkZWQgdG8gdGhlIGxpdmUgcmVnaW9uIGluIG9uZVxuICAvLyBnbyB3aGljaCBjYW4gY2F1c2UgdGhlIHJlbmRlcmVyIHRvIGhhbmcuXG4gIHRoaXMubmV4dFJlYWRUaW1lcl8gPSBudWxsO1xuXG4gIC8vIFRoaXMgaXMgc2V0IHRvIHRydWUgaWYgdGhlIGN1cnNvciBpcyBhYm91dCB0byB1cGRhdGUgcG9zaXRpb24gb24gdGhlXG4gIC8vIHNjcmVlbi4gaS5lLiBiZWZvcmVDdXJzb3JDaGFuZ2UgaGFzIGJlZW4gY2FsbGVkIGJ1dCBub3QgYWZ0ZXJDdXJzb3JDaGFuZ2UuXG4gIHRoaXMuY3Vyc29ySXNDaGFuZ2luZ18gPSBmYWxzZTtcblxuICAvLyBUaGlzIHRyYWNrcyBjaGFuZ2VzIHRoYXQgd291bGQgYmUgYWRkZWQgdG8gcXVldWVfIHdoaWxlIHRoZSBjdXJzb3IgaXNcbiAgLy8gY2hhbmdpbmcuIFRoaXMgaXMgZG9uZSBzbyB0aGF0IHdlIGNhbiBkZWNpZGUgdG8gZGlzY2FyZCB0aGVzZSBjaGFuZ2VzIGlmXG4gIC8vIHdlIGFubm91bmNlIHNvbWV0aGluZyBhcyBhIHJlc3VsdCBvZiB0aGUgY3Vyc29yIGNoYW5nZS5cbiAgdGhpcy5jdXJzb3JDaGFuZ2VRdWV1ZV8gPSBbXTtcblxuICAvLyBUaGUgc3RyaW5nIG9mIHRleHQgb24gdGhlIHJvdyB0aGF0IHRoZSBjdXJzb3Igd2FzIGxhc3Qgb24uIE9ubHkgdmFsaWQgd2hpbGVcbiAgLy8gY3Vyc29ySXNDaGFuZ2luZ18gaXMgdHJ1ZS5cbiAgdGhpcy5sYXN0Q3Vyc29yUm93U3RyaW5nXyA9IG51bGw7XG5cbiAgLy8gVGhlIHJvdyB0aGF0IHRoZSBjdXJzb3Igd2FzIGxhc3Qgb24uIE9ubHkgdmFsaWQgd2hpbGUgY3Vyc29ySXNDaGFuZ2luZ18gaXNcbiAgLy8gdHJ1ZS5cbiAgdGhpcy5sYXN0Q3Vyc29yUm93XyA9IG51bGw7XG5cbiAgLy8gVGhlIGNvbHVtbiB0aGF0IHRoZSBjdXJzb3Igd2FzIGxhc3Qgb24uIE9ubHkgdmFsaWQgd2hpbGUgY3Vyc29ySXNDaGFuZ2luZ19cbiAgLy8gaXMgdHJ1ZS5cbiAgdGhpcy5sYXN0Q3Vyc29yQ29sdW1uXyA9IG51bGw7XG5cbiAgLy8gVHJ1ZSBpZiBhIGtleXByZXNzIGhhcyBiZWVuIHBlcmZvcm1lZCBzaW5jZSB0aGUgbGFzdCBjdXJzb3IgY2hhbmdlLlxuICB0aGlzLmhhc1VzZXJHZXN0dXJlID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlbGF5IGluIG1zIHRvIHVzZSBmb3IgbWVyZ2luZyBzdHJpbmdzIHRvIG91dHB1dC5cbiAqXG4gKiBXZSBtZXJnZSBzdHJpbmdzIHRvZ2V0aGVyIHRvIGF2b2lkIGhhbmdpbmcgdGhlIHRlcm1pbmFsIGFuZCB0byBlbnN1cmUgdGhhdFxuICogYXJpYSB1cGRhdGVzIG1ha2UgaXQgdG8gdGhlIHNjcmVlbiByZWFkZXIuIFdlIHdhbnQgdGhpcyB0byBiZSBzaG9ydCBzb1xuICogdGhlcmUncyBub3QgYSBiaWcgZGVsYXkgYmV0d2VlbiB0eXBpbmcvZXhlY3V0aW5nIGNvbW1hbmRzIGFuZCBoZWFyaW5nIG91dHB1dC5cbiAqXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtpbnRlZ2VyfVxuICovXG5odGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyLkRFTEFZID0gNTA7XG5cbi8qKlxuICogRW5hYmxlIGFjY2Vzc2liaWxpdHktZnJpZW5kbHkgZmVhdHVyZXMgdGhhdCBoYXZlIGEgcGVyZm9ybWFuY2UgaW1wYWN0LlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBXaGV0aGVyIHRvIGVuYWJsZSBhY2Nlc3NpYmlsaXR5LWZyaWVuZGx5IGZlYXR1cmVzLlxuICovXG5odGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyLnByb3RvdHlwZS5zZXRBY2Nlc3NpYmlsaXR5RW5hYmxlZCA9IGZ1bmN0aW9uKFxuICBlbmFibGVkXG4pIHtcbiAgaWYgKCFlbmFibGVkKSB7XG4gICAgdGhpcy5jbGVhcigpO1xuICB9XG5cbiAgdGhpcy5hY2Nlc3NpYmlsaXR5RW5hYmxlZCA9IGVuYWJsZWQ7XG59O1xuXG4vKipcbiAqIERlY29yYXRlIHRoZSBkb2N1bWVudCB3aGVyZSB0aGUgdGVybWluYWwgPHgtc2NyZWVuPiByZXNpZGVzLiBUaGlzIGlzIG5lZWRlZFxuICogZm9yIGxpc3RlbmluZyB0byBrZXlzdHJva2VzIG9uIHRoZSBzY3JlZW4uXG4gKlxuICogQHBhcmFtIHtIVE1MRG9jdW1lbnR9IGRvYyBUaGUgZG9jdW1lbnQgd2hlcmUgdGhlIDx4LXNjcmVlbj4gcmVzaWRlcy5cbiAqL1xuaHRlcm0uQWNjZXNzaWJpbGl0eVJlYWRlci5wcm90b3R5cGUuZGVjb3JhdGUgPSBmdW5jdGlvbihkb2MpIHtcbiAgY29uc3QgaGFuZGxlcnMgPSBbXCJrZXlkb3duXCIsIFwia2V5cHJlc3NcIiwgXCJrZXl1cFwiLCBcInRleHRJbnB1dFwiXTtcbiAgaGFuZGxlcnMuZm9yRWFjaChoYW5kbGVyID0+IHtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcihoYW5kbGVyLCAoKSA9PiB7XG4gICAgICB0aGlzLmhhc1VzZXJHZXN0dXJlID0gdHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgdGhlIGN1cnNvciBvbiB0aGUgc2NyZWVuIGlzIGFib3V0IHRvIGdldFxuICogdXBkYXRlZC4gVGhpcyBhbGxvd3MgY3Vyc29yIGNoYW5nZXMgdG8gYmUgdHJhY2tlZCBhbmQgcmVsYXRlZCBub3RpZmljYXRpb25zXG4gKiB0byBiZSBhbm5vdW5jZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGN1cnNvclJvd1N0cmluZyBUaGUgdGV4dCBpbiB0aGUgcm93IHRoYXQgdGhlIGN1cnNvciBpc1xuICogICAgIGN1cnJlbnRseSBvbi5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gY3Vyc29yUm93IFRoZSBpbmRleCBvZiB0aGUgcm93IHRoYXQgdGhlIGN1cnNvciBpcyBjdXJyZW50bHlcbiAqICAgICBvbiwgaW5jbHVkaW5nIHJvd3MgaW4gdGhlIHNjcm9sbGJhY2sgYnVmZmVyLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBjdXJzb3JDb2x1bW4gVGhlIGluZGV4IG9mIHRoZSBjb2x1bW4gdGhhdCB0aGUgY3Vyc29yIGlzXG4gKiAgICAgY3VycmVudGx5IG9uLlxuICovXG5odGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyLnByb3RvdHlwZS5iZWZvcmVDdXJzb3JDaGFuZ2UgPSBmdW5jdGlvbihcbiAgY3Vyc29yUm93U3RyaW5nLFxuICBjdXJzb3JSb3csXG4gIGN1cnNvckNvbHVtblxuKSB7XG4gIC8vIElmIGFjY2Vzc2liaWxpdHkgaXMgZW5hYmxlZCB3ZSBkb24ndCBhbm5vdW5jZSBzZWxlY3Rpb24gY2hhbmdlcyBhcyB0aGVzZVxuICAvLyBjYW4gaGF2ZSBhIHBlcmZvcm1hbmNlIGltcGFjdC5cbiAgaWYgKCF0aGlzLmFjY2Vzc2liaWxpdHlFbmFibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gdXNlciBnZXN0dXJlIHRoYXQgY2FuIGJlIHRpZWQgdG8gdGhlIGN1cnNvciBjaGFuZ2UsIHdlXG4gIC8vIGRvbid0IHdhbnQgdG8gYW5ub3VuY2UgYW55dGhpbmcuXG4gIGlmICghdGhpcy5oYXNVc2VyR2VzdHVyZSB8fCB0aGlzLmN1cnNvcklzQ2hhbmdpbmdfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5jdXJzb3JJc0NoYW5naW5nXyA9IHRydWU7XG4gIHRoaXMubGFzdEN1cnNvclJvd1N0cmluZ18gPSBjdXJzb3JSb3dTdHJpbmc7XG4gIHRoaXMubGFzdEN1cnNvclJvd18gPSBjdXJzb3JSb3c7XG4gIHRoaXMubGFzdEN1cnNvckNvbHVtbl8gPSBjdXJzb3JDb2x1bW47XG59O1xuXG4vKipcbiAqIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBhZnRlciB0aGUgY3Vyc29yIG9uIHRoZSBzY3JlZW4gaGFzIGJlZW4gdXBkYXRlZC4gTm90ZVxuICogdGhhdCBzZXZlcmFsIHVwZGF0ZXMgdG8gdGhlIGN1cnNvciBtYXkgaGF2ZSBoYXBwZW5lZCBiZXR3ZWVuXG4gKiBiZWZvcmVDdXJzb3JDaGFuZ2UgYW5kIGFmdGVyQ3Vyc29yQ2hhbmdlLlxuICpcbiAqIFRoaXMgYWxsb3dzIGN1cnNvciBjaGFuZ2VzIHRvIGJlIHRyYWNrZWQgYW5kIHJlbGF0ZWQgbm90aWZpY2F0aW9ucyB0byBiZVxuICogYW5ub3VuY2VkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjdXJzb3JSb3dTdHJpbmcgVGhlIHRleHQgaW4gdGhlIHJvdyB0aGF0IHRoZSBjdXJzb3IgaXNcbiAqICAgICBjdXJyZW50bHkgb24uXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGN1cnNvclJvdyBUaGUgaW5kZXggb2YgdGhlIHJvdyB0aGF0IHRoZSBjdXJzb3IgaXMgY3VycmVudGx5XG4gKiAgICAgb24sIGluY2x1ZGluZyByb3dzIGluIHRoZSBzY3JvbGxiYWNrIGJ1ZmZlci5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gY3Vyc29yQ29sdW1uIFRoZSBpbmRleCBvZiB0aGUgY29sdW1uIHRoYXQgdGhlIGN1cnNvciBpc1xuICogICAgIGN1cnJlbnRseSBvbi5cbiAqL1xuaHRlcm0uQWNjZXNzaWJpbGl0eVJlYWRlci5wcm90b3R5cGUuYWZ0ZXJDdXJzb3JDaGFuZ2UgPSBmdW5jdGlvbihcbiAgY3Vyc29yUm93U3RyaW5nLFxuICBjdXJzb3JSb3csXG4gIGN1cnNvckNvbHVtblxuKSB7XG4gIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiBjbGVhcigpIGlzIGNhbGxlZCBtaWR3YXkgdGhyb3VnaCBhIGN1cnNvciBjaGFuZ2UuXG4gIGlmICghdGhpcy5jdXJzb3JJc0NoYW5naW5nXykge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmN1cnNvcklzQ2hhbmdpbmdfID0gZmFsc2U7XG5cbiAgaWYgKCF0aGlzLmFubm91bmNlQWN0aW9uXyhjdXJzb3JSb3dTdHJpbmcsIGN1cnNvclJvdywgY3Vyc29yQ29sdW1uKSkge1xuICAgIC8vIElmIHdlIGRvbid0IGFubm91bmNlIGEgc3BlY2lhbCBhY3Rpb24sIHdlIHJlLXF1ZXVlIGFsbCB0aGUgb3V0cHV0IHRoYXRcbiAgICAvLyB3YXMgcXVldWVkIGR1cmluZyB0aGUgc2VsZWN0aW9uIGNoYW5nZS5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY3Vyc29yQ2hhbmdlUXVldWVfLmxlbmd0aDsgKytpKSB7XG4gICAgICB0aGlzLmFubm91bmNlKHRoaXMuY3Vyc29yQ2hhbmdlUXVldWVfW2ldKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLmN1cnNvckNoYW5nZVF1ZXVlXyA9IFtdO1xuICB0aGlzLmxhc3RDdXJzb3JSb3dTdHJpbmdfID0gbnVsbDtcbiAgdGhpcy5sYXN0Q3Vyc29yUm93XyA9IG51bGw7XG4gIHRoaXMubGFzdEN1cnNvckNvbHVtbl8gPSBudWxsO1xuICB0aGlzLmhhc1VzZXJHZXN0dXJlID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIEFubm91bmNlIHRoZSBjb21tYW5kIG91dHB1dC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gYW5ub3VuY2UgdXNpbmcgYSBsaXZlIHJlZ2lvbi5cbiAqL1xuaHRlcm0uQWNjZXNzaWJpbGl0eVJlYWRlci5wcm90b3R5cGUuYW5ub3VuY2UgPSBmdW5jdGlvbihzdHIpIHtcbiAgaWYgKCF0aGlzLmFjY2Vzc2liaWxpdHlFbmFibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuaGFzVXNlckdlc3R1cmUpIHtcbiAgICB0aGlzLmFzc2VydGl2ZUFubm91bmNlKHN0cik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgdGhlIGN1cnNvciBpcyBpbiB0aGUgbWlkZGxlIG9mIGNoYW5naW5nLCB3ZSBxdWV1ZSB1cCB0aGUgb3V0cHV0XG4gIC8vIHNlcGFyYXRlbHkgYXMgd2UgbWF5IG5vdCB3YW50IGl0IHRvIGJlIGFubm91bmNlZCBpZiBpdCdzIHBhcnQgb2YgYSBjdXJzb3JcbiAgLy8gY2hhbmdlIGFubm91bmNlbWVudC5cbiAgaWYgKHRoaXMuY3Vyc29ySXNDaGFuZ2luZ18pIHtcbiAgICB0aGlzLmN1cnNvckNoYW5nZVF1ZXVlXy5wdXNoKHN0cik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRG9uJ3QgYXBwZW5kIG5ld2xpbmVzIHRvIHRoZSBxdWV1ZSBpZiB0aGUgcXVldWUgaXMgZW1wdHkuIEl0IHdvbid0IGhhdmUgYW55XG4gIC8vIGltcGFjdC5cbiAgaWYgKHN0ciA9PSBcIlxcblwiICYmIHRoaXMucXVldWVfLmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLnF1ZXVlXy5wdXNoKFwiXCIpO1xuICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gdHJpZ2dlciBhbiBhbm5vdW5jZW1lbnQgb24gbmV3bGluZXMgYmVjYXVzZSB0aGV5IHdvbid0XG4gICAgLy8gY2hhbmdlIHRoZSBleGlzdGluZyBjb250ZW50IHRoYXQncyBvdXRwdXQuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMucXVldWVfLmxlbmd0aCA9PSAwKSB7XG4gICAgdGhpcy5xdWV1ZV8ucHVzaChzdHIpO1xuICB9IGVsc2Uge1xuICAgIC8vIFdlIHB1dCBhIHNwYWNlIGJldHdlZW4gc3RyaW5ncyB0aGF0IGFwcGVhciBvbiB0aGUgc2FtZSBsaW5lLlxuICAgIC8vIFRPRE8ocmF5bWVzKTogV2Ugc2hvdWxkIGNoZWNrIHRoZSBsb2NhdGlvbiBvbiB0aGUgcm93IGFuZCBub3QgYWRkIGEgc3BhY2VcbiAgICAvLyBpZiB0aGUgc3RyaW5ncyBhcmUgam9pbmVkIHRvZ2V0aGVyLlxuICAgIGxldCBwYWRkaW5nID0gXCJcIjtcbiAgICBpZiAodGhpcy5xdWV1ZV9bdGhpcy5xdWV1ZV8ubGVuZ3RoIC0gMV0ubGVuZ3RoICE9IDApIHtcbiAgICAgIHBhZGRpbmcgPSBcIiBcIjtcbiAgICB9XG4gICAgdGhpcy5xdWV1ZV9bdGhpcy5xdWV1ZV8ubGVuZ3RoIC0gMV0gKz0gcGFkZGluZyArIHN0cjtcbiAgfVxuXG4gIC8vIElmIHdlJ3ZlIGFscmVhZHkgc2NoZWR1bGVkIHRleHQgYmVpbmcgYWRkZWQgdG8gdGhlIGxpdmUgcmVnaW9uLCB3YWl0IGZvciBpdFxuICAvLyB0byBoYXBwZW4uXG4gIGlmICh0aGlzLm5leHRSZWFkVGltZXJfKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgdGhlcmUncyBvbmx5IG9uZSBpdGVtIGluIHRoZSBxdWV1ZSwgd2UgbWF5IGdldCBvdGhlciB0ZXh0IGJlaW5nIGFkZGVkXG4gIC8vIHZlcnkgc29vbiBhZnRlci4gSW4gdGhhdCBjYXNlLCB3YWl0IGEgc21hbGwgZGVsYXkgc28gd2UgY2FuIG1lcmdlIHRoZVxuICAvLyByZWxhdGVkIHN0cmluZ3MuXG4gIGlmICh0aGlzLnF1ZXVlXy5sZW5ndGggPT0gMSkge1xuICAgIHRoaXMubmV4dFJlYWRUaW1lcl8gPSBzZXRUaW1lb3V0KFxuICAgICAgdGhpcy5hZGRUb0xpdmVSZWdpb25fLmJpbmQodGhpcyksXG4gICAgICBodGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyLkRFTEFZXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkV4cGVjdGVkIG9ubHkgb25lIGl0ZW0gaW4gcXVldWVfIG9yIG5leHRSZWFkVGltZXJfIHRvIGJlIHJ1bm5pbmcuXCJcbiAgICApO1xuICB9XG59O1xuXG4vKipcbiAqIFZvaWNlIGFuIGFubm91bmNlbWVudCB0aGF0IHdpbGwgaW50ZXJydXB0IG90aGVyIGFubm91bmNlbWVudHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGFubm91bmNlIHVzaW5nIGEgbGl2ZSByZWdpb24uXG4gKi9cbmh0ZXJtLkFjY2Vzc2liaWxpdHlSZWFkZXIucHJvdG90eXBlLmFzc2VydGl2ZUFubm91bmNlID0gZnVuY3Rpb24oc3RyKSB7XG4gIGlmICh0aGlzLmhhc1VzZXJHZXN0dXJlICYmIHN0ciA9PSBcIiBcIikge1xuICAgIHN0ciA9IGh0ZXJtLm1zZyhcIlNQQUNFX0NIQVJBQ1RFUlwiLCBbXSwgXCJTcGFjZVwiKTtcbiAgfVxuXG4gIC8vIElmIHRoZSBzYW1lIHN0cmluZyBpcyBhbm5vdW5jZWQgdHdpY2UsIGFuIGF0dHJpYnV0ZSBjaGFuZ2Ugd29uJ3QgYmVcbiAgLy8gcmVnaXN0ZXJlZCBhbmQgdGhlIHNjcmVlbiByZWFkZXIgd29uJ3Qga25vdyB0aGF0IHRoZSBzdHJpbmcgaGFzIGNoYW5nZWQuXG4gIC8vIFNvIHdlIHNsaWdodGx5IGNoYW5nZSB0aGUgc3RyaW5nIHRvIGVuc3VyZSB0aGF0IHRoZSBhdHRyaWJ1dGUgY2hhbmdlIGdldHNcbiAgLy8gcmVnaXN0ZXJlZC5cbiAgc3RyID0gKHN0ciB8fCBcIlwiKS50cmltKCk7XG4gIGlmIChzdHIgPT0gdGhpcy5hc3NlcnRpdmVMaXZlRWxlbWVudF8uaW5uZXJUZXh0KSB7XG4gICAgc3RyID0gXCJcXG5cIiArIHN0cjtcbiAgfVxuXG4gIHRoaXMuY2xlYXIoKTtcbiAgdGhpcy5hc3NlcnRpdmVMaXZlRWxlbWVudF8uaW5uZXJUZXh0ID0gc3RyO1xufTtcblxuLyoqXG4gKiBBZGQgYSBuZXdsaW5lIHRvIHRoZSB0ZXh0IHRoYXQgd2lsbCBiZSBhbm5vdW5jZWQgdG8gdGhlIGxpdmUgcmVnaW9uLlxuICovXG5odGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyLnByb3RvdHlwZS5uZXdMaW5lID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYW5ub3VuY2UoXCJcXG5cIik7XG59O1xuXG4vKipcbiAqIENsZWFyIHRoZSBsaXZlIHJlZ2lvbiBhbmQgYW55IGluLWZsaWdodCBhbm5vdW5jZW1lbnRzLlxuICovXG5odGVybS5BY2Nlc3NpYmlsaXR5UmVhZGVyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmxpdmVFbGVtZW50Xy5pbm5lclRleHQgPSBcIlwiO1xuICB0aGlzLmFzc2VydGl2ZUxpdmVFbGVtZW50Xy5pbm5lclRleHQgPSBcIlwiO1xuICBjbGVhclRpbWVvdXQodGhpcy5uZXh0UmVhZFRpbWVyXyk7XG4gIHRoaXMubmV4dFJlYWRUaW1lcl8gPSBudWxsO1xuICB0aGlzLnF1ZXVlXyA9IFtdO1xuXG4gIHRoaXMuY3Vyc29ySXNDaGFuZ2luZ18gPSBmYWxzZTtcbiAgdGhpcy5jdXJzb3JDaGFuZ2VRdWV1ZV8gPSBbXTtcbiAgdGhpcy5sYXN0Q3Vyc29yUm93U3RyaW5nXyA9IG51bGw7XG4gIHRoaXMubGFzdEN1cnNvclJvd18gPSBudWxsO1xuICB0aGlzLmxhc3RDdXJzb3JDb2x1bW5fID0gbnVsbDtcbiAgdGhpcy5oYXNVc2VyR2VzdHVyZSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBUaGlzIHdpbGwgYW5ub3VuY2UgYW4gYWN0aW9uIHRoYXQgaXMgcmVsYXRlZCB0byBhIGN1cnNvciBjaGFuZ2UsIGZvciBleGFtcGxlXG4gKiB3aGVuIHRoZSB1c2VyIGRlbGV0ZXMgYSBjaGFyYWN0ZXIgd2Ugd2FudCB0aGUgY2hhcmFjdGVyIGRlbGV0ZWQgdG8gYmVcbiAqIGFubm91bmNlZC4gU2ltaWxhcmx5LCB3aGVuIHRoZSB1c2VyIG1vdmVzIHRoZSBjdXJzb3IgYWxvbmcgdGhlIGxpbmUsIHdlIHdhbnRcbiAqIHRoZSBjaGFyYWN0ZXJzIHNlbGVjdGVkIHRvIGJlIGFubm91bmNlZC5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBhIGhldXJpc3RpYy4gQmVjYXVzZSBvZiB0aGUgbmF0dXJlIG9mIHRlcm1pbmFsXG4gKiBlbXVsYXRvcnMsIHdlIGNhbid0IGRpc3Rpbmd1aXNoIGlucHV0IGFuZCBvdXRwdXQsIHdoaWNoIG1lYW5zIHdlIGRvbid0IHJlYWxseVxuICoga25vdyB3aGF0IG91dHB1dCBpcyB0aGUgcmVzdWx0IG9mIGEga2V5cHJlc3MgYW5kIHdoYXQgaXNuJ3QuIEFsc28gaW4gc29tZVxuICogdGVybWluYWwgYXBwbGljYXRpb25zIGNlcnRhaW4gYW5ub3VuY2VtZW50cyBtYXkgbWFrZSBzZW5zZSB3aGVyZWFzIG90aGVycyBtYXlcbiAqIG5vdC4gVGhpcyBmdW5jdGlvbiBzaG91bGQgdHJ5IHRvIGFjY291bnQgZm9yIHRoZSBtb3N0IGNvbW1vbiBjYXNlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3Vyc29yUm93U3RyaW5nIFRoZSB0ZXh0IGluIHRoZSByb3cgdGhhdCB0aGUgY3Vyc29yIGlzXG4gKiAgICAgY3VycmVudGx5IG9uLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBjdXJzb3JSb3cgVGhlIGluZGV4IG9mIHRoZSByb3cgdGhhdCB0aGUgY3Vyc29yIGlzIGN1cnJlbnRseVxuICogICAgIG9uLCBpbmNsdWRpbmcgcm93cyBpbiB0aGUgc2Nyb2xsYmFjayBidWZmZXIuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IGN1cnNvckNvbHVtbiBUaGUgaW5kZXggb2YgdGhlIGNvbHVtbiB0aGF0IHRoZSBjdXJzb3IgaXNcbiAqICAgICBjdXJyZW50bHkgb24uXG4gKi9cbmh0ZXJtLkFjY2Vzc2liaWxpdHlSZWFkZXIucHJvdG90eXBlLmFubm91bmNlQWN0aW9uXyA9IGZ1bmN0aW9uKFxuICBjdXJzb3JSb3dTdHJpbmcsXG4gIGN1cnNvclJvdyxcbiAgY3Vyc29yQ29sdW1uXG4pIHtcbiAgLy8gSWYgdGhlIGN1cnNvciBjaGFuZ2VzIHJvd3MsIHdlIGRvbid0IGFubm91bmNlIGFueXRoaW5nIGF0IHByZXNlbnQuXG4gIGlmICh0aGlzLmxhc3RDdXJzb3JSb3dfICE9IGN1cnNvclJvdykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRoZSBjYXNlIHdoZW4gdGhlIHJvdyBvZiB0ZXh0IGhhc24ndCBjaGFuZ2VkIGF0IGFsbC5cbiAgaWYgKHRoaXMubGFzdEN1cnNvclJvd1N0cmluZ18gPT0gY3Vyc29yUm93U3RyaW5nKSB7XG4gICAgLy8gTW92aW5nIHRoZSBjdXJzb3IgYWxvbmcgdGhlIGxpbmUuIFdlIGNoZWNrIHRoYXQgbm8gc2lnbmlmaWNhbnQgY2hhbmdlc1xuICAgIC8vIGhhdmUgYmVlbiBxdWV1ZWQuIElmIHRoZXkgaGF2ZSwgaXQgbWF5IG5vdCBqdXN0IGJlIGEgY3Vyc29yIG1vdmVtZW50IGFuZFxuICAgIC8vIGl0IG1heSBiZSBiZXR0ZXIgdG8gcmVhZCB0aG9zZSBvdXQuXG4gICAgaWYgKFxuICAgICAgdGhpcy5sYXN0Q3Vyc29yQ29sdW1uXyAhPSBjdXJzb3JDb2x1bW4gJiZcbiAgICAgIHRoaXMuY3Vyc29yQ2hhbmdlUXVldWVfLmpvaW4oXCJcIikudHJpbSgpID09IFwiXCJcbiAgICApIHtcbiAgICAgIC8vIEFubm91bmNlIHRoZSB0ZXh0IGJldHdlZW4gdGhlIG9sZCBjdXJzb3IgcG9zaXRpb24gYW5kIHRoZSBuZXcgb25lLlxuICAgICAgY29uc3Qgc3RhcnQgPSBNYXRoLm1pbih0aGlzLmxhc3RDdXJzb3JDb2x1bW5fLCBjdXJzb3JDb2x1bW4pO1xuICAgICAgY29uc3QgbGVuID0gTWF0aC5hYnMoY3Vyc29yQ29sdW1uIC0gdGhpcy5sYXN0Q3Vyc29yQ29sdW1uXyk7XG4gICAgICB0aGlzLmFzc2VydGl2ZUFubm91bmNlKFxuICAgICAgICBsaWIud2Muc3Vic3RyKHRoaXMubGFzdEN1cnNvclJvd1N0cmluZ18sIHN0YXJ0LCBsZW4pXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRoZSBjYXNlIHdoZW4gdGhlIHJvdyBvZiB0ZXh0IGhhcyBjaGFuZ2VkLlxuICBpZiAodGhpcy5sYXN0Q3Vyc29yUm93U3RyaW5nXyAhPSBjdXJzb3JSb3dTdHJpbmcpIHtcbiAgICAvLyBTcGFjZWJhci4gV2UgbWFudWFsbHkgYW5ub3VuY2UgdGhpcyBjaGFyYWN0ZXIgc2luY2UgdGhlIHNjcmVlbiByZWFkZXIgbWF5XG4gICAgLy8gbm90IGFubm91bmNlIHRoZSB3aGl0ZXNwYWNlIGluIGEgbGl2ZSByZWdpb24uXG4gICAgaWYgKHRoaXMubGFzdEN1cnNvckNvbHVtbl8gKyAxID09IGN1cnNvckNvbHVtbikge1xuICAgICAgaWYgKFxuICAgICAgICBsaWIud2Muc3Vic3RyKGN1cnNvclJvd1N0cmluZywgY3Vyc29yQ29sdW1uIC0gMSwgMSkgPT0gXCIgXCIgJiZcbiAgICAgICAgdGhpcy5jdXJzb3JDaGFuZ2VRdWV1ZV8ubGVuZ3RoID4gMCAmJlxuICAgICAgICB0aGlzLmN1cnNvckNoYW5nZVF1ZXVlX1swXSA9PSBcIiBcIlxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0aXZlQW5ub3VuY2UoXCIgXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBCYWNrc3BhY2UgYW5kIGRlbGV0aW9uLlxuICAgIC8vIFRoZSBwb3NpdGlvbiBvZiB0aGUgY2hhcmFjdGVycyBkZWxldGVkIGlzIHJpZ2h0IGFmdGVyIHRoZSBjdXJyZW50XG4gICAgLy8gcG9zaXRpb24gb2YgdGhlIGN1cnNvciBpbiB0aGUgY2FzZSBvZiBiYWNrc3BhY2UgYW5kIGRlbGV0ZS5cbiAgICBjb25zdCBjdXJzb3JEZWxldGVkID0gY3Vyc29yQ29sdW1uO1xuICAgIC8vIENoZWNrIHRoYXQgdGhlIGN1cnJlbnQgcm93IHN0cmluZyBpcyBzaG9ydGVyIHRoYW4gdGhlIHByZXZpb3VzLiBBbHNvXG4gICAgLy8gY2hlY2sgdGhhdCB0aGUgc3RhcnQgb2YgdGhlIHN0cmluZ3MgKHVwIHRvIHRoZSBjdXJzb3IpIG1hdGNoLlxuICAgIGlmIChcbiAgICAgIGxpYi53Yy5zdHJXaWR0aChjdXJzb3JSb3dTdHJpbmcpIDw9XG4gICAgICAgIGxpYi53Yy5zdHJXaWR0aCh0aGlzLmxhc3RDdXJzb3JSb3dTdHJpbmdfKSAmJlxuICAgICAgbGliLndjLnN1YnN0cih0aGlzLmxhc3RDdXJzb3JSb3dTdHJpbmdfLCAwLCBjdXJzb3JEZWxldGVkKSA9PVxuICAgICAgICBsaWIud2Muc3Vic3RyKGN1cnNvclJvd1N0cmluZywgMCwgY3Vyc29yRGVsZXRlZClcbiAgICApIHtcbiAgICAgIC8vIEZpbmQgdGhlIGxlbmd0aCBvZiB0aGUgY3VycmVudCByb3cgc3RyaW5nIGlnbm9yaW5nIHNwYWNlIGNoYXJhY3RlcnMuXG4gICAgICAvLyBUaGVzZSBtYXkgYmUgaW5zZXJ0ZWQgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nIHdoZW4gZGVsZXRpbmcgY2hhcmFjdGVyc1xuICAgICAgLy8gc28gdGhleSBzaG91bGQgYmUgaWdub3JlZC5cbiAgICAgIGxldCBsZW5ndGhPZkN1cnJlbnRSb3cgPSBsaWIud2Muc3RyV2lkdGgoY3Vyc29yUm93U3RyaW5nKTtcbiAgICAgIGZvciAoOyBsZW5ndGhPZkN1cnJlbnRSb3cgPiAwOyAtLWxlbmd0aE9mQ3VycmVudFJvdykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbGVuZ3RoT2ZDdXJyZW50Um93ID09IGN1cnNvckRlbGV0ZWQgfHxcbiAgICAgICAgICBsaWIud2Muc3Vic3RyKGN1cnNvclJvd1N0cmluZywgbGVuZ3RoT2ZDdXJyZW50Um93IC0gMSwgMSkgIT0gXCIgXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgbnVtQ2hhcnNEZWxldGVkID1cbiAgICAgICAgbGliLndjLnN0cldpZHRoKHRoaXMubGFzdEN1cnNvclJvd1N0cmluZ18pIC0gbGVuZ3RoT2ZDdXJyZW50Um93O1xuXG4gICAgICAvLyBDaGVjayB0aGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZ3MgbWF0Y2guXG4gICAgICBjb25zdCBsZW5ndGhPZkVuZE9mU3RyaW5nID0gbGVuZ3RoT2ZDdXJyZW50Um93IC0gY3Vyc29yRGVsZXRlZDtcbiAgICAgIGNvbnN0IGVuZE9mTGFzdFJvd1N0cmluZyA9IGxpYi53Yy5zdWJzdHIoXG4gICAgICAgIHRoaXMubGFzdEN1cnNvclJvd1N0cmluZ18sXG4gICAgICAgIGN1cnNvckRlbGV0ZWQgKyBudW1DaGFyc0RlbGV0ZWQsXG4gICAgICAgIGxlbmd0aE9mRW5kT2ZTdHJpbmdcbiAgICAgICk7XG4gICAgICBjb25zdCBlbmRPZkN1cnJlbnRSb3dTdHJpbmcgPSBsaWIud2Muc3Vic3RyKFxuICAgICAgICBjdXJzb3JSb3dTdHJpbmcsXG4gICAgICAgIGN1cnNvckRlbGV0ZWQsXG4gICAgICAgIGxlbmd0aE9mRW5kT2ZTdHJpbmdcbiAgICAgICk7XG4gICAgICBpZiAoZW5kT2ZMYXN0Um93U3RyaW5nID09IGVuZE9mQ3VycmVudFJvd1N0cmluZykge1xuICAgICAgICBjb25zdCBkZWxldGVkID0gbGliLndjLnN1YnN0cihcbiAgICAgICAgICB0aGlzLmxhc3RDdXJzb3JSb3dTdHJpbmdfLFxuICAgICAgICAgIGN1cnNvckRlbGV0ZWQsXG4gICAgICAgICAgbnVtQ2hhcnNEZWxldGVkXG4gICAgICAgICk7XG4gICAgICAgIGlmIChkZWxldGVkICE9IFwiXCIpIHtcbiAgICAgICAgICB0aGlzLmFzc2VydGl2ZUFubm91bmNlKGRlbGV0ZWQpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogQWRkIHRleHQgZnJvbSBxdWV1ZV8gdG8gdGhlIGxpdmUgcmVnaW9uLlxuICpcbiAqL1xuaHRlcm0uQWNjZXNzaWJpbGl0eVJlYWRlci5wcm90b3R5cGUuYWRkVG9MaXZlUmVnaW9uXyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm5leHRSZWFkVGltZXJfID0gbnVsbDtcblxuICBsZXQgc3RyID0gdGhpcy5xdWV1ZV8uam9pbihcIlxcblwiKS50cmltKCk7XG5cbiAgLy8gSWYgdGhlIHNhbWUgc3RyaW5nIGlzIGFubm91bmNlZCB0d2ljZSwgYW4gYXR0cmlidXRlIGNoYW5nZSB3b24ndCBiZVxuICAvLyByZWdpc3RlcmVkIGFuZCB0aGUgc2NyZWVuIHJlYWRlciB3b24ndCBrbm93IHRoYXQgdGhlIHN0cmluZyBoYXMgY2hhbmdlZC5cbiAgLy8gU28gd2Ugc2xpZ2h0bHkgY2hhbmdlIHRoZSBzdHJpbmcgdG8gZW5zdXJlIHRoYXQgdGhlIGF0dHJpYnV0ZSBjaGFuZ2UgZ2V0c1xuICAvLyByZWdpc3RlcmVkLlxuICBpZiAoc3RyID09IHRoaXMubGl2ZUVsZW1lbnRfLmlubmVydFRleHQpIHtcbiAgICBzdHIgPSBcIlxcblwiICsgc3RyO1xuICB9XG5cbiAgdGhpcy5saXZlRWxlbWVudF8uaW5uZXJUZXh0ID0gc3RyO1xuICB0aGlzLnF1ZXVlXyA9IFtdO1xufTtcbiIsImltcG9ydCBrZXlzIGZyb20gJy4va2V5cyc7XG5pbXBvcnQgeyBsaWIgfSBmcm9tICcuLi9odGVybV9hbGwnO1xuY29uc3QgX19mb3J3YXJkV29yZFJlZ2V4ID0gL15cXFcqXFx3Ky87XG5jb25zdCBfX2JhY2t3YXJkV29yZFJlZ2V4ID0gL1xcdytcXFcqJC87XG5jb25zdCBfX2hpc3RyeURpc3BsYXlIZWlnaHQgPSA4O1xuY2xhc3MgSGlzdG9yeSB7XG4gICAgY29uc3RydWN0b3IocHJvbXB0KSB7XG4gICAgICAgIHRoaXMuX2N1cnNvciA9IC0xO1xuICAgICAgICB0aGlzLl9sYXN0VmFsdWUgPSAnJztcbiAgICAgICAgdGhpcy5fbGFzdFByb21wdCA9ICcnO1xuICAgICAgICB0aGlzLl9jYWxsID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGluZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fdG90YWwgPSAwO1xuICAgICAgICB0aGlzLl9mb3VuZCA9IDA7XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJvbXB0ID0gcHJvbXB0O1xuICAgICAgICB0aGlzLl9sYXN0VmFsdWUgPSBwcm9tcHQuX3ZhbHVlO1xuICAgICAgICB0aGlzLl9sYXN0UHJvbXB0ID0gcHJvbXB0Ll9wcm9tcHQ7XG4gICAgfVxuICAgIGVudGVyKCkge1xuICAgICAgICBsZXQgY3Vyc29yID0gdGhpcy5fY3Vyc29yO1xuICAgICAgICBsZXQgbGluZSA9IHRoaXMuX2xpbmVzLmZpbmQoZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBsaW5lLm51bSA9PSBjdXJzb3I7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobGluZSkge1xuICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll92YWx1ZSA9IGxpbmUudmFsO1xuICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll9jdXJzb3IgPSBsaWIud2Muc3RyV2lkdGgobGluZS52YWwpO1xuICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll9yZW5kZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWFyY2goKSB7XG4gICAgICAgIHRoaXMuX2NhbmNlbENhbGwoKTtcbiAgICAgICAgaWYgKHRoaXMuX3Jlc3BvbnNlICYmIHRoaXMuX3Jlc3BvbnNlLnBhdHRlcm4gPT0gdGhpcy5fcHJvbXB0Ll92YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N1cnNvciA9IC0xO1xuICAgICAgICB0aGlzLl9jYWxsID0gd2luZG93LnRlcm1fYXBpUmVxdWVzdCgnaGlzdG9yeS5zZWFyY2gnLCB7XG4gICAgICAgICAgICBwYXR0ZXJuOiB0aGlzLl9wcm9tcHQuX3ZhbHVlLFxuICAgICAgICAgICAgYmVmb3JlOiBfX2hpc3RyeURpc3BsYXlIZWlnaHQsXG4gICAgICAgICAgICBhZnRlcjogMCxcbiAgICAgICAgICAgIGN1cnNvcjogdGhpcy5fY3Vyc29yLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLl9jYWxsLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3Jlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgICAgICB0aGlzLl9saW5lcyA9IHJlc3BvbnNlLmxpbmVzO1xuICAgICAgICAgICAgdGhpcy5fdG90YWwgPSByZXNwb25zZS50b3RhbDtcbiAgICAgICAgICAgIHRoaXMuX2ZvdW5kID0gcmVzcG9uc2UuZm91bmQ7XG4gICAgICAgICAgICBsZXQgbGluZSA9IHJlc3BvbnNlLmxpbmVzW3Jlc3BvbnNlLmxpbmVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGxpbmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3IgPSBsaW5lLm51bTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfY2FuY2VsQ2FsbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGwuY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgfVxuICAgIHByZXYoc2VhcmNoTW9kZSkge1xuICAgICAgICB0aGlzLl9jYW5jZWxDYWxsKCk7XG4gICAgICAgIGlmIChzZWFyY2hNb2RlKSB7XG4gICAgICAgICAgICBsZXQgY3Vyc29yID0gdGhpcy5fY3Vyc29yO1xuICAgICAgICAgICAgbGV0IGlkeCA9IHRoaXMuX2xpbmVzLmZpbmRJbmRleChmdW5jdGlvbiAobGluZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsaW5lLm51bSA9PSBjdXJzb3I7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChpZHggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yID0gdGhpcy5fbGluZXNbaWR4IC0gMV0ubnVtO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb21wdC5fcmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsID0gd2luZG93LnRlcm1fYXBpUmVxdWVzdCgnaGlzdG9yeS5zZWFyY2gnLCB7XG4gICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IHRoaXMuX3Byb21wdC5fdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZTogMSxcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXI6IDAsXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcjogdGhpcy5fY3Vyc29yLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmUgPSByZXNwb25zZS5saW5lc1swXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9tcHQuX3Rlcm0ucmluZ0JlbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saW5lcy5zcGxpY2UoLTEsIDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saW5lcy5zcGxpY2UoMCwgMCwgbGluZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvciA9IGxpbmUubnVtO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NhbGwgPSB3aW5kb3cudGVybV9hcGlSZXF1ZXN0KCdoaXN0b3J5LnNlYXJjaCcsIHtcbiAgICAgICAgICAgIHBhdHRlcm46IHRoaXMuX2xhc3RWYWx1ZSxcbiAgICAgICAgICAgIGJlZm9yZTogMSxcbiAgICAgICAgICAgIGFmdGVyOiAwLFxuICAgICAgICAgICAgY3Vyc29yOiB0aGlzLl9jdXJzb3IsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuX2NhbGwudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGxpbmUgPSByZXNwb25zZS5saW5lc1swXTtcbiAgICAgICAgICAgIGlmICghbGluZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb21wdC5fdGVybS5yaW5nQmVsbCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2N1cnNvciA9IGxpbmUubnVtO1xuICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll92YWx1ZSA9IGxpbmUudmFsO1xuICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll9jdXJzb3IgPSBsaWIud2Muc3RyV2lkdGgobGluZS52YWwpO1xuICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll9yZW5kZXIoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5leHQoc2VhcmNoTW9kZSkge1xuICAgICAgICBpZiAoc2VhcmNoTW9kZSkge1xuICAgICAgICAgICAgbGV0IGN1cnNvciA9IHRoaXMuX2N1cnNvcjtcbiAgICAgICAgICAgIGxldCBpZHggPSB0aGlzLl9saW5lcy5maW5kSW5kZXgoZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZS5udW0gPT0gY3Vyc29yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaWR4IDwgdGhpcy5fbGluZXMubGVuZ3RoIC0gMSAmJiBpZHggIT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3IgPSB0aGlzLl9saW5lc1tpZHggKyAxXS5udW07XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll9yZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGwgPSB3aW5kb3cudGVybV9hcGlSZXF1ZXN0KCdoaXN0b3J5LnNlYXJjaCcsIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogdGhpcy5fcHJvbXB0Ll92YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlOiAwLFxuICAgICAgICAgICAgICAgICAgICBhZnRlcjogMixcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiB0aGlzLl9jdXJzb3IsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGwudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgbGluZSA9IHJlc3BvbnNlLmxpbmVzWzFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb21wdC5fdGVybS5yaW5nQmVsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVzLnNwbGljZSgwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGluZXMucHVzaChsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yID0gbGluZS5udW07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FuY2VsQ2FsbCgpO1xuICAgICAgICBpZiAodGhpcy5fY3Vyc29yID09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9tcHQuX3Rlcm0ucmluZ0JlbGwoKTtcbiAgICAgICAgICAgIHRoaXMuX3Byb21wdC5faGlzdG9yeSA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FsbCA9IHdpbmRvdy50ZXJtX2FwaVJlcXVlc3QoJ2hpc3Rvcnkuc2VhcmNoJywge1xuICAgICAgICAgICAgcGF0dGVybjogdGhpcy5fbGFzdFZhbHVlLFxuICAgICAgICAgICAgYmVmb3JlOiAwLFxuICAgICAgICAgICAgYWZ0ZXI6IDIsXG4gICAgICAgICAgICBjdXJzb3I6IHRoaXMuX2N1cnNvcixcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5fY2FsbC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbGluZSA9IHJlc3BvbnNlLmxpbmVzWzFdO1xuICAgICAgICAgICAgaWYgKCFsaW5lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll92YWx1ZSA9IHRoaXMuX2xhc3RWYWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9tcHQuX2N1cnNvciA9IGxpYi53Yy5zdHJXaWR0aCh0aGlzLl9sYXN0VmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb21wdC5fdGVybS5yaW5nQmVsbCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb21wdC5faGlzdG9yeSA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY3Vyc29yID0gbGluZS5udW07XG4gICAgICAgICAgICB0aGlzLl9wcm9tcHQuX3ZhbHVlID0gbGluZS52YWw7XG4gICAgICAgICAgICB0aGlzLl9wcm9tcHQuX2N1cnNvciA9IGxpYi53Yy5zdHJXaWR0aChsaW5lLnZhbCk7XG4gICAgICAgICAgICB0aGlzLl9wcm9tcHQuX3JlbmRlcigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX2NhbmNlbENhbGwoKTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgdGVybSA9IHRoaXMuX3Byb21wdC5fdGVybTtcbiAgICAgICAgbGV0IHNjcmVlbldpZHRoID0gdGVybS5zY3JlZW5fLmNvbHVtbkNvdW50XztcbiAgICAgICAgdGVybS5zZXRDdXJzb3JWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgdGVybS5zZXRDdXJzb3JQb3NpdGlvbih0aGlzLl9wcm9tcHQuX3N0YXJ0Um93LCB0aGlzLl9wcm9tcHQuX3N0YXJ0Q29sKTtcbiAgICAgICAgdGVybS5lcmFzZUJlbG93KCk7XG4gICAgICAgIGxldCB2YWx1ZVdpZHRoID0gbGliLndjLnN0cldpZHRoKHRoaXMuX3Byb21wdC5fdmFsdWUpO1xuICAgICAgICBsZXQgc2VhcmNoUHJvbXB0ID0gJ/Cfk5Yg8J+RgCc7XG4gICAgICAgIGlmICh2YWx1ZVdpZHRoID4gMCkge1xuICAgICAgICAgICAgc2VhcmNoUHJvbXB0ID0gJ/Cfk5Yg8J+UjSc7XG4gICAgICAgICAgICBpZiAodGhpcy5fbGluZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICBzZWFyY2hQcm9tcHQgKz0gJyDwn6S3JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZWFyY2hQcm9tcHQgPVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgKCcnICsgdGhpcy5fZm91bmQpLnBhZFN0YXJ0KDYsICcgJykgK1xuICAgICAgICAgICAgICAgICcgb2YgJyArXG4gICAgICAgICAgICAgICAgdGhpcy5fdG90YWwgK1xuICAgICAgICAgICAgICAgICcgJyArXG4gICAgICAgICAgICAgICAgc2VhcmNoUHJvbXB0O1xuICAgICAgICBsZXQgaW5wdXRQcm9tcHQgPSAnPiAnO1xuICAgICAgICB0ZXJtLnByaW50KHNlYXJjaFByb21wdCwgZmFsc2UpO1xuICAgICAgICBsZXQgcG9zID0gdmFsdWVXaWR0aCArIGxpYi53Yy5zdHJXaWR0aChpbnB1dFByb21wdCk7XG4gICAgICAgIGxldCByID0gKHBvcyAvIHNjcmVlbldpZHRoKSB8IDA7XG4gICAgICAgIGxldCBjID0gcG9zICUgc2NyZWVuV2lkdGg7XG4gICAgICAgIGxldCBoaXN0b3J5SGVpZ2h0ID0gTWF0aC5taW4oX19oaXN0cnlEaXNwbGF5SGVpZ2h0LCB0aGlzLl9saW5lcy5sZW5ndGgpO1xuICAgICAgICBsZXQgbW9yZVJvd3MgPSBoaXN0b3J5SGVpZ2h0ICsgdGhpcy5fcHJvbXB0Ll9zdGFydFJvdyArIHIgKyAyIC0gdGVybS5zY3JlZW5TaXplLmhlaWdodDtcbiAgICAgICAgaWYgKG1vcmVSb3dzID4gMCkge1xuICAgICAgICAgICAgdGVybS5hcHBlbmRSb3dzXyhtb3JlUm93cyk7XG4gICAgICAgICAgICB0aGlzLl9wcm9tcHQuX3N0YXJ0Um93IC09IG1vcmVSb3dzO1xuICAgICAgICAgICAgdGVybS5zZXRDdXJzb3JQb3NpdGlvbih0aGlzLl9wcm9tcHQuX3N0YXJ0Um93LCB0aGlzLl9wcm9tcHQuX3N0YXJ0Q29sKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhpc3RvcnlIZWlnaHQ7IGkrKykge1xuICAgICAgICAgICAgdmFyIGxpbmUgPSB0aGlzLl9saW5lc1tpXTtcbiAgICAgICAgICAgIHRlcm0uc2V0Q3Vyc29yUG9zaXRpb24odGhpcy5fcHJvbXB0Ll9zdGFydFJvdyArIGkgKyAxLCAwKTtcbiAgICAgICAgICAgIHRlcm0ucHJpbnQoKHRoaXMuX2N1cnNvciA9PSBsaW5lLm51bSA/ICcqICcgOiAnICAnKSArXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIChsaW5lLm51bSArICcnKS5wYWRTdGFydCg0LCAnICcpICtcbiAgICAgICAgICAgICAgICAnICcsIGZhbHNlKTtcbiAgICAgICAgICAgIHRlcm0ucHJpbnQobGluZS52YWwsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB0ZXJtLnNldEN1cnNvclBvc2l0aW9uKHRoaXMuX3Byb21wdC5fc3RhcnRSb3cgKyBoaXN0b3J5SGVpZ2h0ICsgMSwgMCk7XG4gICAgICAgIHRlcm0ucHJpbnQoaW5wdXRQcm9tcHQsIGZhbHNlKTtcbiAgICAgICAgdGVybS5wcmludCh0aGlzLl9wcm9tcHQuX3ZhbHVlLCBmYWxzZSk7XG4gICAgICAgIHBvcyA9IHRoaXMuX3Byb21wdC5fY3Vyc29yICsgbGliLndjLnN0cldpZHRoKGlucHV0UHJvbXB0KTtcbiAgICAgICAgciA9IChwb3MgLyBzY3JlZW5XaWR0aCkgfCAwO1xuICAgICAgICBjID0gcG9zICUgc2NyZWVuV2lkdGg7XG4gICAgICAgIHRlcm0uc2V0Q3Vyc29yUG9zaXRpb24odGhpcy5fcHJvbXB0Ll9zdGFydFJvdyArIHIgKyBoaXN0b3J5SGVpZ2h0ICsgMSwgYyk7XG4gICAgICAgIHRlcm0uc2V0Q3Vyc29yVmlzaWJsZSh0cnVlKTtcbiAgICB9XG59XG5jbGFzcyBDb21wbGV0ZSB7XG4gICAgY29uc3RydWN0b3IocHJvbXB0KSB7XG4gICAgICAgIHRoaXMuX2N1cnNvciA9IC0xO1xuICAgICAgICB0aGlzLl9sYXN0VmFsdWUgPSAnJztcbiAgICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbiA9IDA7XG4gICAgICAgIHRoaXMuX2xhc3RDdXJzb3IgPSAtMTtcbiAgICAgICAgdGhpcy5fY2hlY2tWYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NoZWNrQ3Vyc29yID0gLTE7XG4gICAgICAgIHRoaXMuX3Byb21wdCA9IHByb21wdDtcbiAgICAgICAgdGhpcy5fbGFzdFZhbHVlID0gcHJvbXB0Ll92YWx1ZTtcbiAgICB9XG4gICAgY29tcGxldGUoZE4pIHtcbiAgICAgICAgdGhpcy5fY2FuY2VsQ2FsbCgpO1xuICAgICAgICBsZXQgY3Vyc29yID0gdGhpcy5fcHJvbXB0Ll9jdXJzb3I7XG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuX3Byb21wdC5fdmFsdWUgfHwgJyc7XG4gICAgICAgIGlmICghdmFsdWUudHJpbSgpKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9tcHQuX3ZhbHVlID0gJyc7XG4gICAgICAgICAgICB0aGlzLl9wcm9tcHQuX2N1cnNvciA9IGxpYi53Yy5zdHJXaWR0aCh0aGlzLl9wcm9tcHQuX3ZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuX3Byb21wdC5faGludCA9ICcnO1xuICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll9yZW5kZXIoKTtcbiAgICAgICAgICAgIHRoaXMuX3Byb21wdC5fdGVybS5pbnRlcnByZXQoJ1xcclxcbicpO1xuICAgICAgICAgICAgbGV0IG9wID0gJ2xpbmUnO1xuICAgICAgICAgICAgbGV0IGRhdGEgPSB7IHRleHQ6ICdoZWxwIGxpc3QtY29tbWFuZHMnIH07XG4gICAgICAgICAgICB3aW5kb3cud2Via2l0Lm1lc3NhZ2VIYW5kbGVycy5pbnRlck9wLnBvc3RNZXNzYWdlKHsgb3AsIGRhdGEgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlYWxDdXJzb3IgPSBjdXJzb3I7XG4gICAgICAgIGxldCByZWFsVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgbGV0IG4gPSB0aGlzLl9uO1xuICAgICAgICBpZiAodGhpcy5fY2hlY2tDdXJzb3IgPT0gY3Vyc29yICYmIHRoaXMuX2NoZWNrVmFsdWUgPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIG4gKz0gZE47XG4gICAgICAgICAgICBjdXJzb3IgPSB0aGlzLl9sYXN0Q3Vyc29yO1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9sYXN0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RDdXJzb3IgPSBjdXJzb3I7XG4gICAgICAgICAgICB0aGlzLl9sYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jYWxsID0gd2luZG93LnRlcm1fYXBpUmVxdWVzdCgnY29tcGxldGlvbi5mb3InLCB7XG4gICAgICAgICAgICBjdXJzb3I6IGN1cnNvcixcbiAgICAgICAgICAgIGlucHV0OiB2YWx1ZSxcbiAgICAgICAgICAgIG46IG4sXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuX2NhbGwudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbWF5IGJlIHdlIGFyZSB0b28gbGF0ZSBvciB3ZSBkb24ndCBmaW5kIGFueXRoaW5nXG4gICAgICAgICAgICBpZiAocmVhbEN1cnNvciAhPSB0aGlzLl9wcm9tcHQuX2N1cnNvciB8fFxuICAgICAgICAgICAgICAgIHJlYWxWYWx1ZSAhPSB0aGlzLl9wcm9tcHQuX3ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgICAgICAgIGlmIChjYW5kaWRhdGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgbGVmdCA9IHZhbHVlLnN1YnN0cigwLCByZXNwb25zZS5wb3MgKyByZXNwb25zZS5sZW4pO1xuICAgICAgICAgICAgICAgIGxlZnQgPSB2YWx1ZS5zdWJzdHIoMCwgcmVzcG9uc2UucG9zKSArIGNhbmRpZGF0ZTtcbiAgICAgICAgICAgICAgICBsZXQgbGVmdFdpZHRoID0gbGliLndjLnN0cldpZHRoKGxlZnQpO1xuICAgICAgICAgICAgICAgIGxldCByaWdodCA9IHZhbHVlLnN1YnN0cmluZyhyZXNwb25zZS5wb3MgKyByZXNwb25zZS5sZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb21wdC5fdmFsdWUgPSBbbGVmdCwgcmlnaHRdLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb21wdC5fY3Vyc29yID0gbGVmdFdpZHRoO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrQ3Vyc29yID0gdGhpcy5fcHJvbXB0Ll9jdXJzb3I7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tWYWx1ZSA9IHRoaXMuX3Byb21wdC5fdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5fbiA9IG47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0N1cnNvciA9IC0xO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX24gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGhpbnQgPSB0aGlzLl9yZXNwb25zZS5oaW50O1xuICAgICAgICAgICAgaWYgKGhpbnQpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJlZml4ID0gdmFsdWUuc3Vic3RyKDAsIHJlc3BvbnNlLnN0YXJ0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9tcHQuX2hpbnRQb3MgPSBsaWIud2Muc3RyV2lkdGgocHJlZml4KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9tcHQuX2hpbnQgPSByZXNwb25zZS5oaW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll9oaW50UG9zID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9tcHQuX2hpbnQgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGludCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaGludCgpIHtcbiAgICAgICAgdGhpcy5fY2FuY2VsQ2FsbCgpO1xuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLl9wcm9tcHQuX3ZhbHVlO1xuICAgICAgICBsZXQgY3Vyc29yID0gdGhpcy5fcHJvbXB0Ll9jdXJzb3I7XG4gICAgICAgIGlmICh0aGlzLl9yZXNwb25zZSAmJiB0aGlzLl9yZXNwb25zZS5pbnB1dCA9PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NhbGwgPSB3aW5kb3cudGVybV9hcGlSZXF1ZXN0KCdjb21wbGV0aW9uLmZvcicsIHtcbiAgICAgICAgICAgIGN1cnNvcjogY3Vyc29yLFxuICAgICAgICAgICAgaW5wdXQ6IHRoaXMuX3Byb21wdC5fdmFsdWUsXG4gICAgICAgICAgICBuOiAwLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLl9jYWxsLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG1heSBiZSB3ZSBhcmUgdG9vIGxhdGUgb3Igd2UgZG9uJ3QgZmluZCBhbnl0aGluZ1xuICAgICAgICAgICAgaWYgKGN1cnNvciAhPSB0aGlzLl9wcm9tcHQuX2N1cnNvciB8fCB2YWx1ZSAhPSB0aGlzLl9wcm9tcHQuX3ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgICAgIGxldCBoaW50ID0gdGhpcy5fcmVzcG9uc2UuaGludDtcbiAgICAgICAgICAgIGlmIChoaW50KSB7XG4gICAgICAgICAgICAgICAgbGV0IHByZWZpeCA9IHZhbHVlLnN1YnN0cigwLCByZXNwb25zZS5zdGFydCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll9oaW50UG9zID0gbGliLndjLnN0cldpZHRoKHByZWZpeCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll9oaW50ID0gcmVzcG9uc2UuaGludDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb21wdC5faGludFBvcyA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvbXB0Ll9oaW50ID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wcm9tcHQuX3JlbmRlcigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2NhbmNlbENhbGwoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWxsLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb21wdCB7XG4gICAgY29uc3RydWN0b3IodGVybSkge1xuICAgICAgICB0aGlzLl9wcm9tcHQgPSAnJztcbiAgICAgICAgdGhpcy5fc2hlbGwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc2VjdXJlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2N1cnNvciA9IDA7XG4gICAgICAgIHRoaXMuX3JvdyA9IDA7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gJyc7XG4gICAgICAgIHRoaXMuX2hpc3RvcnkgPSBudWxsO1xuICAgICAgICB0aGlzLl9jb21wbGV0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N0YXJ0Q29sID0gMDtcbiAgICAgICAgdGhpcy5fc3RhcnRSb3cgPSAwO1xuICAgICAgICB0aGlzLl9oaXN0b3J5U2VhcmNoTW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9oaW50ID0gJyc7XG4gICAgICAgIHRoaXMuX2hpbnRQb3MgPSAwO1xuICAgICAgICB0aGlzLl9vbktleSA9IChrZXkpID0+IHtcbiAgICAgICAgICAgIGxldCB0ZXJtID0gdGhpcy5fdGVybTtcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5LmZ1bGxOYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndGFiJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29tcGxldGVJZk5lZWRlZCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnUy10YWInOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb21wbGV0ZUJhY2tJZk5lZWRlZCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnTS1mJzpcbiAgICAgICAgICAgICAgICBjYXNlICdNLXJpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9yd2FyZFdvcmQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnTS1iJzpcbiAgICAgICAgICAgICAgICBjYXNlICdNLWxlZnQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYWNrV29yZCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdDLXcnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWxldGVCYWNrV29yZCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNLWQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWxldGVGb3J3YXJkV29yZCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNLXUnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cHBlcmNhc2VGb3J3YXJkV29yZCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdob21lJzpcbiAgICAgICAgICAgICAgICBjYXNlICdDLWEnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3IgPSAwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0MtZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvciA9IGxpYi53Yy5zdHJXaWR0aCh0aGlzLl92YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0MtdSc6XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBsaWIud2Muc3Vic3RyKHRoaXMuX3ZhbHVlLCB0aGlzLl9jdXJzb3IpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3IgPSAwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdDLWwnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3Vyc29yID09IDAgJiYgdGhpcy5fdmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtLnJpbmdCZWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3IgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0SGlzdG9yeSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0Mtcic6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zaGVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlzdG9yeVNlYXJjaE1vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzZXRIaXN0b3J5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtLnJpbmdCZWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQy1jJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYmFja3NwYWNlJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnNvciA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtLnJpbmdCZWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGVmdCA9IGxpYi53Yy5zdWJzdHJpbmcodGhpcy5fdmFsdWUsIDAsIHRoaXMuX2N1cnNvciAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJpZ2h0ID0gbGliLndjLnN1YnN0cih0aGlzLl92YWx1ZSwgdGhpcy5fY3Vyc29yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gW2xlZnQsIHJpZ2h0XS5qb2luKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvciA9IGxpYi53Yy5zdHJXaWR0aChsZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0SGlzdG9yeSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0MtZCc6XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsZWZ0ID0gbGliLndjLnN1YnN0cmluZyh0aGlzLl92YWx1ZSwgMCwgdGhpcy5fY3Vyc29yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByaWdodCA9IGxpYi53Yy5zdWJzdHIodGhpcy5fdmFsdWUsIHRoaXMuX2N1cnNvciArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBbbGVmdCwgcmlnaHRdLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0MtYic6XG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdmVMZWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0MtZic6XG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb3ZlUmlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQy1rJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9oaXN0b3J5U2VhcmNoTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBsaWIud2Muc3Vic3RyaW5nKHRoaXMuX3ZhbHVlLCAwLCB0aGlzLl9jdXJzb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yID0gbGliLndjLnN0cldpZHRoKHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0SGlzdG9yeSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdDLXAnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vdmVVcCgpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0Mtbic6XG4gICAgICAgICAgICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb3ZlRG93bigpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2VzY2FwZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpc3RvcnlTZWFyY2hNb2RlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmVmZWVkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdDLWonOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faGlzdG9yeVNlYXJjaE1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb3ZlRG93bigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAncmV0dXJuJzpcbiAgICAgICAgICAgICAgICBjYXNlICdlbnRlcic6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oaXN0b3J5U2VhcmNoTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0SGlzdG9yeSgpLmVudGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaXN0b3J5U2VhcmNoTW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzZXRIaXN0b3J5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3IgPSBsaWIud2Muc3RyV2lkdGgodGhpcy5fdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaW50ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtLmludGVycHJldCgnXFxyXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvcCA9ICdsaW5lJztcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB7IHRleHQ6IHRoaXMuX3ZhbHVlIHx8ICcnIH07XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzLmludGVyT3AucG9zdE1lc3NhZ2UoeyBvcCwgZGF0YSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuY2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IGxpYi53Yy5zdHJXaWR0aChrZXkuY2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxlZnQgPSBsaWIud2Muc3Vic3RyaW5nKHRoaXMuX3ZhbHVlLCAwLCB0aGlzLl9jdXJzb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJpZ2h0ID0gbGliLndjLnN1YnN0cih0aGlzLl92YWx1ZSwgdGhpcy5fY3Vyc29yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlcm0uYWNjZXNzaWJpbGl0eVJlYWRlcl8uYXNzZXJ0aXZlQW5ub3VuY2Uoa2V5LmNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gW2xlZnQsIGtleS5jaCwgcmlnaHRdLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yICs9IHdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzZXRIaXN0b3J5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NlYXJjaElmTmVlZGVkKCk7XG4gICAgICAgICAgICB0aGlzLl9oaW50SWZOZWVkZWQoKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl90ZXJtID0gdGVybTtcbiAgICB9XG4gICAgX3ZhbHVlU3RhcnRDb2woKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFydENvbCArIGxpYi53Yy5zdHJXaWR0aCh0aGlzLl9wcm9tcHQpO1xuICAgIH1cbiAgICBfc2VhcmNoSWZOZWVkZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zaGVsbCAmJiB0aGlzLl9oaXN0b3J5U2VhcmNoTW9kZSkge1xuICAgICAgICAgICAgdGhpcy5fZ2V0SGlzdG9yeSgpLnNlYXJjaCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9jb21wbGV0ZUlmTmVlZGVkKCkge1xuICAgICAgICBpZiAodGhpcy5fc2hlbGwgJiYgIXRoaXMuX2hpc3RvcnlTZWFyY2hNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9nZXRDb21wbGV0ZSgpLmNvbXBsZXRlKDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9jb21wbGV0ZUJhY2tJZk5lZWRlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NoZWxsICYmICF0aGlzLl9oaXN0b3J5U2VhcmNoTW9kZSkge1xuICAgICAgICAgICAgdGhpcy5fZ2V0Q29tcGxldGUoKS5jb21wbGV0ZSgtMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2hpbnRJZk5lZWRlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NoZWxsICYmICF0aGlzLl9oaXN0b3J5U2VhcmNoTW9kZSkge1xuICAgICAgICAgICAgdGhpcy5fZ2V0Q29tcGxldGUoKS5oaW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9oaW50ID0gJyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX21vdmVMZWZ0KCkge1xuICAgICAgICBpZiAodGhpcy5fY3Vyc29yIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5fY3Vyc29yID0gMDtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm0ucmluZ0JlbGwoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdyA9IDA7XG4gICAgICAgIHZhciBsZWZ0O1xuICAgICAgICB2YXIgd2lkdGg7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHcgKz0gMTtcbiAgICAgICAgICAgIGxlZnQgPSBsaWIud2Muc3Vic3RyaW5nKHRoaXMuX3ZhbHVlLCAwLCB0aGlzLl9jdXJzb3IgLSB3KTtcbiAgICAgICAgICAgIHdpZHRoID0gbGliLndjLnN0cldpZHRoKGxlZnQpO1xuICAgICAgICB9IHdoaWxlICh3aWR0aCA+PSB0aGlzLl9jdXJzb3IgJiYgdyA8IDUpO1xuICAgICAgICB0aGlzLl9jdXJzb3IgPSB3aWR0aDtcbiAgICB9XG4gICAgX21vdmVSaWdodCgpIHtcbiAgICAgICAgbGV0IHZhbHVlV2lkdGggPSBsaWIud2Muc3RyV2lkdGgodGhpcy5fdmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5fY3Vyc29yID49IHZhbHVlV2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvciA9IHZhbHVlV2lkdGg7XG4gICAgICAgICAgICB0aGlzLl90ZXJtLnJpbmdCZWxsKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHcgPSAwO1xuICAgICAgICB2YXIgcmlnaHQsIHdpZHRoO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICB3ICs9IDE7XG4gICAgICAgICAgICByaWdodCA9IGxpYi53Yy5zdWJzdHJpbmcodGhpcy5fdmFsdWUsIDAsIHRoaXMuX2N1cnNvciArIHcpO1xuICAgICAgICAgICAgd2lkdGggPSBsaWIud2Muc3RyV2lkdGgocmlnaHQpO1xuICAgICAgICB9IHdoaWxlICh3aWR0aCA8PSB0aGlzLl9jdXJzb3IgJiYgdyA8IDUpO1xuICAgICAgICB0aGlzLl9jdXJzb3IgPSB3aWR0aDtcbiAgICB9XG4gICAgX21vdmVVcCgpIHtcbiAgICAgICAgbGV0IHRlcm0gPSB0aGlzLl90ZXJtO1xuICAgICAgICBsZXQgc2NyZWVuID0gdGhpcy5fdGVybS5zY3JlZW5fO1xuICAgICAgICBsZXQgcG9zID0gdGhpcy5fY3Vyc29yICsgdGhpcy5fdmFsdWVTdGFydENvbCgpO1xuICAgICAgICBsZXQgciA9IChwb3MgLyBzY3JlZW4uY29sdW1uQ291bnRfKSB8IDA7XG4gICAgICAgIGlmIChyID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fY3Vyc29yIC09IHNjcmVlbi5jb2x1bW5Db3VudF87XG4gICAgICAgICAgICBpZiAodGhpcy5fY3Vyc29yIDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc2hlbGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2hpbnQgPSAnJztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRIaXN0b3J5KCkucHJldih0aGlzLl9oaXN0b3J5U2VhcmNoTW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0ZXJtLnJpbmdCZWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgfVxuICAgIF9tb3ZlRG93bigpIHtcbiAgICAgICAgbGV0IHRlcm0gPSB0aGlzLl90ZXJtO1xuICAgICAgICBsZXQgc2NyZWVuID0gdGhpcy5fdGVybS5zY3JlZW5fO1xuICAgICAgICBsZXQgd2lkdGggPSBsaWIud2Muc3RyV2lkdGgodGhpcy5fdmFsdWUpO1xuICAgICAgICBsZXQgcG9zID0gdGhpcy5fY3Vyc29yICsgdGhpcy5fdmFsdWVTdGFydENvbCgpO1xuICAgICAgICBsZXQgciA9IChwb3MgLyBzY3JlZW4uY29sdW1uQ291bnRfKSB8IDA7XG4gICAgICAgIGxldCBsYXN0UiA9ICh3aWR0aCAvIHNjcmVlbi5jb2x1bW5Db3VudF8pIHwgMDtcbiAgICAgICAgaWYgKHIgPCBsYXN0Uikge1xuICAgICAgICAgICAgdGhpcy5fY3Vyc29yICs9IHNjcmVlbi5jb2x1bW5Db3VudF87XG4gICAgICAgICAgICBpZiAodGhpcy5fY3Vyc29yID4gd2lkdGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3IgPSB3aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9zaGVsbCkge1xuICAgICAgICAgICAgdGhpcy5faGludCA9ICcnO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldEhpc3RvcnkoKS5uZXh0KHRoaXMuX2hpc3RvcnlTZWFyY2hNb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRlcm0ucmluZ0JlbGwoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICB9XG4gICAgX2dldEhpc3RvcnkoKSB7XG4gICAgICAgIGlmICghdGhpcy5faGlzdG9yeSkge1xuICAgICAgICAgICAgdGhpcy5faGlzdG9yeSA9IG5ldyBIaXN0b3J5KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9oaXN0b3J5O1xuICAgIH1cbiAgICBfZ2V0Q29tcGxldGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlID0gbmV3IENvbXBsZXRlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jb21wbGV0ZTtcbiAgICB9XG4gICAgX3Jlc2V0SGlzdG9yeSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hpc3RvcnlTZWFyY2hNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9nZXRIaXN0b3J5KCkuc2VhcmNoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2hpc3RvcnkpIHtcbiAgICAgICAgICAgIHRoaXMuX2hpc3RvcnkucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuX2hpc3RvcnkgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9mb3J3YXJkV29yZCgpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBsZXQgcmlnaHQgPSBsaWIud2Muc3Vic3RyKHRoaXMuX3ZhbHVlLCB0aGlzLl9jdXJzb3IpO1xuICAgICAgICBsZXQgbWF0Y2ggPSBfX2ZvcndhcmRXb3JkUmVnZXguZXhlYyhyaWdodCk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgdGhpcy5fY3Vyc29yICs9IGxpYi53Yy5zdHJXaWR0aChtYXRjaFswXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2JhY2tXb3JkKCkge1xuICAgICAgICBsZXQgbGVmdCA9IGxpYi53Yy5zdWJzdHJpbmcodGhpcy5fdmFsdWUsIDAsIHRoaXMuX2N1cnNvcik7XG4gICAgICAgIGxldCBtYXRjaCA9IF9fYmFja3dhcmRXb3JkUmVnZXguZXhlYyhsZWZ0KTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N1cnNvciAtPSBsaWIud2Muc3RyV2lkdGgobWF0Y2hbMF0pO1xuICAgICAgICBpZiAodGhpcy5fY3Vyc29yIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5fY3Vyc29yID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZGVsZXRlQmFja1dvcmQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJzb3IgPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fdGVybS5yaW5nQmVsbCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZWZ0ID0gbGliLndjLnN1YnN0cmluZyh0aGlzLl92YWx1ZSwgMCwgdGhpcy5fY3Vyc29yKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBsZXQgcmlnaHQgPSBsaWIud2Muc3Vic3RyKHRoaXMuX3ZhbHVlLCB0aGlzLl9jdXJzb3IpO1xuICAgICAgICBsZXQgbWF0Y2ggPSBfX2JhY2t3YXJkV29yZFJlZ2V4LmV4ZWMobGVmdCk7XG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgd2lkdGggPSBsaWIud2Muc3RyV2lkdGgobWF0Y2hbMF0pO1xuICAgICAgICBsZWZ0ID0gbGliLndjLnN1YnN0cmluZyh0aGlzLl92YWx1ZSwgMCwgdGhpcy5fY3Vyc29yIC0gd2lkdGgpO1xuICAgICAgICB0aGlzLl92YWx1ZSA9IFtsZWZ0LCByaWdodF0uam9pbignJyk7XG4gICAgICAgIHRoaXMuX2N1cnNvciA9IE1hdGgubWF4KDAsIHRoaXMuX2N1cnNvciAtIHdpZHRoKTtcbiAgICAgICAgdGhpcy5fcmVzZXRIaXN0b3J5KCk7XG4gICAgfVxuICAgIF9kZWxldGVGb3J3YXJkV29yZCgpIHtcbiAgICAgICAgbGV0IGxlZnQgPSBsaWIud2Muc3Vic3RyaW5nKHRoaXMuX3ZhbHVlLCAwLCB0aGlzLl9jdXJzb3IpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHZhciByaWdodCA9IGxpYi53Yy5zdWJzdHIodGhpcy5fdmFsdWUsIHRoaXMuX2N1cnNvcik7XG4gICAgICAgIGxldCBtYXRjaCA9IF9fZm9yd2FyZFdvcmRSZWdleC5leGVjKHJpZ2h0KTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCB3aWR0aCA9IGxpYi53Yy5zdHJXaWR0aChtYXRjaFswXSk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmlnaHQgPSBsaWIud2Muc3Vic3RyKHJpZ2h0LCB3aWR0aCk7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gW2xlZnQsIHJpZ2h0XS5qb2luKCcnKTtcbiAgICAgICAgdGhpcy5fcmVzZXRIaXN0b3J5KCk7XG4gICAgfVxuICAgIF91cHBlcmNhc2VGb3J3YXJkV29yZCgpIHtcbiAgICAgICAgbGV0IGxlZnQgPSBsaWIud2Muc3Vic3RyaW5nKHRoaXMuX3ZhbHVlLCAwLCB0aGlzLl9jdXJzb3IpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHZhciByaWdodCA9IGxpYi53Yy5zdWJzdHIodGhpcy5fdmFsdWUsIHRoaXMuX2N1cnNvcik7XG4gICAgICAgIGxldCBtYXRjaCA9IF9fZm9yd2FyZFdvcmRSZWdleC5leGVjKHJpZ2h0KTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCB1cHBlcldvcmQgPSBtYXRjaFswXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBsZXQgd2lkdGggPSBsaWIud2Muc3RyV2lkdGgodXBwZXJXb3JkKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByaWdodCA9IGxpYi53Yy5zdWJzdHIocmlnaHQsIHdpZHRoKTtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBbbGVmdCwgdXBwZXJXb3JkLCByaWdodF0uam9pbignJyk7XG4gICAgICAgIHRoaXMuX2N1cnNvciArPSB3aWR0aDtcbiAgICAgICAgdGhpcy5fcmVzZXRIaXN0b3J5KCk7XG4gICAgfVxuICAgIF9yZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9oaXN0b3J5U2VhcmNoTW9kZSkge1xuICAgICAgICAgICAgdGhpcy5fZ2V0SGlzdG9yeSgpLnJlbmRlcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0ZXJtID0gdGhpcy5fdGVybTtcbiAgICAgICAgbGV0IHNjcmVlbldpZHRoID0gdGVybS5zY3JlZW5fLmNvbHVtbkNvdW50XztcbiAgICAgICAgdGVybS5zZXRDdXJzb3JWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgdGVybS5zZXRDdXJzb3JQb3NpdGlvbih0aGlzLl9zdGFydFJvdywgdGhpcy5fc3RhcnRDb2wpO1xuICAgICAgICB0ZXJtLmVyYXNlQmVsb3coKTtcbiAgICAgICAgbGV0IGhpbnRXaWR0aCA9IHRoaXMuX2hpbnRQb3MgKyBsaWIud2Muc3RyV2lkdGgodGhpcy5faGludCk7XG4gICAgICAgIGxldCB2YWx1ZVdpZHRoID0gbGliLndjLnN0cldpZHRoKHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgdmFsdWVXaWR0aCA9IE1hdGgubWF4KGhpbnRXaWR0aCwgdmFsdWVXaWR0aCk7XG4gICAgICAgIGlmICh0aGlzLl9zZWN1cmUpIHtcbiAgICAgICAgICAgIHZhbHVlV2lkdGggPSAwO1xuICAgICAgICAgICAgaGludFdpZHRoID0gMDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcG9zID0gdmFsdWVXaWR0aCArIHRoaXMuX3ZhbHVlU3RhcnRDb2woKTtcbiAgICAgICAgbGV0IHIgPSAocG9zIC8gc2NyZWVuV2lkdGgpIHwgMDtcbiAgICAgICAgbGV0IGMgPSBwb3MgJSBzY3JlZW5XaWR0aDtcbiAgICAgICAgbGV0IG1vcmVSb3dzID0gdGhpcy5fc3RhcnRSb3cgKyByICsgMSAtIHRlcm0uc2NyZWVuU2l6ZS5oZWlnaHQ7XG4gICAgICAgIGlmIChtb3JlUm93cyA+IDApIHtcbiAgICAgICAgICAgIHRlcm0uYXBwZW5kUm93c18obW9yZVJvd3MpO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRSb3cgLT0gbW9yZVJvd3M7XG4gICAgICAgICAgICB0ZXJtLnNldEN1cnNvclBvc2l0aW9uKHRoaXMuX3N0YXJ0Um93LCB0aGlzLl9zdGFydENvbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGVybS5wcmludCh0aGlzLl9wcm9tcHQsIGZhbHNlKTtcbiAgICAgICAgdmFyIGN1cnNvciA9IHRlcm0uc2F2ZUN1cnNvcigpO1xuICAgICAgICBpZiAoIXRoaXMuX3NlY3VyZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2hpbnQgJiYgdGhpcy5fc2hlbGwpIHtcbiAgICAgICAgICAgICAgICBsZXQgcG9zID0gdGhpcy5faGludFBvcyArIHRoaXMuX3ZhbHVlU3RhcnRDb2woKTtcbiAgICAgICAgICAgICAgICBsZXQgciA9IChwb3MgLyBzY3JlZW5XaWR0aCkgfCAwO1xuICAgICAgICAgICAgICAgIGxldCBjID0gcG9zICUgc2NyZWVuV2lkdGg7XG4gICAgICAgICAgICAgICAgdGVybS5zZXRDdXJzb3JQb3NpdGlvbih0aGlzLl9zdGFydFJvdyArIHIsIGMpO1xuICAgICAgICAgICAgICAgIHRlcm0uc2NyZWVuXy50ZXh0QXR0cmlidXRlcy5mYWludCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGVybS5zY3JlZW5fLnRleHRBdHRyaWJ1dGVzLmZvcmVncm91bmRTb3VyY2UgPSAzO1xuICAgICAgICAgICAgICAgIHRlcm0uc2NyZWVuXy50ZXh0QXR0cmlidXRlcy5zeW5jQ29sb3JzKCk7XG4gICAgICAgICAgICAgICAgdGVybS5wcmludCh0aGlzLl9oaW50LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGVybS5yZXN0b3JlQ3Vyc29yKGN1cnNvcik7XG4gICAgICAgICAgICAgICAgdGVybS5zY3JlZW5fLnRleHRBdHRyaWJ1dGVzLnJlc2V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXJtLnByaW50KHRoaXMuX3ZhbHVlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgcG9zID0gKHRoaXMuX3NlY3VyZSA/IDAgOiB0aGlzLl9jdXJzb3IpICsgdGhpcy5fdmFsdWVTdGFydENvbCgpO1xuICAgICAgICByID0gKHBvcyAvIHNjcmVlbldpZHRoKSB8IDA7XG4gICAgICAgIGMgPSBwb3MgJSBzY3JlZW5XaWR0aDtcbiAgICAgICAgdGVybS5zZXRDdXJzb3JQb3NpdGlvbih0aGlzLl9zdGFydFJvdyArIHIsIGMpO1xuICAgICAgICB0ZXJtLnNldEN1cnNvclZpc2libGUodHJ1ZSk7XG4gICAgfVxuICAgIHByb2Nlc3NJbnB1dChzdHIpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXJ0Q29sIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSAnJztcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvciA9IDA7XG4gICAgICAgICAgICB0aGlzLl9zdGFydENvbCA9IHRoaXMuX3Rlcm0uZ2V0Q3Vyc29yQ29sdW1uKCk7XG4gICAgICAgICAgICB0aGlzLl9zdGFydFJvdyA9IHRoaXMuX3Rlcm0uZ2V0Q3Vyc29yUm93KCk7XG4gICAgICAgIH1cbiAgICAgICAga2V5cyhzdHIsIHRoaXMuX29uS2V5KTtcbiAgICB9XG4gICAgcHJvY2Vzc01vdXNlQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXJ0Q29sIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LnRlcm1pbmFsUm93ID09IG51bGwgfHwgZXZlbnQudGVybWluYWxDb2x1bW4gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdmFyIHR4ID0gZXZlbnQudGVybWluYWxDb2x1bW4gLSAxO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHZhciB0eSA9IGV2ZW50LnRlcm1pbmFsUm93IC0gMTtcbiAgICAgICAgdmFyIHN0YXJ0Um93ID0gdGhpcy5fc3RhcnRSb3c7XG4gICAgICAgIHZhciBsaW5lcyA9IHRoaXMuX2dldEhpc3RvcnkoKS5fbGluZXM7XG4gICAgICAgIGlmICh0aGlzLl9oaXN0b3J5U2VhcmNoTW9kZSkge1xuICAgICAgICAgICAgc3RhcnRSb3cgKz0gbGluZXMubGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZHIgPSB0eSAtIHN0YXJ0Um93O1xuICAgICAgICBpZiAoZHIgPCAwKSB7XG4gICAgICAgICAgICBpZiAoLWRyIDw9IGxpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxldCBsaW5lID0gbGluZXNbbGluZXMubGVuZ3RoICsgZHJdO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dldEhpc3RvcnkoKS5fY3Vyc29yID0gbGluZS5udW07XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2V0SGlzdG9yeSgpLnJlbmRlcigpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2N1cnNvciA9IDA7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdmFsdWVXaWR0aCA9IGxpYi53Yy5zdHJXaWR0aCh0aGlzLl92YWx1ZSk7XG4gICAgICAgIGxldCBzY3JlZW5XaWR0aCA9IHRoaXMuX3Rlcm0uc2NyZWVuXy5jb2x1bW5Db3VudF87XG4gICAgICAgIGxldCBwb3MgPSBkciAqIHNjcmVlbldpZHRoICtcbiAgICAgICAgICAgIHR4IC1cbiAgICAgICAgICAgICh0aGlzLl9oaXN0b3J5U2VhcmNoTW9kZSA/IDIgOiB0aGlzLl92YWx1ZVN0YXJ0Q29sKCkpO1xuICAgICAgICB0aGlzLl9jdXJzb3IgPSBNYXRoLm1pbihNYXRoLm1heChwb3MsIDApLCB2YWx1ZVdpZHRoKTsgLy8gZml4IGN1cnNvciBpZiB3ZSBjbGlrIG9uIGVtb2ppXG4gICAgICAgIGxldCBsZWZ0ID0gbGliLndjLnN1YnN0cmluZyh0aGlzLl92YWx1ZSwgMCwgdGhpcy5fY3Vyc29yKTtcbiAgICAgICAgdGhpcy5fY3Vyc29yID0gbGliLndjLnN0cldpZHRoKGxlZnQpO1xuICAgICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHByb2Nlc3NNb3VzZVNjcm9sbChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhcnRDb2wgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoZXZlbnQudGVybWluYWxSb3cgPT0gbnVsbCB8fCBldmVudC50ZXJtaW5hbENvbHVtbiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9oaXN0b3J5U2VhcmNoTW9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5kZWx0YVkgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9tb3ZlVXAoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX21vdmVEb3duKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHByb21wdEI2NChiNjQpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB0aGlzLl90ZXJtLnNldEF1dG9DYXJyaWFnZVJldHVybih0cnVlKTtcbiAgICAgICAgbGV0IG9wdHMgPSBKU09OLnBhcnNlKHdpbmRvdy5hdG9iKGI2NCkpO1xuICAgICAgICB0aGlzLl9wcm9tcHQgPSBvcHRzLnByb21wdDtcbiAgICAgICAgdGhpcy5fc2VjdXJlID0gb3B0cy5zZWN1cmU7XG4gICAgICAgIHRoaXMuX3NoZWxsID0gb3B0cy5zaGVsbDtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSAnJztcbiAgICAgICAgdGhpcy5faGludCA9ICcnO1xuICAgICAgICB0aGlzLl9oaW50UG9zID0gMDtcbiAgICAgICAgdGhpcy5fY3Vyc29yID0gMDtcbiAgICAgICAgdGhpcy5fc3RhcnRDb2wgPSB0aGlzLl90ZXJtLmdldEN1cnNvckNvbHVtbigpO1xuICAgICAgICB0aGlzLl9zdGFydFJvdyA9IHRoaXMuX3Rlcm0uZ2V0Q3Vyc29yUm93KCk7XG4gICAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgICAgICB0aGlzLl90ZXJtLmFjY2Vzc2liaWxpdHlSZWFkZXJfLmFubm91bmNlKHRoaXMuX3Byb21wdCk7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhcnRDb2wgPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oaXN0b3J5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY29tcGxldGUgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcm9tcHQgPSAnJztcbiAgICAgICAgdGhpcy5fc3RhcnRDb2wgPSAtMTtcbiAgICAgICAgdGhpcy5fc2VjdXJlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3NoZWxsID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2hpbnQgPSAnJztcbiAgICAgICAgdGhpcy5faGludFBvcyA9IDA7XG4gICAgICAgIHRoaXMuX2hpc3RvcnlTZWFyY2hNb2RlID0gZmFsc2U7XG4gICAgfVxuICAgIHJlc2l6ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXJ0Q29sIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGh0ZXJtLCBsaWIgfSBmcm9tICcuLi9odGVybV9hbGwnO1xuaW1wb3J0IHsgdG91Y2gsIHJvd1dpZHRoLCByb3dUZXh0LCBnZW5LZXkgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZURlZmF1bHROb2RlIH0gZnJvbSAnLi9UZXh0QXR0cmlidXRlcyc7XG5pbXBvcnQgJy4vQWNjZXNzaWJpbGl0eVJlYWRlcic7XG5pbXBvcnQgUHJvbXB0IGZyb20gJy4uL3JlYWRsaW5lL3Byb21wdCc7XG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuZGVjb3JhdGUgPSBmdW5jdGlvbiAoZGl2KSB7XG4gICAgdGhpcy5kaXZfID0gZG9jdW1lbnQuYm9keTtcbiAgICB0aGlzLmFjY2Vzc2liaWxpdHlSZWFkZXJfID0gbmV3IGh0ZXJtLkFjY2Vzc2liaWxpdHlSZWFkZXIodGhpcy5kaXZfKTtcbiAgICB0aGlzLnNjcm9sbFBvcnRfLmRlY29yYXRlKGRpdik7XG4gICAgdGhpcy5zY3JvbGxQb3J0Xy5zZXRVc2VyQ3NzVXJsKHRoaXMucHJlZnNfLmdldCgndXNlci1jc3MnKSk7XG4gICAgdGhpcy5zY3JvbGxQb3J0Xy5zZXRVc2VyQ3NzVGV4dCh0aGlzLnByZWZzXy5nZXQoJ3VzZXItY3NzLXRleHQnKSk7XG4gICAgdGhpcy5zY3JvbGxQb3J0Xy5zZXRBY2Nlc3NpYmlsaXR5UmVhZGVyKHRoaXMuYWNjZXNzaWJpbGl0eVJlYWRlcl8pO1xuICAgIHRoaXMuZGl2Xy5mb2N1cyA9IHRoaXMuZm9jdXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNldEZvbnRTaXplKHRoaXMucHJlZnNfLmdldCgnZm9udC1zaXplJykpO1xuICAgIHRoaXMuc3luY0ZvbnRGYW1pbHkoKTtcbiAgICB0aGlzLnNldFNjcm9sbGJhclZpc2libGUodGhpcy5wcmVmc18uZ2V0KCdzY3JvbGxiYXItdmlzaWJsZScpKTtcbiAgICB0aGlzLnNldFNjcm9sbFdoZWVsTW92ZU11bHRpcGxlcih0aGlzLnByZWZzXy5nZXQoJ3Njcm9sbC13aGVlbC1tb3ZlLW11bHRpcGxpZXInKSk7XG4gICAgdGhpcy5kb2N1bWVudF8gPSB0aGlzLnNjcm9sbFBvcnRfLmdldERvY3VtZW50KCk7XG4gICAgdGhpcy5kb2N1bWVudF8uYm9keS5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICB2YXIgb25Nb3VzZSA9IHRoaXMub25Nb3VzZV8uYmluZCh0aGlzKTtcbiAgICB2YXIgc2NyZWVuTm9kZSA9IHRoaXMuc2Nyb2xsUG9ydF8uZ2V0U2NyZWVuTm9kZSgpO1xuICAgIHNjcmVlbk5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Nb3VzZSk7XG4gICAgc2NyZWVuTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Nb3VzZSk7XG4gICAgc2NyZWVuTm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbk1vdXNlKTtcbiAgICB0aGlzLnNjcm9sbFBvcnRfLm9uU2Nyb2xsV2hlZWwgPSBvbk1vdXNlO1xuICAgIGxldCBvbkZvY3VzZUNoYW5nZSA9IHRoaXMub25Gb2N1c0NoYW5nZV8uYmluZCh0aGlzLCB0cnVlKTtcbiAgICBzY3JlZW5Ob2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgb25Gb2N1c2VDaGFuZ2UpO1xuICAgIC8vIExpc3RlbiBmb3IgbW91c2Vkb3duIGV2ZW50cyBvbiB0aGUgc2NyZWVuTm9kZSBhcyBpbiBGRiB0aGUgZm9jdXNcbiAgICAvLyBldmVudHMgZG9uJ3QgYnViYmxlLlxuICAgIHNjcmVlbk5vZGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXRUaW1lb3V0KG9uRm9jdXNlQ2hhbmdlKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICAgIHNjcmVlbk5vZGUuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMub25Gb2N1c0NoYW5nZV8uYmluZCh0aGlzLCBmYWxzZSkpO1xuICAgIHZhciBzdHlsZSA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGUudGV4dENvbnRlbnQgPVxuICAgICAgICAnLmN1cnNvci1ub2RlW2ZvY3VzPVwiZmFsc2VcIl0geycgK1xuICAgICAgICAgICAgJyAgYm94LXNpemluZzogYm9yZGVyLWJveDsnICtcbiAgICAgICAgICAgICcgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7JyArXG4gICAgICAgICAgICAnICBib3JkZXItd2lkdGg6IDJweDsnICtcbiAgICAgICAgICAgICcgIGJvcmRlci1zdHlsZTogc29saWQ7JyArXG4gICAgICAgICAgICAnfScgK1xuICAgICAgICAgICAgJy53Yy1ub2RlIHsnICtcbiAgICAgICAgICAgICcgIGRpc3BsYXk6IGlubGluZS1ibG9jazsnICtcbiAgICAgICAgICAgICcgIHRleHQtYWxpZ246IGNlbnRlcjsnICtcbiAgICAgICAgICAgICcgIHdpZHRoOiBjYWxjKHZhcigtLWh0ZXJtLWNoYXJzaXplLXdpZHRoKSAqIDIpOycgK1xuICAgICAgICAgICAgJyAgbGluZS1oZWlnaHQ6IHZhcigtLWh0ZXJtLWNoYXJzaXplLWhlaWdodCk7JyArXG4gICAgICAgICAgICAnfScgK1xuICAgICAgICAgICAgJzpyb290IHsnICtcbiAgICAgICAgICAgICcgIC0taHRlcm0tY2hhcnNpemUtd2lkdGg6ICcgK1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxQb3J0Xy5jaGFyYWN0ZXJTaXplLndpZHRoICtcbiAgICAgICAgICAgICdweDsnICtcbiAgICAgICAgICAgICcgIC0taHRlcm0tY2hhcnNpemUtaGVpZ2h0OiAnICtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsUG9ydF8uY2hhcmFjdGVyU2l6ZS5oZWlnaHQgK1xuICAgICAgICAgICAgJ3B4OycgK1xuICAgICAgICAgICAgLy8gRGVmYXVsdCBwb3NpdGlvbiBoaWRlcyB0aGUgY3Vyc29yIGZvciB3aGVuIHRoZSB3aW5kb3cgaXMgaW5pdGlhbGl6aW5nLlxuICAgICAgICAgICAgJyAgLS1odGVybS1jdXJzb3Itb2Zmc2V0LWNvbDogLTE7JyArXG4gICAgICAgICAgICAnICAtLWh0ZXJtLWN1cnNvci1vZmZzZXQtcm93OiAtMTsnICtcbiAgICAgICAgICAgICcgIC0taHRlcm0tYmxpbmstbm9kZS1kdXJhdGlvbjogMC43czsnICtcbiAgICAgICAgICAgICcgIC0taHRlcm0tbW91c2UtY3Vyc29yLXRleHQ6IHRleHQ7JyArXG4gICAgICAgICAgICAnICAtLWh0ZXJtLW1vdXNlLWN1cnNvci1wb2ludGVyOiBkZWZhdWx0OycgK1xuICAgICAgICAgICAgJyAgLS1odGVybS1tb3VzZS1jdXJzb3Itc3R5bGU6IHZhcigtLWh0ZXJtLW1vdXNlLWN1cnNvci10ZXh0KTsnICtcbiAgICAgICAgICAgICd9JyArXG4gICAgICAgICAgICAnLnVyaS1ub2RlOmhvdmVyIHsnICtcbiAgICAgICAgICAgICcgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOycgK1xuICAgICAgICAgICAgJyAgY3Vyc29yOiBwb2ludGVyOycgK1xuICAgICAgICAgICAgJ30nICtcbiAgICAgICAgICAgICdAa2V5ZnJhbWVzIGJsaW5rIHsnICtcbiAgICAgICAgICAgICcgIGZyb20geyBvcGFjaXR5OiAxLjA7IH0nICtcbiAgICAgICAgICAgICcgIHRvIHsgb3BhY2l0eTogMC4wOyB9JyArXG4gICAgICAgICAgICAnfScgK1xuICAgICAgICAgICAgJy5ibGluay1ub2RlIHsnICtcbiAgICAgICAgICAgICcgIGFuaW1hdGlvbi1uYW1lOiBibGluazsnICtcbiAgICAgICAgICAgICcgIGFuaW1hdGlvbi1kdXJhdGlvbjogdmFyKC0taHRlcm0tYmxpbmstbm9kZS1kdXJhdGlvbik7JyArXG4gICAgICAgICAgICAnICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTsnICtcbiAgICAgICAgICAgICcgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0OycgK1xuICAgICAgICAgICAgJyAgYW5pbWF0aW9uLWRpcmVjdGlvbjogYWx0ZXJuYXRlOycgK1xuICAgICAgICAgICAgJ30nO1xuICAgIHRoaXMuZG9jdW1lbnRfLmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIHRoaXMuY3Vyc29yT3ZlcmxheU5vZGVfID0gdGhpcy5kb2N1bWVudF8uY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5jdXJzb3JPdmVybGF5Tm9kZV8uaWQgPSAnaHRlcm06dGVybWluYWwtb3ZlcmxheS1jdXJzb3InO1xuICAgIHRoaXMuY3Vyc29yT3ZlcmxheU5vZGVfLnN0eWxlLmNzc1RleHQgPVxuICAgICAgICAncG9zaXRpb246IGFic29sdXRlOycgK1xuICAgICAgICAgICAgJ2xlZnQ6IDA7JyArXG4gICAgICAgICAgICAndG9wOiAwOycgK1xuICAgICAgICAgICAgJ2JvdHRvbTogMDsnICtcbiAgICAgICAgICAgICdyaWdodDogMDsnICtcbiAgICAgICAgICAgICdwb2ludGVyLWV2ZW50czogbm9uZTsnO1xuICAgIHRoaXMuZG9jdW1lbnRfLmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5jdXJzb3JPdmVybGF5Tm9kZV8pO1xuICAgIHRoaXMuY3Vyc29yTm9kZV8gPSB0aGlzLmRvY3VtZW50Xy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmN1cnNvck5vZGVfLmlkID0gJ2h0ZXJtOnRlcm1pbmFsLWN1cnNvcic7XG4gICAgdGhpcy5jdXJzb3JOb2RlXy5jbGFzc05hbWUgPSAnY3Vyc29yLW5vZGUnO1xuICAgIHRoaXMuY3Vyc29yTm9kZV8uc3R5bGUuY3NzVGV4dCA9XG4gICAgICAgICdwb3NpdGlvbjogYWJzb2x1dGU7JyArXG4gICAgICAgICAgICAvLydsZWZ0OiBjYWxjKHZhcigtLWh0ZXJtLWNoYXJzaXplLXdpZHRoKSAqIHZhcigtLWh0ZXJtLWN1cnNvci1vZmZzZXQtY29sKSk7JyArXG4gICAgICAgICAgICAvLyd0b3A6IGNhbGModmFyKC0taHRlcm0tY2hhcnNpemUtaGVpZ2h0KSAqIHZhcigtLWh0ZXJtLWN1cnNvci1vZmZzZXQtcm93KSk7JyArXG4gICAgICAgICAgICAnZGlzcGxheTogJyArXG4gICAgICAgICAgICAodGhpcy5vcHRpb25zXy5jdXJzb3JWaXNpYmxlID8gJycgOiAnbm9uZScpICtcbiAgICAgICAgICAgICc7JyArXG4gICAgICAgICAgICAnd2lkdGg6IHZhcigtLWh0ZXJtLWNoYXJzaXplLXdpZHRoKTsnICtcbiAgICAgICAgICAgICdoZWlnaHQ6IHZhcigtLWh0ZXJtLWNoYXJzaXplLWhlaWdodCk7JyArXG4gICAgICAgICAgICAnYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taHRlcm0tY3Vyc29yLWNvbG9yKTsnICtcbiAgICAgICAgICAgICdib3JkZXItY29sb3I6IHZhcigtLWh0ZXJtLWN1cnNvci1jb2xvcik7JyArXG4gICAgICAgICAgICAnICBpc29sYXRhdGlvbjogaXNvbGF0ZTsnICtcbiAgICAgICAgICAgICcgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoY2FsYyh2YXIoLS1odGVybS1jaGFyc2l6ZS13aWR0aCkgKiB2YXIoLS1odGVybS1jdXJzb3Itb2Zmc2V0LWNvbCkpLCBjYWxjKHZhcigtLWh0ZXJtLWNoYXJzaXplLWhlaWdodCkgKiB2YXIoLS1odGVybS1jdXJzb3Itb2Zmc2V0LXJvdykpLCAwKTsnICtcbiAgICAgICAgICAgICctd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHksIGJhY2tncm91bmQtY29sb3IgMTAwbXMgbGluZWFyOycgK1xuICAgICAgICAgICAgJy1tb3otdHJhbnNpdGlvbjogb3BhY2l0eSwgYmFja2dyb3VuZC1jb2xvciAxMDBtcyBsaW5lYXI7JztcbiAgICB0aGlzLnNldEN1cnNvckNvbG9yKCk7XG4gICAgdGhpcy5zZXRDdXJzb3JCbGluayghIXRoaXMucHJlZnNfLmdldCgnY3Vyc29yLWJsaW5rJykpO1xuICAgIHRoaXMucmVzdHlsZUN1cnNvcl8oKTtcbiAgICB0aGlzLmN1cnNvck92ZXJsYXlOb2RlXy5hcHBlbmRDaGlsZCh0aGlzLmN1cnNvck5vZGVfKTtcbiAgICB0aGlzLmltZV8gPSB0aGlzLmRvY3VtZW50Xy5jcmVhdGVFbGVtZW50KCdpbWUnKTtcbiAgICB0aGlzLmN1cnNvck92ZXJsYXlOb2RlXy5hcHBlbmRDaGlsZCh0aGlzLmltZV8pO1xuICAgIC8vIFdoZW4gJ2VuYWJsZU1vdXNlRHJhZ1Njcm9sbCcgaXMgb2ZmIHdlIHJlcG9zaXRpb24gdGhpcyBlbGVtZW50IGRpcmVjdGx5XG4gICAgLy8gdW5kZXIgdGhlIG1vdXNlIGN1cnNvciBhZnRlciBhIGNsaWNrLiAgVGhpcyBtYWtlcyBDaHJvbWUgYXNzb2NpYXRlXG4gICAgLy8gc3Vic2VxdWVudCBtb3VzZW1vdmUgZXZlbnRzIHdpdGggdGhlIHNjcm9sbC1ibG9ja2VyLiAgU2luY2UgdGhlXG4gICAgLy8gc2Nyb2xsLWJsb2NrZXIgaXMgYSBwZWVyIChub3QgYSBjaGlsZCkgb2YgdGhlIHNjcm9sbHBvcnQsIHRoZSBtb3VzZW1vdmVcbiAgICAvLyBldmVudHMgZG8gbm90IGNhdXNlIHRoZSBzY3JvbGxwb3J0IHRvIHNjcm9sbC5cbiAgICAvL1xuICAgIC8vIEl0J3MgYSBoYWNrLCBidXQgaXQncyB0aGUgY2xlYW5lc3Qgd2F5IEkgY291bGQgZmluZC5cbiAgICB0aGlzLnNjcm9sbEJsb2NrZXJOb2RlXyA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMuc2Nyb2xsQmxvY2tlck5vZGVfLmlkID0gJ2h0ZXJtOm1vdXNlLWRyYWctc2Nyb2xsLWJsb2NrZXInO1xuICAgIHRoaXMuc2Nyb2xsQmxvY2tlck5vZGVfLnN0eWxlLmNzc1RleHQgPVxuICAgICAgICAncG9zaXRpb246IGFic29sdXRlOycgK1xuICAgICAgICAgICAgJ3RvcDogLTk5cHg7JyArXG4gICAgICAgICAgICAnZGlzcGxheTogYmxvY2s7JyArXG4gICAgICAgICAgICAnd2lkdGg6IDEwcHg7JyArXG4gICAgICAgICAgICAnaGVpZ2h0OiAxMHB4Oyc7XG4gICAgdGhpcy5kb2N1bWVudF8uYm9keS5hcHBlbmRDaGlsZCh0aGlzLnNjcm9sbEJsb2NrZXJOb2RlXyk7XG4gICAgdGhpcy5zY3JvbGxQb3J0Xy5vblNjcm9sbFdoZWVsID0gb25Nb3VzZTtcbiAgICBbJ21vdXNlZG93bicsICdtb3VzZXVwJywgJ21vdXNlbW92ZScsICdjbGljaycsICdkYmxjbGljayddLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICB0aGlzLnNjcm9sbEJsb2NrZXJOb2RlXy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbk1vdXNlKTtcbiAgICAgICAgdGhpcy5jdXJzb3JOb2RlXy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvbk1vdXNlKTtcbiAgICAgICAgdGhpcy5kb2N1bWVudF8uYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25Nb3VzZSk7XG4gICAgfSk7XG4gICAgdGhpcy5jdXJzb3JOb2RlXy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5mb2N1cy5iaW5kKHRoaXMpKTtcbiAgICB9KTtcbiAgICB0aGlzLnNldFJldmVyc2VWaWRlbyhmYWxzZSk7XG4gICAgdGhpcy5zY3JvbGxQb3J0Xy5mb2N1cygpO1xuICAgIHRoaXMuc2Nyb2xsUG9ydF8uc2NoZWR1bGVSZWRyYXcoKTtcbiAgICB0aGlzLnByb21wdCA9IG5ldyBQcm9tcHQodGhpcyk7XG59O1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnN5bmNDdXJzb3JQb3NpdGlvbl8gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRvcFJvd0luZGV4ID0gdGhpcy5zY3JvbGxQb3J0Xy5nZXRUb3BSb3dJbmRleCgpO1xuICAgIHZhciBib3R0b21Sb3dJbmRleCA9IHRoaXMuc2Nyb2xsUG9ydF8uZ2V0Qm90dG9tUm93SW5kZXgodG9wUm93SW5kZXgpO1xuICAgIHZhciBjdXJzb3JSb3dJbmRleCA9IHRoaXMuc2Nyb2xsYmFja1Jvd3NfLmxlbmd0aCArIHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5yb3c7XG4gICAgbGV0IGZvcmNlU3luY1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmFjY2Vzc2liaWxpdHlSZWFkZXJfLmFjY2Vzc2liaWxpdHlFbmFibGVkKSB7XG4gICAgICAgIC8vIFJlcG9ydCB0aGUgbmV3IHBvc2l0aW9uIG9mIHRoZSBjdXJzb3IgZm9yIGFjY2Vzc2liaWxpdHkgcHVycG9zZXMuXG4gICAgICAgIGNvbnN0IGN1cnNvckNvbHVtbkluZGV4ID0gdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLmNvbHVtbjtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmdldFJvd05vZGUodGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLnJvdyk7XG4gICAgICAgIGNvbnN0IGN1cnNvckxpbmVUZXh0ID0gcm93VGV4dChub2RlKTtcbiAgICAgICAgLy8gVGhpcyB3aWxsIGZvcmNlIHRoZSBzZWxlY3Rpb24gdG8gYmUgc3luYydkIHRvIHRoZSBjdXJzb3IgcG9zaXRpb24gaWYgdGhlXG4gICAgICAgIC8vIHVzZXIgaGFzIHByZXNzZWQgYSBrZXkuIEdlbmVyYWxseSB3ZSB3b3VsZCBvbmx5IHN5bmMgdGhlIGN1cnNvciBwb3NpdGlvblxuICAgICAgICAvLyB3aGVuIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQgc28gdGhhdCBpZiB0aGUgdXNlciBoYXMgc2VsZWN0ZWQgc29tZXRoaW5nXG4gICAgICAgIC8vIHdlIGRvbid0IGNsZWFyIHRoZSBzZWxlY3Rpb24gYnkgbW92aW5nIHRoZSBzZWxlY3Rpb24uIEhvd2V2ZXIgd2hlbiBhXG4gICAgICAgIC8vIHNjcmVlbiByZWFkZXIgaXMgdXNlZCwgaXQncyBpbnR1aXRpdmUgZm9yIGVudGVyaW5nIGEga2V5IHRvIG1vdmUgdGhlXG4gICAgICAgIC8vIHNlbGVjdGlvbiB0byB0aGUgY3Vyc29yLlxuICAgICAgICBmb3JjZVN5bmNTZWxlY3Rpb24gPSB0aGlzLmFjY2Vzc2liaWxpdHlSZWFkZXJfLmhhc1VzZXJHZXN0dXJlO1xuICAgICAgICB0aGlzLmFjY2Vzc2liaWxpdHlSZWFkZXJfLmFmdGVyQ3Vyc29yQ2hhbmdlKGN1cnNvckxpbmVUZXh0LCBjdXJzb3JSb3dJbmRleCwgY3Vyc29yQ29sdW1uSW5kZXgpO1xuICAgIH1cbiAgICBpZiAoY3Vyc29yUm93SW5kZXggPiBib3R0b21Sb3dJbmRleCkge1xuICAgICAgICAvLyBDdXJzb3IgaXMgc2Nyb2xsZWQgb2ZmIHNjcmVlbiwgbW92ZSBpdCBvdXRzaWRlIG9mIHRoZSB2aXNpYmxlIGFyZWEuXG4gICAgICAgIC8vdGhpcy5zZXRDc3NDdXJzb3JQb3MoeyByb3c6IC0xLCBjb2w6IHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5jb2x1bW4gfSk7XG4gICAgICAgIHRoaXMuc2V0Q3NzQ3Vyc29yUG9zKHsgcm93OiAtMSwgY29sOiAtMSB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zXy5jdXJzb3JWaXNpYmxlICYmIHRoaXMuY3Vyc29yTm9kZV8uc3R5bGUuZGlzcGxheSA9PSAnbm9uZScpIHtcbiAgICAgICAgLy8gUmUtZGlzcGxheSB0aGUgdGVybWluYWwgY3Vyc29yIGlmIGl0IHdhcyBoaWRkZW4gYnkgdGhlIG1vdXNlIGN1cnNvci5cbiAgICAgICAgdGhpcy5jdXJzb3JOb2RlXy5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuICAgIHRoaXMuc2V0Q3NzQ3Vyc29yUG9zKHtcbiAgICAgICAgcm93OiBjdXJzb3JSb3dJbmRleCAtIHRvcFJvd0luZGV4ICsgdGhpcy5zY3JvbGxQb3J0Xy52aXNpYmxlUm93VG9wTWFyZ2luLFxuICAgICAgICBjb2w6IHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5jb2x1bW4sXG4gICAgfSk7XG4gICAgLy8gVXBkYXRlIHRoZSBjYXJldCBmb3IgYTExeSBwdXJwb3Nlcy5cbiAgICB2YXIgc2VsZWN0aW9uID0gdGhpcy5kb2N1bWVudF8uZ2V0U2VsZWN0aW9uKCk7XG4gICAgaWYgKHNlbGVjdGlvbiAmJiAoc2VsZWN0aW9uLmlzQ29sbGFwc2VkIHx8IGZvcmNlU3luY1NlbGVjdGlvbikpXG4gICAgICAgIHRoaXMuc2NyZWVuXy5zeW5jU2VsZWN0aW9uQ2FyZXQoc2VsZWN0aW9uKTtcbn07XG52YXIgX19wcmV2Q3Vyc29yUG9zID0geyByb3c6IC0xLCBjb2w6IC0xIH07XG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2V0Q3NzQ3Vyc29yUG9zID0gZnVuY3Rpb24gKHBvcykge1xuICAgIGlmIChfX3ByZXZDdXJzb3JQb3Mucm93ID09PSBwb3Mucm93ICYmIF9fcHJldkN1cnNvclBvcy5jb2wgPT09IHBvcy5jb2wpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoX19wcmV2Q3Vyc29yUG9zLnJvdyA9PT0gLTEgJiYgcG9zLnJvdyA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoX19wcmV2Q3Vyc29yUG9zLnJvdyAhPT0gcG9zLnJvdykge1xuICAgICAgICB0aGlzLnNldEN1cnNvckNzc1ZhcignY3Vyc29yLW9mZnNldC1yb3cnLCBwb3Mucm93ICsgJycpO1xuICAgIH1cbiAgICBpZiAoX19wcmV2Q3Vyc29yUG9zLmNvbCAhPT0gcG9zLmNvbCkge1xuICAgICAgICB0aGlzLnNldEN1cnNvckNzc1ZhcignY3Vyc29yLW9mZnNldC1jb2wnLCBwb3MuY29sICsgJycpO1xuICAgIH1cbiAgICB0aGlzLmJsaW5rQ3Vyc29yUG9zID0gcG9zO1xuICAgIF9fcHJldkN1cnNvclBvcyA9IHBvcztcbn07XG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2V0Q3Vyc29yQ3NzVmFyID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBcbi8vIEB0cy1pZ25vcmVcbm9wdF9wcmVmaXggPSAnLS1odGVybS0nKSB7XG4gICAgdGhpcy5jdXJzb3JPdmVybGF5Tm9kZV8uc3R5bGUuc2V0UHJvcGVydHkoYCR7b3B0X3ByZWZpeH0ke25hbWV9YCwgdmFsdWUpO1xufTtcbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5zY2hlZHVsZVN5bmNDdXJzb3JQb3NpdGlvbl8gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudGltZW91dHNfLnN5bmNDdXJzb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy50aW1lb3V0c18uc3luY0N1cnNvciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5zeW5jQ3Vyc29yUG9zaXRpb25fKCk7XG4gICAgICAgICAgICBzZWxmLnRpbWVvdXRzXy5zeW5jQ3Vyc29yID0gMDtcbiAgICAgICAgfSk7XG4gICAgfSwgMCk7XG59O1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNjaGVkdWxlUmVkcmF3XyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0c18ucmVkcmF3KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMudGltZW91dHNfLnJlZHJhdyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnRpbWVvdXRzXy5yZWRyYXcgPSAwO1xuICAgICAgICBzZWxmLnNjcm9sbFBvcnRfLnJlZHJhd18oKTtcbiAgICB9LCAwKTtcbn07XG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuc2NoZWR1bGVTY3JvbGxEb3duXyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0c18uc2Nyb2xsRG93bikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLnRpbWVvdXRzXy5zY3JvbGxEb3duID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYudGltZW91dHNfLnNjcm9sbERvd24gPSAwO1xuICAgICAgICBzZWxmLnNjcm9sbFBvcnRfLnNjcm9sbFRvQm90dG9tKCk7XG4gICAgfSwgMjApO1xufTtcbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5yZW51bWJlclJvd3NfID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIG9wdF9zY3JlZW4pIHtcbiAgICB2YXIgc2NyZWVuID0gb3B0X3NjcmVlbiB8fCB0aGlzLnNjcmVlbl87XG4gICAgdmFyIG9mZnNldCA9IHRoaXMuc2Nyb2xsYmFja1Jvd3NfLmxlbmd0aDtcbiAgICB2YXIgcm93cyA9IHNjcmVlbi5yb3dzQXJyYXk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgdmFyIHJvdyA9IHJvd3NbaV07XG4gICAgICAgIHJvdy5uID0gb2Zmc2V0ICsgaTtcbiAgICAgICAgdG91Y2gocm93KTtcbiAgICB9XG59O1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmFwcGVuZFJvd3NfID0gZnVuY3Rpb24gKGNvdW50KSB7XG4gICAgdmFyIG5lZWRTY3JvbGxTeW5jID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuc2Nyb2xsYmFja1Jvd3NfLmxlbmd0aCA+IDYwMDApIHtcbiAgICAgICAgdGhpcy5zY3JvbGxiYWNrUm93c18uc3BsaWNlKDAsIDIwMDApO1xuICAgICAgICBuZWVkU2Nyb2xsU3luYyA9IHRydWU7XG4gICAgfVxuICAgIHZhciBjdXJzb3JSb3cgPSB0aGlzLnNjcmVlbl8ucm93c0FycmF5Lmxlbmd0aDtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5zY3JvbGxiYWNrUm93c18ubGVuZ3RoICsgY3Vyc29yUm93O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICB2YXIgcm93ID0ge1xuICAgICAgICAgICAga2V5OiBnZW5LZXkoKSxcbiAgICAgICAgICAgIG46IG9mZnNldCArIGksXG4gICAgICAgICAgICBvOiBmYWxzZSxcbiAgICAgICAgICAgIHY6IDAsXG4gICAgICAgICAgICBub2RlczogW2NyZWF0ZURlZmF1bHROb2RlKCcnLCAwKV0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2NyZWVuXy5zZXRSb3cocm93LCBjdXJzb3JSb3cgKyBpKTtcbiAgICB9XG4gICAgdmFyIGV4dHJhUm93cyA9IHRoaXMuc2NyZWVuXy5yb3dzQXJyYXkubGVuZ3RoIC0gdGhpcy5zY3JlZW5TaXplLmhlaWdodDtcbiAgICBpZiAoZXh0cmFSb3dzID4gMCkge1xuICAgICAgICB2YXIgYXJ5ID0gdGhpcy5zY3JlZW5fLnNoaWZ0Um93cyhleHRyYVJvd3MpO1xuICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLnNjcm9sbGJhY2tSb3dzXywgYXJ5KTtcbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsUG9ydF8uaXNTY3JvbGxlZEVuZClcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVTY3JvbGxEb3duXygpO1xuICAgIH1cbiAgICBpZiAobmVlZFNjcm9sbFN5bmMpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxQb3J0Xy5zeW5jU2Nyb2xsSGVpZ2h0KCk7XG4gICAgICAgIC8vaWYgKHRoaXMuc2Nyb2xsUG9ydF8uaXNTY3JvbGxlZEVuZCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlU2Nyb2xsRG93bl8oKTtcbiAgICAgICAgLy99XG4gICAgfVxuICAgIGlmIChjdXJzb3JSb3cgPj0gdGhpcy5zY3JlZW5fLnJvd3NBcnJheS5sZW5ndGgpXG4gICAgICAgIGN1cnNvclJvdyA9IHRoaXMuc2NyZWVuXy5yb3dzQXJyYXkubGVuZ3RoIC0gMTtcbiAgICB0aGlzLnNldEFic29sdXRlQ3Vyc29yUG9zaXRpb24oY3Vyc29yUm93LCAwKTtcbn07XG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUubW92ZVJvd3NfID0gZnVuY3Rpb24gKGZyb21JbmRleCwgY291bnQsIHRvSW5kZXgpIHtcbiAgICB2YXIgYXJ5ID0gdGhpcy5zY3JlZW5fLnJlbW92ZVJvd3MoZnJvbUluZGV4LCBjb3VudCk7XG4gICAgdGhpcy5zY3JlZW5fLmluc2VydFJvd3ModG9JbmRleCwgYXJ5KTtcbiAgICB2YXIgc3RhcnQsIGVuZDtcbiAgICBpZiAoZnJvbUluZGV4IDwgdG9JbmRleCkge1xuICAgICAgICBzdGFydCA9IGZyb21JbmRleDtcbiAgICAgICAgZW5kID0gdG9JbmRleCArIGNvdW50O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSB0b0luZGV4O1xuICAgICAgICBlbmQgPSBmcm9tSW5kZXggKyBjb3VudDtcbiAgICB9XG4gICAgdGhpcy5yZW51bWJlclJvd3NfKHN0YXJ0LCBlbmQpO1xuICAgIHRoaXMuc2Nyb2xsUG9ydF8uc2NoZWR1bGVJbnZhbGlkYXRlKCk7XG59O1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmVyYXNlVG9MZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXJzb3IgPSB0aGlzLnNhdmVDdXJzb3IoKTtcbiAgICB0aGlzLnNldEN1cnNvckNvbHVtbigwKTtcbiAgICBjb25zdCBjb3VudCA9IGN1cnNvci5jb2x1bW4gKyAxO1xuICAgIHRoaXMuc2NyZWVuXy5vdmVyd3JpdGVTdHJpbmcobGliLmYuZ2V0V2hpdGVzcGFjZShjb3VudCksIGNvdW50KTtcbiAgICB0aGlzLnNjcm9sbFBvcnRfLnJlbmRlclJlZi50b3VjaFJvdyh0aGlzLnNjcmVlbl8uY3Vyc29yUm93KCkpO1xuICAgIHRoaXMucmVzdG9yZUN1cnNvcihjdXJzb3IpO1xufTtcbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5lcmFzZVRvUmlnaHQgPSBmdW5jdGlvbiAob3B0X2NvdW50KSB7XG4gICAgaWYgKHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5vdmVyZmxvdykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBtYXhDb3VudCA9IHRoaXMuc2NyZWVuU2l6ZS53aWR0aCAtIHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5jb2x1bW47XG4gICAgdmFyIGNvdW50ID0gb3B0X2NvdW50ID8gTWF0aC5taW4ob3B0X2NvdW50LCBtYXhDb3VudCkgOiBtYXhDb3VudDtcbiAgICB2YXIgY3Vyc29yUm93ID0gdGhpcy5zY3JlZW5fLnJvd3NBcnJheVt0aGlzLnNjcmVlbl8uY3Vyc29yUG9zaXRpb24ucm93XTtcbiAgICBpZiAodGhpcy5zY3JlZW5fLnRleHRBdHRyaWJ1dGVzLmJhY2tncm91bmQgPT09XG4gICAgICAgIHRoaXMuc2NyZWVuXy50ZXh0QXR0cmlidXRlcy5ERUZBVUxUX0NPTE9SKSB7XG4gICAgICAgIGlmIChyb3dXaWR0aChjdXJzb3JSb3cpIDw9IHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5jb2x1bW4gKyBjb3VudCkge1xuICAgICAgICAgICAgdGhpcy5zY3JlZW5fLmRlbGV0ZUNoYXJzKGNvdW50KTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDdXJzb3JPdmVyZmxvdygpO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxQb3J0Xy5yZW5kZXJSZWYudG91Y2hSb3coY3Vyc29yUm93KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgY3Vyc29yID0gdGhpcy5zYXZlQ3Vyc29yKCk7XG4gICAgdGhpcy5zY3JlZW5fLm92ZXJ3cml0ZVN0cmluZyhsaWIuZi5nZXRXaGl0ZXNwYWNlKGNvdW50KSwgY291bnQpO1xuICAgIHRoaXMuc2Nyb2xsUG9ydF8ucmVuZGVyUmVmLnRvdWNoUm93KGN1cnNvclJvdyk7XG4gICAgdGhpcy5yZXN0b3JlQ3Vyc29yKGN1cnNvcik7XG4gICAgdGhpcy5jbGVhckN1cnNvck92ZXJmbG93KCk7XG59O1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmluc2VydExpbmVzID0gZnVuY3Rpb24gKGNvdW50KSB7XG4gICAgdmFyIGN1cnNvclJvdyA9IHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5yb3c7XG4gICAgdmFyIGJvdHRvbSA9IHRoaXMuZ2V0VlRTY3JvbGxCb3R0b20oKTtcbiAgICBjb3VudCA9IE1hdGgubWluKGNvdW50LCBib3R0b20gLSBjdXJzb3JSb3cpO1xuICAgIC8vIFRoZSBtb3ZlQ291bnQgaXMgdGhlIG51bWJlciBvZiByb3dzIHdlIG5lZWQgdG8gcmVsb2NhdGUgdG8gbWFrZSByb29tIGZvclxuICAgIC8vIHRoZSBuZXcgcm93KHMpLiAgVGhlIGNvdW50IGlzIHRoZSBkaXN0YW5jZSB0byBtb3ZlIHRoZW0uXG4gICAgdmFyIG1vdmVDb3VudCA9IGJvdHRvbSAtIGN1cnNvclJvdyAtIGNvdW50ICsgMTtcbiAgICBpZiAobW92ZUNvdW50KSB7XG4gICAgICAgIHRoaXMubW92ZVJvd3NfKGN1cnNvclJvdywgbW92ZUNvdW50LCBjdXJzb3JSb3cgKyBjb3VudCk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSBjb3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMuc2V0QWJzb2x1dGVDdXJzb3JQb3NpdGlvbihjdXJzb3JSb3cgKyBpLCAwKTtcbiAgICAgICAgdGhpcy5zY3JlZW5fLmNsZWFyQ3Vyc29yUm93KCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsUG9ydF8ucmVuZGVyUmVmLnRvdWNoUm93KHRoaXMuc2NyZWVuXy5jdXJzb3JSb3coKSk7XG4gICAgfVxufTtcbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5kZWxldGVMaW5lcyA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgIHZhciBjdXJzb3IgPSB0aGlzLnNhdmVDdXJzb3IoKTtcbiAgICB2YXIgdG9wID0gY3Vyc29yLnJvdztcbiAgICB2YXIgYm90dG9tID0gdGhpcy5nZXRWVFNjcm9sbEJvdHRvbSgpO1xuICAgIHZhciBtYXhDb3VudCA9IGJvdHRvbSAtIHRvcCArIDE7XG4gICAgY291bnQgPSBNYXRoLm1pbihjb3VudCwgbWF4Q291bnQpO1xuICAgIHZhciBtb3ZlU3RhcnQgPSBib3R0b20gLSBjb3VudCArIDE7XG4gICAgaWYgKGNvdW50ICE9IG1heENvdW50KVxuICAgICAgICB0aGlzLm1vdmVSb3dzXyh0b3AsIGNvdW50LCBtb3ZlU3RhcnQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICB0aGlzLnNldEFic29sdXRlQ3Vyc29yUG9zaXRpb24obW92ZVN0YXJ0ICsgaSwgMCk7XG4gICAgICAgIHRoaXMuc2NyZWVuXy5jbGVhckN1cnNvclJvdygpO1xuICAgICAgICB2YXIgY3Vyc29yUm93ID0gdGhpcy5zY3JlZW5fLmN1cnNvclJvdygpO1xuICAgICAgICB0aGlzLnNjcm9sbFBvcnRfLnJlbmRlclJlZi50b3VjaFJvdyhjdXJzb3JSb3cpO1xuICAgIH1cbiAgICB0aGlzLnJlc3RvcmVDdXJzb3IoY3Vyc29yKTtcbiAgICB0aGlzLmNsZWFyQ3Vyc29yT3ZlcmZsb3coKTtcbn07XG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuaW5zZXJ0U3BhY2UgPSBmdW5jdGlvbiAoY291bnQpIHtcbiAgICB2YXIgY3Vyc29yID0gdGhpcy5zYXZlQ3Vyc29yKCk7XG4gICAgdmFyIHdzID0gbGliLmYuZ2V0V2hpdGVzcGFjZShjb3VudCB8fCAxKTtcbiAgICB0aGlzLnNjcmVlbl8uaW5zZXJ0U3RyaW5nKHdzLCB3cy5sZW5ndGgpO1xuICAgIHRoaXMuc2NyZWVuXy5tYXliZUNsaXBDdXJyZW50Um93KCk7XG4gICAgdmFyIGN1cnNvclJvdyA9IHRoaXMuc2NyZWVuXy5jdXJzb3JSb3coKTtcbiAgICB0aGlzLnNjcm9sbFBvcnRfLnJlbmRlclJlZi50b3VjaFJvdyhjdXJzb3JSb3cpO1xuICAgIHRoaXMucmVzdG9yZUN1cnNvcihjdXJzb3IpO1xuICAgIHRoaXMuY2xlYXJDdXJzb3JPdmVyZmxvdygpO1xufTtcbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5kZWxldGVDaGFycyA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgIHZhciBkZWxldGVkID0gdGhpcy5zY3JlZW5fLmRlbGV0ZUNoYXJzKGNvdW50KTtcbiAgICBpZiAoZGVsZXRlZCAmJiAhdGhpcy5zY3JlZW5fLnRleHRBdHRyaWJ1dGVzLmlzRGVmYXVsdCgpKSB7XG4gICAgICAgIHZhciBjdXJzb3IgPSB0aGlzLnNhdmVDdXJzb3IoKTtcbiAgICAgICAgdGhpcy5zZXRDdXJzb3JDb2x1bW4odGhpcy5zY3JlZW5TaXplLndpZHRoIC0gZGVsZXRlZCk7XG4gICAgICAgIHRoaXMuc2NyZWVuXy5pbnNlcnRTdHJpbmcobGliLmYuZ2V0V2hpdGVzcGFjZShkZWxldGVkKSwgZGVsZXRlZCk7XG4gICAgICAgIHRoaXMucmVzdG9yZUN1cnNvcihjdXJzb3IpO1xuICAgIH1cbiAgICB2YXIgY3Vyc29yUm93ID0gdGhpcy5zY3JlZW5fLmN1cnNvclJvdygpO1xuICAgIHRoaXMuc2Nyb2xsUG9ydF8ucmVuZGVyUmVmLnRvdWNoUm93KGN1cnNvclJvdyk7XG4gICAgdGhpcy5jbGVhckN1cnNvck92ZXJmbG93KCk7XG59O1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmVyYXNlQWJvdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnNvciA9IHRoaXMuc2F2ZUN1cnNvcigpO1xuICAgIHRoaXMuZXJhc2VUb0xlZnQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1cnNvci5yb3c7IGkrKykge1xuICAgICAgICB0aGlzLnNldEFic29sdXRlQ3Vyc29yUG9zaXRpb24oaSwgMCk7XG4gICAgICAgIHRoaXMuc2NyZWVuXy5jbGVhckN1cnNvclJvdygpO1xuICAgICAgICB2YXIgY3Vyc29yUm93ID0gdGhpcy5zY3JlZW5fLmN1cnNvclJvdygpO1xuICAgICAgICB0b3VjaChjdXJzb3JSb3cpO1xuICAgICAgICB0aGlzLnNjcm9sbFBvcnRfLnJlbmRlclJlZi50b3VjaFJvdyhjdXJzb3JSb3cpO1xuICAgIH1cbiAgICB0aGlzLnJlc3RvcmVDdXJzb3IoY3Vyc29yKTtcbiAgICB0aGlzLmNsZWFyQ3Vyc29yT3ZlcmZsb3coKTtcbn07XG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuZXJhc2VMaW5lID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXJzb3IgPSB0aGlzLnNhdmVDdXJzb3IoKTtcbiAgICB0aGlzLnNjcmVlbl8uY2xlYXJDdXJzb3JSb3coKTtcbiAgICB0aGlzLnJlc3RvcmVDdXJzb3IoY3Vyc29yKTtcbiAgICB0aGlzLmNsZWFyQ3Vyc29yT3ZlcmZsb3coKTtcbiAgICB0aGlzLnNjcm9sbFBvcnRfLnJlbmRlclJlZi50b3VjaFJvdyh0aGlzLnNjcmVlbl8uY3Vyc29yUm93KCkpO1xufTtcbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gKGNoKSB7XG4gICAgdmFyIGN1cnNvciA9IHRoaXMuc2F2ZUN1cnNvcigpO1xuICAgIHRoaXMuc2V0QWJzb2x1dGVDdXJzb3JQb3NpdGlvbigwLCAwKTtcbiAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCB0aGlzLnNjcmVlblNpemUuaGVpZ2h0OyByb3crKykge1xuICAgICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLnNjcmVlblNpemUud2lkdGg7IGNvbCsrKSB7XG4gICAgICAgICAgICB0aGlzLnNldEFic29sdXRlQ3Vyc29yUG9zaXRpb24ocm93LCBjb2wpO1xuICAgICAgICAgICAgdGhpcy5zY3JlZW5fLm92ZXJ3cml0ZVN0cmluZyhjaCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZXN0b3JlQ3Vyc29yKGN1cnNvcik7XG4gICAgdGhpcy5zY3JvbGxQb3J0Xy5yZW5kZXJSZWYudG91Y2goKTtcbn07XG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuY2xlYXJIb21lID0gZnVuY3Rpb24gKG9wdF9zY3JlZW4pIHtcbiAgICB2YXIgc2NyZWVuID0gb3B0X3NjcmVlbiB8fCB0aGlzLnNjcmVlbl87XG4gICAgdmFyIGJvdHRvbSA9IHNjcmVlbi5nZXRIZWlnaHQoKTtcbiAgICBpZiAoYm90dG9tID09PSAwKSB7XG4gICAgICAgIC8vIEVtcHR5IHNjcmVlbiwgbm90aGluZyB0byBkby5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdHRvbTsgaSsrKSB7XG4gICAgICAgIHNjcmVlbi5zZXRDdXJzb3JQb3NpdGlvbihpLCAwKTtcbiAgICAgICAgc2NyZWVuLmNsZWFyQ3Vyc29yUm93KCk7XG4gICAgICAgIHZhciBjdXJzb3JSb3cgPSB0aGlzLnNjcmVlbl8uY3Vyc29yUm93KCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsUG9ydF8ucmVuZGVyUmVmLnRvdWNoUm93KGN1cnNvclJvdyk7XG4gICAgfVxuICAgIHNjcmVlbi5zZXRDdXJzb3JQb3NpdGlvbigwLCAwKTtcbn07XG5odGVybS5UZXJtaW5hbC5wcm90b3R5cGUuZXJhc2VCZWxvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3Vyc29yID0gdGhpcy5zYXZlQ3Vyc29yKCk7XG4gICAgdGhpcy5lcmFzZVRvUmlnaHQoKTtcbiAgICB2YXIgYm90dG9tID0gdGhpcy5zY3JlZW5TaXplLmhlaWdodCAtIDE7XG4gICAgZm9yICh2YXIgaSA9IGN1cnNvci5yb3cgKyAxOyBpIDw9IGJvdHRvbTsgaSsrKSB7XG4gICAgICAgIHRoaXMuc2V0QWJzb2x1dGVDdXJzb3JQb3NpdGlvbihpLCAwKTtcbiAgICAgICAgdGhpcy5zY3JlZW5fLmNsZWFyQ3Vyc29yUm93KCk7XG4gICAgICAgIHZhciBjdXJzb3JSb3cgPSB0aGlzLnNjcmVlbl8uY3Vyc29yUm93KCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsUG9ydF8ucmVuZGVyUmVmLnRvdWNoUm93KGN1cnNvclJvdyk7XG4gICAgfVxuICAgIHRoaXMucmVzdG9yZUN1cnNvcihjdXJzb3IpO1xuICAgIHRoaXMuY2xlYXJDdXJzb3JPdmVyZmxvdygpO1xufTtcbmZ1bmN0aW9uIGRlYnVnUHJpbnQoc2NyZWVuLCBzdHIpIHtcbiAgICB2YXIgbG9jID0gW3NjcmVlbi5jdXJzb3JQb3NpdGlvbi5yb3csIHNjcmVlbi5jdXJzb3JQb3NpdGlvbi5jb2x1bW5dO1xuICAgIHZhciBhdHRycyA9IHNjcmVlbi50ZXh0QXR0cmlidXRlcztcbiAgICBjb25zb2xlLmxvZyhgcHJpbnQoWyR7bG9jWzBdfSwgJHtsb2NbMV19XSwgJHtKU09OLnN0cmluZ2lmeShzdHIpfSwgJHtKU09OLnN0cmluZ2lmeShhdHRycyl9KWApO1xufVxuLy8gQHRzLWlnbm9yZVxuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnByaW50ID0gZnVuY3Rpb24gKHN0ciwgYW5ub3VuY2UgPSB0cnVlKSB7XG4gICAgdGhpcy5zY2hlZHVsZVN5bmNDdXJzb3JQb3NpdGlvbl8oKTtcbiAgICBpZiAoYW5ub3VuY2UpIHtcbiAgICAgICAgdGhpcy5hY2Nlc3NpYmlsaXR5UmVhZGVyXy5hbm5vdW5jZShzdHIpO1xuICAgIH1cbiAgICB2YXIgc3RhcnRPZmZzZXQgPSAwO1xuICAgIHZhciBzdHJXaWR0aCA9IGxpYi53Yy5zdHJXaWR0aChzdHIpO1xuICAgIC8vIEZ1biBlZGdlIGNhc2U6IElmIHRoZSBzdHJpbmcgb25seSBjb250YWlucyB6ZXJvIHdpZHRoIGNvZGVwb2ludHMgKGxpa2VcbiAgICAvLyBjb21iaW5pbmcgY2hhcmFjdGVycyksIHdlIG1ha2Ugc3VyZSB0byBpdGVyYXRlIGF0IGxlYXN0IG9uY2UgYmVsb3cuXG4gICAgaWYgKHN0cldpZHRoID09PSAwICYmIHN0cikge1xuICAgICAgICBzdHJXaWR0aCA9IDE7XG4gICAgfVxuICAgIHdoaWxlIChzdGFydE9mZnNldCA8IHN0cldpZHRoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNfLndyYXBhcm91bmQgJiYgdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLm92ZXJmbG93KSB7XG4gICAgICAgICAgICB0aGlzLnNjcmVlbl8uY29tbWl0TGluZU92ZXJmbG93KCk7XG4gICAgICAgICAgICB0aGlzLm5ld0xpbmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY291bnQgPSBzdHJXaWR0aCAtIHN0YXJ0T2Zmc2V0O1xuICAgICAgICB2YXIgZGlkT3ZlcmZsb3cgPSBmYWxzZTtcbiAgICAgICAgdmFyIHN1YnN0cjtcbiAgICAgICAgaWYgKHRoaXMuc2NyZWVuXy5jdXJzb3JQb3NpdGlvbi5jb2x1bW4gKyBjb3VudCA+PSB0aGlzLnNjcmVlblNpemUud2lkdGgpIHtcbiAgICAgICAgICAgIGRpZE92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvdW50ID0gdGhpcy5zY3JlZW5TaXplLndpZHRoIC0gdGhpcy5zY3JlZW5fLmN1cnNvclBvc2l0aW9uLmNvbHVtbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlkT3ZlcmZsb3cgJiYgIXRoaXMub3B0aW9uc18ud3JhcGFyb3VuZCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIHN0cmluZyBvdmVyZmxvd2VkIHRoZSBsaW5lIGJ1dCB3cmFwYXJvdW5kIGlzIG9mZiwgdGhlbiB0aGVcbiAgICAgICAgICAgIC8vIGxhc3QgcHJpbnRlZCBjaGFyYWN0ZXIgc2hvdWxkIGJlIHRoZSBsYXN0IG9mIHRoZSBzdHJpbmcuXG4gICAgICAgICAgICAvLyBUT0RPOiBUaGlzIHdpbGwgYWRkIHRvIG91ciBwcm9ibGVtcyB3aXRoIG11bHRpYnl0ZSBVVEYtMTYgY2hhcmFjdGVycy5cbiAgICAgICAgICAgIHN1YnN0ciA9XG4gICAgICAgICAgICAgICAgbGliLndjLnN1YnN0cihzdHIsIHN0YXJ0T2Zmc2V0LCBjb3VudCAtIDEpICtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBsaWIud2Muc3Vic3RyKHN0ciwgc3RyV2lkdGggLSAxKTtcbiAgICAgICAgICAgIGNvdW50ID0gc3RyV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzdHIgPSBsaWIud2Muc3Vic3RyKHN0ciwgc3RhcnRPZmZzZXQsIGNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGV4dEF0dHJpYnV0ZXMgPSB0aGlzLnNjcmVlbl8udGV4dEF0dHJpYnV0ZXM7XG4gICAgICAgIHZhciB0b2tlbnMgPSBodGVybS5UZXh0QXR0cmlidXRlcy5zcGxpdFdpZGVjaGFyU3RyaW5nKHN1YnN0cik7XG4gICAgICAgIHZhciBsZW4gPSB0b2tlbnMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgICAgICB0ZXh0QXR0cmlidXRlcy53Y05vZGUgPSB0b2tlbi53Y05vZGU7XG4gICAgICAgICAgICB0ZXh0QXR0cmlidXRlcy5hc2NpaU5vZGUgPSB0b2tlbi5hc2NpaU5vZGU7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zXy5pbnNlcnRNb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JlZW5fLmluc2VydFN0cmluZyh0b2tlbi5zdHIsIHRva2VuLndjU3RyV2lkdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9kZWJ1Z1ByaW50KHRoaXMuc2NyZWVuXywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2NyZWVuXy5vdmVyd3JpdGVTdHJpbmcodG9rZW4uc3RyLCB0b2tlbi53Y1N0cldpZHRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRleHRBdHRyaWJ1dGVzLndjTm9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGV4dEF0dHJpYnV0ZXMuYXNjaWlOb2RlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjcmVlbl8ubWF5YmVDbGlwQ3VycmVudFJvdygpO1xuICAgICAgICBzdGFydE9mZnNldCArPSBjb3VudDtcbiAgICAgICAgdGhpcy5zY3JvbGxQb3J0Xy5yZW5kZXJSZWYudG91Y2hSb3codGhpcy5zY3JlZW5fLmN1cnNvclJvdygpKTtcbiAgICB9XG4gICAgLy90aGlzLnNjaGVkdWxlU3luY0N1cnNvclBvc2l0aW9uXygpO1xuICAgIGlmICh0aGlzLnNjcm9sbE9uT3V0cHV0Xykge1xuICAgICAgICB0aGlzLnNjcm9sbFBvcnRfLnNjcm9sbFJvd1RvQm90dG9tKHRoaXMuZ2V0Um93Q291bnQoKSk7XG4gICAgfVxufTtcbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5pbnRlcnByZXQgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdGhpcy5wcm9tcHQucmVzZXQoKTtcbiAgICB0aGlzLnZ0LmludGVycHJldChzdHIpO1xuICAgIC8vIHRoaXMuc2NoZWR1bGVTeW5jQ3Vyc29yUG9zaXRpb25fKCk7XG59O1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnNldEZvbnRTaXplID0gZnVuY3Rpb24gKHB4KSB7XG4gICAgaWYgKHB4IDw9IDApXG4gICAgICAgIHB4ID0gdGhpcy5wcmVmc18uZ2V0KCdmb250LXNpemUnKTtcbiAgICBpZiAodGhpcy5jdXJzb3JPdmVybGF5Tm9kZV8pIHtcbiAgICAgICAgdGhpcy5jdXJzb3JPdmVybGF5Tm9kZV8uc3R5bGUuZm9udFNpemUgPSBweCArICdweCc7XG4gICAgfVxuICAgIHRoaXMuc2Nyb2xsUG9ydF8uc2V0Rm9udFNpemUocHgpO1xuICAgIHRoaXMuc2V0Q3NzVmFyKCdjaGFyc2l6ZS13aWR0aCcsIHRoaXMuc2Nyb2xsUG9ydF8uY2hhcmFjdGVyU2l6ZS53aWR0aCArICdweCcpO1xuICAgIHRoaXMuc2V0Q3NzVmFyKCdjaGFyc2l6ZS1oZWlnaHQnLCB0aGlzLnNjcm9sbFBvcnRfLmNoYXJhY3RlclNpemUuaGVpZ2h0ICsgJ3B4Jyk7XG59O1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLnN5bmNGb250RmFtaWx5ID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGZvbnRGYW1pbHkgPSB0aGlzLnByZWZzXy5nZXQoJ2ZvbnQtZmFtaWx5Jyk7XG4gICAgaWYgKHRoaXMuY3Vyc29yT3ZlcmxheU5vZGVfKSB7XG4gICAgICAgIHRoaXMuY3Vyc29yT3ZlcmxheU5vZGVfLnN0eWxlLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5O1xuICAgIH1cbiAgICB0aGlzLnNjcm9sbFBvcnRfLnNldEZvbnRGYW1pbHkoZm9udEZhbWlseSwgdGhpcy5wcmVmc18uZ2V0KCdmb250LXNtb290aGluZycpKTtcbiAgICB0aGlzLnN5bmNCb2xkU2FmZVN0YXRlKCk7XG59O1xuaHRlcm0uVGVybWluYWwucHJvdG90eXBlLmRpc3BsYXlJbWFnZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgLy8gTWFrZSBzdXJlIHdlJ3JlIGFjdHVhbGx5IGdpdmVuIGEgcmVzb3VyY2UgdG8gZGlzcGxheS5cbiAgICBpZiAob3B0aW9ucy51cmkgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIFNldCB1cCB0aGUgZGVmYXVsdHMgdG8gc2ltcGxpZnkgY29kZSBiZWxvdy5cbiAgICBpZiAoIW9wdGlvbnMubmFtZSlcbiAgICAgICAgb3B0aW9ucy5uYW1lID0gJyc7XG4gICAgLy8gU2VlIGlmIHdlIHNob3VsZCBzaG93IHRoaXMgb2JqZWN0IGRpcmVjdGx5LCBvciBkb3dubG9hZCBpdC5cbiAgICBpZiAob3B0aW9ucy5pbmxpbmUpIHtcbiAgICAgICAgY29uc3QgaW8gPSB0aGlzLmlvLnB1c2goKTtcbiAgICAgICAgaW8uc2hvd092ZXJsYXkoaHRlcm0ubXNnKCdMT0FESU5HX1JFU09VUkNFX1NUQVJUJywgW29wdGlvbnMubmFtZV0sICdMb2FkaW5nICQxIC4uLicpLCBudWxsKTtcbiAgICAgICAgLy8gV2hpbGUgd2UncmUgbG9hZGluZyB0aGUgaW1hZ2UsIGVhdCBhbGwgdGhlIHVzZXIncyBpbnB1dC5cbiAgICAgICAgaW8ub25WVEtleXN0cm9rZSA9IGlvLnNlbmRTdHJpbmcgPSAoKSA9PiB7IH07XG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhpcyBuZXcgaW1hZ2UuXG4gICAgICAgIGNvbnN0IGltZyA9IHRoaXMuZG9jdW1lbnRfLmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICBpbWcuc3JjID0gb3B0aW9ucy51cmk7XG4gICAgICAgIGltZy50aXRsZSA9IGltZy5hbHQgPSBvcHRpb25zLm5hbWU7XG4gICAgICAgIC8vIEF0dGFjaCB0aGUgaW1hZ2UgdG8gdGhlIHBhZ2UgdG8gbGV0IGl0IGxvYWQvcmVuZGVyLiAgSXQgd29uJ3Qgc3RheSBoZXJlLlxuICAgICAgICAvLyBUaGlzIGlzIG5lZWRlZCBzbyBpdCdzIHZpc2libGUgYW5kIHRoZSBET00gY2FuIGNhbGN1bGF0ZSB0aGUgaGVpZ2h0LiAgSWZcbiAgICAgICAgLy8gdGhlIGltYWdlIGlzIGhpZGRlbiBvciBub3QgaW4gdGhlIERPTSwgdGhlIGhlaWdodCBpcyBhbHdheXMgMC5cbiAgICAgICAgdGhpcy5kb2N1bWVudF8uYm9keS5hcHBlbmRDaGlsZChpbWcpO1xuICAgICAgICAvLyBXYWl0IGZvciB0aGUgaW1hZ2UgdG8gZmluaXNoIGxvYWRpbmcgYmVmb3JlIHdlIHRyeSBtb3ZpbmcgaXQgdG8gdGhlXG4gICAgICAgIC8vIHJpZ2h0IHBsYWNlIGluIHRoZSB0ZXJtaW5hbC5cbiAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIFBhcnNlIGEgd2lkdGgvaGVpZ2h0IHNwZWNpZmljYXRpb24uXG4gICAgICAgICAgICBjb25zdCBwYXJzZURpbSA9IChkaW0sIG1heERpbSwgY3NzVmFyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFkaW0gfHwgZGltID09ICdhdXRvJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFyeSA9IGRpbS5tYXRjaCgvXihbMC05XSspKHB4fCUpPyQvKTtcbiAgICAgICAgICAgICAgICBpZiAoYXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnlbMl0gPT0gJyUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1heERpbSAqIHBhcnNlSW50KGFyeVsxXSkgLyAxMDAgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhcnlbMl0gPT0gJ3B4JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkaW07XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgY2FsYygke2RpbX0gKiB2YXIoJHtjc3NWYXJ9KSlgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaW1nLnN0eWxlLndpZHRoID0gcGFyc2VEaW0ob3B0aW9ucy53aWR0aCwgdGhpcy5kb2N1bWVudF8uYm9keS5jbGllbnRXaWR0aCwgJy0taHRlcm0tY2hhcnNpemUtd2lkdGgnKTtcbiAgICAgICAgICAgIGltZy5zdHlsZS5oZWlnaHQgPSBwYXJzZURpbShvcHRpb25zLmhlaWdodCwgdGhpcy5kb2N1bWVudF8uYm9keS5jbGllbnRIZWlnaHQsICctLWh0ZXJtLWNoYXJzaXplLWhlaWdodCcpO1xuICAgICAgICAgICAgLy8gRmlndXJlIG91dCBob3cgbWFueSByb3dzIHRoZSBpbWFnZSBvY2N1cGllcywgdGhlbiBhZGQgdGhhdCBtYW55LlxuICAgICAgICAgICAgLy8gWFhYOiBUaGlzIGNvdW50IHdpbGwgYmUgaW5hY2N1cmF0ZSBpZiB0aGUgZm9udCBzaXplIGNoYW5nZXMgb24gdXMuXG4gICAgICAgICAgICBjb25zdCBwYWRSb3dzID0gTWF0aC5jZWlsKGltZy5jbGllbnRIZWlnaHQgLyB0aGlzLnNjcm9sbFBvcnRfLmNoYXJhY3RlclNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFkUm93czsgKytpKVxuICAgICAgICAgICAgICAgIHRoaXMubmV3TGluZSgpO1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBtYXggaGVpZ2h0IGluIGNhc2UgdGhlIHVzZXIgc2hyaW5rcyB0aGUgY2hhcmFjdGVyIHNpemUuXG4gICAgICAgICAgICAvLyBNb3ZlIHRoZSBpbWFnZSB0byB0aGUgbGFzdCByb3cuICBUaGlzIHdheSB3aGVuIHdlIHNjcm9sbCB1cCwgaXQgZG9lc24ndFxuICAgICAgICAgICAgLy8gZGlzYXBwZWFyIHdoZW4gdGhlIGZpcnN0IHJvdyBnZXRzIGNsaXBwZWQuICBJdCB3aWxsIGRpc2FwcGVhciB3aGVuIHdlXG4gICAgICAgICAgICAvLyBzY3JvbGwgZG93biBhbmQgdGhlIGxhc3Qgcm93IGlzIGNsaXBwZWQgLi4uXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50Xy5ib2R5LnJlbW92ZUNoaWxkKGltZyk7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSB3cmFwcGVyIG5vZGUgc28gd2UgY2FuIGRvIGFuIGFic29sdXRlIGluIGEgcmVsYXRpdmUgcG9zaXRpb24uXG4gICAgICAgICAgICAvLyBUaGlzIGhlbHBzIHdpdGggcm91bmRpbmcgZXJyb3JzIGJldHdlZW4gSlMgJiBDU1MgY291bnRzLlxuICAgICAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5nZXRSb3dOb2RlKHRoaXMuc2Nyb2xsYmFja1Jvd3NfLmxlbmd0aCArIHRoaXMuZ2V0Q3Vyc29yUm93KCkgLSAxKTtcbiAgICAgICAgICAgIHJvdy5pbWcgPSB7XG4gICAgICAgICAgICAgICAgdGV4dEFsaWduOiBvcHRpb25zLmFsaWduLFxuICAgICAgICAgICAgICAgIHBhZFJvd3M6IHBhZFJvd3MsXG4gICAgICAgICAgICAgICAgb2JqZWN0Rml0OiBvcHRpb25zLnByZXNlcnZlQXNwZWN0UmF0aW8gPyAnc2NhbGUtZG93bicgOiAnZmlsbCcsXG4gICAgICAgICAgICAgICAgc3JjOiBpbWcuc3JjLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpbWcudGl0bGUsXG4gICAgICAgICAgICAgICAgYWx0OiBpbWcuYWx0LFxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0b246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogJ2NhbGMoMHB4IC0gdmFyKC0taHRlcm0tY2hhcnNpemUtaGVpZ2h0KSknLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdG91Y2gocm93KTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsUG9ydF8ucmVuZGVyUmVmLnRvdWNoUm93KHJvdyk7XG4gICAgICAgICAgICBpby5oaWRlT3ZlcmxheSgpO1xuICAgICAgICAgICAgaW8ucG9wKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIElmIHdlIGdvdCBhIG1hbGZvcm1lZCBpbWFnZSwgZ2l2ZSB1cC5cbiAgICAgICAgaW1nLm9uZXJyb3IgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudF8uYm9keS5yZW1vdmVDaGlsZChpbWcpO1xuICAgICAgICAgICAgaW8uc2hvd092ZXJsYXkoaHRlcm0ubXNnKCdMT0FESU5HX1JFU09VUkNFX0ZBSUxFRCcsIFtvcHRpb25zLm5hbWVdLCAnTG9hZGluZyAkMSBmYWlsZWQgLi4uJykpO1xuICAgICAgICAgICAgaW8ucG9wKCk7XG4gICAgICAgIH07XG4gICAgfVxufTtcbmh0ZXJtLlRlcm1pbmFsLnByb3RvdHlwZS5nZXRSb3dzVGV4dCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgdmFyIGFyeSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5nZXRSb3dOb2RlKGkpO1xuICAgICAgICBhcnkucHVzaChyb3dUZXh0KG5vZGUpKTtcbiAgICAgICAgaWYgKGkgPCBlbmQgLSAxICYmICFub2RlLm8pIHtcbiAgICAgICAgICAgIGFyeS5wdXNoKCdcXG4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJ5LmpvaW4oJycpO1xufTtcbiIsImltcG9ydCBLZXlib2FyZCBmcm9tIFwiLi9rYi9LZXlib2FyZFwiO1xuaW1wb3J0IHsgaHRlcm0sIGxpYiB9IGZyb20gXCIuL2h0ZXJtX2FsbFwiO1xuaW1wb3J0IEtleXN0cm9rZVZpc3VhbGl6ZXIgZnJvbSBcIi4vcmVhZGxpbmUvdmlzdWFsaXplclwiO1xuaW1wb3J0IFwiLi9SU2NyZWVuL2h0ZXJtX3ZzLnBhdGNoZWRcIjtcbmltcG9ydCBcIi4vUlNjcmVlbi9TY3JvbGxQb3J0XCI7XG5pbXBvcnQgXCIuL1JTY3JlZW4vU2NyZWVuXCI7XG5pbXBvcnQgXCIuL1JTY3JlZW4vVGVybWluYWxcIjtcbndpbmRvdy5odGVybSA9IGh0ZXJtO1xud2luZG93LmxpYiA9IGxpYjtcbndpbmRvdy5LZXlzdHJva2VWaXN1YWxpemVyID0gS2V5c3Ryb2tlVmlzdWFsaXplcjtcbmZ1bmN0aW9uIGluc3RhbGxLQih0ZXJtaW5hbCwgZWxlbWVudCkge1xuICAgIGNvbnN0IGtleWJvYXJkID0gbmV3IEtleWJvYXJkKHRlcm1pbmFsLCBlbGVtZW50KTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQoa2V5Ym9hcmQuZWxlbWVudCk7XG4gICAgfVxuICAgIGtleWJvYXJkLmZvY3VzKHRydWUpO1xuICAgIHdpbmRvdy5fb25LQiA9IGtleWJvYXJkLm9uS0I7XG4gICAgd2luZG93Ll9rYiA9IGtleWJvYXJkO1xuICAgIC8vICBrZXlib2FyZC5yZWFkeSgpO1xufVxud2luZG93Lmluc3RhbGxLQiA9IGluc3RhbGxLQjtcbiJdLCJzb3VyY2VSb290IjoiIn0=