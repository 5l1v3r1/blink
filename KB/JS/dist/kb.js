!function(e){var t={};function a(o){if(t[o])return t[o].exports;var l=t[o]={i:o,l:!1,exports:{}};return e[o].call(l.exports,l,l.exports,a),l.l=!0,l.exports}a.m=e,a.c=t,a.d=function(e,t,o){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(a.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)a.d(o,l,function(t){return e[t]}.bind(null,l));return o},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=0)}([function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=new(a(1).default);document.body.append(o.element),o.focus(!0),window._onKB=o.onKB,window._kb=o,o.ready()},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=a(2),l=a(3),n=a(4),s=o.KBActions.CANCEL,r=o.KBActions.DEFAULT,i=o.KBActions.PASS,d=o.KBActions.STRIP;function c(e){switch(e){case"escape":return{keyCode:27,code:"[ESC]",key:"[ESC]"};case"tab":return{keyCode:9,code:"[TAB]",key:"[TAB]"};default:return null}}const y=new Set(["20:0","16:1","16:2","17:1","17:2","18:1","18:2","91:1","91:2","93:0"]),h="20:0";function m(e){let t=229==e.keyCode?0:e.keyCode,a=e.location;return t?`${t}:${a}`:`${t}:${a}:${(e.key||"").toLowerCase()}`}function p(e){e&&(e.preventDefault(),e.stopPropagation())}const k={KeyC:67,c:67,KeyI:73,i:73,KeyH:72,h:72,KeyM:77,m:77,BracketLeft:219,"[":77,KeyN:78,n:78,KeyU:85,u:85,KeyE:69,e:69};t.default=class{constructor(){this.element=document.createElement("input"),this._keyMap=new o.default(this),this._bindings=new n.default,this._lang="en",this.hasSelection=!1,this._lastKeyDownEvent=null,this._capsLockRemapped=!1,this._shiftRemapped=!1,this._removeAccents=!1,this._metaSendsEscape=!0,this._altSendsWhat="escape",this._ignoreAccents={AltLeft:!0,AltRight:!0},this._modsMap={ShiftLeft:"Shift",ShiftRight:"Shift",AltLeft:"Escape",AltRight:"Escape",MetaLeft:"Meta",MetaRight:"Meta",ControlLeft:"Control",ControlRight:"Control",CapsLock:""},this._downMap={},this._upMap={},this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},this._up=new Set,this._down=new Set,this._captureMode=!1,this._voiceString="",this._updateUIKitModsIfNeeded=e=>{let t=e.code;if(this._capsLockRemapped){let a;a="keyup"==e.type&&"CapsLock"==t?0:l.toUIKitFlags(e),o.op("mods",{mods:a})}"AltLeft"!=t&&"AltRight"!=t||this._ignoreAccents[t]&&("keydown"==e.type?o.op("guard-ime-on",{}):o.op("guard-ime-off",{}),p(e))},this._onKeyDown=e=>{if(e.isComposing)return void(this._lastKeyDownEvent=null);let t=e;if(229===e.keyCode){if(!this._lastKeyDownEvent)return;t=this._lastKeyDownEvent}else this._lastKeyDownEvent=e;if(this._captureMode){let a=m+"-"+t.code;return this._down.add(a),this._capture(),this._updateUIKitModsIfNeeded(t),void p(e)}let a=m(t);this._down.add(a),console.log("down",this._down);let o=this._bindings.match(Array.from(this._down));if(y.has(a)||this._down.delete(a),o)return this._execBinding(o,e),void p(e);let l=this._downMap[a],n=this._mod(this._modsMap[t.code]),s=!1;l&&((s=!(n&&this._mods[n].has(a)))||(this._handleKeyDownKey(l,e),s=!0)),n&&this._mods[n].add(a),this._upMap[a]&&this._up.add(a),this._updateUIKitModsIfNeeded(t),s||this._handleKeyDown(t.keyCode,e)},this._onBeforeInput=e=>{"dictation"!=this._lang?("insertText"==e.inputType&&this._output(e.data),p(e)):this._voiceString=e.data},this._onInput=e=>p(e),this._onKeyUp=e=>{if(this._lastKeyDownEvent=null,this._captureMode){let t=m(e)+"-"+e.code;return this._down.delete(t),this._capture(),this._updateUIKitModsIfNeeded(e),void p(e)}let t=m(e);this._down.delete(t),console.log("up",t,this._down);let a=this._mod(this._modsMap[e.code]);a&&this._mods[a].delete(t),this._updateUIKitModsIfNeeded(e);let o=this._upMap[t];o&&this._up.has(t)&&this._handleKeyDownKey(o,null),p(e)},this._handleKeyDown=(e,t)=>{let a={keyCode:e,key:"",code:"Unidentified"};t&&(a.code=t.code,a.key=t.key),this._handleKeyDownKey(a,t)},this._handleKeyDownKey=(e,t)=>{let a=this._keyMap,o=this._mods.Alt.size>0,l=this._mods.Control.size>0,n=this._mods.Meta.size>0,c=this._mods.Shift.size>0,y=e.code,h=e.key,m=function(e,t){return t?(t.ctrlKey&&(9==t.keyCode&&"KeyI"==t.code||8==t.keyCode&&"KeyH"==t.code||13==t.keyCode&&"KeyC"==t.code||13==t.keyCode&&"KeyM"==t.code||27==t.keyCode&&"BracketLeft"==t.code)&&(e.keyCode=k[t.code]||e.keyCode),e):e}({key:h,code:y,keyCode:e.keyCode,alt:o,ctrl:l,meta:n,shift:c},t),C=a.getKeyDef(m.keyCode);var u=null;function _(e){u=e;var t=C[e];return"function"==typeof t&&(t=t.call(a,m,C)),t===r&&"normal"!=e&&(t=_("normal")),t}let f;if(f=_(l?"ctrl":o?"alt":n?"meta":"normal"),!this.hasSelection&&(f===i||f===r&&!(l||o||n))){if(f===i&&!e.src)return;if(/^\[\w+\]$/.test(C.keyCap)&&!e.src)return void(this._removeAccents=!1);let a=this._removeAccents?function(e){let t=e.normalize("NFD").replace(/[\u0300-\u036f]/g,""),a=t.replace(/^[\u02c6\u00a8\u00b4\u02dc\u0060]/,"");return a&&(t=a),t}(h):h;return this._removeAccents=!1,this._capsLockRemapped||this._shiftRemapped?this._output(c?a.toUpperCase():a.toLowerCase()):this._output(a),void p(t)}if(this._removeAccents=!1,f===d&&(o=l=!1,"function"==typeof(f=C.normal)&&(f=f.call(a,m,C)),f==r&&2==C.keyCap.length&&(f=C.keyCap.substr(c?1:0,1))),p(t),f!==s&&!this.hasSelection)if(f===r||"string"==typeof f){if("ctrl"==u?l=!1:"alt"==u?o=!1:"meta"==u&&(n=!1),c=m.shift,(o||l||c||n)&&"string"==typeof f&&"["==f.substr(0,2)){let e=1;c&&(e+=1),o&&(e+=2),l&&(e+=4),n&&(e+=8);let t=";"+e;f=3==f.length?"[1"+t+f.substr(2,1):f.substr(0,f.length-1)+t+f.substr(f.length-1)}else{if(f===r&&(f=C.keyCap.substr(c?1:0,1),l)){let e=C.keyCap.substr(0,1).charCodeAt(0);e>=64&&e<=95&&(f=String.fromCharCode(e-64))}let e=f.toString();if(o&&"8-bit"==this._altSendsWhat&&1==e.length){let t=e.charCodeAt(0)+128;f=String.fromCharCode(t)}(o&&"escape"==this._altSendsWhat||n&&this._metaSendsEscape)&&(f=""+e)}"string"==typeof f?this._output(f):console.warn("action is not a string",f)}else console.log("Invalid action: "+JSON.stringify(f))},this._onIME=e=>{let t=e.type,a=e.data||"";o.op("ime",{type:t,data:a}),"compositionend"==t&&this._output(a)},this._output=e=>{this._up.clear(),e&&o.op("out",{data:e})},this._stateReset=()=>{this._down.clear(),this._up.clear(),this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},this.element.value=" "},this._capture=()=>o.op("capture",{keyIds:this._down.values}),this._configKey=e=>{let t=e.code,a=c(e.down);a&&(this._downMap[t.id]=a),this._mod(e.mod)&&(this._modsMap[t.code]=e.mod);let o=c(e.up);o&&(this._upMap[t.id]=o),"AltRight"!=t.code&&"AltLeft"!=t.code||(this._ignoreAccents[t.code]=e.ignoreAccents)},this._config=e=>{this._reset(),this._bindings.reset(),this._configKey(e.capsLock),this._configKey(e.command.left),this._configKey(e.command.right),this._configKey(e.control.left),this._configKey(e.control.right),this._configKey(e.option.left),this._configKey(e.option.right),this._configKey(e.shift.left),this._configKey(e.shift.right),this._bindings.expandFn(e.fn),this._bindings.expandCursor(e.cursor)},this._toggleCaptureMode=e=>this._captureMode=!!e,this._onToolbarMods=e=>{let t=l.UIKitFlagsToObject(e);t.alt?this._mods.Alt.add("alt"):this._mods.Alt.delete("alt"),t.ctrl?this._mods.Control.add("ctrl"):this._mods.Control.delete("ctrl"),t.shift?this._mods.Shift.add("shift"):this._mods.Shift.delete("shift"),t.meta?this._mods.Meta.add("meta"):this._mods.Meta.delete("meta")},this._onToolbarPress=e=>{let t=e.split(/:/g),a={keyCode:parseInt(t[0],10),key:t[2]||"",code:"",src:"toolbar"};this._handleKeyDownKey(a,null)},this.onKB=(e,t)=>{switch(e){case"mods-down":this._handleCapsLockDown(!0);break;case"mods-up":this._handleCapsLockDown(!1);break;case"lang":this._handleLang(t);break;case"guard-up":this._handleGuard(!0,t);break;case"guard-down":this._handleGuard(!1,t);break;case"selection":this.hasSelection=t;break;case"capture":this._toggleCaptureMode(t);break;case"toolbar-mods":this._onToolbarMods(t);break;case"toolbar-press":this._onToolbarPress(t);break;case"state-reset":this._stateReset();break;case"focus":this.focus(t);break;case"config":this._config(t)}};let e=this.element;e.setAttribute("autocomplete","off"),e.setAttribute("spellcheck","false"),e.setAttribute("autocorrect","off"),e.setAttribute("autocapitalize","none"),e.setAttribute("autofocus","true"),e.value=" ",e.addEventListener("keydown",this._onKeyDown),e.addEventListener("keyup",this._onKeyUp),window.addEventListener("keydown",this._onKeyDown),window.addEventListener("keyup",this._onKeyUp),e.addEventListener("compositionstart",this._onIME),e.addEventListener("compositionupdate",this._onIME),e.addEventListener("compositionend",this._onIME),e.addEventListener("beforeinput",this._onBeforeInput),e.addEventListener("input",this._onInput),this._capsLockRemapped=null!=this._modsMap.CapsLock||null!=this._downMap[h]||null!=this._upMap[h],this._shiftRemapped=null!=this._modsMap.Shift||"Shift"!==this._modsMap.Shift}_mod(e){switch(e){case"Escape":return this._altSendsWhat="escape","Alt";case"8-bit":return this._altSendsWhat="8-bit","Alt";case"Shift":return"Shift";case"Control":return"Control";case"Meta":return this._metaSendsEscape=!1,"Meta";case"Meta-Escape":return this._metaSendsEscape=!0,"Meta";default:return null}}focus(e){e?this.element.focus():this.element.blur()}ready(){o.op("ready",{})}_handleCapsLockDown(e){if(this._captureMode)return e?this._down.delete(h+"-capslock"):this._down.add(h+"-capslock"),void this._capture();let t=this._modsMap.CapsLock;if(e){this._down.add(h);let e=this._downMap[h];return!e||t&&this._mods[t].has(h)||this._handleKeyDownKey(e,null),t&&this._mods[t].add(h),void(this._upMap[h]&&this._up.add(h))}this._down.delete(h),t&&this._mods[t].delete(h);let a=this._upMap[h];a&&this._up.has(h)&&this._handleKeyDownKey(a,null)}_handleLang(e){this._lang=e,this._stateReset()}_handleGuard(e,t){this.element.value=" ";let a=k[t||""]||0,o=`${a}:0`;this._captureMode&&(o+="-Key"+t.toUpperCase()),e?this._down.delete(o):this._down.add(o),this._captureMode?this._capture():e?this._removeAccents=!0:this._handleKeyDown(a,null)}_reset(){this.hasSelection=!1,this._removeAccents=!1,this._modsMap={},this._downMap={},this._upMap={},this._up.clear(),this._down.clear(),this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},this._ignoreAccents={AltLeft:!0,AltRight:!0}}_execBinding(e,t){switch(e.type){case"hex":this._output(function(e){let t="",a=e.length;for(let o=0;o<a;o+=2)t+=String.fromCharCode(parseInt(e.substr(o,2),16));return t}(e.value));break;case"command":o.op("command",{command:e.value});break;case"press":let a=e.key,l=this._mods;this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},e.shift&&this._mods.Shift.add("shift"),e.ctrl&&this._mods.Control.add("ctrl"),e.alt&&this._mods.Alt.add("alt"),e.meta&&this._mods.Meta.add("meta"),this._handleKeyDownKey(a,t),this._mods=l}}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=Symbol("CANCEL"),l=Symbol("DEFAULT"),n=Symbol("PASS"),s=Symbol("STRIP");function r(e,t){let a=Object.assign(Object.assign({},t),{op:e});window.webkit.messageHandlers._kb.postMessage(a)}t.KBActions={CANCEL:o,DEFAULT:l,PASS:n,STRIP:s},t.op=r;const i="",d="[",c="O",y="",h=e=>String.fromCharCode(e.charCodeAt(0)-64),m={keyCode:0,keyCap:"[UNKNOWN]",normal:n,ctrl:n,alt:n,meta:n};t.default=class{constructor(e){this._defs={},this._onCtrlNum=(e,t)=>{switch(t.keyCap.substr(0,1)){case"1":return"1";case"2":return h("@");case"3":return h("[");case"4":return h("\\");case"5":return h("]");case"6":return h("^");case"7":return h("_");case"8":return y;case"9":return"9";default:return n}},this._onAltNum=(e,t)=>l,this._onMetaNum=(e,t)=>l,this._onZoom=(e,t)=>o,this._onSel=(e,t)=>{if("[LEFT]"==t.keyCap||"hH"==t.keyCap){r("selection",{dir:"left",gran:e.shift?"word":"character"})}else if("[RIGHT]"==t.keyCap||"lL"==t.keyCap){r("selection",{dir:"right",gran:e.shift?"word":"character"})}else"[UP]"==t.keyCap||"kK"==t.keyCap?r("selection",{dir:"left",gran:"line"}):"[DOWN]"==t.keyCap||"jJ"==t.keyCap?r("selection",{dir:"right",gran:"line"}):"oO"==t.keyCap||"xX"==t.keyCap?r("selection",{command:"change"}):"nN"==t.keyCap&&e.ctrl?r("selection",{dir:"right",gran:"line"}):"pP"==t.keyCap?e.ctrl?r("selection",{dir:"left",gran:"line"}):e.shift||e.alt||e.meta||r("selection",{command:"paste"}):"bB"==t.keyCap?e.ctrl?r("selection",{dir:"left",gran:"character"}):(e.alt,r("selection",{dir:"left",gran:"word"})):"wW"==t.keyCap?e.alt?r("selection",{command:"copy"}):r("selection",{dir:"right",gran:"word"}):"fF"==t.keyCap?e.ctrl?r("selection",{dir:"right",gran:"character"}):e.alt&&r("selection",{dir:"right",gran:"word"}):"yY"==t.keyCap?r("selection",{command:"copy"}):"[ESC]"==t.keyCap&&r("selection",{command:"cancel"});return o},this._keyboard=e,this.reset()}getKeyDef(e){var t=this._defs[e];return t||(console.warn(`No definition for (keyCode ${e})`),t=m,this.addKeyDef(e,t),t)}addKeyDef(e,t){e in this._defs&&console.warn("Dup keyCode: ",e),this._defs[e]=t}reset(){this._defs={};const e=(e,t,a)=>"function"==typeof e?e.call(this,t,a):e,t=(t,a)=>(o,l)=>{let n=o.shift||o.ctrl||o.alt||o.meta?a:t;return e(n,o,l)},a=(t,a)=>(o,l)=>{let n=o.shift?a:t;return o.shift=!1,e(n,o,l)},o=(e,t)=>e,r=(t,a)=>(o,l)=>{let n=o.alt?t:a;return e(n,o,l)},p=(e,t)=>t,k=t=>(a,o)=>{let l=this._keyboard.hasSelection?this._onSel:t;return e(l,a,o)},C=e=>this.addKeyDef(e.keyCode,e);C(m),C({keyCode:27,keyCap:"[ESC]",normal:k(i),ctrl:l,alt:l,meta:l}),C({keyCode:112,keyCap:"[F1]",normal:t(c+"P",d+"P"),ctrl:l,alt:d+"23~",meta:l}),C({keyCode:113,keyCap:"[F2]",normal:t(c+"Q",d+"Q"),ctrl:l,alt:d+"24~",meta:l}),C({keyCode:114,keyCap:"[F3]",normal:t(c+"R",d+"R"),ctrl:l,alt:d+"25~",meta:l}),C({keyCode:115,keyCap:"[F4]",normal:t(c+"S",d+"S"),ctrl:l,alt:d+"26~",meta:l}),C({keyCode:116,keyCap:"[F5]",normal:d+"15~",ctrl:l,alt:d+"28~",meta:l}),C({keyCode:117,keyCap:"[F6]",normal:d+"17~",ctrl:l,alt:d+"29~",meta:l}),C({keyCode:118,keyCap:"[F7]",normal:d+"18~",ctrl:l,alt:d+"31~",meta:l}),C({keyCode:119,keyCap:"[F8]",normal:d+"19~",ctrl:l,alt:d+"32~",meta:l}),C({keyCode:120,keyCap:"[F9]",normal:d+"20~",ctrl:l,alt:d+"33~",meta:l}),C({keyCode:121,keyCap:"[F10]",normal:d+"21~",ctrl:l,alt:d+"34~",meta:l}),C({keyCode:122,keyCap:"[F11]",normal:d+"23~",ctrl:l,alt:d+"42~",meta:l}),C({keyCode:123,keyCap:"[F12]",normal:d+"24~",ctrl:l,alt:d+"43~",meta:l});const u=this._onCtrlNum,_=this._onAltNum,f=this._onMetaNum,g=this._onZoom;C({keyCode:192,keyCap:"`~",normal:l,ctrl:a(h("@"),h("^")),alt:l,meta:n}),C({keyCode:49,keyCap:"1!",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:50,keyCap:"2@",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:51,keyCap:"3#",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:52,keyCap:"4$",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:53,keyCap:"5%",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:54,keyCap:"6^",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:55,keyCap:"7&",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:56,keyCap:"8*",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:57,keyCap:"9(",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:48,keyCap:"0)",normal:l,ctrl:g,alt:_,meta:g}),C({keyCode:189,keyCap:"-_",normal:l,ctrl:a(g,h("_")),alt:l,meta:g}),C({keyCode:187,keyCap:"=+",normal:l,ctrl:g,alt:l,meta:g}),C({keyCode:8,keyCap:"[BKSP]",normal:o(y),ctrl:o("\b"),alt:l,meta:l}),C({keyCode:9,keyCap:"[TAB]",normal:a("\t",d+"Z"),ctrl:s,alt:n,meta:l}),C({keyCode:81,keyCap:"qQ",normal:l,ctrl:h("Q"),alt:l,meta:l}),C({keyCode:87,keyCap:"wW",normal:k(l),ctrl:h("W"),alt:k(l),meta:l}),C({keyCode:69,keyCap:"eE",normal:l,ctrl:h("E"),alt:l,meta:l}),C({keyCode:82,keyCap:"rR",normal:l,ctrl:h("R"),alt:l,meta:l}),C({keyCode:84,keyCap:"tT",normal:l,ctrl:h("T"),alt:l,meta:l}),C({keyCode:89,keyCap:"yY",normal:k(l),ctrl:h("Y"),alt:l,meta:l}),C({keyCode:85,keyCap:"uU",normal:l,ctrl:h("U"),alt:l,meta:l}),C({keyCode:73,keyCap:"iI",normal:l,ctrl:h("I"),alt:l,meta:l}),C({keyCode:79,keyCap:"oO",normal:k(l),ctrl:h("O"),alt:l,meta:l}),C({keyCode:80,keyCap:"pP",normal:k(l),ctrl:k(h("P")),alt:l,meta:l}),C({keyCode:219,keyCap:"[{",normal:l,ctrl:h("["),alt:l,meta:l}),C({keyCode:221,keyCap:"]}",normal:l,ctrl:h("]"),alt:l,meta:l}),C({keyCode:220,keyCap:"\\|",normal:l,ctrl:h("\\"),alt:l,meta:l}),C({keyCode:20,keyCap:"[CAPS]",normal:n,ctrl:n,alt:n,meta:l}),C({keyCode:65,keyCap:"aA",normal:l,ctrl:h("A"),alt:l,meta:l}),C({keyCode:83,keyCap:"sS",normal:l,ctrl:h("S"),alt:l,meta:l}),C({keyCode:68,keyCap:"dD",normal:l,ctrl:h("D"),alt:l,meta:l}),C({keyCode:70,keyCap:"fF",normal:l,ctrl:k(h("F")),alt:k(l),meta:l}),C({keyCode:71,keyCap:"gG",normal:l,ctrl:h("G"),alt:l,meta:l}),C({keyCode:72,keyCap:"hH",normal:k(l),ctrl:h("H"),alt:l,meta:l}),C({keyCode:74,keyCap:"jJ",normal:k(l),ctrl:h("J"),alt:l,meta:l}),C({keyCode:75,keyCap:"kK",normal:k(l),ctrl:h("K"),alt:l,meta:l}),C({keyCode:76,keyCap:"lL",normal:k(l),ctrl:h("L"),alt:l,meta:l}),C({keyCode:186,keyCap:";:",normal:l,ctrl:s,alt:l,meta:l}),C({keyCode:222,keyCap:"'\"",normal:l,ctrl:s,alt:l,meta:l}),C({keyCode:13,keyCap:"[ENTER]",normal:"\r",ctrl:l,alt:l,meta:l}),C({keyCode:16,keyCap:"[SHIFT]",normal:n,ctrl:n,alt:n,meta:l}),C({keyCode:90,keyCap:"zZ",normal:l,ctrl:h("Z"),alt:l,meta:l}),C({keyCode:88,keyCap:"xX",normal:k(l),ctrl:h("X"),alt:l,meta:l}),C({keyCode:67,keyCap:"cC",normal:l,ctrl:h("C"),alt:l,meta:n}),C({keyCode:86,keyCap:"vV",normal:l,ctrl:h("V"),alt:l,meta:n}),C({keyCode:66,keyCap:"bB",normal:k(l),ctrl:k(h("B")),alt:k(l),meta:l}),C({keyCode:78,keyCap:"nN",normal:l,ctrl:k(h("N")),alt:l,meta:l}),C({keyCode:77,keyCap:"mM",normal:l,ctrl:h("M"),alt:l,meta:l}),C({keyCode:188,keyCap:",<",normal:l,ctrl:r(s,n),alt:l,meta:l}),C({keyCode:190,keyCap:".>",normal:l,ctrl:r(s,n),alt:l,meta:l}),C({keyCode:191,keyCap:"/?",normal:l,ctrl:a(h("_"),h("?")),alt:l,meta:l}),C({keyCode:17,keyCap:"[CTRL]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:18,keyCap:"[OPT]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:91,keyCap:"[LCMD]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:32,keyCap:" ",normal:l,ctrl:h("@"),alt:l,meta:l}),C({keyCode:93,keyCap:"[RCMD]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:42,keyCap:"[PRTSCR]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:145,keyCap:"[SCRLK]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:19,keyCap:"[BREAK]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:45,keyCap:"[INSERT]",normal:d+"2~",ctrl:l,alt:l,meta:l}),C({keyCode:36,keyCap:"[HOME]",normal:i+"OH",ctrl:l,alt:l,meta:l}),C({keyCode:33,keyCap:"[PGUP]",normal:d+"5~",ctrl:l,alt:l,meta:l}),C({keyCode:46,keyCap:"[DEL]",normal:d+"3~",ctrl:l,alt:l,meta:l}),C({keyCode:35,keyCap:"[END]",normal:i+"OF",ctrl:l,alt:l,meta:l}),C({keyCode:34,keyCap:"[PGDOWN]",normal:d+"6~",ctrl:l,alt:l,meta:l}),C({keyCode:38,keyCap:"[UP]",normal:k(p(0,c+"A")),ctrl:l,alt:l,meta:l}),C({keyCode:40,keyCap:"[DOWN]",normal:k(p(0,c+"B")),ctrl:l,alt:l,meta:l}),C({keyCode:39,keyCap:"[RIGHT]",normal:k(p(0,c+"C")),ctrl:l,alt:l,meta:l}),C({keyCode:37,keyCap:"[LEFT]",normal:k(p(0,c+"D")),ctrl:l,alt:l,meta:l}),C({keyCode:144,keyCap:"[NUMLOCK]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:12,keyCap:"[CLEAR]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:96,keyCap:"[KP0]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:97,keyCap:"[KP1]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:98,keyCap:"[KP2]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:99,keyCap:"[KP3]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:100,keyCap:"[KP4]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:101,keyCap:"[KP5]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:102,keyCap:"[KP6]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:103,keyCap:"[KP7]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:104,keyCap:"[KP8]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:105,keyCap:"[KP9]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:107,keyCap:"[KP+]",normal:l,ctrl:g,alt:l,meta:g}),C({keyCode:109,keyCap:"[KP-]",normal:l,ctrl:g,alt:l,meta:g}),C({keyCode:106,keyCap:"[KP*]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:111,keyCap:"[KP/]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:110,keyCap:"[KP.]",normal:l,ctrl:l,alt:l,meta:l})}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=65536,l=1<<17,n=1<<18,s=1<<19,r=1<<20;t.toUIKitFlags=function(e,t=!0){let a=0;return e.shiftKey&&(a|=l),e.ctrlKey&&(a|=n),e.altKey&&(a|=s),e.metaKey&&(a|=r),t&&(a|=o),a},t.UIKitFlagsToObject=function(e){return{shift:(e&l)==l,alt:(e&s)==s,ctrl:(e&n)==n,meta:(e&r)==r}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this._stack=[],this._map={},this.expandFn=e=>{if(0==e.keys.length)return;let t=[{keyCode:121,key:"F10",code:"F10",id:"121:0"},{keyCode:112,key:"F1",code:"F1",id:"112:0"},{keyCode:113,key:"F2",code:"F2",id:"113:0"},{keyCode:114,key:"F3",code:"F3",id:"114:0"},{keyCode:115,key:"F4",code:"F4",id:"115:0"},{keyCode:116,key:"F5",code:"F5",id:"116:0"},{keyCode:117,key:"F6",code:"F6",id:"117:0"},{keyCode:118,key:"F7",code:"F7",id:"118:0"},{keyCode:119,key:"F8",code:"F8",id:"119:0"},{keyCode:120,key:"F9",code:"F9",id:"120:0"}],a=e.keys.slice();for(var o=0;o<10;o++){let l=o+48+":0",n=t[o];e.keys=a.slice(),e.keys.push(l),e.action={type:"press",key:n,alt:!1,shift:!1,ctrl:!1,meta:!1},this._expandBinding(e)}},this.expandCursor=e=>{if(0==e.keys.length)return;let t=[{keyCode:36,key:"HOME",code:"HOME",id:"36:0"},{keyCode:33,key:"PGUP",code:"PGUP",id:"33:0"},{keyCode:35,key:"END",code:"END",id:"35:0"},{keyCode:34,key:"PGDOWN",code:"PGDOWN",id:"34:0"}],a=["37:0","38:0","39:0","40:0"],o=e.keys.slice();for(var l=0;l<a.length;l++){let n=a[l],s=t[l];e.keys=o.slice(),e.keys.push(n),e.action={type:"press",key:s,alt:!1,shift:!1,ctrl:!1,meta:!1},this._expandBinding(e)}},this._expandBinding=e=>{var t=e.keys.map(e=>e.split("-")[0]);if(0==t.length)return;var a=[t.sort()],o=0;var l=[{idLeft:"16:1",idRight:"16:2",loc:e.shiftLoc},{idLeft:"17:1",idRight:"17:2",loc:e.controlLoc},{idLeft:"18:1",idRight:"18:2",loc:e.optionLoc},{idLeft:"91:1",idRight:"93:0",loc:e.commandLoc}];for(let e of l)for(o=a.length-1;o>=0;o--){var n=a[o];let t=n.indexOf(e.idLeft);if(t<0&&(t=n.indexOf(e.idRight)),t<0)continue;if(1==e.loc){n[t]=e.idLeft;continue}if(2==e.loc){n[t]=e.idRight;continue}n[t]=e.idLeft;let l=n.slice();l[t]=e.idRight,a.push(l)}for(let t of a){let a=t.sort().join(":");this._map[a]=e.action}}}reset(){this._stack=[],this._map={}}match(e){let t=e.sort().join(":");return this._map[t]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9LZXlib2FyZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvS2V5TWFwLnRzIiwid2VicGFjazovLy8uL3NyYy9VSUtleU1vZGlmaWVyRmxhZ3MudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0JpbmRpbmdzLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwia2V5Ym9hcmQiLCJkZWZhdWx0IiwiZG9jdW1lbnQiLCJib2R5IiwiYXBwZW5kIiwiZWxlbWVudCIsImZvY3VzIiwid2luZG93IiwiX29uS0IiLCJvbktCIiwiX2tiIiwicmVhZHkiLCJLZXlNYXBfMSIsIlVJS2V5TW9kaWZpZXJGbGFnc18xIiwiQmluZGluZ3NfMSIsIkNBTkNFTCIsIktCQWN0aW9ucyIsIkRFRkFVTFQiLCJQQVNTIiwiU1RSSVAiLCJfYWN0aW9uIiwiYWN0aW9uIiwia2V5Q29kZSIsImNvZGUiLCJfaG9sZGVycyIsIlNldCIsIl9jYXBzTG9ja0lEIiwiX2tleUlkIiwiZSIsImxvYyIsImxvY2F0aW9uIiwidG9Mb3dlckNhc2UiLCJfYmxvY2tFdmVudCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiX2tleVRvQ29kZU1hcCIsIktleUMiLCJLZXlJIiwiS2V5SCIsImgiLCJLZXlNIiwiQnJhY2tldExlZnQiLCJLZXlOIiwiS2V5VSIsInUiLCJLZXlFIiwidGhpcyIsImNyZWF0ZUVsZW1lbnQiLCJfa2V5TWFwIiwiX2JpbmRpbmdzIiwiX2xhbmciLCJoYXNTZWxlY3Rpb24iLCJfbGFzdEtleURvd25FdmVudCIsIl9jYXBzTG9ja1JlbWFwcGVkIiwiX3NoaWZ0UmVtYXBwZWQiLCJfcmVtb3ZlQWNjZW50cyIsIl9tZXRhU2VuZHNFc2NhcGUiLCJfYWx0U2VuZHNXaGF0IiwiX2lnbm9yZUFjY2VudHMiLCJBbHRMZWZ0IiwiQWx0UmlnaHQiLCJfbW9kc01hcCIsIlNoaWZ0TGVmdCIsIlNoaWZ0UmlnaHQiLCJNZXRhTGVmdCIsIk1ldGFSaWdodCIsIkNvbnRyb2xMZWZ0IiwiQ29udHJvbFJpZ2h0IiwiQ2Fwc0xvY2siLCJfZG93bk1hcCIsIl91cE1hcCIsIl9tb2RzIiwiU2hpZnQiLCJBbHQiLCJNZXRhIiwiQ29udHJvbCIsIl91cCIsIl9kb3duIiwiX2NhcHR1cmVNb2RlIiwiX3ZvaWNlU3RyaW5nIiwiX3VwZGF0ZVVJS2l0TW9kc0lmTmVlZGVkIiwibW9kcyIsInR5cGUiLCJ0b1VJS2l0RmxhZ3MiLCJvcCIsIl9vbktleURvd24iLCJpc0NvbXBvc2luZyIsImV2ZW50Iiwia2V5SWQiLCJhZGQiLCJfY2FwdHVyZSIsImNvbnNvbGUiLCJsb2ciLCJiaW5kaW5nIiwibWF0Y2giLCJBcnJheSIsImZyb20iLCJoYXMiLCJkZWxldGUiLCJfZXhlY0JpbmRpbmciLCJkb3duT3ZlcnJpZGUiLCJtb2QiLCJfbW9kIiwiaGFuZGxlZCIsIl9oYW5kbGVLZXlEb3duS2V5IiwiX2hhbmRsZUtleURvd24iLCJfb25CZWZvcmVJbnB1dCIsImlucHV0VHlwZSIsIl9vdXRwdXQiLCJkYXRhIiwiX29uSW5wdXQiLCJfb25LZXlVcCIsInVwT3ZlcnJpZGUiLCJrZXlJbmZvIiwia2V5TWFwIiwiYWx0Iiwic2l6ZSIsImN0cmwiLCJtZXRhIiwic2hpZnQiLCJrZXlEb3duIiwiY3RybEtleSIsIl9wYXRjaEtleURvd24iLCJrZXlEZWYiLCJnZXRLZXlEZWYiLCJyZXNvbHZlZEFjdGlvblR5cGUiLCJnZXRBY3Rpb24iLCJzcmMiLCJ0ZXN0Iiwia2V5Q2FwIiwib3V0Iiwic3RyIiwicmVzIiwibm9ybWFsaXplIiwicmVwbGFjZSIsInRtcCIsInRvVXBwZXJDYXNlIiwibm9ybWFsIiwibGVuZ3RoIiwic3Vic3RyIiwiaW1vZCIsImNoYXJDb2RlQXQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhY3Rpb25TdHIiLCJ0b1N0cmluZyIsIndhcm4iLCJKU09OIiwic3RyaW5naWZ5IiwiX29uSU1FIiwiY2xlYXIiLCJfc3RhdGVSZXNldCIsImtleUlkcyIsInZhbHVlcyIsIl9jb25maWdLZXkiLCJkb3duIiwiaWQiLCJ1cCIsImlnbm9yZUFjY2VudHMiLCJfY29uZmlnIiwiY2ZnIiwiX3Jlc2V0IiwicmVzZXQiLCJjYXBzTG9jayIsImNvbW1hbmQiLCJsZWZ0IiwicmlnaHQiLCJjb250cm9sIiwib3B0aW9uIiwiZXhwYW5kRm4iLCJmbiIsImV4cGFuZEN1cnNvciIsImN1cnNvciIsIl90b2dnbGVDYXB0dXJlTW9kZSIsInZhbCIsIl9vblRvb2xiYXJNb2RzIiwiZmxhZ3MiLCJVSUtpdEZsYWdzVG9PYmplY3QiLCJfb25Ub29sYmFyUHJlc3MiLCJwYXJ0cyIsInNwbGl0IiwicGFyc2VJbnQiLCJjbWQiLCJhcmciLCJfaGFuZGxlQ2Fwc0xvY2tEb3duIiwiX2hhbmRsZUxhbmciLCJfaGFuZGxlR3VhcmQiLCJpbnB1dCIsInNldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJibHVyIiwib3ZlcnJpZGUiLCJsYW5nIiwiY2hhciIsImhleCIsImxlbiIsImhleF90b19hc2NpaSIsImFyZ3MiLCJtZXNzYWdlIiwiYXNzaWduIiwid2Via2l0IiwibWVzc2FnZUhhbmRsZXJzIiwicG9zdE1lc3NhZ2UiLCJFU0MiLCJDU0kiLCJTUzMiLCJERUwiLCJjdGwiLCJjaCIsIl91bmtub3duS2V5RGVmIiwiX2RlZnMiLCJfb25DdHJsTnVtIiwiZGVmIiwiX29uQWx0TnVtIiwiX29uTWV0YU51bSIsIl9vblpvb20iLCJfb25TZWwiLCJkaXIiLCJncmFuIiwiX2tleWJvYXJkIiwiYWRkS2V5RGVmIiwicmVzb2x2ZSIsImsiLCJhIiwiYiIsInNoIiwiYnMiLCJhYyIsInNsIiwib25DdHJsTnVtIiwib25BbHROdW0iLCJvbk1ldGFOdW0iLCJvblpvb20iLCJVSUtleU1vZGlmaWVyQWxwaGFTaGlmdCIsIlVJS2V5TW9kaWZpZXJTaGlmdCIsIlVJS2V5TW9kaWZpZXJDb250cm9sIiwiVUlLZXlNb2RpZmllckFsdGVybmF0ZSIsIlVJS2V5TW9kaWZpZXJDb21tYW5kIiwiY2Fwc0tleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsIl9zdGFjayIsIl9tYXAiLCJrZXlzIiwiZm5zIiwic2xpY2UiLCJudW1JZCIsInB1c2giLCJfZXhwYW5kQmluZGluZyIsImFycm93cyIsImFycm93IiwiY3VyIiwibWFwIiwic29ydCIsImRvdWJsZUtleXMiLCJpZExlZnQiLCJpZFJpZ2h0Iiwic2hpZnRMb2MiLCJjb250cm9sTG9jIiwib3B0aW9uTG9jIiwiY29tbWFuZExvYyIsInJvdyIsImlkeCIsImluZGV4T2YiLCJqb2luIiwia2V5c1BhdGgiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4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R3dFLEVBQUksQ0FBRW5FLFFBQVMsSUFBSzJHLE9BQVEsT0FBUVEsT0FBUXBDLEVBQUl3RyxFQUFNLElBQUtELEVBQU0sS0FBTXZGLEtBQU1wRyxFQUFTa0csSUFBS3lGLEVBQU0sTUFBT3RGLEtBQU1yRyxJQUM5R3dFLEVBQUksQ0FBRW5FLFFBQVMsSUFBSzJHLE9BQVEsT0FBUVEsT0FBUW1FLEVBQU0sTUFBT3ZGLEtBQU1wRyxFQUFTa0csSUFBS3lGLEVBQU0sTUFBT3RGLEtBQU1yRyxJQUNoR3dFLEVBQUksQ0FBRW5FLFFBQVMsSUFBSzJHLE9BQVEsT0FBUVEsT0FBUW1FLEVBQU0sTUFBT3ZGLEtBQU1wRyxFQUFTa0csSUFBS3lGLEVBQU0sTUFBT3RGLEtBQU1yRyxJQUNoR3dFLEVBQUksQ0FBRW5FLFFBQVMsSUFBSzJHLE9BQVEsT0FBUVEsT0FBUW1FLEVBQU0sTUFBT3ZGLEtBQU1wRyxFQUFTa0csSUFBS3lGLEVBQU0sTUFBT3RGLEtBQU1yRyxJQUNoR3dFLEVBQUksQ0FBRW5FLFFBQVMsSUFBSzJHLE9BQVEsT0FBUVEsT0FBUW1FLEVBQU0sTUFBT3ZGLEtBQU1wRyxFQUFTa0csSUFBS3lGLEVBQU0sTUFBT3RGLEtBQU1yRyxJQUNoR3dFLEVBQUksQ0FBRW5FLFFBQVMsSUFBSzJHLE9BQVEsT0FBUVEsT0FBUW1FLEVBQU0sTUFBT3ZGLEtBQU1wRyxFQUFTa0csSUFBS3lGLEVBQU0sTUFBT3RGLEtBQU1yRyxJQUNoR3dFLEVBQUksQ0FBRW5FLFFBQVMsSUFBSzJHLE9BQVEsUUFBU1EsT0FBUW1FLEVBQU0sTUFBT3ZGLEtBQU1wRyxFQUFTa0csSUFBS3lGLEVBQU0sTUFBT3RGLEtBQU1yRyxJQUNqR3dFLEVBQUksQ0FBRW5FLFFBQVMsSUFBSzJHLE9BQVEsUUFBU1EsT0FBUW1FLEVBQU0sTUFBT3ZGLEtBQU1wRyxFQUFTa0csSUFBS3lGLEVBQU0sTUFBT3RGLEtBQU1yRyxJQUNqR3dFLEVBQUksQ0FBRW5FLFFBQVMsSUFBSzJHLE9BQVEsUUFBU1EsT0FBUW1FLEVBQU0sTUFBT3ZGLEtBQU1wRyxF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QU8sR0FFaEIsTUFBTTNGLEdBQ0YsSUFBSWtILEVBQVdsSCxFQUFPc0csT0FBT1csS0FBSyxLQUVsQyxPQURhM04sS0FBS3FNLEtBQUt1QiIsImZpbGUiOiJrYi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgS2V5Ym9hcmRfMSA9IHJlcXVpcmUoXCIuL0tleWJvYXJkXCIpO1xudmFyIGtleWJvYXJkID0gbmV3IEtleWJvYXJkXzEuZGVmYXVsdCgpO1xuZnVuY3Rpb24gaW5zdGFsbCgpIHtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChrZXlib2FyZC5lbGVtZW50KTtcbiAgICBrZXlib2FyZC5mb2N1cyh0cnVlKTtcbiAgICB3aW5kb3cuX29uS0IgPSBrZXlib2FyZC5vbktCO1xuICAgIHdpbmRvdy5fa2IgPSBrZXlib2FyZDtcbiAgICBrZXlib2FyZC5yZWFkeSgpO1xufVxuaW5zdGFsbCgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBLZXlNYXBfMSA9IHJlcXVpcmUoXCIuL0tleU1hcFwiKTtcbmNvbnN0IFVJS2V5TW9kaWZpZXJGbGFnc18xID0gcmVxdWlyZShcIi4vVUlLZXlNb2RpZmllckZsYWdzXCIpO1xuY29uc3QgQmluZGluZ3NfMSA9IHJlcXVpcmUoXCIuL0JpbmRpbmdzXCIpO1xuY29uc3QgQ0FOQ0VMID0gS2V5TWFwXzEuS0JBY3Rpb25zLkNBTkNFTDtcbmNvbnN0IERFRkFVTFQgPSBLZXlNYXBfMS5LQkFjdGlvbnMuREVGQVVMVDtcbmNvbnN0IFBBU1MgPSBLZXlNYXBfMS5LQkFjdGlvbnMuUEFTUztcbmNvbnN0IFNUUklQID0gS2V5TWFwXzEuS0JBY3Rpb25zLlNUUklQO1xuZnVuY3Rpb24gaGV4X3RvX2FzY2lpKGhleCkge1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBsZXQgbGVuID0gaGV4Lmxlbmd0aDtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IGxlbjsgbiArPSAyKSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleC5zdWJzdHIobiwgMiksIDE2KSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5mdW5jdGlvbiBfYWN0aW9uKGFjdGlvbikge1xuICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgIGNhc2UgJ2VzY2FwZSc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtleUNvZGU6IDI3LFxuICAgICAgICAgICAgICAgIGNvZGU6ICdbRVNDXScsXG4gICAgICAgICAgICAgICAga2V5OiAnW0VTQ10nLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSAndGFiJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5Q29kZTogOSxcbiAgICAgICAgICAgICAgICBjb2RlOiAnW1RBQl0nLFxuICAgICAgICAgICAgICAgIGtleTogJ1tUQUJdJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5jb25zdCBfaG9sZGVycyA9IG5ldyBTZXQoW1xuICAgICcyMDowJyxcbiAgICAnMTY6MScsXG4gICAgJzE2OjInLFxuICAgICcxNzoxJyxcbiAgICAnMTc6MicsXG4gICAgJzE4OjEnLFxuICAgICcxODoyJyxcbiAgICAnOTE6MScsXG4gICAgJzkxOjInLFxuICAgICc5MzowJyxcbl0pO1xuY29uc3QgX2NhcHNMb2NrSUQgPSAnMjA6MCc7XG4vLyBXZSB0cmFjayBrZXkgYnkga2V5Q29kZSwgY29kZSwgbG9jYXRpb24gYW5kIGtleVxuZnVuY3Rpb24gX2tleUlkKGUpIHtcbiAgICBsZXQga2V5Q29kZSA9IGUua2V5Q29kZSA9PSAyMjkgPyAwIDogZS5rZXlDb2RlO1xuICAgIGxldCBsb2MgPSBlLmxvY2F0aW9uO1xuICAgIGlmIChrZXlDb2RlKSB7XG4gICAgICAgIC8vIHdlIGNhbiBpZGVudGl0Znkgd2l0aCBwYWlyIGtleUNvZGUgYW5kIGxvY1xuICAgICAgICByZXR1cm4gYCR7a2V5Q29kZX06JHtsb2N9YDtcbiAgICB9XG4gICAgbGV0IGtleSA9IChlLmtleSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gYCR7a2V5Q29kZX06JHtsb2N9OiR7a2V5fWA7XG59XG5mdW5jdGlvbiBfcmVtb3ZlQWNjZW50cyhzdHIpIHtcbiAgICBsZXQgcmVzID0gc3RyLm5vcm1hbGl6ZSgnTkZEJykucmVwbGFjZSgvW1xcdTAzMDAtXFx1MDM2Zl0vZywgJycpO1xuICAgIGxldCB0bXAgPSByZXMucmVwbGFjZSgvXltcXHUwMmM2XFx1MDBhOFxcdTAwYjRcXHUwMmRjXFx1MDA2MF0vLCAnJyk7XG4gICAgaWYgKHRtcCkge1xuICAgICAgICByZXMgPSB0bXA7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBfYmxvY2tFdmVudChlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbn1cbmNvbnN0IF9rZXlUb0NvZGVNYXAgPSB7XG4gICAgS2V5QzogNjcsXG4gICAgYzogNjcsXG4gICAgS2V5STogNzMsXG4gICAgaTogNzMsXG4gICAgS2V5SDogNzIsXG4gICAgaDogNzIsXG4gICAgS2V5TTogNzcsXG4gICAgbTogNzcsXG4gICAgQnJhY2tldExlZnQ6IDIxOSxcbiAgICAnWyc6IDc3LFxuICAgIEtleU46IDc4LFxuICAgIG46IDc4LFxuICAgIEtleVU6IDg1LFxuICAgIHU6IDg1LFxuICAgIEtleUU6IDY5LFxuICAgIGU6IDY5LFxufTtcbmZ1bmN0aW9uIF9wYXRjaEtleURvd24oa2V5RG93biwgZSkge1xuICAgIGlmICghZSkge1xuICAgICAgICByZXR1cm4ga2V5RG93bjtcbiAgICB9XG4gICAgaWYgKGUuY3RybEtleSkge1xuICAgICAgICBpZiAoKGUua2V5Q29kZSA9PSA5ICYmIGUuY29kZSA9PSAnS2V5SScpIHx8XG4gICAgICAgICAgICAoZS5rZXlDb2RlID09IDggJiYgZS5jb2RlID09ICdLZXlIJykgfHxcbiAgICAgICAgICAgIChlLmtleUNvZGUgPT0gMTMgJiYgZS5jb2RlID09ICdLZXlDJykgfHxcbiAgICAgICAgICAgIChlLmtleUNvZGUgPT0gMTMgJiYgZS5jb2RlID09ICdLZXlNJykgfHxcbiAgICAgICAgICAgIChlLmtleUNvZGUgPT0gMjcgJiYgZS5jb2RlID09ICdCcmFja2V0TGVmdCcpKSB7XG4gICAgICAgICAgICBrZXlEb3duLmtleUNvZGUgPSBfa2V5VG9Db2RlTWFwW2UuY29kZV0gfHwga2V5RG93bi5rZXlDb2RlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXlEb3duO1xufVxuY2xhc3MgS2V5Ym9hcmQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICB0aGlzLl9rZXlNYXAgPSBuZXcgS2V5TWFwXzEuZGVmYXVsdCh0aGlzKTtcbiAgICAgICAgdGhpcy5fYmluZGluZ3MgPSBuZXcgQmluZGluZ3NfMS5kZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuX2xhbmcgPSAnZW4nO1xuICAgICAgICB0aGlzLmhhc1NlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9sYXN0S2V5RG93bkV2ZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2Fwc0xvY2tSZW1hcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zaGlmdFJlbWFwcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3JlbW92ZUFjY2VudHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbWV0YVNlbmRzRXNjYXBlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fYWx0U2VuZHNXaGF0ID0gJ2VzY2FwZSc7XG4gICAgICAgIHRoaXMuX2lnbm9yZUFjY2VudHMgPSB7XG4gICAgICAgICAgICBBbHRMZWZ0OiB0cnVlLFxuICAgICAgICAgICAgQWx0UmlnaHQ6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX21vZHNNYXAgPSB7XG4gICAgICAgICAgICBTaGlmdExlZnQ6ICdTaGlmdCcsXG4gICAgICAgICAgICBTaGlmdFJpZ2h0OiAnU2hpZnQnLFxuICAgICAgICAgICAgQWx0TGVmdDogJ0VzY2FwZScsXG4gICAgICAgICAgICBBbHRSaWdodDogJ0VzY2FwZScsXG4gICAgICAgICAgICBNZXRhTGVmdDogJ01ldGEnLFxuICAgICAgICAgICAgTWV0YVJpZ2h0OiAnTWV0YScsXG4gICAgICAgICAgICBDb250cm9sTGVmdDogJ0NvbnRyb2wnLFxuICAgICAgICAgICAgQ29udHJvbFJpZ2h0OiAnQ29udHJvbCcsXG4gICAgICAgICAgICBDYXBzTG9jazogJycsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2Rvd25NYXAgPSB7fTtcbiAgICAgICAgdGhpcy5fdXBNYXAgPSB7fTtcbiAgICAgICAgdGhpcy5fbW9kcyA9IHtcbiAgICAgICAgICAgIFNoaWZ0OiBuZXcgU2V0KCksXG4gICAgICAgICAgICBBbHQ6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIE1ldGE6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIENvbnRyb2w6IG5ldyBTZXQoKSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fdXAgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8vIGN1c3RvbSBzaG9ydGN1dHMgdHJhY2tlclxuICAgICAgICB0aGlzLl9kb3duID0gbmV3IFNldCgpO1xuICAgICAgICAvLyBSZXBvcnRzIGV2ZXJ5IGtleSBkb3duXG4gICAgICAgIHRoaXMuX2NhcHR1cmVNb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ZvaWNlU3RyaW5nID0gJyc7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVVJS2l0TW9kc0lmTmVlZGVkID0gKGUpID0+IHtcbiAgICAgICAgICAgIGxldCBjb2RlID0gZS5jb2RlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NhcHNMb2NrUmVtYXBwZWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgbW9kcztcbiAgICAgICAgICAgICAgICBpZiAoZS50eXBlID09ICdrZXl1cCcgJiYgY29kZSA9PSAnQ2Fwc0xvY2snKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZHMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kcyA9IFVJS2V5TW9kaWZpZXJGbGFnc18xLnRvVUlLaXRGbGFncyhlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgS2V5TWFwXzEub3AoJ21vZHMnLCB7IG1vZHM6IG1vZHMgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29kZSA9PSAnQWx0TGVmdCcgfHwgY29kZSA9PSAnQWx0UmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lnbm9yZUFjY2VudHNbY29kZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PSAna2V5ZG93bicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEtleU1hcF8xLm9wKCdndWFyZC1pbWUtb24nLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBLZXlNYXBfMS5vcCgnZ3VhcmQtaW1lLW9mZicsIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYmxvY2tFdmVudChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX29uS2V5RG93biA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5pc0NvbXBvc2luZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RLZXlEb3duRXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBldmVudCA9IGU7XG4gICAgICAgICAgICAvLyBpT1Mgc2VuZHMgMjI5IHNvbWV0aW1lcyBmb3IgcmVwZWF0ZWQgZXZlbnRzXG4gICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAyMjkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGFzdEtleURvd25FdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudCA9IHRoaXMuX2xhc3RLZXlEb3duRXZlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWFkXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0S2V5RG93bkV2ZW50ID0gZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9jYXB0dXJlTW9kZSkge1xuICAgICAgICAgICAgICAgIGxldCBrZXlJZCA9IF9rZXlJZCArICctJyArIGV2ZW50LmNvZGU7XG4gICAgICAgICAgICAgICAgdGhpcy5fZG93bi5hZGQoa2V5SWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhcHR1cmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVVSUtpdE1vZHNJZk5lZWRlZChldmVudCk7XG4gICAgICAgICAgICAgICAgX2Jsb2NrRXZlbnQoZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGtleUlkID0gX2tleUlkKGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuX2Rvd24uYWRkKGtleUlkKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkb3duJywgdGhpcy5fZG93bik7XG4gICAgICAgICAgICBsZXQgYmluZGluZyA9IHRoaXMuX2JpbmRpbmdzLm1hdGNoKEFycmF5LmZyb20odGhpcy5fZG93bikpO1xuICAgICAgICAgICAgaWYgKCFfaG9sZGVycy5oYXMoa2V5SWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZG93bi5kZWxldGUoa2V5SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJpbmRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9leGVjQmluZGluZyhiaW5kaW5nLCBlKTtcbiAgICAgICAgICAgICAgICBfYmxvY2tFdmVudChlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZG93bk92ZXJyaWRlID0gdGhpcy5fZG93bk1hcFtrZXlJZF07XG4gICAgICAgICAgICBsZXQgbW9kID0gdGhpcy5fbW9kKHRoaXMuX21vZHNNYXBbZXZlbnQuY29kZV0pO1xuICAgICAgICAgICAgbGV0IGhhbmRsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChkb3duT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVkID0gIShtb2QgJiYgdGhpcy5fbW9kc1ttb2RdLmhhcyhrZXlJZCkpO1xuICAgICAgICAgICAgICAgIGlmICghaGFuZGxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVLZXlEb3duS2V5KGRvd25PdmVycmlkZSwgZSk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb2QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RzW21vZF0uYWRkKGtleUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB1cE92ZXJyaWRlID0gdGhpcy5fdXBNYXBba2V5SWRdO1xuICAgICAgICAgICAgaWYgKHVwT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cC5hZGQoa2V5SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVUlLaXRNb2RzSWZOZWVkZWQoZXZlbnQpO1xuICAgICAgICAgICAgaWYgKCFoYW5kbGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlS2V5RG93bihldmVudC5rZXlDb2RlLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb25CZWZvcmVJbnB1dCA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fbGFuZyA9PSAnZGljdGF0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZvaWNlU3RyaW5nID0gZS5kYXRhO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGUuaW5wdXRUeXBlID09ICdpbnNlcnRUZXh0Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuX291dHB1dChlLmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2Jsb2NrRXZlbnQoZSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIHByZXZlbnQgc2ltcGxlIGlucHV0IGZvciBJTUUgbW9kZSAobGlrZSAxLCAyLCAzIGtleXMpXG4gICAgICAgIHRoaXMuX29uSW5wdXQgPSAoZSkgPT4gX2Jsb2NrRXZlbnQoZSk7XG4gICAgICAgIHRoaXMuX29uS2V5VXAgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fbGFzdEtleURvd25FdmVudCA9IG51bGw7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FwdHVyZU1vZGUpIHtcbiAgICAgICAgICAgICAgICBsZXQga2V5SWQgPSBfa2V5SWQoZSkgKyAnLScgKyBlLmNvZGU7XG4gICAgICAgICAgICAgICAgdGhpcy5fZG93bi5kZWxldGUoa2V5SWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhcHR1cmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVVSUtpdE1vZHNJZk5lZWRlZChlKTtcbiAgICAgICAgICAgICAgICBfYmxvY2tFdmVudChlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQga2V5SWQgPSBfa2V5SWQoZSk7XG4gICAgICAgICAgICB0aGlzLl9kb3duLmRlbGV0ZShrZXlJZCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygndXAnLCBrZXlJZCwgdGhpcy5fZG93bik7XG4gICAgICAgICAgICBsZXQgbW9kID0gdGhpcy5fbW9kKHRoaXMuX21vZHNNYXBbZS5jb2RlXSk7XG4gICAgICAgICAgICBpZiAobW9kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kc1ttb2RdLmRlbGV0ZShrZXlJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVVSUtpdE1vZHNJZk5lZWRlZChlKTtcbiAgICAgICAgICAgIGxldCB1cE92ZXJyaWRlID0gdGhpcy5fdXBNYXBba2V5SWRdO1xuICAgICAgICAgICAgaWYgKHVwT3ZlcnJpZGUgJiYgdGhpcy5fdXAuaGFzKGtleUlkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUtleURvd25LZXkodXBPdmVycmlkZSwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfYmxvY2tFdmVudChlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5faGFuZGxlS2V5RG93biA9IChrZXlDb2RlLCBlKSA9PiB7XG4gICAgICAgICAgICBsZXQga2V5SW5mbyA9IHtcbiAgICAgICAgICAgICAgICBrZXlDb2RlLFxuICAgICAgICAgICAgICAgIGtleTogJycsXG4gICAgICAgICAgICAgICAgY29kZTogJ1VuaWRlbnRpZmllZCcsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgICBrZXlJbmZvLmNvZGUgPSBlLmNvZGU7XG4gICAgICAgICAgICAgICAga2V5SW5mby5rZXkgPSBlLmtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUtleURvd25LZXkoa2V5SW5mbywgZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2hhbmRsZUtleURvd25LZXkgPSAoa2V5SW5mbywgZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGtleU1hcCA9IHRoaXMuX2tleU1hcDtcbiAgICAgICAgICAgIGxldCBhbHQgPSB0aGlzLl9tb2RzLkFsdC5zaXplID4gMDtcbiAgICAgICAgICAgIGxldCBjdHJsID0gdGhpcy5fbW9kcy5Db250cm9sLnNpemUgPiAwO1xuICAgICAgICAgICAgbGV0IG1ldGEgPSB0aGlzLl9tb2RzLk1ldGEuc2l6ZSA+IDA7XG4gICAgICAgICAgICBsZXQgc2hpZnQgPSB0aGlzLl9tb2RzLlNoaWZ0LnNpemUgPiAwO1xuICAgICAgICAgICAgbGV0IGNvZGUgPSBrZXlJbmZvLmNvZGU7XG4gICAgICAgICAgICBsZXQga2V5ID0ga2V5SW5mby5rZXk7XG4gICAgICAgICAgICBsZXQga2V5Q29kZSA9IGtleUluZm8ua2V5Q29kZTtcbiAgICAgICAgICAgIGxldCBrZXlEb3duID0gX3BhdGNoS2V5RG93bih7IGtleSwgY29kZSwga2V5Q29kZSwgYWx0LCBjdHJsLCBtZXRhLCBzaGlmdCB9LCBlKTtcbiAgICAgICAgICAgIGxldCBrZXlEZWYgPSBrZXlNYXAuZ2V0S2V5RGVmKGtleURvd24ua2V5Q29kZSk7XG4gICAgICAgICAgICB2YXIgcmVzb2x2ZWRBY3Rpb25UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEFjdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRBY3Rpb25UeXBlID0gbmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0ga2V5RGVmW25hbWVdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gYWN0aW9uLmNhbGwoa2V5TWFwLCBrZXlEb3duLCBrZXlEZWYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSBERUZBVUxUICYmIG5hbWUgIT0gJ25vcm1hbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gZ2V0QWN0aW9uKCdub3JtYWwnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBhY3Rpb247XG4gICAgICAgICAgICBpZiAoY3RybCkge1xuICAgICAgICAgICAgICAgIGFjdGlvbiA9IGdldEFjdGlvbignY3RybCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWx0KSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gZ2V0QWN0aW9uKCdhbHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG1ldGEpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24gPSBnZXRBY3Rpb24oJ21ldGEnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjdGlvbiA9IGdldEFjdGlvbignbm9ybWFsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuaGFzU2VsZWN0aW9uICYmXG4gICAgICAgICAgICAgICAgKGFjdGlvbiA9PT0gUEFTUyB8fCAoYWN0aW9uID09PSBERUZBVUxUICYmICEoY3RybCB8fCBhbHQgfHwgbWV0YSkpKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMga2V5IGlzIHN1cHBvc2VkIHRvIGJlIGhhbmRsZWQgYnkgdGhlIGJyb3dzZXIsIG9yIGl0IGlzIGFuXG4gICAgICAgICAgICAgICAgLy8gdW5tb2RpZmllZCBrZXkgd2l0aCB0aGUgZGVmYXVsdCBhY3Rpb24sIHRoZW4gZXhpdCB0aGlzIGV2ZW50IGhhbmRsZXIuXG4gICAgICAgICAgICAgICAgLy8gSWYgaXQncyBhbiB1bm1vZGlmaWVkIGtleSwgaXQnbGwgYmUgaGFuZGxlZCBpbiBvbktleVByZXNzIHdoZXJlIHdlXG4gICAgICAgICAgICAgICAgLy8gY2FuIHRlbGwgZm9yIHN1cmUgd2hpY2ggQVNDSUkgY29kZSB0byBpbnNlcnQuXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGJsb2NrIG5lZWRzIHRvIGNvbWUgYmVmb3JlIHRoZSBTVFJJUCB0ZXN0LCBvdGhlcndpc2Ugd2UnbGwgc3RyaXBcbiAgICAgICAgICAgICAgICAvLyB0aGUgbW9kaWZpZXIgYW5kIHRoaW5rIGl0J3Mgb2sgdG8gbGV0IHRoZSBicm93c2VyIGhhbmRsZSB0aGUga2V5cHJlc3MuXG4gICAgICAgICAgICAgICAgLy8gVGhlIGJyb3dzZXIgd29uJ3Qga25vdyB3ZSdyZSB0cnlpbmcgdG8gaWdub3JlIHRoZSBtb2RpZmllcnMgYW5kIG1pZ2h0XG4gICAgICAgICAgICAgICAgLy8gcGVyZm9ybSBzb21lIGRlZmF1bHQgYWN0aW9uLlxuICAgICAgICAgICAgICAgIC8vICByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gUEFTUyAmJiAha2V5SW5mby5zcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgbm9uUHJpbnRhYmxlID0gL15cXFtcXHcrXFxdJC8udGVzdChrZXlEZWYua2V5Q2FwKTtcbiAgICAgICAgICAgICAgICBpZiAobm9uUHJpbnRhYmxlICYmICFrZXlJbmZvLnNyYykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVBY2NlbnRzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogbWF5IGJlIHJlbW92ZSBhY2NlbnRzIG9ubHkgYWZ0ZXIgb3B0aW9ucyBrZXkgaXMgcHJlc3NlZC5cbiAgICAgICAgICAgICAgICBsZXQgb3V0ID0gdGhpcy5fcmVtb3ZlQWNjZW50cyA/IF9yZW1vdmVBY2NlbnRzKGtleSkgOiBrZXk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQWNjZW50cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYXBzTG9ja1JlbWFwcGVkIHx8IHRoaXMuX3NoaWZ0UmVtYXBwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0KHNoaWZ0ID8gb3V0LnRvVXBwZXJDYXNlKCkgOiBvdXQudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vdXRwdXQob3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX2Jsb2NrRXZlbnQoZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQWNjZW50cyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gU1RSSVApIHtcbiAgICAgICAgICAgICAgICBhbHQgPSBjdHJsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYWN0aW9uID0ga2V5RGVmLm5vcm1hbDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IGFjdGlvbi5jYWxsKGtleU1hcCwga2V5RG93biwga2V5RGVmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PSBERUZBVUxUICYmIGtleURlZi5rZXlDYXAubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0ga2V5RGVmLmtleUNhcC5zdWJzdHIoc2hpZnQgPyAxIDogMCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2Jsb2NrRXZlbnQoZSk7XG4gICAgICAgICAgICBpZiAoYWN0aW9uID09PSBDQU5DRUwgfHwgdGhpcy5oYXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWN0aW9uICE9PSBERUZBVUxUICYmIHR5cGVvZiBhY3Rpb24gIT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSW52YWxpZCBhY3Rpb246ICcgKyBKU09OLnN0cmluZ2lmeShhY3Rpb24pKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdHJpcCB0aGUgbW9kaWZpZXIgdGhhdCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIGFjdGlvbiwgc2luY2Ugd2UgYXNzdW1lIHRoYXRcbiAgICAgICAgICAgIC8vIG1vZGlmaWVyIGhhcyBhbHJlYWR5IGJlZW4gYWNjb3VudGVkIGZvciBpbiB0aGUgYWN0aW9uLlxuICAgICAgICAgICAgaWYgKHJlc29sdmVkQWN0aW9uVHlwZSA9PSAnY3RybCcpIHtcbiAgICAgICAgICAgICAgICBjdHJsID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyZXNvbHZlZEFjdGlvblR5cGUgPT0gJ2FsdCcpIHtcbiAgICAgICAgICAgICAgICBhbHQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlc29sdmVkQWN0aW9uVHlwZSA9PSAnbWV0YScpIHtcbiAgICAgICAgICAgICAgICBtZXRhID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaGlmdCA9IGtleURvd24uc2hpZnQ7XG4gICAgICAgICAgICBpZiAoKGFsdCB8fCBjdHJsIHx8IHNoaWZ0IHx8IG1ldGEpICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGFjdGlvbiA9PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgIGFjdGlvbi5zdWJzdHIoMCwgMikgPT0gJ1xceDFiWycpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgYWN0aW9uIGlzIGFuIGVzY2FwZSBzZXF1ZW5jZSB0aGF0IGFuZCBpdCB3YXMgdHJpZ2dlcmVkIGluIHRoZVxuICAgICAgICAgICAgICAgIC8vIHByZXNlbmNlIG9mIGEga2V5Ym9hcmQgbW9kaWZpZXIsIHdlIG1heSBuZWVkIHRvIGFsdGVyIHRoZSBhY3Rpb24gdG9cbiAgICAgICAgICAgICAgICAvLyBpbmNsdWRlIHRoZSBtb2RpZmllciBiZWZvcmUgc2VuZGluZyBpdC5cbiAgICAgICAgICAgICAgICAvLyBUaGUgbWF0aCBpcyBmdW5reSBidXQgYWxpZ25zIHcveHRlcm0uXG4gICAgICAgICAgICAgICAgbGV0IGltb2QgPSAxO1xuICAgICAgICAgICAgICAgIGlmIChzaGlmdClcbiAgICAgICAgICAgICAgICAgICAgaW1vZCArPSAxO1xuICAgICAgICAgICAgICAgIGlmIChhbHQpXG4gICAgICAgICAgICAgICAgICAgIGltb2QgKz0gMjtcbiAgICAgICAgICAgICAgICBpZiAoY3RybClcbiAgICAgICAgICAgICAgICAgICAgaW1vZCArPSA0O1xuICAgICAgICAgICAgICAgIGlmIChtZXRhKVxuICAgICAgICAgICAgICAgICAgICBpbW9kICs9IDg7XG4gICAgICAgICAgICAgICAgbGV0IG1vZCA9ICc7JyArIGltb2Q7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5sZW5ndGggPT0gMykge1xuICAgICAgICAgICAgICAgICAgICAvLyBTb21lIG9mIHRoZSBDU0kgc2VxdWVuY2VzIGhhdmUgemVybyBwYXJhbWV0ZXJzIHVubGVzcyBtb2RpZmllZC5cbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ1xceDFiWzEnICsgbW9kICsgYWN0aW9uLnN1YnN0cigyLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE90aGVycyBhbHdheXMgaGF2ZSBhdCBsZWFzdCBvbmUgcGFyYW1ldGVyLlxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPVxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnN1YnN0cigwLCBhY3Rpb24ubGVuZ3RoIC0gMSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnN1YnN0cihhY3Rpb24ubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gREVGQVVMVCkge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBrZXlEZWYua2V5Q2FwLnN1YnN0cihzaGlmdCA/IDEgOiAwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN0cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1bnNoaWZ0ZWQgPSBrZXlEZWYua2V5Q2FwLnN1YnN0cigwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb2RlID0gdW5zaGlmdGVkLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSA+PSA2NCAmJiBjb2RlIDw9IDk1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlIC0gNjQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBhY3Rpb25TdHIgPSBhY3Rpb24udG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBpZiAoYWx0ICYmIHRoaXMuX2FsdFNlbmRzV2hhdCA9PSAnOC1iaXQnICYmIGFjdGlvblN0ci5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29kZSA9IGFjdGlvblN0ci5jaGFyQ29kZUF0KDApICsgMTI4O1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBXZSByZXNwZWN0IGFsdC9tZXRhU2VuZHNFc2NhcGUgZXZlbiBpZiB0aGUga2V5bWFwIGFjdGlvbiB3YXMgYSBsaXRlcmFsXG4gICAgICAgICAgICAgICAgLy8gc3RyaW5nLiAgT3RoZXJ3aXNlLCBldmVyeSBvdmVycmlkZGVuIGFsdC9tZXRhIGFjdGlvbiB3b3VsZCBoYXZlIHRvXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgYWx0L21ldGFTZW5kc0VzY2FwZS5cbiAgICAgICAgICAgICAgICBpZiAoKGFsdCAmJiB0aGlzLl9hbHRTZW5kc1doYXQgPT0gJ2VzY2FwZScpIHx8XG4gICAgICAgICAgICAgICAgICAgIChtZXRhICYmIHRoaXMuX21ldGFTZW5kc0VzY2FwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ1xceDFiJyArIGFjdGlvblN0cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX291dHB1dChhY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdhY3Rpb24gaXMgbm90IGEgc3RyaW5nJywgYWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb25JTUUgPSAoZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHR5cGUgPSBlLnR5cGU7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IGUuZGF0YSB8fCAnJztcbiAgICAgICAgICAgIEtleU1hcF8xLm9wKCdpbWUnLCB7IHR5cGUsIGRhdGEgfSk7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSAnY29tcG9zaXRpb25lbmQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0KGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9vdXRwdXQgPSAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdXAuY2xlYXIoKTtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgS2V5TWFwXzEub3AoJ291dCcsIHsgZGF0YSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc3RhdGVSZXNldCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2Rvd24uY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMuX3VwLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLl9tb2RzID0ge1xuICAgICAgICAgICAgICAgIFNoaWZ0OiBuZXcgU2V0KCksXG4gICAgICAgICAgICAgICAgQWx0OiBuZXcgU2V0KCksXG4gICAgICAgICAgICAgICAgTWV0YTogbmV3IFNldCgpLFxuICAgICAgICAgICAgICAgIENvbnRyb2w6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudmFsdWUgPSAnICc7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2NhcHR1cmUgPSAoKSA9PiBLZXlNYXBfMS5vcCgnY2FwdHVyZScsIHsga2V5SWRzOiB0aGlzLl9kb3duLnZhbHVlcyB9KTtcbiAgICAgICAgdGhpcy5fY29uZmlnS2V5ID0gKGtleSkgPT4ge1xuICAgICAgICAgICAgbGV0IGNvZGUgPSBrZXkuY29kZTtcbiAgICAgICAgICAgIGxldCBkb3duID0gX2FjdGlvbihrZXkuZG93bik7XG4gICAgICAgICAgICBpZiAoZG93bikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rvd25NYXBbY29kZS5pZF0gPSBkb3duO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG1vZCA9IHRoaXMuX21vZChrZXkubW9kKTtcbiAgICAgICAgICAgIGlmIChtb2QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RzTWFwW2NvZGUuY29kZV0gPSBrZXkubW9kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHVwID0gX2FjdGlvbihrZXkudXApO1xuICAgICAgICAgICAgaWYgKHVwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBNYXBbY29kZS5pZF0gPSB1cDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb2RlLmNvZGUgPT0gJ0FsdFJpZ2h0JyB8fCBjb2RlLmNvZGUgPT0gJ0FsdExlZnQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faWdub3JlQWNjZW50c1tjb2RlLmNvZGVdID0ga2V5Lmlnbm9yZUFjY2VudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IChjZmcpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLl9iaW5kaW5ncy5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnS2V5KGNmZy5jYXBzTG9jayk7XG4gICAgICAgICAgICB0aGlzLl9jb25maWdLZXkoY2ZnLmNvbW1hbmQubGVmdCk7XG4gICAgICAgICAgICB0aGlzLl9jb25maWdLZXkoY2ZnLmNvbW1hbmQucmlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnS2V5KGNmZy5jb250cm9sLmxlZnQpO1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnS2V5KGNmZy5jb250cm9sLnJpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZ0tleShjZmcub3B0aW9uLmxlZnQpO1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnS2V5KGNmZy5vcHRpb24ucmlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnS2V5KGNmZy5zaGlmdC5sZWZ0KTtcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZ0tleShjZmcuc2hpZnQucmlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fYmluZGluZ3MuZXhwYW5kRm4oY2ZnLmZuKTtcbiAgICAgICAgICAgIHRoaXMuX2JpbmRpbmdzLmV4cGFuZEN1cnNvcihjZmcuY3Vyc29yKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fdG9nZ2xlQ2FwdHVyZU1vZGUgPSAodmFsKSA9PiAodGhpcy5fY2FwdHVyZU1vZGUgPSAhIXZhbCk7XG4gICAgICAgIHRoaXMuX29uVG9vbGJhck1vZHMgPSAodmFsKSA9PiB7XG4gICAgICAgICAgICBsZXQgZmxhZ3MgPSBVSUtleU1vZGlmaWVyRmxhZ3NfMS5VSUtpdEZsYWdzVG9PYmplY3QodmFsKTtcbiAgICAgICAgICAgIGlmIChmbGFncy5hbHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RzLkFsdC5hZGQoJ2FsdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kcy5BbHQuZGVsZXRlKCdhbHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmbGFncy5jdHJsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kcy5Db250cm9sLmFkZCgnY3RybCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kcy5Db250cm9sLmRlbGV0ZSgnY3RybCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZsYWdzLnNoaWZ0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kcy5TaGlmdC5hZGQoJ3NoaWZ0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RzLlNoaWZ0LmRlbGV0ZSgnc2hpZnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmbGFncy5tZXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kcy5NZXRhLmFkZCgnbWV0YScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kcy5NZXRhLmRlbGV0ZSgnbWV0YScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9vblRvb2xiYXJQcmVzcyA9IChrZXlJZCkgPT4ge1xuICAgICAgICAgICAgbGV0IHBhcnRzID0ga2V5SWQuc3BsaXQoLzovZyk7XG4gICAgICAgICAgICBsZXQga2V5SW5mbyA9IHtcbiAgICAgICAgICAgICAgICBrZXlDb2RlOiBwYXJzZUludChwYXJ0c1swXSwgMTApLFxuICAgICAgICAgICAgICAgIGtleTogcGFydHNbMl0gfHwgJycsXG4gICAgICAgICAgICAgICAgY29kZTogJycsXG4gICAgICAgICAgICAgICAgc3JjOiAndG9vbGJhcicsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlS2V5RG93bktleShrZXlJbmZvLCBudWxsKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbktCID0gKGNtZCwgYXJnKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGNtZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vZHMtZG93bic6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNhcHNMb2NrRG93bih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW9kcy11cCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNhcHNMb2NrRG93bihmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xhbmcnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVMYW5nKGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2d1YXJkLXVwJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlR3VhcmQodHJ1ZSwgYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZ3VhcmQtZG93bic6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUd1YXJkKGZhbHNlLCBhcmcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzZWxlY3Rpb24nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhc1NlbGVjdGlvbiA9IGFyZztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2FwdHVyZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RvZ2dsZUNhcHR1cmVNb2RlKGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Rvb2xiYXItbW9kcyc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uVG9vbGJhck1vZHMoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndG9vbGJhci1wcmVzcyc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uVG9vbGJhclByZXNzKGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0YXRlLXJlc2V0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVSZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdmb2N1cyc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXMoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29uZmlnJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29uZmlnKGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBsZXQgaW5wdXQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnYXV0b2NvbXBsZXRlJywgJ29mZicpO1xuICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3NwZWxsY2hlY2snLCAnZmFsc2UnKTtcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdhdXRvY29ycmVjdCcsICdvZmYnKTtcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdhdXRvY2FwaXRhbGl6ZScsICdub25lJyk7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnYXV0b2ZvY3VzJywgJ3RydWUnKTtcbiAgICAgICAgLy8ga2VlcCBvbmUgc3BhY2UsIHNvIGRlbGV0ZSBhbHdheXMgcmVwZWF0cyBvbiBzb2Z0d2FyZSBrYlxuICAgICAgICBpbnB1dC52YWx1ZSA9ICcgJztcbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX29uS2V5RG93bik7XG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5fb25LZXlVcCk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5fb25LZXlVcCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25zdGFydCcsIHRoaXMuX29uSU1FKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnVwZGF0ZScsIHRoaXMuX29uSU1FKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIHRoaXMuX29uSU1FKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmVpbnB1dCcsIHRoaXMuX29uQmVmb3JlSW5wdXQpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5fb25JbnB1dCk7XG4gICAgICAgIHRoaXMuX2NhcHNMb2NrUmVtYXBwZWQgPVxuICAgICAgICAgICAgdGhpcy5fbW9kc01hcFsnQ2Fwc0xvY2snXSAhPSBudWxsIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5fZG93bk1hcFtfY2Fwc0xvY2tJRF0gIT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIHRoaXMuX3VwTWFwW19jYXBzTG9ja0lEXSAhPSBudWxsO1xuICAgICAgICB0aGlzLl9zaGlmdFJlbWFwcGVkID1cbiAgICAgICAgICAgIHRoaXMuX21vZHNNYXBbJ1NoaWZ0J10gIT0gbnVsbCB8fCB0aGlzLl9tb2RzTWFwWydTaGlmdCddICE9PSAnU2hpZnQnO1xuICAgIH1cbiAgICBfbW9kKG1vZCkge1xuICAgICAgICBzd2l0Y2ggKG1vZCkge1xuICAgICAgICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgICAgICAgICB0aGlzLl9hbHRTZW5kc1doYXQgPSAnZXNjYXBlJztcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0FsdCc7XG4gICAgICAgICAgICBjYXNlICc4LWJpdCc6XG4gICAgICAgICAgICAgICAgdGhpcy5fYWx0U2VuZHNXaGF0ID0gJzgtYml0JztcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0FsdCc7XG4gICAgICAgICAgICBjYXNlICdTaGlmdCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdTaGlmdCc7XG4gICAgICAgICAgICBjYXNlICdDb250cm9sJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0NvbnRyb2wnO1xuICAgICAgICAgICAgY2FzZSAnTWV0YSc6XG4gICAgICAgICAgICAgICAgdGhpcy5fbWV0YVNlbmRzRXNjYXBlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdNZXRhJztcbiAgICAgICAgICAgIGNhc2UgJ01ldGEtRXNjYXBlJzpcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXRhU2VuZHNFc2NhcGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiAnTWV0YSc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvY3VzKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYmx1cigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlYWR5KCkge1xuICAgICAgICBLZXlNYXBfMS5vcCgncmVhZHknLCB7fSk7XG4gICAgfVxuICAgIF9oYW5kbGVDYXBzTG9ja0Rvd24oZG93bikge1xuICAgICAgICBpZiAodGhpcy5fY2FwdHVyZU1vZGUpIHtcbiAgICAgICAgICAgIGlmIChkb3duKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZG93bi5kZWxldGUoX2NhcHNMb2NrSUQgKyAnLWNhcHNsb2NrJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kb3duLmFkZChfY2Fwc0xvY2tJRCArICctY2Fwc2xvY2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2NhcHR1cmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbW9kID0gdGhpcy5fbW9kc01hcFsnQ2Fwc0xvY2snXTtcbiAgICAgICAgaWYgKGRvd24pIHtcbiAgICAgICAgICAgIHRoaXMuX2Rvd24uYWRkKF9jYXBzTG9ja0lEKTtcbiAgICAgICAgICAgIGxldCBvdmVycmlkZSA9IHRoaXMuX2Rvd25NYXBbX2NhcHNMb2NrSURdO1xuICAgICAgICAgICAgaWYgKG92ZXJyaWRlICYmICEobW9kICYmIHRoaXMuX21vZHNbbW9kXS5oYXMoX2NhcHNMb2NrSUQpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUtleURvd25LZXkob3ZlcnJpZGUsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZHNbbW9kXS5hZGQoX2NhcHNMb2NrSUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHVwT3ZlcnJpZGUgPSB0aGlzLl91cE1hcFtfY2Fwc0xvY2tJRF07XG4gICAgICAgICAgICBpZiAodXBPdmVycmlkZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwLmFkZChfY2Fwc0xvY2tJRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZG93bi5kZWxldGUoX2NhcHNMb2NrSUQpO1xuICAgICAgICBtb2QgJiYgdGhpcy5fbW9kc1ttb2RdLmRlbGV0ZShfY2Fwc0xvY2tJRCk7XG4gICAgICAgIGxldCB1cE92ZXJyaWRlID0gdGhpcy5fdXBNYXBbX2NhcHNMb2NrSURdO1xuICAgICAgICBpZiAodXBPdmVycmlkZSAmJiB0aGlzLl91cC5oYXMoX2NhcHNMb2NrSUQpKSB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVLZXlEb3duS2V5KHVwT3ZlcnJpZGUsIG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEtleWJvYXJkIGxhbmd1YWdlIGNoYW5nZVxuICAgIF9oYW5kbGVMYW5nKGxhbmcpIHtcbiAgICAgICAgdGhpcy5fbGFuZyA9IGxhbmc7XG4gICAgICAgIHRoaXMuX3N0YXRlUmVzZXQoKTtcbiAgICB9XG4gICAgX2hhbmRsZUd1YXJkKHVwLCBjaGFyKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC52YWx1ZSA9ICcgJztcbiAgICAgICAgbGV0IGtleUNvZGUgPSBfa2V5VG9Db2RlTWFwW2NoYXIgfHwgJyddIHx8IDA7XG4gICAgICAgIGxldCBrZXlJZCA9IGAke2tleUNvZGV9OjBgO1xuICAgICAgICBpZiAodGhpcy5fY2FwdHVyZU1vZGUpIHtcbiAgICAgICAgICAgIGtleUlkICs9ICctS2V5JyArIGNoYXIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXApIHtcbiAgICAgICAgICAgIHRoaXMuX2Rvd24uZGVsZXRlKGtleUlkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Rvd24uYWRkKGtleUlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY2FwdHVyZU1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhcHR1cmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXApIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUFjY2VudHMgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hhbmRsZUtleURvd24oa2V5Q29kZSwgbnVsbCk7XG4gICAgfVxuICAgIF9yZXNldCgpIHtcbiAgICAgICAgdGhpcy5oYXNTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlQWNjZW50cyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9tb2RzTWFwID0ge307XG4gICAgICAgIHRoaXMuX2Rvd25NYXAgPSB7fTtcbiAgICAgICAgdGhpcy5fdXBNYXAgPSB7fTtcbiAgICAgICAgdGhpcy5fdXAuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fZG93bi5jbGVhcigpO1xuICAgICAgICB0aGlzLl9tb2RzID0ge1xuICAgICAgICAgICAgU2hpZnQ6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIEFsdDogbmV3IFNldCgpLFxuICAgICAgICAgICAgTWV0YTogbmV3IFNldCgpLFxuICAgICAgICAgICAgQ29udHJvbDogbmV3IFNldCgpLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9pZ25vcmVBY2NlbnRzID0ge1xuICAgICAgICAgICAgQWx0TGVmdDogdHJ1ZSxcbiAgICAgICAgICAgIEFsdFJpZ2h0OiB0cnVlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBfZXhlY0JpbmRpbmcoYWN0aW9uLCBlKSB7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgICAgICAgICAgdGhpcy5fb3V0cHV0KGhleF90b19hc2NpaShhY3Rpb24udmFsdWUpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1hbmQnOlxuICAgICAgICAgICAgICAgIEtleU1hcF8xLm9wKCdjb21tYW5kJywgeyBjb21tYW5kOiBhY3Rpb24udmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwcmVzcyc6XG4gICAgICAgICAgICAgICAgbGV0IGtleUluZm8gPSBhY3Rpb24ua2V5O1xuICAgICAgICAgICAgICAgIGxldCBtb2RzID0gdGhpcy5fbW9kcztcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RzID0ge1xuICAgICAgICAgICAgICAgICAgICBTaGlmdDogbmV3IFNldCgpLFxuICAgICAgICAgICAgICAgICAgICBBbHQ6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgTWV0YTogbmV3IFNldCgpLFxuICAgICAgICAgICAgICAgICAgICBDb250cm9sOiBuZXcgU2V0KCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLnNoaWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vZHMuU2hpZnQuYWRkKCdzaGlmdCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLmN0cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9kcy5Db250cm9sLmFkZCgnY3RybCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLmFsdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb2RzLkFsdC5hZGQoJ2FsdCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLm1ldGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9kcy5NZXRhLmFkZCgnbWV0YScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVLZXlEb3duS2V5KGtleUluZm8sIGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZHMgPSBtb2RzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gS2V5Ym9hcmQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIHNvbWUgdXNlZnVsIHJlZnNcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi91aWV2ZW50cy1jb2RlLyNrZXktZnVuY3Rpb24tc2VjdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Nocm9taXVtL2h0ZXJtL2Jsb2IvbWFzdGVyL2RvYy9Db250cm9sU2VxdWVuY2VzLm1kXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBDQU5DRUwgPSBTeW1ib2woJ0NBTkNFTCcpO1xuY29uc3QgREVGQVVMVCA9IFN5bWJvbCgnREVGQVVMVCcpO1xuY29uc3QgUEFTUyA9IFN5bWJvbCgnUEFTUycpO1xuY29uc3QgU1RSSVAgPSBTeW1ib2woJ1NUUklQJyk7XG5leHBvcnRzLktCQWN0aW9ucyA9IHtcbiAgICBDQU5DRUwsXG4gICAgREVGQVVMVCxcbiAgICBQQVNTLFxuICAgIFNUUklQLFxufTtcbmZ1bmN0aW9uIG9wKG9wLCBhcmdzKSB7XG4gICAgbGV0IG1lc3NhZ2UgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpLCB7IG9wIH0pO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB3aW5kb3cud2Via2l0Lm1lc3NhZ2VIYW5kbGVycy5fa2IucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG59XG5leHBvcnRzLm9wID0gb3A7XG5jb25zdCBFU0MgPSAnXFx4MWInOyAvLyBFc2NhcGVcbmNvbnN0IENTSSA9ICdcXHgxYlsnOyAvLyBDb21tYW5kIFN0YXJ0IEluaWRpY2F0b3JcbmNvbnN0IFNTMyA9ICdcXHgxYk8nOyAvLyBTaW5nbGUtU2hpZnQgVGhyZWVcbmNvbnN0IERFTCA9ICdcXHg3Zic7IC8vIERlbGV0ZVxuY29uc3QgY3RsID0gKGNoKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgLSA2NCk7XG5jb25zdCBfdW5rbm93bktleURlZiA9IHtcbiAgICBrZXlDb2RlOiAwLFxuICAgIGtleUNhcDogJ1tVTktOT1dOXScsXG4gICAgbm9ybWFsOiBQQVNTLFxuICAgIGN0cmw6IFBBU1MsXG4gICAgYWx0OiBQQVNTLFxuICAgIG1ldGE6IFBBU1MsXG59O1xuY2xhc3MgS2V5TWFwIHtcbiAgICBjb25zdHJ1Y3RvcihrZXlib2FyZCkge1xuICAgICAgICB0aGlzLl9kZWZzID0ge307XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICB0aGlzLl9vbkN0cmxOdW0gPSAoZSwgZGVmKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGRlZi5rZXlDYXAuc3Vic3RyKDAsIDEpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnMSc6IHJldHVybiAnMSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnMic6IHJldHVybiBjdGwoJ0AnKTtcbiAgICAgICAgICAgICAgICBjYXNlICczJzogcmV0dXJuIGN0bCgnWycpO1xuICAgICAgICAgICAgICAgIGNhc2UgJzQnOiByZXR1cm4gY3RsKCdcXFxcJyk7XG4gICAgICAgICAgICAgICAgY2FzZSAnNSc6IHJldHVybiBjdGwoJ10nKTtcbiAgICAgICAgICAgICAgICBjYXNlICc2JzogcmV0dXJuIGN0bCgnXicpO1xuICAgICAgICAgICAgICAgIGNhc2UgJzcnOiByZXR1cm4gY3RsKCdfJyk7XG4gICAgICAgICAgICAgICAgY2FzZSAnOCc6IHJldHVybiBERUw7XG4gICAgICAgICAgICAgICAgY2FzZSAnOSc6IHJldHVybiAnOSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIFBBU1M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX29uQWx0TnVtID0gKGUsIGRlZikgPT4gREVGQVVMVDtcbiAgICAgICAgdGhpcy5fb25NZXRhTnVtID0gKGUsIGRlZikgPT4gREVGQVVMVDtcbiAgICAgICAgdGhpcy5fb25ab29tID0gKGUsIGRlZikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIENBTkNFTDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fb25TZWwgPSAoZSwgZGVmKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGVmLmtleUNhcCA9PSAnW0xFRlRdJyB8fCBkZWYua2V5Q2FwID09ICdoSCcpIHtcbiAgICAgICAgICAgICAgICBsZXQgZ3JhbiA9IGUuc2hpZnQgPyAnd29yZCcgOiAnY2hhcmFjdGVyJztcbiAgICAgICAgICAgICAgICBvcCgnc2VsZWN0aW9uJywgeyBkaXI6ICdsZWZ0JywgZ3JhbiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZi5rZXlDYXAgPT0gJ1tSSUdIVF0nIHx8IGRlZi5rZXlDYXAgPT0gJ2xMJykge1xuICAgICAgICAgICAgICAgIGxldCBncmFuID0gZS5zaGlmdCA/ICd3b3JkJyA6ICdjaGFyYWN0ZXInO1xuICAgICAgICAgICAgICAgIG9wKCdzZWxlY3Rpb24nLCB7IGRpcjogJ3JpZ2h0JywgZ3JhbiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZi5rZXlDYXAgPT0gJ1tVUF0nIHx8IGRlZi5rZXlDYXAgPT0gJ2tLJykge1xuICAgICAgICAgICAgICAgIG9wKCdzZWxlY3Rpb24nLCB7IGRpcjogJ2xlZnQnLCBncmFuOiAnbGluZScgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkZWYua2V5Q2FwID09ICdbRE9XTl0nIHx8IGRlZi5rZXlDYXAgPT0gJ2pKJykge1xuICAgICAgICAgICAgICAgIG9wKCdzZWxlY3Rpb24nLCB7IGRpcjogJ3JpZ2h0JywgZ3JhbjogJ2xpbmUnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGVmLmtleUNhcCA9PSAnb08nIHx8IGRlZi5rZXlDYXAgPT0gJ3hYJykge1xuICAgICAgICAgICAgICAgIG9wKCdzZWxlY3Rpb24nLCB7IGNvbW1hbmQ6ICdjaGFuZ2UnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGVmLmtleUNhcCA9PSAnbk4nICYmIGUuY3RybCkge1xuICAgICAgICAgICAgICAgIG9wKCdzZWxlY3Rpb24nLCB7IGRpcjogJ3JpZ2h0JywgZ3JhbjogJ2xpbmUnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGVmLmtleUNhcCA9PSAncFAnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUuY3RybCkge1xuICAgICAgICAgICAgICAgICAgICBvcCgnc2VsZWN0aW9uJywgeyBkaXI6ICdsZWZ0JywgZ3JhbjogJ2xpbmUnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghZS5zaGlmdCAmJiAhZS5hbHQgJiYgIWUubWV0YSkge1xuICAgICAgICAgICAgICAgICAgICBvcCgnc2VsZWN0aW9uJywgeyBjb21tYW5kOiAncGFzdGUnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZi5rZXlDYXAgPT0gJ2JCJykge1xuICAgICAgICAgICAgICAgIGlmIChlLmN0cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgb3AoJ3NlbGVjdGlvbicsIHsgZGlyOiAnbGVmdCcsIGdyYW46ICdjaGFyYWN0ZXInIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlLmFsdCkge1xuICAgICAgICAgICAgICAgICAgICBvcCgnc2VsZWN0aW9uJywgeyBkaXI6ICdsZWZ0JywgZ3JhbjogJ3dvcmQnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gPz8/XG4gICAgICAgICAgICAgICAgICAgIG9wKCdzZWxlY3Rpb24nLCB7IGRpcjogJ2xlZnQnLCBncmFuOiAnd29yZCcgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGVmLmtleUNhcCA9PSAnd1cnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUuYWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIG9wKCdzZWxlY3Rpb24nLCB7IGNvbW1hbmQ6ICdjb3B5JyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9wKCdzZWxlY3Rpb24nLCB7IGRpcjogJ3JpZ2h0JywgZ3JhbjogJ3dvcmQnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZi5rZXlDYXAgPT0gJ2ZGJykge1xuICAgICAgICAgICAgICAgIGlmIChlLmN0cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgb3AoJ3NlbGVjdGlvbicsIHsgZGlyOiAncmlnaHQnLCBncmFuOiAnY2hhcmFjdGVyJyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZS5hbHQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3AoJ3NlbGVjdGlvbicsIHsgZGlyOiAncmlnaHQnLCBncmFuOiAnd29yZCcgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGVmLmtleUNhcCA9PSAneVknKSB7XG4gICAgICAgICAgICAgICAgb3AoJ3NlbGVjdGlvbicsIHsgY29tbWFuZDogJ2NvcHknIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGVmLmtleUNhcCA9PSAnW0VTQ10nKSB7XG4gICAgICAgICAgICAgICAgb3AoJ3NlbGVjdGlvbicsIHsgY29tbWFuZDogJ2NhbmNlbCcgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gQ0FOQ0VMO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9rZXlib2FyZCA9IGtleWJvYXJkO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuICAgIGdldEtleURlZihrZXlDb2RlKSB7XG4gICAgICAgIHZhciBrZXlEZWYgPSB0aGlzLl9kZWZzW2tleUNvZGVdO1xuICAgICAgICBpZiAoa2V5RGVmKSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5RGVmO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoaXMga2V5IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgcmVnaXN0ZXJlZCwgZmFsbCBiYWNrIHRvIHRoZSB1bmtub3duXG4gICAgICAgIC8vIGtleSBtYXBwaW5nIChrZXlDb2RlID09IDApLCBhbmQgdGhlbiBhdXRvbWF0aWNhbGx5IHJlZ2lzdGVyIGl0IHRvIGF2b2lkXG4gICAgICAgIC8vIGFueSBmdXJ0aGVyIHdhcm5pbmdzIGhlcmUuXG4gICAgICAgIGNvbnNvbGUud2FybihgTm8gZGVmaW5pdGlvbiBmb3IgKGtleUNvZGUgJHtrZXlDb2RlfSlgKTtcbiAgICAgICAga2V5RGVmID0gX3Vua25vd25LZXlEZWY7XG4gICAgICAgIHRoaXMuYWRkS2V5RGVmKGtleUNvZGUsIGtleURlZik7XG4gICAgICAgIHJldHVybiBrZXlEZWY7XG4gICAgfVxuICAgIGFkZEtleURlZihrZXlDb2RlLCBkZWYpIHtcbiAgICAgICAgaWYgKGtleUNvZGUgaW4gdGhpcy5fZGVmcykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdEdXAga2V5Q29kZTogJywga2V5Q29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGVmc1trZXlDb2RlXSA9IGRlZjtcbiAgICB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX2RlZnMgPSB7fTtcbiAgICAgICAgY29uc3QgcmVzb2x2ZSA9IChhY3Rpb24sIGUsIGspID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uLmNhbGwodGhpcywgZSwgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBtb2QgPSAoYSwgYikgPT4gKGUsIGspID0+IHtcbiAgICAgICAgICAgIGxldCBhY3Rpb24gPSAhKGUuc2hpZnQgfHwgZS5jdHJsIHx8IGUuYWx0IHx8IGUubWV0YSkgPyBhIDogYjtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGFjdGlvbiwgZSwgayk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNoID0gKGEsIGIpID0+IChlLCBrKSA9PiB7XG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gIWUuc2hpZnQgPyBhIDogYjtcbiAgICAgICAgICAgIGUuc2hpZnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGFjdGlvbiwgZSwgayk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGJzID0gKGEsIGIpID0+IGE7XG4gICAgICAgIGNvbnN0IGFsdCA9IChhLCBiKSA9PiAoZSwgaykgPT4ge1xuICAgICAgICAgICAgbGV0IGFjdGlvbiA9IGUuYWx0ID8gYSA6IGI7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShhY3Rpb24sIGUsIGspO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhayA9IChhLCBiKSA9PiBhO1xuICAgICAgICBjb25zdCBhYyA9IChhLCBiKSA9PiBiO1xuICAgICAgICAvLyBpZiBpbiBzZWxlY3Rpb24gbW9kZSwgdGhhdCBoYW5kbGUgd2l0aCB0aGlzLl9vblNlbFxuICAgICAgICBjb25zdCBzbCA9IChhKSA9PiAoZSwgaykgPT4ge1xuICAgICAgICAgICAgbGV0IGFjdGlvbiA9IHRoaXMuX2tleWJvYXJkLmhhc1NlbGVjdGlvbiA/IHRoaXMuX29uU2VsIDogYTtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGFjdGlvbiwgZSwgayk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGFkZCA9IChkZWYpID0+IHRoaXMuYWRkS2V5RGVmKGRlZi5rZXlDb2RlLCBkZWYpO1xuICAgICAgICAvL2FkZCh7IGtleUNvZGU6IDAsIGtleUNhcDogJ1tVTktOT1dOXScsIG5vcm1hbDogUEFTUywgY3RybDogUEFTUywgYWx0OiBQQVNTLCBtZXRhOiBQQVNTIH0pO1xuICAgICAgICBhZGQoX3Vua25vd25LZXlEZWYpO1xuICAgICAgICAvLyBmaXJzdCByb3dcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMjcsIGtleUNhcDogJ1tFU0NdJywgbm9ybWFsOiBzbChFU0MpLCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDExMiwga2V5Q2FwOiAnW0YxXScsIG5vcm1hbDogbW9kKFNTMyArICdQJywgQ1NJICsgJ1AnKSwgY3RybDogREVGQVVMVCwgYWx0OiBDU0kgKyAnMjN+JywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTEzLCBrZXlDYXA6ICdbRjJdJywgbm9ybWFsOiBtb2QoU1MzICsgJ1EnLCBDU0kgKyAnUScpLCBjdHJsOiBERUZBVUxULCBhbHQ6IENTSSArICcyNH4nLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMTQsIGtleUNhcDogJ1tGM10nLCBub3JtYWw6IG1vZChTUzMgKyAnUicsIENTSSArICdSJyksIGN0cmw6IERFRkFVTFQsIGFsdDogQ1NJICsgJzI1ficsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDExNSwga2V5Q2FwOiAnW0Y0XScsIG5vcm1hbDogbW9kKFNTMyArICdTJywgQ1NJICsgJ1MnKSwgY3RybDogREVGQVVMVCwgYWx0OiBDU0kgKyAnMjZ+JywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTE2LCBrZXlDYXA6ICdbRjVdJywgbm9ybWFsOiBDU0kgKyAnMTV+JywgY3RybDogREVGQVVMVCwgYWx0OiBDU0kgKyAnMjh+JywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTE3LCBrZXlDYXA6ICdbRjZdJywgbm9ybWFsOiBDU0kgKyAnMTd+JywgY3RybDogREVGQVVMVCwgYWx0OiBDU0kgKyAnMjl+JywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTE4LCBrZXlDYXA6ICdbRjddJywgbm9ybWFsOiBDU0kgKyAnMTh+JywgY3RybDogREVGQVVMVCwgYWx0OiBDU0kgKyAnMzF+JywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTE5LCBrZXlDYXA6ICdbRjhdJywgbm9ybWFsOiBDU0kgKyAnMTl+JywgY3RybDogREVGQVVMVCwgYWx0OiBDU0kgKyAnMzJ+JywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTIwLCBrZXlDYXA6ICdbRjldJywgbm9ybWFsOiBDU0kgKyAnMjB+JywgY3RybDogREVGQVVMVCwgYWx0OiBDU0kgKyAnMzN+JywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTIxLCBrZXlDYXA6ICdbRjEwXScsIG5vcm1hbDogQ1NJICsgJzIxficsIGN0cmw6IERFRkFVTFQsIGFsdDogQ1NJICsgJzM0ficsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDEyMiwga2V5Q2FwOiAnW0YxMV0nLCBub3JtYWw6IENTSSArICcyM34nLCBjdHJsOiBERUZBVUxULCBhbHQ6IENTSSArICc0Mn4nLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMjMsIGtleUNhcDogJ1tGMTJdJywgbm9ybWFsOiBDU0kgKyAnMjR+JywgY3RybDogREVGQVVMVCwgYWx0OiBDU0kgKyAnNDN+JywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgY29uc3Qgb25DdHJsTnVtID0gdGhpcy5fb25DdHJsTnVtO1xuICAgICAgICBjb25zdCBvbkFsdE51bSA9IHRoaXMuX29uQWx0TnVtO1xuICAgICAgICBjb25zdCBvbk1ldGFOdW0gPSB0aGlzLl9vbk1ldGFOdW07XG4gICAgICAgIGNvbnN0IG9uWm9vbSA9IHRoaXMuX29uWm9vbTtcbiAgICAgICAgLy8gc2Vjb25kIHJvd1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxOTIsIGtleUNhcDogJ2B+Jywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBzaChjdGwoJ0AnKSwgY3RsKCdeJykpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IFBBU1MgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDQ5LCBrZXlDYXA6ICcxIScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25DdHJsTnVtLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBvbk1ldGFOdW0gfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDUwLCBrZXlDYXA6ICcyQCcsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25DdHJsTnVtLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBvbk1ldGFOdW0gfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDUxLCBrZXlDYXA6ICczIycsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25DdHJsTnVtLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBvbk1ldGFOdW0gfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDUyLCBrZXlDYXA6ICc0JCcsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25DdHJsTnVtLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBvbk1ldGFOdW0gfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDUzLCBrZXlDYXA6ICc1JScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25DdHJsTnVtLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBvbk1ldGFOdW0gfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDU0LCBrZXlDYXA6ICc2XicsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25DdHJsTnVtLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBvbk1ldGFOdW0gfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDU1LCBrZXlDYXA6ICc3JicsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25DdHJsTnVtLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBvbk1ldGFOdW0gfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDU2LCBrZXlDYXA6ICc4KicsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25DdHJsTnVtLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBvbk1ldGFOdW0gfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDU3LCBrZXlDYXA6ICc5KCcsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25DdHJsTnVtLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBvbk1ldGFOdW0gfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDQ4LCBrZXlDYXA6ICcwKScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25ab29tLCBhbHQ6IG9uQWx0TnVtLCBtZXRhOiBvblpvb20gfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDE4OSwga2V5Q2FwOiAnLV8nLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IHNoKG9uWm9vbSwgY3RsKCdfJykpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IG9uWm9vbSB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTg3LCBrZXlDYXA6ICc9KycsIG5vcm1hbDogREVGQVVMVCwgY3RybDogb25ab29tLCBhbHQ6IERFRkFVTFQsIG1ldGE6IG9uWm9vbSB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogOCwga2V5Q2FwOiAnW0JLU1BdJywgbm9ybWFsOiBicyhERUwsICdcXGInKSwgY3RybDogYnMoJ1xcYicsIERFTCksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgLy8gdGhpcmQgcm93XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDksIGtleUNhcDogJ1tUQUJdJywgbm9ybWFsOiBzaCgnXFx0JywgQ1NJICsgJ1onKSwgY3RybDogU1RSSVAsIGFsdDogUEFTUywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogODEsIGtleUNhcDogJ3FRJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ1EnKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA4Nywga2V5Q2FwOiAnd1cnLCBub3JtYWw6IHNsKERFRkFVTFQpLCBjdHJsOiBjdGwoJ1cnKSwgYWx0OiBzbChERUZBVUxUKSwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNjksIGtleUNhcDogJ2VFJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ0UnKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA4Miwga2V5Q2FwOiAnclInLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IGN0bCgnUicpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDg0LCBrZXlDYXA6ICd0VCcsIG5vcm1hbDogREVGQVVMVCwgY3RybDogY3RsKCdUJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogODksIGtleUNhcDogJ3lZJywgbm9ybWFsOiBzbChERUZBVUxUKSwgY3RybDogY3RsKCdZJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogODUsIGtleUNhcDogJ3VVJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ1UnKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA3Mywga2V5Q2FwOiAnaUknLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IGN0bCgnSScpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDc5LCBrZXlDYXA6ICdvTycsIG5vcm1hbDogc2woREVGQVVMVCksIGN0cmw6IGN0bCgnTycpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDgwLCBrZXlDYXA6ICdwUCcsIG5vcm1hbDogc2woREVGQVVMVCksIGN0cmw6IHNsKGN0bCgnUCcpKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAyMTksIGtleUNhcDogJ1t7Jywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ1snKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAyMjEsIGtleUNhcDogJ119Jywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ10nKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAyMjAsIGtleUNhcDogJ1xcXFx8Jywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ1xcXFwnKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICAvLyBmb3VydGggcm93XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDIwLCBrZXlDYXA6ICdbQ0FQU10nLCBub3JtYWw6IFBBU1MsIGN0cmw6IFBBU1MsIGFsdDogUEFTUywgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNjUsIGtleUNhcDogJ2FBJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ0EnKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA4Mywga2V5Q2FwOiAnc1MnLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IGN0bCgnUycpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDY4LCBrZXlDYXA6ICdkRCcsIG5vcm1hbDogREVGQVVMVCwgY3RybDogY3RsKCdEJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNzAsIGtleUNhcDogJ2ZGJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBzbChjdGwoJ0YnKSksIGFsdDogc2woREVGQVVMVCksIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDcxLCBrZXlDYXA6ICdnRycsIG5vcm1hbDogREVGQVVMVCwgY3RybDogY3RsKCdHJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNzIsIGtleUNhcDogJ2hIJywgbm9ybWFsOiBzbChERUZBVUxUKSwgY3RybDogY3RsKCdIJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNzQsIGtleUNhcDogJ2pKJywgbm9ybWFsOiBzbChERUZBVUxUKSwgY3RybDogY3RsKCdKJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNzUsIGtleUNhcDogJ2tLJywgbm9ybWFsOiBzbChERUZBVUxUKSwgY3RybDogY3RsKCdLJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNzYsIGtleUNhcDogJ2xMJywgbm9ybWFsOiBzbChERUZBVUxUKSwgY3RybDogY3RsKCdMJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTg2LCBrZXlDYXA6ICc7OicsIG5vcm1hbDogREVGQVVMVCwgY3RybDogU1RSSVAsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMjIyLCBrZXlDYXA6ICdcXCdcIicsIG5vcm1hbDogREVGQVVMVCwgY3RybDogU1RSSVAsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTMsIGtleUNhcDogJ1tFTlRFUl0nLCBub3JtYWw6ICdcXHInLCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIC8vIGZpZnRoIHJvd1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxNiwga2V5Q2FwOiAnW1NISUZUXScsIG5vcm1hbDogUEFTUywgY3RybDogUEFTUywgYWx0OiBQQVNTLCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA5MCwga2V5Q2FwOiAnelonLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IGN0bCgnWicpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDg4LCBrZXlDYXA6ICd4WCcsIG5vcm1hbDogc2woREVGQVVMVCksIGN0cmw6IGN0bCgnWCcpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDY3LCBrZXlDYXA6ICdjQycsIG5vcm1hbDogREVGQVVMVCwgY3RybDogY3RsKCdDJyksIGFsdDogREVGQVVMVCwgbWV0YTogUEFTUyB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogODYsIGtleUNhcDogJ3ZWJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBjdGwoJ1YnKSwgYWx0OiBERUZBVUxULCBtZXRhOiBQQVNTIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA2Niwga2V5Q2FwOiAnYkInLCBub3JtYWw6IHNsKERFRkFVTFQpLCBjdHJsOiBzbChjdGwoJ0InKSksIGFsdDogc2woREVGQVVMVCksIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDc4LCBrZXlDYXA6ICduTicsIG5vcm1hbDogREVGQVVMVCwgY3RybDogc2woY3RsKCdOJykpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDc3LCBrZXlDYXA6ICdtTScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogY3RsKCdNJyksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTg4LCBrZXlDYXA6ICcsPCcsIG5vcm1hbDogREVGQVVMVCwgY3RybDogYWx0KFNUUklQLCBQQVNTKSwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxOTAsIGtleUNhcDogJy4+Jywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBhbHQoU1RSSVAsIFBBU1MpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDE5MSwga2V5Q2FwOiAnLz8nLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IHNoKGN0bCgnXycpLCBjdGwoJz8nKSksIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgLy8gc2l4dGggcm93XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDE3LCBrZXlDYXA6ICdbQ1RSTF0nLCBub3JtYWw6IFBBU1MsIGN0cmw6IFBBU1MsIGFsdDogUEFTUywgbWV0YTogUEFTUyB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTgsIGtleUNhcDogJ1tPUFRdJywgbm9ybWFsOiBQQVNTLCBjdHJsOiBQQVNTLCBhbHQ6IFBBU1MsIG1ldGE6IFBBU1MgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDkxLCBrZXlDYXA6ICdbTENNRF0nLCBub3JtYWw6IFBBU1MsIGN0cmw6IFBBU1MsIGFsdDogUEFTUywgbWV0YTogUEFTUyB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMzIsIGtleUNhcDogJyAnLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IGN0bCgnQCcpLCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDkzLCBrZXlDYXA6ICdbUkNNRF0nLCBub3JtYWw6IFBBU1MsIGN0cmw6IFBBU1MsIGFsdDogUEFTUywgbWV0YTogUEFTUyB9KTtcbiAgICAgICAgLy8gdGhlc2UgdGhpbmdzLlxuICAgICAgICBhZGQoeyBrZXlDb2RlOiA0Miwga2V5Q2FwOiAnW1BSVFNDUl0nLCBub3JtYWw6IFBBU1MsIGN0cmw6IFBBU1MsIGFsdDogUEFTUywgbWV0YTogUEFTUyB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTQ1LCBrZXlDYXA6ICdbU0NSTEtdJywgbm9ybWFsOiBQQVNTLCBjdHJsOiBQQVNTLCBhbHQ6IFBBU1MsIG1ldGE6IFBBU1MgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDE5LCBrZXlDYXA6ICdbQlJFQUtdJywgbm9ybWFsOiBQQVNTLCBjdHJsOiBQQVNTLCBhbHQ6IFBBU1MsIG1ldGE6IFBBU1MgfSk7XG4gICAgICAgIC8vIGJsb2NrIG9mIHNpeCBrZXlzIGFib3ZlIHRoZSBhcnJvd3NcbiAgICAgICAgYWRkKHsga2V5Q29kZTogNDUsIGtleUNhcDogJ1tJTlNFUlRdJywgbm9ybWFsOiBDU0kgKyAnMn4nLCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDM2LCBrZXlDYXA6ICdbSE9NRV0nLCBub3JtYWw6IEVTQyArICdPSCcsIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMzMsIGtleUNhcDogJ1tQR1VQXScsIG5vcm1hbDogQ1NJICsgJzV+JywgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA0Niwga2V5Q2FwOiAnW0RFTF0nLCBub3JtYWw6IENTSSArICczficsIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMzUsIGtleUNhcDogJ1tFTkRdJywgbm9ybWFsOiBFU0MgKyAnT0YnLCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDM0LCBrZXlDYXA6ICdbUEdET1dOXScsIG5vcm1hbDogQ1NJICsgJzZ+JywgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICAvLyBhcnJvdyBrZXlzXG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDM4LCBrZXlDYXA6ICdbVVBdJywgbm9ybWFsOiBzbChhYyhDU0kgKyAnQScsIFNTMyArICdBJykpLCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDQwLCBrZXlDYXA6ICdbRE9XTl0nLCBub3JtYWw6IHNsKGFjKENTSSArICdCJywgU1MzICsgJ0InKSksIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMzksIGtleUNhcDogJ1tSSUdIVF0nLCBub3JtYWw6IHNsKGFjKENTSSArICdDJywgU1MzICsgJ0MnKSksIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMzcsIGtleUNhcDogJ1tMRUZUXScsIG5vcm1hbDogc2woYWMoQ1NJICsgJ0QnLCBTUzMgKyAnRCcpKSwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxNDQsIGtleUNhcDogJ1tOVU1MT0NLXScsIG5vcm1hbDogUEFTUywgY3RybDogUEFTUywgYWx0OiBQQVNTLCBtZXRhOiBQQVNTIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMiwga2V5Q2FwOiAnW0NMRUFSXScsIG5vcm1hbDogUEFTUywgY3RybDogUEFTUywgYWx0OiBQQVNTLCBtZXRhOiBQQVNTIH0pO1xuICAgICAgICAvLyBrZXlwYWQgd2l0aCBudW1sb2NrXG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDk2LCBrZXlDYXA6ICdbS1AwXScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiA5Nywga2V5Q2FwOiAnW0tQMV0nLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogOTgsIGtleUNhcDogJ1tLUDJdJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDk5LCBrZXlDYXA6ICdbS1AzXScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDAsIGtleUNhcDogJ1tLUDRdJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDEwMSwga2V5Q2FwOiAnW0tQNV0nLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTAyLCBrZXlDYXA6ICdbS1A2XScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDMsIGtleUNhcDogJ1tLUDddJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDEwNCwga2V5Q2FwOiAnW0tQOF0nLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTA1LCBrZXlDYXA6ICdbS1A5XScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDcsIGtleUNhcDogJ1tLUCtdJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBvblpvb20sIGFsdDogREVGQVVMVCwgbWV0YTogb25ab29tIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDksIGtleUNhcDogJ1tLUC1dJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBvblpvb20sIGFsdDogREVGQVVMVCwgbWV0YTogb25ab29tIH0pO1xuICAgICAgICBhZGQoeyBrZXlDb2RlOiAxMDYsIGtleUNhcDogJ1tLUCpdJywgbm9ybWFsOiBERUZBVUxULCBjdHJsOiBERUZBVUxULCBhbHQ6IERFRkFVTFQsIG1ldGE6IERFRkFVTFQgfSk7XG4gICAgICAgIGFkZCh7IGtleUNvZGU6IDExMSwga2V5Q2FwOiAnW0tQL10nLCBub3JtYWw6IERFRkFVTFQsIGN0cmw6IERFRkFVTFQsIGFsdDogREVGQVVMVCwgbWV0YTogREVGQVVMVCB9KTtcbiAgICAgICAgYWRkKHsga2V5Q29kZTogMTEwLCBrZXlDYXA6ICdbS1AuXScsIG5vcm1hbDogREVGQVVMVCwgY3RybDogREVGQVVMVCwgYWx0OiBERUZBVUxULCBtZXRhOiBERUZBVUxUIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEtleU1hcDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgVUlLZXlNb2RpZmllckFscGhhU2hpZnQgPSAxIDw8IDE2OyAvLyBUaGlzIGJpdCBpbmRpY2F0ZXMgQ2Fwc0xvY2tcbmNvbnN0IFVJS2V5TW9kaWZpZXJTaGlmdCA9IDEgPDwgMTc7XG5jb25zdCBVSUtleU1vZGlmaWVyQ29udHJvbCA9IDEgPDwgMTg7XG5jb25zdCBVSUtleU1vZGlmaWVyQWx0ZXJuYXRlID0gMSA8PCAxOTtcbmNvbnN0IFVJS2V5TW9kaWZpZXJDb21tYW5kID0gMSA8PCAyMDtcbmNvbnN0IFVJS2V5TW9kaWZpZXJOdW1lcmljUGFkID0gMSA8PCAyMTtcbmZ1bmN0aW9uIHRvVUlLaXRGbGFncyhlLCBjYXBzS2V5ID0gdHJ1ZSkge1xuICAgIGxldCByZXMgPSAwO1xuICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgIHJlcyB8PSBVSUtleU1vZGlmaWVyU2hpZnQ7XG4gICAgfVxuICAgIGlmIChlLmN0cmxLZXkpIHtcbiAgICAgICAgcmVzIHw9IFVJS2V5TW9kaWZpZXJDb250cm9sO1xuICAgIH1cbiAgICBpZiAoZS5hbHRLZXkpIHtcbiAgICAgICAgcmVzIHw9IFVJS2V5TW9kaWZpZXJBbHRlcm5hdGU7XG4gICAgfVxuICAgIGlmIChlLm1ldGFLZXkpIHtcbiAgICAgICAgcmVzIHw9IFVJS2V5TW9kaWZpZXJDb21tYW5kO1xuICAgIH1cbiAgICBpZiAoY2Fwc0tleSkge1xuICAgICAgICByZXMgfD0gVUlLZXlNb2RpZmllckFscGhhU2hpZnQ7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvVUlLaXRGbGFncyA9IHRvVUlLaXRGbGFncztcbmZ1bmN0aW9uIFVJS2l0RmxhZ3NUb09iamVjdChmbGFncykge1xuICAgIHZhciBzaGlmdCA9IChmbGFncyAmIFVJS2V5TW9kaWZpZXJTaGlmdCkgPT0gVUlLZXlNb2RpZmllclNoaWZ0O1xuICAgIHZhciBhbHQgPSAoZmxhZ3MgJiBVSUtleU1vZGlmaWVyQWx0ZXJuYXRlKSA9PSBVSUtleU1vZGlmaWVyQWx0ZXJuYXRlO1xuICAgIHZhciBjdHJsID0gKGZsYWdzICYgVUlLZXlNb2RpZmllckNvbnRyb2wpID09IFVJS2V5TW9kaWZpZXJDb250cm9sO1xuICAgIHZhciBtZXRhID0gKGZsYWdzICYgVUlLZXlNb2RpZmllckNvbW1hbmQpID09IFVJS2V5TW9kaWZpZXJDb21tYW5kO1xuICAgIHJldHVybiB7IHNoaWZ0LCBhbHQsIGN0cmwsIG1ldGEgfTtcbn1cbmV4cG9ydHMuVUlLaXRGbGFnc1RvT2JqZWN0ID0gVUlLaXRGbGFnc1RvT2JqZWN0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBCaW5kaW5ncyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIFRPRE86IG1hdGNoIHN0YXRlIGxhdGVyXG4gICAgICAgIHRoaXMuX3N0YWNrID0gW107XG4gICAgICAgIHRoaXMuX21hcCA9IHt9O1xuICAgICAgICB0aGlzLmV4cGFuZEZuID0gKGJpbmRpbmcpID0+IHtcbiAgICAgICAgICAgIGlmIChiaW5kaW5nLmtleXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZm5zID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5Q29kZTogMTIxLFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdGMTAnLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAnRjEwJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICcxMjE6MCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleUNvZGU6IDExMixcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnRjEnLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAnRjEnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJzExMjowJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5Q29kZTogMTEzLFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdGMicsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdGMicsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnMTEzOjAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiAxMTQsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ0YzJyxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ0YzJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICcxMTQ6MCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleUNvZGU6IDExNSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnRjQnLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAnRjQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJzExNTowJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5Q29kZTogMTE2LFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdGNScsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdGNScsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnMTE2OjAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiAxMTcsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ0Y2JyxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ0Y2JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICcxMTc6MCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleUNvZGU6IDExOCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnRjcnLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAnRjcnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJzExODowJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5Q29kZTogMTE5LFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdGOCcsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdGOCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnMTE5OjAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiAxMjAsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ0Y5JyxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ0Y5JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICcxMjA6MCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBsZXQga2V5cyA9IGJpbmRpbmcua2V5cy5zbGljZSgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG51bUlkID0gaSArIDQ4ICsgJzowJztcbiAgICAgICAgICAgICAgICBsZXQgZm4gPSBmbnNbaV07XG4gICAgICAgICAgICAgICAgYmluZGluZy5rZXlzID0ga2V5cy5zbGljZSgpO1xuICAgICAgICAgICAgICAgIGJpbmRpbmcua2V5cy5wdXNoKG51bUlkKTtcbiAgICAgICAgICAgICAgICBiaW5kaW5nLmFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3ByZXNzJyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBmbixcbiAgICAgICAgICAgICAgICAgICAgYWx0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc2hpZnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjdHJsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YTogZmFsc2UsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLl9leHBhbmRCaW5kaW5nKGJpbmRpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmV4cGFuZEN1cnNvciA9IChiaW5kaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAoYmluZGluZy5rZXlzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGN1cnNvciA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtleUNvZGU6IDM2LFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdIT01FJyxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ0hPTUUnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJzM2OjAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiAzMyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnUEdVUCcsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdQR1VQJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICczMzowJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2V5Q29kZTogMzUsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ0VORCcsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6ICdFTkQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJzM1OjAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBrZXlDb2RlOiAzNCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnUEdET1dOJyxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogJ1BHRE9XTicsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnMzQ6MCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBsZXQgbGVmdCA9ICczNzowJztcbiAgICAgICAgICAgIGxldCB1cCA9ICczODowJztcbiAgICAgICAgICAgIGxldCByaWdodCA9ICczOTowJztcbiAgICAgICAgICAgIGxldCBkb3duID0gJzQwOjAnO1xuICAgICAgICAgICAgbGV0IGFycm93cyA9IFtsZWZ0LCB1cCwgcmlnaHQsIGRvd25dO1xuICAgICAgICAgICAgbGV0IGtleXMgPSBiaW5kaW5nLmtleXMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFycm93ID0gYXJyb3dzW2ldO1xuICAgICAgICAgICAgICAgIGxldCBjdXIgPSBjdXJzb3JbaV07XG4gICAgICAgICAgICAgICAgYmluZGluZy5rZXlzID0ga2V5cy5zbGljZSgpO1xuICAgICAgICAgICAgICAgIGJpbmRpbmcua2V5cy5wdXNoKGFycm93KTtcbiAgICAgICAgICAgICAgICBiaW5kaW5nLmFjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3ByZXNzJyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBjdXIsXG4gICAgICAgICAgICAgICAgICAgIGFsdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNoaWZ0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY3RybDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1ldGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwYW5kQmluZGluZyhiaW5kaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fZXhwYW5kQmluZGluZyA9IChiaW5kaW5nKSA9PiB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IGJpbmRpbmcua2V5cy5tYXAoayA9PiBrLnNwbGl0KCctJylbMF0pO1xuICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzID0gW2tleXMuc29ydCgpXTtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIGNvbnN0IHNoaWZ0ID0ge1xuICAgICAgICAgICAgICAgIGlkTGVmdDogJzE2OjEnLFxuICAgICAgICAgICAgICAgIGlkUmlnaHQ6ICcxNjoyJyxcbiAgICAgICAgICAgICAgICBsb2M6IGJpbmRpbmcuc2hpZnRMb2MsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgY29udHJvbCA9IHtcbiAgICAgICAgICAgICAgICBpZExlZnQ6ICcxNzoxJyxcbiAgICAgICAgICAgICAgICBpZFJpZ2h0OiAnMTc6MicsXG4gICAgICAgICAgICAgICAgbG9jOiBiaW5kaW5nLmNvbnRyb2xMb2MsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0ge1xuICAgICAgICAgICAgICAgIGlkTGVmdDogJzE4OjEnLFxuICAgICAgICAgICAgICAgIGlkUmlnaHQ6ICcxODoyJyxcbiAgICAgICAgICAgICAgICBsb2M6IGJpbmRpbmcub3B0aW9uTG9jLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICAgICAgaWRMZWZ0OiAnOTE6MScsXG4gICAgICAgICAgICAgICAgaWRSaWdodDogJzkzOjAnLFxuICAgICAgICAgICAgICAgIGxvYzogYmluZGluZy5jb21tYW5kTG9jLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBkb3VibGVLZXlzID0gW3NoaWZ0LCBjb250cm9sLCBvcHRpb24sIGNvbW1hbmRdO1xuICAgICAgICAgICAgZm9yIChsZXQgayBvZiBkb3VibGVLZXlzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSByZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IHJlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlkeCA9IHJvdy5pbmRleE9mKGsuaWRMZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA9IHJvdy5pbmRleE9mKGsuaWRSaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChrLmxvYyA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dbaWR4XSA9IGsuaWRMZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGsubG9jID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1tpZHhdID0gay5pZFJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcm93W2lkeF0gPSBrLmlkTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJpZ2h0ID0gcm93LnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0W2lkeF0gPSBrLmlkUmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKHJpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCByb3cgb2YgcmVzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHIgPSByb3cuc29ydCgpLmpvaW4oJzonKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXBbcl0gPSBiaW5kaW5nLmFjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX3N0YWNrID0gW107XG4gICAgICAgIHRoaXMuX21hcCA9IHt9O1xuICAgIH1cbiAgICBtYXRjaChrZXlJZHMpIHtcbiAgICAgICAgbGV0IGtleXNQYXRoID0ga2V5SWRzLnNvcnQoKS5qb2luKCc6Jyk7XG4gICAgICAgIGxldCBhY3Rpb24gPSB0aGlzLl9tYXBba2V5c1BhdGhdO1xuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEJpbmRpbmdzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==