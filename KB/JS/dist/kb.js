!function(e){var t={};function a(o){if(t[o])return t[o].exports;var l=t[o]={i:o,l:!1,exports:{}};return e[o].call(l.exports,l,l.exports,a),l.l=!0,l.exports}a.m=e,a.c=t,a.d=function(e,t,o){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(a.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)a.d(o,l,function(t){return e[t]}.bind(null,l));return o},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=0)}([function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=new(a(1).default);document.body.append(o.element),o.focus(!0),window._onKB=o.onKB,window._kb=o,o.ready()},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=a(2),l=a(3),n=a(4),s=o.KBActions.CANCEL,r=o.KBActions.DEFAULT,i=o.KBActions.PASS,d=o.KBActions.STRIP;function c(e){switch(e){case"escape":return{keyCode:27,code:"[ESC]",key:"[ESC]"};case"tab":return{keyCode:9,code:"[TAB]",key:"[TAB]"};default:return null}}const y=new Set(["20:0","16:1","16:2","17:1","17:2","18:1","18:2","91:1","91:2","93:0"]),h="20:0";function m(e){let t=229==e.keyCode?0:e.keyCode,a=e.location;return t?`${t}:${a}`:`${t}:${a}:${(e.key||"").toLowerCase()}`}function p(e){e&&(e.preventDefault(),e.stopPropagation())}const k={KeyC:67,c:67,KeyI:73,i:73,KeyH:72,h:72,KeyM:77,m:77,BracketLeft:219,"[":77,KeyN:78,n:78,KeyU:85,u:85,KeyE:69,e:69};t.default=class{constructor(){this.element=document.createElement("input"),this._keyMap=new o.default(this),this._bindings=new n.default,this._lang="en",this.hasSelection=!1,this._lastKeyDownEvent=null,this._capsLockRemapped=!1,this._shiftRemapped=!1,this._removeAccents=!1,this._metaSendsEscape=!0,this._altSendsWhat="escape",this._ignoreAccents={AltLeft:!0,AltRight:!0},this._modsMap={ShiftLeft:"Shift",ShiftRight:"Shift",AltLeft:"Escape",AltRight:"Escape",MetaLeft:"Meta",MetaRight:"Meta",ControlLeft:"Control",ControlRight:"Control",CapsLock:""},this._downMap={},this._upMap={},this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},this._up=new Set,this._down=new Set,this._captureMode=!1,this._voiceString="",this._updateUIKitModsIfNeeded=e=>{let t=e.code;if(this._capsLockRemapped){let a;a="keyup"==e.type&&"CapsLock"==t?0:l.toUIKitFlags(e),o.op("mods",{mods:a})}"AltLeft"!=t&&"AltRight"!=t||this._ignoreAccents[t]&&("keydown"==e.type?o.op("guard-ime-on",{}):o.op("guard-ime-off",{}),p(e))},this._onKeyDown=e=>{if(e.isComposing)return void(this._lastKeyDownEvent=null);let t=e;if(229===e.keyCode){if(!this._lastKeyDownEvent)return;t=this._lastKeyDownEvent}else this._lastKeyDownEvent=e;if(this._captureMode){let a=m+"-"+t.code;return this._down.add(a),this._capture(),this._updateUIKitModsIfNeeded(t),void p(e)}let a=m(t);this._down.add(a),console.log("down",this._down);let o=this._bindings.match(Array.from(this._down));if(y.has(a)||this._down.delete(a),o)return this._execBinding(o,e),void p(e);let l=this._downMap[a],n=this._mod(this._modsMap[t.code]),s=!1;l&&((s=!(n&&this._mods[n].has(a)))||(this._handleKeyDownKey(l,e),s=!0)),n&&this._mods[n].add(a),this._upMap[a]&&this._up.add(a),this._updateUIKitModsIfNeeded(t),s||this._handleKeyDown(t.keyCode,e)},this._onBeforeInput=e=>{"dictation"!=this._lang?("insertText"==e.inputType&&this._output(e.data),p(e)):this._voiceString=e.data},this._onInput=e=>p(e),this._onKeyUp=e=>{if(this._lastKeyDownEvent=null,this._captureMode){let t=m(e)+"-"+e.code;return this._down.delete(t),this._capture(),this._updateUIKitModsIfNeeded(e),void p(e)}let t=m(e);this._down.delete(t),console.log("up",t,this._down);let a=this._mod(this._modsMap[e.code]);a&&this._mods[a].delete(t),this._updateUIKitModsIfNeeded(e);let o=this._upMap[t];o&&this._up.has(t)&&this._handleKeyDownKey(o,null),p(e)},this._handleKeyDown=(e,t)=>{let a={keyCode:e,key:"",code:"Unidentified"};t&&(a.code=t.code,a.key=t.key),this._handleKeyDownKey(a,t)},this._handleKeyDownKey=(e,t)=>{let a=this._keyMap,o=this._mods.Alt.size>0,l=this._mods.Control.size>0,n=this._mods.Meta.size>0,c=this._mods.Shift.size>0,y=e.code,h=e.key,m=function(e,t){return t?(t.ctrlKey&&(9==t.keyCode&&"KeyI"==t.code||8==t.keyCode&&"KeyH"==t.code||13==t.keyCode&&"KeyC"==t.code||13==t.keyCode&&"KeyM"==t.code||27==t.keyCode&&"BracketLeft"==t.code)&&(e.keyCode=k[t.code]||e.keyCode),e):e}({key:h,code:y,keyCode:e.keyCode,alt:o,ctrl:l,meta:n,shift:c},t),C=a.getKeyDef(m.keyCode);var u=null;function _(e){u=e;var t=C[e];return"function"==typeof t&&(t=t.call(a,m,C)),t===r&&"normal"!=e&&(t=_("normal")),t}let f;if(f=_(l?"ctrl":o?"alt":n?"meta":"normal"),!this.hasSelection&&(f===i||f===r&&!(l||o||n))){if(f===i&&!e.src)return;if(/^\[\w+\]$/.test(C.keyCap)&&!e.src)return void(this._removeAccents=!1);let a=this._removeAccents?function(e){let t=e.normalize("NFD").replace(/[\u0300-\u036f]/g,""),a=t.replace(/^[\u02c6\u00a8\u00b4\u02dc\u0060]/,"");return a&&(t=a),t}(h):h;return this._removeAccents=!1,this._capsLockRemapped||this._shiftRemapped?this._output(c?a.toUpperCase():a.toLowerCase()):this._output(a),void p(t)}if(this._removeAccents=!1,f===d&&(o=l=!1,"function"==typeof(f=C.normal)&&(f=f.call(a,m,C)),f==r&&2==C.keyCap.length&&(f=C.keyCap.substr(c?1:0,1))),p(t),f!==s&&!this.hasSelection)if(f===r||"string"==typeof f){if("ctrl"==u?l=!1:"alt"==u?o=!1:"meta"==u&&(n=!1),c=m.shift,(o||l||c||n)&&"string"==typeof f&&"["==f.substr(0,2)){let e=1;c&&(e+=1),o&&(e+=2),l&&(e+=4),n&&(e+=8);let t=";"+e;f=3==f.length?"[1"+t+f.substr(2,1):f.substr(0,f.length-1)+t+f.substr(f.length-1)}else{if(f===r&&(f=C.keyCap.substr(c?1:0,1),l)){let e=C.keyCap.substr(0,1).charCodeAt(0);e>=64&&e<=95&&(f=String.fromCharCode(e-64))}let e=f.toString();if(o&&"8-bit"==this._altSendsWhat&&1==e.length){let t=e.charCodeAt(0)+128;f=String.fromCharCode(t)}(o&&"escape"==this._altSendsWhat||n&&this._metaSendsEscape)&&(f=""+e)}"string"==typeof f?this._output(f):console.warn("action is not a string",f)}else console.log("Invalid action: "+JSON.stringify(f))},this._onIME=e=>{let t=e.type,a=e.data||"";o.op("ime",{type:t,data:a}),"compositionend"==t&&this._output(a)},this._output=e=>{this._up.clear(),e&&o.op("out",{data:e})},this._stateReset=()=>{this._down.clear(),this._up.clear(),this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},this.element.value=" "},this._capture=()=>o.op("capture",{keyIds:this._down.values}),this._configKey=e=>{let t=e.code,a=c(e.down);a&&(this._downMap[t.id]=a),this._mod(e.mod)&&(this._modsMap[t.code]=e.mod);let o=c(e.up);o&&(this._upMap[t.id]=o),"AltRight"!=t.code&&"AltLeft"!=t.code||(this._ignoreAccents[t.code]=e.ignoreAccents)},this._config=e=>{this._reset(),this._bindings.reset(),this._configKey(e.capsLock),this._configKey(e.command.left),this._configKey(e.command.right),this._configKey(e.control.left),this._configKey(e.control.right),this._configKey(e.option.left),this._configKey(e.option.right),this._configKey(e.shift.left),this._configKey(e.shift.right),this._bindings.expandFn(e.fn),this._bindings.expandCursor(e.cursor)},this._toggleCaptureMode=e=>this._captureMode=!!e,this._onToolbarMods=e=>{let t=l.UIKitFlagsToObject(e);t.alt?this._mods.Alt.add("alt"):this._mods.Alt.delete("alt"),t.ctrl?this._mods.Control.add("ctrl"):this._mods.Control.delete("ctrl"),t.shift?this._mods.Shift.add("shift"):this._mods.Shift.delete("shift"),t.meta?this._mods.Meta.add("meta"):this._mods.Meta.delete("meta")},this._execPress=(e,t)=>{let a=e.split(/:/g),o=this._mods;this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set};let n=l.UIKitFlagsToObject(parseInt(a[0],10));n.shift&&this._mods.Shift.add("shift"),n.ctrl&&this._mods.Control.add("ctrl"),n.alt&&this._mods.Alt.add("alt"),n.meta&&this._mods.Meta.add("meta");let s={keyCode:parseInt(a[1],10),key:a[3]||"",code:"",src:"toolbar"};this._handleKeyDownKey(s,t),this._mods=o},this.onKB=(e,t)=>{switch(e){case"mods-down":this._handleCapsLockDown(!0);break;case"mods-up":this._handleCapsLockDown(!1);break;case"lang":this._handleLang(t);break;case"guard-up":this._handleGuard(!0,t);break;case"guard-down":this._handleGuard(!1,t);break;case"selection":this.hasSelection=t;break;case"capture":this._toggleCaptureMode(t);break;case"toolbar-mods":this._onToolbarMods(t);break;case"toolbar-press":this._execPress(t,null);break;case"state-reset":this._stateReset();break;case"focus":this.focus(t);break;case"config":this._config(t)}};let e=this.element;e.setAttribute("autocomplete","off"),e.setAttribute("spellcheck","false"),e.setAttribute("autocorrect","off"),e.setAttribute("autocapitalize","none"),e.setAttribute("autofocus","true"),e.value=" ",e.addEventListener("keydown",this._onKeyDown),e.addEventListener("keyup",this._onKeyUp),window.addEventListener("keydown",this._onKeyDown),window.addEventListener("keyup",this._onKeyUp),e.addEventListener("compositionstart",this._onIME),e.addEventListener("compositionupdate",this._onIME),e.addEventListener("compositionend",this._onIME),e.addEventListener("beforeinput",this._onBeforeInput),e.addEventListener("input",this._onInput),this._capsLockRemapped=null!=this._modsMap.CapsLock||null!=this._downMap[h]||null!=this._upMap[h],this._shiftRemapped=null!=this._modsMap.Shift||"Shift"!==this._modsMap.Shift}_mod(e){switch(e){case"Escape":return this._altSendsWhat="escape","Alt";case"8-bit":return this._altSendsWhat="8-bit","Alt";case"Shift":return"Shift";case"Control":return"Control";case"Meta":return this._metaSendsEscape=!1,"Meta";case"Meta-Escape":return this._metaSendsEscape=!0,"Meta";default:return null}}focus(e){e?this.element.focus():this.element.blur()}ready(){o.op("ready",{})}_handleCapsLockDown(e){if(this._captureMode)return e?this._down.delete(h+"-capslock"):this._down.add(h+"-capslock"),void this._capture();let t=this._modsMap.CapsLock;if(e){this._down.add(h);let e=this._downMap[h];return!e||t&&this._mods[t].has(h)||this._handleKeyDownKey(e,null),t&&this._mods[t].add(h),void(this._upMap[h]&&this._up.add(h))}this._down.delete(h),t&&this._mods[t].delete(h);let a=this._upMap[h];a&&this._up.has(h)&&this._handleKeyDownKey(a,null)}_handleLang(e){this._lang=e,this._stateReset()}_handleGuard(e,t){this.element.value=" ";let a=k[t||""]||0,o=`${a}:0`;this._captureMode&&(o+="-Key"+t.toUpperCase()),e?this._down.delete(o):this._down.add(o),this._captureMode?this._capture():e?this._removeAccents=!0:this._handleKeyDown(a,null)}_reset(){this.hasSelection=!1,this._removeAccents=!1,this._modsMap={},this._downMap={},this._upMap={},this._up.clear(),this._down.clear(),this._mods={Shift:new Set,Alt:new Set,Meta:new Set,Control:new Set},this._ignoreAccents={AltLeft:!0,AltRight:!0}}_execBinding(e,t){switch(e.type){case"hex":this._output(function(e){let t="",a=e.length;for(let o=0;o<a;o+=2)t+=String.fromCharCode(parseInt(e.substr(o,2),16));return t}(e.value));break;case"command":o.op("command",{command:e.value});break;case"press":this._execPress(`${e.mods}:${e.key.id}`,t)}}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=Symbol("CANCEL"),l=Symbol("DEFAULT"),n=Symbol("PASS"),s=Symbol("STRIP");function r(e,t){let a=Object.assign(Object.assign({},t),{op:e});window.webkit.messageHandlers._kb.postMessage(a)}t.KBActions={CANCEL:o,DEFAULT:l,PASS:n,STRIP:s},t.op=r;const i="",d="[",c="O",y="",h=e=>String.fromCharCode(e.charCodeAt(0)-64),m={keyCode:0,keyCap:"[UNKNOWN]",normal:n,ctrl:n,alt:n,meta:n};t.default=class{constructor(e){this._defs={},this._onCtrlNum=(e,t)=>{switch(t.keyCap.substr(0,1)){case"1":return"1";case"2":return h("@");case"3":return h("[");case"4":return h("\\");case"5":return h("]");case"6":return h("^");case"7":return h("_");case"8":return y;case"9":return"9";default:return n}},this._onAltNum=(e,t)=>l,this._onMetaNum=(e,t)=>l,this._onZoom=(e,t)=>o,this._onSel=(e,t)=>{if("[LEFT]"==t.keyCap||"hH"==t.keyCap){r("selection",{dir:"left",gran:e.shift?"word":"character"})}else if("[RIGHT]"==t.keyCap||"lL"==t.keyCap){r("selection",{dir:"right",gran:e.shift?"word":"character"})}else"[UP]"==t.keyCap||"kK"==t.keyCap?r("selection",{dir:"left",gran:"line"}):"[DOWN]"==t.keyCap||"jJ"==t.keyCap?r("selection",{dir:"right",gran:"line"}):"oO"==t.keyCap||"xX"==t.keyCap?r("selection",{command:"change"}):"nN"==t.keyCap&&e.ctrl?r("selection",{dir:"right",gran:"line"}):"pP"==t.keyCap?e.ctrl?r("selection",{dir:"left",gran:"line"}):e.shift||e.alt||e.meta||r("selection",{command:"paste"}):"bB"==t.keyCap?e.ctrl?r("selection",{dir:"left",gran:"character"}):(e.alt,r("selection",{dir:"left",gran:"word"})):"wW"==t.keyCap?e.alt?r("selection",{command:"copy"}):r("selection",{dir:"right",gran:"word"}):"fF"==t.keyCap?e.ctrl?r("selection",{dir:"right",gran:"character"}):e.alt&&r("selection",{dir:"right",gran:"word"}):"yY"==t.keyCap?r("selection",{command:"copy"}):"[ESC]"==t.keyCap&&r("selection",{command:"cancel"});return o},this._keyboard=e,this.reset()}getKeyDef(e){var t=this._defs[e];return t||(console.warn(`No definition for (keyCode ${e})`),t=m,this.addKeyDef(e,t),t)}addKeyDef(e,t){e in this._defs&&console.warn("Dup keyCode: ",e),this._defs[e]=t}reset(){this._defs={};const e=(e,t,a)=>"function"==typeof e?e.call(this,t,a):e,t=(t,a)=>(o,l)=>{let n=o.shift||o.ctrl||o.alt||o.meta?a:t;return e(n,o,l)},a=(t,a)=>(o,l)=>{let n=o.shift?a:t;return o.shift=!1,e(n,o,l)},o=(e,t)=>e,r=(t,a)=>(o,l)=>{let n=o.alt?t:a;return e(n,o,l)},p=(e,t)=>t,k=t=>(a,o)=>{let l=this._keyboard.hasSelection?this._onSel:t;return e(l,a,o)},C=e=>this.addKeyDef(e.keyCode,e);C(m),C({keyCode:27,keyCap:"[ESC]",normal:k(i),ctrl:l,alt:l,meta:l}),C({keyCode:112,keyCap:"[F1]",normal:t(c+"P",d+"P"),ctrl:l,alt:d+"23~",meta:l}),C({keyCode:113,keyCap:"[F2]",normal:t(c+"Q",d+"Q"),ctrl:l,alt:d+"24~",meta:l}),C({keyCode:114,keyCap:"[F3]",normal:t(c+"R",d+"R"),ctrl:l,alt:d+"25~",meta:l}),C({keyCode:115,keyCap:"[F4]",normal:t(c+"S",d+"S"),ctrl:l,alt:d+"26~",meta:l}),C({keyCode:116,keyCap:"[F5]",normal:d+"15~",ctrl:l,alt:d+"28~",meta:l}),C({keyCode:117,keyCap:"[F6]",normal:d+"17~",ctrl:l,alt:d+"29~",meta:l}),C({keyCode:118,keyCap:"[F7]",normal:d+"18~",ctrl:l,alt:d+"31~",meta:l}),C({keyCode:119,keyCap:"[F8]",normal:d+"19~",ctrl:l,alt:d+"32~",meta:l}),C({keyCode:120,keyCap:"[F9]",normal:d+"20~",ctrl:l,alt:d+"33~",meta:l}),C({keyCode:121,keyCap:"[F10]",normal:d+"21~",ctrl:l,alt:d+"34~",meta:l}),C({keyCode:122,keyCap:"[F11]",normal:d+"23~",ctrl:l,alt:d+"42~",meta:l}),C({keyCode:123,keyCap:"[F12]",normal:d+"24~",ctrl:l,alt:d+"43~",meta:l});const u=this._onCtrlNum,_=this._onAltNum,f=this._onMetaNum,g=this._onZoom;C({keyCode:192,keyCap:"`~",normal:l,ctrl:a(h("@"),h("^")),alt:l,meta:n}),C({keyCode:49,keyCap:"1!",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:50,keyCap:"2@",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:51,keyCap:"3#",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:52,keyCap:"4$",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:53,keyCap:"5%",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:54,keyCap:"6^",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:55,keyCap:"7&",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:56,keyCap:"8*",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:57,keyCap:"9(",normal:l,ctrl:u,alt:_,meta:f}),C({keyCode:48,keyCap:"0)",normal:l,ctrl:g,alt:_,meta:g}),C({keyCode:189,keyCap:"-_",normal:l,ctrl:a(g,h("_")),alt:l,meta:g}),C({keyCode:187,keyCap:"=+",normal:l,ctrl:g,alt:l,meta:g}),C({keyCode:8,keyCap:"[BKSP]",normal:o(y),ctrl:o("\b"),alt:l,meta:l}),C({keyCode:9,keyCap:"[TAB]",normal:a("\t",d+"Z"),ctrl:s,alt:n,meta:l}),C({keyCode:81,keyCap:"qQ",normal:l,ctrl:h("Q"),alt:l,meta:l}),C({keyCode:87,keyCap:"wW",normal:k(l),ctrl:h("W"),alt:k(l),meta:l}),C({keyCode:69,keyCap:"eE",normal:l,ctrl:h("E"),alt:l,meta:l}),C({keyCode:82,keyCap:"rR",normal:l,ctrl:h("R"),alt:l,meta:l}),C({keyCode:84,keyCap:"tT",normal:l,ctrl:h("T"),alt:l,meta:l}),C({keyCode:89,keyCap:"yY",normal:k(l),ctrl:h("Y"),alt:l,meta:l}),C({keyCode:85,keyCap:"uU",normal:l,ctrl:h("U"),alt:l,meta:l}),C({keyCode:73,keyCap:"iI",normal:l,ctrl:h("I"),alt:l,meta:l}),C({keyCode:79,keyCap:"oO",normal:k(l),ctrl:h("O"),alt:l,meta:l}),C({keyCode:80,keyCap:"pP",normal:k(l),ctrl:k(h("P")),alt:l,meta:l}),C({keyCode:219,keyCap:"[{",normal:l,ctrl:h("["),alt:l,meta:l}),C({keyCode:221,keyCap:"]}",normal:l,ctrl:h("]"),alt:l,meta:l}),C({keyCode:220,keyCap:"\\|",normal:l,ctrl:h("\\"),alt:l,meta:l}),C({keyCode:20,keyCap:"[CAPS]",normal:n,ctrl:n,alt:n,meta:l}),C({keyCode:65,keyCap:"aA",normal:l,ctrl:h("A"),alt:l,meta:l}),C({keyCode:83,keyCap:"sS",normal:l,ctrl:h("S"),alt:l,meta:l}),C({keyCode:68,keyCap:"dD",normal:l,ctrl:h("D"),alt:l,meta:l}),C({keyCode:70,keyCap:"fF",normal:l,ctrl:k(h("F")),alt:k(l),meta:l}),C({keyCode:71,keyCap:"gG",normal:l,ctrl:h("G"),alt:l,meta:l}),C({keyCode:72,keyCap:"hH",normal:k(l),ctrl:h("H"),alt:l,meta:l}),C({keyCode:74,keyCap:"jJ",normal:k(l),ctrl:h("J"),alt:l,meta:l}),C({keyCode:75,keyCap:"kK",normal:k(l),ctrl:h("K"),alt:l,meta:l}),C({keyCode:76,keyCap:"lL",normal:k(l),ctrl:h("L"),alt:l,meta:l}),C({keyCode:186,keyCap:";:",normal:l,ctrl:s,alt:l,meta:l}),C({keyCode:222,keyCap:"'\"",normal:l,ctrl:s,alt:l,meta:l}),C({keyCode:13,keyCap:"[ENTER]",normal:"\r",ctrl:l,alt:l,meta:l}),C({keyCode:16,keyCap:"[SHIFT]",normal:n,ctrl:n,alt:n,meta:l}),C({keyCode:90,keyCap:"zZ",normal:l,ctrl:h("Z"),alt:l,meta:l}),C({keyCode:88,keyCap:"xX",normal:k(l),ctrl:h("X"),alt:l,meta:l}),C({keyCode:67,keyCap:"cC",normal:l,ctrl:h("C"),alt:l,meta:n}),C({keyCode:86,keyCap:"vV",normal:l,ctrl:h("V"),alt:l,meta:n}),C({keyCode:66,keyCap:"bB",normal:k(l),ctrl:k(h("B")),alt:k(l),meta:l}),C({keyCode:78,keyCap:"nN",normal:l,ctrl:k(h("N")),alt:l,meta:l}),C({keyCode:77,keyCap:"mM",normal:l,ctrl:h("M"),alt:l,meta:l}),C({keyCode:188,keyCap:",<",normal:l,ctrl:r(s,n),alt:l,meta:l}),C({keyCode:190,keyCap:".>",normal:l,ctrl:r(s,n),alt:l,meta:l}),C({keyCode:191,keyCap:"/?",normal:l,ctrl:a(h("_"),h("?")),alt:l,meta:l}),C({keyCode:17,keyCap:"[CTRL]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:18,keyCap:"[OPT]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:91,keyCap:"[LCMD]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:32,keyCap:" ",normal:l,ctrl:h("@"),alt:l,meta:l}),C({keyCode:93,keyCap:"[RCMD]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:42,keyCap:"[PRTSCR]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:145,keyCap:"[SCRLK]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:19,keyCap:"[BREAK]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:45,keyCap:"[INSERT]",normal:d+"2~",ctrl:l,alt:l,meta:l}),C({keyCode:36,keyCap:"[HOME]",normal:i+"OH",ctrl:l,alt:l,meta:l}),C({keyCode:33,keyCap:"[PGUP]",normal:d+"5~",ctrl:l,alt:l,meta:l}),C({keyCode:46,keyCap:"[DEL]",normal:d+"3~",ctrl:l,alt:l,meta:l}),C({keyCode:35,keyCap:"[END]",normal:i+"OF",ctrl:l,alt:l,meta:l}),C({keyCode:34,keyCap:"[PGDOWN]",normal:d+"6~",ctrl:l,alt:l,meta:l}),C({keyCode:38,keyCap:"[UP]",normal:k(p(0,c+"A")),ctrl:l,alt:l,meta:l}),C({keyCode:40,keyCap:"[DOWN]",normal:k(p(0,c+"B")),ctrl:l,alt:l,meta:l}),C({keyCode:39,keyCap:"[RIGHT]",normal:k(p(0,c+"C")),ctrl:l,alt:l,meta:l}),C({keyCode:37,keyCap:"[LEFT]",normal:k(p(0,c+"D")),ctrl:l,alt:l,meta:l}),C({keyCode:144,keyCap:"[NUMLOCK]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:12,keyCap:"[CLEAR]",normal:n,ctrl:n,alt:n,meta:n}),C({keyCode:96,keyCap:"[KP0]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:97,keyCap:"[KP1]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:98,keyCap:"[KP2]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:99,keyCap:"[KP3]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:100,keyCap:"[KP4]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:101,keyCap:"[KP5]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:102,keyCap:"[KP6]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:103,keyCap:"[KP7]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:104,keyCap:"[KP8]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:105,keyCap:"[KP9]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:107,keyCap:"[KP+]",normal:l,ctrl:g,alt:l,meta:g}),C({keyCode:109,keyCap:"[KP-]",normal:l,ctrl:g,alt:l,meta:g}),C({keyCode:106,keyCap:"[KP*]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:111,keyCap:"[KP/]",normal:l,ctrl:l,alt:l,meta:l}),C({keyCode:110,keyCap:"[KP.]",normal:l,ctrl:l,alt:l,meta:l})}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=65536,l=1<<17,n=1<<18,s=1<<19,r=1<<20;t.toUIKitFlags=function(e,t=!0){let a=0;return e.shiftKey&&(a|=l),e.ctrlKey&&(a|=n),e.altKey&&(a|=s),e.metaKey&&(a|=r),t&&(a|=o),a},t.UIKitFlagsToObject=function(e){return{shift:(e&l)==l,alt:(e&s)==s,ctrl:(e&n)==n,meta:(e&r)==r}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this._stack=[],this._map={},this.expandFn=e=>{if(0==e.keys.length)return;let t=[{keyCode:121,key:"F10",code:"F10",id:"121:0"},{keyCode:112,key:"F1",code:"F1",id:"112:0"},{keyCode:113,key:"F2",code:"F2",id:"113:0"},{keyCode:114,key:"F3",code:"F3",id:"114:0"},{keyCode:115,key:"F4",code:"F4",id:"115:0"},{keyCode:116,key:"F5",code:"F5",id:"116:0"},{keyCode:117,key:"F6",code:"F6",id:"117:0"},{keyCode:118,key:"F7",code:"F7",id:"118:0"},{keyCode:119,key:"F8",code:"F8",id:"119:0"},{keyCode:120,key:"F9",code:"F9",id:"120:0"}],a=e.keys.slice();for(var o=0;o<10;o++){let l=o+48+":0",n=t[o];e.keys=a.slice(),e.keys.push(l),e.action={type:"press",key:n,mods:0},this._expandBinding(e)}},this.expandCursor=e=>{if(0==e.keys.length)return;let t=[{keyCode:36,key:"HOME",code:"HOME",id:"36:0"},{keyCode:33,key:"PGUP",code:"PGUP",id:"33:0"},{keyCode:35,key:"END",code:"END",id:"35:0"},{keyCode:34,key:"PGDOWN",code:"PGDOWN",id:"34:0"}],a=["37:0","38:0","39:0","40:0"],o=e.keys.slice();for(var l=0;l<a.length;l++){let n=a[l],s=t[l];e.keys=o.slice(),e.keys.push(n),e.action={type:"press",key:s,mods:0},this._expandBinding(e)}},this._expandBinding=e=>{var t=e.keys.map(e=>e.split("-")[0]);if(0==t.length)return;var a=[t.sort()],o=0;var l=[{idLeft:"16:1",idRight:"16:2",loc:e.shiftLoc},{idLeft:"17:1",idRight:"17:2",loc:e.controlLoc},{idLeft:"18:1",idRight:"18:2",loc:e.optionLoc},{idLeft:"91:1",idRight:"93:0",loc:e.commandLoc}];for(let e of l)for(o=a.length-1;o>=0;o--){var n=a[o];let t=n.indexOf(e.idLeft);if(t<0&&(t=n.indexOf(e.idRight)),t<0)continue;if(1==e.loc){n[t]=e.idLeft;continue}if(2==e.loc){n[t]=e.idRight;continue}n[t]=e.idLeft;let l=n.slice();l[t]=e.idRight,a.push(l)}for(let t of a){let a=t.sort().join(":");this._map[a]=e.action}}}reset(){this._stack=[],this._map={}}match(e){let t=e.sort().join(":");return this._map[t]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,